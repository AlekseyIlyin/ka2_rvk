#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СтандартныеПодсистемы

// Включает/отключает использование свойств справочника.
//
Процедура УстановитьИспользованиеСвойств() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Константы.ИспользоватьРеглУчет.Получить();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств(
		"Справочник_Резервы", ПараметрыНабора);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Заполняет реквизиты параметров настройки счетов учета резервов, которые влияют на настройку,
// 	соответствующими им именам реквизитов аналитики учета.
//
// Параметры:
// 	СоответствиеИмен - Соответствие - ключом выступает имя реквизита, используемое в настройке счетов учета,
// 		значением является соответствующее имя реквизита аналитики учета.
// 
Процедура ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(СоответствиеИмен) Экспорт
	
	СоответствиеИмен.ВидРезервов = "Ссылка";
	
КонецПроцедуры

#КонецОбласти

Функция РезервЕжегодныхОтпусков() Экспорт
	
	Резерв = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Резервы.РезервЕжегодныхОтпусков");
	Если Резерв = Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		СоздатьЭлементы();
		Резерв = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Резервы.РезервЕжегодныхОтпусков");
	КонецЕсли;
	
	Возврат Резерв;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РезервыПредстоящихРасходов.РезервыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" ИЛИ ВидФормы = "ФормаСписка" Тогда
		
		Если НЕ Параметры.Свойство("Отбор") ИЛИ ТипЗнч(Параметры.Отбор) <> Тип("Структура") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли;
		
		КлючНазначенияИспользования =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КлючНазначенияИспользования", "РезервыПредстоящихРасходов");
		ТипыРезервов = Перечисления.ТипыРезервовПредстоящихРасходов.ТипыРезервовПоНазначению(КлючНазначенияИспользования);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры.Отбор, Новый Структура("ТипРезерва", ТипыРезервов), Ложь);
		
		Параметры.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
		
		СтандартнаяОбработка = Ложь;
		Если ВидФормы = "ФормаВыбора" Тогда
			ВыбраннаяФорма = "ФормаВыбора";
		Иначе
			ВыбраннаяФорма = "ФормаСписка";
		КонецЕсли;
		
	ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
		
		СсылкаНаОбъект = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ключ"); // СправочникСсылка.Резервы
		ПараметрыВыбора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПараметрыВыбора", Новый Структура);
		ЗначениеКопирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ЗначениеКопирования");
		
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ТипРезерва = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ТипРезерва");
		ИначеЕсли ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			ТипРезерва = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеКопирования, "ТипРезерва");
		Иначе
			ТипРезерва = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыВыбора, "ТипРезерва", Перечисления.ТипыРезервовПредстоящихРасходов.Прочие);
		КонецЕсли;
		
		КлючНазначенияИспользования =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "КлючНазначенияИспользования", "РезервыПредстоящихРасходов");
		Если ТипРезерва = Перечисления.ТипыРезервовПредстоящихРасходов.ОплатаТруда
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения") Тогда
			КлючНазначенияИспользования = "РезервыПоОплатеТруда";
		КонецЕсли;
		
		Параметры.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаЭлемента";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЭлементы() Экспорт
	
	ОписаниеЭлемента = ОписаниеЭлемента();
	ОписаниеЭлемента.ИмяПредопределенныхДанных = "РезервЕжегодныхОтпусков";
	ОписаниеЭлемента.Наименование = НСтр("ru = 'Резерв ежегодных отпусков'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеЭлемента.ТипРезерва = Перечисления.ТипыРезервовПредстоящихРасходов.ОплатаТруда;
	СоздатьЭлементПоОписанию(ОписаниеЭлемента);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Функция ОписаниеЭлемента()
	Возврат Новый Структура("ИмяПредопределенныхДанных, ТипРезерва, Наименование");
КонецФункции

Процедура СоздатьЭлементПоОписанию(ОписаниеЭлемента)
	
	Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПредопределенныхДанных) Тогда
		
		СсылкаПредопределенного = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Резервы." + ОписаниеЭлемента.ИмяПредопределенныхДанных);
		Если ЗначениеЗаполнено(СсылкаПредопределенного) Тогда
			Элемент = СсылкаПредопределенного.ПолучитьОбъект();
		Иначе
			СсылкаНаОбъект = НайтиЭлементПоНаименованию(ОписаниеЭлемента.Наименование);
			Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
				Элемент = СсылкаНаОбъект.ПолучитьОбъект();
			Иначе
				Элемент = СоздатьЭлемент();
			КонецЕсли;
			Элемент.ИмяПредопределенныхДанных = ОписаниеЭлемента.ИмяПредопределенныхДанных;
		КонецЕсли;
		
	Иначе
		
		СсылкаНаОбъект = НайтиЭлементПоНаименованию(ОписаниеЭлемента.Наименование);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Элемент = СсылкаНаОбъект.ПолучитьОбъект();
		Иначе
			Элемент = СоздатьЭлемент();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Элемент, ОписаниеЭлемента);
	Элемент.Записать();
	
КонецПроцедуры

Функция НайтиЭлементПоНаименованию(НаименованиеЭлемента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеЭлемента);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Резервы.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Резервы.Наименование = &Наименование
	|			ТОГДА 1
	|		КОГДА Резервы.Наименование ПОДОБНО &Наименование
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтепеньСовпадения
	|ИЗ
	|	Справочник.Резервы КАК Резервы
	|ГДЕ
	|	(Резервы.Наименование = &Наименование
	|			ИЛИ Резервы.Наименование ПОДОБНО &Наименование)
	|	И НЕ Резервы.ПометкаУдаления
	|	И НЕ Резервы.Предопределенный
	|	И Резервы.ИмяПредопределенныхДанных = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтепеньСовпадения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВозвращаемоеЗначение = Справочники.Резервы.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		Если Выборка.СтепеньСовпадения <> 0 Тогда
			ВозвращаемоеЗначение = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецЕсли