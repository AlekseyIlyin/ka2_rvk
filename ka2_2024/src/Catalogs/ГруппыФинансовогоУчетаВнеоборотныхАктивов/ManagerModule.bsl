#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ЗначениеПоУмолчанию(ВидАктива) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ГруппыФинансовогоУчетаВнеоборотныхАктивов.Ссылка
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов КАК ГруппыФинансовогоУчетаВнеоборотныхАктивов
	|ГДЕ
	|	ГруппыФинансовогоУчетаВнеоборотныхАктивов.ВидАктива = &ВидАктива
	|	И НЕ ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидАктива", ВидАктива);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка();
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка();
	КонецЕсли; 

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Заполняет реквизиты параметров настройки счетов учета внеоборотных активов, которые влияют на настройку,
// 	соответствующими им именам реквизитов аналитики учета.
//
// Параметры:
// 	СоответствиеИмен - Соответствие - ключом выступает имя реквизита, используемое в настройке счетов учета,
// 		значением является соответствующее имя реквизита аналитики учета.
// 
Процедура ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(СоответствиеИмен) Экспорт
	
	СоответствиеИмен.ВидАктива = "ВидАктива";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.19.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("263c62ad-78b3-451c-9c5b-f996f79735fd");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Обновляет справочник ""Группы финансового учета внеоборотных активов"":
								  |- Изменяет вид актива на ""Основные средства, предоставляемые в аренду"", если выбран счет учета 03.01'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	//++ Локализация
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.ВидАктива <> ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновныеСредстваПредоставляемыеВАренду)
	|	И НЕ ДанныеСправочника.ЭтоГруппа
	|";

	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	
	СписокСсылок = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СчетаУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СтруктураЗначенийПоАналитикеУчета(
						Выборка.Ссылка, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СтоимостьВНА"));
						
		Если СчетаУчета.СчетУчета_СтоимостьВНА = ПланыСчетов.Хозрасчетный.МЦвОрганизации
			ИЛИ СчетаУчета.СчетУчета_СтоимостьВНА = ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеВладение
			ИЛИ СчетаУчета.СчетУчета_СтоимостьВНА = ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеПользование Тогда
			
			СписокСсылок.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;

	Если СписокСсылок.Количество() <> 0 Тогда
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокСсылок);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ОбработатьДанныеДляПереходаНаНовуюВерсию");

	ПолноеИмяОбъекта = "Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ГруппыФинансовогоУчетаВнеоборотныхАктивов
			Если СправочникОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			//++ Локализация
			Если СправочникОбъект.ВидАктива <> Перечисления.ВидыВнеоборотныхАктивов.ОсновныеСредстваПредоставляемыеВАренду
				И НЕ СправочникОбъект.ЭтоГруппа Тогда
				
				СчетаУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СтруктураЗначенийПоАналитикеУчета(
								Выборка.Ссылка, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СтоимостьВНА"));
				
				Если СчетаУчета.СчетУчета_СтоимостьВНА = ПланыСчетов.Хозрасчетный.МЦвОрганизации
					ИЛИ СчетаУчета.СчетУчета_СтоимостьВНА = ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеВладение
					ИЛИ СчетаУчета.СчетУчета_СтоимостьВНА = ПланыСчетов.Хозрасчетный.МЦ_ПредоставленныеВоВременноеПользование Тогда
					
					СправочникОбъект.ВидАктива = Перечисления.ВидыВнеоборотныхАктивов.ОсновныеСредстваПредоставляемыеВАренду;
					
				КонецЕсли;
				
			КонецЕсли;
			//-- Локализация
			
			Если СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
 	ВнеоборотныеАктивыСлужебный.ПроверитьВыполнениеОбработчика(
 		ПроблемныхОбъектов, 
 		ОбъектовОбработано, 
 		ПолноеИмяОбъекта);
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ОбъектовОбработано);	
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
