#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Возврат Результат;
КонецФункции

//++ НЕ УТ

// Возвращает параметры настройки счетов учета в документе.
//  
// Возвращаемое значение:
//  см. НастройкаСчетовУчетаСервер.ПараметрыНастройки.
//
Функция ПараметрыНастройкиСчетовУчета() Экспорт
	
	ПараметрыНастройки = НастройкаСчетовУчетаСервер.ПараметрыНастройки();
	
	ПараметрыНастройки.ДоступностьПоОперации = Истина;
	ПараметрыНастройки.ПутьКДанным = "Объект.Списание";
	ПараметрыНастройки.ТипСтатьи   = "ТипСтатьи";
	ПараметрыНастройки.Организация = "";
	
	ПараметрыНастройки.ЭлементыФормы.Добавить("СписаниеПредставлениеОтраженияОперации");
	
	Возврат ПараметрыНастройки;
	
КонецФункции
//-- НЕ УТ

// Возвращает параметры выбора статей и аналитик.
// 
// Возвращаемое значение:
//  см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики.
//
Функция ПараметрыВыбораСтатейИАналитик(НазначениеПравила) Экспорт 
	
	//++ НЕ УТ
	Если НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства Тогда
		
		// Для правила На партии.
		ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
		ПараметрыВыбора.ПутьКДанным = "Объект.Списание";
		ПараметрыВыбора.Статья      = "СтатьяРасходов";
		ПараметрыВыбора.ТипСтатьи   = "ТипСтатьи";
		
		ПараметрыВыбора.АналитикаРасходов 		 = "АналитикаРасходов";
		ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
		
		ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
		
		МассивВариантов = Новый Массив;
		МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
		МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
		МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
		МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
		
		ПараметрыВыбора.ОтборСтатейРасходов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		ПараметрыВыбора.ОтборСтатейРасходов.ВариантРаспределенияРасходов = МассивВариантов;
		
		ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
		
		ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СписаниеСтатьяРасходов");
		ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("СписаниеАналитикаРасходов");
		ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("СписаниеАналитикаАктивовПассивов");
	
	КонецЕсли;
	//-- НЕ УТ
	
	Если НазначениеПравила = Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП Тогда
		// Для правила РБП.
		ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
		ПараметрыВыбора.ПутьКДанным = "Объект";
		ПараметрыВыбора.Статья      = "СтатьяСписанияРБП";
		
		ПараметрыВыбора.АналитикаРасходов 	= "АналитикаРасходовРБП";	
		ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
		
		ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяСписанияРБП");
		ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовРБП");
	
	КонецЕсли;
	
	Возврат ПараметрыВыбора;
	
КонецФункции

//++ НЕ УТ

// Возвращает представление правила распределения по типу базы распределения.
// Параметры:
//	БазаРаспределения - ПеречислениеСсылка.ТипыБазыРаспределенияРасходов - база распределения.
// Возвращаемое значение:
//	Строка - представление базы распределения.
Функция ПолучитьПредставлениеПравила(БазаРаспределения) Экспорт
	
	ПредставлениеПравила = "";
	Если БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
		ПредставлениеПравила = НСтр("ru='Количество работ:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда Тогда
		ПредставлениеПравила = НСтр("ru='Нормативная стоимость работ:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаРасходовНаОплатуТруда Тогда
		ПредставлениеПравила = НСтр("ru='Стоимость работ:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов Тогда
		ПредставлениеПравила = НСтр("ru='Количество материалов:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
		ПредставлениеПравила = НСтр("ru='Объем материалов:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхЗатрат Тогда
		ПредставлениеПравила = НСтр("ru='Стоимость материалов:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов Тогда
		ПредставлениеПравила = НСтр("ru='Вес материалов:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.СуммаМатериальныхИТрудозатрат Тогда
		ПредставлениеПравила = НСтр("ru='Стоимость материалов и оплаты труда:'");		
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукции
		Или БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукцииСУчетомБудущихВыпусков Тогда
		ПредставлениеПравила = НСтр("ru='Вес продукции:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукции
		Или БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукцииСУчетомБудущихВыпусков Тогда
		ПредставлениеПравила = НСтр("ru='Количество продукции:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукции
		Или БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукцииСУчетомБудущихВыпусков Тогда
			ПредставлениеПравила = НСтр("ru='Объем продукции:'");
	ИначеЕсли БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции 
		Или БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукцииСУчетомБудущихВыпусков Тогда
			ПредставлениеПравила = НСтр("ru='Плановая стоимость продукции:'");
	КонецЕсли;
	
	ШаблонНаименования = "%1 %2";
	Возврат СтрШаблон(ШаблонНаименования, СокрЛП(ПредставлениеПравила),
		НСтр("ru = 'установлен дополнительный отбор.'"));
	
КонецФункции

//-- НЕ УТ

// Возвращает назначение правила, соответствующее варианту распределения.
// 
// Параметры:
//  ВариантРаспределенияРасходов - ПеречислениеСсылка.ВариантыРаспределенияРасходов - Вариант распределения расходов
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.НазначениеПравилРаспределенияРасходов - назначение правила, соответствующее варианту распределения
Функция ПолучитьНазначениеПравилаПоВариантуРаспределения(ВариантРаспределенияРасходов) Экспорт
	
	Если ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаСебестоимостьТоваров;
	ИначеЕсли ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП;
	//++ НЕ УТ
	ИначеЕсли ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаСебестоимостьПроизводства;
	ИначеЕсли ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства;
	ИначеЕсли ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаОбъектыВозникновенияЗатрат Тогда
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаОВЗ;
	//-- НЕ УТ
	Иначе
		Возврат Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" ИЛИ Не ВидФормы = "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ключ") Тогда
		
		РеквизитыКПолучению = Новый Массив;
		РеквизитыКПолучению.Добавить("НазначениеПравила");
		//++ НЕ УТ
		РеквизитыКПолучению.Добавить("Устаревшее");
		//-- НЕ УТ
		ЗначенияРеквизитов = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Параметры.Ключ, РеквизитыКПолучению);
		
		//++ НЕ УТ
		Если ЗначенияРеквизитов.Устаревшее Тогда
			ВыбраннаяФорма = "УстаревшаяФормаПравила";
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		//-- НЕ УТ
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		ЗначенияРеквизитов = Параметры.ЗначениеКопирования;
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения")
		И Параметры.ЗначенияЗаполнения.Свойство("НазначениеПравила") Тогда
		ЗначенияРеквизитов = Параметры.ЗначенияЗаполнения;
	Иначе
		Возврат;
	КонецЕсли;
	
	НаФР = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат");
	НаРБП = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаРБП");
	//++ НЕ УТ
	Материалы = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеМатериаловИРабот");
	НаПартии = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства");
	ПоПодразделениям = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоПодразделениям");
	НаОВЗ = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаОВЗ");
	//-- НЕ УТ
	НаСебестоимость = ПредопределенноеЗначение("Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаСебестоимостьТоваров");
	
	ФормыПоНазначению = Новый Соответствие;
	ФормыПоНазначению.Вставить(НаФР, "ФормаНастроекФР");
	ФормыПоНазначению.Вставить(НаРБП, "ФормаНастроекРБП");
	//++ НЕ УТ
	ФормыПоНазначению.Вставить(НаПартии, "ФормаНастроекНаПартии");
	ФормыПоНазначению.Вставить(ПоПодразделениям, "ФормаПоказателя");
	ФормыПоНазначению.Вставить(НаОВЗ, "ФормаПоказателя");
	ФормыПоНазначению.Вставить(Материалы, "УстаревшаяФормаПравила");
	//-- НЕ УТ
	ФормыПоНазначению.Вставить(НаСебестоимость, "ФормаНастроекНаСебестоимостьТоваров");
		
	ВыбраннаяФорма = ФормыПоНазначению.Получить(ЗначенияРеквизитов.НазначениеПравила);
	
	Если ЗначениеЗаполнено(ВыбраннаяФорма) Тогда
		
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УстановитьНазначениеПравилаПоВариантуРаспределения(Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТ

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПравилаРаспределенияРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.20.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dcc2da95-31b3-422e-a568-957bc29f0f4a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ПравилаРаспределенияРасходов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Обновление справочника ""Правила распределения расходов"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- замена аналитики активов/пассивов с перечисления ""Типы налогов"" на справочник ""Виды налогов и взносов"".'"));
	
	Обработчик.Комментарий = СтрСоединить(СписокОписаний, Символы.ПС);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаРаспределенияРасходов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов.Списание КАК ПравилаРаспределенияРасходов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПравилаРаспределенияРасходов.АналитикаАктивовПассивов) = ТИП(Перечисление.УдалитьТипыНалогов)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ИсключенияПриОбновлении = Новый Массив;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось обработать справочник ""Правила распределения расходов"" по обработчику:'"));
	СписокОписаний.Добавить(НСтр("ru = '- замена аналитики активов/пассивов с типом перечисление типы налогов на справочник виды налогов и взносов';"));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаЭлементов
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭлементов.Ссылка КАК Ссылка,
		|	ДанныеСправочника.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ТаблицаЭлементов КАК ТаблицаЭлементов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаРаспределенияРасходов КАК ДанныеСправочника
		|		ПО ТаблицаЭлементов.Ссылка = ДанныеСправочника.Ссылка
		|";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Справочник = Запрос.Выполнить().Выбрать();
	
	Пока Справочник.Следующий() Цикл
		
		ПричинаИсключения = 0;
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = 1; // Блокировка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Справочник.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Справочник.Ссылка, Справочник.ВерсияДанных, Параметры.Очередь); // СправочникОбъект
			
			ПричинаИсключения = 2; // ПлохиеДанные
			Рекомендация = НСтр("ru = 'Проверьте данные справочника вручную.'");
			
			ОбъектИзменен = Ложь;
			
			Если СправочникОбъект <> Неопределено Тогда
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(СправочникОбъект, "Списание.АналитикаАктивовПассивов");
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			ПричинаИсключения = 3; // Запись
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Справочник.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Справочник.Ссылка);
			
			Если ПричинаИсключения = 2 Тогда
				
				ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(
					Справочник.Ссылка, Рекомендация, ИнформацияОбОшибке());
				ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
				
			ИначеЕсли ПричинаИсключения = 3 Тогда
				
				ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
					ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
//-- НЕ УТ


#КонецОбласти

#Область Прочее

Процедура УстановитьНазначениеПравилаПоВариантуРаспределения(Параметры) 
	
	Если Параметры.Свойство("ВариантРаспределенияРасходов") Тогда
		Если НЕ Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли;
		Если НЕ Параметры.Отбор.Свойство("НазначениеПравила") Тогда
			Параметры.Отбор.Вставить("НазначениеПравила", ПолучитьНазначениеПравилаПоВариантуРаспределения(Параметры.ВариантРаспределенияРасходов));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#КонецЕсли
