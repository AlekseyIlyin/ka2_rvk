#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Соответствие со списком реквизитов, по которым определяется уникальность ключа
// 
// Возвращаемое значение:
//   Соответствие - ключ - имя реквизита 
//
Функция КлючевыеРеквизиты() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("Код");
	Результат.Вставить("Документ");
	
	Возврат Результат;
	
КонецФункции

// Возвращает партию производства с полями, соответствующими указанным.
//
// Параметры:
//	ПоляПартии - Структура, СтрокаТаблицыЗначений - поля партии производства.
//		Обязательными для заполнения полями выступают "Документ", "Организация", "Номенклатура",
//		остальные поля являются необязательными и в случае отсутствия будут заполнены пустыми значениями.
//	ПроверятьПередСозданием	- Булево - флаг необходимости поиска партии производства перед созданием новой.
//	ОбновлятьСуществующие	- Булево - флаг необходимости обновления полей существующих партий производства.
//
// Возвращаемое значение:
//	СправочникСсылка.ПартииПроизводства - найденная или сформированная партия производства.
//
Функция ПолучитьПартиюПроизводства(ПоляПартии = Неопределено,
								ПроверятьПередСозданием = Истина,
								ОбновлятьСуществующие = Ложь) Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	// Заполним все реквизиты партии производства.
	СтруктураРеквизитовПартии = Новый Структура("Код, Документ, Ссылка", 0, Неопределено, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовПартии, ПоляПартии);
	
	Для Каждого МетаРеквизит Из Метаданные.Справочники.ПартииПроизводства.Реквизиты Цикл
		
		СтруктураРеквизита = Новый Структура(МетаРеквизит.Имя);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ПоляПартии); // в ПоляПартии такого свойства может и не быть
		
		СтруктураРеквизитовПартии.Вставить(
			МетаРеквизит.Имя,
			МетаРеквизит.Тип.ПривестиЗначение(СтруктураРеквизита[МетаРеквизит.Имя])); // а в СтруктураРеквизита такое свойство точно есть
		
	КонецЦикла;
	
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ПроверятьПередСозданием Или ОбновлятьСуществующие Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ПартииПроизводства");
			ЭлементБлокировки.УстановитьЗначение("Код", СтруктураРеквизитовПартии.Код);
			ЭлементБлокировки.УстановитьЗначение("Документ", СтруктураРеквизитовПартии.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
		
		КонецЕсли;
		
		// Если необходимо - попытаемся найти подходящую партию.
		ДанныеПартии = Новый Структура;
		ДанныеПартии.Вставить("ПартияПроизводства", Справочники.ПартииПроизводства.ПустаяСсылка());
		
		Если ПроверятьПередСозданием Тогда
			СтруктураОтбора = Новый Структура(ПоляИдентификацииПартииПроизводства());
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтруктураРеквизитовПартии);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка КАК ПартияПроизводства
			|ИЗ
			|	Справочник.ПартииПроизводства КАК Таблица
			|ГДЕ
			|	НЕ Таблица.ПометкаУдаления
			|	И &УсловиеЗапроса
			|";
			
			УсловиеЗапроса = "ИСТИНА";
			
			Для Каждого КлючИЗначение Из СтруктураОтбора Цикл
				
				Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				УсловиеЗапроса = УсловиеЗапроса + "
					|	И Таблица." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ;
				
			КонецЦикла;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗапроса", УсловиеЗапроса);
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ДанныеПартии, Выборка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеПартии.ПартияПроизводства)
			ИЛИ ОбновлятьСуществующие Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Если НЕ ЗначениеЗаполнено(ДанныеПартии.ПартияПроизводства) Тогда
				
				// Партии производства нет в справочнике - создадим элемент справочника.
				СправочникОбъект = Справочники.ПартииПроизводства.СоздатьЭлемент();
				
				Если ЗначениеЗаполнено(СтруктураРеквизитовПартии.Ссылка) Тогда
					СправочникОбъект.УстановитьСсылкуНового(СтруктураРеквизитовПартии.Ссылка);
				КонецЕсли;
				
			Иначе
				СправочникОбъект = ДанныеПартии.ПартияПроизводства.ПолучитьОбъект();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СправочникОбъект, СтруктураРеквизитовПартии);
			СправочникОбъект.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			ДанныеПартии.ПартияПроизводства = СправочникОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ДанныеПартии.ПартияПроизводства;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПредставлениеГруппыЗатрат = ГруппыЗатратСервер.ПредставлениеГруппыЗатрат(СтруктураРеквизитовПартии);
		НаименованиеПартии = НаименованиеПартииПроизводства(СтруктураРеквизитовПартии, ПредставлениеГруппыЗатрат);
		
		ТекстСообщения = НСтр("ru = 'Не удалось создать партию производства с параметрами: %ПартияПроизводства% по причине: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПартияПроизводства%", НаименованиеПартии);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Справочник'", КодОсновногоЯзыка)
				+"." + НСтр("ru = 'Партии производства'", КодОсновногоЯзыка)
				+ "." + НСтр("ru = 'Получить партию производства'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ПартииПроизводства,,
			ТекстСообщения);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Создает или обновляет данные партии производства при записи документа.
//
// Параметры:
//  ПартияПроизводства		 - СправочникСсылка.ПартииПроизводства	 - ссылка на партию производства.
//  ПоляПартии				 - Структура							 - описание партии производства.
//  ОбновлятьСуществующие	 - Булево								 - признак, необходимо обновлять существующие партии.
// 
// Возвращаемое значение:
//  Структура -  Создать обновить партию производства:
// 	* НоваяПартияПроизводства - Булево - создана новая партия производства
// 	* НомерПартииПроизводства - Число - номер партии производства
//
Функция СоздатьОбновитьПартиюПроизводства(ПартияПроизводства, ПоляПартии = Неопределено, ОбновлятьСуществующие = Истина) Экспорт
	
	Результат = Новый Структура("НоваяПартияПроизводства, НомерПартииПроизводства", Ложь, -1);
	
	Если Не ЗначениеЗаполнено(ПартияПроизводства) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИменаРеквизитов = Новый Структура("Код, Документ, Ссылка, ПометкаУдаления");
	
	СтруктураРеквизитовПартии = Новый Структура;
	СтруктураРеквизитовПартии.Вставить("Код", 0);
	СтруктураРеквизитовПартии.Вставить("Документ", Неопределено);
	СтруктураРеквизитовПартии.Вставить("Ссылка", Неопределено);
	СтруктураРеквизитовПартии.Вставить("ПометкаУдаления", ПоляПартии.ПометкаУдаления);
	
	Для Каждого МетаРеквизит Из Метаданные.Справочники.ПартииПроизводства.Реквизиты Цикл
		
		ИменаРеквизитов.Вставить(МетаРеквизит.Имя);
		
		СтруктураРеквизита = Новый Структура(МетаРеквизит.Имя);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизита, ПоляПартии);
		
		СтруктураРеквизитовПартии.Вставить(
			МетаРеквизит.Имя,
			МетаРеквизит.Тип.ПривестиЗначение(СтруктураРеквизита[МетаРеквизит.Имя]));
		
	КонецЦикла;
	
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыПартии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПартияПроизводства, ИменаРеквизитов);
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.НомерПартииПроизводства = РеквизитыПартии.Код;
	Результат.НоваяПартияПроизводства = (РеквизитыПартии.Код = Неопределено);
	
	Если НЕ Результат.НоваяПартияПроизводства
		И (НЕ ОбновлятьСуществующие ИЛИ СтруктурыРеквизитовПартийРавны(РеквизитыПартии, СтруктураРеквизитовПартии)) Тогда
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Результат.НоваяПартияПроизводства Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ПартииПроизводства");
		ЭлементБлокировки.УстановитьЗначение("Документ", СтруктураРеквизитовПартии.Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Таблица.Код), 0) + 1 КАК НомерПартииПроизводства
		|ИЗ
		|	Справочник.ПартииПроизводства КАК Таблица
		|ГДЕ
		|	Таблица.Документ = &Документ
		|");
		Запрос.УстановитьПараметр("Документ", СтруктураРеквизитовПартии.Документ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Результат.НомерПартииПроизводства = Выборка.НомерПартииПроизводства;
		
		СправочникОбъект = Справочники.ПартииПроизводства.СоздатьЭлемент();
		СправочникОбъект.УстановитьСсылкуНового(ПартияПроизводства);
		
	Иначе
		СправочникОбъект = ПартияПроизводства.ПолучитьОбъект();
	КонецЕсли;
	
	СтруктураРеквизитовПартии.Код = Результат.НомерПартииПроизводства;
	ЗаполнитьЗначенияСвойств(СправочникОбъект, СтруктураРеквизитовПартии);
	
	
	СправочникОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Процедура получает данные для формирования партий производства и формирует их.
// 
// Параметры:
//	Запрос							- Запрос - запрос, с установленными для формирования партий параметрами.
//	ТекстВыборкаПолейПартий					- Строка -
//		текст запроса формирования временной таблицы ВТПоляПартийПроизводства с полями
//			Документ
//			ГруппировкаЗатрат
//			НомерГруппыЗатрат
//			Организация
//			ВнутренняяПереработка
//			ТипПроцесса
//			НаправлениеДеятельности
//			ВидДеятельностиНДС
//			ОсновноеИзделиеНоменклатура
//			ОсновноеИзделиеХарактеристика
//			Номенклатура
//			Характеристика
//			ГруппаПродукции
//			Спецификация
//			Назначение.
//	ПроверятьПередСозданием			- Булево - флаг необходимости поиска партии производства перед созданием новой.
//	ОбновлятьСуществующие			- Булево - флаг необходимости обновления полей существующих партий производства.
//
Процедура СформироватьПартииПроизводства(Запрос,
										ТекстВыборкаПолейПартий,
										ПроверятьПередСозданием = Истина,
										ОбновлятьСуществующие = Ложь) Экспорт
	
	МассивТекстовЗапросов = Новый Массив;
	МассивТекстовЗапросов.Добавить(ТекстЗапросаНомераСтрокОсновныхИзделий());
	МассивТекстовЗапросов.Добавить(ТекстВыборкаПолейПартий);
	
	МассивТекстовЗапросов.Добавить(ТекстЗапросаКорректныеПоляПартийПроизводства());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаТаблицаПартийПроизводстваПредварительная());
	МассивТекстовЗапросов.Добавить(ТекстЗапросаТаблицаПартийПроизводстваКОбработке(ОбновлятьСуществующие));
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("АналитическийУчетПоГруппамПродукции",
		ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции"));
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаПартийКОбработке = Результат[Результат.ВГраница()].Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Если значение колонки равняется Неопределено, то описание типов значений этой колонки будет пустым.
	// В этом случае в запросах платформа не сможет выбрать значения из нетипизированной колонки.
	// Для обхода этой ситуации создадим в таблице колонку с "правильным" типом значений и подменим ей исходную колонку.
	ТаблицаПартийКОбработке.Колонки.Добавить("ДокументТипизированный",
		Метаданные.Справочники.ПартииПроизводства.Реквизиты.Документ.Тип);
	
	Для Каждого ТекСтр Из ТаблицаПартийКОбработке Цикл
		
		
		ТекСтр.ПартияПроизводства = ПолучитьПартиюПроизводства(ТекСтр, ПроверятьПередСозданием, ОбновлятьСуществующие);
		ТекСтр.ДокументТипизированный = ТекСтр.Документ;
		
	КонецЦикла;
	
	ТаблицаПартийКОбработке.Колонки.Удалить("Документ");
	ТаблицаПартийКОбработке.Колонки.ДокументТипизированный.Имя = "Документ";
	
КонецПроцедуры

// Создает новые партии для заданного списка данных Этапов производства.
//
// Параметры:
//	Партии - ТаблицаЗначений - Данные партий этапов производства.
//
Процедура СформироватьПартииПроизводстваДляСпискаЭтапов(Партии) Экспорт
	
	ГруппыПартий = Новый Соответствие; // Ключ - Документ, Значение - массив строк таблицы Партии
	Для каждого Строка Из Партии Цикл
		Если ГруппыПартий[Строка.Документ] = Неопределено Тогда
			ГруппыПартий.Вставить(Строка.Документ, Новый Массив);
		КонецЕсли;
		ГруппыПартий[Строка.Документ].Добавить(Строка);
	КонецЦикла;
	
	ТабличныеЧасти = Новый Массив;
	Для каждого ТабличнаяЧасть Из Метаданные.Справочники.ПартииПроизводства.ТабличныеЧасти Цикл
		Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты" Тогда
			Продолжить;
		ИначеЕсли Партии.Колонки.Найти(ТабличнаяЧасть.Имя) <> Неопределено Тогда
			ТабличныеЧасти.Добавить(ТабличнаяЧасть.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Таблица.Код), 0) + 1 КАК Код
		|ИЗ
		|	Справочник.ПартииПроизводства КАК Таблица
		|ГДЕ
		|	Таблица.Документ = &Документ");
	
	Для каждого КлючИЗначение Из ГруппыПартий Цикл
		
		ПартииДокумента = КлючИЗначение.Значение;
		ДанныеПартии = ПартииДокумента[ПартииДокумента.ВГраница()];
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ПартииПроизводства");
			ЭлементБлокировки.УстановитьЗначение("Документ", ДанныеПартии.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Документ", ДанныеПартии.Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Код = Выборка.Код;
			
			ДанныеПартии.Код = Код + ПартииДокумента.ВГраница();
		
			УстановитьПривилегированныйРежим(Истина);
			СправочникОбъект = Справочники.ПартииПроизводства.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СправочникОбъект, ДанныеПартии);
			Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				Если ЗначениеЗаполнено(ДанныеПартии[ТабличнаяЧасть]) Тогда
					СправочникОбъект[ТабличнаяЧасть].Загрузить(ДанныеПартии[ТабличнаяЧасть]);
				КонецЕсли;
			КонецЦикла;
			СправочникОбъект.Записать();
			УстановитьПривилегированныйРежим(Ложь);
				
			ДанныеПартии.ПартияПроизводства = СправочникОбъект.Ссылка;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ТекстСообщения = НСтр("ru = 'Не удалось создать партию производства с параметрами: %ПартияПроизводства% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПартияПроизводства%",  НаименованиеПартииПроизводства(
				ДанныеПартии, ГруппыЗатратСервер.ПредставлениеГруппыЗатрат(ДанныеПартии)));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Справочник'", КодОсновногоЯзыка)
					+"." + НСтр("ru = 'Партии производства'", КодОсновногоЯзыка)
					+ "." + НСтр("ru = 'Получить партию производства для списка этапов'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ПартииПроизводства,,
				ТекстСообщения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			
			Продолжить;
			
		КонецПопытки;
		
		Для Индекс = 0 По ПартииДокумента.ВГраница()-1 Цикл
			
			ДанныеПартии = ПартииДокумента[Индекс];
			
			Попытка
				ДанныеПартии.Код = Код + Индекс;
			
				УстановитьПривилегированныйРежим(Истина);
				СправочникОбъект = Справочники.ПартииПроизводства.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(СправочникОбъект, ДанныеПартии);
				Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
					Если ЗначениеЗаполнено(ДанныеПартии[ТабличнаяЧасть]) Тогда
						СправочникОбъект[ТабличнаяЧасть].Загрузить(ДанныеПартии[ТабличнаяЧасть]);
					КонецЕсли;
				КонецЦикла;
				СправочникОбъект.Записать();
				УстановитьПривилегированныйРежим(Ложь);
					
				ДанныеПартии.ПартияПроизводства = СправочникОбъект.Ссылка;
			Исключение
				
				КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				ТекстСообщения = НСтр("ru = 'Не удалось создать партию производства с параметрами: %ПартияПроизводства% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПартияПроизводства%",  НаименованиеПартииПроизводства(
					ДанныеПартии, ГруппыЗатратСервер.ПредставлениеГруппыЗатрат(ДанныеПартии)));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Справочник'", КодОсновногоЯзыка)
						+"." + НСтр("ru = 'Партии производства'", КодОсновногоЯзыка)
						+ "." + НСтр("ru = 'Получить партию производства для списка этапов'", КодОсновногоЯзыка),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ПартииПроизводства,,
					ТекстСообщения);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает номер партии производства.
// 
// Параметры:
// 	ПартияПроизводства - СправочникСсылка.ПартииПроизводства	 - партия производства.
// Возвращаемое значение:
// 	Число - номер партии производства.
Функция НомерПартииПроизводства(ПартияПроизводства) Экспорт
	
	НомерПартии = -1;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Код КАК НомерПартии
	|ИЗ
	|	Справочник.ПартииПроизводства КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ПартияПроизводства);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НомерПартии = Выборка.НомерПартии;
		
	КонецЕсли;
	
	Возврат НомерПартии;
	
КонецФункции

// Возвращает наименование партии производства.
//
// Параметры:
//  СтруктураПартии				- СправочникОбъект.ПартииПроизводства, Структура - партия производства.
//  ПредставлениеГруппыЗатрат	- Строка - представление группы затрат партии производства.
// 
// Возвращаемое значение:
//  Строка - наименование партии производства.
//
Функция НаименованиеПартииПроизводства(СтруктураПартии, ПредставлениеГруппыЗатрат = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ПредставлениеГруппыЗатрат) Тогда
		ПредставлениеГруппыЗатрат = ГруппыЗатратСервер.ПредставлениеГруппыЗатрат(СтруктураПартии);
	КонецЕсли;
	
	СписокРеквизитов = "Номер, Дата";
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПартии.Документ, СписокРеквизитов);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтруктураПартии.Документ);
	
	ПредставлениеДокумента = МенеджерОбъекта.ПредставлениеОбъектаНаОсновномЯзыке();
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(РеквизитыДокумента.Номер);
	
	ПредставлениеПартии = НСтр("ru = '%ПредставлениеДокумента% (%Номер%.%НомерГруппы%, %Дата%, %Организация%);'");
	Если ЗначениеЗаполнено(СтруктураПартии.ГруппировкаЗатрат) Тогда
		ПредставлениеПартии = ПредставлениеПартии + " "
			+ НСтр("ru = 'Группа затрат: %ГруппаЗатрат%'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%ПредставлениеДокумента%",	ПредставлениеДокумента);
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%Номер%",					НомерДокумента);
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%НомерГруппы%",				Строка(СтруктураПартии.Код));
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%Дата%",					Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%Организация%",				СтруктураПартии.Организация);
	ПредставлениеПартии = СтрЗаменить(ПредставлениеПартии, "%ГруппаЗатрат%",			ПредставлениеГруппыЗатрат);
	
	Возврат ПредставлениеПартии;
	
КонецФункции



// Текст статуса "В работе".
// 
// Возвращаемое значение:
//  Строка
Функция ТекстСтатусаВРаботе() Экспорт
	
	Возврат НСтр("ru = 'В работе'");
	
КонецФункции

// Текст статуса "Завершена".
// 
// Возвращаемое значение:
//  Строка
Функция ТекстСтатусаЗавершена() Экспорт
	
	Возврат НСтр("ru = 'Завершена'");
	
КонецФункции

#Область СтандартныеПодсистемыКоманды

// Заполняет список команд создания на основании.
// 
// Параметры:
// 	КомандыСозданияНаОсновании - ТаблицаЗначений - перечень команд
// 	Параметры - Структура - параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Добавляет команду создания объекта на основании.
// 
// Параметры:
// 	КомандыСозданияНаОсновании - ТаблицаЗначений - перечень команд
// Возвращаемое значение:
// 	Неопределено, СтрокаТаблицыЗначений - Добавленная Команда.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
// 	КомандыОтчетов - ТаблицаЗначений - перечень команд
// 	Параметры - Структура - параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

Процедура ПриОпределенииКомандПодключенныхКОбъекту(Команды) Экспорт
	
	КомандаОтчета = Команды.Найти("СвязанныеДокументы", "Вид");
	Если Не КомандаОтчета = Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаОтчета,
			"ТипПроцесса",
			Перечисления.ТипыПроизводственныхПроцессов.ПустаяСсылка(),
			ВидСравненияКомпоновкиДанных.НеРавно);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает перечень полей, идентифицирующих партию производства
//
// Возвращаемое значение:
//	Строка - перечень полей, идентифицирующих партию производства.
//
Функция ПоляИдентификацииПартииПроизводства() Экспорт
	
	Возврат "Документ, Код";
	
КонецФункции

// Формирует структуру для описания полей партии производства
// 
// Возвращаемое значение:
//  Структура - структура полей партии производства
//
Функция ОписаниеПартииПроизводства() Экспорт
	
	СтруктураРеквизитовПартии = Новый Структура;
	СтруктураРеквизитовПартии.Вставить("ПометкаУдаления", Ложь);
	
	Для Каждого МетаРеквизит Из Метаданные.Справочники.ПартииПроизводства.Реквизиты Цикл
		
		СтруктураРеквизитовПартии.Вставить(
			МетаРеквизит.Имя,
			МетаРеквизит.Тип.ПривестиЗначение(Неопределено));
		
	КонецЦикла;
	
	
	Возврат СтруктураРеквизитовПартии;
	
КонецФункции

Функция СтруктурыРеквизитовПартийРавны(Структура1, Структура2)
	
	Для Каждого ТекРеквизит Из Структура1 Цикл
		
		ИмяРеквизита = ТекРеквизит.Ключ;
		
		Если ИмяРеквизита = "Код"
			ИЛИ ИмяРеквизита = "Ссылка"
			ИЛИ ИмяРеквизита = "УникальныйИдентификатор"
			ИЛИ ИмяРеквизита = "Наименование"
			ИЛИ ИмяРеквизита = "ГруппаЗатрат" Тогда
			Продолжить;
		КонецЕсли;
		
			Если Структура1[ИмяРеквизита] <> Структура2[ИмяРеквизита] Тогда
				Возврат Ложь;
			КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ТекстЗапросаНомераСтрокОсновныхИзделий()
	
	Возврат
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаТовары.НомерСтроки)	КАК НомерСтроки,
	|	ТаблицаТовары.Ссылка				КАК Ссылка,
	|	ТаблицаТовары.НомерГруппыЗатрат		КАК НомерГруппыЗатрат
	|ПОМЕСТИТЬ НомераСтрокОсновныхИзделий
	|ИЗ
	|	ТаблицаПродукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	НЕ &ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.НомерГруппыЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерГруппыЗатрат
	|";
	
КонецФункции

Функция ТекстЗапросаКорректныеПоляПартийПроизводства()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Документ) В (
	//++ Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика),
	//-- Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика2_5),
	|					ТИП(Документ.ПроизводствоБезЗаказа))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.Документ
	|	КОНЕЦ						КАК Документ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ГруппировкаЗатрат) В (ТИП(Перечисление.ГруппировкиЗатратВЗаказеПереработчику),
	|													ТИП(Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.ГруппировкаЗатрат
	|	КОНЕЦ						КАК ГруппировкаЗатрат,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.НомерГруппыЗатрат) = ТИП(Число)
	|			ТОГДА 0
	|		ИНАЧЕ Т.НомерГруппыЗатрат
	|	КОНЕЦ						КАК НомерГруппыЗатрат,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Организация) = ТИП(Справочник.Организации)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ Т.Организация
	|	КОНЕЦ						КАК Организация,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ТипПроцесса) = ТИП(Перечисление.ТипыПроизводственныхПроцессов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)
	|		ИНАЧЕ Т.ТипПроцесса
	|	КОНЕЦ						КАК ТипПроцесса,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.НаправлениеДеятельности) = ТИП(Справочник.НаправленияДеятельности)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		ИНАЧЕ Т.НаправлениеДеятельности
	|	КОНЕЦ						КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ВидДеятельностиНДС) = ТИП(Перечисление.ТипыНалогообложенияНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ИНАЧЕ Т.ВидДеятельностиНДС
	|	КОНЕЦ						КАК ВидДеятельностиНДС,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ОсновноеИзделиеНоменклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ Т.ОсновноеИзделиеНоменклатура
	|	КОНЕЦ						КАК ОсновноеИзделиеНоменклатура,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ОсновноеИзделиеХарактеристика) = ТИП(Справочник.ХарактеристикиНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.ОсновноеИзделиеХарактеристика
	|	КОНЕЦ						КАК ОсновноеИзделиеХарактеристика,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ Т.Номенклатура
	|	КОНЕЦ						КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Характеристика) = ТИП(Справочник.ХарактеристикиНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.Характеристика
	|	КОНЕЦ						КАК Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ &АналитическийУчетПоГруппамПродукции
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ГруппаПродукции) = ТИП(Справочник.ГруппыАналитическогоУчетаНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.ГруппаПродукции
	|	КОНЕЦ						КАК ГруппаПродукции,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Спецификация) = ТИП(Справочник.РесурсныеСпецификации)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|		ИНАЧЕ Т.Спецификация
	|	КОНЕЦ						КАК Спецификация,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Назначение) = ТИП(Справочник.Назначения)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ Т.Назначение
	|	КОНЕЦ						КАК Назначение
	|ПОМЕСТИТЬ ВТКорректныеПоляПартийПроизводства
	|ИЗ
	|	ВТПоляПартийПроизводства КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Документ) В (
	//++ Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика),
	//-- Устарело_Переработка24
	|					ТИП(Документ.ОтчетПереработчика2_5),
	|					ТИП(Документ.ПроизводствоБезЗаказа))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.Документ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ГруппировкаЗатрат) В (ТИП(Перечисление.ГруппировкиЗатратВЗаказеПереработчику),
	|													ТИП(Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа))
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Т.ГруппировкаЗатрат
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.НомерГруппыЗатрат) = ТИП(Число)
	|			ТОГДА 0
	|		ИНАЧЕ Т.НомерГруппыЗатрат
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Организация) = ТИП(Справочник.Организации)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ИНАЧЕ Т.Организация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ТипПроцесса) = ТИП(Перечисление.ТипыПроизводственныхПроцессов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.ПустаяСсылка)
	|		ИНАЧЕ Т.ТипПроцесса
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.НаправлениеДеятельности) = ТИП(Справочник.НаправленияДеятельности)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|		ИНАЧЕ Т.НаправлениеДеятельности
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ВидДеятельностиНДС) = ТИП(Перечисление.ТипыНалогообложенияНДС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ИНАЧЕ Т.ВидДеятельностиНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ОсновноеИзделиеНоменклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ Т.ОсновноеИзделиеНоменклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ОсновноеИзделиеХарактеристика) = ТИП(Справочник.ХарактеристикиНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.ОсновноеИзделиеХарактеристика
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ Т.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Характеристика) = ТИП(Справочник.ХарактеристикиНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.Характеристика
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ &АналитическийУчетПоГруппамПродукции
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.ГруппаПродукции) = ТИП(Справочник.ГруппыАналитическогоУчетаНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ Т.ГруппаПродукции
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Спецификация) = ТИП(Справочник.РесурсныеСпецификации)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|		ИНАЧЕ Т.Спецификация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ТИПЗНАЧЕНИЯ(Т.Назначение) = ТИП(Справочник.Назначения)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ Т.Назначение
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ,
	|	НомерГруппыЗатрат
	|";
КонецФункции

Функция ТекстЗапросаТаблицаПартийПроизводстваПредварительная()
	
	Возврат
	"ВЫБРАТЬ
	|	Т.Документ						КАК Документ,
	|	Т.ГруппировкаЗатрат				КАК ГруппировкаЗатрат,
	|	Т.НомерГруппыЗатрат				КАК НомерГруппыЗатрат,
	|	Т.Организация					КАК Организация,
	|	Т.ТипПроцесса					КАК ТипПроцесса,
	|	Т.НаправлениеДеятельности		КАК НаправлениеДеятельности,
	|	Т.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|	Т.ОсновноеИзделиеНоменклатура	КАК ОсновноеИзделиеНоменклатура,
	|	Т.ОсновноеИзделиеХарактеристика	КАК ОсновноеИзделиеХарактеристика,
	|	Т.Номенклатура					КАК Номенклатура,
	|	Т.Характеристика				КАК Характеристика,
	|	Т.ГруппаПродукции				КАК ГруппаПродукции,
	|	Т.Спецификация					КАК Спецификация,
	|	Т.Назначение					КАК Назначение,
	|	ЕСТЬNULL(СпрПартииПроизводства.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)) КАК ПартияПроизводства
	|ПОМЕСТИТЬ ВтТаблицаПартийПроизводстваПредварительная
	|ИЗ
	|	ВТКорректныеПоляПартийПроизводства КАК Т
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = Т.Документ
	|		И СпрПартииПроизводства.Код = Т.НомерГруппыЗатрат
	|		И НЕ СпрПартииПроизводства.ПометкаУдаления
	|";
	
КонецФункции

Функция ТекстЗапросаТаблицаПартийПроизводстваКОбработке(ОбновлятьСуществующие = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Т.Документ						КАК Документ,
	|	Т.ГруппировкаЗатрат				КАК ГруппировкаЗатрат,
	|	Т.НомерГруппыЗатрат				КАК Код,
	|	Т.Организация					КАК Организация,
	|	Т.ТипПроцесса					КАК ТипПроцесса,
	|	Т.НаправлениеДеятельности		КАК НаправлениеДеятельности,
	|	Т.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|	Т.ОсновноеИзделиеНоменклатура	КАК ОсновноеИзделиеНоменклатура,
	|	Т.ОсновноеИзделиеХарактеристика	КАК ОсновноеИзделиеХарактеристика,
	|	Т.Номенклатура					КАК Номенклатура,
	|	Т.Характеристика				КАК Характеристика,
	|	Т.ГруппаПродукции				КАК ГруппаПродукции,
	|	Т.Спецификация					КАК Спецификация,
	|	Т.Назначение					КАК Назначение,
	|	Т.ПартияПроизводства			КАК ПартияПроизводства
	|ИЗ
	|	ВтТаблицаПартийПроизводстваПредварительная КАК Т
	|ГДЕ
	|	&УсловиеОбновлятьСуществующие
	|";
	
	Если ОбновлятьСуществующие Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбновлятьСуществующие", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбновлятьСуществующие", "Т.ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#КонецЕсли
