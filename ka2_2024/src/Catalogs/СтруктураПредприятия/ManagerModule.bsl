#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значение:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	
	Результат.Добавить("ПериодичностьОформленияВыработки");
	Результат.Добавить("ИспользоватьКТУ");
	Результат.Добавить("ИспользоватьТарифныеСтавки");
	Результат.Добавить("ИспользоватьОтработанноеВремя");
	Результат.Добавить("ИспользоватьБригадныеНаряды;
		|ВидыНарядовБригады, ВидыНарядовРаботники, ВидыНарядовБригадыИРаботники");
	Результат.Добавить("ИспользоватьПерсональныеНаряды;
		|ВидыНарядовБригады, ВидыНарядовРаботники, ВидыНарядовБригадыИРаботники");
	
	Результат.Добавить("СпособНастройкиГрафикаРаботы");
	Результат.Добавить("ГрафикиРаботы; ГрафикРаботы");
	
	Результат.Добавить("ПроизводственноеПодразделение");
	Результат.Добавить("ПроизводствоПоЗаказам");
	Результат.Добавить("ПроизводствоБезЗаказов");
	Результат.Добавить("ИспользуетсяСписаниеЗатратНаВыпуск;
		|ОтдельнымДокументом, ПоПравиламРаспределения");
	
	Возврат Результат;
	
КонецФункции

// Получает подразделение-диспетчер, если оно одно в ИБ
//  Если подразделение-диспетчер не передано в качестве параметра или передано пустое,
//  возвращает единственное в информационной базе подразделение-диспетчер.
//  Если подразделений-диспетчеров в базе несколько,
//  возвращает подразделение-диспетчер из настроек пользователя.
//  Если подразделение-диспетчер не указано в настройках пользователя,
//  возвращает пустое подразделение.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтруктураПредприятия - подразделение-диспетчер по умолчанию.
//
Функция ПолучитьПодразделениеДиспетчерПоУмолчанию(Знач Пользователь = Неопределено) Экспорт
	
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Возврат Подразделение;

КонецФункции

// Возвращает количество подразделений-диспетчеров.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество подразделений-диспетчеров.
//
Функция КоличествоПодразделенийДиспетчеров() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.ПодразделениеДиспетчер
		|	И СтруктураПредприятия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизацийПодразделений.Действует)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

// Возвращает признак использования нескольких подразделений-диспетчеров.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется несколько подразделений-диспетчеров.
//
Функция ИспользуетсяНесколькоПодразделенийДиспетчеров() Экспорт
	
	Возврат КоличествоПодразделенийДиспетчеров() > 1;
	
КонецФункции

//++ НЕ УТ

// Проверяет использование параметров производства
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки.
//
Процедура ПроверитьИспользованиеПараметровПроизводства(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоиска.Ссылка
	|ИЗ
	|	Документ.ДвижениеПродукцииИМатериалов КАК ТаблицаПоиска
	|ГДЕ
	|	ТаблицаПоиска.Отправитель = &Подразделение
	|	И ТаблицаПоиска.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение))
	|	И НЕ ТаблицаПоиска.ПоРаспоряжениям
	//++ Устарело_Производство21
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыпускПродукции.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.Подразделение = &Подразделение
	|	И НЕ ВыпускПродукции.ВыпускПоРаспоряжениям
	//-- Устарело_Производство21
	|;
	|";
	
	Запрос.УстановитьПараметр("Подразделение", Параметры.Объект);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("ИспользуетсяДляПроизводстваБезЗаказов",       НЕ Результат[0].Пустой());
	
	
	ПоместитьВоВременноеХранилище(РезультатПроверки, АдресХранилища);
	
КонецПроцедуры

// Определяет цеховую кладовую подразделения
//
// Параметры:
//	Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение для которого определяется кладовая.
//
// Возвращаемое значение:
//		СправочникСсылка.Склады - Цеховая кладовая подразделения.
//
Функция ЦеховаяКладоваяПоУмолчанию(Подразделение) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		
		Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
			Возврат Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И НЕ Таблица.ЭтоГруппа
		|	И Таблица.Подразделение = &Подразделение
		|	И Таблица.ЦеховаяКладовая";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И НЕ Таблица.ЭтоГруппа
		|	И Таблица.ЦеховаяКладовая";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Склад = Выборка.Склад;
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Склад;

КонецФункции

//-- НЕ УТ


#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	//++ НЕ УТ
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ПодразделениеДиспетчерИлиПроизводственноеПодразделение") Тогда
		ПроизводствоВызовСервера.СтруктураПредприятияОбработкаПолученияДанныхВыбора(
					ДанныеВыбора, 
					Параметры, 
					СтандартнаяОбработка);
		Возврат;	
	КонецЕсли; 
	//-- НЕ УТ
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	СтруктураПредприятия.Ссылка КАК Ссылка,
		|	СтруктураПредприятия.Представление КАК Представление,
		|	СтруктураПредприятия.ПометкаУдаления КАК ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА СтруктураПредприятия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизацийПодразделений.НеДействует)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеДействует
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Наименование ПОДОБНО &Текст
		|	И НЕ СтруктураПредприятия.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
		Запрос.УстановитьПараметр("Текст", "%" + СокрЛП(Параметры.СтрокаПоиска) + "%");
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если Выборка.НеДействует Тогда 
				Элемент = Новый Структура;
				Элемент.Вставить("Значение", Выборка.Ссылка);
				Элемент.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
				ТекстПредупреждения = НСтр("ru = 'Выбрано недействующее подразделение.'"); 
				Элемент.Вставить("Предупреждение", ТекстПредупреждения);
				ДанныеВыбора.Добавить(Элемент, Выборка.Представление);
			Иначе
				ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет сведения об обработчиках обновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.СтруктураПредприятия.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.21.58";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a2f64a18-926f-4644-9f03-41af57314877");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.СтруктураПредприятия.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	МассивКомментариев = Новый Массив(); // Массив из Строка
	МассивКомментариев.Добавить(НСтр("ru = 'Заполняет статус подразделения'"));
	Обработчик.Комментарий = СтрСоединить(МассивКомментариев, " ");
	
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	Читаемые = Новый Массив; // Массив из Строка
	Читаемые.Добавить(Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив; // Массив из Строка
	Изменяемые.Добавить(Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив; // Массив из Строка
	Блокируемые.Добавить(Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СоздатьЭлемент().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Данные
	|ГДЕ
	|	Данные.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизацийПодразделений.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры обработчика:
//   * ВерсияПодсистемыНаНачалоОбновления - Строка - версия подсистемы.
//   * ИмяОбработчика - Строка - имя обработчика.
//   * ОбновляемыеДанные - Структура.
//   * ОбработкаЗавершена - Булево, Неопределено - признак завершения обработки.
//   * Очередь - Число - очередь.
//   * ПрогрессВыполнения - Структура:
//     ** ВсегоОбъектов - Число - всего обработано объектов.
//     ** ОбработаноОбъектов - Число - обработано объектов.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПлохиеДанные = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ДанныеСправочника.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ДанныеСправочника
		|		ПО ТаблицаДокументов.Ссылка = ДанныеСправочника.Ссылка
		|";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Справочник = Запрос.Выполнить().Выбрать();
	
	Пока Справочник.Следующий() Цикл
		ПредставлениеОбъекта = "";
		ПричинаИсключения = Неопределено;
		
		НачатьТранзакцию();
		Попытка
			
			ПричинаИсключения = "Блокировка";
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Справочник.Ссылка);
			Блокировка.Заблокировать();
			
			СправочникОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Справочник.Ссылка,
					Справочник.ВерсияДанных,
					Параметры.Очередь);
			Если СправочникОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ПричинаИсключения = "ПлохиеДанные";
			Рекомендация = НСтр("ru = 'Заполните статус подразделения вручную.'");
			
			Если НЕ ЗначениеЗаполнено(СправочникОбъект.Статус) Тогда
				СправочникОбъект.Статус = Перечисления.СтатусыОрганизацийПодразделений.Действует;;
			КонецЕсли;
			
			ПричинаИсключения = "Запись";
			Если СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Справочник.Ссылка);
			КонецЕсли;
				
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),Справочник.Ссылка, ПредставлениеОбъекта);
			
			Если ПричинаИсключения = "ПлохиеДанные" Тогда
				ПроблемаСДанными = ПроблемаСДанными(Справочник.Ссылка, Рекомендация, ИнформацияОбОшибке());
				ПлохиеДанные.Добавить(ПроблемаСДанными);
			ИначеЕсли ПричинаИсключения <> "Блокировка" Тогда
				ЗаписатьПлохиеДанные(ПлохиеДанные, ОбъектовОбработано);
				ВызватьИсключение НСтр("ru = 'Ошибка блокировки при записи элемента справочника ""Структура предприятия"".'");
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Если ОбъектовОбработано > 0 Тогда
		ЗаписатьПлохиеДанные(ПлохиеДанные, ОбъектовОбработано)
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#Область ВспомогательныеМетоды

Процедура ЗаписатьПлохиеДанные(ПлохиеДанные, ОбъектовОбработано)
	Если ОбъектовОбработано > 0 Тогда
		Для Каждого ПроблемаСДанными Из ПлохиеДанные Цикл
			ПредставлениеСсылки = Строка(ПроблемаСДанными.СсылкаНаОбъект);
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось установить статус %1 по причине:
						|%2.
						|%3'"), 
					ПредставлениеСсылки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ПроблемаСДанными.ИнформацияОбОшибке),
					ПроблемаСДанными.Рекомендация);
			ОбновлениеИнформационнойБазы.ЗарегистрироватьПроблемуСДанными(ПроблемаСДанными, ТекстСообщения);
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ПроблемаСДанными.СсылкаНаОбъект);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПроблемаСДанными(СсылкаНаОбъект, Рекомендация, ИнформацияОбОшибке)
	Возврат Новый Структура("СсылкаНаОбъект,Рекомендация,ИнформацияОбОшибке", СсылкаНаОбъект, Рекомендация, ИнформацияОбОшибке);
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
