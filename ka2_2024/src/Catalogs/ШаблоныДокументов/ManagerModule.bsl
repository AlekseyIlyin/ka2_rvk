#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Формирует данные для публикации шаблонов в сервисе 1С:Кабинет сотрудника.
// Параметры:
// 		Ссылки - Массив
// Возвращаемое значение:
// 		ТаблицаЗначений
//
Функция ДанныеШаблоновДокументовДляПубликации(Ссылки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОтбора", Ссылки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныДокументов.Ссылка КАК Шаблон,
	|	ШаблоныДокументов.Наименование КАК НаименованиеДокумента,
	|	ШаблоныДокументов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	|	ШаблоныДокументов.МакетДокумента КАК МакетДокумента,
	|	ШаблоныДокументов.ТребуетсяСогласование КАК ТребуетсяСогласование,
	|	ШаблоныДокументов.ВАрхиве КАК ВАрхиве,
	|	ЕСТЬNULL(КодыДокументов.Код, """") КАК КодДокументаКадровогоМероприятия,
	|	ШаблоныДокументов.ТребуетПодписания КАК ТребуетПодписания,
	|	ШаблоныДокументов.ТребуетсяНаличиеВложений КАК ТребуетсяНаличиеВложений,
	|	ШаблоныДокументов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КодыДокументовКадровыхМероприятий КАК КодыДокументов
	|		ПО ШаблоныДокументов.КодДокументаКадровогоМероприятия = КодыДокументов.Ссылка
	|ГДЕ
	|	ШаблоныДокументов.Ссылка В(&СписокОтбора)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяПредопределенныхДанных";
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("ДанныеМакета", 		Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("РазмерМакета", 		Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("УсловияОбластей", 	Новый ОписаниеТипов("Массив"));
	ТаблицаДанных.Колонки.Добавить("РеквизитыОбъектов", Новый ОписаниеТипов("Массив"));
	ТаблицаДанных.Колонки.Добавить("НеВыгружать", 		Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		// Макет табличного документа
		ДанныеМакетаДокумента = СтрокаДанных.МакетДокумента.Получить();
		Если ДанныеМакетаДокумента = Неопределено Тогда
			СтрокаДанных.НеВыгружать = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ДанныеМакетаДокумента.Области.Найти("Бланк") = Неопределено Тогда
			ДанныеМакетаДокумента.Область(1, , ДанныеМакетаДокумента.ВысотаТаблицы, ).Имя = "Бланк";
		КонецЕсли;
		
		Для НомерСтроки = 1 По ДанныеМакетаДокумента.ВысотаТаблицы Цикл
			Для НомерКолонки = 1 По ДанныеМакетаДокумента.ШиринаТаблицы Цикл
				ОбластьЯчейки = ДанныеМакетаДокумента.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ОбластьЯчейки.Заполнение <> ТипЗаполненияОбластиТабличногоДокумента.Текст Тогда
					ПреобразоватьВШаблон = ОбластьЯчейки.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					ОбластьЯчейки.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
					Если ПреобразоватьВШаблон Тогда
						ОбластьЯчейки.Текст = СтрШаблон("[%1]", ОбластьЯчейки.Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПотокЗаписи = Новый ПотокВПамяти;
		ДанныеМакетаДокумента.Записать(ПотокЗаписи);
		ДвоичныеДанныеМакета = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
		
		СтрокаДанных.ДанныеМакета = Base64Строка(ДвоичныеДанныеМакета);
		СтрокаДанных.РазмерМакета = ДвоичныеДанныеМакета.Размер();
		
		// Условия областей
		НастройкиШаблона = ЗарплатаКадрыОтчеты.НастройкиШаблонаДляКабинетаСотрудников(
		КлючВариантаОтчета(СтрокаДанных.Шаблон.УникальныйИдентификатор()));
		
		УсловияОбластей = УсловияОбластейИзНастроек(НастройкиШаблона.Настройки, Истина);
		Если ЗначениеЗаполнено(УсловияОбластей) Тогда
			СтрокаДанных.УсловияОбластей = УсловияОбластей;
		КонецЕсли;
		
		// Реквизиты объектов
		РеквизитыОбъектов = Новый Массив;
		Для Каждого ДанныеПараметра Из НастройкиШаблона.СхемаКомпоновкиДанных.Параметры Цикл
			РеквизитыОбъектов.Добавить(ОписаниеРеквизитаШаблонаДокументов(ДанныеПараметра));
		КонецЦикла;
		
		Если ЗначениеЗаполнено(РеквизитыОбъектов) Тогда
			СтрокаДанных.РеквизитыОбъектов = РеквизитыОбъектов;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;

КонецФункции

Функция УсловияОбластейИзНастроек(Настройки, ДляВыгрузкиВКабинеты = Ложь)
	УсловияОбластей = Новый Массив;
	Если Настройки <> Неопределено Тогда
		Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ОписаниеУсловий = ОписаниеУсловийВыводаОбластей();
				ОписаниеУсловий.Имя 	= ?(СтрНачинаетсяС(ЭлементОтбора.Представление, "<") , "", ЭлементОтбора.Представление);
				ОписаниеУсловий.Элементы = КоллекцияОтборовОбласти(ЭлементОтбора.Элементы, ДляВыгрузкиВКабинеты);
				УсловияОбластей.Добавить(ОписаниеУсловий);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат УсловияОбластей;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхДляСервиса

Функция КоллекцияОтборовОбласти(УсловияВыводаОбласти, ДляВыгрузкиВКабинеты = Ложь)
	
	КоллекцияОтборов = Новый Массив;
	Для Каждого ЭлементОтбора Из УсловияВыводаОбласти Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ОписаниеЭлемента = ОписаниеОбъектаЭлементаОтбора();
			ОписаниеЭлемента.ЭтоГруппа 	= Истина;
			ОписаниеЭлемента.ТипГруппы 	= ЭлементОтбора.ТипГруппы;
			ОписаниеЭлемента.Элементы 	= КоллекцияОтборовОбласти(ЭлементОтбора.Элементы, ДляВыгрузкиВКабинеты);
		Иначе
			Если ДляВыгрузкиВКабинеты
				И (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) Тогда
				
				ОписаниеЭлементаГруппаИли = ОписаниеОбъектаЭлементаОтбора();
				ОписаниеЭлементаГруппаИли.ЭтоГруппа 	= Истина;
				ОписаниеЭлементаГруппаИли.ТипГруппы 	= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ОписаниеЭлементаГруппаИли.Элементы		= Новый Массив;
				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					
					ОписаниеЭлементаГруппыНе = ОписаниеОбъектаЭлементаОтбора();
					ОписаниеЭлементаГруппыНе.ЭтоГруппа 	= Истина;
					ОписаниеЭлементаГруппыНе.ТипГруппы 	= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
					ОписаниеЭлементаГруппыНе.Элементы 	= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеЭлементаГруппаИли);
					
					ОписаниеЭлемента = ОписаниеЭлементаГруппыНе;
				Иначе
					ОписаниеЭлемента = ОписаниеЭлементаГруппаИли;
				КонецЕсли;
				Для каждого ЭлементСписка Из ЭлементОтбора.ПравоеЗначение Цикл
					ОписаниеЭлементаСписка = ОписаниеУсловияВыводаОбласти();
					ОписаниеЭлементаСписка.ЭтоГруппа 			= Ложь;
					ОписаниеЭлементаСписка.ЛевоеЗначение 		= Строка(ЭлементОтбора.ЛевоеЗначение);
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
						Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
						
						ОписаниеЭлементаСписка.ВидСравнения 		= ВидСравненияКомпоновкиДанных.ВИерархии;
					Иначе
						ОписаниеЭлементаСписка.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
					КонецЕсли;
					ОписаниеЭлементаСписка.ПравоеЗначение 	= ЭлементСписка.Значение;          
					НормализоватьПравоеЗначениеОтбора(ОписаниеЭлементаСписка.ПравоеЗначение, ОписаниеЭлементаСписка.ТипСсылочногоЗначения);
					ОписаниеЭлементаГруппаИли.Элементы.Добавить(ОписаниеЭлементаСписка);
				КонецЦикла;
					
			Иначе
				ОписаниеЭлемента = ОписаниеУсловияВыводаОбласти();
				ОписаниеЭлемента.ЭтоГруппа 			= Ложь;
				ОписаниеЭлемента.ЛевоеЗначение 		= Строка(ЭлементОтбора.ЛевоеЗначение);
				ОписаниеЭлемента.ВидСравнения 		= ЭлементОтбора.ВидСравнения;
				ОписаниеЭлемента.ПравоеЗначение 	= ЭлементОтбора.ПравоеЗначение;
				НормализоватьПравоеЗначениеОтбора(ОписаниеЭлемента.ПравоеЗначение, ОписаниеЭлемента.ТипСсылочногоЗначения);
			КонецЕсли;
			
		КонецЕсли;
		КоллекцияОтборов.Добавить(ОписаниеЭлемента);
	КонецЦикла; 
	
	Возврат КоллекцияОтборов;
	
КонецФункции

Процедура НормализоватьПравоеЗначениеОтбора(ПравоеЗначение, ТипСсылочногоЗначения)
	Если ЗначениеЗаполнено(ПравоеЗначение) Тогда
		ТипЗначения = ТипЗнч(ПравоеЗначение);
		Если ТипЗначения = Тип("Строка") Тогда
			СловаСтроки = СтрРазделить(ПравоеЗначение, ".");
			Если СловаСтроки.Количество() = 2 Тогда
				Если СловаСтроки[0] = "reasons" Тогда
					ПравоеЗначение = СловаСтроки[1];
					ТипСсылочногоЗначения = "reasons";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			ТипСсылочногоЗначения = ТипСсылочногоЗначения(ТипЗначения);
		ИначеЕсли ТипЗначения = Тип("СписокЗначений") Тогда
			МассивЭлементов = Новый Массив;
			Для каждого ЭлементСписка Из ПравоеЗначение Цикл
				Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
					МассивЭлементов.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(МассивЭлементов) Тогда
				ПравоеЗначение = МассивЭлементов;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТипСсылочногоЗначения(ТипЗначения)
	Если ТипЗначения = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
		Возврат "gender";
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Должности") Тогда
		Возврат "positions";
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ПодразделенияОрганизаций")
		Или ТипЗначения = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Возврат "divisions";
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Организации") Тогда
		Возврат "employers";
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
		Возврат "stafflist-positions";
	КонецЕсли;
	Возврат Неопределено
КонецФункции

Функция ОписаниеУсловийВыводаОбластей()
	
	Возврат Новый Структура("Имя,Элементы");

КонецФункции

Функция ОписаниеОбъектаЭлементаОтбора()

	Возврат Новый Структура("ЭтоГруппа,ТипГруппы,Элементы");

КонецФункции

Функция ОписаниеУсловияВыводаОбласти()
	
	Возврат Новый Структура("ЭтоГруппа,ЛевоеЗначение,ВидСравнения,ПравоеЗначение,ТипСсылочногоЗначения");
	
КонецФункции

Функция ОписаниеРеквизитаШаблонаДокументов(ДанныеРеквизита)
	
	ОписаниеРеквизита = Новый Структура("Имя,Представление,Тип,Обязательный,ЗначениеПоУмолчанию,ЗначениеПоУмолчаниюВторое,ДоступныеЗначения");
	ОписаниеРеквизита.Имя 			= "ПараметрыДанных" + ДанныеРеквизита.Имя;
	ОписаниеРеквизита.Представление = ДанныеРеквизита.Заголовок;
	ОписаниеРеквизита.Тип 			= КадровыйЭДО.ТипЗначенияШаблонаДокументов(ДанныеРеквизита.ТипЗначения);
	ОписаниеРеквизита.Обязательный  = ДанныеРеквизита.ЗапрещатьНезаполненныеЗначения;
	Если ТипЗнч(ДанныеРеквизита.Значение) = Тип("СтандартныйПериод") Тогда
		ОписаниеРеквизита.ЗначениеПоУмолчанию			= ДанныеРеквизита.Значение.ДатаНачала;
		ОписаниеРеквизита.ЗначениеПоУмолчаниюВторое	= НачалоДня(ДанныеРеквизита.Значение.ДатаОкончания);
	Иначе
		ОписаниеРеквизита.ЗначениеПоУмолчанию = ДанныеРеквизита.Значение;
	КонецЕсли;
	ДоступныеЗначения = ДанныеРеквизита.ПолучитьДоступныеЗначения();
	Если ЗначениеЗаполнено(ДоступныеЗначения) Тогда
		Если ОписаниеРеквизита.Тип = Перечисления.ТипыРеквизитовШаблоновДокументов.Строка Тогда
			ОписаниеРеквизита.Тип = Перечисления.ТипыРеквизитовШаблоновДокументов.Перечисление;
		КонецЕсли;
		ЗначенияРеквизита = Новый Массив;
		Для Каждого ДоступноеЗначение Из ДоступныеЗначения Цикл
			ЗначенияРеквизита.Добавить(
				Новый Структура("Представление,Значение",
					ДоступноеЗначение.Представление,
					ДоступноеЗначение.Значение));
		КонецЦикла;
		ОписаниеРеквизита.ДоступныеЗначения = ЗначенияРеквизита;
	КонецЕсли;
	
	Возврат ОписаниеРеквизита;
	
КонецФункции

#КонецОбласти

Процедура ДобавитьПолеДокумента(ПоляДокумента, ИмяПоля, ПутьКПолю, ТипЗначения, ЗначениеПоУмолчанию, ДоступноВУсловиях, ДоступныРеквизиты = Ложь, ДоступныеЗначения = Неопределено)
	
	ОписаниеПоля = Новый Структура;
	ОписаниеПоля.Вставить("ИмяПоля",				ИмяПоля);
	ОписаниеПоля.Вставить("ПутьКПолю",				ПутьКПолю);
	Если ТипЗнч(ТипЗначения) = Тип("ОписаниеТипов") Тогда
		ОписаниеПоля.Вставить("Тип",				ТипЗначения);
	Иначе
		ОписаниеПоля.Вставить("Тип",				Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения)));
	КонецЕсли;
	ОписаниеПоля.Вставить("ЗначениеПоУмолчанию",	ЗначениеПоУмолчанию);
	ОписаниеПоля.Вставить("ДоступноВУсловиях",		ДоступноВУсловиях);
	ОписаниеПоля.Вставить("ДоступныРеквизиты",		ДоступныРеквизиты);
	ОписаниеПоля.Вставить("ДоступныеЗначения", 		ДоступныеЗначения);
	
	ПоляДокумента.Добавить(ОписаниеПоля);
	
КонецПроцедуры

Функция ДанныеШаблона(ВАрхиве, МакетДокумента, ИдентификаторСсылки)
	
	Настройки = ЗарплатаКадрыОтчеты.НастройкиШаблонаДляКабинетаСотрудников(
		КлючВариантаОтчета(ИдентификаторСсылки));
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Настройки", Настройки);
	ОписаниеДанных.Вставить("Макет", МакетДокумента);
	ОписаниеДанных.Вставить("ВАрхиве", ВАрхиве);
	
	Возврат ОписаниеДанных;
	
КонецФункции

Функция КлючВариантаОтчета(ИдентификаторСсылки) Экспорт
	
	Возврат "ШаблоныДокументов" + ИдентификаторСсылки;
	
КонецФункции

Функция ВариантОтчета(ИдентификаторСсылки, СоздатьЕслиНеНайден = Ложь) Экспорт
	
	КлючВариантаОтчета = КлючВариантаОтчета(ИдентификаторСсылки);
	ИдентификаторОтчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Отчеты.ШаблоныДокументовКабинетСотрудника);
	
	ВариантОтчета = ВариантыОтчетов.ВариантОтчета(ИдентификаторОтчета, КлючВариантаОтчета);
	Если ВариантОтчета = Неопределено И СоздатьЕслиНеНайден Тогда
		УстановитьПривилегированныйРежим(Истина);
		ВариантОтчета = НовыйВариантОтчета(ИдентификаторОтчета, КлючВариантаОтчета);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ВариантОтчета;
	
КонецФункции

Функция НовыйВариантОтчета(ИдентификаторОтчета, КлючВариантаОтчета)
	
	СхемаКомпоновки = Отчеты.ШаблоныДокументовКабинетСотрудника.ПолучитьМакет("МакетКомпоновки");
	Настройки = СхемаКомпоновки.ВариантыНастроек["ПоУмолчанию"].Настройки;
	
	НастройкиВариантаОтчета = ЗарплатаКадрыОтчеты.НоваяСтруктураНастроекПечатнойФормы();
	НастройкиВариантаОтчета.Настройки = Настройки;
	
	ПредопределенныйВариант = Неопределено;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", ИдентификаторОтчета);
	Запрос.УстановитьПараметр("КлючВарианта", "ПоУмолчанию");
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПредопределенныеВариантыОтчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
		|ГДЕ
		|	ПредопределенныеВариантыОтчетов.Отчет = &Отчет
		|	И ПредопределенныеВариантыОтчетов.КлючВарианта = &КлючВарианта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПредопределенныеВариантыОтчетов.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредопределенныйВариант = Выборка.Ссылка;
	КонецЕсли;
	
	НовыйВариантОтчета = Справочники.ВариантыОтчетов.СоздатьЭлемент();
	НовыйВариантОтчета.Отчет = ИдентификаторОтчета;
	НовыйВариантОтчета.Настройки = Новый ХранилищеЗначения(НастройкиВариантаОтчета);
	НовыйВариантОтчета.КлючВарианта = КлючВариантаОтчета;
	НовыйВариантОтчета.Наименование = КлючВариантаОтчета;
	НовыйВариантОтчета.Описание = НСтр("ru = 'Содержит настройки для подготовки шаблона документа в 1С:Кабинет сотрудника (для служебного использования)'");
	НовыйВариантОтчета.ТолькоДляАвтора = Истина;
	НовыйВариантОтчета.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний;
	НовыйВариантОтчета.ПредопределенныйВариант = ПредопределенныйВариант;
	НовыйВариантОтчета.Записать();
	
	Возврат НовыйВариантОтчета.Ссылка;
	
КонецФункции

Функция ХешНастроек(ВАрхиве, МакетДокумента, ИдентификаторСсылки) Экспорт
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(
		ОбщегоНазначения.ЗначениеВСтрокуXML(
			ДанныеШаблона(ВАрхиве, МакетДокумента, ИдентификаторСсылки)));
КонецФункции

Процедура НачальноеЗаполнение(ПараметрыОбновления = Неопределено) Экспорт
	
	Если ПараметрыОбновления = Неопределено Тогда
		ВосстановитьВсе = Ложь;
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
		Если ПараметрыОбновления.Свойство("ВосстановитьВсе") Тогда
			ВосстановитьВсе = ПараметрыОбновления.ВосстановитьВсе;
		Иначе
			ВосстановитьВсе = Ложь;
			ПараметрыОбновления.Вставить("ВосстановитьВсе", ВосстановитьВсе);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	Для Каждого ИмяПредопределенного Из Метаданные.Справочники.ШаблоныДокументов.ПолучитьИменаПредопределенных() Цикл
		Если МассивОбновленных.Найти(ИмяПредопределенного) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбработкаЗавершена = Ложь;
		ВосстановитьПредопределенныйШаблонДокумента(ИмяПредопределенного, ПараметрыОбновления);
	КонецЦикла;
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(
		ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура ВосстановитьПредопределенныйШаблонДокумента(ИмяПредопределенного, ПараметрыОбновления)
	
	Если ПараметрыОбновления = Неопределено Тогда
		ВосстановитьВсе = Ложь;
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
		Если ПараметрыОбновления.Свойство("ВосстановитьВсе") Тогда
			ВосстановитьВсе = ПараметрыОбновления.ВосстановитьВсе;
		Иначе
			ВосстановитьВсе = Ложь;
			ПараметрыОбновления.Вставить("ВосстановитьВсе", ВосстановитьВсе);
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйОбъект = Истина;
	СсылкаСправочника = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ШаблоныДокументов." + ИмяПредопределенного);
	Если СсылкаСправочника = Неопределено Тогда
		ОбъектСправочника = Справочники.ШаблоныДокументов.СоздатьЭлемент();
		ОбъектСправочника.ИмяПредопределенныхДанных = ИмяПредопределенного;
		ИдентификаторСсылки = Новый УникальныйИдентификатор;
		СсылкаСправочника = Справочники.ШаблоныДокументов.ПолучитьСсылку(ИдентификаторСсылки);
		ОбъектСправочника.УстановитьСсылкуНового(СсылкаСправочника);
	Иначе
		НовыйОбъект = Ложь;
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.ШаблоныДокументов", "Ссылка", СсылкаСправочника) Тогда
			Возврат;
		КонецЕсли;
		ОбъектСправочника = СсылкаСправочника.ПолучитьОбъект();
		ИдентификаторСсылки = СсылкаСправочника.УникальныйИдентификатор();
	КонецЕсли;
	
	ВариантОтчетаДокумента = ВариантОтчета(ИдентификаторСсылки);
	Если ВариантОтчетаДокумента <> Неопределено
		И Не ВосстановитьВсе Тогда
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		МассивОбновленных.Добавить(ИмяПредопределенного);
		Возврат;
	КонецЕсли;
	
	КлючВарианта = КлючВариантаОтчета(ИдентификаторСсылки);
	ШаблонПоУмолчанию = ШаблонДокументаПоУмолчанию(ИмяПредопределенного, КлючВарианта);
	
	МакетДокумента = ШаблонПоУмолчанию.Макет;
	ОбъектСправочника.МакетДокумента = Новый ХранилищеЗначения(МакетДокумента, Новый СжатиеДанных(9));
	
	Если ВариантОтчетаДокумента = Неопределено Тогда
		ИдентификаторОтчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			Метаданные.Отчеты.ШаблоныДокументовКабинетСотрудника);
		ВариантОтчетаДокумента = НовыйВариантОтчета(ИдентификаторОтчета, КлючВарианта);
	КонецЕсли;
	ВариантОтчетаДокументаОбъект = ВариантОтчетаДокумента.ПолучитьОбъект();
	ВариантОтчетаДокументаОбъект.Настройки = Неопределено;
	ВариантОтчетаДокументаОбъект.ОбменДанными.Загрузка = Истина;
	ВариантОтчетаДокументаОбъект.Записать();
	
	ЗарплатаКадрыОтчеты.ЗапомнитьНастройкиВариантаОтчета(ВариантОтчетаДокумента, ШаблонПоУмолчанию.Настройки);
	
	ОбъектСправочника.ХешНастроек = ХешНастроек(ОбъектСправочника.ВАрхиве, МакетДокумента, ИдентификаторСсылки);
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника);
	
	МассивОбновленных.Добавить(ИмяПредопределенного);
	Если Не НовыйОбъект Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблонДокументаПоУмолчанию(ИмяПредопределенного, КлючВарианта) Экспорт
	
	МакетJSON = ПолучитьМакет(ИмяПредопределенного);
	Возврат ШаблонДокументаИзМакетаJSON(МакетJSON, КлючВарианта) 
	
КонецФункции

Функция ШаблонДокументаИзХранилища(АдресШаблонаНаСервере, КлючВарианта) Экспорт
	
	МакетJSON = Новый ТекстовыйДокумент;
	МакетJSON.Прочитать(ПолучитьИзВременногоХранилища(АдресШаблонаНаСервере).ОткрытьПотокДляЧтения());
	Возврат ШаблонДокументаИзМакетаJSON(МакетJSON, КлючВарианта); 
	
КонецФункции

Функция ШаблонДокументаИзМакетаJSON(МакетJSON, КлючВарианта = Неопределено)
	
	ШаблонПоУмолчанию = Новый Структура;
	
	Настройки = ЗарплатаКадрыОтчеты.НастройкиШаблонаДляКабинетаСотрудников(
		КлючВарианта, Истина);

	ШаблонДокумента = ШаблонаДокументаИзJSON(МакетJSON);
	
	МакетДокумента = Новый ТабличныйДокумент;
	МакетДокумента.Прочитать(Base64Значение(ШаблонДокумента.Макет).ОткрытьПотокДляЧтения());
	ШаблонПоУмолчанию.Вставить("Макет", МакетДокумента);
	
	Если ШаблонДокумента.Свойство("РеквизитыДокумента")
		И ЗначениеЗаполнено(ШаблонДокумента.РеквизитыДокумента) Тогда
		
		НаборДанных = Настройки.СхемаКомпоновкиДанных.НаборыДанных[0];
		Для Каждого РеквизитДокумента Из ШаблонДокумента.РеквизитыДокумента Цикл
			
			ПолеНабораДанных = НаборДанных.Поля.Найти(РеквизитДокумента.ПутьКПолю);
			Если ПолеНабораДанных = Неопределено Тогда
				ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				ПолеНабораДанных.Поле			= РеквизитДокумента.ИмяПоля;
				ПолеНабораДанных.ПутьКДанным	= РеквизитДокумента.ПутьКПолю;
			КонецЕсли;
			Если РеквизитДокумента.Свойство("Тип") Тогда
				ПолеНабораДанных.ТипЗначения	= Новый ОписаниеТипов(РеквизитДокумента.Тип);
			КонецЕсли;
			Если РеквизитДокумента.Свойство("ДоступноВУсловиях") Тогда
				ПолеНабораДанных.ОграничениеИспользования.Условие = Не РеквизитДокумента.ДоступноВУсловиях;
			Иначе
				ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
			КонецЕсли;
			ПолеНабораДанных.ОграничениеИспользования.Группировка = Истина;
			ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
			ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Группировка = Истина;
			Если РеквизитДокумента.Свойство("ДоступныРеквизиты") Тогда
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Поле = Не РеквизитДокумента.ДоступныРеквизиты;
			Иначе
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Поле = Истина;
			КонецЕсли;
			ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Условие = Истина;
			ПолеНабораДанных.ОграничениеИспользованияРеквизитов.Порядок = Истина;
			Если РеквизитДокумента.Свойство("ДоступныеЗначения") Тогда
				ДоступныеЗначения = Новый СписокЗначений;
				Для Каждого ДоступноеЗначение Из РеквизитДокумента.ДоступныеЗначения Цикл
					ДоступныеЗначения.Добавить(ДоступноеЗначение.Значение, ДоступноеЗначение.Представление);
				КонецЦикла;
				ПолеНабораДанных.УстановитьДоступныеЗначения(ДоступныеЗначения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьРасширенияПолейСхемыКомпоновкиДанных(Настройки.СхемаКомпоновкиДанных);
	
	КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	ЗарплатаКадрыОтчеты.ИнициализироватьИЗагрузитьНастройкиВКомпоновщикКД(КомпоновщикНастроекКД, Настройки);
	
	Если ШаблонДокумента.Свойство("ВыбранныеПоля") Тогда
		Для Каждого ПутьКВыбранномуПолю Из ШаблонДокумента.ВыбранныеПоля Цикл
			НовоеПоле = КомпоновщикНастроекКД.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПутьКВыбранномуПолю);
		КонецЦикла;
	КонецЕсли;
	
	Если ШаблонДокумента.Свойство("УсловияВывода")
		И ЗначениеЗаполнено(ШаблонДокумента.УсловияВывода) Тогда
		
		Для Каждого УсловияВывода Из ШаблонДокумента.УсловияВывода Цикл
			ГруппаУсловийИзJSON(КомпоновщикНастроекКД.Настройки.Отбор.Элементы, УсловияВывода);
		КонецЦикла;
		
	КонецЕсли;
	
	Настройки.Настройки = КомпоновщикНастроекКД.Настройки;
	Настройки.ПользовательскиеНастройки = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	
	ШаблонПоУмолчанию.Вставить("Настройки", Настройки);
	
	Возврат ШаблонПоУмолчанию;
	
КонецФункции

Процедура ДобавитьРасширенияПолейСхемыКомпоновкиДанных(Схема, ОбновитьИзСхемыПоУмолчанию = Ложь) Экспорт
	
	НаборДанных = Схема.НаборыДанных[0];
	
	Если ОбновитьИзСхемыПоУмолчанию Тогда
		ОтчетОбъект = Отчеты.ШаблоныДокументовКабинетСотрудника.Создать();
		СхемаПоУмолчанию = ОтчетОбъект.СхемаКомпоновкиДанных;
		Для Каждого Поле Из СхемаПоУмолчанию.НаборыДанных[0].Поля Цикл
			Если НаборДанных.Поля.Найти(Поле.ПутьКДанным) = Неопределено Тогда
				ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле, , "ОграничениеИспользования,ОграничениеИспользованияРеквизитов");
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных.ОграничениеИспользования, Поле.ОграничениеИспользования);
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных.ОграничениеИспользованияРеквизитов, Поле.ОграничениеИспользованияРеквизитов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Поле Из НаборДанных.Поля Цикл
		Если Поле.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
			Если Поле.ОграничениеИспользованияРеквизитов.Поле Тогда
				Поле.ОграничениеИспользованияРеквизитов.Поле = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГруппаУсловийИзJSON(КоллекцияЭлементовОтбора, УсловияВывода, ТипГруппы = Неопределено)
	
	ГруппаОбласти = КоллекцияЭлементовОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Если ТипГруппы = Неопределено Тогда
		ГруппаОбласти.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Иначе
		ГруппаОбласти.ТипГруппы = ТипГруппы;
	КонецЕсли;
	
	Если УсловияВывода.Свойство("Имя") Тогда
		ГруппаОбласти.Представление = УсловияВывода.Имя;
	КонецЕсли;
	
	Для Каждого ОписаниеУсловия Из УсловияВывода.Элементы Цикл
		Если ОписаниеУсловия.ЭтоГруппа Тогда
			ГруппаУсловийИзJSON(ГруппаОбласти.Элементы, ОписаниеУсловия, Вычислить(ОписаниеУсловия.ТипГруппы));
		Иначе
			ЭлементОтбора = ГруппаОбласти.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеУсловия.ЛевоеЗначение);
			ЭлементОтбора.ВидСравнения = Вычислить(ОписаниеУсловия.ВидСравнения);
			Если ОписаниеУсловия.Свойство("ПравоеЗначение") Тогда
				Если ОписаниеУсловия.Свойство("ТипСсылочногоЗначения") Тогда
					ТипСсылочногоЗначения = Неопределено;
					Если ОписаниеУсловия.ТипСсылочногоЗначения = "divisions" Тогда
						ТипСсылочногоЗначения = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
					ИначеЕсли  ОписаниеУсловия.ТипСсылочногоЗначения = "positions" Тогда
						ТипСсылочногоЗначения = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность;
					ИначеЕсли  ОписаниеУсловия.ТипСсылочногоЗначения = "employers" Тогда
						ТипСсылочногоЗначения = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация;
					ИначеЕсли  ОписаниеУсловия.ТипСсылочногоЗначения = "stafflist-positions" Тогда
						ТипСсылочногоЗначения = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
					КонецЕсли;
					Если ТипСсылочногоЗначения <> Неопределено Тогда
						ПравыеЗначения = ИнтеграцияУправлениеПерсоналомОбмен.ПубличныйИдентификаторСсылка(
							ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеУсловия.ПравоеЗначение),
							ТипСсылочногоЗначения);
						ПравоеЗначение = ПравыеЗначения.Получить(ОписаниеУсловия.ПравоеЗначение);
					ИначеЕсли ОписаниеУсловия.ТипСсылочногоЗначения = "gender" Тогда
						Если ОписаниеУсловия.ПравоеЗначение = "female" Тогда
							ПравоеЗначение = Перечисления.ПолФизическогоЛица.Женский;
						Иначе
							ПравоеЗначение = Перечисления.ПолФизическогоЛица.Мужской;
						КонецЕсли;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(ПравоеЗначение) Тогда
						ПравоеЗначение = ОписаниеУсловия.ТипСсылочногоЗначения + "." + ОписаниеУсловия.ПравоеЗначение;
					КонецЕсли;
					ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
				Иначе
					ЭлементОтбора.ПравоеЗначение = ОписаниеУсловия.ПравоеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#Область СериализацияВJSON

Функция ШаблонаДокументаИзJSON(МакетJSON)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(МакетJSON.ПолучитьТекст());
	
	ШаблонаДокумента = ПрочитатьJSON(ЧтениеJSON);
	Возврат ШаблонаДокумента;
	
КонецФункции

Функция JSONШаблонаДокумента(МакетПечатнойФормы, ТекущаяСхема, Настройки) Экспорт
	
	ОтчетОбъект = Отчеты.ШаблоныДокументовКабинетСотрудника.Создать();
	СхемаПоУмолчанию = ОтчетОбъект.СхемаКомпоновкиДанных;
	
	ПотокЗаписи = Новый ПотокВПамяти;
	МакетПечатнойФормы.Записать(ПотокЗаписи);
	ДвоичныеДанныеМакета = ПотокЗаписи.ЗакрытьИПолучитьДвоичныеДанные();
	
	ОписаниеФормы = Новый Структура;
	ОписаниеФормы.Вставить("Макет", Base64Строка(ДвоичныеДанныеМакета));
	ОписаниеФормы.Вставить("УсловияВывода", УсловияОбластейИзНастроек(Настройки));
	ОписаниеФормы.Вставить("РеквизитыДокумента", РеквизитыДокумента(ТекущаяСхема, СхемаПоУмолчанию));
	ОписаниеФормы.Вставить("ВыбранныеПоля", ВыбранныеПоляИзНастроек(Настройки));
	
	УдалитьПустыеЗначения(ОписаниеФормы);
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, ОписаниеФормы, НастройкиСериализацииJSON, "ПреобразованиеJSON", Справочники.ШаблоныДокументов);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеJSON(Знач Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Результат = Неопределено;
	Если ТипЗнч(Значение) = Тип("ТипГруппыЭлементовОтбораКомпоновкиДанных") Тогда
		Если Значение = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ Тогда
			Результат = "ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ";
		ИначеЕсли Значение = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
			Результат = "ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли";
		ИначеЕсли Значение = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
			Результат = "ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Значение) = Тип("ВидСравненияКомпоновкиДанных") Тогда
		Если Значение = ВидСравненияКомпоновкиДанных.Больше Тогда
			Результат = "ВидСравненияКомпоновкиДанных.Больше";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			Результат = "ВидСравненияКомпоновкиДанных.БольшеИлиРавно";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
			Результат = "ВидСравненияКомпоновкиДанных.ВИерархии";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Результат = "ВидСравненияКомпоновкиДанных.ВСписке";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
			Результат = "ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.Заполнено Тогда
			Результат = "ВидСравненияКомпоновкиДанных.Заполнено";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.Меньше Тогда
			Результат = "ВидСравненияКомпоновкиДанных.Меньше";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Результат = "ВидСравненияКомпоновкиДанных.МеньшеИлиРавно";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
			Результат = "ВидСравненияКомпоновкиДанных.НачинаетсяС";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			Результат = "ВидСравненияКомпоновкиДанных.НеВИерархии";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
			Результат = "ВидСравненияКомпоновкиДанных.НеВСписке";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
			Результат = "ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			Результат = "ВидСравненияКомпоновкиДанных.НеЗаполнено";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
			Результат = "ВидСравненияКомпоновкиДанных.НеНачинаетсяС";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
			Результат = "ВидСравненияКомпоновкиДанных.НеПодобно";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			Результат = "ВидСравненияКомпоновкиДанных.НеРавно";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
			Результат = "ВидСравненияКомпоновкиДанных.НеСодержит";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.Подобно Тогда
			Результат = "ВидСравненияКомпоновкиДанных.Подобно";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.Равно Тогда
			Результат = "ВидСравненияКомпоновкиДанных.Равно";
		ИначеЕсли Значение = ВидСравненияКомпоновкиДанных.Содержит Тогда
			Результат = "ВидСравненияКомпоновкиДанных.Содержит";
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) Тогда
		ИдентификаторЗначения = Неопределено;
		ТипОбъектаУправлениеПерсоналом = Неопределено;
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			ТипОбъектаУправлениеПерсоналом = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Должности") Тогда
			ТипОбъектаУправлениеПерсоналом = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность;
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ТипОбъектаУправлениеПерсоналом = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ТипОбъектаУправлениеПерсоналом = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
		ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
			ТипОбъектаУправлениеПерсоналом = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация;
		КонецЕсли;
		Если ТипОбъектаУправлениеПерсоналом <> Неопределено Тогда
			ИдентификаторыЗначений = ИнтеграцияУправлениеПерсоналомОбмен.СсылкаПубличныйИдентификатор(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Значение),
				ТипОбъектаУправлениеПерсоналом);
			ИдентификаторЗначения = ИдентификаторыЗначений.Получить(Значение);
		КонецЕсли;
		Если ИдентификаторЗначения <> Неопределено Тогда
			Результат = ИдентификаторЗначения;
		Иначе
			Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
				Если Значение = Перечисления.ПолФизическогоЛица.Женский Тогда
					Результат = "female";
				Иначе
					Результат = "male";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Свойство = "ТипСсылочногоЗначения" Тогда
		Если Значение = Тип("СправочникСсылка.ПодразделенияОрганизаций")
			Или Значение = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			Результат = "divisions";
		ИначеЕсли Значение = Тип("ПеречислениеСсылка.ПолФизическогоЛица") Тогда
			Результат = "gender";
		ИначеЕсли Значение = Тип("СправочникСсылка.Должности") Тогда
			Результат = "positions";
		ИначеЕсли Значение = Тип("СправочникСсылка.Организации") Тогда
			Результат = "employers";
		ИначеЕсли Значение = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			Результат = "stafflist-positions";
		КонецЕсли;
	ИначеЕсли Свойство = "ДоступныеЗначения" Тогда
		Результат = Новый Массив;
		Для Каждого Элемент Из Значение Цикл
			Результат.Добавить(Новый Структура("Представление,Значение", Элемент.Представление, Элемент.Значение));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		СписокТипов = Новый Массив;
		Если Значение.СодержитТип(Тип("Дата")) Тогда
			СписокТипов.Добавить("Дата");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("СтандартныйПериод")) Тогда
			СписокТипов.Добавить("СтандартныйПериод");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("Строка")) Тогда
			СписокТипов.Добавить("Строка");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("Число")) Тогда
			СписокТипов.Добавить("Число");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("Булево")) Тогда
			СписокТипов.Добавить("Булево");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("ПеречислениеСсылка.ПолФизическогоЛица")) Тогда
			СписокТипов.Добавить("ПеречислениеСсылка.ПолФизическогоЛица");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("СправочникСсылка.Должности")) Тогда
			СписокТипов.Добавить("СправочникСсылка.Должности");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
			СписокТипов.Добавить("СправочникСсылка.Организации");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("СправочникСсылка.ШтатноеРасписание")) Тогда
			СписокТипов.Добавить("СправочникСсылка.ШтатноеРасписание");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("СправочникСсылка.ПодразделенияОрганизаций")) Тогда
			СписокТипов.Добавить("СправочникСсылка.ПодразделенияОрганизаций");
		КонецЕсли;
		Если Значение.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия")) Тогда
			СписокТипов.Добавить("СправочникСсылка.СтруктураПредприятия");
		КонецЕсли;
		Результат = СтрСоединить(СписокТипов, ",");
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не найдено способа конвертации значения %1 (%2)'"), Значение, ТипЗнч(Значение)));
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыДокумента(ТекущаяСхема, СхемаПоУмолчанию)
	
	Реквизиты = Новый Массив;
	
	НаборДанных = ТекущаяСхема.НаборыДанных[0];
	Для Каждого ПолеНабора Из НаборДанных.Поля Цикл
		Если СхемаПоУмолчанию.НаборыДанных[0].Поля.Найти(ПолеНабора.ПутьКДанным) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ПолеНабора) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда
			ДобавитьПолеДокумента(
				Реквизиты,
				Строка(ПолеНабора.Поле),
				ПолеНабора.ПутьКДанным,
				ПолеНабора.ТипЗначения,
				,
				Не ПолеНабора.ОграничениеИспользования.Условие,
				Не ПолеНабора.ОграничениеИспользованияРеквизитов.Поле,
				ПолеНабора.ПолучитьДоступныеЗначения());
		КонецЕсли;
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

Процедура УдалитьПустыеЗначения(КоллекцияОписания)
	
	УдаляемыеКлючи = Новый Массив;
	Для Каждого Элемент Из КоллекцияОписания Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			УдаляемыеЭлементы = Новый Массив;
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
					УдалитьПустыеЗначения(ЭлементМассива);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЭлементМассива) Тогда
					УдаляемыеЭлементы.Добавить(ЭлементМассива);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ЭлементМассива Из УдаляемыеЭлементы Цикл
				Элемент.Значение.Удалить(ЭлементМассива);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			УдалитьПустыеЗначения(Элемент.Значение);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
			УдаляемыеКлючи.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Ключ Из УдаляемыеКлючи Цикл
		КоллекцияОписания.Удалить(Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыбранныеПоляИзНастроек(Настройки)
	
	ВыбранныеПоля = Новый Массив;
	Для Каждого ВыбранноеПоле Из Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			ВыбранноеПолеСтрокой = Строка(ВыбранноеПоле.Поле);
			ВыбранныеПоля.Добавить(ВыбранноеПолеСтрокой);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыбранныеПоля;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьТребуетПодписания(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ШаблоныДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|ГДЕ
		|	НЕ ШаблоныДокументов.Ссылка В (&МассивОбновленных)
		|	И ШаблоныДокументов.ТребуетсяСогласование
		|	И НЕ ШаблоныДокументов.ТребуетПодписания";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.ШаблоныДокументов", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТребуетПодписания = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьНастройкиШаблонов(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Отчет", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Отчеты.ШаблоныДокументовКабинетСотрудника));
	Если ПараметрыОбновления = Неопределено Тогда
		МассивОбновленных = Новый Массив;
	Иначе
		
		Если ПараметрыОбновления.Свойство("МассивОбновленных") Тогда
			МассивОбновленных = ПараметрыОбновления.МассивОбновленных;
		Иначе
			МассивОбновленных = Новый Массив;
			ПараметрыОбновления.Вставить("МассивОбновленных", МассивОбновленных);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивОбновленных", МассивОбновленных);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВариантыОтчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
		|ГДЕ
		|	ВариантыОтчетов.Отчет = &Отчет
		|	И ВариантыОтчетов.ПометкаУдаления
		|	И ВариантыОтчетов.Наименование ПОДОБНО ""ШаблоныДокументов%""
		|	И НЕ ВариантыОтчетов.Ссылка В (&МассивОбновленных)";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	Пока Выборка.Следующий() Цикл
		
		МассивОбновленных.Добавить(Выборка.Ссылка);
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.ВариантыОтчетов", "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ПометкаУдаления = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли