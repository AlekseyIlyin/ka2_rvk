#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает текст запроса динамического списка полуфабрикатов, используется в форме документа "План производства"
//
// Параметры:
//  СписокОтборов	 - Структура	 - список предопределенных отборов динамического списка
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаДинамическогоСписокПолуфабрикатов(СписокОтборов) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПланыПроизводства.Регистратор КАК Регистратор,
	|	ПланыПроизводства.НомерСтроки КАК НомерСтроки,
	|
	|	ПланыПроизводства.ПланПроизводства КАК ПланПроизводства,
	|	ПланыПроизводства.Период           КАК Период,
	|	ПланыПроизводства.Номенклатура     КАК Номенклатура,
	|	ПланыПроизводства.Характеристика   КАК Характеристика,
	|	ПланыПроизводства.Назначение       КАК Назначение,
	|	ПланыПроизводства.Спецификация     КАК Спецификация,
	|
	|	ПланыПроизводства.ДатаВыпускаПолуфабриката КАК ДатаВыпускаПолуфабриката,
	|	ПланыПроизводства.ДатаЗапускаВыпуска КАК ДатаЗапускаВыпуска,
	|
	|	ПланыПроизводства.Количество КАК Количество,
	|	ПланыПроизводства.КЗаказу КАК КЗаказу,
	|
	|	ПланыПроизводства.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПланыПроизводства.Номенклатура.ИспользованиеХарактеристик В (
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                          КАК ХарактеристикиИспользуются,
	|
	|	ПланыПроизводства.РучнаяКорректировка КАК РучнаяКорректировка,
	|	ПланыПроизводства.ДатаКорректировки   КАК ДатаКорректировки,
	|	ПланыПроизводства.АвторКорректировки  КАК АвторКорректировки,
	|	ПланыПроизводства.Комментарий         КАК Комментарий
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|ГДЕ
	|	ПланыПроизводства.ПланПроизводства = &ПланПроизводства И ПланыПроизводства.Запланировать
	|	И &ЕстьОтборПоВхождениямПолуфабриката";
	
	Если СписокОтборов.Свойство("ЕстьОтборПоВхождениямПолуфабриката") И СписокОтборов.ЕстьОтборПоВхождениямПолуфабриката Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланыПроизводства.Регистратор КАК Регистратор,
		|	ПланыПроизводства.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВтОтборПоВхождениямПолуфабриката
		|ИЗ
		|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
		|		ПО ПланыПроизводства.ПланПроизводства = ПланыПотребленияМатериалов.ПланПроизводства
		|		 И ПланыПроизводства.Период           = ПланыПотребленияМатериалов.ДатаПроизводства
		|		 И ПланыПроизводства.Спецификация     = ПланыПотребленияМатериалов.СпецификацияПродукции
		|		 И ПланыПроизводства.Назначение       = ПланыПотребленияМатериалов.НазначениеПродукции
		|		 И ПланыПроизводства.Характеристика   = ПланыПотребленияМатериалов.ХарактеристикаПродукции
		|ГДЕ
		|	ПланыПотребленияМатериалов.ПланПроизводства = &ПланПроизводства
		|	И ПланыПотребленияМатериалов.Период         = &ДатаВыпускаПолуфабриката
		|	И ПланыПотребленияМатериалов.Назначение     = &Назначение
		|	И ПланыПотребленияМатериалов.Номенклатура   = &Номенклатура
		|	И ПланыПотребленияМатериалов.Характеристика = &Характеристика
		|" + "
		|;
		|" + ТекстЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОтборПоВхождениямПолуфабриката", "
			|(ПланыПроизводства.Регистратор, ПланыПроизводства.НомерСтроки) 
			|В 
			|(ВЫБРАТЬ
			|		ТаблицаОтбора.Регистратор КАК Регистратор,
			|		ТаблицаОтбора.НомерСтроки КАК НомерСтроки
			|	ИЗ
			|		ВтОтборПоВхождениямПолуфабриката КАК ТаблицаОтбора
			|)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьОтборПоВхождениямПолуфабриката", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

// Рассчитывает количество полуфабрикатов, используется при отображении количества строк в динамическом списке полуфабрикатов
//
// Параметры:
//  ПланПроизводства - ДокументСсылка.ПланПроизводства - ссылка на документ план производства
// 
// Возвращаемое значение:
//  Число - количество строк 
//
Функция РассчитатьКоличествоПолуфабрикатов(ПланПроизводства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|ГДЕ
	|	ПланыПроизводства.ПланПроизводства = &ПланПроизводства
	|	И ПланыПроизводства.Запланировать
	|");
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоСтрок;
	
КонецФункции

// Возвращает данные регистра по заданному плану.
//
// Параметры:
//  Ссылка					 - ДокументСсылка.ПланПроизводства - план, данные которого необходимо прочитать.
//  ПолучитьПродукцию		 - Булево - Истина, если требуется получить план выпуска готовой продукции.
//  ПолучитьПолуфабрикаты	 - Булево - Истина, если требуется получить план выпуска производимых полуфабрикатов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные регистра.
//
Функция ПрочитатьПланПроизводства(Ссылка, ПолучитьПродукцию = Истина, ПолучитьПолуфабрикаты = Истина) Экспорт
	
	Если НЕ ПолучитьПродукцию И НЕ ПолучитьПолуфабрикаты Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка чтения данных плана производства. В процедуру переданы некорректные параметры.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПланыПроизводства.*
		|ИЗ
		|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
		|ГДЕ
		|	ПланыПроизводства.Регистратор = &Ссылка
		|	И &ПродукцияПолуфабрикат";
		
	Если ПолучитьПродукцию И ПолучитьПолуфабрикаты Тогда
		ТекстУсловия = "ИСТИНА";
	ИначеЕсли ПолучитьПродукцию Тогда
		ТекстУсловия = "ПланыПроизводства.Запланировать = ЛОЖЬ";
	ИначеЕсли ПолучитьПолуфабрикаты Тогда
		ТекстУсловия = "ПланыПроизводства.Запланировать = ИСТИНА";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПродукцияПолуфабрикат", ТекстУсловия);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает список продукции, потребляющей заданный полуфабрикат.
//
// Параметры:
//  ПланПроизводства - ДокументСсылка.ПланПроизводства			 - план производства
//  ДатаПотребности	 - Дата										 - дата потребности (дата производства, дата выпуска полуфабриката)
//  Назначение		 - СправочникСсылка.Назначения				 - назначение
//  Номенклатура	 - СправочникСсылка.Номенклатура			 - номенклатура
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика
// 
// Возвращаемое значение:
//  ТаблицаЗначений - данные о потребителях полуфабриката.
//
Функция ПолуфабрикатВходитВПродукцию(ПланПроизводства, ДатаПотребности, Назначение, Номенклатура, Характеристика) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланыПроизводства.Номенклатура КАК Номенклатура,
	|	ПланыПроизводства.Характеристика КАК Характеристика,
	|	ПланыПроизводства.Назначение КАК Назначение,
	|	ПланыПроизводства.Спецификация КАК Спецификация
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыПотребленияМатериалов КАК ПланыПотребленияМатериалов
	|		ПО ПланыПроизводства.ПланПроизводства = ПланыПотребленияМатериалов.ПланПроизводства
	|		 И ПланыПроизводства.Период           = ПланыПотребленияМатериалов.ДатаПроизводства
	|		 И ПланыПроизводства.Спецификация     = ПланыПотребленияМатериалов.СпецификацияПродукции
	|		 И ПланыПроизводства.Назначение       = ПланыПотребленияМатериалов.НазначениеПродукции
	|		 И ПланыПроизводства.Характеристика   = ПланыПотребленияМатериалов.ХарактеристикаПродукции
	|ГДЕ
	|	ПланыПотребленияМатериалов.ПланПроизводства = &ПланПроизводства
	|	И ПланыПотребленияМатериалов.Период         = &ДатаПотребности
	|	И ПланыПотребленияМатериалов.Назначение     = &Назначение
	|	И ПланыПотребленияМатериалов.Номенклатура   = &Номенклатура
	|	И ПланыПотребленияМатериалов.Характеристика = &Характеристика
	|	И ( ПланыПотребленияМатериалов.ЭтоПолуфабрикат
	|		И НЕ ПланыПроизводства.ЭтоПолуфабрикат )
	|");
	Запрос.УстановитьПараметр("ПланПроизводства", ПланПроизводства);
	Запрос.УстановитьПараметр("ДатаПотребности",  ДатаПотребности);
	Запрос.УстановитьПараметр("Назначение",       Назначение);
	Запрос.УстановитьПараметр("Номенклатура",     Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",   Характеристика);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Сценарий)
	|	И ЗначениеРазрешено(ВидПлана)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПланыПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.18.25";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e95e31fb-68bd-48dc-b479-41a3939ad47a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыПроизводства.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Запланировать"" значением из реквизита ""Это полуфабрикат"".'");
	Обработчик.ЧитаемыеОбъекты = Метаданные.РегистрыНакопления.ПланыПроизводства.ПолноеИмя();
	Обработчик.ИзменяемыеОбъекты = Метаданные.РегистрыНакопления.ПланыПроизводства.ПолноеИмя();
	
КонецПроцедуры

// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ПланыПроизводства";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланыПроизводства.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ДокументПлан
	|	ПО ПланыПроизводства.ПланПроизводства = ДокументПлан.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|	ПО ВидыПланов.Ссылка = ДокументПлан.ВидПлана
	|	И ВидыПланов.ПланироватьПолуфабрикатыАвтоматически
	|ГДЕ
	|	ПланыПроизводства.ЭтоПолуфабрикат
	|	И НЕ ПланыПроизводства.Запланировать";
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыНакопления.ПланыПроизводства.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущиеДанные Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПланыПроизводства.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ТекущиеДанные.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.ПланыПроизводства.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущиеДанные.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для каждого Запись Из НаборЗаписей Цикл
				Если Запись.ЭтоПолуфабрикат Тогда
					Запись.Запланировать = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущиеДанные.Регистратор);
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
