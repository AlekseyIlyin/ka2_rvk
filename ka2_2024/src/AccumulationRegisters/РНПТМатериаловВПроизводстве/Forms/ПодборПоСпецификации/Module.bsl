
#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТаблицаТоваров     = Параметры.АдресТаблицаТоваров;
	Дата                    = Параметры.Дата;
	Организация             = Параметры.Организация;
	Регистратор             = Параметры.Регистратор;
	Ссылка                  = Параметры.Регистратор;
	Спецификация            = Параметры.Спецификация;
	СпецификацияДоИзменения = Спецификация;
	Номенклатура            = Параметры.Номенклатура;
	Характеристика          = Параметры.Характеристика;
	Назначение              = Параметры.Назначение;
	Количество              = Параметры.Количество;
	
	ЗагрузитьТаблицуДокументов(АдресТаблицаТоваров);
	
	ОстаткиДоступны = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РНПТМатериаловВПроизводстве);
	
	УстановитьПараметрыВыбораСпецификаций();
	СформироватьИнформационнуюНадписьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьТаблицыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаВыбораПоНоменклатуре" Тогда
		СпецификацияОбработкаВыбора(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "РегистрНакопления.РНПТМатериаловВПроизводстве.Форма.ПодборРНПТМатериала" Тогда
		ТекущиеДанные = Элементы.СтруктураИзделия.ТекущиеДанные;
		ОбработкаПодбораРНПТМатериала(ВыбранноеЗначение, ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		И Модифицированность Тогда
		
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
		
		Возврат;
		
	КонецЕсли;
	
	Если ПеренестиВДокумент
		Или ВыполняетсяЗакрытие
		Или Не ТоварыПодобраны Тогда
		Возврат;
	Иначе
		
		Отказ = Истина;
		
		ТекстВопроса       = НСтр("ru = 'Подобранные товары не перенесены в документ. Перенести?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВДокумент Тогда
		
		Структура = Новый Структура("АдресТаблицаТоваров, Спецификация", АдресТаблицыТоваров(), Спецификация);
		ОповеститьОВыборе(Структура);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпецификацияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
	ДанныеОбИзделии.Номенклатура        = Номенклатура;
	ДанныеОбИзделии.Характеристика      = Характеристика;
	ДанныеОбИзделии.ТекущаяСпецификация = Спецификация;
	
	ДанныеОбИзделиях = Новый Массив;
	ДанныеОбИзделиях.Добавить(ДанныеОбИзделии);
	
	УправлениеДаннымиОбИзделияхКлиент.ОткрытьФормуВыбораСпецификацийПоСпискуНоменклатуры(ДанныеОбИзделиях, ПараметрыВыбораСпецификаций, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураИзделия

&НаКлиенте
Процедура СтруктураИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СтруктураИзделия.ТекущиеДанные;
	
	Если Поле = Элементы.СтруктураИзделияКоличество
		И ТекущиеДанные.Выбрана Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Дата",           Дата);
		ПараметрыФормы.Вставить("Организация",    Организация);
		ПараметрыФормы.Вставить("Регистратор",    Регистратор);
		ПараметрыФормы.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ПараметрыФормы.Вставить("Норматив",       ТекущиеДанные.Норматив);
		ПараметрыФормы.Вставить("НормативПоРНПТ", ТекущиеДанные.НормативПоРНПТ);
		ПараметрыФормы.Вставить("АдресТаблицаОстатков", ПоместитьТекущиеОстаткиВХранилище(ТекущиеДанные.ПолучитьИдентификатор()));
		
		ОткрытьФорму(
			"РегистрНакопления.РНПТМатериаловВПроизводстве.Форма.ПодборРНПТМатериала",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураИзделияВыбранаПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"РегистрНакопления.РНПТМатериаловВПроизводстве.Форма.ПодборПоСпецификации.СтруктураИзделияВыбранаПриИзменении");
	
	СтруктураИзделияВыбранаПриИзмененииНаСервере(Элементы.СтруктураИзделия.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ОчиститьСообщения();
	
	ПеренестиВДокумент = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	ВыбратьСнятьВсеНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ВыбратьСнятьВсеНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Модифицированность = Ложь;
	ЗаполнитьТаблицыТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	РазвернутьСвернутьВсе(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	РазвернутьСвернутьВсе(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"СтруктураИзделияХарактеристика",
		"СтруктураИзделия.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтотОбъект,
		"СтруктураИзделияНазначение",
		"СтруктураИзделия.ТипНоменклатуры",
		Ложь);
	
	#КонецОбласти
	
	// Не отображать остаток в подобранных строках.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураИзделияОстаток.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураИзделия.Выбрана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Не отображать остаток для полуфабрикатов.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтруктураИзделияОстаток.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтруктураИзделия.ЕстьПодчиненные");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИнформационнуюНадписьОтборы()
	
	Отборы = Новый Массив;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отборы.Добавить(СтрЗаменить(НСтр("ru='Организация: %Организация%'"), "%Организация%", Организация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отборы) Тогда
		
		ОтборыПредставление = СтрСоединить(Отборы, ", ");
		
		ИнформационнаяНадписьОтборы = НСтр("ru='Отбор остатков по: %Отборы%.'");
		ИнформационнаяНадписьОтборы = СтрЗаменить(ИнформационнаяНадписьОтборы, "%Отборы%", ОтборыПредставление);
		
	Иначе
		ИнформационнаяНадписьОтборы = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступность(ЭлементыФормы, Доступность)
	
	ЗависящиеЭлементы = Новый Массив;
	ЗависящиеЭлементы.Добавить("Спецификация");
	ЗависящиеЭлементы.Добавить("ПеренестиВДокумент");
	ЗависящиеЭлементы.Добавить("СтруктураИзделияОбновить");
	ЗависящиеЭлементы.Добавить("СтруктураИзделияВыбратьВсе");
	ЗависящиеЭлементы.Добавить("СтруктураИзделияСнятьВсе");
	ЗависящиеЭлементы.Добавить("СтруктураИзделияСвернутьВсе");
	ЗависящиеЭлементы.Добавить("СтруктураИзделияРазвернутьВсе");
	ЗависящиеЭлементы.Добавить("СтруктураИзделия");
	
	Для Каждого ТекущийЭлемент Из ЗависящиеЭлементы Цикл
		ЭлементыФормы[ТекущийЭлемент].Доступность = Доступность;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСпецификаций()
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	СвязиПараметровВыбора = Новый Структура(УправлениеДаннымиОбИзделияхКлиентСервер.ПоляСтруктурыДанныхОбИзделииДляВыбораСпецификации());
	
	СвязиПараметровВыбора.Номенклатура       = "Номенклатура";
	СвязиПараметровВыбора.Характеристика     = "Характеристика";
	СвязиПараметровВыбора.НачалоПроизводства = "Дата";
	
	ПараметрыВыбораСпецификаций.СвязиПараметровВыбора.Вставить("Спецификация", СвязиПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыСлужебные

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПеренестиВДокумент = Истина;
		ВыполняетсяЗакрытие = Истина;
		
		Закрыть();
		
		Возврат;
		
	КонецЕсли;
	
	ВыполняетсяЗакрытие = Истина;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыСлужебные

&НаКлиенте
Процедура СпецификацияОбработкаВыбора(ВыбранноеЗначение)
	
	Спецификация = ВыбранноеЗначение;
	
	Если Не Спецификация = СпецификацияДоИзменения
		И СтруктураИзделия.ПолучитьЭлементы().Количество() = 0 Тогда
		
		СпецификацияПриИзмененииЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	ИначеЕсли Не Спецификация = СпецификацияДоИзменения Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СпецификацияПриИзмененииЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Структура изделия будет перезаполнена. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьТаблицыТоваров();
		СпецификацияДоИзменения = Спецификация;
		
	Иначе
		Спецификация = СпецификацияДоИзменения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураИзделияСлужебные

&НаСервере
Процедура СтруктураИзделияВыбранаПриИзмененииНаСервере(ТекущийИдентификатор)
	
	ТекущиеДанные = СтруктураИзделия.НайтиПоИдентификатору(ТекущийИдентификатор);
	
	ИдентификаторыИзмененныхОстатков = Новый Соответствие;
	ПодобратьМатериалыРекурсивно(ТекущиеДанные, ТекущиеДанные.Выбрана, ИдентификаторыИзмененныхОстатков);
	
	ТоварыПодобраны = ВыбранаПриИзмененииУчестьВРодителях(ТекущиеДанные);
	
	АктуализироватьОстаткиНормативов(ИдентификаторыИзмененныхОстатков);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыСлужебные

&НаСервере
Процедура ВыбратьСнятьВсеНаСервере(Выбрана)
	
	Для Каждого ТекущиеДанные Из СтруктураИзделия.ПолучитьЭлементы() Цикл
		ТекущиеДанные.Выбрана = Выбрана;
		СтруктураИзделияВыбранаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьВсе(Свернуть)
	
	Для Каждого ТекущиеДанные Из СтруктураИзделия.ПолучитьЭлементы() Цикл
		Если Свернуть Тогда
			Элементы.СтруктураИзделия.Свернуть(ТекущиеДанные.ПолучитьИдентификатор());
		Иначе
			Элементы.СтруктураИзделия.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДанных

&НаКлиенте
Процедура ЗаполнитьТаблицыТоваров()
	
	Если ОстаткиДоступны Тогда
		
		ПараметрыПроцедуры = Новый Структура();
		ПараметрыПроцедуры.Вставить("Дата",           Дата);
		ПараметрыПроцедуры.Вставить("Организация",    Организация);
		ПараметрыПроцедуры.Вставить("Регистратор",    Регистратор);
		ПараметрыПроцедуры.Вставить("Спецификация",   Спецификация);
		ПараметрыПроцедуры.Вставить("Номенклатура",   Номенклатура);
		ПараметрыПроцедуры.Вставить("Характеристика", Характеристика);
		ПараметрыПроцедуры.Вставить("Назначение",     Назначение);
		ПараметрыПроцедуры.Вставить("Количество",     Количество);
		
		НаименованиеЗадания = НСтр("ru = 'Учет РНПТ в производстве: Формирование структуры изделия по спецификации.'");
		
		ДлительнаяОперация =
			ВыполнитьДействияВФоне(
				ДействиеСформироватьПрослеживаемуюСтруктуруИзделия(),
				ПараметрыПроцедуры,
				НаименованиеЗадания);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("ВыполнитьДействияВФонеЗавершение", ЭтотОбъект, ДействиеСформироватьПрослеживаемуюСтруктуруИзделия()),
			ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПодчиненныеСтроки(СтруктураИзделияТаблица, ТекущийИдентификатор, ЭлементыДерева)
	
	МатериалыПодобраны = Ложь;
	
	Отбор = Новый Структура("ИдентификаторРодителя", ТекущийИдентификатор);
	Для Каждого ТекущиеДанные Из СтруктураИзделияТаблица.НайтиСтроки(Отбор) Цикл
		
		НоваяСтрока = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
		
		МатериалыПодобраны = Макс(МатериалыПодобраны, ВывестиПодчиненныеСтроки(СтруктураИзделияТаблица, ТекущиеДанные.ИдентификаторСтроки, НоваяСтрока.ПолучитьЭлементы()));
		
		Если НоваяСтрока.ПолучитьЭлементы().Количество() = 0 Тогда
			НоваяСтрока.Выбрана = СопоставитьНормативыСОстатками(НоваяСтрока);
		Иначе
			НоваяСтрока.Выбрана = МатериалыПодобраны;
			НоваяСтрока.ЕстьПодчиненные = Истина;
		КонецЕсли;
		
		МатериалыПодобраны = Макс(МатериалыПодобраны, НоваяСтрока.Выбрана);
		
	КонецЦикла;
	
	Возврат МатериалыПодобраны;
	
КонецФункции

&НаСервере
Процедура ВывестиОстаткиТаблицыДокумента()
	
	Для Каждого ТекущиеДанныеДокумента Из ТаблицаДокумента Цикл
		
		Если ТекущиеДанныеДокумента.Количество = ТекущиеДанныеДокумента.Подобрано Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборСоответствия = Новый Структура("Номенклатура, Характеристика, Назначение");
		ЗаполнитьЗначенияСвойств(ОтборСоответствия, ТекущиеДанныеДокумента);
		
		Для Каждого ТекущееСоответствие Из СоответствиеНормативовОстаткам.НайтиСтроки(ОтборСоответствия) Цикл
			
			ТекущийОстаток = ТаблицаОстатков.НайтиПоИдентификатору(ТекущееСоответствие.ИдентификаторОстатка);
			
			Если ТекущийОстаток.Количество = ТекущийОстаток.Подобрано Тогда
				Продолжить;
			КонецЕсли;
			
			Подобрать =
				Мин(ТекущиеДанныеДокумента.Количество - ТекущиеДанныеДокумента.Подобрано,
					ТекущийОстаток.Количество - ТекущийОстаток.Подобрано);
			
			ПодобратьПоРНПТ =
				Мин(ТекущиеДанныеДокумента.КоличествоПоРНПТ - ТекущиеДанныеДокумента.ПодобраноПоРНПТ,
					ТекущийОстаток.КоличествоПоРНПТ - ТекущийОстаток.ПодобраноПоРНПТ);
			
			Если ЗначениеЗаполнено(Подобрать) Тогда
				
				ТекущиеДанныеДокумента.Подобрано       = ТекущиеДанныеДокумента.Подобрано + Подобрать;
				ТекущиеДанныеДокумента.ПодобраноПоРНПТ = ТекущиеДанныеДокумента.ПодобраноПоРНПТ + ПодобратьПоРНПТ;
				
				ТекущийОстаток.Подобрано       = ТекущийОстаток.Подобрано + Подобрать;
				ТекущийОстаток.ПодобраноПоРНПТ = ТекущийОстаток.ПодобраноПоРНПТ + ПодобратьПоРНПТ;
				
				ТекущееСоответствие.Подобрано       = ТекущееСоответствие.Подобрано + Подобрать;
				ТекущееСоответствие.ПодобраноПоРНПТ = ТекущееСоответствие.ПодобраноПоРНПТ + ПодобратьПоРНПТ;
				
				ТекущийНорматив = СтруктураИзделия.НайтиПоИдентификатору(ТекущееСоответствие.ИдентификаторНорматива);
				
				ТекущийНорматив.Количество       = ТекущийНорматив.Количество + Подобрать;
				ТекущийНорматив.КоличествоПоРНПТ = ТекущийНорматив.КоличествоПоРНПТ + ПодобратьПоРНПТ;
				
			КонецЕсли;
			
			Если ТекущиеДанныеДокумента.Количество = ТекущиеДанныеДокумента.Подобрано Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущиеДанныеДокумента.Количество = ТекущиеДанныеДокумента.Подобрано Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаНорматива = СтруктураИзделия.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНорматива, ТекущиеДанныеДокумента);
		
		НоваяСтрокаНорматива.Выбрана = Истина;
		
		НоваяСтрокаНорматива.Количество       = ТекущиеДанныеДокумента.Количество - ТекущиеДанныеДокумента.Подобрано;
		НоваяСтрокаНорматива.КоличествоПоРНПТ = ТекущиеДанныеДокумента.КоличествоПоРНПТ - ТекущиеДанныеДокумента.ПодобраноПоРНПТ;
		
		НоваяСтрокаОстатков = ТаблицаОстатков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОстатков, ТекущиеДанныеДокумента);
		
		НоваяСтрокаОстатков.Количество       = НоваяСтрокаНорматива.Количество;
		НоваяСтрокаОстатков.КоличествоПоРНПТ = НоваяСтрокаНорматива.КоличествоПоРНПТ;
		
		НоваяСтрокаОстатков.Подобрано        = НоваяСтрокаНорматива.Количество;
		НоваяСтрокаОстатков.ПодобраноПоРНПТ  = НоваяСтрокаНорматива.КоличествоПоРНПТ;
		
		НовоеСоответствие = СоответствиеНормативовОстаткам.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСоответствие, НоваяСтрокаОстатков);
		
		НовоеСоответствие.ИдентификаторНорматива = НоваяСтрокаНорматива.ПолучитьИдентификатор();
		НовоеСоответствие.ИдентификаторОстатка   = НоваяСтрокаОстатков.ПолучитьИдентификатор();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СопоставитьНормативыСОстатками(ТекущийНорматив)
	
	ИдентификаторНорматива = ТекущийНорматив.ПолучитьИдентификатор();
	
	МатериалыПодобраны = Ложь;
	
	ОтборОстатка = Новый Структура("Номенклатура, Характеристика, Назначение");
	ЗаполнитьЗначенияСвойств(ОтборОстатка, ТекущийНорматив);
	
	Для Каждого ТекущийОстаток Из ТаблицаОстатков.НайтиСтроки(ОтборОстатка) Цикл
		
		ИдентификаторОстатка = ТекущийОстаток.ПолучитьИдентификатор();
		
		НоваяСтрока = СоответствиеНормативовОстаткам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийНорматив);
		
		НоваяСтрока.ИдентификаторНорматива = ИдентификаторНорматива;
		НоваяСтрока.ИдентификаторОстатка   = ИдентификаторОстатка;
		
		МатериалыПодобраны = Макс(МатериалыПодобраны, УчестьДанныеДокумента(ТекущийОстаток, ТекущийНорматив, НоваяСтрока));
		
	КонецЦикла;
	
	Возврат МатериалыПодобраны;
	
КонецФункции

&НаСервере
Функция УчестьДанныеДокумента(ТекущийОстаток, ТекущийНорматив, ТекущееСоответствие)
	
	МатериалыПодобраны = Ложь;
	
	КлючевыеПоля = "ПартияПроизводства, Подразделение, Номенклатура, Характеристика, Серия, Назначение, НомерГТД";
	ОтборДокумента = Новый Структура(КлючевыеПоля);
	ЗаполнитьЗначенияСвойств(ОтборДокумента, ТекущийОстаток);
	
	Для Каждого ТекущиеДанныеДокумента Из ТаблицаДокумента.НайтиСтроки(ОтборДокумента) Цикл
		
		Если ТекущиеДанныеДокумента.Количество = ТекущиеДанныеДокумента.Подобрано Тогда
			Продолжить;
		КонецЕсли;
		
		Подобрать =
			Мин(ТекущиеДанныеДокумента.Количество - ТекущиеДанныеДокумента.Подобрано,
				ТекущийОстаток.Количество - ТекущийОстаток.Подобрано,
				ТекущийНорматив.Норматив - ТекущийНорматив.Количество);
		
		ПодобратьПоРНПТ =
			Мин(ТекущиеДанныеДокумента.КоличествоПоРНПТ - ТекущиеДанныеДокумента.ПодобраноПоРНПТ,
				ТекущийОстаток.КоличествоПоРНПТ - ТекущийОстаток.ПодобраноПоРНПТ,
				ТекущийНорматив.НормативПоРНПТ - ТекущийНорматив.КоличествоПоРНПТ);
		
		Если ЗначениеЗаполнено(Подобрать) Тогда
			
			МатериалыПодобраны = Истина;
			
			ТекущиеДанныеДокумента.Подобрано       = ТекущиеДанныеДокумента.Подобрано + Подобрать;
			ТекущиеДанныеДокумента.ПодобраноПоРНПТ = ТекущиеДанныеДокумента.ПодобраноПоРНПТ + ПодобратьПоРНПТ;
			
			ТекущийОстаток.Подобрано       = ТекущийОстаток.Подобрано + Подобрать;
			ТекущийОстаток.ПодобраноПоРНПТ = ТекущийОстаток.ПодобраноПоРНПТ + ПодобратьПоРНПТ;
			
			ТекущееСоответствие.Подобрано       = ТекущееСоответствие.Подобрано + Подобрать;
			ТекущееСоответствие.ПодобраноПоРНПТ = ТекущееСоответствие.ПодобраноПоРНПТ + ПодобратьПоРНПТ;
			
			ТекущийНорматив.Количество       = ТекущийНорматив.Количество + Подобрать;
			ТекущийНорматив.КоличествоПоРНПТ = ТекущийНорматив.КоличествоПоРНПТ + ПодобратьПоРНПТ;
			
		КонецЕсли;
		
		Если ТекущийНорматив.Количество = ТекущийНорматив.Норматив Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МатериалыПодобраны;
	
КонецФункции

&НаСервере
Функция ПодобратьМатериалыРекурсивно(ТекущийНорматив, Выбрана, ИдентификаторыИзмененныхОстатков)
	
	МатериалыПодобраны = Ложь;
	
	ДанныеКРазузлованию = ТекущийНорматив.ПолучитьЭлементы();
	
	Если ДанныеКРазузлованию.Количество() = 0 Тогда
		МатериалыПодобраны = ПодобратьМатериалИзОстатков(ТекущийНорматив, Выбрана, ИдентификаторыИзмененныхОстатков);
	Иначе
		Для Каждого ПодчиненныйЭлемент Из ДанныеКРазузлованию Цикл
			МатериалыПодобраны = Макс(МатериалыПодобраны, ПодобратьМатериалыРекурсивно(ПодчиненныйЭлемент, Выбрана, ИдентификаторыИзмененныхОстатков));
		КонецЦикла;
	КонецЕсли;
	
	ТекущийНорматив.Выбрана = МатериалыПодобраны;
	
	Возврат МатериалыПодобраны;
	
КонецФункции

&НаСервере
Функция ПодобратьМатериалИзОстатков(ТекущийНорматив, Выбрана, ИдентификаторыИзмененныхОстатков)
	
	МатериалыПодобраны = Ложь;
	
	Если ТекущийНорматив.Норматив = 0 Тогда
		КоличествоКПодбору = ТекущийНорматив.Остаток + ТекущийНорматив.Количество;
	Иначе
		КоличествоКПодбору = ТекущийНорматив.Норматив;
	КонецЕсли;
	
	ОтборОстатков = Новый Структура("ИдентификаторНорматива", ТекущийНорматив.ПолучитьИдентификатор());
	НайденныеОстатки = СоответствиеНормативовОстаткам.НайтиСтроки(ОтборОстатков);
	
	Для Каждого ТекущееСоответствиеОстатка Из НайденныеОстатки Цикл
		
		ИзменениеОстатка = ИдентификаторыИзмененныхОстатков.Получить(ТекущееСоответствиеОстатка.ИдентификаторОстатка);
		Если ИзменениеОстатка = Неопределено Тогда
			ИдентификаторыИзмененныхОстатков.Вставить(ТекущееСоответствиеОстатка.ИдентификаторОстатка, 0);
			ИзменениеОстатка = 0;
		КонецЕсли;
		
		ТекущийОстаток = ТаблицаОстатков.НайтиПоИдентификатору(ТекущееСоответствиеОстатка.ИдентификаторОстатка);
		
		// Сторнируем обеспечение из текущей строки остатка.
		ИзменениеОстатка = ИзменениеОстатка + ТекущееСоответствиеОстатка.Подобрано;
		
		ТекущийОстаток.Подобрано       = ТекущийОстаток.Подобрано - ТекущееСоответствиеОстатка.Подобрано;
		ТекущийОстаток.ПодобраноПоРНПТ = ТекущийОстаток.ПодобраноПоРНПТ - ТекущееСоответствиеОстатка.ПодобраноПоРНПТ;
		
		ТекущийНорматив.Количество       = ТекущийНорматив.Количество - ТекущееСоответствиеОстатка.Подобрано;
		ТекущийНорматив.КоличествоПоРНПТ = ТекущийНорматив.КоличествоПоРНПТ - ТекущееСоответствиеОстатка.ПодобраноПоРНПТ;
		
		ТекущееСоответствиеОстатка.Подобрано       = 0;
		ТекущееСоответствиеОстатка.ПодобраноПоРНПТ = 0;
		
		// Обеспечим из текущей строки остатка.
		Если Выбрана
			И ЗначениеЗаполнено(КоличествоКПодбору)
			И Не ТекущийОстаток.Количество - ТекущийОстаток.Подобрано = 0 Тогда
			
			ТекущееСоответствиеОстатка.Подобрано = Мин(ТекущийОстаток.Количество - ТекущийОстаток.Подобрано, КоличествоКПодбору);
			
			ТекущееСоответствиеОстатка.ПодобраноПоРНПТ =
				(ТекущийОстаток.КоличествоПоРНПТ - ТекущийОстаток.ПодобраноПоРНПТ)
				* ТекущееСоответствиеОстатка.Подобрано
				/ (ТекущийОстаток.Количество - ТекущийОстаток.Подобрано);
			
			ИзменениеОстатка = ИзменениеОстатка - ТекущееСоответствиеОстатка.Подобрано;
			
			ТекущийОстаток.Подобрано       = ТекущийОстаток.Подобрано + ТекущееСоответствиеОстатка.Подобрано;
			ТекущийОстаток.ПодобраноПоРНПТ = ТекущийОстаток.ПодобраноПоРНПТ + ТекущееСоответствиеОстатка.ПодобраноПоРНПТ;
			
			ТекущийНорматив.Количество       = ТекущийНорматив.Количество + ТекущееСоответствиеОстатка.Подобрано;
			ТекущийНорматив.КоличествоПоРНПТ = ТекущийНорматив.КоличествоПоРНПТ + ТекущееСоответствиеОстатка.ПодобраноПоРНПТ;
			
			КоличествоКПодбору = КоличествоКПодбору - ТекущееСоответствиеОстатка.Подобрано;
			
			Если Не ТекущееСоответствиеОстатка.Подобрано = 0 Тогда
				МатериалыПодобраны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ИдентификаторыИзмененныхОстатков.Вставить(ТекущееСоответствиеОстатка.ИдентификаторОстатка, ИзменениеОстатка);
		
	КонецЦикла;
	
	Возврат МатериалыПодобраны;
	
КонецФункции

&НаСервере
Функция ВыбранаПриИзмененииУчестьВРодителях(ТекущиеДанные)
	
	МатериалыПодобраны = ТекущиеДанные.Выбрана;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если Не ТекущийРодитель = Неопределено Тогда
		
		Если Не МатериалыПодобраны Тогда
			Для Каждого ПодчиненныйЭлемент Из ТекущийРодитель.ПолучитьЭлементы() Цикл
				МатериалыПодобраны = ПодчиненныйЭлемент.Выбрана;
				Если МатериалыПодобраны Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекущийРодитель.Выбрана = МатериалыПодобраны;
		
		МатериалыПодобраны = ВыбранаПриИзмененииУчестьВРодителях(ТекущийРодитель);
		
	КонецЕсли;
	
	Возврат МатериалыПодобраны;
	
КонецФункции

&НаСервере
Функция ПоместитьТекущиеОстаткиВХранилище(ИдентификаторНорматива)
	
	ТекущиеОстатки = ТаблицаОстатков.Выгрузить(Новый Массив);
	ТекущиеОстатки.Колонки.Добавить("ИдентификаторОстатка", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	ОтборНормативы = Новый Структура("ИдентификаторНорматива", ИдентификаторНорматива);
	НайденныеОстатки = СоответствиеНормативовОстаткам.НайтиСтроки(ОтборНормативы);
	
	Для Каждого ТекущееСоответствие Из НайденныеОстатки Цикл
		
		ТекущийОстаток = ТаблицаОстатков.НайтиПоИдентификатору(ТекущееСоответствие.ИдентификаторОстатка);
		
		Если Не ТекущийОстаток.Количество - ТекущийОстаток.Подобрано + ТекущееСоответствие.Подобрано = 0 Тогда
			
			НоваяСтрока = ТекущиеОстатки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийОстаток);
			НоваяСтрока.ИдентификаторОстатка = ТекущееСоответствие.ИдентификаторОстатка;
			
			НоваяСтрока.Количество       = НоваяСтрока.Количество - ТекущийОстаток.Подобрано;
			НоваяСтрока.КоличествоПоРНПТ = НоваяСтрока.КоличествоПоРНПТ - ТекущийОстаток.ПодобраноПоРНПТ;
			
			НоваяСтрока.Подобрано        = ТекущееСоответствие.Подобрано;
			НоваяСтрока.ПодобраноПоРНПТ  = ТекущееСоответствие.ПодобраноПоРНПТ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТекущиеОстатки, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораРНПТМатериала(Результат, ИдентификаторНорматива)
	
	ИдентификаторыИзмененныхОстатков = Новый Соответствие;
	
	ТекущийНорматив = СтруктураИзделия.НайтиПоИдентификатору(ИдентификаторНорматива);
	
	// Сторнируем ранее подобранные данные
	ТекущийНорматив.Количество       = 0;
	ТекущийНорматив.КоличествоПоРНПТ = 0;
	
	ПодобранныеТовары = ПолучитьИзВременногоХранилища(Результат.АдресТаблицаОстатков);
	
	Для Каждого ТекущийОстаток Из ПодобранныеТовары Цикл
		
		ИзменениеОстатка = ИдентификаторыИзмененныхОстатков.Получить(ТекущийОстаток.ИдентификаторОстатка);
		Если ИзменениеОстатка = Неопределено Тогда
			ИдентификаторыИзмененныхОстатков.Вставить(ТекущийОстаток.ИдентификаторОстатка, 0);
			ИзменениеОстатка = 0;
		КонецЕсли;
		
		ТекущийОстатокДоИзменения = ТаблицаОстатков.НайтиПоИдентификатору(ТекущийОстаток.ИдентификаторОстатка);
		
		ОтборСоответствия =
			Новый Структура(
					"ИдентификаторНорматива, ИдентификаторОстатка",
					ИдентификаторНорматива,
					ТекущийОстаток.ИдентификаторОстатка);
		
		НайденноеСоответствие = СоответствиеНормативовОстаткам.НайтиСтроки(ОтборСоответствия);
		Для Каждого ТекущееСоответствие Из НайденноеСоответствие Цикл
			
			// Сторнируем ранее подобранные данные
			ИзменениеОстатка = ИзменениеОстатка + ТекущееСоответствие.Подобрано;
			
			ТекущийОстатокДоИзменения.Подобрано       = ТекущийОстатокДоИзменения.Подобрано - ТекущееСоответствие.Подобрано;
			ТекущийОстатокДоИзменения.ПодобраноПоРНПТ = ТекущийОстатокДоИзменения.ПодобраноПоРНПТ - ТекущееСоответствие.ПодобраноПоРНПТ;
			
			// Переносим текущие данные
			ТекущееСоответствие.Подобрано       = ТекущийОстаток.Подобрано;
			ТекущееСоответствие.ПодобраноПоРНПТ = ТекущийОстаток.ПодобраноПоРНПТ;
			
			ИзменениеОстатка = ИзменениеОстатка - ТекущееСоответствие.Подобрано;
			
			ТекущийОстатокДоИзменения.Подобрано       = ТекущийОстатокДоИзменения.Подобрано + ТекущееСоответствие.Подобрано;
			ТекущийОстатокДоИзменения.ПодобраноПоРНПТ = ТекущийОстатокДоИзменения.ПодобраноПоРНПТ + ТекущееСоответствие.ПодобраноПоРНПТ;
			
			ТекущийНорматив.Количество       = ТекущийНорматив.Количество + ТекущееСоответствие.Подобрано;
			ТекущийНорматив.КоличествоПоРНПТ = ТекущийНорматив.КоличествоПоРНПТ + ТекущееСоответствие.ПодобраноПоРНПТ;
			
		КонецЦикла;
		
		ИдентификаторыИзмененныхОстатков.Вставить(ТекущийОстаток.ИдентификаторОстатка, ИзменениеОстатка);
		
	КонецЦикла;
	
	АктуализироватьОстаткиНормативов(ИдентификаторыИзмененныхОстатков);
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыТоваров()
	
	ТекущиеОстатки = ТаблицаОстатков.Выгрузить(Новый Массив);
	
	Для Каждого ТекущиеДанные Из ТаблицаОстатков Цикл
		Если ЗначениеЗаполнено(ТекущиеДанные.Подобрано) Тогда
			НоваяСтрока = ТекущиеОстатки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТекущиеОстатки, АдресТаблицаТоваров);
	
КонецФункции

&НаСервере
Процедура АктуализироватьОстаткиНормативовВсе()
	
	Для Каждого ТекущееСоответствие Из СоответствиеНормативовОстаткам Цикл
		
		ТекущийНорматив = СтруктураИзделия.НайтиПоИдентификатору(ТекущееСоответствие.ИдентификаторНорматива);
		ТекущийОстаток  = ТаблицаОстатков.НайтиПоИдентификатору(ТекущееСоответствие.ИдентификаторОстатка);
		
		ТекущийНорматив.Остаток = ТекущийНорматив.Остаток + ТекущийОстаток.Количество - ТекущийОстаток.Подобрано;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьОстаткиНормативов(ИдентификаторыИзмененныхОстатков)
	
	Для Каждого ИдентификаторОстатка Из ИдентификаторыИзмененныхОстатков Цикл
		ОтборНормативов = Новый Структура("ИдентификаторОстатка", ИдентификаторОстатка.Ключ);
		Для Каждого ТекущийСоответствие Из СоответствиеНормативовОстаткам.НайтиСтроки(ОтборНормативов) Цикл
			ТекущийНорматив         = СтруктураИзделия.НайтиПоИдентификатору(ТекущийСоответствие.ИдентификаторНорматива);
			ТекущийНорматив.Остаток = ТекущийНорматив.Остаток + ИдентификаторОстатка.Значение;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицуДокументов(АдресТаблицаТоваров)
	
	Если ЭтоАдресВременногоХранилища(АдресТаблицаТоваров) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ПартияПроизводства         КАК ПартияПроизводства,
		|	ТаблицаДокумента.Подразделение              КАК Подразделение,
		|	ТаблицаДокумента.Номенклатура               КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика             КАК Характеристика,
		|	ТаблицаДокумента.Серия                      КАК Серия,
		|	ТаблицаДокумента.СтатусУказанияСерий        КАК СтатусУказанияСерий,
		|	ТаблицаДокумента.Назначение                 КАК Назначение,
		|	ТаблицаДокумента.НомерГТД                   КАК НомерГТД,
		|	ТаблицаДокумента.Количество                 КАК Количество,
		|	ТаблицаДокумента.КоличествоПоРНПТ           КАК КоличествоПоРНПТ,
		|	ТаблицаДокумента.ВедетсяУчетПоРНПТ          КАК ВедетсяУчетПоРНПТ,
		|	ТаблицаДокумента.ТипНоменклатуры            КАК ТипНоменклатуры,
		|	ТаблицаДокумента.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.ПартияПроизводства         КАК ПартияПроизводства,
		|	СпрПартииПроизводства.Документ              КАК ДокументВыпуска,
		|	ТаблицаДокумента.Подразделение              КАК Подразделение,
		|	ТаблицаДокумента.Номенклатура               КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика             КАК Характеристика,
		|	ТаблицаДокумента.Серия                      КАК Серия,
		|	ТаблицаДокумента.СтатусУказанияСерий        КАК СтатусУказанияСерий,
		|	ТаблицаДокумента.Назначение                 КАК Назначение,
		|	ТаблицаДокумента.НомерГТД                   КАК НомерГТД,
		|	ТаблицаДокумента.Количество                 КАК Количество,
		|	ТаблицаДокумента.КоличествоПоРНПТ           КАК КоличествоПоРНПТ,
		|	ТаблицаДокумента.ВедетсяУчетПоРНПТ          КАК ВедетсяУчетПоРНПТ,
		|	ТаблицаДокумента.ТипНоменклатуры            КАК ТипНоменклатуры,
		|	ТаблицаДокумента.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	СпрНоменклатура.ЕдиницаИзмерения            КАК ЕдиницаИзмерения
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
		|	ПО СпрПартииПроизводства.Ссылка = ТаблицаДокумента.ПартияПроизводства
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|	ПО СпрНоменклатура.Ссылка = ТаблицаДокумента.Номенклатура
		|";
		
		Запрос.УстановитьПараметр("ТаблицаДокумента", ПолучитьИзВременногоХранилища(АдресТаблицаТоваров));
		
		ТаблицаДокумента.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКомандВФоне

&НаСервере
Функция ВыполнитьДействияВФоне(Действие, ПараметрыПроцедуры, НаименованиеЗадания)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Если Действие = ДействиеСформироватьПрослеживаемуюСтруктуруИзделия() Тогда
		
		УстановитьДоступность(Элементы, Ложь);
		
		Возврат
			ДлительныеОперации.ВыполнитьВФоне(
				"РегистрыНакопления.РНПТМатериаловВПроизводстве.СформироватьПрослеживаемуюСтруктуруИзделияВФоне",
				ПараметрыПроцедуры,
				ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействияВФонеЗавершение(Результат, Действие) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	Иначе
		ВыполнитьДействияВФонеЗавершениеНаСервере(Результат, Действие);
		РазвернутьСвернутьВсе(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияВФонеЗавершениеНаСервере(Результат, Действие)
	
	РезультатВыполненияВФоне = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Действие = ДействиеСформироватьПрослеживаемуюСтруктуруИзделия() Тогда
		
		СтруктураИзделия.ПолучитьЭлементы().Очистить();
		ТаблицаОстатков.Очистить();
		СоответствиеНормативовОстаткам.Очистить();
		
		Для Каждого ТекущиеДанные Из ТаблицаДокумента Цикл
			ТекущиеДанные.Подобрано       = 0;
			ТекущиеДанные.ПодобраноПоРНПТ = 0;
		КонецЦикла;
		
		ТаблицаОстатков.Загрузить(РезультатВыполненияВФоне.ТаблицаОстатков);
		
		СтруктураИзделияТаблица = РезультатВыполненияВФоне.СтруктураИзделия; // ТаблицаЗначений
		СтруктураИзделияТаблица.Колонки.Количество.Имя       = "Норматив";
		СтруктураИзделияТаблица.Колонки.КоличествоПоРНПТ.Имя = "НормативПоРНПТ";
		
		СтруктураИзделияТаблица.Индексы.Добавить("ИдентификаторРодителя");
		
		ВывестиПодчиненныеСтроки(
			СтруктураИзделияТаблица,
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"),
			СтруктураИзделия.ПолучитьЭлементы());
		
		ВывестиОстаткиТаблицыДокумента();
		
		АктуализироватьОстаткиНормативовВсе();
		
		УстановитьДоступность(Элементы, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДействиеСформироватьПрослеживаемуюСтруктуруИзделия()
	
	Возврат "ДействиеСформироватьПрослеживаемуюСтруктуруИзделия";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
