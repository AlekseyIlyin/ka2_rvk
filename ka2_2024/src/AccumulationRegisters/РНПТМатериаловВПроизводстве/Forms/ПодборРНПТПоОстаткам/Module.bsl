
#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие Экспорт;

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТаблицаТоваров = Параметры.АдресТаблицаТоваров;
	Дата                = Параметры.Дата;
	Организация         = Параметры.Организация;
	Регистратор         = Параметры.Регистратор;
	Ссылка              = Параметры.Регистратор;
	Если ЗначениеЗаполнено(Параметры.ПартииПроизводства) Тогда
		ПартииПроизводства.ЗагрузитьЗначения(Параметры.ПартииПроизводства);
	КонецЕсли;
	
	Назначение    = Параметры.Назначение;
	ОтборПоНазначению = ЗначениеЗаполнено(Назначение);
	
	ЗаполнитьТаблицуТовары(ПолучитьИзВременногоХранилища(АдресТаблицаТоваров));
	
	УстановитьЗаголовки();
	УстановитьДоступностьНазначения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		И Модифицированность Тогда
		
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
		
		Возврат;
		
	КонецЕсли;
	
	Если ПеренестиВДокумент
		Или ВыполняетсяЗакрытие
		Или Не ТоварыПодобраны Тогда
		Возврат;
	Иначе
		
		Отказ = Истина;
		
		ТекстВопроса       = НСтр("ru = 'Изменения не перенесены в документ. Перенести?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВДокумент Тогда
		
		Структура = Новый Структура("АдресТаблицаТоваров", АдресТаблицаТоваров());
		ОповеститьОВыборе(Структура);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПоНазначениюПриИзменении(Элемент)
	
	ОтборПоНазначениюПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	НазначениеПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаТоваров

&НаКлиенте
Процедура ТаблицаТоваровВыбранаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаТоваров.ТекущиеДанные;
	УстановитьВыбранаВСтроке(ТекущиеДанные, ТекущиеДанные.Выбрана);
	
	Если ТекущиеДанные.Выбрана Тогда
		ТоварыПодобраны = Истина;
	Иначе
		ТоварыПодобраны = ТоварыПодобраны(ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		ЭтотОбъект,
		СтруктураДействий,
		"Подразделение",
		Истина);
	
	ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ТекущиеДанные.Выбрана = ЗначениеЗаполнено(ТекущиеДанные.Количество);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ОчиститьСообщения();
	
	ПеренестиВДокумент = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенные(Команда)
	
	ВыбратьСнятьНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделенные(Команда)
	
	ВыбратьСнятьНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ТаблицаТоваровХарактеристика",
		"ТаблицаТоваров.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтотОбъект,
		"ТаблицаТоваровНазначение",
		"ТаблицаТоваров.ТипНоменклатуры",
		Ложь);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		Ложь,
		"ТаблицаТоваровСерия",
		"ТаблицаТоваров.СтатусУказанияСерий",
		"ТаблицаТоваров.ТипНоменклатуры");
	
	#Область Прослеживаемость
	
	ПараметрыУсловногоОформления = УчетПрослеживаемыхТоваровЛокализация.ПараметрыУстановкиУсловногоОформленияНомераГТД();
	
	ПараметрыУсловногоОформления.ПутьКПолюДатаДокумента     = "Дата";
	ПараметрыУсловногоОформления.ИмяПоляВводаНомераГТД      = "ТаблицаТоваровНомерГТД";
	ПараметрыУсловногоОформления.ПутьКПолюНомерГТД          = "ТаблицаТоваров.НомерГТД";
	ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоРНПТ = "ТаблицаТоваров.ВедетсяУчетПоРНПТ";
	ПараметрыУсловногоОформления.ПутьКПолюТипНоменклатуры   = "ТаблицаТоваров.ТипНоменклатуры";
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьУсловноеОформлениеНомераГТД(ЭтотОбъект, ПараметрыУсловногоОформления);
	
	ПараметрыУсловногоОформления = УчетПрослеживаемыхТоваровЛокализация.ПараметрыУстановкиУсловногоОформленияКоличестваПоРНПТ();
	ПараметрыУсловногоОформления.ИмяПоляВводаКоличествоПоРНПТ = "ТаблицаТоваровКоличествоПоРНПТ";
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмеренияТНВЭД = "ТаблицаТоваровНоменклатураЕдиницаИзмеренияТНВЭД";
	ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоРНПТ   = "ТаблицаТоваров.ВедетсяУчетПоРНПТ";
	ПараметрыУсловногоОформления.ПутьКПолюТипНоменклатуры     = "ТаблицаТоваров.ТипНоменклатуры";
	ПараметрыУсловногоОформления.ПутьКПолюДатаДокумента       = "Дата";
	ПараметрыУсловногоОформления.ПутьКПолюТипНомераГТД        = "";
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьУсловноеОформлениеКоличестваПоРНПТ(ЭтотОбъект, ПараметрыУсловногоОформления);
	
	#КонецОбласти
	
	#КонецОбласти
	
	// Снятие отметки незаполненного для количеств.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровКоличество.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровКоличествоПоРНПТ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаТоваров.Выбрана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Установка отметки незаполненного для количества.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаТоваров.Выбрана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаТоваров.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Установка отметки незаполненного для количества по РНПТ.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровКоличествоПоРНПТ.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаТоваров.Выбрана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТаблицаТоваров.КоличествоПоРНПТ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовки()
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьЗаголовокНомерГТД(Элементы, "ТаблицаТоваровНомерГТД", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНазначения(Форма)
	
	Форма.Элементы.Назначение.ТолькоПросмотр = Не Форма.ОтборПоНазначению;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыСлужебные

&НаСервере
Процедура ОтборПоНазначениюПриИзмененииНаСервере()
	
	ЗаполнитьТаблицуТовары(ПодобранныеТовары());
	
	УстановитьДоступностьНазначения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НазначениеПриИзмененииНаСервере()
	
	ЗаполнитьТаблицуТовары(ПодобранныеТовары());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыСлужебные

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ПеренестиВДокумент = Истина;
		ВыполняетсяЗакрытие = Истина;
		
		Закрыть();
		
		Возврат;
		
	КонецЕсли;
	
	ВыполняетсяЗакрытие = Истина;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаТоваровСлужебные

#КонецОбласти

#Область ОбработчикиКомандФормыСлужебные

&НаСервере
Процедура ОбновитьНаСервере()
	
	ЗаполнитьТаблицуТовары(ПодобранныеТовары());
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьСнятьНаСервере(Выбрана)
	
	Для Каждого ТекущийИдентификатор Из Элементы.ТаблицаТоваров.ВыделенныеСтроки Цикл
		УстановитьВыбранаВСтроке(ТаблицаТоваров.НайтиПоИдентификатору(ТекущийИдентификатор), Выбрана);
	КонецЦикла;
	
	ТоварыПодобраны = ТоварыПодобраны(ТаблицаТоваров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВыбранаВСтроке(ТекущиеДанные, Выбрана)
	
	ТекущиеДанные.Выбрана = Выбрана;
	
	Если Выбрана Тогда
		
		ТекущиеДанные.Количество       = ТекущиеДанные.Остаток;
		ТекущиеДанные.КоличествоПоРНПТ = ТекущиеДанные.ОстатокПоРНПТ;
		
	Иначе
		
		ТекущиеДанные.Количество       = 0;
		ТекущиеДанные.КоличествоПоРНПТ = 0;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаДанных

&НаСервере
Процедура ЗаполнитьТаблицуТовары(ПодобранныеТовары)
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РНПТМатериаловВПроизводстве) Тогда
		
		// &ЗамерПроизводительности
		Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
			"РегистрНакопления.РНПТМатериаловВПроизводстве.Форма.ПодборРНПТПоОстаткам.ЗаполнитьТаблицуТовары");
		
		Запрос = Новый Запрос;
		Если ОбщегоНазначения.РежимОтладки() Тогда
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Регистратор",        Регистратор);
		Запрос.УстановитьПараметр("Организация",        Организация);
		Запрос.УстановитьПараметр("Назначение",         Назначение);
		Запрос.УстановитьПараметр("ПартииПроизводства", ПартииПроизводства.ВыгрузитьЗначения());
		Запрос.УстановитьПараметр("ПодобранныеТовары",  ПодобранныеТовары);
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	&Организация                                 КАК Организация,
		|	ПодобранныеТовары.ПартияПроизводства         КАК ПартияПроизводства,
		|	ПодобранныеТовары.Подразделение              КАК Подразделение,
		|	ПодобранныеТовары.Номенклатура               КАК Номенклатура,
		|	ПодобранныеТовары.ТипНоменклатуры            КАК ТипНоменклатуры,
		|	ПодобранныеТовары.ВедетсяУчетПоРНПТ          КАК ВедетсяУчетПоРНПТ,
		|	ПодобранныеТовары.Характеристика             КАК Характеристика,
		|	ПодобранныеТовары.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|	ПодобранныеТовары.Серия                      КАК Серия,
		|	ПодобранныеТовары.СтатусУказанияСерий        КАК СтатусУказанияСерий,
		|	ПодобранныеТовары.Назначение                 КАК Назначение,
		|	ПодобранныеТовары.НомерГТД                   КАК НомерГТД,
		|	ПодобранныеТовары.Количество                 КАК Количество,
		|	ПодобранныеТовары.КоличествоПоРНПТ           КАК КоличествоПоРНПТ
		|ПОМЕСТИТЬ ПодобранныеТовары
		|ИЗ
		|	&ПодобранныеТовары КАК ПодобранныеТовары
		|");
		
		ПараметрыОстатков = УчетПрослеживаемыхТоваровВПроизводстве.ПараметрыЗапросаОстатковРНПТМатериаловВПроизводстве();
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(ПараметрыОстатков.Отбор, "ОстаткиТоваров.Организация", "&Организация", "=");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПартииПроизводства) Тогда
			ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(ПараметрыОстатков.Отбор, "ОстаткиТоваров.ПартияПроизводства", "&ПартииПроизводства", "В");
		КонецЕсли;
		
		Если ОтборПоНазначению Тогда
			ОбщегоНазначенияУТ.ДобавитьЭлементОтбораВКоллекцию(ПараметрыОстатков.Отбор, "КлючиАналитики.Назначение", "&Назначение", "=");
		КонецЕсли;
		
		ПараметрыОстатков.ИмяВТ = "ОстаткиТоваров";
		
		ТекстЗапроса = РегистрыНакопления.РНПТМатериаловВПроизводстве.ТекстЗапросаОстаткиРНПТМатериаловВПроизводстве(ПараметрыОстатков);
		ТекстЗапроса = СхемыЗапросов.УдалитьПоляИзЗапроса(ТекстЗапроса, "ДокументВыпуска");
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
		ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ТаблицаТовары.Организация                   КАК Организация,
		|	ТаблицаТовары.ПартияПроизводства            КАК ПартияПроизводства,
		|	ТаблицаТовары.ПартияПроизводства.Документ   КАК ДокументВыпуска,
		|	ТаблицаТовары.Подразделение                 КАК Подразделение,
		|	ТаблицаТовары.Номенклатура                  КАК Номенклатура,
		|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаТовары.ТипНоменклатуры               КАК ТипНоменклатуры,
		|	ТаблицаТовары.ВедетсяУчетПоРНПТ             КАК ВедетсяУчетПоРНПТ,
		|	ТаблицаТовары.Характеристика                КАК Характеристика,
		|	ТаблицаТовары.ХарактеристикиИспользуются    КАК ХарактеристикиИспользуются,
		|	ТаблицаТовары.Серия                         КАК Серия,
		|	ТаблицаТовары.СтатусУказанияСерий           КАК СтатусУказанияСерий,
		|	ТаблицаТовары.Назначение                    КАК Назначение,
		|	ТаблицаТовары.НомерГТД                      КАК НомерГТД,
		|	ВЫБОР
		|		КОГДА СУММА(ТаблицаТовары.Количество) = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ                                       КАК Выбрана,
		|	СУММА(ТаблицаТовары.Остаток)                КАК Остаток,
		|	СУММА(ТаблицаТовары.ОстатокПоРНПТ)          КАК ОстатокПоРНПТ,
		|	СУММА(ТаблицаТовары.Количество)             КАК Количество,
		|	СУММА(ТаблицаТовары.КоличествоПоРНПТ)       КАК КоличествоПоРНПТ
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОстаткиТоваров.Организация                КАК Организация,
		|		ОстаткиТоваров.ПартияПроизводства         КАК ПартияПроизводства,
		|		ОстаткиТоваров.Подразделение              КАК Подразделение,
		|		ОстаткиТоваров.Номенклатура               КАК Номенклатура,
		|		ОстаткиТоваров.ТипНоменклатуры            КАК ТипНоменклатуры,
		|		ОстаткиТоваров.ВедетсяУчетПоРНПТ          КАК ВедетсяУчетПоРНПТ,
		|		ОстаткиТоваров.Характеристика             КАК Характеристика,
		|		ОстаткиТоваров.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|		ОстаткиТоваров.Серия                      КАК Серия,
		|		ОстаткиТоваров.СтатусУказанияСерий        КАК СтатусУказанияСерий,
		|		ОстаткиТоваров.Назначение                 КАК Назначение,
		|		ОстаткиТоваров.НомерГТД                   КАК НомерГТД,
		|		ОстаткиТоваров.Количество                 КАК Остаток,
		|		ОстаткиТоваров.КоличествоПоРНПТ           КАК ОстатокПоРНПТ,
		|		0                                         КАК Количество,
		|		0                                         КАК КоличествоПоРНПТ
		|	ИЗ
		|		ОстаткиТоваров КАК ОстаткиТоваров
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодобранныеТовары.Организация                КАК Организация,
		|		ПодобранныеТовары.ПартияПроизводства         КАК ПартияПроизводства,
		|		ПодобранныеТовары.Подразделение              КАК Подразделение,
		|		ПодобранныеТовары.Номенклатура               КАК Номенклатура,
		|		ПодобранныеТовары.ТипНоменклатуры            КАК ТипНоменклатуры,
		|		ПодобранныеТовары.ВедетсяУчетПоРНПТ          КАК ВедетсяУчетПоРНПТ,
		|		ПодобранныеТовары.Характеристика             КАК Характеристика,
		|		ПодобранныеТовары.ХарактеристикиИспользуются КАК ХарактеристикиИспользуются,
		|		ПодобранныеТовары.Серия                      КАК Серия,
		|		ПодобранныеТовары.СтатусУказанияСерий        КАК СтатусУказанияСерий,
		|		ПодобранныеТовары.Назначение                 КАК Назначение,
		|		ПодобранныеТовары.НомерГТД                   КАК НомерГТД,
		|		0                                            КАК Остаток,
		|		0                                            КАК ОстатокПоРНПТ,
		|		ПодобранныеТовары.Количество                 КАК Количество,
		|		ПодобранныеТовары.КоличествоПоРНПТ           КАК КоличествоПоРНПТ
		|	ИЗ
		|		ПодобранныеТовары КАК ПодобранныеТовары
		|	) КАК ТаблицаТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Организация,
		|	ТаблицаТовары.ПартияПроизводства,
		|	ТаблицаТовары.Подразделение,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.ТипНоменклатуры,
		|	ТаблицаТовары.ВедетсяУчетПоРНПТ,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.ХарактеристикиИспользуются,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.СтатусУказанияСерий,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.НомерГТД
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	ДокументВыпуска,
		|	Подразделение,
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Назначение,
		|	НомерГТД
		|");
		
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		
		ТаблицаТоваров.Загрузить(Запрос.Выполнить().Выгрузить());
		
		// &ЗамерПроизводительности
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ТаблицаТоваров.Количество());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицаТоваров()
	
	Отбор = Новый Структура("Выбрана", Истина);
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаТоваров.Выгрузить(Отбор), АдресТаблицаТоваров);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТоварыПодобраны(ТаблицаТоваров)
	
	Возврат Не ТаблицаТоваров.НайтиСтроки(Новый Структура("Выбрана", Истина)).Количество() = 0;
	
КонецФункции

&НаСервере
Функция ПодобранныеТовары()
	
	Отбор = Новый Структура("Выбрана", Истина);
	Возврат ТаблицаТоваров.Выгрузить(Отбор);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
