#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает массив налогов, для которых порядок уплаты авансов
// настраивается по регионам (см. КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам()).
//
// Параметры:
//  Период - Дата - если указана, то будут учтены разные даты перехода на новые настройки,
//					а в ином случае в результат попадут все налоги, порядок которых устанавливается
//                  по регионам (не важно, с какой даты произошел переход).
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ВидыИмущественныхНалогов
//
Функция НалогиПорядокКоторыхНастраиваетсяПоРегионам(Период = Неопределено) Экспорт
	
	Налоги = КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам(Период);
	
	Возврат Налоги;
	
КонецФункции

// Определяет, используются ли для налога региональные настройки уплаты. Конкретная дата начала использования региональных 
// настроек определяется в НачалоИспользованияНастроек().
// 
// Параметры:
//  Налог - ПеречислениеСсылка.ВидыИмущественныхНалогов 
// 
// Возвращаемое значение: 
//  Булево 
//  		Истина - порядок уплаты настраивается в регистре ПорядокУплатыНалоговПоРегионам (дата начала
//  				 применения определяется отдельно),
//  		Ложь - порядок уплаты настраивается иначе (обычно в регистре ПорядокУплатыНалоговНаМестах).
//  
Функция ПорядокУплатыУстанавливаетсяПоРегионам(Налог) Экспорт
	
	РегиональныеНалоги = КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам();
	
	Возврат РегиональныеНалоги.Найти(Налог) <> Неопределено;
	
КонецФункции

// Заполняет переданный список регионов значениями из адресного классификатора
// Параметры:
//  СписокРегионов	 	 - СписокЗначений из число.
//  ТолькоИспользуемые	 - Булево.
//  								Истина - в списке будут только те регионы, которые выбраны в регистрациях в налоговых органах.
//									Ложь - все регионы из адресного классификатора.
//	КодРегиона 			 - Строка - код текущего выбранного региона. Если указан, то в список добавляется только этот 1 регион
//
Процедура ЗаполнитьСписокВыбораРегиона(СписокРегионов, ТолькоИспользуемые = Ложь, КодРегиона = Неопределено) Экспорт
	
	СписокРегионов.Очистить();
	
	Если ЗначениеЗаполнено(КодРегиона) И КодРегиона <> "00" Тогда
		
		ШаблонПредставления = НСтр("ru='%1'");  //например: "Москва г"
		
		НаименованиеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(КодРегиона);
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, НаименованиеРегиона);
			
		СписокРегионов.Добавить(КодРегиона, Представление);
		Возврат;
		
	КонецЕсли;
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	
	Если НЕ ТолькоИспользуемые Тогда
		
		ТаблицаРегионов = КлассификаторСубъектовРФ;
		
	Иначе
		
		// Запрос выбирает все коды регионов, которые выбраны в справочнике регистраций в налоговом органе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрацииВНалоговомОргане.КодРегиона КАК КодРегиона
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|";

		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаРегионов = РезультатЗапроса.Выбрать();
		
		ТаблицаРегионов = КлассификаторСубъектовРФ.СкопироватьКолонки();
		Пока ВыборкаРегионов.Следующий() Цикл
			
			СтрокаРегиона = ТаблицаРегионов.Добавить();
			СтрокаРегиона.КодСубъектаРФ = ВыборкаРегионов.КодРегиона;
			
			СтрокаКлассификатора = КлассификаторСубъектовРФ.Найти(СтрокаРегиона.КодСубъектаРФ, "КодСубъектаРФ");
			Если СтрокаКлассификатора <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаРегиона, СтрокаКлассификатора);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

	ШаблонПредставления = НСтр("ru='%1 %2'");  //например: "Москва г"
	Для Каждого Регион Из ТаблицаРегионов Цикл
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Регион.Наименование,
			Регион.Сокращение);
		СписокРегионов.Добавить(Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧН=; ЧВН="), Представление);
	КонецЦикла;
	
	// Сортируем по наименованию региона
	СписокРегионов.СортироватьПоПредставлению();
	
КонецПроцедуры

//  Возвращает дату начала использования новых настроек (форма настроек и/или регистр)
//
// Параметры:
//  Налог - строка - код задачи по налогу в списке задач (например, "ТранспортныйНалог")
// 
// Возвращаемое значение:
//  Дата - дата начала применения новой формы настроек и нового регистра (если применимо)
//
Функция НачалоИспользованияНастроек(Налог) Экспорт
	
	Если Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог") Тогда
		Возврат '20210101';
	ИначеЕсли Налог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество") Тогда
		Возврат '20220101';
	Иначе
		 // Для земельного налога регистр не используется, но используется новая форма настроек
		Возврат '20210101';
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Коды налогов порядок которых настраивается по регионам.
// 
// Параметры:
//  Период - Неопределено, Дата - Период
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ВидыИмущественныхНалогов - Коды налогов порядок которых настраивается по регионам.
Функция КодыНалоговПорядокКоторыхНастраиваетсяПоРегионам(Период = Неопределено)
	
	ТранспортныйНалог = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.ТранспортныйНалог");
	НалогНаИмущество  = ПредопределенноеЗначение("Перечисление.ВидыИмущественныхНалогов.НалогНаИмущество");
	
	Налоги = Новый Массив;
	Если Период = Неопределено 
		 Или Период >= НачалоИспользованияНастроек(ТранспортныйНалог) Тогда
		Налоги.Добавить(ТранспортныйНалог);
	КонецЕсли;
	Если Период = Неопределено 
		 Или Период >= НачалоИспользованияНастроек(НалогНаИмущество) Тогда
		Налоги.Добавить(НалогНаИмущество);
	КонецЕсли;
	
	Возврат Налоги;
	
КонецФункции

#Область ОбработчикиОбновления

Функция ВыполненоНачальноеЗаполнение(Параметры) Экспорт
	
	// Здесь нет смысла анализировать отдельные записи: 
	// обработчик обновления (см. ЗаполнитьДаннымиПрежнегоРегистра()) 
	// либо выполнится и одним действием заполнит новый регистр настроек (в таком случае данная проверка вообще не вызывается),
	// либо не выполнится, и тогда полностью блокируем работу с новыми настройками (возвращаем Ложь).
	Возврат Ложь;
		
КонецФункции

#КонецОбласти
#КонецОбласти
#КонецЕсли
