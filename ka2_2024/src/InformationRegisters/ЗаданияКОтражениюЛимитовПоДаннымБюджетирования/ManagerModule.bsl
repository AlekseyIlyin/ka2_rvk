#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет записи в регистр заданий.
//
// Параметры:
//  Документ - ДокументСсылка.РасходныйКассовыйОрдер, ДокументСсылка.СписаниеБезналичныхДенежныхСредств - документ, для которого необходимо добавить задание.
//
Процедура ДобавитьЗадание(Документ) Экспорт
	
	Задание = Новый Структура;
	Задание.Вставить("ЗаданияКОтражениюЛимитовПоДаннымБюджетирования", Новый Структура);
	Задание.ЗаданияКОтражениюЛимитовПоДаннымБюджетирования.Вставить("Документ", Документ);
	
	ОтложенныеЗадания.Добавить(Задание);
	
КонецПроцедуры

// Запускает задание расчета очереди производственных операций
//
Процедура ЗапуститьЗадание() Экспорт
	
	ОтложенныеЗадания.Запустить("ЗаданияКОтражениюЛимитовПоДаннымБюджетирования");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает признак необходимости отражения движений по регистру ЛимитыПоДаннымБюджетирования для документов,
// влияющих на данные выводимого отчета по лимитам.
//
// Параметры:
//  КоличествоДокументов - Число - рассчитываемое количество документов, по которым нужно отразить движения по регистру
//
// Возвращаемое значение:
//  Булево - Истина, если есть документы к отражению
//
Функция ТребуетсяОтражениеЛимитовПоДаннымБюджетирования(КоличествоДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаданияКОтражениюЛимитовПоДаннымБюджетирования.Документ) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаданияКОтражениюЛимитовПоДаннымБюджетирования КАК ЗаданияКОтражениюЛимитовПоДаннымБюджетирования";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		КоличествоДокументов = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;
	
	Возврат (КоличествоДокументов > 0);
	
КонецФункции
	
#КонецОбласти

#КонецЕсли
