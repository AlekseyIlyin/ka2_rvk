#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// При записи аналитики учета (см. тип значения соответствующего измерения регистра), проверяется заполненность счетов
//		и по каждому заполненному очищаются соответствующие этому счету и аналитике записи в регистре счетов, требующих настройки.
//
//	Параметры:
//		Аналитика учета - СправочникСсылка.(КатегорииЭксплуатации, БанковскиеСчетаОрганизаций, Кассы, ВидыПодарочныхСертификатов,
//											ГруппыФинансовогоУчетаРасчетов, ГруппыФинансовогоУчетаНоменклатуры),
//						ПланВидовХарактеристикСсылка.(СтатьиДоходов, СтатьиРасходов) - аналитика учета, записи которой очищаются;
//		ВидыСчета - Массив - ПеречислениеСсылка.ВидыСчетовРеглУчета - массив счетов, записи по которым очищаются;
//		Организация - СправочникСсылка.Организации - организация, записи по которой очищаются (если задана);
//		МестоУчета - СправочникСсылка.(СтруктураПредприятия, Партнеры, Склады)- место учета, записи по которому очищаются (если задано).
//
Процедура ОчиститьПриЗаписиАналитикиУчета(АналитикаУчета, ВидыСчета, Организация = Неопределено, МестоУчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("АналитикаУчета", АналитикаУчета);
	СтруктураИзмерений.Вставить("Организация", Организация);
	СтруктураИзмерений.Вставить("МестоУчета", МестоУчета);
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
		Для каждого ЭлементИзмерения Из СтруктураИзмерений Цикл
			Если ЗначениеЗаполнено(ЭлементИзмерения.Значение) Тогда
				ЭлементБлокировкиДанных.УстановитьЗначение(ЭлементИзмерения.Ключ, ЭлементИзмерения.Значение);
			КонецЕсли;
		КонецЦикла;
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|ГДЕ
		|	(&Организация = Неопределено ИЛИ СчетаРеглУчетаТребующиеНастройки.Организация = &Организация)
		|	И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = &АналитикаУчета
		|	И (&МестоУчета = Неопределено ИЛИ СчетаРеглУчетаТребующиеНастройки.МестоУчета = &МестоУчета)
		|	И СчетаРеглУчетаТребующиеНастройки.ВидСчета В(&ВидыСчета)";
		Для каждого ЭлементИзмерения Из СтруктураИзмерений Цикл
			Запрос.УстановитьПараметр(ЭлементИзмерения.Ключ, ЭлементИзмерения.Значение);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыСчета", ВидыСчета);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
	
			НаборЗаписей = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			Для каждого ЭлементИзмерения Из СтруктураИзмерений Цикл
				НаборЗаписей.Отбор[ЭлементИзмерения.Ключ].Установить(Выборка[ЭлементИзмерения.Ключ]);
			КонецЦикла;
			НаборЗаписей.Записать();
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;	
	
КонецПроцедуры

// При записи регистра порядка отражения счетов учета, проверяется заполненность счетов
//		и по каждому заполненному очищаются соответствующие этому счету, аналитике, организации и месту учета записи в регистре счетов, требующих настройки.
//
//	Параметры:
//		ВременнаяТаблицаНовыхДанныхРегистра - МенеджерВременныхТаблиц, содержит таблицу:
//			* ДанныеЗаполненныхСчетовРегистра со следующими данными:
//				** Организация - СправочникСсылка.Организации - организация, записи по которой очищаются;
//				** МестоУчета - СправочникСсылка.(СтруктураПредприятия, Партнеры, Склады) - место учета, записи по которому очищаются;
//				** АналитикаУчета - СправочникСсылка.(КатегорииЭксплуатации, БанковскиеСчетаОрганизаций, Кассы, ВидыПодарочныхСертификатов,
//											ГруппыФинансовогоУчетаРасчетов, ГруппыФинансовогоУчетаНоменклатуры),
//						ПланВидовХарактеристикСсылка.(СтатьиДоходов, СтатьиРасходов) - аналитика учета, записи которой очищаются;
//				** ВидСчета - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета, записи по которому очищаются;
//
Процедура ОчиститьПриЗаписиРегистра(ВременнаяТаблицаНовыхДанныхРегистра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаНовыхДанныхРегистра;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаполненныхСчетовРегистра КАК ДанныеЗаполненныхСчетовРегистра
		|		ПО СчетаРеглУчетаТребующиеНастройки.Организация = ДанныеЗаполненныхСчетовРегистра.Организация
		|			И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = ДанныеЗаполненныхСчетовРегистра.АналитикаУчета
		|			И СчетаРеглУчетаТребующиеНастройки.МестоУчета = ДанныеЗаполненныхСчетовРегистра.МестоУчета
		|			И СчетаРеглУчетаТребующиеНастройки.ВидСчета = ДанныеЗаполненныхСчетовРегистра.ВидСчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаполненныхСчетовРегистра КАК ДанныеЗаполненныхСчетовРегистра
		|		ПО СчетаРеглУчетаТребующиеНастройки.Организация = ДанныеЗаполненныхСчетовРегистра.Организация
		|			И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = ДанныеЗаполненныхСчетовРегистра.АналитикаУчета
		|			И СчетаРеглУчетаТребующиеНастройки.ВидСчета = ДанныеЗаполненныхСчетовРегистра.ВидСчета
		|			И ДанныеЗаполненныхСчетовРегистра.МестоУчета = НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СчетаРеглУчетаТребующиеНастройки.Организация,
		|	СчетаРеглУчетаТребующиеНастройки.АналитикаУчета,
		|	СчетаРеглУчетаТребующиеНастройки.МестоУчета,
		|	СчетаРеглУчетаТребующиеНастройки.ВидСчета
		|ИЗ
		|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК СчетаРеглУчетаТребующиеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаполненныхСчетовРегистра КАК ДанныеЗаполненныхСчетовРегистра
		|		ПО ДанныеЗаполненныхСчетовРегистра.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			И СчетаРеглУчетаТребующиеНастройки.АналитикаУчета = ДанныеЗаполненныхСчетовРегистра.АналитикаУчета
		|			И СчетаРеглУчетаТребующиеНастройки.ВидСчета = ДанныеЗаполненныхСчетовРегистра.ВидСчета
		|			И ДанныеЗаполненныхСчетовРегистра.МестоУчета = НЕОПРЕДЕЛЕНО";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
			ЭлементБлокировкиДанных.УстановитьЗначение("АналитикаУчета", Выборка.АналитикаУчета);
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидСчета", Выборка.ВидСчета);
			ЭлементБлокировкиДанных.УстановитьЗначение("Организация", Выборка.Организация);
			ЭлементБлокировкиДанных.УстановитьЗначение("МестоУчета", Выборка.МестоУчета);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
	
			НаборЗаписей = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.АналитикаУчета.Установить(Выборка.АналитикаУчета);
			НаборЗаписей.Отбор.ВидСчета.Установить(Выборка.ВидСчета);
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Отбор.МестоУчета.Установить(Выборка.МестоУчета);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'Очистка записей регистра счетов регл. учета, требующих настройки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, НаборЗаписей.Метаданные(), , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Для каждого из вида счета соответствия, очищает текущие записи регистра по данному счету и записывает новые,
// находящиеся в соответствующем значении соответствия.
//
//	Параметры:
//		СоответствиеВидовСчетовИРезультатовЗапроса - Соответствие из КлючИЗначение - Соответствие, со следующими значениями:
//			* Ключ - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета, записи которого будут очищаться;
//			* Значение - РезультатЗапроса - записи, которыми будет заполняться набор с отбором по виду счета (колонки должны соответствовать измерениям регистра);
//		ИмяСобытия - Строка - если в процессе заполнения возникнет ошибка, в журнал регистрации она запишется с этим именем события.
//
Процедура ЗаполнитьЗаписиРегистраПоВидамСчетов(ВременнаяТаблицаВидовСчетовТребующихНастройки, ИмяСобытия = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаВидовСчетовТребующихНастройки;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыСчетовРеглУчета.Ссылка КАК ВидСчета,
		|	ВидыСчетовТребующиеНастройки.Организация КАК Организация,
		|	ВидыСчетовТребующиеНастройки.АналитикаУчета КАК АналитикаУчета,
		|	ВидыСчетовТребующиеНастройки.МестоУчета КАК МестоУчета,
		|	НЕ ВидыСчетовТребующиеНастройки.ВидСчета ЕСТЬ NULL КАК Требуется
		|ИЗ
		|	Перечисление.ВидыСчетовРеглУчета КАК ВидыСчетовРеглУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыСчетовТребующиеНастройки КАК ВидыСчетовТребующиеНастройки
		|		ПО ВидыСчетовРеглУчета.Ссылка = ВидыСчетовТребующиеНастройки.ВидСчета
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организация),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АналитикаУчета),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МестоУчета),
		|	МАКСИМУМ(Требуется)
		|ПО
		|	Ссылка";
		ВыборкаВидаСчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВидаСчета.Следующий() Цикл
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СчетаРеглУчетаТребующиеНастройки");
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидСчета", ВыборкаВидаСчета.ВидСчета);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписейРегистра = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СоздатьНаборЗаписей();
			НаборЗаписейРегистра.Отбор.ВидСчета.Установить(ВыборкаВидаСчета.ВидСчета);
			
			Выборка = ВыборкаВидаСчета.Выбрать();
			
			Если ВыборкаВидаСчета.Требуется Тогда
				Пока Выборка.Следующий() Цикл
					
					НоваяЗапись = НаборЗаписейРегистра.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
					
				КонецЦикла;
			КонецЕсли;
			
			НаборЗаписейРегистра.Записать();
			
		КонецЦикла;
			
			ЗафиксироватьТранзакцию();
	
	Исключение
	
		ОтменитьТранзакцию();
		Если ИмяСобытия = Неопределено Тогда
			ИмяСобытия = НСтр("ru = 'Заполнение записей регистра счетами регл. учета, требующих настройки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	
	КонецПопытки;
	
КонецПроцедуры

// Возвращает список требующихся измерений регистра для указанного вида счета,
// некоторые виды счетов не зависят от места учета или от аналитиики.
//	Параметры:
//		ВидСчета - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета для которого необходимо получить список измерений;
//		ТолькоОбязательные - Булево - содержит признак, определяющий возвращать все измерения возможные
//		или только те, которые требуют обязательного заполнения.
//	Возвращаемое значение:
//		Массив - массив с типом значений "Строка" - список имен измерений.
//
Функция СписокИзмеренийРегистраПоВидуСчета(ВидСчета, ТолькоОбязательные = Ложь) Экспорт
	
	ИмяВидаСчета = XMLСтрока(ВидСчета);
	РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоИмениСчета(ИмяВидаСчета);
	
	МассивВозврата = Новый Массив;
	
	Если НастройкаСчетовУчетаКлиентСервер.РазделыУчетаНеЗависящиеОтОрганизации().Найти(РазделУчета) = Неопределено Тогда
		МассивВозврата.Добавить("Организация");
	КонецЕсли;
	
	Если НастройкаСчетовУчетаСервер.НастройкиАналитикиУчетаПоРазделуУчета(РазделУчета).Используется
		И (Не ТолькоОбязательные ИЛИ НастройкаСчетовУчетаКлиентСервер.РазделыУчетаСОбязательнойАналитикой().Найти(РазделУчета) <> Неопределено) Тогда
		МассивВозврата.Добавить("АналитикаУчета");
	КонецЕсли;
	
	Если НастройкаСчетовУчетаСервер.НастройкиМестаУчетаПоРазделуУчета(РазделУчета).Используется И Не ТолькоОбязательные Тогда
		МассивВозврата.Добавить("МестоУчета");
	КонецЕсли;
	
	Если НастройкаСчетовУчетаКлиентСервер.ИспользуетсяДолгосрочныйСчет(ИмяВидаСчета) Тогда
		МассивВозврата.Добавить("Долгосрочный");
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Проверяет набор записей регистра на корректность заполнения. Выполняются проверки:
// 	Заполненность и корректность вида счета;
// 	Заполненность измерений регистра;
// 	Соответствие типа значения места учета ожидаемому;
// 	Соответствие типа значения аналитика учета ожидаемому.
// Результаты проверки записываются в журнал регистрации, если активен режим отладки - выводятся текущему пользователю.
//
//	Параметры:
//		Данные - РегистрСведенийНаборЗаписей, ТаблицаЗначений - таблица или набор записей регистра, со следующими колонками:
//			* ВидСчета - ПеречислениеСсылка.ВидыСчетовРеглУчета - вид счета, записи которого будут очищаться;
//			* Организация - СправочникСсылка.Организации - организация, записи по которой очищаются (если задана);
//			* МестоУчета - СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Партнеры, СправочникСсылка.Склады - место учета, записи по которому очищаются (если задано);
//			* АналитикаУчета - ОпределяемыйТип.НастройкаСчетовУчетаАналитикаУчета - аналитика учета порядка отражения, записи которой очищаются.
//			* Содержание - Строка - содержание проводки, в которой встретилась проблемная запись, опционально (может не указываться, если запись происходит непосредственно в регистр сведений).
//		ОтражаемыйДокумент - ДокументСсылка - документ, отражение которого приводит к ошибке (указывается в журнал регистрации);
//		Отладка - Булево - признак отладки, если установлен - вместо записи в журнал регистрации с удалением ошибочных строк, выводится сообщение об ошибке
//			текущему пользователю. Значение по умолчанию Ложь.
//
Процедура ПроверитьКорректностьЗаполнения(Данные, ОтражаемыйДокумент = Неопределено, Отладка = Ложь) Экспорт
	
	ВидыСчетовЗаписываемыеВРегистрТребующихсяНастроек = РеглУчетВыборкиСерверПовтИсп.НастраиваемыеВидыСчетов();
	СписокЗаписейДляУдаления = Новый СписокЗначений;
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ОбъектМетаданных = Метаданные.РегистрыСведений.СчетаРеглУчетаТребующиеНастройки;
	
	Для каждого СтрокаРегистра Из Данные Цикл
		
		МассивСообщенийПоСтроке = Новый Массив;
		
		Если ВидыСчетовЗаписываемыеВРегистрТребующихсяНастроек.Найти(СтрокаРегистра.ВидСчета) = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'указан не корректный вид счета, так как он не настраивается в рабочем месте;'", КодОсновногоЯзыка);
			МассивСообщенийПоСтроке.Добавить(ТекстСообщения);
		КонецЕсли;
		
		ОбязательныеИзмеренияРегистра = РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.СписокИзмеренийРегистраПоВидуСчета(СтрокаРегистра.ВидСчета, Истина);
		
		Для каждого ИзмерениеРегистра Из ОбязательныеИзмеренияРегистра Цикл
			Если Не ЗначениеЗаполнено(СтрокаРегистра[ИзмерениеРегистра]) Тогда
				
				ТекстСообщения = НСтр("ru = 'не заполнено измерение регистра ""%2"";'", КодОсновногоЯзыка);
				МассивСообщенийПоСтроке.Добавить(СтрШаблон(ТекстСообщения, СтрокаРегистра.ВидСчета, ИзмерениеРегистра));
				
			КонецЕсли;
		КонецЦикла;
		
		РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоИмениСчета(XMLСтрока(СтрокаРегистра.ВидСчета));
		ОграничениеТипаМестоУчета = НастройкаСчетовУчетаСервер.НастройкиМестаУчетаПоРазделуУчета(РазделУчета).ТипЗначения;
		Если ОграничениеТипаМестоУчета <> Неопределено И Не ОграничениеТипаМестоУчета.СодержитТип(ТипЗнч(СтрокаРегистра.МестоУчета)) И Не РазделУчета = "Номенклатура" Тогда
			
			ТекстСообщения = НСтр("ru = 'тип значения измерения ""Место учета"" (%2) не соответствует требуемому;'", КодОсновногоЯзыка);
			МассивСообщенийПоСтроке.Добавить(СтрШаблон(ТекстСообщения, СтрокаРегистра.ВидСчета, ТипЗнч(СтрокаРегистра.МестоУчета)));
			
		КонецЕсли;
		
		ОграничениеТипаАналитикаУчета = НастройкаСчетовУчетаСервер.НастройкиАналитикиУчетаПоРазделуУчета(РазделУчета).ТипЗначения;
		Если ОграничениеТипаАналитикаУчета <> Неопределено И Не ОграничениеТипаАналитикаУчета.СодержитТип(ТипЗнч(СтрокаРегистра.АналитикаУчета)) Тогда
			
			ТекстСообщения = НСтр("ru = 'тип значения измерения ""Аналитика учета"" (%2) не соответствует требуемому;'", КодОсновногоЯзыка);
			МассивСообщенийПоСтроке.Добавить(СтрШаблон(ТекстСообщения, СтрокаРегистра.ВидСчета, ТипЗнч(СтрокаРегистра.АналитикаУчета)));
			
		КонецЕсли;
		
		Если МассивСообщенийПоСтроке.Количество() Тогда
			ШаблонОписанияСтроки = НСтр("ru = 'В строке %НомерСтроки% %Содержание% для вида счета ""%1"":'", КодОсновногоЯзыка);
			СтрокаНомераСтроки = ?(Отладка, " " + "№" + Строка(Данные.Индекс(СтрокаРегистра) + 1), "");
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаРегистра, "Содержание") Тогда
				СтрокаСодержания = " " + НСтр("ru = 'с содержанием """ + СтрокаРегистра.Содержание + """'", КодОсновногоЯзыка);
			Иначе
				СтрокаСодержания = "";
			КонецЕсли;
			ШаблонОписанияСтроки = СтрЗаменить(ШаблонОписанияСтроки, " " + "%НомерСтроки%", СтрокаНомераСтроки);
			ШаблонОписанияСтроки = СтрЗаменить(ШаблонОписанияСтроки, " " + "%Содержание%", СтрокаСодержания);
			МассивСообщенийПоСтроке.Вставить(0, СтрШаблон(ШаблонОписанияСтроки, СтрокаРегистра.ВидСчета));
			СписокЗаписейДляУдаления.Добавить(СтрокаРегистра, СтрСоединить(МассивСообщенийПоСтроке, Символы.ПС + Символы.Таб));
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокЗаписейДляУдаления.Количество() Тогда
		Для каждого ЗаписьДляУдаления Из СписокЗаписейДляУдаления Цикл
			Если Отладка Тогда
				ОбщегоНазначения.СообщитьПользователю(ЗаписьДляУдаления.Представление);
			Иначе
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Отражение в регламентированном учете. Ошибка при записи счетов требующих настроек.'", КодОсновногоЯзыка),
					УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, ОтражаемыйДокумент, ЗаписьДляУдаления.Представление);
				Данные.Удалить(ЗаписьДляУдаления.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.19.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1b81975e-b1fe-43d1-ae48-54f2e0dc6ce1");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Удаление записей по устаревшему виду счета ""РасчетыПоПретензиям"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.СчетаРеглУчетаТребующиеНастройки";
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Запрос = Новый Запрос;
	ТекстыЗапросов = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.УдалитьРасчетыПоПретензиям) КАК ВидСчета,
	|	НастройкиСчетов.Организация КАК Организация,
	|	НастройкиСчетов.АналитикаУчета КАК АналитикаУчета,
	|	НастройкиСчетов.МестоУчета КАК МестоУчета,
	|	НастройкиСчетов.Долгосрочный КАК Долгосрочный
	|ИЗ
	|	РегистрСведений.СчетаРеглУчетаТребующиеНастройки КАК НастройкиСчетов
	|ГДЕ
	|	НастройкиСчетов.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.УдалитьРасчетыПоПретензиям)";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СчетаРеглУчетаТребующиеНастройки;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ИзмеренияРегистра = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
	ИзмеренияРегистра.Вставить("ВидСчета", Неопределено);
	
	Для каждого ЗаписьРегистра Из ОбновляемыеДанные Цикл
		
		НаборЗаписей = СоздатьНаборЗаписей();
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			
			Для каждого ЭлементИзмерения Из ИзмеренияРегистра Цикл
				ЭлементБлокировки.УстановитьЗначение(ЭлементИзмерения.Ключ, ЗаписьРегистра[ЭлементИзмерения.Ключ]);
				НаборЗаписей.Отбор[ЭлементИзмерения.Ключ].Установить(ЗаписьРегистра[ЭлементИзмерения.Ключ]);
			КонецЦикла;
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обновить данные в регистре %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта, Неопределено, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
