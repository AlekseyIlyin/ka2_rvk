////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Возвращает спецификацию изделия
//
// Параметры:
//  ДанныеОбИзделии             - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации
//  ПараметрыВыбораСпецификаций - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций
// 
// Возвращаемое значение:
//  Структура, Неопределено - содержит данные спецификации изделия.
//
Функция СпецификацияИзделия(ДанныеОбИзделии, ПараметрыВыбораСпецификаций) Экспорт
	
	ДанныеСпецификации = Неопределено;
	
	СписокСпецификаций = УправлениеДаннымиОбИзделиях.СпецификацииИзделия(ДанныеОбИзделии, ПараметрыВыбораСпецификаций);
	
	Для Индекс = 0 По СписокСпецификаций.ВГраница() Цикл
		
		Если ДанныеСпецификации = Неопределено И СписокСпецификаций[Индекс].ПодбираетсяАвтоматически = Истина Тогда
			ДанныеСпецификации = СписокСпецификаций[Индекс];
			Если НЕ ЗначениеЗаполнено(ДанныеОбИзделии.ТекущаяСпецификация) Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокСпецификаций[Индекс].Спецификация = ДанныеОбИзделии.ТекущаяСпецификация Тогда
			ДанныеСпецификации = СписокСпецификаций[Индекс];
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеСпецификации;
	
КонецФункции

// Копирует спецификацию и этапы
//
// Параметры:
//  Источник	- СправочникСсылка.РесурсныеСпецификации - спецификация, которую нужно скопировать.
//
// Возвращаемое значение:
//   СправочникСсылка.РесурсныеСпецификации   - копия спецификации.
//
Функция КопироватьРесурснуюСпецификацию(Источник) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		СсылкаНового = Справочники.РесурсныеСпецификации.ПолучитьСсылку();
		
		Объект = Источник.Скопировать();
		Объект.Наименование = Объект.Наименование + " " + НСтр("ru = '(копия)'");
		
		Если НЕ ЗаполнитьЭтапыПоРесурснойСпецификации(Объект, Источник, СсылкаНового) Тогда
			
			ОтменитьТранзакцию();
			Возврат Неопределено;
			
		КонецЕсли;
		
		УправлениеДаннымиОбИзделиях.ОбновитьКлючиСвязиОбъекта(Объект);
		
		
		Объект.УстановитьСсылкуНового(СсылкаНового);
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось скопировать спецификацию по причине: %1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Источник); 
		
		ЗаписьЖурналаРегистрации(ПроизводствоСервер.СобытиеКопированиеСпецификации(), 
			УровеньЖурналаРегистрации.Ошибка,,Источник, ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Объект.Ссылка;
	
КонецФункции

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РесурсныеСпецификацииОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("ПолучитьСпецификацииПоНоменклатуре") И Параметры.Свойство("Номенклатура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		
		ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
		ЗаполнитьЗначенияСвойств(ДанныеОбИзделии, Параметры);
		
		Список = УправлениеДаннымиОбИзделиях.СписокСпецификацийПоНоменклатуре(ДанныеОбИзделии, Параметры);
		ДанныеВыбора.ЗагрузитьЗначения(Список);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура РесурсныеСпецификацииОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт

	Если ВидФормы = "ФормаВыбора" И Параметры.Свойство("ПолучитьСпецификацииПоНоменклатуре") И Параметры.Свойство("Номенклатура") Тогда
		ВыбраннаяФорма = "ФормаВыбораПоНоменклатуре";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

Функция УстановитьСтатусСпецификаций(ВыделенныеСсылки, ЗначениеСтатуса) Экспорт

	НовыйСтатус = Перечисления.СтатусыСпецификаций[ЗначениеСтатуса];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РесурсныеСпецификации.Ссылка,
	|	РесурсныеСпецификации.Наименование,
	|	РесурсныеСпецификации.ПометкаУдаления
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|ГДЕ
	|	РесурсныеСпецификации.Статус <> &НовыйСтатус
	|	И РесурсныеСпецификации.Ссылка В(&ВыделенныеСсылки)";
	
	Запрос.УстановитьПараметр("ВыделенныеСсылки", ВыделенныеСсылки);
	Запрос.УстановитьПараметр("НовыйСтатус",      НовыйСтатус);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоОбработанных = 0;
	
	Если НовыйСтатус = Перечисления.СтатусыСпецификаций.ВРазработке Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Нельзя изменить статус помеченной на удаление спецификации ""%1"".'"),
									Выборка.Наименование);
									
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НачатьТранзакцию();
		
		Попытка
			
			Если НовыйСтатус = Перечисления.СтатусыСпецификаций.ВРазработке Тогда
				ПараметрыПроверки = Новый Структура("Объект", Выборка.Ссылка);
				Справочники.РесурсныеСпецификации.ПроверитьИспользованиеОбъекта(ПараметрыПроверки, АдресХранилища);
				ЕстьСсылки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Если ЕстьСсылки Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Спецификация ""%1"" используется. Установка статуса ""В разработке"" допускается только в форме спецификации.'"),
											СпрОбъект.Наименование);
											
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			ИначеЕсли НовыйСтатус = Перечисления.СтатусыСпецификаций.Закрыта
					И НЕ ЗначениеЗаполнено(СпрОбъект.КонецДействия) Тогда
				СпрОбъект.КонецДействия = ТекущаяДатаСеанса();
			КонецЕсли;
			
			СпрОбъект.Статус = НовыйСтатус;
			СпрОбъект.ДополнительныеСвойства.Вставить("ЗапретитьРасчетДлительностиПроизводства");
			Если СпрОбъект.ПроверитьЗаполнение() Тогда
				СпрОбъект.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ЗапуститьЗадание();
	
	Возврат КоличествоОбработанных;

КонецФункции

Функция ЗаполнитьЭтапыПоРесурснойСпецификации(Приемник, Источник, СсылкаПриемника)

	Запрос = Новый Запрос(
	// 0
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	Справочник.РесурсныеСпецификации.Трудозатраты КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4
	|ВЫБРАТЬ
	|	СправочникЭтапыПроизводства.Ссылка КАК Ссылка,
	|	СправочникЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
	|	СправочникЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК СправочникЭтапыПроизводства
	|ГДЕ
	|	СправочникЭтапыПроизводства.Владелец = &Источник
	|	И НЕ СправочникЭтапыПроизводства.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа
	|
	|");
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИсключитьРеквизиты = "Этап";
	
	ИменаТабличныхЧастей = Справочники.РесурсныеСпецификации.ИменаТабличныхЧастей();
	Для каждого ИмяТЧ Из ИменаТабличныхЧастей Цикл
		Приемник[ИмяТЧ].Очистить();
		Для каждого Строка Из Результат[ИменаТабличныхЧастей.Найти(ИмяТЧ)].Выгрузить() Цикл
			ЗаполнитьЗначенияСвойств(Приемник[ИмяТЧ].Добавить(), Строка,, ИсключитьРеквизиты);
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаЭтапов = Результат[4].Выгрузить();
	
	Для ИндексЭтап = 0 По ТаблицаЭтапов.Количество() - 1 Цикл
		
		СтрокаЭтап = ТаблицаЭтапов[ИндексЭтап]; // СправочникОбъект.ЭтапыПроизводства
		
		Если ИндексЭтап = 0
			ИЛИ УправлениеДаннымиОбИзделияхКлиентСервер.МногоэтапныйПроизводственныйПроцессДоступен() Тогда
			
			ЭтапОбъект = СтрокаЭтап.Ссылка.Скопировать();
			ЭтапОбъект.Владелец = СсылкаПриемника;
			Если УправлениеДаннымиОбИзделияхКлиентСервер.МногоэтапныйПроизводственныйПроцессДоступен() Тогда
				ЭтапОбъект.НомерЭтапа = СтрокаЭтап.НомерЭтапа;
				ЭтапОбъект.НомерСледующегоЭтапа = СтрокаЭтап.НомерСледующегоЭтапа;
			Иначе
				ЭтапОбъект.НомерЭтапа = 1;
				ЭтапОбъект.НомерСледующегоЭтапа = 0;
			КонецЕсли;
			
			ЭтапОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				
				ЭтапОбъект.Записать();
				
			Исключение
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать этап ""%1"" по причине: %2'"),
					ЭтапОбъект.Наименование,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Источник);
				
				ЗаписьЖурналаРегистрации(ПроизводствоСервер.СобытиеКопированиеСпецификации(), 
					УровеньЖурналаРегистрации.Ошибка,,Источник, ТекстСообщения);
				
				Возврат Ложь;
				
			КонецПопытки;
			
			НовыйЭтапСсылка = ЭтапОбъект.Ссылка;
			
		Иначе
			
			НовыйЭтапСсылка = Справочники.ЭтапыПроизводства.ПустаяСсылка();
			
		КонецЕсли;
		
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.ВыходныеИзделия,  "ЭтапРедактирование", СтрокаЭтап.Ссылка, НовыйЭтапСсылка);
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.ВозвратныеОтходы, "ЭтапРедактирование", СтрокаЭтап.Ссылка, НовыйЭтапСсылка);
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.МатериалыИУслуги, "ЭтапРедактирование", СтрокаЭтап.Ссылка, НовыйЭтапСсылка);
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.МатериалыИУслуги, "ИсточникПолученияПолуфабриката", СтрокаЭтап.Ссылка, НовыйЭтапСсылка);
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.МатериалыИУслуги, "ПланироватьНеРанее", СтрокаЭтап.Ссылка, НовыйЭтапСсылка);
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.Трудозатраты,     "ЭтапРедактирование", СтрокаЭтап.Ссылка, НовыйЭтапСсылка);
		
		Если Приемник.ОсновноеИзделиеЭтап = СтрокаЭтап.Ссылка Тогда
			Приемник.ОсновноеИзделиеЭтап = НовыйЭтапСсылка;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьЗаменуСсылокВКоллекции(Коллекция, ИмяПоля, Ссылка, НоваяСсылка)
	
	Отбор = Новый Структура(ИмяПоля, Ссылка);
	
	НайденныеСтроки = Коллекция.НайтиСтроки(Отбор);
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НайденнаяСтрока[ИмяПоля] = НоваяСсылка;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти