
#Область ПрограммныйИнтерфейс

#Область ПравилаПолученияФактическихДанных

// Возвращает имена показателей и соответствующих полей из схемы-источника
// 
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема источник данных, которая содержит набор данных типа "Объединение" с именем "ОбъединенныйФакт"
//	Правило - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов, СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - правило получения фактических данных.
//
// Возвращаемое значение:
//	Структура - сопоставленные показатели факта и поля источника данных:
//		* Ключ     - Строка - имя показателя фактических данных
//		* Значение - Строка - имя поля в схеме-источнике данных.
// 
Функция ИсточникиСуммыПравила(СхемаКомпоновкиДанных, Правило) Экспорт
	
	ИсточникиСуммы = Новый Структура;
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("ОбъединенныйФакт");
	Если НаборДанных = Неопределено Тогда
		Если СхемаКомпоновкиДанных.НаборыДанных.Количество() > 0 Тогда
			НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
		Иначе 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В СКД правила ""%1"" нет ни одного набора данных.'"), 
				Правило);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Правило)) Тогда
		РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило, 
			"ИмяМакетаИсточникаДанных, 
			|РазделИсточникаДанных, 
			|ИсточникСуммыОперации, 
			|ИсточникВалютный, 
			|ИсточникДанных, 
			|ТипИтога");
	Иначе
		РеквизитыПравила = Правило;
	КонецЕсли;
	
	ИмяНабораДанных = РеквизитыПравила.ИмяМакетаИсточникаДанных; // Имя набора данных соответствует регистру операции
	
	Если ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов") Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоПоказателямБюджетов";
	ИначеЕсли ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов";
	КонецЕсли;
	
	Если РеквизитыПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		ПоказателиРегистра = МеждународныйУчетСерверПовтИсп.Показатели(ИмяНабораДанных);
		РесурсыИсточникаСуммы = ПоказателиРегистра.Получить(РеквизитыПравила.ИсточникСуммыОперации).Ресурсы;
		Если РесурсыИсточникаСуммы = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для источника суммы %1 хозяйственной операции %2 не найдены соответствующие ресурсы в источнике данных.'"), 
				РеквизитыПравила.ИсточникСуммыОперации, 
				РеквизитыПравила.ИсточникДанных);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Для каждого Ресурс Из РесурсыИсточникаСуммы Цикл
			ПолеСуммы = Ресурс["Имя"];
			Если НаборДанных.Поля.Найти(ПолеСуммы) = Неопределено Тогда
				// Ресурс не выбирается в источнике
				Продолжить;
			КонецЕсли;
			Если Ресурс["ИсточникВалюты"] = "ВалютаУпр" Тогда
				ИсточникиСуммы.Вставить("Упр", ПолеСуммы);
			ИначеЕсли Ресурс["ИсточникВалюты"] = "ВалютаРегл" Тогда
				ИсточникиСуммы.Вставить("Регл", ПолеСуммы);
			Иначе
				ИсточникиСуммы.Вставить("Валюта", ПолеСуммы);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли РеквизитыПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", БюджетированиеСервер.ПолеРесурсаБухгалтерии("Сумма", РеквизитыПравила.ТипИтога));
		ИсточникиСуммы.Вставить("Упр", БюджетированиеСервер.ПолеРесурсаБухгалтерии("СуммаУУ", РеквизитыПравила.ТипИтога));
		Если РеквизитыПравила.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", БюджетированиеСервер.ПолеРесурсаБухгалтерии("СуммаВВалюте", РеквизитыПравила.ТипИтога));
		КонецЕсли;
	ИначеЕсли РеквизитыПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", БюджетированиеСервер.ПолеРесурсаБухгалтерии("Сумма", РеквизитыПравила.ТипИтога));
		Если РеквизитыПравила.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", БюджетированиеСервер.ПолеРесурсаБухгалтерии("СуммаВВалюте", РеквизитыПравила.ТипИтога));
		КонецЕсли;
		
	ИначеЕсли РеквизитыПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		БюджетированиеСервер.ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, НаборДанных.Элементы[ИмяНабораДанных]);
	КонецЕсли;
	
	Возврат ИсточникиСуммы;
	
КонецФункции

// Делает свертку однотипно названных колонок таблицы значений в одну колонку с переносом данных.
// Например, позволяет несколько колонок Аналитика1..6 свернуть в одну колонку Аналитика.
// Имена сворачиваемых колонок должны состоять из двух (трех) частей - ИмяКолонкиИзмерения+(ПрефиксИдентификатора)+Идентификатор.
// 
// Параметры:
//	ТаблицаДанных         - ТаблицаЗначений - таблица, колонки которой будут свернуты
//		После свертки таблица будет содержать следующие колонки:
//			Колонки, не указанные в КолонкиИзмерения
//			Колонки, указанные в КолонкиИзмерения, но свернутые из нескольких в одну
//			Колонки, указанные в КолонкиАгрегаты с просуммированными данными.
//	КолонкиИзмерения      - Строка, Массив - имена колонок через запятую, по уникальным  значениям которых будет сворачиваться таблица. 
//		После свертки колонки будут удалены.
//	Идентификаторы        - Массив - строковые идентификаторы, по которым будут сворачиваться колонки и которые содержаться в именах колонок. 
//		Например, уникальный идентификатор или порядковый номер колонки.
//	ПрефиксИдентификатора - Строка - префикс, который будет использоваться как составная часть идентификатора
//	КолонкиАгрегаты       - Строка, Массив - мена колонок через запятую, значения которых будут суммироваться при свертке.
//	НечеткоеСоответствиеИдентификаторов - Булево - Признак нечеткого соответствия идентификаторов
//
Процедура СвернутьПоКолонкамИдентификаторам(ТаблицаДанных, КолонкиИзмерения, Идентификаторы, ПрефиксИдентификатора = "", КолонкиАгрегаты = Неопределено, НечеткоеСоответствиеИдентификаторов = Ложь) Экспорт
	
	#Область Инициализация
	
	ИсходныеКолонки = ТаблицаДанных.Колонки;
	НетрансформируемыеИзмерения = Новый Массив;
	
	СКДСвертки = КомпоновкаДанныхСервер.ПустаяСхема();
	ПоляИтога = СКДСвертки.ПоляИтога;
	
	#КонецОбласти 
	
	#Область ПроверкаТиповПараметров
	
	Если ТипЗнч(КолонкиИзмерения) = Тип("Строка") Тогда
		// Удалим пробелы и сформируем список имен
		ИменаКолонокИзмерений = СтрРазделить(СтрЗаменить(КолонкиИзмерения, " ", ""), ",");
	ИначеЕсли ТипЗнч(КолонкиИзмерения) = Тип("Массив") Тогда
		ИменаКолонокИзмерений = КолонкиИзмерения;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 2'") ;
	КонецЕсли;
	
	Если ТипЗнч(КолонкиАгрегаты) = Тип("Строка") Тогда
		// Удалим пробелы и сформируем список имен
		ИменаКолонокАгрегатов = СтрРазделить(СтрЗаменить(КолонкиАгрегаты, " ", ""), ",");
	ИначеЕсли ТипЗнч(КолонкиАгрегаты) = Тип("Массив") Тогда
		ИменаКолонокАгрегатов = КолонкиАгрегаты;
	ИначеЕсли ТипЗнч(КолонкиАгрегаты) = Тип("Неопределено") Тогда
		ИменаКолонокАгрегатов = Новый Массив;
	Иначе
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 4'") ;
	КонецЕсли;
	
	Если Не ТипЗнч(Идентификаторы) = Тип("Массив") Тогда
		ВызватьИсключение НСтр("ru= 'Некорректный тип параметра 5'") ;
	КонецЕсли;
	
	#КонецОбласти

	НДТаблицаДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДСвертки, 
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДанных");

	#Область ДобавлениеИсходныхПолейВНаборДанных
	
	Для Каждого ИсходнаяКолонка Из ИсходныеКолонки Цикл
		ИмяКолонки = ИсходнаяКолонка.Имя;
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДТаблицаДанных, ИмяКолонки, ИмяКолонки, , ИсходнаяКолонка.ТипЗначения);
		
		НетрансформируемыеИзмерения.Добавить(ИмяКолонки);
	КонецЦикла;
	
	#КонецОбласти 

	#Область ДобавлениеНовыхПолейИзмерений
		
	ЭлементыВыраженияСверткиПоля = Новый Массив;
	
	Для Каждого ИмяКолонкиИзмерения Из ИменаКолонокИзмерений Цикл
		
		ЭлементыВыраженияСверткиПоля.Добавить("ВЫБОР"); //@Query-part
		
		Для Каждого УникальныйИдентификатор Из Идентификаторы Цикл 
			
			ИмяИсходногоПоля = ИмяКолонкиИзмерения + ПрефиксИдентификатора + УникальныйИдентификатор;
			
			Если НечеткоеСоответствиеИдентификаторов И ИсходныеКолонки.Найти(ИмяИсходногоПоля) = Неопределено Тогда // Идентификаторов может быть передано больше, чем есть колонок
				Продолжить;
			КонецЕсли;
			
			ЭлементыВыраженияСверткиПоля.Добавить("КОГДА " + "ЗначениеЗаполнено(" + ИмяИсходногоПоля + ")" + Символы.ПС
			+ "ТОГДА " + ИмяИсходногоПоля);
			
			ИндексПоля = НетрансформируемыеИзмерения.Найти(ИмяИсходногоПоля);
			Если Не ИндексПоля = Неопределено Тогда
				НетрансформируемыеИзмерения.Удалить(ИндексПоля);
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыВыраженияСверткиПоля.Добавить("КОНЕЦ");
		
		ВыражениеСверткиПоля = СтрСоединить(ЭлементыВыраженияСверткиПоля, Символы.ПС);
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДСвертки, ИмяКолонкиИзмерения, ВыражениеСверткиПоля, , Истина);
		
		ЭлементыВыраженияСверткиПоля.Очистить();
		
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ДобавлениеНовыхПолейАгрегатов
	
	Для Каждого ИмяКолонкиАгрегата Из ИменаКолонокАгрегатов Цикл
		
		ВыражениеАгрегата = "ЕСТЬNULL(" 
		+ "ВЫБОР КОГДА ЗначениеЗаполнено(" + ИмяКолонкиАгрегата + ") ТОГДА " + ИмяКолонкиАгрегата + " ИНАЧЕ 0 КОНЕЦ" + ", 0)";
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДСвертки, ИмяКолонкиАгрегата, ВыражениеАгрегата, , Истина);
		
		Если ПоляИтога.Найти(ИмяКолонкиАгрегата) = Неопределено Тогда
			ФинансоваяОтчетностьСервер.НовыйРесурс(СКДСвертки, ИмяКолонкиАгрегата, "Сумма");
		КонецЕсли;
		
		ИндексПоля = НетрансформируемыеИзмерения.Найти(ИмяКолонкиАгрегата);
		Если Не ИндексПоля = Неопределено Тогда
			НетрансформируемыеИзмерения.Удалить(ИндексПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область СозданиеНастроек
	
	// Создадим и инициализируем компоновщик
	НастройкиСвертки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДСвертки);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(НастройкиСвертки);
	
	КорневойЭлементСтруктуры = НастройкиСвертки.Структура;
	
	ГруппировкаДанных = ФинансоваяОтчетностьСервер.НоваяГруппировка(КорневойЭлементСтруктуры);
	
	Для Каждого ИмяКолонки Из НетрансформируемыеИзмерения Цикл 
		
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаДанных, ИмяКолонки);
		
	КонецЦикла;
	
	Для Каждого ИмяКолонки Из ИменаКолонокИзмерений Цикл
		
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаДанных, ИмяКолонки);
		
	КонецЦикла;
	
	Для Каждого ИмяКолонки Из ИменаКолонокАгрегатов Цикл
		
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(НастройкиСвертки, ИмяКолонки);
	
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПолучениеСвернутойТаблицы
	
	// Инициализировать макет компоновки, который будет сохраняться в кэш и выполняться
	МакетПолученияДанных = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДСвертки, НастройкиСвертки);
	
	// Выполнить процессор вывода в коллекцию значений
	ВнешниеНаборыДанных = Новый Структура("ТаблицаДанных", ТаблицаДанных);
	ТаблицаДанных = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных, ВнешниеНаборыДанных);
	
	#КонецОбласти 
	
КонецПроцедуры

// Возвращает схему для правила получения фактических данных
// 
// Параметры:
//	ОписаниеПравила - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов, 
//	                - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов,
//	                - ВыборкаИзРезультатаЗапроса, СтрокаТаблицыЗначений, Структура - Правило получения факта по показателям бюджетов.
//	ОчищаемыеКоллекцииНастроек - Соответствие - имена коллекций, которые требуется гарантированно очистить. Если значение заполнено, будет получена копия СКД.
//	                           - Неопределено - Значение по умолчанию. Настройки не очищаются.
//	РежимПолученияДанных - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования - 
//	                                  Все         - в этом случае в запросах схемы компоновки данных удаляется слово РАЗРЕШЕННЫЕ. Возвращена будет копия СКД.
//	                                  Разрешенные - в этом случае схема исполняется как есть.
//	                       Если значение заполнено, будет получена копия СКД.
//	                     - Неопределено - Значение по умолчанию. Текст запроса не меняется.
//	ПолучатьКопиюДляИзменения  - Булево - По умолчанию Ложь. Если Истина, то возвращена будет копия СКД.
//	ТаблицаКорреспонденций - ТаблицаЗначений - таблица фактических данных на основе корреспонденции балансовых регистров.
// 
// Возвращаемое значение:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема получения фактических данных, соответствующая источнику.
//
Функция СхемаКомпоновкиДанныхПравила(ОписаниеПравила, ОчищаемыеКоллекцииНастроек = Неопределено, РежимПолученияДанных = Неопределено, ПолучатьКопиюДляИзменения = Ложь, ТаблицаКорреспонденций = Неопределено) Экспорт
	
	// Получим схему правила
	ТипОписанияПравила = ТипЗнч(ОписаниеПравила);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипОписанияПравила) Тогда
		Если ТипОписанияПравила = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
			РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеПравила,
				"Ссылка, РазделИсточникаДанных, ИсточникДанных, ХешСхемыКомпоновкиДанных, ИсточникСуммыОперации, ТипПравила");
		Иначе
			РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеПравила,
				"Ссылка, РазделИсточникаДанных, ИсточникДанных, ХешСхемыКомпоновкиДанных");
		КонецЕсли;
		РеквизитыПравила.Вставить("ТипОбъектаИсточникаДанных", ТипЗнч(РеквизитыПравила.Ссылка));
	ИначеЕсли ТипОписанияПравила = Тип("СтрокаТаблицыЗначений") Или ТипОписанияПравила = Тип("Структура") Тогда
		РеквизитыПравила = ОписаниеПравила;
	ИначеЕсли ТипОписанияПравила = Тип("ДанныеФормыСтруктура") 
		Или НЕ ОбщегоНазначения.ЭтоСсылка(ТипОписанияПравила) Тогда // Объект правила
		РеквизитыПравила = Новый Структура("Ссылка, РазделИсточникаДанных, ИсточникДанных, ХешСхемыКомпоновкиДанных, ИсточникСуммыОперации, ТипПравила");
		ЗаполнитьЗначенияСвойств(РеквизитыПравила, ОписаниеПравила);
		РеквизитыПравила.Вставить("ТипОбъектаИсточникаДанных", ТипЗнч(РеквизитыПравила.Ссылка));
	КонецЕсли;
	
	Если РеквизитыПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ПроизвольныеДанныеВИсточнике = Истина;
	Иначе
		ПроизвольныеДанныеВИсточнике = Ложь;
	КонецЕсли;
	
	ПоддерживаемыеТипыОбъектов = ИсточникиДанныхПовтИсп.ПоддерживаемыеСправочникиИсточникиДанных();
	
	ИмяСправочникаИсточника = ПоддерживаемыеТипыОбъектов[РеквизитыПравила.ТипОбъектаИсточникаДанных];
	
	Если ИмяСправочникаИсточника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый тип справочника-источника получения данных.'");
	КонецЕсли;
	
	Если РеквизитыПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РеквизитыПравила, "ТаблицаКорреспонденций") Тогда
			ТаблицаКорреспонденций = РеквизитыПравила.ТаблицаКорреспонденций;
		КонецЕсли;
		Если ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов"
			И (Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РеквизитыПравила, "ТипДанныхУчетаРасход")
			Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РеквизитыПравила,
			"ТипДанныхУчетаРасход")) Тогда
			ТипыДанныхУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыПравила.ИсточникДанных,
				"Приход, Расход");
			РеквизитыПравила.Вставить("ТипДанныхУчетаПриход", ТипыДанныхУчета.Приход);
			РеквизитыПравила.Вставить("ТипДанныхУчетаРасход", ТипыДанныхУчета.Расход);
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаКорреспонденций <> Неопределено Тогда
		СхемаКомпоновкиДанныхПравила = СхемаКомпоновкиДанныхПоТаблицеКорреспонденцийРегистров(ТаблицаКорреспонденций);
		
	ИначеЕсли Не ПроизвольныеДанныеВИсточнике Тогда
		ИспользуетсяСКД_ИсполнениеБюджета = Ложь;
		Если ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов" И РеквизитыПравила.ТипПравила
			= Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета И РеквизитыПравила.РазделИсточникаДанных
			= Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
			ИспользуетсяСКД_ИсполнениеБюджета = ИсточникиДанныхПовтИсп.ИспользуетсяСКД_ИсполнениеБюджета(
				РеквизитыПравила.ИсточникСуммыОперации, РеквизитыПравила.ТипДанныхУчетаРасход);
		КонецЕсли;
		Если ИспользуетсяСКД_ИсполнениеБюджета Тогда
			СхемаКомпоновкиДанныхПравила = ИсточникиДанныхПовтИсп.СКД_ИсполнениеБюджета(
				РеквизитыПравила.ТипДанныхУчетаРасход, РеквизитыПравила.ТипДанныхУчетаПриход);
		Иначе
			СхемаКомпоновкиДанныхПравила = ИсточникиДанныхПовтИсп.СхемаКомпоновкиДанныхПравила(ИмяСправочникаИсточника,
				РеквизитыПравила.РазделИсточникаДанных, РеквизитыПравила.ИсточникДанных);
		КонецЕсли;
		
	Иначе // Произвольная схема в источнике данных 
		СхемаКомпоновкиДанныхПравила =
			ИсточникиДанныхПовтИсп.ПроизвольнаяСхемаКомпоновкиДанныхПравила(
				ИмяСправочникаИсточника, 
				РеквизитыПравила.РазделИсточникаДанных,
				РеквизитыПравила.ХешСхемыКомпоновкиДанных);
		
	КонецЕсли;
	
	// Если схема изменяется и нет цели записать в кэшируемый модуль измененную схему, то получаем копию.
	ВозвращатьКопиюСхемы = ПолучатьКопиюДляИзменения
		ИЛИ НЕ ОчищаемыеКоллекцииНастроек = Неопределено
		ИЛИ РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все;
	
	Если ВозвращатьКопиюСхемы
		И СхемаКомпоновкиДанныхПравила <> Неопределено Тогда
		СхемаКомпоновкиДанныхПравила = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(СхемаКомпоновкиДанныхПравила);
	КонецЕсли;
	
	Если СхемаКомпоновкиДанныхПравила = Неопределено Тогда
		Если РеквизитыПравила.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет
			И ЗначениеЗаполнено(РеквизитыПравила.ИсточникДанных) Тогда
			
			ИменаСхемУмолчаний = ИсточникиДанныхПовтИсп.ИменаСхемУмолчанийДляИсточниковДанных();
			ИмяСхемыУмолчания = ИменаСхемУмолчаний[ИмяСправочникаИсточника];
			
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для правила ""%1"" и источника ""%2"" не определена схема получения данных.'"), 
				РеквизитыПравила.Ссылка,
				ОписаниеПравила.ИсточникДанных);
					
			Если Не ЗначениеЗаполнено(ИмяСхемыУмолчания) Тогда
				
				ВызватьИсключение ТекстСообщенияОбОшибке;
				
			КонецЕсли;
			
			СхемаКомпоновкиДанныхПравила = Справочники[ИмяСправочникаИсточника].ПолучитьМакет(ИмяСхемыУмолчания);
			
			Если СхемаКомпоновкиДанныхПравила = Неопределено Тогда
				
				ВызватьИсключение ТекстСообщенияОбОшибке;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СхемаКомпоновкиДанныхПравила = Неопределено Тогда
	
		// Очистка коллекций настроек, которые переопределяются потребителем
		Если ОчищаемыеКоллекцииНастроек <> Неопределено Тогда
			Для Каждого ОчищаемаяКоллекция Из ОчищаемыеКоллекцииНастроек Цикл
				ОчищаемаяКоллекцияСхемы = СхемаКомпоновкиДанныхПравила[ОчищаемаяКоллекция.Ключ];
				
				Если ОчищаемаяКоллекция.Ключ = "Параметры" Тогда
					Для Каждого ЭлементКоллекции Из ОчищаемаяКоллекцияСхемы Цикл
						ЭлементКоллекции.Значение = Неопределено;
					КонецЦикла;
				Иначе
					ОчищаемаяКоллекцияСхемы.Очистить();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Если РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
			Для Каждого Набор Из СхемаКомпоновкиДанныхПравила.НаборыДанных Цикл
				Если ТипЗнч(Набор) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
					И ЗначениеЗаполнено(Набор.Запрос) Тогда
					Набор.Запрос = СхемыЗапросов.УстановитьВыборкуРазрешенныхЗаписейВоВсемЗапросе(Набор.Запрос, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанныхПравила;
	
КонецФункции

// Возвращает параметры получения факта по умолчанию
//
// Параметры:
//   ЗначенияПоУмолчанию             - Структура, Неопределено - переопределенные начальные значения параметров.
//   ПараметрыИдентификацииВыражений - Структура, Неопределено - состав используемых выражений.
//
// Возвращаемое значение:
//  Структура - Параметры получения факта по статьям и показателя бюджетов:
//    * ВалютаМеждународ                 - СправочникСсылка.Валюты - Закешированное значение функциональной валюты международного учета (см. МеждународныйУчетОбщегоНазначения.УчетныеВалюты) 
//    * ВалютаОтчета                     - СправочникСсылка.Валюты - Валюта данных
//    * ВалютаРегл                       - СправочникСсылка.Валюты - Закешированное значение валюты регл. учета.
//    * ВалютаУпр                        - СправочникСсылка.Валюты - Закешированное значение валюты упр. учета.
//    * ВидыАналитик                     - Массив из ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - содержит значения
//    аналитик, в разрезе которой необходимо получить факт. **  - значения массива.
//    * ПоПравиламПолученияДанных        - Булево - добавлять в таблицу данных колонку с примененным правилом
//    * ВозвращатьСтатьюПоказательБюджета- Булево - добавлять в таблицу данных колонку со статьей/показателем (источник данных)
//    * ВозвращатьУпрИРеглСуммы          - Булево - Вернуть суммы из регистров упр. и регл.
//    * ДополнительныеДанные             - Структура - дополнительные данные, которые будут присоединяться к фактическим
//      данным:
//      ** Вид                   - ПеречислениеСсылка.ВидДополнительныхДанныхИсточниковДанных - описывает способ
//          дополнения фактических данных
//      ** ТаблицаДанных         - ТаблицаЗначений - таблица дополнительных данных, содержащая колонку с именем поля-идентификатора
//    * ДополнительныйОтбор              - НастройкиКомпоновкиДанных - дополнительный глобальный отбор, который
//                                                                     накладывается на данные источника.
//    * ДополнительныеФильтрыПоАналитикам- Структура - поля глобального отбора на аналитики 1..6, на основании которого
//    формируются настройки:
//      ** Ключ     - Строка - имя поля, по которому требуется применить доп. отбор
//      ** Значение - Произвольный - значение доп. отбора
//    * ДополнительныеФильтрыПоИзмерениям- Структура - поля глобального отбора на измерения, на основании которого
//    формируются настройки:
//      ** Ключ     - Строка - имя поля, по которому требуется применить доп. отбор
//      ** Значение - Произвольный - значение доп. отбора
//    * ИндексыТаблиц                    - Соответствие - имена таблиц значений параметров получения факта и массивы
//      включенных в них индексах:
//      ** Ключ - Строка - имя таблицы в параметрах получения факта
//      ** Значение - Массив - массив строк, описывающих примененные индексы
//    * ИсходныеВыраженияЗаполненияАналитик - Соответствие - исходные выражения заполнения аналитик на языке формул:
//      **Ключ - Строка - Исходное выражение заполнения аналитики.
//      **Значение - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов - Статья или показатель бюджета
//      		(для указания на конкретный объект в случае ошибки).
//    * ИспользуемыеНумерованныеАналитики- Структура - задействованные нумерованные аналитики. Принимает значения от
//    "Аналитика1" до "Аналитика6"
//    * МаксимальныйНомерАналитики       - Число - число задействованных аналитик. Принимает значения от 1 до 6
//    * ОстаткиТолькоНаНачалоПериода     - Булево - Получать факт только на начало периода (для остатков), в противном
//                                                  случае данные получаются на конец каждого из подпериодов.
//    * Период                           - СтандартныйПериод - Период выборки
//    * Периодичность                    - ПеречислениеСсылка.Периодичность, Неопределено - Периодичность детализации
//        данных за период. Неопределено - без детализации.
//    * Показатели                       - Структура - показатели, которые автоматически подбираются в выборку с учетом настроек набора данных источника:
//      ** Количество - Булево, Неопределено - присутствие свойства в структуре означает, что в выборку следует добавить получение количества
//      ** Сумма      - Булево, Неопределено - присутствие свойства в структуре означает, что в выборку следует добавить получение суммы
//    * ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом - Булево - Дополнять факт по статьям, влияющим на показатели хранимым фактом.
//                                                                                По умолчанию Ложь. Ложь - если весь хранимый факт получается отдельно (с помощью кэшируемых скд).
//                                                                                В бюджетных отчетах (и экземплярах бюджетов) хранимый факт получается отдельно (с помощью кэшируемых скд),
//                                                                                в лимитах хранимый факт не используется (т.к. правила с типом исполнение бюджета не поддерживают хранимый факт).
//    * ПоВалютам                        - Булево - Развернуть по валютам (суммовые показатели).
//    * ПоЕдиницамИзмерения              - Булево - Развернуть по единицам измерения (количественные показатели).
//    * ПоОрганизациям                   - Булево - Развернуть по организациям.
//    * ПоПодразделениям                 - Булево - Развернуть по подразделениям.
//    * ПоРегистратору                   - Булево - Развернуть факт по регистратору (для оборотов).
//    * РежимПолученияДанных             - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования - определяет режим использования RLS при получении данных
//    * ТаблицаАналитик                  - ТаблицаЗначений - правила, используемые измерения, аналитики и мэппинг аналитик (вид и выражение для получения). По умолчанию пустая таблица:
//      ** Правило                          - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - ссылка на правило
//      ** ПоОрганизациям                   - Булево - получать данные по соответствующему измерению
//      ** ПоПодразделениям                 - Булево - получать данные по соответствующему измерению
//      ** ВидАналитики                     - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - вид аналитики
//      ** ВыражениеЗаполненияАналитики     - Строка - выражение для получения данные из полей схемы-источника
//    * ТаблицаПериодов                  - ТаблицаЗначений - непрерывные периоды, за которые требуется получить данные:
//      ** ПравилоФакта  - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - ссылка на правило
//      ** НачалоПериода - Дата - дата начала периода
//      ** КонецПериода  - Дата - дата окончания периода
//    * ТаблицаПравилСтатей              - ТаблицаЗначений - правила получения факта и колонки с реквизитами. По
//        умолчанию пустая таблица. См. в Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.Макеты.ПравилаПолученияФакта.
//
Функция ШаблонПараметровПолученияФакта(ЗначенияПоУмолчанию = Неопределено, ПараметрыИдентификацииВыражений = Неопределено) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Параметры = Новый Структура;
	
	Параметры.Вставить("Период",                            Новый СтандартныйПериод);
	Параметры.Вставить("Периодичность",                     Неопределено); // Без детализации по периодам
	Параметры.Вставить("ГраницаФактДанных",                 Дата(1, 1, 1));
	Параметры.Вставить("ДатаАктуальности",                  Дата(1, 1, 1));
	Параметры.Вставить("ОстаткиТолькоНаНачалоПериода",      Ложь);
	Параметры.Вставить("ВозвращатьУпрИРеглСуммы",           Ложь);
	
	Параметры.Вставить("ПоПравиламПолученияДанных",         Ложь);
	Параметры.Вставить("ВозвращатьСтатьюПоказательБюджета", Ложь);
	Параметры.Вставить("Сценарий",                          Справочники.Сценарии.ПустаяСсылка());
	
	// Показатели данных
	Параметры.Вставить("Показатели", Новый Структура("Количество, Сумма"));
	Параметры.Вставить("ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом", Ложь);
	
	// Разрезы данных
	Параметры.Вставить("ПоВалютам",                         Ложь);
	Параметры.Вставить("ПоЕдиницамИзмерения",               Ложь);
	Параметры.Вставить("ПоОрганизациям",                    Ложь);
	Параметры.Вставить("ПоПодразделениям",                  Ложь);
	Параметры.Вставить("ПоРегистратору",                    Ложь);
	
	Параметры.Вставить("ВидыАналитик",                      Новый Массив);
	Параметры.Вставить("МаксимальныйНомерАналитики",        0);
	Параметры.Вставить("ИспользуемыеНумерованныеАналитики", Новый Структура);
	Параметры.Вставить("ИсходныеВыраженияЗаполненияАналитик", Новый Соответствие);
	
	Параметры.Вставить("ДополнительныйОтбор");
	Параметры.Вставить("ДополнительныеФильтрыПоАналитикам", Новый Структура);
	Параметры.Вставить("ДополнительныеФильтрыПоИзмерениям", Новый Структура);
	Параметры.ДополнительныеФильтрыПоИзмерениям.Вставить("Организация");
	Параметры.ДополнительныеФильтрыПоИзмерениям.Вставить("Подразделение");
	Параметры.ДополнительныеФильтрыПоИзмерениям.Вставить("Сценарий");
	Параметры.ДополнительныеФильтрыПоИзмерениям.Вставить("ВалютаХранения");
	
	// Ограничения доступа к данным
	Параметры.Вставить("ОграниченияДоступа", Новый Структура);
	Параметры.ОграниченияДоступа.Вставить("ЕстьПривилегированныйРежим", Ложь);
	Параметры.ОграниченияДоступа.Вставить("ЕстьНеПривилегированныйРежим", Ложь);
	Параметры.ОграниченияДоступа.Вставить("РежимПолученияДанных", Перечисления.РежимПолученияДанныхБюджетирования.ПустаяСсылка());
	
	// Валюты

	
	Параметры.Вставить("ВалютаОтчета", Справочники.Валюты.ПустаяСсылка());
	Параметры.Вставить("ФункциональнаяВалюта", Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр);
	
	// Параметры пакетного получения данных с помощью правил получения данных
	ОписаниеТипаПравилаПолученияФакта = ИсточникиДанныхПовтИсп.ОписаниеТипаПравил();
	
	ОписаниеТипаБулево                = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока                = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	ОписаниеТиповДата                 = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	ОписаниеТипаИД                    = ОбщегоНазначения.ОписаниеТипаЧисло(4,, ДопустимыйЗнак.Неотрицательный);
	
	Параметры.Вставить("ТаблицаПравилСтатей", Новый ТаблицаЗначений);
	
	Параметры.Вставить("ОбластиДанных", Новый Структура);
	
	ТаблицаОбластейДанных = Новый ТаблицаЗначений;
	ТаблицаОбластейДанных.Колонки.Добавить("ИдентификаторИсточникаДанных",    ОписаниеТипаСтрока);
	ТаблицаОбластейДанных.Колонки.Добавить("ПривилегированныйРежимИсточника", ОписаниеТипаБулево);
	ТаблицаОбластейДанных.Колонки.Добавить("Период",                          ОписаниеТиповДата);
	ТаблицаОбластейДанных.Колонки.Добавить("НачалоПериода",                   ОписаниеТиповДата);
	ТаблицаОбластейДанных.Колонки.Добавить("КонецПериода",                    ОписаниеТиповДата);
	ТаблицаОбластейДанных.Колонки.Добавить("ВыражениеПериод",                 ОписаниеТипаСтрока);
	ТаблицаОбластейДанных.Колонки.Добавить("ВыражениеПериодГраница",          ОписаниеТипаСтрока);
	ТаблицаОбластейДанных.Колонки.Добавить("ВыражениеНачалоПериода",          ОписаниеТипаСтрока);
	ТаблицаОбластейДанных.Колонки.Добавить("ВыражениеКонецПериода",           ОписаниеТипаСтрока);
	ТаблицаОбластейДанных.Колонки.Добавить("ИД_ВыражениеПериод",              ОписаниеТипаИД);
	ТаблицаОбластейДанных.Колонки.Добавить("ИД_ВыражениеНачалоПериода",       ОписаниеТипаИД);
	ТаблицаОбластейДанных.Колонки.Добавить("ИД_ВыражениеКонецПериода",        ОписаниеТипаИД);
	ТаблицаОбластейДанных.Колонки.Добавить("ПолучениеОстатковНаГраницуПериода", ОписаниеТипаБулево);
	
	Параметры.ОбластиДанных.Вставить("ТаблицаДанных", ТаблицаОбластейДанных);
	Параметры.ОбластиДанных.Вставить("КолонкиСвертки", 
		"ИдентификаторИсточникаДанных, 
		|ПривилегированныйРежимИсточника,
		|Период, НачалоПериода, КонецПериода,
		|ИД_ВыражениеНачалоПериода, ИД_ВыражениеКонецПериода, ИД_ВыражениеПериод,
		|ПолучениеОстатковНаГраницуПериода");
	
	Параметры.Вставить("УсловияВыражений", Новый Структура); 
	Если Не ПараметрыИдентификацииВыражений = Неопределено Тогда
		Для Каждого ЧастьВыражения Из ПараметрыИдентификацииВыражений.ЧастиВыражений Цикл 
			Параметры.УсловияВыражений.Вставить(ЧастьВыражения.Ключ);
		КонецЦикла;
	Иначе
		Параметры.УсловияВыражений.Вставить("ВыражениеНачалоПериода");
		Параметры.УсловияВыражений.Вставить("ВыражениеКонецПериода");
		Параметры.УсловияВыражений.Вставить("ВыражениеПериод");
		Параметры.УсловияВыражений.Вставить("ВыражениеПериодГраница");
		
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			Параметры.УсловияВыражений.Вставить("ВыражениеЗаполненияАналитики" + НомерАналитики);
		КонецЦикла;
		Параметры.УсловияВыражений.Вставить("ВыражениеЗаполненияАналитикиВалюта");
		Параметры.УсловияВыражений.Вставить("ВыражениеЗаполненияАналитикиВалютаХранения");
		Параметры.УсловияВыражений.Вставить("ВыражениеЗаполненияПериодКурса");
		Параметры.УсловияВыражений.Вставить("ВыражениеЗаполненияАналитикиЕдиницаИзмерения");
		
		// Условия значений статей и показателей
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяКоличествоНачальныйОстаток");
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяСуммаВалютаНачальныйОстаток");
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяСуммаВалютаУпрНачальныйОстаток");
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРеглНачальныйОстаток");
		
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяКоличествоПриход");
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяСуммаВалютаПриход");
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяСуммаВалютаУпрПриход");
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРеглПриход");
		
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяКоличествоРасход");
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРасход");
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяСуммаВалютаУпрРасход");
		Параметры.УсловияВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРеглРасход");
	КонецЕсли;
	
	Параметры.УсловияВыражений.Вставить("ВыражениеПересчетаКоличества");
	
	ТаблицаАналитик = Новый ТаблицаЗначений;
	ТаблицаАналитик.Колонки.Добавить("Правило",          ОписаниеТипаПравилаПолученияФакта);
	ТаблицаАналитик.Колонки.Добавить("ПоОрганизациям",   ОписаниеТипаБулево);
	ТаблицаАналитик.Колонки.Добавить("ПоПодразделениям", ОписаниеТипаБулево);
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТаблицаАналитик.Колонки.Добавить("ВидАналитики" + НомерАналитики);
		ТаблицаАналитик.Колонки.Добавить("ВыражениеЗаполненияАналитики" + НомерАналитики);
	КонецЦикла;
	
	Параметры.Вставить("ТаблицаАналитик", ТаблицаАналитик);
	
	ТаблицаПериодов = Планирование.ШаблонТаблицыПериодов();
	ТаблицаПериодов.Колонки["ДатаНачала"].Имя = "НачалоПериода";
	ТаблицаПериодов.Колонки["ДатаОкончания"].Имя = "КонецПериода";
	ТаблицаПериодов.Колонки.Добавить("ПравилоФакта", Новый ОписаниеТипов("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"));
	
	Параметры.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	Параметры.Вставить("ДополнительныеДанные", Новый Структура);
	Параметры.ДополнительныеДанные.Вставить("ИмяПоляИдентификатора",    "");
	Параметры.ДополнительныеДанные.Вставить("Вид",                      Перечисления.ВидДополнительныхДанныхИсточниковДанных.ПустаяСсылка());
	Параметры.ДополнительныеДанные.Вставить("НумерацияИдентификаторов", Ложь);
	Параметры.ДополнительныеДанные.Вставить("ТаблицаДанных",            Новый ТаблицаЗначений);
	
	// Иерархические источники данных
	ТаблицаСопоставлений = Новый ТаблицаЗначений;
	ТаблицаСопоставлений.Колонки.Добавить("ИсточникДанных");
	ТаблицаСопоставлений.Колонки.Добавить("ИсточникДанныхИсходный");
	
	Параметры.Вставить("ИерархияИсточниковДанных", Новый Структура);
	Параметры.ИерархияИсточниковДанных.Вставить("ТаблицаСопоставлений", ТаблицаСопоставлений);
	Параметры.ИерархияИсточниковДанных.Вставить("СопоставлениеДляОтборов", Новый Соответствие);
	
	ТаблицаСопоставленийКорСчетов = Новый ТаблицаЗначений;
	ТаблицаСопоставленийКорСчетов.Колонки.Добавить("КорСчет");
	ТаблицаСопоставленийКорСчетов.Колонки.Добавить("КорСчетИсходный");
	Параметры.ИерархияИсточниковДанных.Вставить("ТаблицаСопоставленийКорСчетов", ТаблицаСопоставленийКорСчетов);
	
	Параметры.Вставить("ИндексыТаблиц", Новый Соответствие); // Ключ - название таблицы, значение - массив строк индексов
	
	Если ЗначенияПоУмолчанию <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ЗначенияПоУмолчанию);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает хранимые настройки из указанного справочника
//
// Параметры:
//  ИмяСправочникаИсточника  - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  ХешНастроек - Строка - хеш-сумма настроенных отборов компоновки данных
//  ПроверкаУникальности - Булево - указывает на необходимость добавления в дополнительные свойства Ссылки.
//
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных 
//
Функция ПолучитьХранимыеНастройкиСправочника(ИмяСправочникаИсточника, ХешНастроек, ПроверкаУникальности = Ложь) Экспорт
	
	ХранимыеНастройки = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникДанныхПравила.Ссылка КАК Ссылка,
	|	ИсточникДанныхПравила.КомпоновщикНастроек КАК КомпоновщикНастроек
	|ИЗ
	|	&ТекстЗапросаТаблицаСправочника КАК ИсточникДанныхПравила
	|ГДЕ
	|	ИсточникДанныхПравила.ХешНастроек = &ХешНастроек";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаТаблицаСправочника", "Справочник." + ИмяСправочникаИсточника);
	Запрос.УстановитьПараметр("ХешНастроек", ХешНастроек);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		КомпоновщикНастроек = Выборка.КомпоновщикНастроек; // ХранилищеЗначения
		ХранимыеНастройки = КомпоновщикНастроек.Получить();
		Если Не ХранимыеНастройки = Неопределено И ПроверкаУникальности Тогда
			ХранимыеНастройки.ДополнительныеСвойства.Вставить("Ссылка", Выборка.Ссылка);
		КонецЕсли;
	КонецЕсли;

	Возврат ХранимыеНастройки;

КонецФункции

// Возвращает хранимый макет из указанного справочника
//
// Параметры:
//  ИмяСправочникаИсточника  - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  ХешСхемыКомпоновкиДанных - Строка - хеш-сумма произвольной схемы компоновки данных
//  ПроверкаУникальности - Булево - указывает на необходимость добавления в дополнительные свойства Ссылки.
//
// Возвращаемое значение:
//  ТабличныйДокумент, ТекстовыйДокумент - объект, который может быть макетом. 
//
Функция ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ХешСхемыКомпоновкиДанных, ПроверкаУникальности = Ложь) Экспорт
	
	ХранимыйМакет = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникДанныхПравила.Ссылка КАК Ссылка,
	|	ИсточникДанныхПравила.СхемаИсточникаДанных КАК СхемаИсточникаДанных
	|ИЗ
	|	&ТекстЗапросаТаблицаСправочника КАК ИсточникДанныхПравила
	|ГДЕ
	|	ИсточникДанныхПравила.ХешСхемыКомпоновкиДанных = &ХешСхемы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаТаблицаСправочника", "Справочник." + ИмяСправочникаИсточника);
	Запрос.УстановитьПараметр("ХешСхемы", ХешСхемыКомпоновкиДанных);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СхемаИсточникаДанных = Выборка.СхемаИсточникаДанных; // ХранилищеЗначения
		ХранимыйМакет = СхемаИсточникаДанных.Получить();
		Если Не ХранимыйМакет = Неопределено И ПроверкаУникальности Тогда
			ХранимыйМакет.НастройкиПоУмолчанию.ДополнительныеСвойства.Вставить("Ссылка", Выборка.Ссылка);
		КонецЕсли;
	КонецЕсли;

	Возврат ХранимыйМакет;

КонецФункции

// Возвращает массив имен видов документов по источнику данных
//
// Параметры:
//  ИсточникДанных - СправочникСсылка.НастройкиХозяйственныхОпераций
//
// Возвращаемое значение:
//  Массив из Строка
Функция ИменаВидовДокументовПоИсточникуДанных(ИсточникДанных) Экспорт
	
	ТипыДанныхУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных, "Приход, Расход");
	
	ИменаВидовДокументовПриход = ОбщегоНазначения.СкопироватьРекурсивно(
		ИсточникиДанныхПовтИсп.ИменаВидовДокументовПоТипуДанныхУчета(ТипыДанныхУчета.Приход));
	ИменаВидовДокументовРасход = ОбщегоНазначения.СкопироватьРекурсивно(
		ИсточникиДанныхПовтИсп.ИменаВидовДокументовПоТипуДанныхУчета(ТипыДанныхУчета.Расход));
	Если Не ЗначениеЗаполнено(ТипыДанныхУчета.Приход) Тогда
		Возврат ИменаВидовДокументовРасход;
	ИначеЕсли Не ЗначениеЗаполнено(ТипыДанныхУчета.Расход) Тогда
		Возврат ИменаВидовДокументовПриход;
	КонецЕсли;
	
	НесовпадающиеИменаВидовДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИменаВидовДокументовПриход,
		ИменаВидовДокументовРасход);
	
	Счетчик = 0;
	Пока Счетчик < ИменаВидовДокументовПриход.Количество() Цикл
		Если НесовпадающиеИменаВидовДокументов.Найти(ИменаВидовДокументовПриход[Счетчик]) <> Неопределено Тогда
			ИменаВидовДокументовПриход.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипыДанныхУчета.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы
		Или ТипыДанныхУчета.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы Тогда
		ИменаВидовДокументовПриход.Добавить(Метаданные.Документы.ДвижениеПрочихАктивовПассивов.Имя);
	КонецЕсли;
	
	Возврат ИменаВидовДокументовПриход;
	
КонецФункции

// Возвращает данные для формирования текста запроса к источнику фактических данных по настройкам правила
//
// Параметры:
//  ОписаниеПравила - Структура - параметры правила получения фактических данных:
//   *ВыражениеЗаполненияАналитики1_6 - Строка
//   *ЗаполнятьУказаннымЗначениемАналитику1_6 - Булево
//   *ЗначениеАналитики1_6 - Произвольный
//   *СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов - статья бюджета правила
//  НастройкиСКДИсточника - НастройкиКомпоновкиДанных - настройки по умолчанию СКД источника фактических данных
//
// Возвращаемое значение:
//  Структура - структура данных запроса:
//   *ФрагментыТекстаЗапроса - Структура - фрагменты текста запроса:
//    **ТекстПолейАналитик - Строка - фрагмент текста запроса с выборкой полей аналитики статьи бюджета
//    **ТекстУсловия - Строка - фрагмент текста запроса с условием по отбору правила
//    **ТекстСоединений - Строка - фрагмент текста запроса с левыми соединениями с таблицами характеристик
//   *ПараметрыЗапроса - Структура - параметры запроса по данным настроек правила:
//    **ПараметрGUID - Произвольный - значение параметра запроса
//
Функция ДанныеДляЗапросаКИсточникуФактаПоПравилу(ОписаниеПравила, НастройкиСКДИсточника) Экспорт
	
	ФрагментыТекстаЗапроса = Новый Структура("ТекстПолейАналитик, ТекстУсловия, ТекстСоединений", "", "", "");
	ДанныеДляЗапроса = Новый Структура("ФрагментыТекстаЗапроса, ПараметрыЗапроса", ФрагментыТекстаЗапроса, Новый Структура);
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ШаблонОписаниеТиповАналитик = "ВидАналитики%1, ВидАналитики%1.ТипЗначения";
	РеквизитыОписанияТиповАналитик = Новый Массив;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		РеквизитыОписанияТиповАналитик.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОписаниеТиповАналитик, НомерАналитики));
	КонецЦикла;
	
	ОписанияТиповАналитик = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеПравила.СтатьяБюджетов, СтрСоединить(
		РеквизитыОписанияТиповАналитик, ","));
	
	ДеревоРеквизитовПолейИсточника = РаботаСФормулами.ПолучитьПустоеДеревоОперандов();
	
	// Выражения заполнения аналитик
	ШаблонВыраженияЗначенияАналитики = "ВЫБОР
		|	КОГДА НЕ ТИПЗНАЧЕНИЯ(%1) В (%2)
		|		ТОГДА %3
		|	ИНАЧЕ %1
		|КОНЕЦ"; // @query-part
	
	ВыраженияЗаполненияАналитики = Новый Массив;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ВидАналитики = ОписанияТиповАналитик["ВидАналитики"+НомерАналитики];
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Выражение = БюджетированиеСервер.ВыражениеПустогоЗначенияАналитики();
		ИначеЕсли Не ОписаниеПравила["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] Тогда
			Выражение = ОписаниеПравила["ВыражениеЗаполненияАналитики" + НомерАналитики];
			Если ПустаяСтрока(Выражение) Тогда
				Выражение = БюджетированиеСервер.ВыражениеПустогоЗначенияАналитики();
			Иначе
				Выражение = ВыражениеПоляДляПомещенияВТекстЗапроса(Выражение, ДанныеДляЗапроса,
					НастройкиСКДИсточника.ДоступныеПоляВыбора, ДеревоРеквизитовПолейИсточника);
				ОписаниеТипаВидаАналитики = ОписанияТиповАналитик["ВидАналитики" + НомерАналитики + "ТипЗначения"];
				Если БюджетированиеСервер.ЭтоИзмерениеАналитики(ОписаниеТипаВидаАналитики, ВидАналитики) Тогда
					Выражение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонВыраженияЗначенияАналитики, Выражение,
						ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(
						БюджетированиеПовтИсп.ТипыВидаАналитики(ВидАналитики)),
						БюджетированиеСервер.ВыражениеПустогоЗначенияАналитики());
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗначениеАналитики = ОписаниеПравила["ЗначениеАналитики"+НомерАналитики];
			Выражение = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ЗначениеАналитики);
			Если СтрНачинаетсяС(Выражение, "Параметр") Тогда
				НайтиИДобавитьПараметрЗапроса(Выражение, ЗначениеАналитики, ДанныеДляЗапроса.ПараметрыЗапроса);
				Выражение = "&"+Выражение;
			КонецЕсли;
		КонецЕсли;
		ВыраженияЗаполненияАналитики.Добавить(Выражение + " КАК Аналитика" + НомерАналитики); // @query-part
	КонецЦикла;
	
	ТекстПолейАналитик = СтрСоединить(ВыраженияЗаполненияАналитики, "," + Символы.ПС + Символы.Таб);
	ФрагментыТекстаЗапроса.ТекстПолейАналитик = ТекстПолейАналитик;
	
	// Отбор
	Отбор = ОписаниеПравила.КомпоновщикНастроек.Получить().Отбор;

	ТекстУсловия = ПреобразоватьОтборКомпоновкиДанныхВТекстУсловияЗапроса(Отбор, ДанныеДляЗапроса,
		НастройкиСКДИсточника.ДоступныеПоляОтбора, ДеревоРеквизитовПолейИсточника);
	ФрагментыТекстаЗапроса.ТекстУсловия = ?(ПустаяСтрока(ТекстУсловия), "ИСТИНА", ТекстУсловия);
	
	Возврат ДанныеДляЗапроса;
	
КонецФункции

#КонецОбласти 

#Область ИндексыТаблицЗначений

// Возвращает строковые представления индексов
// 
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - таблица, индексы которой требуется получить.
//
// Возвращаемое значение:
//	Массив из Строка - строковые представления индексов таблицы.
// 
Функция ИндексыТаблицыВМассив(ТаблицаЗначений) Экспорт
	ИндексыТаблицы = Новый Массив;
	
	Для Каждого ИндексТаблицы Из ТаблицаЗначений.Индексы Цикл
		ИндексыТаблицы.Добавить(Строка(ИндексТаблицы));
	КонецЦикла;
	
	Возврат ИндексыТаблицы;
	
КонецФункции

// Возвращает строковые представления индексов для нескольких таблиц
// 
// Параметры:
//	ТаблицыЗначений - Соответствие, Структура - таблицы, индексы которой требуется получить:
//		* Ключ     - Строка - имя таблицы
//		* Значение - ТаблицаЗначений - таблица, индексы которой требуется получить.
//
// Возвращаемое значение:
//	Соответствие - индексы таблиц:
//		* Ключ     - Строка - имя таблицы
//		* Значение - Массив - строковые представления индексов таблицы.
// 
Функция ИменаТаблицИИндексы(ТаблицыЗначений) Экспорт
	ИменаТаблицИИндексы = Новый Соответствие;
	
	Для Каждого ЭлементТаблицЗначений Из ТаблицыЗначений Цикл 
		ИменаТаблицИИндексы.Вставить(ЭлементТаблицЗначений.Ключ, ИндексыТаблицыВМассив(ЭлементТаблицЗначений.Значение));
	КонецЦикла;
	
	Возврат ИменаТаблицИИндексы;
КонецФункции

// Устанавливает или очищает индексы таблицы значений
// 
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - таблица, индексы которой требуется установить
//	ИндексыТаблицы - Массив, Неопределено - строковые представления индексов таблицы.
//		Если передано Неопределено, то индексы таблицы будут очищены.
//
Процедура УстановитьИндексыИзМассива(ТаблицаЗначений, ИндексыТаблицы = Неопределено) Экспорт
	
	Если ИндексыТаблицы = Неопределено Тогда
		ТаблицаЗначений.Индексы.Очистить();
	Иначе
		
		Для Каждого ИндексТаблицы Из ИндексыТаблицы Цикл
			ТаблицаЗначений.Индексы.Добавить(ИндексТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаКорреспонденцийРегистров(ИсточникДанных, АналитикаКорреспонденций = Неопределено) Экспорт
	
	ТаблицаКорреспонденций = Новый ТаблицаЗначений;
	
	// Общие колонки
	ТаблицаКорреспонденций.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаКорреспонденций.Колонки.Добавить("Регистратор");
	ТаблицаКорреспонденций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаКорреспонденций.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКорреспонденций.Колонки.Добавить("ИдентификаторФинЗаписи", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	
	// Аналитика
	Если ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка.НастройкиХозяйственныхОпераций") Тогда
		ТипыДанныхУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных, "Приход, Расход");
	Иначе
		ТипыДанныхУчета = ИсточникДанных;
	КонецЕсли;
	ТипыДанныхУчетаСовпадают = (ТипыДанныхУчета.Приход = ТипыДанныхУчета.Расход);
	
	Если АналитикаКорреспонденций <> Неопределено Тогда
		АналитикаРасход = АналитикаКорреспонденций.АналитикаКт;
		АналитикаПриход = АналитикаКорреспонденций.АналитикаДт;
		КорАналитика = АналитикаКорреспонденций.КорАналитика;
	Иначе
		АналитикаРасход = Новый Массив;
		АналитикаПриход = Новый Массив;
		КорАналитика = Новый Соответствие;
	КонецЕсли;
	ДобавитьКолонкиПоТипуДанныхУчета(ТаблицаКорреспонденций, ТипыДанныхУчета.Расход, ТипыДанныхУчетаСовпадают, Неопределено, АналитикаРасход);
	Если ТипыДанныхУчетаСовпадают Тогда
		АналитикаПриход = ОбщегоНазначения.СкопироватьРекурсивно(АналитикаРасход);
		ДобавитьКолонкиПоТипуДанныхУчета(ТаблицаКорреспонденций, ТипыДанныхУчета.Расход, ТипыДанныхУчетаСовпадают, КорАналитика, АналитикаПриход);
		Если АналитикаКорреспонденций <> Неопределено Тогда
			АналитикаКорреспонденций.АналитикаДт = ОбщегоНазначенияКлиентСервер.РазностьМассивов(АналитикаПриход, АналитикаРасход);
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(ТипыДанныхУчета.Расход) Тогда
		ДобавитьКолонкиПоТипуДанныхУчета(ТаблицаКорреспонденций, ТипыДанныхУчета.Приход, Истина, КорАналитика, АналитикаПриход);
	Иначе
		ДобавитьКолонкиПоТипуДанныхУчета(ТаблицаКорреспонденций, ТипыДанныхУчета.Приход, ТипыДанныхУчетаСовпадают, Неопределено, АналитикаПриход);
	КонецЕсли;
	
	Возврат ТаблицаКорреспонденций;
	
КонецФункции

Процедура ДобавитьКолонкиПоТипуДанныхУчета(ТаблицаКорреспонденций, ТипДанныхУчета, ТипыДанныхУчетаСовпадают, КорАналитика, МассивАналитик)
	
	СтруктураАналитики = ИсточникиДанныхПовтИсп.СтруктураАналитикиПоТипуДанныхУчета(ТипДанныхУчета);
	
	УчитыватьТипДанныхУчета = Не ТипыДанныхУчетаСовпадают И ЗначениеЗаполнено(ТипДанныхУчета);
	
	Для Каждого ОписаниеАналитики Из СтруктураАналитики Цикл
		ИмяПоля = ОписаниеАналитики.Ключ;
		ЗаголовокПоля = ОписаниеАналитики.Значение.Заголовок;
		
		Если (ИмяПоля = "НаправлениеДеятельности" Или ИмяПоля = "Подразделение") И УчитыватьТипДанныхУчета Тогда
			ПараметрыПоля = ИсточникиДанныхПовтИсп.ИмяПоляПоТипуДанныхУчета(ИмяПоля, ЗаголовокПоля, ТипДанныхУчета);
			ИмяПоля = ПараметрыПоля.ИмяПоля;
			ЗаголовокПоля = ПараметрыПоля.ЗаголовокПоля;
		КонецЕсли;
		Если ТаблицаКорреспонденций.Колонки.Найти(ИмяПоля) = Неопределено Тогда
			ТаблицаКорреспонденций.Колонки.Добавить(ИмяПоля, ОписаниеАналитики.Значение.Тип, ЗаголовокПоля);
			МассивАналитик.Добавить(ИмяПоля);
		ИначеЕсли КорАналитика <> Неопределено Тогда
			ТаблицаКорреспонденций.Колонки.Добавить(ОписаниеАналитики.Значение.ИмяКор, ОписаниеАналитики.Значение.Тип,
				ОписаниеАналитики.Значение.ЗаголовокКор);
			МассивАналитик.Добавить(ОписаниеАналитики.Значение.ИмяКор);
			КорАналитика.Вставить(ОписаниеАналитики.Значение.ИмяКор, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Если КорАналитика <> Неопределено И ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДенежныеСредства Тогда
		ТаблицаКорреспонденций.Колонки.Добавить("КорВалюта", ТаблицаКорреспонденций.Колонки.Валюта.ТипЗначения, НСтр("ru='Кор. валюта'"));
	КонецЕсли;
	
КонецПроцедуры

Функция СхемаКомпоновкиДанныхПоТаблицеКорреспонденцийРегистров(ТаблицаКорреспонденций) Экспорт
	
	СКД = КомпоновкаДанныхСервер.ПустаяСхема();
	
	ИмяНабораДанных = "ТаблицаКорреспонденций";
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), ИмяНабораДанных, , ИмяНабораДанных);
	
	Для Каждого Колонка Из ТаблицаКорреспонденций.Колонки Цикл
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанных, Колонка.Имя, , Колонка.Заголовок, Колонка.ТипЗначения);
	КонецЦикла;
	
	Возврат СКД;
	
КонецФункции

// Добавляет дополнительные суммовые ресурсы как результат сложения некоторых исходных ресурсов
//
// Параметры:
//  СуммовыеРесурсы - Массив из КолонкаТаблицыЗначений
//  ПорядокОбхода - Число
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - сопоставление составного суммового ресурса с исходными:
//   * Ключ - Строка - имя колонки составного суммового ресурса
//   * Значение - Массив из Строка - имена колонок исходных суммовых ресурсов.
//
Функция СоставныеСуммовыеРесурсы(СуммовыеРесурсы, ПорядокОбхода) Экспорт
	
	СоставныеРесурсы = Новый Соответствие;
	
	Если ПорядокОбхода = 1 Тогда
		
		// Сумма НДС
		Если СуммовыеРесурсы.Найти("СуммаБезНДСУпр") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСУпр") = Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаНДСУпр");
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СуммаБезНДСРегл") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСРегл") = Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаНДСРегл");
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СуммаБезНДСВал") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСВал") = Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаНДСВал");
		КонецЕсли;
		
		// Стоимость с НДС
		Если СуммовыеРесурсы.Найти("СтоимостьБезНДСУпр") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДССтоимостиУпр") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СтоимостьСНДСУпр", СтрРазделить("СтоимостьБезНДСУпр,СуммаНДССтоимостиУпр", ","));
		ИначеЕсли СуммовыеРесурсы.Найти("СтоимостьУпр") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СтоимостьСНДСУпр", СтрРазделить("СтоимостьУпр", ","));
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СуммаДопРасходовБезНДСУпр") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСДопРасходовУпр") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаДопРасходовСНДСУпр", СтрРазделить("СуммаДопРасходовБезНДСУпр,СуммаНДСДопРасходовУпр", ","));
		ИначеЕсли СуммовыеРесурсы.Найти("СуммаДопРасходовУпр") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаДопРасходовСНДСУпр", СтрРазделить("СуммаДопРасходовУпр", ","));
		КонецЕсли;
		
		// Сумма оплаты
		Если СуммовыеРесурсы.Найти("СуммаПредоплатыУпр") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаПостоплатыУпр") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаОплатыУпр", СтрРазделить("СуммаПредоплатыУпр,СуммаПостоплатыУпр", ","));
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СуммаПредоплатыРегл") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаПостоплатыРегл") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаОплатыРегл", СтрРазделить("СуммаПредоплатыРегл,СуммаПостоплатыРегл", ","));
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СуммаПредоплатыВал") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаПостоплатыВал") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаОплатыВал", СтрРазделить("СуммаПредоплатыВал,СуммаПостоплатыВал", ","));
		КонецЕсли;
		
	ИначеЕсли ПорядокОбхода = 2 Тогда
		
		// Сумма с НДС
		Если СуммовыеРесурсы.Найти("СуммаБезНДСУпр") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСУпр") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаУпр", СтрРазделить("СуммаБезНДСУпр,СуммаНДСУпр", ","));
			Если СуммовыеРесурсы.Найти("СуммаРасходовНаПродажуУпр") <> Неопределено Тогда
				СоставныеРесурсы.Вставить("СуммаУпр", СтрРазделить("СуммаБезНДСУпр,СуммаНДСУпр,СуммаРасходовНаПродажуУпр", ","));
			КонецЕсли;
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СуммаБезНДСРегл") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСРегл") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаРегл", СтрРазделить("СуммаБезНДСРегл,СуммаНДСРегл", ","));
			Если СуммовыеРесурсы.Найти("СуммаРасходовНаПродажуРегл") <> Неопределено Тогда
				СоставныеРесурсы.Вставить("СуммаРегл", СтрРазделить("СуммаБезНДСРегл,СуммаНДСРегл,СуммаРасходовНаПродажуРегл", ","));
			КонецЕсли;
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СуммаБезНДСВал") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСВал") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаВал", СтрРазделить("СуммаБезНДСВал,СуммаНДСВал", ","));
			Если СуммовыеРесурсы.Найти("СуммаРасходовНаПродажуВал") <> Неопределено Тогда
				СоставныеРесурсы.Вставить("СуммаВал", СтрРазделить("СуммаБезНДСВал,СуммаНДСВал,СуммаРасходовНаПродажуВал", ","));
			КонецЕсли;
		КонецЕсли;
		
		// Себестоимость
		Если СуммовыеРесурсы.Найти("СтоимостьРегл") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаДопРасходовРегл") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СебестоимостьРегл", СтрРазделить("СтоимостьРегл,СуммаДопРасходовРегл", ","));
			Если СуммовыеРесурсы.Найти("СуммаРасходовНаПродажуРегл") <> Неопределено Тогда
				СоставныеРесурсы.Вставить("СебестоимостьРегл", СтрРазделить("СтоимостьРегл,СуммаДопРасходовРегл,СуммаРасходовНаПродажуРегл", ","));
			КонецЕсли;
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СтоимостьБезНДСУпр") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаДопРасходовБезНДСУпр") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СебестоимостьБезНДСУпр", СтрРазделить("СтоимостьБезНДСУпр,СуммаДопРасходовБезНДСУпр", ","));
			Если СуммовыеРесурсы.Найти("СуммаРасходовНаПродажуУпр") <> Неопределено Тогда
				СоставныеРесурсы.Вставить("СебестоимостьБезНДСУпр", СтрРазделить("СтоимостьБезНДСУпр,СуммаДопРасходовБезНДСУпр,СуммаРасходовНаПродажуУпр", ","));
			КонецЕсли;
		КонецЕсли;
		
		// Себестоимость с НДС
		Если СуммовыеРесурсы.Найти("СтоимостьСНДСУпр") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаДопРасходовСНДСУпр") <> Неопределено Тогда
			СоставныеРесурсы.Вставить("СебестоимостьСНДСУпр", СтрРазделить("СтоимостьСНДСУпр,СуммаДопРасходовСНДСУпр", ","));
			Если СуммовыеРесурсы.Найти("СуммаРасходовНаПродажуУпр") <> Неопределено Тогда
				СоставныеРесурсы.Вставить("СебестоимостьСНДСУпр", СтрРазделить("СтоимостьСНДСУпр,СуммаДопРасходовСНДСУпр,СуммаРасходовНаПродажуУпр", ","));
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПорядокОбхода = 3 Тогда
		
		// Сумма без НДС
		Если СуммовыеРесурсы.Найти("СуммаОплатыУпр") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСУпр") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаБезНДСУпр") = Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаБезНДСУпр", СтрРазделить("СуммаОплатыУпр,-СуммаНДСУпр", ","));
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СуммаОплатыРегл") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСРегл") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаБезНДСРегл") = Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаБезНДСРегл", СтрРазделить("СуммаОплатыРегл,-СуммаНДСРегл", ","));
		КонецЕсли;
		Если СуммовыеРесурсы.Найти("СуммаОплатыВал") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаНДСВал") <> Неопределено
			И СуммовыеРесурсы.Найти("СуммаБезНДСВал") = Неопределено Тогда
			СоставныеРесурсы.Вставить("СуммаБезНДСВал", СтрРазделить("СуммаОплатыВал,-СуммаНДСВал", ","));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СоставныеРесурсы;
	
КонецФункции

Функция ВыражениеПоляДляПомещенияВТекстЗапроса(ИсходноеВыражение, ДанныеДляЗапроса, ДоступныеПоля, ДеревоРеквизитов)
	
	ЧастиВыражения = РаботаСФормуламиКлиентСервер.ЧастиОперанда(ИсходноеВыражение);
	ТекстыСоединений = Новый Массив;
	
	ШаблонВыраженияХарактеристики = "ВЫРАЗИТЬ (%1.%2 КАК %3)"; // @query-part
	
	ШаблонЭлементаВыраженияСоставнойХарактеристики = "КОГДА ТИПЗНАЧЕНИЯ(%1.%2) = ТИП(%3)
		|	ТОГДА ВЫРАЗИТЬ (%1.%2 КАК %3)"; // @query-part
	
	ШаблонЭлементаСоставногоВыраженияХарактеристики = "КОГДА %1 ССЫЛКА %2
		|	ТОГДА %3"; // @query-part
	
	ШаблонСоединенияСТаблицейХарактеристик = "ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК %2
		|	ПО %3 = %2.%4
		|	И (%2.%5 = %6)"; // @query-part
	
	ТипыЭлементов = РаботаСФормулами.ТипыЭлементовДереваОперандов();
	
	Если ЧастиВыражения.Количество() > 1 Тогда
		ТекущаяСтрокаДерева = ДеревоРеквизитов;
		ВыражениеДляЗапроса = "ПсевдонимТаблицыИсточника";
		Представление = "";
		ПрефиксПсевдонимаТаблицыХарактеристик = "";
		Пока ЧастиВыражения.Количество() > 0 Цикл
			Представление = ?(ПустаяСтрока(Представление), "", Представление + ".") + ЧастиВыражения[0];
			ЧастьПредставления = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("[]", ЧастиВыражения[0], "");
			СтрокаДерева = ТекущаяСтрокаДерева.Строки.Найти(ЧастьПредставления, "Идентификатор", Ложь);
			Если СтрокаДерева = Неопределено Тогда
				СтрокаДерева = ТекущаяСтрокаДерева.Строки.Найти(ЧастьПредставления, "Представление", Ложь);
			КонецЕсли;
			Если СтрокаДерева = Неопределено Тогда
				СтрокаДерева = ТекущаяСтрокаДерева.Строки.Добавить();
				СтрокаДерева.Идентификатор = ЧастьПредставления;
				СтрокаДерева.Представление = ЧастьПредставления;
				СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.Реквизит;
				СтрокаДерева.ТипЗначения = ДоступныеПоля.НайтиПоле(Новый ПолеКомпоновкиДанных(Представление)).ТипЗначения;
				СтрокаДерева.РазрешаетсяВыборОперанда = Истина;
				СтрокаДерева.ВключаетсяВИдентификатор = Истина;
			КонецЕсли;
			Если СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.Реквизит Тогда
				ВыражениеДляЗапроса = ВыражениеДляЗапроса + "." + СтрокаДерева.Идентификатор;
				ПрефиксПсевдонимаТаблицыХарактеристик = ?(ПустаяСтрока(ПрефиксПсевдонимаТаблицыХарактеристик), "",
					ПрефиксПсевдонимаТаблицыХарактеристик + "_") + СтрокаДерева.Идентификатор;
			ИначеЕсли СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ДополнительныйРеквизит
				Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ДополнительноеСведение
				Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Адрес
				Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Телефон
				Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Skype
				Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_АдресЭлектроннойПочты
				Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_ВебСтраница
				Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Факс
				Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_Другое
				Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ВидКонтактнойИнформации_НесколькоВидовКонтактнойИнформации Тогда
				Идентификатор = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("{}",
					СтрокаДерева.Идентификатор, "");
				Если СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ДополнительныйРеквизит
					Или СтрокаДерева.ТипЭлементаДерева = ТипыЭлементов.ДополнительноеСведение Тогда
					Идентификатор = СтрЗаменить(Идентификатор, "ДР.", "");
				Иначе
					Идентификатор = СтрЗаменить(Идентификатор, "КИ.", "");
				КонецЕсли;
				ПараметрыХарактеристики = ПараметрыХарактеристикиДляТекстаЗапроса(
					СтрокаДерева.Родитель.ТипЗначения, СтрокаДерева.ТипЭлементаДерева, Идентификатор);
				Если ПараметрыХарактеристики.Количество() = 0 Тогда
					ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр(
						"ru = 'Не удалось определить владельца дополнительного свойства с идентификатором %1 по полю с выражением %2.'"),
						СтрокаДерева.Идентификатор, ИсходноеВыражение),
						КатегорияОшибки.ОшибкаХранимыхДанных);
				КонецЕсли;
				ЭлементыСоставногоПутиКДанным = Новый Массив;
				Для Каждого Параметры Из ПараметрыХарактеристики Цикл
					ПсевдонимТаблицыХарактеристик = ПрефиксПсевдонимаТаблицыХарактеристик + "_"
						+ Параметры.ПсевдонимТаблицыИсточника;
					СтрокаХарактеристика = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(
						Параметры.Свойство);
					Если СтрНачинаетсяС(СтрокаХарактеристика, "Параметр") Тогда
						НайтиИДобавитьПараметрЗапроса(СтрокаХарактеристика, Параметры.Свойство,
							ДанныеДляЗапроса.ПараметрыЗапроса);
						СтрокаХарактеристика = "&" + СтрокаХарактеристика;
					КонецЕсли;
					ТекстСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСоединенияСТаблицейХарактеристик, Параметры.ПутьКТаблицеИсточника,
						ПсевдонимТаблицыХарактеристик, ВыражениеДляЗапроса, Параметры.ПолеОбъекта,
						Параметры.ПолеСвойства, СтрокаХарактеристика);
					Если СтрНайти(ДанныеДляЗапроса.ФрагментыТекстаЗапроса.ТекстСоединений, ТекстСоединения) = 0 Тогда
						ТекстыСоединений.Добавить(ТекстСоединения);
					КонецЕсли;
					ТипыЗначенияХарактеристики = СтрокаДерева.ТипЗначения.Типы();
					Если ТипыЗначенияХарактеристики.Количество() = 1 Тогда
						ИмяТипаЗначения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПолноеИмяТипа(
							ТипыЗначенияХарактеристики[0]);
						ВыражениеХарактеристики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонВыраженияХарактеристики, ПсевдонимТаблицыХарактеристик,
							Параметры.ПолеЗначенияСвойства, ИмяТипаЗначения);
					Иначе
						ЭлементыПутиКДанным = Новый Массив;
						Для Каждого ТипЗначения Из ТипыЗначенияХарактеристики Цикл
							ИмяТипаЗначения = ФинансовыйУчетПоДаннымБалансовыхРегистров.ПолноеИмяТипа(
								ТипЗначения);
							ЭлементыПутиКДанным.Добавить(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонЭлементаВыраженияСоставнойХарактеристики, ПсевдонимТаблицыХарактеристик,
								Параметры.ПолеЗначенияСвойства, ИмяТипаЗначения));
						КонецЦикла;
						ВыражениеХарактеристики = "(ВЫБОР" // @query-part
							+ Символы.ПС + СтрСоединить(ЭлементыПутиКДанным, Символы.ПС) + Символы.ПС
							+ "КОГДА " // @query-part
							+ ПсевдонимТаблицыХарактеристик + "." + Параметры.ПолеЗначенияСвойства
							+ " = НЕОПРЕДЕЛЕНО ТОГДА НЕОПРЕДЕЛЕНО" // @query-part
							+ Символы.ПС
							+ "КОНЕЦ)"; // @query-part
					КонецЕсли;
					Если ПараметрыХарактеристики.Количество() = 1 Тогда
						ЭлементыСоставногоПутиКДанным.Добавить(ВыражениеХарактеристики);
					Иначе
						ЭлементыСоставногоПутиКДанным.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонЭлементаСоставногоВыраженияХарактеристики, ВыражениеДляЗапроса, Параметры.ИмяОбъекта,
							ВыражениеХарактеристики));
					КонецЕсли;
				КонецЦикла;
				ПрефиксПсевдонимаТаблицыХарактеристик = ПрефиксПсевдонимаТаблицыХарактеристик + "_" + Идентификатор;
				Если ЭлементыСоставногоПутиКДанным.Количество() = 1 Тогда
					ВыражениеДляЗапроса = ЭлементыСоставногоПутиКДанным[0];
				Иначе
					ВыражениеДляЗапроса = "(ВЫБОР" // @query-part
						+ Символы.ПС + СтрСоединить(ЭлементыСоставногоПутиКДанным, Символы.ПС) + Символы.ПС
						+ "КОНЕЦ)"; //@ query-part
				КонецЕсли;
			КонецЕсли;
			ЧастиВыражения.Удалить(0);
			Если ЧастиВыражения.Количество() > 0 Тогда
				РаботаСФормулами.РазвернутьСтрокуОперанда(СтрокаДерева);
			КонецЕсли;
			ТекущаяСтрокаДерева = СтрокаДерева;
		КонецЦикла;
		Если ТекстыСоединений.Количество() > 0 Тогда
			ДанныеДляЗапроса.ФрагментыТекстаЗапроса.ТекстСоединений = ?(ПустаяСтрока(
				ДанныеДляЗапроса.ФрагментыТекстаЗапроса.ТекстСоединений), Символы.Таб,
				ДанныеДляЗапроса.ФрагментыТекстаЗапроса.ТекстСоединений + Символы.ПС + Символы.Таб) + СтрСоединить(
				ТекстыСоединений, Символы.ПС + Символы.Таб);
		КонецЕсли;
	Иначе
		ВыражениеДляЗапроса = "ПсевдонимТаблицыИсточника." + ИсходноеВыражение;
	КонецЕсли;
	
	Возврат ВыражениеДляЗапроса;

КонецФункции

Функция ПреобразоватьОтборКомпоновкиДанныхВТекстУсловияЗапроса(Отбор, ДанныеДляЗапроса, ДоступныеПоля, ДеревоРеквизитов,
	ТипГруппыЭлементовОтбора = Неопределено)
	
	ТекстУсловия = "";
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
	
		Если Не Элемент.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстУсловия) Тогда
			СоединительУсловий = "";
		ИначеЕсли ТипГруппыЭлементовОтбора = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
			СоединительУсловий = Символы.ПС + "ИЛИ " // @query-part
		Иначе
			СоединительУсловий = Символы.ПС + "И "; // @query-part
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
			ТекстУсловияПоОтбору = ПреобразоватьОтборКомпоновкиДанныхВТекстУсловияЗапроса(Элемент, ДанныеДляЗапроса,
				ДоступныеПоля, ДеревоРеквизитов, Элемент.ТипГруппы);
			Если Не ПустаяСтрока(ТекстУсловияПоОтбору) Тогда
				ТекстУсловия = ТекстУсловия + СоединительУсловий + ?(ТипГруппыЭлементовОтбора
					= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе, "НЕ (", "(") + ТекстУсловияПоОтбору + ")";// @query-part
			КонецЕсли;
		
		Иначе
		
			Если Не ЗначениеЗаполнено(Элемент.ЛевоеЗначение) Тогда
				Продолжить;
			ИначеЕсли ДоступныеПоля.НайтиПоле(Элемент.ЛевоеЗначение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВыражениеДляЗапроса = ВыражениеПоляДляПомещенияВТекстЗапроса(СокрЛП(Элемент.ЛевоеЗначение),
				ДанныеДляЗапроса, ДоступныеПоля, ДеревоРеквизитов);
			
			Если ТипЗнч(Элемент.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ЗначениеПараметра = Элемент.ПравоеЗначение.ВыгрузитьЗначения();
			Иначе
				ЗначениеПараметра = Элемент.ПравоеЗначение;
			КонецЕсли;
			СтрокаЗначениеПараметра = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(ЗначениеПараметра);
			Если СтрНачинаетсяС(СтрокаЗначениеПараметра, "Параметр") Тогда
				СтрокаЗначениеПараметра = "&" + СтрокаЗначениеПараметра;
			КонецЕсли;
			
			УсловиеПоОтбору = "";
			Если Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				УсловиеПоОтбору = ВыражениеДляЗапроса + " = " + СтрокаЗначениеПараметра;
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
				УсловиеПоОтбору = ВыражениеДляЗапроса + " <> " + СтрокаЗначениеПараметра;
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				УсловиеПоОтбору = ВыражениеДляЗапроса + " > " + СтрокаЗначениеПараметра;
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
				УсловиеПоОтбору = ВыражениеДляЗапроса + " >= " + СтрокаЗначениеПараметра;
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
				УсловиеПоОтбору = ВыражениеДляЗапроса + " < " + СтрокаЗначениеПараметра;
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
				УсловиеПоОтбору = ВыражениеДляЗапроса + " <= " + СтрокаЗначениеПараметра;
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				УсловиеПоОтбору = ВыражениеДляЗапроса + " В (" + СтрокаЗначениеПараметра + ")"; // @query-part
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				УсловиеПоОтбору = "НЕ " + ВыражениеДляЗапроса + " В (" + СтрокаЗначениеПараметра + ")"; // @query-part
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
				Или Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
				УсловиеПоОтбору = ВыражениеДляЗапроса + " В ИЕРАРХИИ (" + СтрокаЗначениеПараметра + ")"; // @query-part
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии
				Или Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				УсловиеПоОтбору = "НЕ " + ВыражениеДляЗапроса + " В ИЕРАРХИИ (" + СтрокаЗначениеПараметра + ")"; // @query-part
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
				СтрокаЗначениеПараметра = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаЗначениеПараметра);
				УсловиеПоОтбору = ВыражениеДляЗапроса + " ПОДОБНО ""%""+" + СтрокаЗначениеПараметра + "+""%"" СПЕЦСИМВОЛ ""~"""; // @query-part
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
				СтрокаЗначениеПараметра = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаЗначениеПараметра);
				УсловиеПоОтбору = "НЕ " + ВыражениеДляЗапроса + " ПОДОБНО ""%""+" + СтрокаЗначениеПараметра
					+ "+""%"" СПЕЦСИМВОЛ ""~"""; // @query-part
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда
				СтрокаЗначениеПараметра = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаЗначениеПараметра);
				УсловиеПоОтбору = ВыражениеДляЗапроса + " ПОДОБНО " + СтрокаЗначениеПараметра + "+""%"" СПЕЦСИМВОЛ ""~"""; // @query-part
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда
				СтрокаЗначениеПараметра = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаЗначениеПараметра);
				УсловиеПоОтбору = "НЕ " + ВыражениеДляЗапроса + " ПОДОБНО " + СтрокаЗначениеПараметра
					+ "+""%"" СПЕЦСИМВОЛ ""~"""; // @query-part
			ИначеЕсли Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
				Или Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				МассивПустыхЗначений = МассивПустыхЗначенийПоОписаниюТипов(ДоступныеПоля.НайтиПоле(
					Элемент.ЛевоеЗначение).ТипЗначения);
				СтрокаЗначениеПараметра = ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(
					МассивПустыхЗначений);
				Если Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
					УсловиеПоОтбору = "(НЕ " + ВыражениеДляЗапроса + " В (" + СтрокаЗначениеПараметра + ") И НЕ "
						+ ВыражениеДляЗапроса + " ЕСТЬ NULL)"; // @query-part
				Иначе
					УсловиеПоОтбору = "(" + ВыражениеДляЗапроса + " В (" + СтрокаЗначениеПараметра + ") ИЛИ "
						+ ВыражениеДляЗапроса + " ЕСТЬ NULL)"; // @query-part
				КонецЕсли;
			КонецЕсли;
			Если СтрНачинаетсяС(СтрокаЗначениеПараметра, "&Параметр") Тогда
				НайтиИДобавитьПараметрЗапроса(СтрЗаменить(СтрокаЗначениеПараметра, "&", ""), ЗначениеПараметра,
					ДанныеДляЗапроса.ПараметрыЗапроса);
			КонецЕсли;
			
			ТекстУсловия = ТекстУсловия + СоединительУсловий + УсловиеПоОтбору;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТекстУсловия;
	
КонецФункции

Функция МассивПустыхЗначенийПоОписаниюТипов(ОписаниеТипов)

	МассивПустыхЗначений = Новый Массив;
	
	Для Каждого ТипЗначения Из ОписаниеТипов.Типы() Цикл
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначения);
			Если МетаданныеПоТипу <> Неопределено  Тогда
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПоТипу.ПолноеИмя());
				МассивПустыхЗначений.Добавить(МенеджерОбъекта.ПустаяСсылка());
			КонецЕсли;
		ИначеЕсли ТипЗначения = Тип("Строка") Тогда
			МассивПустыхЗначений.Добавить("");
		ИначеЕсли ТипЗначения = Тип("Число") Тогда
			МассивПустыхЗначений.Добавить(0);
		ИначеЕсли ТипЗначения = Тип("Дата") Тогда
			МассивПустыхЗначений.Добавить('00010101');
		ИначеЕсли ТипЗначения = Тип("Булево") Тогда
			МассивПустыхЗначений.Добавить(Ложь);
		ИначеЕсли ТипЗначения = Тип("УникальныйИдентификатор") Тогда
			МассивПустыхЗначений.Добавить(ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПустыхЗначений.Количество() > 1 Тогда
		МассивПустыхЗначений.Добавить(Неопределено);
	КонецЕсли;

	Возврат МассивПустыхЗначений;

КонецФункции

Функция ПараметрыХарактеристикиДляТекстаЗапроса(ОписаниеТипов, ТипЭлемента, Идентификатор)
	
	ПараметрыХарактеристики = Новый Массив;
	
	ПараметрыСтрокой = "Свойство,ИмяОбъекта,ПсевдонимТаблицыИсточника,ПутьКТаблицеИсточника,ПолеОбъекта,ПолеСвойства,ПолеЗначенияСвойства";
	
	ТипыЭлементов = РаботаСФормулами.ТипыЭлементовДереваОперандов();
	
	ТипыЗначенийВладельцаДопСвойства = ОписаниеТипов.Типы();
	ИспользоватьИмяОбъектаДляПсевдонима = (ТипыЗначенийВладельцаДопСвойства.Количество() > 1);
	
	Для Каждого ТипЗначения Из ТипыЗначенийВладельцаДопСвойства Цикл
		Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
			Продолжить;
		КонецЕсли;
		МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначения);
		Если МетаданныеПоТипу = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИмяОбъектаМетаданных = МетаданныеПоТипу.Имя;
		ПолноеИмяОбъектаМетаданных = МетаданныеПоТипу.ПолноеИмя();
		ПустоеЗначение = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных).ПустаяСсылка();
		
		СтруктураПараметров = Новый Структура(ПараметрыСтрокой);
		
		Если ТипЭлемента = ТипыЭлементов.ДополнительныйРеквизит Тогда
			Если Не УправлениеСвойствами.ИспользоватьДопРеквизиты(ПустоеЗначение) Тогда
				Продолжить;
			Иначе
				ДополнительноеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
					"ИдентификаторДляФормул", Идентификатор);
				Если ДополнительноеСвойство.Пустая() Тогда
					ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось определить дополнительный реквизит по идентификатору %1.'"),
						Идентификатор), КатегорияОшибки.ОшибкаХранимыхДанных);
				ИначеЕсли Не УправлениеСвойствами.ПроверитьСвойствоУОбъекта(ПустоеЗначение, ДополнительноеСвойство) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтруктураПараметров.Свойство = ДополнительноеСвойство;
			СтруктураПараметров.ИмяОбъекта = ПолноеИмяОбъектаМетаданных;
			СтруктураПараметров.ПсевдонимТаблицыИсточника = ?(ИспользоватьИмяОбъектаДляПсевдонима,
				ИмяОбъектаМетаданных, "") + Идентификатор;
			СтруктураПараметров.ПутьКТаблицеИсточника = ПолноеИмяОбъектаМетаданных + ".ДополнительныеРеквизиты";
			СтруктураПараметров.ПолеОбъекта = "Ссылка";
			СтруктураПараметров.ПолеСвойства = "Свойство";
			СтруктураПараметров.ПолеЗначенияСвойства = "Значение";
		ИначеЕсли ТипЭлемента = ТипыЭлементов.ДополнительноеСведение Тогда
			Если Не УправлениеСвойствами.ИспользоватьДопСведения(ПустоеЗначение) Тогда
				Продолжить;
			Иначе
				ДополнительноеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту(
					"ИдентификаторДляФормул", Идентификатор);
				Если ДополнительноеСвойство.Пустая() Тогда
					ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось определить дополнительное сведение по идентификатору %1.'"),
						Идентификатор), КатегорияОшибки.ОшибкаХранимыхДанных);
				ИначеЕсли Не УправлениеСвойствами.ПроверитьСвойствоУОбъекта(ПустоеЗначение, ДополнительноеСвойство) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтруктураПараметров.Свойство = ДополнительноеСвойство;
			СтруктураПараметров.ИмяОбъекта = ПолноеИмяОбъектаМетаданных;
			СтруктураПараметров.ПсевдонимТаблицыИсточника = ?(ИспользоватьИмяОбъектаДляПсевдонима,
				ИмяОбъектаМетаданных, "") + Идентификатор;
			СтруктураПараметров.ПутьКТаблицеИсточника = "РегистрСведений.ДополнительныеСведения";
			СтруктураПараметров.ПолеОбъекта = "Объект";
			СтруктураПараметров.ПолеСвойства = "Свойство";
			СтруктураПараметров.ПолеЗначенияСвойства = "Значение";
		Иначе
			Если Не УправлениеКонтактнойИнформацией.СодержитКонтактнуюИнформацию(ПустоеЗначение) Тогда
				Продолжить;
			Иначе
				Если ТипЗначения = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					ГруппаКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
						"Справочник.ВидыКонтактнойИнформации.СправочникКонтактныеЛицаПартнеров");
				ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Контрагенты") Тогда
					ГруппаКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
						"Справочник.ВидыКонтактнойИнформации.СправочникКонтрагенты");
				ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Организации") Тогда
					ГруппаКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
						"Справочник.ВидыКонтактнойИнформации.СправочникОрганизации");
				ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Партнеры") Тогда
					ГруппаКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
						"Справочник.ВидыКонтактнойИнформации.СправочникПартнеры");
				ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Пользователи") Тогда
					ГруппаКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
						"Справочник.ВидыКонтактнойИнформации.СправочникПользователи");
				//++ Локализация
				ИначеЕсли ТипЗначения = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
					ГруппаКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
						"Справочник.ВидыКонтактнойИнформации.СправочникРегистрацииВНалоговомОргане");
				//-- Локализация
				ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Склады") Тогда
					ГруппаКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
						"Справочник.ВидыКонтактнойИнформации.СправочникСклады");
				//++ Локализация
				ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ТорговыеТочки") Тогда
					ГруппаКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
						"Справочник.ВидыКонтактнойИнформации.СправочникТорговыеТочки");
				//-- Локализация
				ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					ГруппаКонтактнойИнформации = ОбщегоНазначения.ПредопределенныйЭлемент(
						"Справочник.ВидыКонтактнойИнформации.СправочникФизическиеЛица");
				Иначе
					ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось определить группу контактной информации для типа %1.'"), Строка(
						ТипЗначения)), КатегорияОшибки.ОшибкаХранимыхДанных);
				КонецЕсли;
				ДополнительноеСвойство = Справочники.ВидыКонтактнойИнформации.НайтиПоРеквизиту(
					"ИдентификаторДляФормул", Идентификатор, ГруппаКонтактнойИнформации);
				Если ДополнительноеСвойство.Пустая() Тогда
					ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр(
						"ru = 'Не удалось определить вид контактной информации по идентификатору %1 для типа %2.'"),
						Идентификатор, Строка(ТипЗначения)), КатегорияОшибки.ОшибкаХранимыхДанных);
				КонецЕсли;
			КонецЕсли;
			СтруктураПараметров.Свойство = ДополнительноеСвойство;
			СтруктураПараметров.ИмяОбъекта = ПолноеИмяОбъектаМетаданных;
			СтруктураПараметров.ПсевдонимТаблицыИсточника = ?(ИспользоватьИмяОбъектаДляПсевдонима,
				ИмяОбъектаМетаданных, "") + Идентификатор;
			СтруктураПараметров.ПутьКТаблицеИсточника = ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация";
			СтруктураПараметров.ПолеОбъекта = "Ссылка";
			СтруктураПараметров.ПолеСвойства = "ВидДляСписка";
			СтруктураПараметров.ПолеЗначенияСвойства = "Представление";
		КонецЕсли;
		ПараметрыХарактеристики.Добавить(СтруктураПараметров);
		
	КонецЦикла;
	
	Возврат ПараметрыХарактеристики;
	
КонецФункции

Процедура НайтиИДобавитьПараметрЗапроса(ИмяПараметра, ЗначениеПараметра, ПараметрыЗапроса)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		ПараметрыЗапроса.Вставить(ИмяПараметра, ЗначениеПараметра);
	Иначе
		НайденоЗначениеПараметра = Ложь;
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Если ЗначениеПараметра = Параметр.Значение Тогда
				НайденоЗначениеПараметра = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НайденоЗначениеПараметра Тогда
			ИмяПараметра = Параметр.Ключ;
		Иначе
			ПараметрыЗапроса.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти