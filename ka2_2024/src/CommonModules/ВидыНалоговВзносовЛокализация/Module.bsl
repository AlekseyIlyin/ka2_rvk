
#Область ПрограммныйИнтерфейс

//Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов справочника.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	//++ Локализация
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЕдиныйНалоговыйПлатеж";
	Элемент.ИдентификаторЭлемента = "ЕдиныйНалоговыйПлатеж";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЕНВД";
	Элемент.ИдентификаторЭлемента = "ЕНВД";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЕСХН";
	Элемент.ИдентификаторЭлемента = "ЕСХН";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ЗемельныйНалог";
	Элемент.ИдентификаторЭлемента = "ЗемельныйНалог";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НалогНаИмущество";
	Элемент.ИдентификаторЭлемента = "НалогНаИмущество";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НалогНаПрибыль_РегиональныйБюджет";
	Элемент.ИдентификаторЭлемента = "НалогНаПрибыль_РегиональныйБюджет";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НалогНаПрибыль_ФедеральныйБюджет";
	Элемент.ИдентификаторЭлемента = "НалогНаПрибыль_ФедеральныйБюджет";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НалогНаПрибыль_НалоговыйАгент";
	Элемент.ИдентификаторЭлемента = "НалогНаПрибыль_НалоговыйАгент";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДС";
	Элемент.ИдентификаторЭлемента = "НДС";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДС_ВвозимыеТовары";
	Элемент.ИдентификаторЭлемента = "НДС_ВвозимыеТовары";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДС_НалоговыйАгент";
	Элемент.ИдентификаторЭлемента = "НДС_НалоговыйАгент";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛ";
	Элемент.ИдентификаторЭлемента = "НДФЛ";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛ_ИП";
	Элемент.ИдентификаторЭлемента = "НДФЛ_ИП";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПрочиеНалогиИСборы";
	Элемент.ИдентификаторЭлемента = "ПрочиеНалогиИСборы";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТорговыйСбор";
	Элемент.ИдентификаторЭлемента = "ТорговыйСбор";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТранспортныйНалог";
	Элемент.ИдентификаторЭлемента = "ТранспортныйНалог";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УСН_Доходы";
	Элемент.ИдентификаторЭлемента = "УСН_Доходы";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УСН_ДоходыМинусРасходы";
	Элемент.ИдентификаторЭлемента = "УСН_ДоходыМинусРасходы";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "УСН_МинимальныйНалог";
	Элемент.ИдентификаторЭлемента = "УСН_МинимальныйНалог";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПФРПоСуммарномуТарифу";
	Элемент.ИдентификаторЭлемента = "ПФРПоСуммарномуТарифу";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПФРСтраховаяЧасть";
	Элемент.ИдентификаторЭлемента = "ПФРСтраховаяЧасть";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПФРНакопительнаяЧасть";
	Элемент.ИдентификаторЭлемента = "ПФРНакопительнаяЧасть";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПФРДополнительныйТарифЛЭ";
	Элемент.ИдентификаторЭлемента = "ПФРДополнительныйТарифЛЭ";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПФРДополнительныйТарифШахтеры";
	Элемент.ИдентификаторЭлемента = "ПФРДополнительныйТарифШахтеры";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах";
	Элемент.ИдентификаторЭлемента = "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах";
	Элемент.ИдентификаторЭлемента = "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПФРСПревышения";
	Элемент.ИдентификаторЭлемента = "ПФРСПревышения";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ФФОМС";
	Элемент.ИдентификаторЭлемента = "ФФОМС";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ТФОМС";
	Элемент.ИдентификаторЭлемента = "ТФОМС";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ФСС";
	Элемент.ИдентификаторЭлемента = "ФСС";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ФССНС";
	Элемент.ИдентификаторЭлемента = "ФССНС";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛДоходыКонтрагентов";
	Элемент.ИдентификаторЭлемента = "НДФЛДоходыКонтрагентов";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛДивиденды";
	Элемент.ИдентификаторЭлемента = "НДФЛДивиденды";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛДивидендыСотрудникам";
	Элемент.ИдентификаторЭлемента = "НДФЛДивидендыСотрудникам";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛДоначисленныйПоРезультатамПроверки";
	Элемент.ИдентификаторЭлемента = "НДФЛДоначисленныйПоРезультатамПроверки";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛПередачаЗадолженностиВНалоговыйОрган";
	Элемент.ИдентификаторЭлемента = "НДФЛПередачаЗадолженностиВНалоговыйОрган";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛПрочиеРасчетыСПерсоналом";
	Элемент.ИдентификаторЭлемента = "НДФЛПрочиеРасчетыСПерсоналом";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛСПревышения";
	Элемент.ИдентификаторЭлемента = "НДФЛСПревышения";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДФЛДивидендыСПревышения";
	Элемент.ИдентификаторЭлемента = "НДФЛДивидендыСПревышения";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ПФРДоПредельнойВеличины";
	Элемент.ИдентификаторЭлемента = "ПФРДоПредельнойВеличины";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДС_ОбратноеОбложение";
	Элемент.ИдентификаторЭлемента = "НДС_ОбратноеОбложение";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "АУСН";
	Элемент.ИдентификаторЭлемента = "АУСН";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "СтраховыеВзносыЕдиныйТариф";
	Элемент.ИдентификаторЭлемента = "СтраховыеВзносыЕдиныйТариф";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОПСИностранныхРаботников";
	Элемент.ИдентификаторЭлемента = "ОПСИностранныхРаботников";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОМСИностранныхРаботников";
	Элемент.ИдентификаторЭлемента = "ОМСИностранныхРаботников";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ОССИностранныхРаботников";
	Элемент.ИдентификаторЭлемента = "ОССИностранныхРаботников";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", 
		НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);
	//-- Локализация
	

КонецПроцедуры

// Наименование предопределенного элемента.
// 
// Параметры:
//  ИмяПредопределенного - Строка - Имя предопределенного элемента
// 
// Возвращаемое значение:
//  Строка - Наименование предопределенного элемента
Функция НаименованиеПредопределенногоЭлемента(ИмяПредопределенного) Экспорт
	//++ Локализация
	Если ИмяПредопределенного = "ЕдиныйНалоговыйПлатеж" Тогда
		Возврат "ru = 'Единый налоговый платеж'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ЕНВД" Тогда
		Возврат "ru = 'ЕНВД'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ЕСХН" Тогда
		Возврат "ru = 'ЕСХН'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ЗемельныйНалог" Тогда
		Возврат "ru = 'Земельный налог'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НалогНаИмущество" Тогда
		Возврат "ru = 'Налог на имущество организаций'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НалогНаПрибыль_РегиональныйБюджет" Тогда
		Возврат "ru = 'Налог на прибыль, региональный бюджет'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НалогНаПрибыль_ФедеральныйБюджет" Тогда
		Возврат "ru = 'Налог на прибыль, федеральный бюджет'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НалогНаПрибыль_НалоговыйАгент" Тогда
		Возврат "ru = 'Налог на прибыль при исполнении обязанностей налогового агента'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДС" Тогда
		Возврат "ru = 'НДС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДС_ВвозимыеТовары" Тогда
		Возврат "ru = 'НДС при импорте товаров из ЕАЭС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДС_НалоговыйАгент" Тогда
		Возврат "ru = 'НДС при исполнении обязанностей налогового агента'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛ" Тогда
		Возврат "ru = 'НДФЛ при исполнении обязанностей налогового агента'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛ_ИП" Тогда
		Возврат "ru = 'НДФЛ индивидуального предпринимателя '"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПрочиеНалогиИСборы" Тогда
		Возврат "ru = 'Прочие налоги и сборы'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ТорговыйСбор" Тогда
		Возврат "ru = 'Торговый сбор'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ТранспортныйНалог" Тогда
		Возврат "ru = 'Транспортный налог организаций'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "УСН_Доходы" Тогда
		Возврат "ru = 'Налог при УСН (доходы)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "УСН_ДоходыМинусРасходы" Тогда
		Возврат "ru = 'Налог при УСН (доходы минус расходы)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "УСН_МинимальныйНалог" Тогда
		Возврат "ru = 'Минимальный налог УСН'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРПоСуммарномуТарифу" Тогда
		Возврат "ru = 'ПФР - по суммарному тарифу с 1 января 2014 года'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРСтраховаяЧасть" Тогда
		Возврат "ru = 'Страховые взносы в ПФР'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРНакопительнаяЧасть" Тогда
		Возврат "ru = 'Страховые взносы в ПФР, накопительная часть (до 2014 г.)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРДополнительныйТарифЛЭ" Тогда
		Возврат "ru = 'Взносы на выплату доплат к пенсии членам летных экипажей'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРДополнительныйТарифШахтеры" Тогда
		Возврат "ru = 'Взносы на выплату доплат к пенсии шахтерам'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах" Тогда
		Возврат "ru = 'Взносы в ПФР (дополнительный тариф за занятых на работах с вредными условиями труда)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах" Тогда
		Возврат "ru = 'Взносы в ПФР (дополнительный тариф за занятых на работах с тяжелыми условиями труда)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРСПревышения" Тогда
		Возврат "ru = 'ПФР - с базы сверх предельной величины, с 1 января 2016 года'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ФФОМС" Тогда
		Возврат "ru = 'Страховые взносы в ФФОМС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ТФОМС" Тогда
		Возврат "ru = 'ТФОМС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ФСС" Тогда
		Возврат "ru = 'Страховые взносы в ФСС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ФССНС" Тогда
		Возврат "ru = 'Страховые взносы от несчастных случаев'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДоходыКонтрагентов" Тогда
		Возврат "ru = 'НДФЛ с доходов контрагентов'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДивиденды" Тогда
		Возврат "ru = 'НДФЛ с дивидендов'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДивидендыСотрудникам" Тогда
		Возврат "ru = 'НДФЛ с дивидендов работникам'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДоначисленныйПоРезультатамПроверки" Тогда
		Возврат "ru = 'НДФЛ, доначисленный по результатам проверки'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛПередачаЗадолженностиВНалоговыйОрган" Тогда
		Возврат "ru = 'НДФЛ передача задолженности в налоговый орган'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛПрочиеРасчетыСПерсоналом" Тогда
		Возврат "ru = 'НДФЛ с доходов по прочим операциям с персоналом'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛСПревышения" Тогда
		Возврат "ru = 'НДФЛ с доходов свыше предельной величины, исчисленный налоговым агентом'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДивидендыСПревышения" Тогда
		Возврат "ru = 'НДФЛ с дивидендов свыше предельной величины'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРДоПредельнойВеличины" Тогда
		Возврат "ru = 'ПФР - с базы до предельной величины'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДС_ОбратноеОбложение" Тогда
		Возврат "ru = 'НДС налогового агента по отдельным видам товаров'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "АУСН" Тогда
		Возврат "ru = 'Налог при АУСН'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "СтраховыеВзносыЕдиныйТариф" Тогда
		Возврат "ru = 'Страховые взносы по единому тарифу'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ОПСИностранныхРаботников" Тогда
		Возврат "ru = 'Взносы на пенсионное страхование иностранных работников'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ОМСИностранныхРаботников" Тогда
		Возврат "ru = 'Взносы на медицинское страхование иностранных работников'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ОССИностранныхРаботников" Тогда
		Возврат "ru = 'Взносы на социальное страхование иностранных работников'"; // @НСтр-1
	КонецЕсли;
	//-- Локализация
	
КонецФункции

//++ Локализация

// Возвращает список предопределенных видов НДФЛ налогового агента.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыНалоговВзносов - НДФЛ налогового агента
//
Функция НДФЛНалоговогоАгента() Экспорт
	
	ВидовНалогов = Новый Массив;
	
	// НДФЛ налогового агента
	ВидовНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛ);
	ВидовНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛДивиденды);
	ВидовНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛДивидендыСотрудникам);
	ВидовНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛДоначисленныйПоРезультатамПроверки);
	ВидовНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛДоходыКонтрагентов);
	ВидовНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛПередачаЗадолженностиВНалоговыйОрган);
	ВидовНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛПрочиеРасчетыСПерсоналом);
	ВидовНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛСПревышения);
	ВидовНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛДивидендыСПревышения);
	
	Возврат ВидовНалогов;
	
КонецФункции

// Возвращает список предопределенных видов НДФЛ индивидуального предпринимателя.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыНалоговВзносов - НДФЛ предпринимателя
//
Функция НДФЛПредпринимателя() Экспорт
	
	ВидыНалогов = Новый Массив;
	
	// НДФЛ предпринимателя
	ВидыНалогов.Добавить(Справочники.ВидыНалоговВзносов.НДФЛ_ИП);
	
	Возврат ВидыНалогов;

КонецФункции

// Возвращает КБК с учетом вида налогового обязательства
//
// Параметры:
//   ТипНалога                  - СправочникСсылка.ВидыНалоговВзносов
//   ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//   Период                     - Дата
//
// Возвращаемое значение:
//   Строка
//
Функция КБКПоВидуНалоговогоОбязательства(ТипНалога, Знач ВидНалоговогоОбязательства = Неопределено, Знач Период = Неопределено) Экспорт
	
	КБК = КБКПоТипуНалога(ТипНалога);
	Если ПустаяСтрока(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	//++ НЕ УТ
	
	Если Не ЗначениеЗаполнено(ВидНалоговогоОбязательства) Тогда
		Если ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КБК) <> ПлатежиВБюджетКлиентСервер.ПустойКодПодвидаДоходов() Тогда
			Возврат КБК; // Сохраняем заданный код подвида доходов
		Иначе
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	КодГлавногоАдминистратора    = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(КБК);
	КодВидаДоходов               = ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КБК);
	КодПодвидаДоходов            = КодПодвидаДоходов(КБК, ТипНалога, ВидНалоговогоОбязательства, Период);
	КодОперацииСектораУправления = ПлатежиВБюджетКлиентСервер.КодОперацииСектораУправления(КБК);
	
	КБК = КодГлавногоАдминистратора + КодВидаДоходов + КодПодвидаДоходов + КодОперацииСектораУправления;
	
	//-- НЕ УТ
	
	Возврат КБК;
	
КонецФункции

// Возвращает вид налога по КБК, если определить не удалось возвращает ПрочиеНалогиИСборы
//
// Параметры:
//   КодБК - Строка
// 
// Возвращаемое значение:
//   СправочникСсылка.ВидыНалоговВзносов
//
Функция ТипНалогаПоКБК(Знач КодБК) Экспорт
	
	ВидНалога = Справочники.ВидыНалоговВзносов.ПрочиеНалогиИСборы;
	Если НЕ ПлатежиВБюджетКлиентСервер.КБКЗадан(КодБК) Тогда
		Возврат ВидНалога;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНалоговВзносов.Ссылка
	|ИЗ
	|	Справочник.ВидыНалоговВзносов КАК ВидыНалоговВзносов
	|ГДЕ
	|	ВидыНалоговВзносов.Предопределенный";
	Выборка = Запрос.Выполнить().Выбрать();
	ШаблонСравнения = ШаблонСравненияКБК(КодБК);
	Пока Выборка.Следующий() Цикл
		Если ШаблонСравнения = ШаблонСравненияКБК(КБКПоТипуНалога(Выборка.Ссылка)) Тогда
			ВидНалога = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидНалога;
	
КонецФункции

//-- Локализация

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ФормаВыбораПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
//++ Локализация

//++ НЕ УТ

	ПараметрыОтбора = Форма.Параметры.Отбор;
	
	Период = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбора, "Период");
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	ВидОперации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбора, "ВидОперации", "");
	
	Если ВидОперации = "Начисление" Тогда
		
		НедоступныеВидыНалогов = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НедоступныеВидыНалогов,
			ЕдиныйНалоговыйСчет.ВидыНалоговУплачиваемыеОтдельно(Период));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НедоступныеВидыНалогов,
			ЕдиныйНалоговыйСчет.ВидыНалоговУстаревшие(Период), Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
			"Ссылка", НедоступныеВидыНалогов, ВидСравненияКомпоновкиДанных.НеВСписке, , Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ИначеЕсли ВидОперации = "Уведомление" Тогда
		
		НедоступныеВидыНалогов = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НедоступныеВидыНалогов,
			ЕдиныйНалоговыйСчет.ВидыНалоговУплачиваемыеОтдельно(Период));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НедоступныеВидыНалогов,
			ЕдиныйНалоговыйСчет.ВидыНалоговУплачиваемыеБезУведомлений(), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НедоступныеВидыНалогов,
			ЕдиныйНалоговыйСчет.ВидыНалоговУстаревшие(Период), Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
			"Ссылка", НедоступныеВидыНалогов, ВидСравненияКомпоновкиДанных.НеВСписке, , Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ИначеЕсли ВидОперации = "Оплата" Тогда
		
		ДоступныеВидыНалогов = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеВидыНалогов,
			ЕдиныйНалоговыйСчет.ВидыНалоговУплачиваемыеОтдельно(Период));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список,
			"Ссылка", ДоступныеВидыНалогов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
//-- НЕ УТ

//-- Локализация

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация
Функция КБКПоТипуНалога(ТипНалога)
	
	КодБК = "";
	Если ТипНалога = Справочники.ВидыНалоговВзносов.ЕдиныйНалоговыйПлатеж Тогда
		КодБК = "18201061201010000510";	// ЕдиныйНалоговыйПлатеж
	
	// ++ НЕ УТ
	
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ЕНВД Тогда
		КодБК = "18210502010020000110";	// ЕНВД
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ЕСХН Тогда
		КодБК = "18210503010010000110";	// ЕСХН
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НалогНаИмущество Тогда
		КодБК = "18210602010020000110";	// НалогНаИмущество
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НалогНаПрибыль_РегиональныйБюджет Тогда
		КодБК = "18210101012020000110";	// НалогНаПрибыль_РегиональныйБюджет
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НалогНаПрибыль_ФедеральныйБюджет Тогда
		КодБК = "18210101011010000110";	// НалогНаПрибыль_ФедеральныйБюджет
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НДС Тогда
		КодБК = "18210301000010000110";	// НДС
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НДС_НалоговыйАгент Тогда
		КодБК = "18210301000010000110";	// НДС
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НДС_ВвозимыеТовары Тогда
		КодБК = "18210401000010000110";	// НДС_ВвозимыеТовары
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛ Тогда
		КодБК = "18210102010010000110";	// НДФЛ
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛСПревышения Тогда
		КодБК = "18210102080010000110";	// НДФЛ_ДоходыСвышеПредельнойВеличины, НДФЛ_ИП_НалоговаяБазаСвышеПредельнойВеличины
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛДивиденды Тогда
		КодБК = "18210102130010000110";	// НДФЛ_Дивиденды
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛДивидендыСПревышения Тогда
		КодБК = "18210102140010000110";	// НДФЛ_Дивиденды_ДоходыСвышеПредельнойВеличины
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛ_ИП Тогда
		КодБК = "18210102010010000110";	// НДФЛ
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ПФРДополнительныйТарифЛЭ Тогда
		КодБК = "18210208000060000160";	// ДополнительныеВзносы_ПФР_ЛетныеЭкипажи
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ПФРДополнительныйТарифШахтеры Тогда
		КодБК = "18210209000060000160";	// ДополнительныеВзносы_ПФР_Шахтеры
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах Тогда
		КодБК = "18210204010010000160";	// ДополнительныеВзносы_ПФР_ВредныеУсловия
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах Тогда
		КодБК = "18210204020010000160";	// ДополнительныеВзносы_ПФР_ТяжелыеУсловия
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ПФРНакопительнаяЧасть Тогда
		КодБК = "18210202020060000160";	// СтраховыеВзносы_ПФР_НакопительнаяЧасть
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ПФРСтраховаяЧасть Тогда
		КодБК = "18210214010060000160";	// СтраховыеВзносы_ПФР_СтраховаяЧасть
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ТорговыйСбор Тогда
		КодБК = "18210505010020000110";	// ТорговыйСбор
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ТранспортныйНалог Тогда
		КодБК = "18210604011020000110";	// ТранспортныйНалог
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.УСН_Доходы Тогда
		КодБК = "18210501011010000110";	// УСН_Доходы
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.УСН_ДоходыМинусРасходы Тогда
		КодБК = "18210501021010000110";	// УСН_ДоходыМинусРасходы
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.УСН_МинимальныйНалог Тогда
		КодБК = "18210501050010000110";	// УСН_МинимальныйНалог
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ФСС Тогда
		КодБК = "18210214020060000160";	// СтраховыеВзносы_ФСС
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ФССНС Тогда
		КодБК = "79710212000060000160";	// СтраховыеВзносы_ФСС_НСиПЗ
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ФФОМС Тогда
		КодБК = "18210214030080000160";	// СтраховыеВзносы_ФФОМС
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.СтраховыеВзносыЕдиныйТариф Тогда
		КодБК = "18210201000010000160";	// СтраховыеВзносыЕдиныйТариф
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ОПСИностранныхРаботников Тогда
		КодБК = "18210215010060000160";	// СтраховыеВзносы_ОПС_ИностранныеРаботники
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ОМСИностранныхРаботников Тогда
		КодБК = "18210215030080000160";	// СтраховыеВзносы_ОМС_ИностранныеРаботники
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ОССИностранныхРаботников Тогда
		КодБК = "18210215020060000160";	// СтраховыеВзносы_ОСС_ИностранныеРаботники

	//-- НЕ УТ
	
	КонецЕсли;
	
	Возврат КодБК;
	
КонецФункции

//++ НЕ УТ

Функция КодПодвидаДоходов(КБК, ТипНалога, ВидНалоговогоОбязательства, Знач Период)
	
	ЭтоНалог    = ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ЭтоПени     = Перечисления.ВидыПлатежейВГосБюджет.ЭтоПени(ВидНалоговогоОбязательства);
	ЭтоПроценты = Перечисления.ВидыПлатежейВГосБюджет.ЭтоПроценты(ВидНалоговогоОбязательства);
	ЭтоШтраф    = Перечисления.ВидыПлатежейВГосБюджет.ЭтоШтраф(ВидНалоговогоОбязательства);
	
	ЭтоВзносыСвышеПредела = ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
	
	ЭтоТаможенныйПлатеж = ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяТаможеннымиОрганами(КБК);
	КодПодвидаДоходаПоУмолчанию = "0000";
	ТекущийКодПодвидаДохода = ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КБК);
	ЭтоОсобыйКодПодвидаДохода = СтрНачинаетсяС(ТекущийКодПодвидаДохода, "0")
		И Не СтрЗаканчиваетсяНа(ТекущийКодПодвидаДохода, "00");
	
	СоответствиеСтраховыхДо2023 = СоответствиеКБКСтраховыхВзносов2022ГодаВ2023Году();
	КБКПриведенный = ПлатежиВБюджетКлиентСервер.ШаблонКБК(КБК);
	ВидСтраховогоВзносаДо2023 = СоответствиеСтраховыхДо2023[КБКПриведенный];
	ЭтоСтарыйСтраховойВзносДо2023 = ЗначениеЗаполнено(ВидСтраховогоВзносаДо2023);
	
	Если ТипНалога = Справочники.ВидыНалоговВзносов.ФФОМС Тогда
		
		Если ПлатежиВБюджетКлиентСервер.ДействуетФедеральныйЗакон263ФЗ(Период) // дата платежа больше 2023 года
			И Не ЭтоСтарыйСтраховойВзносДо2023 Тогда
			КодПодвидаДоходов = "1001";
		Иначе
			КодПодвидаДоходов = "1013";
			Если ЭтоПени Тогда
				КодПодвидаДоходов = "2013";
			ИначеЕсли ЭтоПроценты Тогда
				КодПодвидаДоходов = "2213";
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "3013";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.СтраховыеВзносыЕдиныйТариф Тогда
		
		// Пени и проценты по этим фиксированным страховым не предусмотрены
		Если ЭтоШтраф Тогда
			КодПодвидаДоходов = "3";
		Иначе
			КодПодвидаДоходов = "1";
		КонецЕсли;
		
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ОПСИностранныхРаботников
		Или ТипНалога = Справочники.ВидыНалоговВзносов.ОМСИностранныхРаботников
		Или ТипНалога = Справочники.ВидыНалоговВзносов.ОССИностранныхРаботников Тогда
		
		// Пени и проценты по этим фиксированным страховым не предусмотрены
		Если ЭтоШтраф Тогда
			КодПодвидаДоходов = "3";
		Иначе
			КодПодвидаДоходов = "1";
		КонецЕсли;
		
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах
		ИЛИ ТипНалога = Справочники.ВидыНалоговВзносов.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах Тогда
		
		КодПодвидаДоходаДоИзменения = ПлатежиВБюджетКлиентСервер.КодПодвидаДоходов(КБК);
		НеЗависитОтСпецОценки = СтрЗаканчиваетсяНа(КодПодвидаДоходаДоИзменения, "10");
		Если ЭтоНалог Тогда
			КодПодвидаДоходов = "102";
		ИначеЕсли ЭтоПени Тогда
			Если НеЗависитОтСпецОценки Тогда
				КодПодвидаДоходов = "211";
			Иначе
				КодПодвидаДоходов = "210";
			КонецЕсли;
		ИначеЕсли ЭтоПроценты Тогда
			Если НеЗависитОтСпецОценки Тогда
				КодПодвидаДоходов = "221";
			Иначе
				КодПодвидаДоходов = "220";
			КонецЕсли;
		ИначеЕсли ЭтоШтраф Тогда
			Если НеЗависитОтСпецОценки Тогда
				КодПодвидаДоходов = "301";
			Иначе
				КодПодвидаДоходов = "300";
			КонецЕсли
		Иначе
			КодПодвидаДоходов = "101";
		КонецЕсли;
		
	ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ПФРДополнительныйТарифЛЭ
		ИЛИ ТипНалога = Справочники.ВидыНалоговВзносов.ПФРДополнительныйТарифШахтеры Тогда
		
		Если ЭтоНалог Тогда
			КодПодвидаДоходов = "1";
		ИначеЕсли ЭтоПени Или ЭтоПроценты Тогда
			КодПодвидаДоходов = "21";
		ИначеЕсли ЭтоШтраф Тогда
			КодПодвидаДоходов = "3";
		КонецЕсли;
		
	ИначеЕсли ЭтоТаможенныйПлатеж И ЭтоАвансовыйПлатежТаможня(КБК) Тогда
		
		КодПодвидаДоходов = "1000";
		
	ИначеЕсли ПлатежиВБюджетКлиентСервер.ЭтоЕдиныйНалоговыйПлатеж(КБК) Тогда
		
		КодПодвидаДоходов = КодПодвидаДоходаПоУмолчанию;
		
	ИначеЕсли (ЭтоПениПоВременнойНетрудоспособности(КБК) Или ЭтоШтрафыПоПлатежу(КБК))
		И ТекущийКодПодвидаДохода = КодПодвидаДоходаПоУмолчанию Тогда
		
		КодПодвидаДоходов = ТекущийКодПодвидаДохода;
		
	ИначеЕсли ЭтоПроцентыПоПлатежу(КБК) Тогда
		
		КодПодвидаДоходов = "2";
		
	Иначе
		
		КодПодвидаДоходов = "1";
		Если ТипНалога = Справочники.ВидыНалоговВзносов.ПФРСтраховаяЧасть Тогда
			
			Если ПлатежиВБюджетКлиентСервер.ДействуетФедеральныйЗакон263ФЗ(Период) // дата платежа больше 2023 года
				И Не ЭтоСтарыйСтраховойВзносДо2023 Тогда
				КодПодвидаДоходов = "1001";
			Иначе
				Если ЭтоНалог Тогда
					КодПодвидаДоходов = "101";
				ИначеЕсли ЭтоПени Тогда
					КодПодвидаДоходов = "211";
				ИначеЕсли ЭтоПроценты Тогда
					КодПодвидаДоходов = "221";
				ИначеЕсли ЭтоШтраф Тогда
					КодПодвидаДоходов = "301";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипНалога = Справочники.ВидыНалоговВзносов.ФСС Тогда
			
			Если ПлатежиВБюджетКлиентСервер.ДействуетФедеральныйЗакон263ФЗ(Период) Тогда
				Если ТекущийКодПодвидаДохода = "1101" Тогда
					КодПодвидаДоходов = ТекущийКодПодвидаДохода;
				Иначе
					КодПодвидаДоходов = "1001";
				КонецЕсли;
			Иначе
				Если ЭтоНалог Тогда
					КодПодвидаДоходов = "101";
				ИначеЕсли ЭтоПени Тогда
					КодПодвидаДоходов = "211";
				ИначеЕсли ЭтоПроценты Тогда
					КодПодвидаДоходов = "221";
				ИначеЕсли ЭтоШтраф Тогда
					КодПодвидаДоходов = "301";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЭтоОсобыйКодПодвидаДохода Тогда
			
			КодПодвидаДоходов = ТекущийКодПодвидаДохода;
			
		Иначе
			
			Если ЭтоВзносыСвышеПредела Тогда
				КодПодвидаДоходов = "12";
			ИначеЕсли ЭтоПени ИЛИ ЭтоПроценты Тогда
				КодПодвидаДоходов = "2";
				Если ПлатежиВБюджетКлиентСервер.ПениПроцентыРаздельно(КБК, Период) Тогда
					КодПодвидаДоходов = ?(ЭтоПени, "21", "22");
				КонецЕсли;
			ИначеЕсли ЭтоШтраф Тогда
				КодПодвидаДоходов = "3";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодПодвидаДоходов) Тогда
		КодПодвидаДоходов = "1"; // по умолчанию
	КонецЕсли;
	
	РасположениеЭлемента = ПлатежиВБюджетКлиентСервер.РасположениеЭлементаКБК("КодПодвидаДоходов");
	Для Счетчик = СтрДлина(КодПодвидаДоходов) + 1 По РасположениеЭлемента.Длина Цикл
		КодПодвидаДоходов = КодПодвидаДоходов + "0";
	КонецЦикла;
	
	Возврат КодПодвидаДоходов;
	
КонецФункции

Функция ЭтоАвансовыйПлатежТаможня(КБК)
	
	Возврат ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КБК) = "1100900001";
	
КонецФункции

Функция ЭтоПениПоВременнойНетрудоспособности(КБК)
	
	Возврат ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КБК) = "1161902001";
	
КонецФункции

Функция ЭтоПроцентыПоПлатежу(КБК)
	
	Возврат ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КБК) = "1162000001";
	
КонецФункции

Функция ЭтоШтрафыПоПлатежу(КБК)
	
	Возврат ПлатежиВБюджетКлиентСервер.КодВидаДоходов(КБК) = "1162102006";
	
КонецФункции

Функция СоответствиеКБКСтраховыхВзносов2022ГодаВ2023Году()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("18210202010060000160", Справочники.ВидыНалоговВзносов.ПФРСтраховаяЧасть);
	Результат.Вставить("18210202101080000160", Справочники.ВидыНалоговВзносов.ФФОМС);
	Результат.Вставить("18210202090070000160", Справочники.ВидыНалоговВзносов.ФСС);
	Результат.Вставить("18210201020010000160", Справочники.ВидыНалоговВзносов.ФСС);
	Результат.Вставить("39310202050070000160", Справочники.ВидыНалоговВзносов.ФССНС);
	
	Возврат Результат;
	
КонецФункции

//-- НЕ УТ

Функция ШаблонСравненияКБК(КБК)
	
	ГраницыАдминистратораКБК  = ПлатежиВБюджетКлиентСервер.РасположениеЭлементаКБК("КодГлавногоАдминистратора");
	ГраницыПеременнойЧастиКБК = ПлатежиВБюджетКлиентСервер.РасположениеЭлементаКБК("КодПодвидаДоходов");
	ШаблонКБК = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", ГраницыАдминистратораКБК.Длина)
		+ Сред(КБК, ГраницыАдминистратораКБК.Начало + ГраницыАдминистратораКБК.Длина);
	ШаблонКБК = Лев(ШаблонКБК, ГраницыПеременнойЧастиКБК.Начало - 1)
		+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", ГраницыПеременнойЧастиКБК.Длина)
		+ Сред(ШаблонКБК, ГраницыПеременнойЧастиКБК.Начало + ГраницыПеременнойЧастиКБК.Длина);
	
	Возврат ШаблонКБК;
	
КонецФункции
//-- Локализация

#КонецОбласти
