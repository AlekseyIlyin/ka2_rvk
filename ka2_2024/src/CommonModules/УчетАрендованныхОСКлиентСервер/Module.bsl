////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Аренда ОС".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ОпределениеСвойствЗависимыхРеквизитовОбъекта

// Выполняет настройку элементов формы, связанных с арендой.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - содержит:
// 		* Элементы - ВсеЭлементыФормы - содержит:
// 			** РассчитатьСтавкуИлиСтоимость - КомандаФормы -
// 			** ПодвалИнформация - ДекорацияФормы -
// 	ВспомогательныеРеквизиты - Структура -
// 	ИзмененныеРеквизиты - Строка - 
Процедура НастроитьЗависимыеЭлементыФормы_Аренда(Знач Форма, Знач ВспомогательныеРеквизиты, Знач ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Объект = Форма.Объект; // см. ДокументОбъект.ЗаключениеДоговораАренды 
	Элементы = Форма.Элементы;
	СлужебныеПараметрыФормы = Форма.СлужебныеПараметрыФормы;
	РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
	
	ПоФактическойСтоимости = 
		(РеквизитыДоговора.СпособОпределенияСтоимостиАктивов 
			= ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.Вручную"));
			
	БезДисконтирования = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов 
		= ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоСуммеДоговора"));
	
	УчетЗаБалансом = (РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель"));
	
	ИзменениеУсловий = ЭтоИзменениеУсловийАренды(Объект);
	
	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда

		Если НЕ СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				И НЕ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВводОстатковВзаиморасчетовПоАренде") Тогда
					
			ПараметрыВыбора = Новый Массив;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг")));
			Элементы.Договор.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаРасчетыПоДоговору
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
	
		Элементы.СуммаОбеспечительногоПлатежаВалюта.Видимость = Элементы.СуммаОбеспечительногоПлатежа.Видимость;
		Элементы.СуммаУслугПоАрендеВалюта.Видимость = Элементы.СуммаУслугПоАренде.Видимость;
		Элементы.СуммаВыкупаПредметовАрендыВалюта.Видимость = Элементы.СуммаВыкупаПредметовАренды.Видимость;
		
		Элементы.СуммаНДСВыкупаПредметовАрендыВалюта.Видимость = 
			Элементы.СуммаНДСВыкупаПредметовАренды.Видимость
			И СлужебныеПараметрыФормы.ИспользоватьУчетНДС;
		
		Элементы.СуммаНДСВалюта.Видимость = 
			Элементы.СуммаНДС.Видимость
			И СлужебныеПараметрыФормы.ИспользоватьУчетНДС;
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.ОплатаУслугиПоАрендеВалюта.Видимость = Элементы.ОплатаУслугиПоАренде.Видимость;
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьНачислений")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.НачислениеУслугиПоАрендеВалюта.Видимость = Элементы.НачислениеУслугиПоАренде.Видимость;
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.День") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежедневная сумма оплаты'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Неделя") Тогда
			ТекстПодсказки = НСтр("ru = 'Еженедельная сумма оплаты'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежемесячная сумма оплаты'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Квартал") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежеквартальная сумма оплаты'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Полугодие") Тогда
			ТекстПодсказки = НСтр("ru = 'Полугодичная сумма оплаты'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Год") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежегодная сумма оплаты'");
		Иначе
			ТекстПодсказки = "";
		КонецЕсли;
		
		Элементы.ОплатаУслугиПоАренде.Подсказка = ТекстПодсказки;
	
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьНачислений")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.День") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежедневная сумма начислений'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Неделя") Тогда
			ТекстПодсказки = НСтр("ru = 'Еженедельная сумма начислений'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежемесячная сумма начислений'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Квартал") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежеквартальная сумма начислений'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Полугодие") Тогда
			ТекстПодсказки = НСтр("ru = 'Полугодичная сумма начислений'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Год") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежегодная сумма начислений'");
		Иначе
			ТекстПодсказки = "";
		КонецЕсли;
		
		Элементы.НачислениеУслугиПоАренде.Подсказка = ТекстПодсказки;
	
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаОбеспечительногоПлатежа")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаУслугПоАренде")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаВыкупаПредметовАренды")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаНДС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаНДСВыкупаПредметовАренды")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СтавкаНДС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаПервогоОбеспечительногоПлатежа")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаПервогоПлатежа")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаАренды")
		
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьНачислений")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОплатаУслугиПоАренде")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НачислениеУслугиПоАренде")
		
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикОплатУслуг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикНачисленияУслуг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикНачисленияПроцентов")
		
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВерсияДокумента24")
		ИЛИ ОбновитьВсе Тогда

		СтрокиЗаголовка = Новый Массив;
		
		Если ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И (СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом) Тогда
			
			РезультатПроверки = ПроверитьСоответствиеГрафиков(
				Объект, 
				РеквизитыДоговора,
				СлужебныеПараметрыФормы.НачалоУчетаАрендыПоФСБУ25_2018, 
				Форма.ВалютаДокументаПредставление);
				
		Иначе
			РезультатПроверки = Неопределено;
		КонецЕсли;
		
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаОбеспечительногоПлатежаИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаОбеспечительногоПлатежа, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаУслугПоАрендеИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаУслугПоАренде, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаВыкупаПредметовАрендыИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаВыкупаПредметовАренды, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ДатаПервогоОбеспечительногоПлатежаИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ДатаПервогоПлатежаИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ДатаПервогоПлатежа, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ДатаВыкупаИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ДатаВыкупа, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаНДСИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаНДС, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаНДСВыкупаПредметовАрендыИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаНДСВыкупаПредметовАренды, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ПериодичностьОплатИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ПериодичностьОплат, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ОплатаУслугиПоАрендеИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ОплатаУслугиПоАренде, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ПериодичностьНачисленийИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ПериодичностьНачислений, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.НачислениеУслугиПоАрендеИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.НачислениеУслугиПоАренде, Неопределено));
			
		Если ИзменениеУсловий Тогда
			УстановитьВидимостьИдикатораПроверкиГрафика(
				Элементы.ОткрытьГрафикОплатИндикатор,
				?(РезультатПроверки <> Неопределено, РезультатПроверки.РасхожденияГрафиков, Неопределено));
				
			УстановитьВидимостьИдикатораПроверкиГрафика(
				Элементы.ОткрытьГрафикНачисленийИндикатор,
				?(РезультатПроверки <> Неопределено, РезультатПроверки.РасхожденияГрафиков, Неопределено));
		КонецЕсли;
			
		Если РезультатПроверки <> Неопределено
			И РезультатПроверки.ЕстьРасхождения Тогда
			
			СтрокиЗаголовка.Добавить(НСтр("ru = 'График оплат и начислений не соответствует расчетам по договору'"));
			
			Если Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
				И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
				И НЕ Форма.ТолькоПросмотр Тогда
			
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график оплат и начислений'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				СтрокиЗаголовка.Добавить(" / ");
				
			ИначеЕсли Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
				И НЕ Форма.ТолькоПросмотр Тогда
					
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график оплат'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				СтрокиЗаголовка.Добавить(" / ");

			ИначеЕсли Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
				И НЕ Форма.ТолькоПросмотр Тогда
				
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график начислений'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				СтрокиЗаголовка.Добавить(" / ");
			
			КонецЕсли;
			
			Если НЕ Форма.ТолькоПросмотр Тогда
				Если СтрокиЗаголовка.Количество() = 1 Тогда
					СтрокиЗаголовка.Добавить(Символы.ПС);
				КонецЕсли;
				
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Перезаполнить расчеты по договору'"),,,, "#ЗаполнитьРасчетыПоГрафику");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
			КонецЕсли;

			Элементы.ПодвалИнформация.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		
		ИначеЕсли Форма.СрокАрендыИзменен Тогда

			СтрокиЗаголовка.Добавить(НСтр("ru = 'Срок аренды изменен'"));

			СтрокиЗаголовка.Добавить(Символы.ПС);
			ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график оплат и начислений'"),,,, "#ЗаполнитьГрафик");
			СтрокиЗаголовка.Добавить(ТекстНадписи);

			Элементы.ПодвалИнформация.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		
		ИначеЕсли Объект.ГрафикОплатУслуг.Количество() = 0
			И Объект.ГрафикНачисленияУслуг.Количество() = 0
			И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете Тогда			
				
			СтрокиЗаголовка.Добавить(НСтр("ru = 'График оплат и начислений не заполнен'"));
			
			Если Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
				И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
				И НЕ Форма.ТолькоПросмотр Тогда
				
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график оплат и начислений'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
			
			ИначеЕсли Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
				И НЕ Форма.ТолькоПросмотр Тогда
				
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график оплат'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				
			ИначеЕсли Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
				И НЕ Форма.ТолькоПросмотр Тогда
				
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график начислений'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				
			КонецЕсли;
			
			Элементы.ПодвалИнформация.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);

		КонецЕсли;
		
		Если ВспомогательныеРеквизиты.ВерсияДокумента24 Тогда
			
			Если СтрокиЗаголовка.Количество() <> 0 Тогда
				СтрокиЗаголовка.Добавить(Символы.ПС);
			КонецЕсли;
			СтрокиЗаголовка.Добавить(НСтр("ru = 'Документ создан в версии 2.4'"));
			Если НЕ Форма.ТолькоПросмотр Тогда
				СтрокиЗаголовка.Добавить(" (");
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'изменить на версию 2.5'"),,,, "#ИзменитьВерсиюДокумента");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				СтрокиЗаголовка.Добавить(")");
			КонецЕсли;
			
		КонецЕсли;
			
		Если СтрокиЗаголовка.Количество() <> 0 Тогда
			Элементы.ПодвалИндикатор.Видимость = Истина;
			Элементы.ПодвалИнформация.Видимость = Истина;
			Элементы.ПодвалИнформация.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		Иначе
			Элементы.ПодвалИндикатор.Видимость = Ложь;
			Элементы.ПодвалИнформация.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("СрокЛет")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СрокМес")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СрокДней")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаАренды")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда

		Форма.СрокАренды = ВнеоборотныеАктивыКлиентСервер.ПредставлениеСрокаФорматированнойСтрокой(
								Объект.СрокЛет, 
								Объект.СрокМес, 
								Объект.СрокДней, 
								Объект.ДатаНачалаАренды, 
								Форма.ТолькоПросмотр);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаДисконтирование
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ БезДисконтирования
			И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете;
			
		Элементы.ПриведеннаяСтоимость.Видимость = ЗначениеСвойства;
		Элементы.ПриведеннаяСтоимостьВалюта.Видимость = ЗначениеСвойства;
		Элементы.ОткрытьГрафикНачисленияПроцентов.Видимость = ЗначениеСвойства;
		Элементы.РассчитатьСтавкуИлиСтоимость.Видимость = ЗначениеСвойства;
		
		//
		Элементы.СуммаПроцентовВалюта.Видимость = Элементы.СуммаПроцентов.Видимость;
		Элементы.ДекорацияПроцентнаяСтавка.Видимость = Элементы.ПроцентнаяСтавка.Видимость;
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикНачисленияПроцентовВведенВручную")
		ИЛИ ОбновитьВсе Тогда

		Если СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 Тогда
			
			Если ПоФактическойСтоимости Тогда
				Элементы.РассчитатьСтавкуИлиСтоимость.Заголовок =
					?(Объект.ГрафикНачисленияПроцентовВведенВручную,
						НСтр("ru = 'Рассчитать ставку'"),
						НСтр("ru = 'Рассчитать ставку и проценты'"));
			Иначе
				Элементы.РассчитатьСтавкуИлиСтоимость.Заголовок =
					?(Объект.ГрафикНачисленияПроцентовВведенВручную,
						НСтр("ru = 'Рассчитать стоимость'"),
						НСтр("ru = 'Рассчитать стоимость и проценты'"));
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Прочее

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
			
		Форма.СтоимостьРассчитываетсяАвтоматически = 
			СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
			ИЛИ РеквизитыДоговора.СпособОпределенияСтоимостиАктивов =
				ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоСуммеДоговора");
	
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// 
// Параметры:
//  Объект - СправочникОбъект.ДоговорыАренды, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - содержит свойства:
// 			* ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ДоговорыАренды(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ЭтоДоговорЛизинга = (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг"));
	
	ОтразитьУслугиВРасходах =
		Объект.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель")
		ИЛИ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ Объект.УчитыватьПредметыАрендыВРеглУчете
		ИЛИ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ Объект.УчитыватьПредметыАрендыВУпрУчете;

	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаОкончанияДействия")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ТипДоговора", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;

	#КонецОбласти
	
	#Область СтраницаПараметрыДоговора
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаОкончанияДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТипДоговора")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Балансодержатель")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ЭтоДоговорЛизинга
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
				ИЛИ Объект.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор"));
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьВыкупПредметовАренды", 
			"ЕстьВыкупПредметовАренды", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ТипДоговора")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"Балансодержатель", 
			"ВидимостьЭлемента", 
			ЭтоДоговорЛизинга, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТипДоговора")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства =
			НЕ ЭтоДоговорЛизинга
			И ВспомогательныеРеквизиты.РеглУчетВНАВедетсяНезависимо;
			 
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ВариантОтраженияВУчетеВсе", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ВариантОтраженияВУчетеРегл", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ВариантОтраженияВУчетеУпр", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаОкончанияДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТипДоговора")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЕстьВыкупПредметовАренды")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Балансодержатель")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			Объект.ЕстьВыкупПредметовАренды
			И ЭтоДоговорЛизинга
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
				ИЛИ Объект.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор"));
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьАвансированиеВыкупнойСтоимости", 
			"ЕстьАвансированиеВыкупнойСтоимости", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НалогообложениеНДС")
		Или ОбновитьВсе Тогда 
		
		ЗначениеСвойства = Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС");
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВидАгентскогоДоговора", 
			"ВидАгентскогоДоговора", 
			"ОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	#КонецОбласти
	
	#Область СтраницаУчетнаяИнформация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Статус")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Балансодержатель")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("УчитыватьПредметыАрендыВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("УчитыватьПредметыАрендыВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЭтоНалоговыйАгент = Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС");
		ЗначениеСвойства = ОтразитьУслугиВРасходах Или ЭтоНалоговыйАгент;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУслуги", 
			"СтатьяРасходовУслуги", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУслуги", 
			"СтатьяРасходовУслуги", 
			"ОтметкаНезаполненного", 
			ЭтоНалоговыйАгент, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУслуги", 
			"АналитикаРасходовУслуги", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеУслуги", 
			"ПодразделениеУслуги", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеУслуги", 
			"ПодразделениеУслуги", 
			"ОтметкаНезаполненного", 
			ЭтоНалоговыйАгент, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаОкончанияДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Статус")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовПроценты", 
			"СтатьяРасходовПроценты", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовПроценты", 
			"АналитикаРасходовПроценты", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеПроценты", 
			"ПодразделениеПроценты", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")
				ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Закрыт"));
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовПроценты", 
			"СтатьяРасходовПроценты", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ВыкупАрендованныхОС, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - содержит свойства:
// 			* ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 			
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ВыкупАрендованныхОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ПараметрыВыкупаОС = ПараметрыВыкупаОС(Объект, ВспомогательныеРеквизиты);
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	УчетАрендованныхОСКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ВыкупАрендованныхОС(
		Объект, ВспомогательныеРеквизиты, ПараметрыВыкупаОС, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
// 	Объект - ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатковВзаиморасчетовПоАренде(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	УчетЗаБалансом = 
		РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель")
		И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;

	ПоФактическойСтоимости = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.Вручную"));
	БезДисконтирования = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоСуммеДоговора"));

	#Область СтраницаОстаткиРасчетов
	
	#Область АрендныеОбязательства
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АрендныеОбязательстваОстаток", 
			"АрендныеОбязательстваОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АрендныеОбязательстваОстатокРегл", 
			"АрендныеОбязательстваОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АрендныеОбязательстваОстатокУпр", 
			"АрендныеОбязательстваОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область УслугиПоАренде
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			(ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УслугаПоАрендеОстаток", 
			"УслугаПоАрендеОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УслугаПоАрендеОстатокРегл", 
			"УслугаПоАрендеОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			(ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УслугаПоАрендеОстатокУпр", 
			"УслугаПоАрендеОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#Область ВыкупнаяСтоимость
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВыкупнаяСтоимостьОстаток", 
			"ВыкупнаяСтоимостьОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВыкупнаяСтоимостьОстатокРегл", 
			"ВыкупнаяСтоимостьОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВыкупнаяСтоимостьОстатокУпр", 
			"ВыкупнаяСтоимостьОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	#КонецОбласти

	#Область НДС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НДСОстаток", 
			"НДСОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НДСОстатокРегл", 
			"НДСОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НДСОстатокУпр", 
			"НДСОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#Область Проценты
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ БезДисконтирования
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентыОстаток", 
			"ПроцентыОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентыОстатокРегл", 
			"ПроцентыОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ БезДисконтирования
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентыОстатокУпр", 
			"ПроцентыОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаДисконтирование
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ БезДисконтирования
			И НЕ (РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
					И ПоФактическойСтоимости);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Стоимость", 
			"Стоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	#КонецОбласти
	
	ДополнитьЗначенияСвойствЗависимыхРеквизитов_Аренда(
		Объект, 
		ВспомогательныеРеквизиты, 
		СтруктураИзмененныхРеквизитов, 
		ПараметрыРеквизитовОбъекта);
	
	УчетАрендованныхОСКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ВводОстатковВзаиморасчетовПоАренде(
		Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ВводОстатковИнвестицииВАренду, ДанныеФормыСтруктура -
//  ВспомогательныеРеквизиты - Структура -  
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатковИнвестицииВАренду(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;

	ПараметрыРеквизитовОбъекта = Новый Массив;

	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ВозвратОСИзАренды2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - содержит свойства:
// 			* ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ВозвратОСИзАренды(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		 
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"РасчетыМеждуОрганизациямиАрендатор", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
		
		//
		ЗначениеСвойства = ВспомогательныеРеквизиты.РеглУчетВНАВедетсяНезависимо
			И НЕ ВспомогательныеРеквизиты.ВозвратИзФинаренды;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НачислениеАмортизацииБУ", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("РасчетыМеждуОрганизациямиАрендатор")
		ИЛИ ОбновитьВсе Тогда
		
		АрендаторОрганизация = Объект.РасчетыМеждуОрганизациямиАрендатор;
		
		ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
		ТипАрендатора = ?(АрендаторОрганизация, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Арендатор", 
			"Арендатор", 
			"ОграничениеТипа", 
			ТипАрендатора, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Договор", 
			"Договор", 
			"ВидимостьЭлемента", 
			Не АрендаторОрганизация,
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ВозвратИзФинаренды;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислениеАмортизацииУУ", 
			"НачислениеАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислениеАмортизацииБУ", 
			"НачислениеАмортизацииБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
				
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			НЕ ВспомогательныеРеквизиты.ВозвратИзФинаренды
			И Объект.НачислениеАмортизацииУУ = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует");
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СпособОтраженияРасходовУУ", 
			"СпособОтраженияРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеУУ", 
			"ПодразделениеУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиУУ", 
			"НаправлениеДеятельностиУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ", 
			"ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииБУ")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			НЕ ВспомогательныеРеквизиты.ВозвратИзФинаренды
			И Объект.НачислениеАмортизацииБУ = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует");
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовБУ", 
			"СтатьяРасходовБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовБУ", 
			"АналитикаРасходовБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СпособОтраженияРасходовБУ", 
			"СпособОтраженияРасходовБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеБУ", 
			"ПодразделениеБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиБУ", 
			"НаправлениеДеятельностиБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ", 
			"ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = ВспомогательныеРеквизиты.ВозвратИзФинаренды;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСГруппаНаправленияВыбытия", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			Объект.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеБУ", 
			"ПодразделениеБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиБУ", 
			"НаправлениеДеятельностиБУ", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			Объект.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеУУ", 
			"ПодразделениеУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиУУ", 
			"НаправлениеДеятельностиУУ", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ЗаключениеДоговораАренды(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	УчетЗаБалансом = 
		РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель")
		И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;

	СозданДляПерехода = (КонецДня(Объект.Дата) + 1 = ВспомогательныеРеквизиты.НачалоУчетаАрендыПоФСБУ25_2018);
	
	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			НЕ ВспомогательныеРеквизиты.ИспользуетсяУправлениеВНА_2_4
			И УчетЗаБалансом;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СчетУчета", 
			"СчетУчета", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУправлениеВНА_2_4
			И УчетЗаБалансом;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета", 
			"ГруппаФинансовогоУчета", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = СозданДляПерехода;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяДоходов", 
			"СтатьяДоходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаДоходов", 
			"АналитикаДоходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходов", 
			"СтатьяРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходов", 
			"АналитикаРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	#КонецОбласти
	
	#Область СтраницаРасчетыПоДоговору
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НалогообложениеНДС")
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			ЗначениеЗаполнено(Объект.НалогообложениеНДС)
			И УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС().Найти(Объект.НалогообложениеНДС) <> Неопределено;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтавкаНДС", 
			"СтавкаНДС", 
			"ТолькоПросмотрБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаОсновныеСредства
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
			ИЛИ НЕ УчетЗаБалансом;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтатьяРасходов", 
			"ОССтатьяРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПодразделение", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПодразделениеЗабалансом", 
			"Видимость", 
			НЕ ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = СозданДляПерехода;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ОстаточнаяСтоимость", 
			"ОСОстаточнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	ДополнитьЗначенияСвойствЗависимыхРеквизитов_Аренда(
		Объект, 
		ВспомогательныеРеквизиты, 
		СтруктураИзмененныхРеквизитов, 
		ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
// 	Объект - ДокументОбъект.ИзменениеУсловийДоговораАренды - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ИзменениеУсловийДоговораАренды(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	ПараметрыУчетаПредметовАренды = ПараметрыУчетаПредметовАренды(
		ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018, РеквизитыДоговора);
	
	#Область СтраницаОсновное
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (КонецДня(Объект.Дата) = КонецГода(Объект.Дата)
				И Объект.УточнениеПериода <> 0);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УточнениеПериода", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
		
	#Область СтраницаОС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыУчетаПредметовАренды.ЕстьУчетУУ;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СрокИспользованияУУ", 
			"ОССрокИспользованияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	#КонецОбласти
	
	#Область СтраницаРасчетыПоДоговору

	Если СтруктураИзмененныхРеквизитов.Свойство("НалогообложениеНДС") 
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ЗначениеЗаполнено(РеквизитыДоговора.НалогообложениеНДС)
			И УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС().Найти(РеквизитыДоговора.НалогообложениеНДС) <> Неопределено
			И РеквизитыДоговора.ТребуетсяОформлениеЗаявленийОВвозе;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтавкаНДС", 
			"СтавкаНДС", 
			"ТолькоПросмотрБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	#КонецОбласти
	
	ДополнитьЗначенияСвойствЗависимыхРеквизитов_Аренда(
		Объект, 
		ВспомогательныеРеквизиты, 
		СтруктураИзмененныхРеквизитов, 
		ПараметрыРеквизитовОбъекта);
	
	УчетАрендованныхОСКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ИзменениеУсловийДоговораАренды(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ИзменениеУсловийПередачиВАренду, ДанныеФормыСтруктура -
//  ВспомогательныеРеквизиты - Структура -  
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ИзменениеУсловийПередачиВАренду(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;

	ПараметрыРеквизитовОбъекта = Новый Массив;

	Если СтруктураИзмененныхРеквизитов.Свойство("Договор") ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Субаренда");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументОснование", 
			"ДокументОснование", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ЗначениеСвойства = ЗначениеСвойства ИЛИ НЕ ЗначениеЗаполнено(Объект.Договор);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ДокументНаОсновании", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ПередачаОСВАренду2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - содержит свойства:
// 			* ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПередачаОСВАренду(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		 
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"РасчетыМеждуОрганизациямиАрендатор", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
		
		ЗначениеСвойства = ВспомогательныеРеквизиты.РеглУчетВНАВедетсяНезависимо
			И НЕ ВспомогательныеРеквизиты.ПередачаВАрендуПоФСБУ25;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислениеАмортизацииБУ", 
			"НачислениеАмортизацииБУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииБУ")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			Объект.НачислениеАмортизацииБУ = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует")
			И НЕ ВспомогательныеРеквизиты.ПередачаВАрендуПоФСБУ25;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СпособОтраженияРасходовБУ", 
			"СпособОтраженияРасходовБУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СтатьяРасходовБУ", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"АналитикаРасходовБУ", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеБУ", 
			"ПодразделениеБУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиБУ", 
			"НаправлениеДеятельностиБУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ", 
			"ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
				
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			Объект.НачислениеАмортизацииУУ = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует")
			И НЕ ВспомогательныеРеквизиты.ПередачаВАрендуПоФСБУ25;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СпособОтраженияРасходовУУ", 
			"СпособОтраженияРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеУУ", 
			"ПодразделениеУУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиУУ", 
			"НаправлениеДеятельностиУУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ", 
			"ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
				
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("РасчетыМеждуОрганизациямиАрендатор") 
		ИЛИ ОбновитьВсе Тогда
		
		АрендаторОрганизация = 
			Объект.РасчетыМеждуОрганизациямиАрендатор
			И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
		ТипАрендатора = ?(АрендаторОрганизация, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Арендатор", 
			"Арендатор", 
			"ОграничениеТипа", 
			ТипАрендатора, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеАрендатора", 
			"ПодразделениеАрендатора", 
			"Видимость", 
			АрендаторОрганизация, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МОЛАрендатора", 
			"МОЛАрендатора", 
			"Видимость", 
			АрендаторОрганизация, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АдресМестонахождения", 
			"АдресМестонахождения", 
			"Видимость", 
			АрендаторОрганизация, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ПередачаВАрендуПоФСБУ25;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ЗалоговаяСтоимость", 
			"ОСЗалоговаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислениеАмортизацииУУ", 
			"НачислениеАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикОплатУслуг", 
			"", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикНачисленияУслуг", 
			"", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		//
		ЗначениеСвойства = ВспомогательныеРеквизиты.ПередачаВАрендуПоФСБУ25;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СтатьяРасходов", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"АналитикаРасходов", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяДоходов", 
			"СтатьяДоходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаДоходов", 
			"АналитикаДоходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаАвансовыхПлатежей", 
			"СуммаАвансовыхПлатежей", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ЗаполнитьСуммуАвансовыхПлатежей", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СправедливаяСтоимостьРегл", 
			"ОССправедливаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СправедливаяСтоимостьУпр", 
			"ОССправедливаяСтоимостьУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.НГЛСРегл", 
			"ОСНГЛСРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.НГЛСУпр", 
			"ОСНГЛСУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.АрендныеПлатежи", 
			"ОСАрендныеПлатежи", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтавкаДоходности", 
			"ОССтавкаДоходности", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ГрафикСсылка", 
			"ОСГрафикСсылка", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСЗаполнитьГрафики", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСРассчитатьСтавкуДоходности", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССправкаРасчетНачисленияПроцентов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ЗначениеСвойства = 
			Не ВспомогательныеРеквизиты.ДоговорВВалютеРеглУчета
			И ВспомогательныеРеквизиты.ПередачаВАрендуПоФСБУ25;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СуммаАвансовыхПлатежейРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ОССправедливаяСтоимостьРегл")
		Или СтруктураИзмененныхРеквизитов.Свойство("ОССправедливаяСтоимостьУпр")
		Или ОбновитьВсе Тогда
			
		УказанаСправедливаяСтоимостьРегл = 
			Объект.ОС.Итог("СправедливаяСтоимостьРегл") > 0 
			Или Объект.ОС.Итог("СправедливаяСтоимостьУпр") > 0;
			
		ЗначениеСвойства = УказанаСправедливаяСтоимостьРегл;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяДоходов", 
			"СтатьяДоходов", 
			"Доступность", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СтатьяРасходов", 
			"Доступность", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"АналитикаДоходов", 
			"Доступность", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"АналитикаРасходов", 
			"Доступность", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяДоходов", 
			"", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			Не ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ПередачаВАрендуПоФСБУ25
				И УказанаСправедливаяСтоимостьРегл
			ИЛИ НЕ ВспомогательныеРеквизиты.ПередачаВАрендуПоФСБУ25
				И Объект.НачислениеАмортизацииБУ = ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовБУ", 
			"", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			Объект.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеБУ", 
			"ПодразделениеБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиБУ", 
			"НаправлениеДеятельностиБУ", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			Объект.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеУУ", 
			"ПодразделениеУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиУУ", 
			"НаправлениеДеятельностиУУ", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
// 	Объект - ДокументОбъект.ПоступлениеАрендованныхОС, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта
Функция ЗначенияСвойствЗависимыхРеквизитов_ПоступлениеАрендованныхОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СчетУчета", 
			"СчетУчета", 
			"Видимость", 
			НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетВНА_2_4, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета", 
			"ГруппаФинансовогоУчета", 
			"Видимость", 
			ВспомогательныеРеквизиты.ИспользуетсяУчетВНА_2_4, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МОЛ", 
			"МОЛ", 
			"Видимость", 
			ВспомогательныеРеквизиты.ИспользуетсяУчетВНА_2_4, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Договор", 
			"Договор", 
			"Видимость", 
			ВспомогательныеРеквизиты.ИспользуетсяУчетВНА_2_4, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
// 	Объект - ДокументОбъект.ПоступлениеУслугПоАренде - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПоступлениеУслугПоАренде(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель")
			Или РеквизитыДоговора.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.Подразделение", 
			"НачисленияПодразделение", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.СтатьяРасходов", 
			"НачисленияСтатьяРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.АналитикаРасходов", 
			"НачисленияАналитикаРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.АналитикаАктивовПассивов", 
			"НачисленияАналитикаАктивовПассивов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.НаправлениеДеятельности", 
			"НачисленияНаправлениеДеятельности", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
			
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

Функция ПараметрыВыкупаОС(Объект, ВспомогательныеРеквизиты)

	ПараметрыВыкупаОС = Новый Структура;
	УчетАрендованныхОСКлиентСерверЛокализация.ДополнитьПараметрыВыкупаОС(Объект, ВспомогательныеРеквизиты, ПараметрыВыкупаОС);
	
	Возврат ПараметрыВыкупаОС;
	
КонецФункции

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_Аренда(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта)

	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;

	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;

	ИзменениеУсловий = ЭтоИзменениеУсловийАренды(Объект);
	
	УчетЗаБалансом = 
		РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель")
		И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
	
	ПоФактическойСтоимости = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = 
			ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.Вручную"));
	
	Дисконтирование = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = 
			ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.Дисконтирование"));
			
	БезДисконтирования = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = 
		ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоСуммеДоговора"));
	
	ПутьКРеквизитамСтоимостиОС = 
		ВспомогательныеРеквизиты.ИмяТабличнойЧастиОС 
		+ ?(ЗначениеЗаполнено(ВспомогательныеРеквизиты.ИмяТабличнойЧастиОС), ".", "");
		
	ПутьКЭлементамСтоимостиОС = ВспомогательныеРеквизиты.ИмяТабличнойЧастиОС;
	
	#Область СтраницаРасчетыПоДоговору
	Если СтруктураИзмененныхРеквизитов.Свойство("ВерсияДокумента24") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			НЕ ВспомогательныеРеквизиты.ВерсияДокумента24
			И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаНачалаАренды", 
			"", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоПлатежа", 
			"ДатаПервогоПлатежа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаВыкупа", 
			"ДатаВыкупа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикОплатУслуг", 
			"", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикНачисленияУслуг", 
			"", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ЗначениеСвойства = 
			НЕ ВспомогательныеРеквизиты.ВерсияДокумента24
			И НЕ ИзменениеУсловий
			И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаУслугПоАренде", 
			"СуммаУслугПоАренде", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаОбеспечительногоПлатежа", 
			"СуммаОбеспечительногоПлатежа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоОбеспечительногоПлатежа", 
			"ДатаПервогоОбеспечительногоПлатежа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаУслугПоАренде", 
			"СуммаУслугПоАренде", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоПлатежа", 
			"ДатаПервогоПлатежа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаНДС", 
			"СуммаНДС", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтавкаНДС", 
			"СтавкаНДС", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПериодичностьОплат", 
			"ПериодичностьОплат", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПериодичностьНачислений", 
			"ПериодичностьНачислений", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И РеквизитыДоговора.ЕстьОбеспечительныйПлатеж
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаОбеспечительногоПлатежа", 
			"СуммаОбеспечительногоПлатежа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоОбеспечительногоПлатежа", 
			"ДатаПервогоОбеспечительногоПлатежа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаВыкупаПредметовАренды", 
			"СуммаВыкупаПредметовАренды", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаНДСВыкупаПредметовАренды", 
			"СуммаНДСВыкупаПредметовАренды", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаВыкупа", 
			"ДатаВыкупа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВерсияДокумента24") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете 
			И НЕ ВспомогательныеРеквизиты.ВерсияДокумента24
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтавкаНДС", 
			"СтавкаНДС", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикОплатУслуг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")		
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.ПустаяСсылка")
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОплатаУслугиПоАренде", 
			"ОплатаУслугиПоАренде", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьНачислений")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикНачисленияУслуг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")		
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.ПустаяСсылка")
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислениеУслугиПоАренде", 
			"НачислениеУслугиПоАренде", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("СтавкаНДС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаНДС", 
			"СуммаНДС", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ВспомогательныеРеквизиты.НезначащаяСтавкаНДС, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаНДСВыкупаПредметовАренды", 
			"СуммаНДСВыкупаПредметовАренды", 
			"ТолькоПросмотр", 
			ВспомогательныеРеквизиты.НезначащаяСтавкаНДС, 
			ПараметрыРеквизитовОбъекта);
		
		Если НЕ ВспомогательныеРеквизиты.НезначащаяСтавкаНДС Тогда
			ЗначениеСвойства = НЕ ИзменениеУсловий;
			ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
				"СуммаНДС", 
				"СуммаНДС", 
				"АвтоОтметкаНезаполненного", 
				ЗначениеСвойства, 
				ПараметрыРеквизитовОбъекта);
		КонецЕсли;
			
	КонецЕсли;

	#КонецОбласти
	
	#Область СтраницаОсновныеСредства

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ БезДисконтирования
			И РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
			И ПоФактическойСтоимости;
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			ПутьКРеквизитамСтоимостиОС + "НегарантированнаяСтоимость", 
			ПутьКЭлементамСтоимостиОС + "НегарантированнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И (РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
				ИЛИ (БезДисконтирования И ЗначениеЗаполнено(ПутьКРеквизитамСтоимостиОС)));
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			ПутьКРеквизитамСтоимостиОС + "СправедливаяСтоимость", 
			ПутьКЭлементамСтоимостиОС + "СправедливаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И (РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
				ИЛИ БезДисконтирования);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			ПутьКРеквизитамСтоимостиОС + "Стоимость", 
			ПутьКЭлементамСтоимостиОС + "Стоимость", 
			"ТолькоПросмотрБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			ПутьКРеквизитамСтоимостиОС + "Стоимость", 
			ПутьКЭлементамСтоимостиОС + "Стоимость", 
			"АвтоОтметкаНезаполненного", 
			НЕ ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	#КонецОбласти
	
	#Область СтраницаДисконтирование
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ БезДисконтирования;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаПроцентов", 
			"СуммаПроцентов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентнаяСтавка", 
			"ПроцентнаяСтавка", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПриведеннаяСтоимость", 
			"ПриведеннаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ПоФактическойСтоимости
			И НЕ БезДисконтирования
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентнаяСтавка", 
			"ПроцентнаяСтавка", 
			"ТолькоПросмотрБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ГрафикОплатИНачислений
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И РеквизитыДоговора.ЕстьОбеспечительныйПлатеж;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикОплатУслуг.ОбеспечительныйПлатеж", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикНачисленияУслуг.ОбеспечительныйПлатеж", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикОплатУслуг.ВыкупнаяСтоимость", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И НЕ БезДисконтирования
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикНачисленияПроцентов", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;

	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Определяет в каких учетах учитываются предметы аренды.
// 
// Параметры:
// 	ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	РеквизитыДоговора - Структура - содержит свойства:
// 		* Балансодержатель - ПеречислениеСсылка.БалансодержательПредметовАренды -
// 		* УчитыватьПредметыАрендыВУпрУчете - Булево -
// 		* УчитыватьПредметыАрендыВРеглУчете - Булево -
// 		
// Возвращаемое значение:
// 	Структура - Описание:
// 		* ЕстьУчетУУ - Булево - Истина, если предметы аренды учитываются в упр. учете
// 		* ЕстьУчетБУ - Булево - Истина, если предметы аренды учитываются в бух. учете
// 		* ЕстьУчетНУ - Булево - Истина, если предметы аренды учитываются в налоговом учете
Функция ПараметрыУчетаПредметовАренды(ИспользуетсяУчетАрендыПоФСБУ25_2018, РеквизитыДоговора) Экспорт

	ПараметрыУчетаПредметовАренды = Новый Структура;
	
	ЗначениеПараметра = 
		НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор")
		ИЛИ ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.УчитыватьПредметыАрендыВУпрУчете = Истина;
	ПараметрыУчетаПредметовАренды.Вставить("ЕстьУчетУУ", ЗначениеПараметра);
	
	ЗначениеПараметра = 
		НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор")
		ИЛИ ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.УчитыватьПредметыАрендыВРеглУчете = Истина;
	ПараметрыУчетаПредметовАренды.Вставить("ЕстьУчетБУ", ЗначениеПараметра);
	
	ЗначениеПараметра = 
		РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор")
		И РеквизитыДоговора.УчитыватьПредметыАрендыВРеглУчете = Истина;
	ПараметрыУчетаПредметовАренды.Вставить("ЕстьУчетНУ", ЗначениеПараметра);
	
	Возврат ПараметрыУчетаПредметовАренды;
	
КонецФункции

// Формирует сводные данные по графикам.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
// 	РеквизитыДоговора - Структура - 
// 	
// Возвращаемое значение:
// 	Структура - содержит свойства:
// 		* ГрафикОплатУслуг - см. ПараметрыГрафикаОплатУслуг
// 		* ГрафикНачисленияУслуг - см. ПараметрыГрафикаНачисленияУслуг
// 		* ГрафикиЗаполнены - Булево -
Функция ДанныеГрафиков(Объект, РеквизитыДоговора) Экспорт
	
	ИзменениеУсловий = ЭтоИзменениеУсловийАренды(Объект);
	ДатаНачала = ?(ИзменениеУсловий, НачалоДня(Объект.Дата), Объект.ДатаНачалаАренды);
	
	ПараметрыГрафикаОплатУслуг = ПараметрыГрафикаОплатУслуг(Объект.ГрафикОплатУслуг, 
															ДатаНачала);
	
	ПараметрыГрафикаНачисленияУслуг = ПараметрыГрафикаНачисленияУслуг(Объект.ГрафикНачисленияУслуг, 
																		Объект.СуммаНДСВыкупаПредметовАренды,
																		ДатаНачала);
	
	ГрафикиЗаполнены = 
		Объект.ГрафикОплатУслуг.Количество() <> 0
		ИЛИ Объект.ГрафикНачисленияУслуг.Количество() <> 0;
		
	ДанныеГрафиков = Новый Структура;
	ДанныеГрафиков.Вставить("ГрафикОплатУслуг", ПараметрыГрафикаОплатУслуг);
	ДанныеГрафиков.Вставить("ГрафикНачисленияУслуг", ПараметрыГрафикаНачисленияУслуг);
	ДанныеГрафиков.Вставить("ГрафикиЗаполнены", ГрафикиЗаполнены);
		
	Возврат ДанныеГрафиков;
	
КонецФункции

// Определяет параметры графика оплат услуг.
// 
// Параметры:
//  ГрафикОплатУслуг - ДокументТабличнаяЧасть.ЗаключениеДоговораАренды.ГрафикОплатУслуг, ДокументТабличнаяЧасть.ИзменениеУсловийДоговораАренды.ГрафикОплатУслуг - График оплат услуг
//  ДатаНачала - Дата - Дата изменения аренды.
// 
// Возвращаемое значение:
//  Структура - Параметры графика оплат услуг:
// 		* ИтогоУслугаПоАренде - Число -
// 		* ИтогоОбеспечительныйПлатеж - Число -
// 		* ИтогоВыкупнаяСтоимость - Число -
// 		* ИтогоСуммаНДСВыкупаПредметовАренды - Число -
// 		* ДатаПервогоОбеспечительногоПлатежа - Дата -
// 		* ДатаПервогоПлатежа - Дата -
// 		* ОплатаУслугиПоАренде - Число -
// 		* Периодичность - Неопределено -
Функция ПараметрыГрафикаОплатУслуг(ГрафикОплатУслуг, ДатаНачала) Экспорт

	ПараметрыГрафика = Новый Структура;
	ПараметрыГрафика.Вставить("ИтогоУслугаПоАренде", 0);
	ПараметрыГрафика.Вставить("ИтогоОбеспечительныйПлатеж", 0);
	ПараметрыГрафика.Вставить("ИтогоВыкупнаяСтоимость", 0);
	ПараметрыГрафика.Вставить("ИтогоСуммаНДСВыкупаПредметовАренды", 0);
	ПараметрыГрафика.Вставить("ДатаПервогоОбеспечительногоПлатежа", '000101010000');
	ПараметрыГрафика.Вставить("ДатаПервогоПлатежа", '000101010000');
	ПараметрыГрафика.Вставить("ОплатаУслугиПоАренде", 0);
	ПараметрыГрафика.Вставить("ОплатаВыкупнойСтоимости", 0);
	ПараметрыГрафика.Вставить("Периодичность", Неопределено);
	ПараметрыГрафика.Вставить("ОбеспечительныйПлатежПослеИзменений", 0);
	ПараметрыГрафика.Вставить("УслугаПоАрендеПослеИзменений", 0);
	ПараметрыГрафика.Вставить("ВыкупнаяСтоимостьПослеИзменений", 0);
	ПараметрыГрафика.Вставить("СуммаНДСВыкупаПредметовАрендыПослеИзменений", 0);

	ПредыдущаяДата = Неопределено;
	
	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл
		
		// ДатаПервогоОбеспечительногоПлатежа
		Если ЗначениеЗаполнено(СтрокаГрафика.Дата)
			И СтрокаГрафика.ОбеспечительныйПлатеж <> 0 Тогда
				
			ПараметрыГрафика.ДатаПервогоОбеспечительногоПлатежа = 
				?(ПараметрыГрафика.ДатаПервогоОбеспечительногоПлатежа <> '000101010000', 
					Мин(СтрокаГрафика.Дата, ПараметрыГрафика.ДатаПервогоОбеспечительногоПлатежа), 
					СтрокаГрафика.Дата);
					
		КонецЕсли;
		
		// Итоговые суммы
		ПараметрыГрафика.ИтогоУслугаПоАренде = ПараметрыГрафика.ИтогоУслугаПоАренде + СтрокаГрафика.УслугаПоАренде;
		ПараметрыГрафика.ИтогоОбеспечительныйПлатеж = ПараметрыГрафика.ИтогоОбеспечительныйПлатеж + СтрокаГрафика.ОбеспечительныйПлатеж;
		ПараметрыГрафика.ИтогоВыкупнаяСтоимость = ПараметрыГрафика.ИтогоВыкупнаяСтоимость + СтрокаГрафика.ВыкупнаяСтоимость;
		ПараметрыГрафика.ИтогоСуммаНДСВыкупаПредметовАренды = ПараметрыГрафика.ИтогоСуммаНДСВыкупаПредметовАренды + СтрокаГрафика.ВыкупнаяСтоимостьНДС;
		
		Если СтрокаГрафика.Дата >= ДатаНачала Тогда
			
			ПараметрыГрафика.ОбеспечительныйПлатежПослеИзменений = ПараметрыГрафика.ОбеспечительныйПлатежПослеИзменений
				+ СтрокаГрафика.ОбеспечительныйПлатеж;
			ПараметрыГрафика.УслугаПоАрендеПослеИзменений = ПараметрыГрафика.УслугаПоАрендеПослеИзменений + СтрокаГрафика.УслугаПоАренде;
			ПараметрыГрафика.ВыкупнаяСтоимостьПослеИзменений = ПараметрыГрафика.ВыкупнаяСтоимостьПослеИзменений + СтрокаГрафика.ВыкупнаяСтоимость;
			ПараметрыГрафика.СуммаНДСВыкупаПредметовАрендыПослеИзменений = ПараметрыГрафика.СуммаНДСВыкупаПредметовАрендыПослеИзменений + СтрокаГрафика.ВыкупнаяСтоимостьНДС;
			
			// ДатаПервогоПлатежа
			Если ЗначениеЗаполнено(СтрокаГрафика.Дата)
				И СтрокаГрафика.УслугаПоАренде <> 0 Тогда

				ПараметрыГрафика.ДатаПервогоПлатежа = 
				?(ПараметрыГрафика.ДатаПервогоПлатежа <> '000101010000', 
				Мин(СтрокаГрафика.Дата, ПараметрыГрафика.ДатаПервогоПлатежа), 
				СтрокаГрафика.Дата);

			КонецЕсли;

			// Периодическая сумма оплаты суммы услуг
			Если СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> 0
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> Неопределено
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> СтрокаГрафика.УслугаПоАренде Тогда

				ПараметрыГрафика.ОплатаУслугиПоАренде = Неопределено; // Произвольные суммы

			ИначеЕсли СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> Неопределено Тогда

				ПараметрыГрафика.ОплатаУслугиПоАренде = СтрокаГрафика.УслугаПоАренде;		
			КонецЕсли;

			// Периодическая сумма оплаты выкупа
			Если СтрокаГрафика.ВыкупнаяСтоимость <> 0
				И ПараметрыГрафика.ОплатаВыкупнойСтоимости <> 0
				И ПараметрыГрафика.ОплатаВыкупнойСтоимости <> Неопределено
				И ПараметрыГрафика.ОплатаВыкупнойСтоимости <> СтрокаГрафика.ВыкупнаяСтоимость Тогда

				ПараметрыГрафика.ОплатаВыкупнойСтоимости = Неопределено; // Произвольные суммы

			ИначеЕсли СтрокаГрафика.ВыкупнаяСтоимость <> 0
				И ПараметрыГрафика.ОплатаВыкупнойСтоимости <> Неопределено Тогда

				ПараметрыГрафика.ОплатаВыкупнойСтоимости = СтрокаГрафика.ВыкупнаяСтоимость;		
			КонецЕсли;

			// Периодичность
			Если ПараметрыГрафика.ОплатаУслугиПоАренде <> Неопределено
				И СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.Периодичность <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная") Тогда

				Если ПредыдущаяДата <> Неопределено Тогда

					Периодичность = ПериодичностьГрафика(ПредыдущаяДата, СтрокаГрафика.Дата);

					Если ПараметрыГрафика.Периодичность = Неопределено Тогда
						ПараметрыГрафика.Периодичность = Периодичность;
					ИначеЕсли ПараметрыГрафика.Периодичность <> Периодичность Тогда
						ПараметрыГрафика.Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
					КонецЕсли;

				КонецЕсли;

				ПредыдущаяДата = СтрокаГрафика.Дата;

			ИначеЕсли ПараметрыГрафика.ОплатаУслугиПоАренде = Неопределено Тогда

				ПараметрыГрафика.Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");

			КонецЕсли;
			
		КонецЕсли;	

	КонецЦикла;
	
	Возврат ПараметрыГрафика;
	
КонецФункции

// Определяет параметры графика начисления услуг.
// 
// Параметры:
//  ГрафикНачисленияУслуг - ДокументТабличнаяЧасть.ЗаключениеДоговораАренды.ГрафикНачисленияУслуг, ДокументТабличнаяЧасть.ИзменениеУсловийДоговораАренды.ГрафикНачисленияУслуг - График начисления услуг
//  СуммаНДСВыкупаПредметовАренды - Число - 
//  ДатаНачала - Дата - Дата изменения аренды.
// 
// Возвращаемое значение:
//  Структура - Параметры графика оплат услуг:
// 		* ИтогоУслугаПоАренде - Число -
// 		* ИтогоОбеспечительныйПлатеж - Число -
// 		* ИтогоСуммаНДС - Число -
// 		* НачислениеУслугиПоАренде - Число -
// 		* Периодичность - Неопределено -
Функция ПараметрыГрафикаНачисленияУслуг(ГрафикНачисленияУслуг, СуммаНДСВыкупаПредметовАренды, ДатаНачала) Экспорт
	
	ПараметрыГрафика = Новый Структура;
	ПараметрыГрафика.Вставить("ИтогоУслугаПоАренде", 0);
	ПараметрыГрафика.Вставить("ИтогоОбеспечительныйПлатеж", 0);
	ПараметрыГрафика.Вставить("ИтогоСуммаНДС", 0);
	ПараметрыГрафика.Вставить("НачислениеУслугиПоАренде", 0);
	ПараметрыГрафика.Вставить("Периодичность", Неопределено);
	ПараметрыГрафика.Вставить("ОбеспечительныйПлатежПослеИзменений", 0);
	ПараметрыГрафика.Вставить("УслугаПоАрендеПослеИзменений", 0);
	ПараметрыГрафика.Вставить("СуммаНДСПослеИзменений", 0);
	
	ПредыдущаяДата = Неопределено;
	
	Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
		
		ПараметрыГрафика.ИтогоУслугаПоАренде = ПараметрыГрафика.ИтогоУслугаПоАренде + СтрокаГрафика.УслугаПоАренде;
		ПараметрыГрафика.ИтогоОбеспечительныйПлатеж = ПараметрыГрафика.ИтогоОбеспечительныйПлатеж + СтрокаГрафика.ОбеспечительныйПлатеж;
		ПараметрыГрафика.ИтогоСуммаНДС = ПараметрыГрафика.ИтогоСуммаНДС + СтрокаГрафика.УслугаПоАрендеНДС + СтрокаГрафика.ОбеспечительныйПлатежНДС;
			
		Если СтрокаГрафика.Дата >= ДатаНачала Тогда
			
			ПараметрыГрафика.ОбеспечительныйПлатежПослеИзменений = ПараметрыГрафика.ОбеспечительныйПлатежПослеИзменений
				+ СтрокаГрафика.ОбеспечительныйПлатеж;
			ПараметрыГрафика.УслугаПоАрендеПослеИзменений = ПараметрыГрафика.УслугаПоАрендеПослеИзменений + СтрокаГрафика.УслугаПоАренде;
			ПараметрыГрафика.СуммаНДСПослеИзменений = ПараметрыГрафика.СуммаНДСПослеИзменений + СтрокаГрафика.УслугаПоАрендеНДС + СтрокаГрафика.ОбеспечительныйПлатежНДС;
			
			// Периодическая сумма оплаты суммы услуг
			Если СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.НачислениеУслугиПоАренде <> 0
				И ПараметрыГрафика.НачислениеУслугиПоАренде <> Неопределено
				И ПараметрыГрафика.НачислениеУслугиПоАренде <> СтрокаГрафика.УслугаПоАренде Тогда

				ПараметрыГрафика.НачислениеУслугиПоАренде = Неопределено; // Произвольные суммы

			ИначеЕсли СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.НачислениеУслугиПоАренде <> Неопределено Тогда

				ПараметрыГрафика.НачислениеУслугиПоАренде = СтрокаГрафика.УслугаПоАренде;
			КонецЕсли;
			
			// Периодичность
			Если ПараметрыГрафика.НачислениеУслугиПоАренде <> Неопределено
				И СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.Периодичность <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная") Тогда

				Если ПредыдущаяДата <> Неопределено Тогда

					Периодичность = ПериодичностьГрафика(ПредыдущаяДата, СтрокаГрафика.Дата);

					Если ПараметрыГрафика.Периодичность = Неопределено Тогда
						ПараметрыГрафика.Периодичность = Периодичность;
					ИначеЕсли ПараметрыГрафика.Периодичность <> Периодичность Тогда
						ПараметрыГрафика.Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
					КонецЕсли;

				КонецЕсли;

				ПредыдущаяДата = СтрокаГрафика.Дата;

			ИначеЕсли ПараметрыГрафика.НачислениеУслугиПоАренде = Неопределено Тогда

				ПараметрыГрафика.Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");

			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	ПараметрыГрафика.ИтогоСуммаНДС = ПараметрыГрафика.ИтогоСуммаНДС + СуммаНДСВыкупаПредметовАренды;
	ПараметрыГрафика.СуммаНДСПослеИзменений = ПараметрыГрафика.СуммаНДСПослеИзменений + СуммаНДСВыкупаПредметовАренды;
	
	Возврат ПараметрыГрафика;
	
КонецФункции

// Определяет следующую дату.
// 
// Параметры:
// 	ТекущаяДата - Дата - 
// 	ПериодичностьГрафика - ПеречислениеСсылка.ПериодичностьГрафика -
// 	 
// Возвращаемое значение:
// 	Дата - 
Функция СледующаяДатаГрафика(ТекущаяДата, ПериодичностьГрафика) Экспорт
	
	Если ТекущаяДата = НачалоМесяца(ТекущаяДата) Тогда
		ВидДаты = "НачалоМесяца";
	ИначеЕсли КонецДня(ТекущаяДата) = КонецМесяца(ТекущаяДата) Тогда
		ВидДаты = "КонецМесяца";
	Иначе
		ВидДаты = "День";
	КонецЕсли;

	ДатаНачала_День = День(ТекущаяДата);

	Если ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.День") Тогда
		
		СледующаяДата = НачалоДня(ТекущаяДата) + 86400;
		
	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Неделя") Тогда
		
		СледующаяДата = НачалоДня(ТекущаяДата) + 604800;
	
	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц") Тогда
		
		СледующаяДата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), 1);
		
		Если ВидДаты = "КонецМесяца" Тогда
			СледующаяДата = КонецМесяца(СледующаяДата);
		ИначеЕсли ВидДаты = "День" Тогда
			СледующаяДата = СледующаяДата + 86400 * (ДатаНачала_День - 1);
		КонецЕсли;
		
		СледующаяДата = НачалоДня(СледующаяДата);
		
	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Квартал") Тогда
		
		СледующаяДата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), 3);
	
		Если ВидДаты = "КонецМесяца" Тогда
			СледующаяДата = КонецМесяца(СледующаяДата);
		ИначеЕсли ВидДаты = "День" Тогда
			СледующаяДата = СледующаяДата + 86400 * (ДатаНачала_День - 1);
		КонецЕсли;

		СледующаяДата = НачалоДня(СледующаяДата);

	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Полугодие") Тогда

		СледующаяДата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), 6);
	
		Если ВидДаты = "КонецМесяца" Тогда
			СледующаяДата = КонецМесяца(СледующаяДата);
		ИначеЕсли ВидДаты = "День" Тогда
			СледующаяДата = СледующаяДата + 86400 * (ДатаНачала_День - 1);
		КонецЕсли;

		СледующаяДата = НачалоДня(СледующаяДата);

	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Год") Тогда

		СледующаяДата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), 12);
	
		Если ВидДаты = "КонецМесяца" Тогда
			СледующаяДата = КонецМесяца(СледующаяДата);
		ИначеЕсли ВидДаты = "День" Тогда
			СледующаяДата = СледующаяДата + 86400 * (ДатаНачала_День - 1);
		КонецЕсли;
		
		СледующаяДата = НачалоДня(СледующаяДата);

	Иначе
		
		СледующаяДата = '000101010000';
		
	КонецЕсли;
	
	Возврат СледующаяДата;
	
КонецФункции

// Проверяет соответствие расчетов и графика оплат и начислений.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
// 	РеквизитыДоговора - Структура -
// 	НачалоУчетаАрендыПоФСБУ25_2018 - Дата - 
// 	ВалютаДокументаПредставление - Строка -
// 	
// Возвращаемое значение:
// 	Структура - содержит свойства:
// 		* СуммаОбеспечительногоПлатежа - Строка, Неопределено -
// 		* СуммаУслугПоАренде - Строка, Неопределено -
// 		* СуммаВыкупаПредметовАренды - Строка, Неопределено -
// 		* СуммаНДС - Строка, Неопределено -
// 		* ДатаПервогоОбеспечительногоПлатежа - Строка, Неопределено -
// 		* ДатаПервогоПлатежа - Строка, Неопределено -
// 		* ПериодичностьОплат - Строка, Неопределено -
// 		* ПериодичностьНачислений - Строка, Неопределено -
// 		* ОплатаУслугиПоАренде - Строка, Неопределено -
// 		* НачислениеУслугиПоАренде - Строка, Неопределено -
// 		* ЕстьРасхождения - Булево -
Функция ПроверитьСоответствиеГрафиков(Объект, РеквизитыДоговора, НачалоУчетаАрендыПоФСБУ25_2018, 
										ВалютаДокументаПредставление) Экспорт
	
	ДанныеГрафиков = ДанныеГрафиков(Объект, РеквизитыДоговора);
	ИзменениеУсловий = УчетАрендованныхОСКлиентСервер.ЭтоИзменениеУсловийАренды(Объект);
	СозданДляПерехода = КонецДня(Объект.Дата) + 1 = НачалоУчетаАрендыПоФСБУ25_2018;
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("СуммаОбеспечительногоПлатежа", Неопределено);
	РезультатПроверки.Вставить("СуммаУслугПоАренде", Неопределено);
	РезультатПроверки.Вставить("СуммаВыкупаПредметовАренды", Неопределено);
	РезультатПроверки.Вставить("СуммаНДС", Неопределено);
	РезультатПроверки.Вставить("СуммаНДСВыкупаПредметовАренды", Неопределено);
	РезультатПроверки.Вставить("ДатаПервогоОбеспечительногоПлатежа", Неопределено);
	РезультатПроверки.Вставить("ДатаПервогоПлатежа", Неопределено);
	РезультатПроверки.Вставить("ДатаВыкупа", Неопределено);
	РезультатПроверки.Вставить("ПериодичностьОплат", Неопределено);
	РезультатПроверки.Вставить("ПериодичностьНачислений", Неопределено);
	РезультатПроверки.Вставить("ОплатаУслугиПоАренде", Неопределено);
	РезультатПроверки.Вставить("НачислениеУслугиПоАренде", Неопределено);
	РезультатПроверки.Вставить("РасхожденияГрафиков", Неопределено);
	РезультатПроверки.Вставить("ЕстьРасхождения", Ложь);
	
	Если НЕ ДанныеГрафиков.ГрафикиЗаполнены Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Если НЕ ИзменениеУсловий Тогда
		// СуммаОбеспечительногоПлатежа
		РезультатПроверки.СуммаОбеспечительногоПлатежа = СформироватьТекстПроверкиСуммыГрафика(
		Объект.СуммаОбеспечительногоПлатежа, 
		ДанныеГрафиков.ГрафикОплатУслуг.ИтогоОбеспечительныйПлатеж, 
		ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоОбеспечительныйПлатеж, 
		ВалютаДокументаПредставление);
		
		// СуммаУслугПоАренде 
		РезультатПроверки.СуммаУслугПоАренде = СформироватьТекстПроверкиСуммыГрафика(
		Объект.СуммаУслугПоАренде, 
		ДанныеГрафиков.ГрафикОплатУслуг.ИтогоУслугаПоАренде, 
		ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоУслугаПоАренде, 
		ВалютаДокументаПредставление);
		
		// СуммаВыкупаПредметовАренды 
		РезультатПроверки.СуммаВыкупаПредметовАренды = СформироватьТекстПроверкиСуммыГрафика(
		Объект.СуммаВыкупаПредметовАренды, 
		ДанныеГрафиков.ГрафикОплатУслуг.ИтогоВыкупнаяСтоимость, 
		Объект.СуммаВыкупаПредметовАренды, 
		ВалютаДокументаПредставление);
		
		// СуммаНДС, СуммаНДСВыкупаПредметовАренды
		Если ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			
			РезультатПроверки.СуммаНДС = СформироватьТекстПроверкиСуммыГрафика(
				Объект.СуммаНДС,
				Объект.СуммаНДС,
				ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоСуммаНДС,
				ВалютаДокументаПредставление);
			
			РезультатПроверки.СуммаНДСВыкупаПредметовАренды = СформироватьТекстПроверкиСуммыГрафика(
				Объект.СуммаНДСВыкупаПредметовАренды,
				ДанныеГрафиков.ГрафикОплатУслуг.ИтогоСуммаНДСВыкупаПредметовАренды,
				Объект.СуммаНДСВыкупаПредметовАренды,
				ВалютаДокументаПредставление);
			
		КонецЕсли;
		
	Иначе
		
		//СуммаУслугПоАренде
		Если Объект.СуммаУслугПоАренде <> ДанныеГрафиков.ГрафикНачисленияУслуг.УслугаПоАрендеПослеИзменений Тогда
			
			ТекстПроверки = НСтр("ru = 'Сумма услуг по аренде не совпадает с графиком начислений:
			|  - по графику начислений сумма %1 %2'");
			ТекстПроверки = СтрШаблон(ТекстПроверки, 
									Формат(ДанныеГрафиков.ГрафикНачисленияУслуг.УслугаПоАрендеПослеИзменений, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление);
			РезультатПроверки.СуммаУслугПоАренде = ТекстПроверки;
		КонецЕсли;
		
		//Сумма услуг по графикам
		Если ДанныеГрафиков.ГрафикОплатУслуг.ИтогоУслугаПоАренде <> ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоУслугаПоАренде Тогда
			
			ТекстПроверки = НСтр("ru = 'Итоговая сумма услуг по графику оплат не совпадает с графиком начислений:
			|  - по графику оплат сумма %1 %2
			|  - по графику начислений сумма %3 %4'");
			ТекстПроверки = СтрШаблон(ТекстПроверки,
									Формат(ДанныеГрафиков.ГрафикОплатУслуг.ИтогоУслугаПоАренде, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление,
									Формат(ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоУслугаПоАренде, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление);
			РезультатПроверки.РасхожденияГрафиков = ТекстПроверки;
			
		КонецЕсли;
		
		//СуммаОбеспечительногоПлатежа
		Если Объект.СуммаОбеспечительногоПлатежа <> ДанныеГрафиков.ГрафикНачисленияУслуг.ОбеспечительныйПлатежПослеИзменений Тогда
			
			ТекстПроверки = НСтр("ru = 'Сумма обеспечительного платежа не совпадает с графиком начислений:
			|  - по графику начислений сумма %1 %2'");
			ТекстПроверки = СтрШаблон(ТекстПроверки, 
									Формат(ДанныеГрафиков.ГрафикНачисленияУслуг.ОбеспечительныйПлатежПослеИзменений, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление);
			РезультатПроверки.СуммаОбеспечительногоПлатежа = ТекстПроверки;
		КонецЕсли;
		
		//Сумма обеспечительного платежа по графикам
		Если ДанныеГрафиков.ГрафикОплатУслуг.ИтогоОбеспечительныйПлатеж <> ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоОбеспечительныйПлатеж Тогда
			
			ТекстПроверки = НСтр("ru = 'Итоговая сумма обеспечительного платежа по графику оплат не совпадает с графиком начислений:
			|  - по графику оплат сумма %1 %2
			|  - по графику начислений сумма %3 %4'");
			ТекстПроверки = СтрШаблон(ТекстПроверки,
									Формат(ДанныеГрафиков.ГрафикОплатУслуг.ИтогоОбеспечительныйПлатеж, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление,
									Формат(ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоОбеспечительныйПлатеж, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление);
			РезультатПроверки.РасхожденияГрафиков = ТекстПроверки;
			
		КонецЕсли;
		
		//СуммаОбеспечительногоПлатежа
		Если Объект.СуммаВыкупаПредметовАренды <> ДанныеГрафиков.ГрафикОплатУслуг.ВыкупнаяСтоимостьПослеИзменений Тогда
			
			ТекстПроверки = НСтр("ru = 'Сумма выкупа не совпадает с графиком начислений:
			|  - по графику начислений сумма %1 %2'");
			ТекстПроверки = СтрШаблон(ТекстПроверки, 
									Формат(ДанныеГрафиков.ГрафикОплатУслуг.ВыкупнаяСтоимостьПослеИзменений, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление);
			РезультатПроверки.СуммаВыкупаПредметовАренды = ТекстПроверки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			
			//СуммаНДС
			Если Объект.СуммаНДС <> ДанныеГрафиков.ГрафикНачисленияУслуг.СуммаНДСПослеИзменений Тогда
				
				ТекстПроверки = НСтр("ru = 'Сумма НДС услуг по аренде не совпадает с графиком начислений:
				|  - по графику начислений сумма %1 %2'");
				ТекстПроверки = СтрШаблон(ТекстПроверки, 
				Формат(ДанныеГрафиков.ГрафикНачисленияУслуг.СуммаНДСПослеИзменений, "ЧДЦ=2; ЧН=0;"),
				ВалютаДокументаПредставление);
				РезультатПроверки.СуммаНДС = ТекстПроверки;
			КонецЕсли;
			
			//СуммаНДСВыкупаПредметовАренды
			Если Объект.СуммаНДСВыкупаПредметовАренды <> ДанныеГрафиков.ГрафикОплатУслуг.СуммаНДСВыкупаПредметовАрендыПослеИзменений Тогда
				
				ТекстПроверки = НСтр("ru = 'Сумма НДС выкупа не совпадает с графиком оплат:
				|  - по графику оплат сумма %1 %2'");
				ТекстПроверки = СтрШаблон(ТекстПроверки, 
				Формат(ДанныеГрафиков.ГрафикОплатУслуг.СуммаНДСВыкупаПредметовАрендыПослеИзменений, "ЧДЦ=2; ЧН=0;"),
				ВалютаДокументаПредставление);
				РезультатПроверки.СуммаНДСВыкупаПредметовАренды = ТекстПроверки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ОплатаУслугиПоАренде
	Если ЗначениеЗаполнено(Объект.ПериодичностьОплат)
		И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная") Тогда
			
		РезультатПроверки.ОплатаУслугиПоАренде = СформироватьТекстПроверкиСуммыГрафика(
							Объект.ОплатаУслугиПоАренде, 
							ДанныеГрафиков.ГрафикОплатУслуг.ОплатаУслугиПоАренде, 
							Объект.ОплатаУслугиПоАренде, 
							ВалютаДокументаПредставление);
	КонецЕсли; 
	
	// НачислениеУслугиПоАренде 
	Если ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
		И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная") Тогда
			
		РезультатПроверки.НачислениеУслугиПоАренде = СформироватьТекстПроверкиСуммыГрафика(
							Объект.НачислениеУслугиПоАренде, 
							Объект.НачислениеУслугиПоАренде, 
							ДанныеГрафиков.ГрафикНачисленияУслуг.НачислениеУслугиПоАренде, 
							ВалютаДокументаПредставление);
	КонецЕсли; 
						
	// ПериодичностьОплат
	РезультатПроверки.ПериодичностьОплат = СформироватьТекстПроверкиПериодичностиГрафика(
	Объект.ПериодичностьОплат, ДанныеГрафиков.ГрафикОплатУслуг.Периодичность);
	
	// ПериодичностьНачислений
	РезультатПроверки.ПериодичностьНачислений = СформироватьТекстПроверкиПериодичностиГрафика(
	Объект.ПериодичностьНачислений, ДанныеГрафиков.ГрафикНачисленияУслуг.Периодичность);
	
	// ДатаПервогоОбеспечительногоПлатежа
	Если ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа <> Объект.ДатаПервогоОбеспечительногоПлатежа
		И ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа <> Неопределено Тогда
			
		ТекстПроверки = НСтр("ru = 'Дата не совпадает с графиком оплат:
		|  - по графику дата %1'");
		ТекстПроверки = СтрШаблон(ТекстПроверки, Формат(ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа, "ДЛФ=D;"));
								
		РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа = ТекстПроверки;
	КонецЕсли; 
	
	// ДатаПервогоОбеспечительногоПлатежа
	Если ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоПлатежа <> Объект.ДатаПервогоПлатежа
		И ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоПлатежа <> Неопределено Тогда
			
		ТекстПроверки = НСтр("ru = 'Дата не совпадает с графиком оплат:
		|  - по графику дата %1'");
		ТекстПроверки = СтрШаблон(ТекстПроверки, Формат(ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоПлатежа, "ДЛФ=D;"));
								
		РезультатПроверки.ДатаПервогоПлатежа = ТекстПроверки;
	КонецЕсли; 
	
	РезультатПроверки.ЕстьРасхождения =
		РезультатПроверки.СуммаОбеспечительногоПлатежа <> Неопределено
		ИЛИ РезультатПроверки.СуммаУслугПоАренде <> Неопределено
		ИЛИ РезультатПроверки.СуммаВыкупаПредметовАренды <> Неопределено
		ИЛИ РезультатПроверки.СуммаНДС <> Неопределено
		ИЛИ РезультатПроверки.СуммаНДСВыкупаПредметовАренды <> Неопределено
		ИЛИ РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа <> Неопределено
		ИЛИ РезультатПроверки.ДатаПервогоПлатежа <> Неопределено
		ИЛИ РезультатПроверки.ДатаВыкупа <> Неопределено
		ИЛИ РезультатПроверки.ПериодичностьОплат <> Неопределено
		ИЛИ РезультатПроверки.ПериодичностьНачислений <> Неопределено
		ИЛИ РезультатПроверки.ОплатаУслугиПоАренде <> Неопределено
		ИЛИ РезультатПроверки.НачислениеУслугиПоАренде <> Неопределено;
		
	Возврат РезультатПроверки;
	
КонецФункции

// Заполняет сумму НДС в документе аренды.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
Процедура ПересчитатьСуммуНДСВДокументеАренды(Объект) Экспорт

	Если НЕ ЭтоИзменениеУсловийАренды(Объект) Тогда 
		Объект.СуммаНДС = СуммаНДСВДокументеАренды(
		Объект.ГрафикНачисленияУслуг,
		Объект.СуммаУслугПоАренде, 
		Объект.СуммаОбеспечительногоПлатежа, 
		Объект.СуммаНДСВыкупаПредметовАренды, 
		Объект.СтавкаНДС);
	Иначе
		ДатаНачала = НачалоДня(Объект.Дата);
		Объект.СуммаНДС = СуммаНДСВДокументеИзменениеУсловийАренды(
		Объект.ГрафикНачисленияУслуг,
		Объект.СуммаУслугПоАренде, 
		Объект.СуммаОбеспечительногоПлатежа, 
		Объект.СуммаНДСВыкупаПредметовАренды, 
		Объект.СтавкаНДС,
		ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает сумму НДС по графику начислений.
// 
// Параметры:
// 	ГрафикНачисленияУслуг - ДанныеФормыКоллекция -
// 	СуммаУслугПоАренде - Число -
// 	СуммаОбеспечительногоПлатежа - Число -
// 	СуммаНДСВыкупаПредметовАренды - Число
// 	СтавкаНДС - СправочникСсылка.СтавкиНДС -
// 	  
// Возвращаемое значение:
// 	Число - Сумма НДС
Функция СуммаНДСВДокументеАренды(ГрафикНачисленияУслуг, СуммаУслугПоАренде, СуммаОбеспечительногоПлатежа, СуммаНДСВыкупаПредметовАренды, СтавкаНДС) Экспорт

	ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
	
	Если ТекПроцентНДС = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Если ГрафикНачисленияУслуг = Неопределено Тогда
		ГрафикНачисленияУслуг = ГрафикНачисленияУслуг;
	КонецЕсли;
	
	СуммаНДС = 0;
	Если ГрафикНачисленияУслуг.Количество() <> 0 Тогда
		
		Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
			СуммаНДС = СуммаНДС + СтрокаГрафика.УслугаПоАрендеНДС + СтрокаГрафика.ОбеспечительныйПлатежНДС;
		КонецЦикла;
		
	Иначе
	
		СуммаНДС = 
			УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаОбеспечительногоПлатежа, ТекПроцентНДС, Истина)
			+ УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаУслугПоАренде, ТекПроцентНДС, Истина);
		
	КонецЕсли;
	
	СуммаНДС = СуммаНДС + СуммаНДСВыкупаПредметовАренды;
					
	Возврат СуммаНДС;
	
КонецФункции

// Рассчитывает сумму НДС по графику начислений в документе изменения условий аренды.
// 
// Параметры:
// 	ГрафикНачисленияУслуг - ДанныеФормыКоллекция -
// 	СуммаУслугПоАренде - Число -
// 	СуммаОбеспечительногоПлатежа - Число -
// 	СуммаНДСВыкупаПредметовАренды - Число
// 	СтавкаНДС - СправочникСсылка.СтавкиНДС -
// 	ДатаНачалаРасчета - Дата -
// 	  
// Возвращаемое значение:
// 	Число - Сумма НДС
Функция СуммаНДСВДокументеИзменениеУсловийАренды(ГрафикНачисленияУслуг, СуммаУслугПоАренде, СуммаОбеспечительногоПлатежа, СуммаНДСВыкупаПредметовАренды, СтавкаНДС, ДатаНачалаРасчета) Экспорт
	
	ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);

	Если ТекПроцентНДС = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Если ГрафикНачисленияУслуг = Неопределено Тогда
		ГрафикНачисленияУслуг = ГрафикНачисленияУслуг;
	КонецЕсли;

	СуммаНДС = 0;
	Если ГрафикНачисленияУслуг.Количество() <> 0 Тогда
		
		Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
			Если СтрокаГрафика.Дата < ДатаНачалаРасчета Тогда
				Продолжить;
			КонецЕсли;
			СуммаНДС = СуммаНДС + СтрокаГрафика.УслугаПоАрендеНДС + СтрокаГрафика.ОбеспечительныйПлатежНДС;
		КонецЦикла;

	Иначе

		СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаУслугПоАренде, ТекПроцентНДС, Истина)
			+ УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаОбеспечительногоПлатежа, ТекПроцентНДС, Истина);

	КонецЕсли;

	СуммаНДС = СуммаНДС + СуммаНДСВыкупаПредметовАренды;

	Возврат СуммаНДС;

КонецФункции

// Заполняет сумму и сумму с НДС в документе аренды.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
Процедура ПересчитатьСуммуДокументаАренды(Объект) Экспорт
	
	Объект.Сумма = 
		Объект.СуммаУслугПоАренде
		+ Объект.СуммаОбеспечительногоПлатежа
		+ Объект.СуммаВыкупаПредметовАренды;

	Объект.СуммаСНДС = Объект.Сумма;

КонецПроцедуры

// Рассчитывает приведенную стоимость.
// 
// Параметры:
//  СтоимостьПредметовАренды - Число - Стоимость предметов аренды
//  ГрафикОплатУслуг - ТаблицаЗначений - График оплат услуг
//  ДатаНачалаАренды - Дата - Дата начала аренды
// 
// Возвращаемое значение:
//  Число
Функция ПриведеннаяСтоимость(СтоимостьПредметовАренды, ГрафикОплатУслуг, ДатаНачалаАренды) Экспорт
	
	АвансыДоНачалаАрендыБезНДС = 0;
		
	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл
		
		Если СтрокаГрафика.Дата >= ДатаНачалаАренды Тогда
			Продолжить;
		КонецЕсли;
		
		АвансыДоНачалаАрендыБезНДС =
			АвансыДоНачалаАрендыБезНДС 
			+ СтрокаГрафика.ОбеспечительныйПлатеж - СтрокаГрафика.ОбеспечительныйПлатежНДС
			+ СтрокаГрафика.УслугаПоАренде - СтрокаГрафика.УслугаПоАрендеНДС
			+ СтрокаГрафика.ВыкупнаяСтоимость - СтрокаГрафика.ВыкупнаяСтоимостьНДС;
		
	КонецЦикла;
	
	ПриведеннаяСтоимость = Макс(СтоимостьПредметовАренды - АвансыДоНачалаАрендыБезНДС, 0);
	
	Возврат ПриведеннаяСтоимость;
	
КонецФункции

// Рассчитывает приведенную стоимость при изменении условий договора аренды
// 
// Параметры:
//  СтоимостьПредметовАренды - Число - Стоимость предметов аренды
//  ГрафикОплатУслуг - ТаблицаЗначений - График оплат услуг
//  ГрафикПроцентов  - ТаблицаЗначений - График процентов
//  ДатаНачалаАренды - Дата - Дата начала договора аренды
//  ДатаИзмененияАренды - Дата - Дата изменения договора аренды
// 
// Возвращаемое значение:
//  Число
Функция ПриведеннаяСтоимостьИзменениеУсловий(СтоимостьПредметовАренды, ГрафикОплатУслуг, ГрафикПроцентов, ДатаНачалаАренды, ДатаИзмененияАренды) Экспорт

	СуммаОплатБезНДС = 0;
	
	СуммаОплат = 0;

	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл

		Если СтрокаГрафика.Дата < ДатаНачалаАренды ИЛИ СтрокаГрафика.Дата >= ДатаИзмененияАренды Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаОплатБезНДС =
			СуммаОплатБезНДС 
			+ СтрокаГрафика.ОбеспечительныйПлатеж - СтрокаГрафика.ОбеспечительныйПлатежНДС
			+ СтрокаГрафика.УслугаПоАренде - СтрокаГрафика.УслугаПоАрендеНДС
			+ СтрокаГрафика.ВыкупнаяСтоимость - СтрокаГрафика.ВыкупнаяСтоимостьНДС;

	КонецЦикла; 
	
	СуммаПроцентов = 0;
	
	Для Каждого СтрокаГрафика Из ГрафикПроцентов Цикл
		
		Если СтрокаГрафика.Дата < ДатаНачалаАренды ИЛИ СтрокаГрафика.Дата >= ДатаИзмененияАренды Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаПроцентов = СуммаПроцентов + СтрокаГрафика.Проценты;
		
	КонецЦикла;

	ПриведеннаяСтоимость = Макс(СтоимостьПредметовАренды - СуммаОплатБезНДС + СуммаПроцентов, 0);

	Возврат ПриведеннаяСтоимость;

КонецФункции

// Определяет стоимость предметов аренды.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура
//  РеквизитыДоговора - см. УчетАрендованныхОС.РеквизитыДоговораАренды
//  ИмяТабличнойЧастиОС - Строка
// 
// Возвращаемое значение:
//  Число
Функция СтоимостьПредметовАренды(Объект, РеквизитыДоговора, ИмяТабличнойЧастиОС) Экспорт
	
	Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
		И РеквизитыДоговора.СпособОпределенияСтоимостиАктивов =
			ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.Вручную") Тогда
		
		Если ЗначениеЗаполнено(ИмяТабличнойЧастиОС) Тогда
			Если НЕ УчетАрендованныхОСКлиентСервер.ЭтоИзменениеУсловийАренды(Объект) Тогда
				СтоимостьПредметовАренды = Объект[ИмяТабличнойЧастиОС].Итог("СправедливаяСтоимость")
						- Объект[ИмяТабличнойЧастиОС].Итог("НегарантированнаяСтоимость");
			Иначе
				СтоимостьПредметовАренды = 0;
				Для Каждого СтрокаОС Из Объект[ИмяТабличнойЧастиОС] Цикл
					Если СтрокаОС.ДействиеСПредметомАренды = 
						ПредопределенноеЗначение("Перечисление.ДействияСПредметамиАренды.ПрекращениеАренды") Тогда
						Продолжить;
					КонецЕсли;
					СтоимостьПредметовАренды = СтоимостьПредметовАренды + СтрокаОС.СправедливаяСтоимость - СтрокаОС.НегарантированнаяСтоимость;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтоимостьПредметовАренды = Объект.СправедливаяСтоимость - Объект.НегарантированнаяСтоимость;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ИмяТабличнойЧастиОС) Тогда
			Если НЕ УчетАрендованныхОСКлиентСервер.ЭтоИзменениеУсловийАренды(Объект) Тогда
				СтоимостьПредметовАренды = Объект[ИмяТабличнойЧастиОС].Итог("Стоимость");
			Иначе
				СтоимостьПредметовАренды = 0;
				Для Каждого СтрокаОС Из Объект[ИмяТабличнойЧастиОС] Цикл
					Если СтрокаОС.ДействиеСПредметомАренды = 
						ПредопределенноеЗначение("Перечисление.ДействияСПредметамиАренды.ДосрочныйВыкуп")
							ИЛИ СтрокаОС.ДействиеСПредметомАренды = 
								ПредопределенноеЗначение("Перечисление.ДействияСПредметамиАренды.ПрекращениеАренды") Тогда
						Продолжить;
					КонецЕсли;
					СтоимостьПредметовАренды = СтоимостьПредметовАренды + СтрокаОС.Стоимость;
				КонецЦикла;
			КонецЕсли
		Иначе
			СтоимостьПредметовАренды = Объект.Стоимость;
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтоимостьПредметовАренды;
		
КонецФункции

// Определяет коэффициент распределения остатка приведенной стоимости при исключении предметов аренды из договора.
// 
// Параметры:
//  ТаблицаОС - ТаблицаЗначений - Таблица ОС
//  РеквизитыДоговора - см. УчетАрендованныхОС.РеквизитыДоговораАренды
// 
// Возвращаемое значение:
//  Число
Функция КоэффициентРаспределенияСтоимости(ТаблицаОС, РеквизитыДоговора) Экспорт
	
	Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
		И РеквизитыДоговора.СпособОпределенияСтоимостиАктивов
			= ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.Вручную") Тогда
		РасчетПоСправедливойСтоимости = Истина;
	Иначе
		РасчетПоСправедливойСтоимости = Ложь;
	КонецЕсли;
	
	ОбщаяСтоимость = 0;
	СтоимостьНеисключенныхОС = 0;
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если СтрокаОС.ДействиеСПредметомАренды
			= ПредопределенноеЗначение("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаОС.ДействиеСПредметомАренды
			= ПредопределенноеЗначение("Перечисление.ДействияСПредметамиАренды.ИзменениеУсловийАренды") Тогда
			Если РасчетПоСправедливойСтоимости Тогда
				СтоимостьНеисключенныхОС = СтоимостьНеисключенныхОС + СтрокаОС.СправедливаяСтоимость - СтрокаОС.НегарантированнаяСтоимость;
			Иначе
				СтоимостьНеисключенныхОС = СтоимостьНеисключенныхОС + СтрокаОС.Стоимость;
			КонецЕсли;
		КонецЕсли;
		
		Если РасчетПоСправедливойСтоимости Тогда
			ОбщаяСтоимость = ОбщаяСтоимость + СтрокаОС.СправедливаяСтоимость - СтрокаОС.НегарантированнаяСтоимость;
		Иначе
			ОбщаяСтоимость = ОбщаяСтоимость + СтрокаОС.Стоимость;
		КонецЕсли;
		
	КонецЦикла;
	
	КоэффициентРаспределения = ?(ОбщаяСтоимость <> 0, СтоимостьНеисключенныхОС / ОбщаяСтоимость, 1);
	
	Возврат КоэффициентРаспределения;

КонецФункции

// Определяет стоимость добавленных предметов аренды
// 
// Параметры:
//  ТаблицаОС - ТаблицаЗначений -  Таблица ОС
// 
// Возвращаемое значение:
//  Число
Функция СтоимостьДобавленныхПредметовАренды(ТаблицаОС) Экспорт

	СтоимостьПредметовАренды = 0;
	
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если СтрокаОС.ДействиеСПредметомАренды = 
			ПредопределенноеЗначение("Перечисление.ДействияСПредметамиАренды.ВзятиеВАренду") Тогда
			СтоимостьПредметовАренды = СтоимостьПредметовАренды + СтрокаОС.Стоимость;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтоимостьПредметовАренды;

КонецФункции

// Определяет сумму платежей без НДС.
// 
// Параметры:
//  ГрафикОплатУслуг - ТаблицаЗначений - График оплат услуг
//  ДатаНачалаАренды - Дата - Дата начала договора аренды
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - Ставка НДС
// 
// Возвращаемое значение:
//  Число
Функция ВсегоПлатежейБезНДС(ГрафикОплатУслуг, ДатаНачалаАренды, СтавкаНДС) Экспорт
	
	ВсегоПлатежейБезНДС = 0;
	ПроцентНДС = Неопределено;
	
	Для Каждого ИсходнаяСтрокаГрафика Из ГрафикОплатУслуг Цикл		
		
		Если ИсходнаяСтрокаГрафика.Дата < ДатаНачалаАренды Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроцентНДС = Неопределено Тогда
			ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
		КонецЕсли;
		
		ВсегоПлатежейБезНДС =
			ВсегоПлатежейБезНДС 
			+ ИсходнаяСтрокаГрафика.УслугаПоАренде -  ИсходнаяСтрокаГрафика.УслугаПоАрендеНДС
			+ ИсходнаяСтрокаГрафика.ОбеспечительныйПлатеж - ИсходнаяСтрокаГрафика.ОбеспечительныйПлатежНДС
			+ ИсходнаяСтрокаГрафика.ВыкупнаяСтоимость - ИсходнаяСтрокаГрафика.ВыкупнаяСтоимостьНДС;
			
	КонецЦикла;
	
	Возврат ВсегоПлатежейБезНДС;
	
КонецФункции

// Определяет, связан ли объект с изменением договора аренды
// 
// Параметры:
//  Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды, ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде -
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоИзменениеУсловийАренды(Объект) Экспорт
	
	ЭтоИзменениеУсловийАренды = Ложь;
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда 
		ЭтоИзменениеУсловийАренды = ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИзменениеУсловийДоговораАренды");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеУсловийДоговораАренды")
		ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.ИзменениеУсловийДоговораАренды") Тогда
		ЭтоИзменениеУсловийАренды = Истина;
	КонецЕсли;
	
	Возврат ЭтоИзменениеУсловийАренды;
	
КонецФункции

Процедура УстановитьВидимостьИдикатораПроверкиГрафика(ЭлементИндикатор, РезультатПроверки)
	
	Если РезультатПроверки = Неопределено Тогда
		ЭлементИндикатор.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭлементИндикатор.Видимость = Истина;
	ЭлементИндикатор.Подсказка = РезультатПроверки;
	
КонецПроцедуры

// Проверяет заполнен ли график оплат или начислений.
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации - Основное средство
//  ГрафикОплат - ТаблицаЗначений - График оплат
//  ГрафикНачислений - ТаблицаЗначений - График начислений
// 
// Возвращаемое значение:
//  Булево
Функция ГрафикЗаполнен(ОсновноеСредство, ГрафикОплат, ГрафикНачислений) Экспорт
	
	СтруктураОтбора = Новый Структура("ОсновноеСредство", ОсновноеСредство);
	Если ГрафикОплат.НайтиСтроки(СтруктураОтбора).Количество()
		ИЛИ ГрафикНачислений.НайтиСтроки(СтруктураОтбора).Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СформироватьТекстПроверкиСуммыГрафика(Сумма, ИтогоГрафикОплатУслуг, ИтогоГрафикНачисленияУслуг, ВалютаДокументаПредставление)
	
	ТекстПроверки = Неопределено;
	
	Если Сумма <> ИтогоГрафикОплатУслуг	
		И Сумма <> ИтогоГрафикНачисленияУслуг
		И ИтогоГрафикОплатУслуг <> Неопределено	
		И ИтогоГрафикНачисленияУслуг <> Неопределено Тогда
		
		ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком оплат и начислений:
		|  - по графику оплат сумма %1 %2
		|  - по графику начислений сумма %3 %4'");
		ТекстПроверки = СтрШаблон(ТекстПроверки, 
								Формат(ИтогоГрафикОплатУслуг, "ЧДЦ=2; ЧН=0;"),
								ВалютаДокументаПредставление,
								Формат(ИтогоГрафикНачисленияУслуг, "ЧДЦ=2; ЧН=0;"),
								ВалютаДокументаПредставление);
		
	ИначеЕсли Сумма <> ИтогоГрафикОплатУслуг Тогда
		
		Если ИтогоГрафикОплатУслуг <> Неопределено Тогда
			
			ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком оплат:
			|  - по графику оплат сумма %1 %2'");
			
			ТекстПроверки = СтрШаблон(ТекстПроверки, 
									Формат(ИтогоГрафикОплатУслуг, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление);
		Иначе
			
			ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком оплат:
			|  - по графику оплат сумма произвольная'");
			
		КонецЕсли;
		
	ИначеЕсли Сумма <> ИтогоГрафикНачисленияУслуг Тогда
		
		Если ИтогоГрафикНачисленияУслуг <> Неопределено Тогда
			
			ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком начислений:
			|  - по графику начислений сумма %1 %2'");
			ТекстПроверки = СтрШаблон(ТекстПроверки, 
									Формат(ИтогоГрафикНачисленияУслуг, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление);
		Иначе
		
			ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком начислений:
			|  - по графику начислений сумма произвольная'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстПроверки;
	
КонецФункции

Функция СформироватьТекстПроверкиПериодичностиГрафика(Периодичность, ПериодичностьПоГрафику)

	ТекстПроверки = Неопределено;
	
	Если Периодичность <> ПериодичностьПоГрафику
		И ПериодичностьПоГрафику <> Неопределено Тогда
		
		ТекстПроверки = НСтр("ru = 'Периодичность не совпадает с графиком:
		|- по графику периодичность ""%1""'");
		ТекстПроверки = СтрШаблон(ТекстПроверки, Строка(ПериодичностьПоГрафику));
		
	КонецЕсли;
	
	Возврат ТекстПроверки;
	
КонецФункции

// Определяет периодичность графика.
// 
// Параметры:
//  ПредыдущаяДата - Дата - 
//  ТекущаяДата - Дата - 
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПериодичностьГрафика
Функция ПериодичностьГрафика(ПредыдущаяДата, ТекущаяДата) Экспорт

	СписокПериодичность = Новый Массив;
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.День"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Неделя"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Квартал"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Полугодие"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Год"));

	Для Сч = 0 По СписокПериодичность.ВГраница() Цикл
		
		Периодичность = СписокПериодичность[Сч];
		
		Если ТекущаяДата = СледующаяДатаГрафика(ПредыдущаяДата, Периодичность) Тогда
			Возврат Периодичность;
		КонецЕсли;
		 
	КонецЦикла;
	
	Возврат ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
	
КонецФункции

// Возвращает типы договоров доходной аренды
// 
// Возвращаемое значение:
// Массив из ПеречислениеСсылка.ТипыДоговоров
Функция ТипыДоговоровДоходнойАренды() Экспорт
	
	МассивТиповДоговоров = Новый Массив;
	МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ПередачаВАренду"));
	МассивТиповДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.Субаренда"));
		
	Возврат МассивТиповДоговоров;
	
КонецФункции

#КонецОбласти

#КонецОбласти
