
#Область ПрограммныйИнтерфейс

//++ НЕ УТ
#Область ПравилаПолученияФактическихДанных

// Возвращает ссылку на схему по типу, разделу и указанному источнику данных
// Предназначен для обезличенного, не зависящего от ссылки кэшированного получения схем из справочников-правил получения
// данных Если схема модифицируется в последствии в коде, то именно она будет возвращаться из кэша.
// 
// Параметры:
//  ИмяСправочникаИсточника - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  РазделИсточникаДанных - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - оперативный, международный или
//                                                                                     регламентированный учет.
//  ИсточникДанных - СправочникСсылка.НастройкиХозяйственныхОпераций, ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов - объект,
//    содержащий имя макета СКД в правиле.
// 
// Возвращаемое значение:
// 	 СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема получения фактических данных, соответствующая источнику. 
//						   - Неопределено - если макет не найден.
//
Функция СхемаКомпоновкиДанныхПравила(ИмяСправочникаИсточника, РазделИсточникаДанных, ИсточникДанных) Экспорт
	
	СхемаКомпоновкиДанныхПравила = Неопределено;
	ИмяСхемы = Неопределено;
	
	РазделыИсточников = Перечисления.РазделыИсточниковДанныхБюджетирования;
	
	Если РазделИсточникаДанных = РазделыИсточников.ОперативныйУчет Тогда
		
		Если ЗначениеЗаполнено(ИсточникДанных) Тогда
			ИмяСхемы = ИмяМакетаПоЗначениюИсточника(ИсточникДанных);
		КонецЕсли;
		
	ИначеЕсли РазделИсточникаДанных = РазделыИсточников.РегламентированныйУчет Тогда
		
		ИмяСхемы = "РегламентированныйУчет";
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Недопустимый раздел источника получения данных.'");
	КонецЕсли;
	
	СхемаКомпоновкиДанныхПравила = ПолучитьМакетСправочника(ИмяСправочникаИсточника, ИмяСхемы);
	
	Возврат СхемаКомпоновкиДанныхПравила;
	
КонецФункции

// Возвращает ссылку на схему по типу, разделу и указанному хешу компоновки данных
// Предназначен для обезличенного, не зависящего от ссылки кэшированного получения схем из справочников-правил получения
// данных Если схема модифицируется в последствии в коде, то именно она будет возвращаться из кэша.
// 
// Параметры:
//  ИмяСправочникаИсточника - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  РазделИсточникаДанных - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - произвольные данные
//  ХешСхемыКомпоновкиДанных - Строка - хеш сумма произвольной схемы компоновки данных.
// 
// Возвращаемое значение:
// 	 СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема получения фактических данных, соответствующая источнику. 
//						   - Неопределено - если макет не найден.
//
Функция ПроизвольнаяСхемаКомпоновкиДанныхПравила(ИмяСправочникаИсточника, РазделИсточникаДанных, ХешСхемыКомпоновкиДанных) Экспорт
	
	СхемаКомпоновкиДанныхПравила = Неопределено;
	
	Если Не РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый раздел источника получения данных.'");
	КонецЕсли;
	
	НайденнаяСхемаИсточникаДанных = ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ХешСхемыКомпоновкиДанных);
	
	Если Не НайденнаяСхемаИсточникаДанных = Неопределено Тогда
		СхемаКомпоновкиДанныхПравила = НайденнаяСхемаИсточникаДанных;
	КонецЕсли;
	
	Возврат СхемаКомпоновкиДанныхПравила;
	
КонецФункции

// Возвращает соответствие поддерживаемых типов и их имен
// 
// Возвращаемое значение:
// 	 Соответствие из КлючИЗначение:
//		*Ключ - Тип- тип поддерживаемого объекта метаданных
//		*Значение - Строка - имя справочника, как оно задано в конфигураторе.
//
Функция ПоддерживаемыеСправочникиИсточникиДанных() Экспорт
	Поддерживаемые = Новый Соответствие;
	Поддерживаемые.Вставить(Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов"), "ПравилаПолученияФактаПоПоказателямБюджетов");
	Поддерживаемые.Вставить(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"),     "ПравилаПолученияФактаПоСтатьямБюджетов");
	
	Возврат Поддерживаемые;
КонецФункции

// Возвращает имя схемы-умолчания на случай, когда иные схемы не найдены
// 
// Возвращаемое значение:
// 	 Соответствие из КлючИЗначение:
//		*Ключ - Строка - имя справочника, как оно задано в конфигураторе
//		*Значение - Строка - имя макета схемы компоновки данных.
//
Функция ИменаСхемУмолчанийДляИсточниковДанных() Экспорт
	Умолчания = Новый Соответствие;
	Умолчания.Вставить("ПравилаПолученияФактаПоПоказателямБюджетов", "ПрочиеАктивыПассивы");
	Умолчания.Вставить("ПравилаПолученияФактаПоСтатьямБюджетов", "");
	
	Возврат Умолчания;
КонецФункции

// Возвращает макет из указанного справочника
//
// Параметры:
//  ИмяСправочникаИсточника - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  ИмяМакета               - Строка - например, "ВыданныеАвансы".
//
// Возвращаемое значение:
//  ТабличныйДокумент, ТекстовыйДокумент - объект, который может быть макетом. 
//
Функция ПолучитьМакетСправочника(ИмяСправочникаИсточника, Знач ИмяМакета = Неопределено) Экспорт

	Перем ИскомыйМакет;
	
	Если Не ПустаяСтрока(ИмяМакета) Тогда
		Если Метаданные.Справочники[ИмяСправочникаИсточника].Макеты.Найти(ИмяМакета) = Неопределено Тогда
			ИмяМакета = ИменаСхемУмолчанийДляИсточниковДанных()[ИмяСправочникаИсточника];
		КонецЕсли;
		ИскомыйМакет = Справочники[ИмяСправочникаИсточника].ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Возврат ИскомыйМакет;

КонецФункции

// Возвращает массив поддерживаемых типов источников имени макета
// 
// Возвращаемое значение:
// 	 Массив из Тип - тип поддерживаемого объекта метаданных.
//
Функция ПоддерживаемыеТипыИсточниковИмениМакета() Экспорт
	Поддерживаемые = Новый Массив;
	Поддерживаемые.Добавить(Тип("СправочникСсылка.НастройкиХозяйственныхОпераций"));
	Поддерживаемые.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	Поддерживаемые.Добавить(Тип("ПеречислениеСсылка.ХозяйственныеОперации"));
	
	Возврат Поддерживаемые;
КонецФункции

// Возвращает хранимые настройки из указанного справочника
//
// Параметры:
//  ИмяСправочникаИсточника  - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  ХешНастроек - Строка - хеш-сумма настроенных отборов компоновки данных.
//
// Возвращаемое значение:
//  КомпоновщикНастроекКомпоновкиДанных 
//
Функция ПолучитьХранимыеНастройкиСправочника(ИмяСправочникаИсточника, ХешНастроек) Экспорт
	
	Возврат ИсточникиДанныхСервер.ПолучитьХранимыеНастройкиСправочника(ИмяСправочникаИсточника, ХешНастроек);
	
КонецФункции

// Возвращает хранимый макет из указанного справочника
//
// Параметры:
//  ИмяСправочникаИсточника  - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов"
//  ХешСхемыКомпоновкиДанных - Строка - хеш-сумма произвольной схемы компоновки данных.
//
// Возвращаемое значение:
//  ТабличныйДокумент, ТекстовыйДокумент - объект, который может быть макетом. 
//
Функция ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ХешСхемыКомпоновкиДанных) Экспорт
	
	Возврат ИсточникиДанныхСервер.ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ХешСхемыКомпоновкиДанных);
	
КонецФункции

// Возвращает описание типов правил получения фактических данных
//
// Возвращаемое значение:
//  ОписаниеТипов
//
Функция ОписаниеТипаПравил() Экспорт
	ТипыПравил = Новый Массив;
	ТипыПравил.Добавить(Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов"));
	ТипыПравил.Добавить(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"));
	
	Возврат Новый ОписаниеТипов(ТипыПравил);
КонецФункции 

// Возвращает описание типов типа правила получения фактических данных
//
// Возвращаемое значение:
//  ОписаниеТипов
//
Функция ОписаниеТипаПолученияДанныхБюджетирования() Экспорт
	Возврат Новый ОписаниеТипов("ПеречислениеСсылка.ТипПравилаПолученияФактическихДанныхБюджетирования");
КонецФункции 

// Возвращает выражение суммового показателя для правила получения фактических данных.
// 
// Параметры:
//	ИмяСправочникаИсточника      - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов". См. ИсточникиДанныхПовтИсп.ПоддерживаемыеСправочникиИсточникиДанных
//	ИдентификаторИсточникаДанных - Строка - имя поставляемого макета или хеш-сумма произвольной схемы компоновки данных. В СКД должен быть набор данных - ОбъединенныйФакт
//	ИсточникВалюты               - Строка - может принимать значения "Валюта", "ВалютаУпр", "ВалютаРегл", "ВалютаМеждународ", "КорВалюта"
//	РазделИсточникаДанных        - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - оперативный, международный, регламентированный учет или произвольные данные
//	ТипИтога                     - ПеречислениеСсылка.ТипыИтогов - тип итоговых данных по счету, если он источник данных
//	ИсточникСуммыОперации        - ПеречислениеСсылка.ПоказателиАналитическихРегистров, Неопределено - источник получения суммы из аналитического регистра
//  ИсточникВалютный             - Булево - признак того, что суммы могут хранятся в разных валютах.
//
// Возвращаемое значение:
//	Строка - имя поля в схеме-источнике данных.
//
Функция ВыражениеПоказателяСуммы(ИмяСправочникаИсточника, ИдентификаторИсточникаДанных, ИсточникВалюты, РазделИсточникаДанных, ТипИтога, ИсточникСуммыОперации = Неопределено, ИсточникВалютный = Ложь) Экспорт
	
	ВыражениеПоказателяСуммы = Неопределено;
	
	ИсточникиСуммы = ВыраженияПоказателейСуммы(ИмяСправочникаИсточника, 
		ИдентификаторИсточникаДанных, 
		РазделИсточникаДанных, 
		ТипИтога, 
		ИсточникСуммыОперации,
		ИсточникВалютный);
	
	ИсточникиСуммы.Свойство(ИсточникВалюты, ВыражениеПоказателяСуммы);
	
	Возврат ВыражениеПоказателяСуммы;
	
КонецФункции

// Возвращает все возможные выражения суммового показателя для правила получения фактических данных.
// 
// Параметры:
//  ИмяСправочникаИсточника      - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов". См. ИсточникиДанныхПовтИсп.ПоддерживаемыеСправочникиИсточникиДанных
//  ИдентификаторИсточникаДанных - Строка - имя поставляемого макета или хеш-сумма произвольной схемы компоновки данных.
//                                          В СКД должен быть набор данных - ОбъединенныйФакт.
//  РазделИсточникаДанных        - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - оперативный,
//      международный, регламентированный учет или произвольные данные.
//  ТипИтога                     - ПеречислениеСсылка.ТипыИтогов, Неопределено - тип итоговых данных по счету, если он
//                                                                               источник данных.
//  ИсточникСуммыОперации        - ПеречислениеСсылка.ПоказателиАналитическихРегистров, Неопределено - источник
//      получения суммы из аналитического регистра.
//  ИсточникВалютный             - Булево - признак того, что суммы могут хранятся в разных валютах.
//
// Возвращаемое значение:
//	Структура - сопоставленные показатели факта и поля источника данных:
//		*Ключ     - Строка - имя показателя фактических данных
//		*Значение - Строка - имя поля в схеме-источнике данных.
// 
Функция ВыраженияПоказателейСуммы(ИмяСправочникаИсточника, ИдентификаторИсточникаДанных, РазделИсточникаДанных, ТипИтога = Неопределено, ИсточникСуммыОперации = Неопределено, ИсточникВалютный = Ложь) Экспорт
	
	ИсточникиСуммы = Новый Структура;
	РазделыИсточниковДанных = Перечисления.РазделыИсточниковДанныхБюджетирования;
	
	Если РазделИсточникаДанных = РазделыИсточниковДанных.ОперативныйУчет
		И ЗначениеЗаполнено(ИдентификаторИсточникаДанных) Тогда
		
		Если ИдентификаторИсточникаДанных <> "ДвиженияДенежныхСредствКВыплате" Тогда
			ПоставляемаяСхема = ПолучитьМакетСправочника(ИмяСправочникаИсточника, ИдентификаторИсточникаДанных);
			НаборДанных = НаборДанныхСКДИсточника(ПоставляемаяСхема, ИмяСправочникаИсточника, ИдентификаторИсточникаДанных);
		КонецЕсли;
		
		Если ИмяСправочникаИсточника = "ПравилаПолученияФактаПоПоказателямБюджетов" Тогда
			
			БюджетированиеСервер.ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, НаборДанных, Истина);
			
		ИначеЕсли ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов" Тогда
			
			Если ИдентификаторИсточникаДанных = "ДвиженияДенежныхСредствКВыплате" Тогда
				ПоказателиРегистра = ПоказателиДвиженияДенежныхСредствКВыплате();
			Иначе
				ПоказателиРегистра = МеждународныйУчетСерверПовтИсп.Показатели(ИдентификаторИсточникаДанных);
			КонецЕсли;
			РесурсыИсточникаСуммы = ПоказателиРегистра.Получить(ИсточникСуммыОперации).Ресурсы;
			
			Для каждого Ресурс Из РесурсыИсточникаСуммы Цикл
				ПолеСуммы = Ресурс["Имя"];
				Если ИдентификаторИсточникаДанных <> "ДвиженияДенежныхСредствКВыплате"
					И НаборДанных.Поля.Найти(ПолеСуммы) = Неопределено Тогда
					// Ресурс не выбирается в источнике
					Продолжить;
				КонецЕсли;
				Если Ресурс["ИсточникВалюты"] = "ВалютаУпр" Тогда
					ИсточникиСуммы.Вставить("ВалютаУпр", ПолеСуммы);
				ИначеЕсли Ресурс["ИсточникВалюты"] = "ВалютаРегл" Тогда
					ИсточникиСуммы.Вставить("ВалютаРегл", ПолеСуммы);
				Иначе
					ИсточникиСуммы.Вставить("Валюта", ПолеСуммы);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли РазделИсточникаДанных = РазделыИсточниковДанных.РегламентированныйУчет Тогда
		
		ИсточникиСуммы.Вставить("ВалютаРегл", БюджетированиеСервер.ПолеРесурсаБухгалтерии("Сумма", ТипИтога));
		ИсточникиСуммы.Вставить("ВалютаУпр", БюджетированиеСервер.ПолеРесурсаБухгалтерии("СуммаУУ", ТипИтога));
		Если ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", БюджетированиеСервер.ПолеРесурсаБухгалтерии("СуммаВВалюте", ТипИтога));
		КонецЕсли;
		
	ИначеЕсли РазделИсточникаДанных = РазделыИсточниковДанных.МеждународныйУчет Тогда
		
		ИсточникиСуммы.Вставить("ВалютаМеждународ", БюджетированиеСервер.ПолеРесурсаБухгалтерии("Сумма", ТипИтога));
		Если ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", БюджетированиеСервер.ПолеРесурсаБухгалтерии("СуммаВВалюте", ТипИтога));
		КонецЕсли;
		
	ИначеЕсли РазделИсточникаДанных = РазделыИсточниковДанных.ПроизвольныеДанные Тогда
		
		ПроизвольнаяСхема = ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ИдентификаторИсточникаДанных);
		
		НаборДанных = НаборДанныхСКДИсточника(ПроизвольнаяСхема, ИмяСправочникаИсточника, ИдентификаторИсточникаДанных);
	
		БюджетированиеСервер.ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, НаборДанных, Истина);
		
	КонецЕсли;
	
	Возврат ИсточникиСуммы;
	
КонецФункции

// Возвращает выражение количественного показателя для правила получения фактических данных.
// 
// Параметры:
//  ИмяСправочникаИсточника      - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов". См. ИсточникиДанныхПовтИсп.ПоддерживаемыеСправочникиИсточникиДанных
//  ИдентификаторИсточникаДанных - Строка - имя поставляемого макета или хеш-сумма произвольной схемы компоновки данных
//  РазделИсточникаДанных        - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - оперативный,
//      международный, регламентированный учет или произвольные данные.
//  ТипИтога                     - ПеречислениеСсылка.ТипыИтогов - тип итоговых данных по счету, если он источник данных.
//
// Возвращаемое значение:
//	Структура - сопоставленные показатели факта и поля источника данных:
//		*Ключ     - Строка - имя показателя фактических данных
//		*Значение - Строка - имя поля в схеме-источнике данных.
// 
Функция ВыражениеПоказателяКоличества(ИмяСправочникаИсточника, ИдентификаторИсточникаДанных, РазделИсточникаДанных, ТипИтога) Экспорт
	
	ВыражениеПоказателяКоличества = Неопределено;
	
	ИсточникиКоличества = Новый Структура;
	РазделыИсточниковДанных = Перечисления.РазделыИсточниковДанныхБюджетирования;
	
	Если РазделИсточникаДанных = РазделыИсточниковДанных.ОперативныйУчет
		И ЗначениеЗаполнено(ИдентификаторИсточникаДанных)
		И ИдентификаторИсточникаДанных <> "ДвиженияДенежныхСредствКВыплате" Тогда
		
		ПоставляемаяСхема = ПолучитьМакетСправочника(ИмяСправочникаИсточника, ИдентификаторИсточникаДанных);
		БюджетированиеСервер.ЗаполнитьИсточникиКоличестваПоСхеме(ИсточникиКоличества, ПоставляемаяСхема.НаборыДанных[0]);
			
	ИначеЕсли РазделИсточникаДанных = РазделыИсточниковДанных.РегламентированныйУчет
			ИЛИ РазделИсточникаДанных = РазделыИсточниковДанных.МеждународныйУчет Тогда
		
		ИсточникиКоличества.Вставить("Количество", БюджетированиеСервер.ПолеРесурсаБухгалтерии("Количество", ТипИтога));
		
	ИначеЕсли РазделИсточникаДанных = РазделыИсточниковДанных.ПроизвольныеДанные Тогда
		
		ПроизвольнаяСхема = ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ИдентификаторИсточникаДанных);
		БюджетированиеСервер.ЗаполнитьИсточникиКоличестваПоСхеме(ИсточникиКоличества, ПроизвольнаяСхема.НаборыДанных[0]);
		
	КонецЕсли;
	
	ИсточникиКоличества.Свойство("Количество", ВыражениеПоказателяКоличества);
	
	Возврат ВыражениеПоказателяКоличества;
	
КонецФункции

// Возвращает служебные поля-измерения, недоступные для выбора пользователем
//
// Возвращаемое значение:
//	Массив из Строка - массив служебных полей-измерений.
//
Функция СлужебныеПоляМакетовРасчета() Экспорт
	
	СлужебныеПоля = Новый Массив;
	
	СлужебныеПоля.Добавить("СистемныеПоля");
	СлужебныеПоля.Добавить("ПараметрыДанных");
	
	// Поля-периоды не являются полями отборов
	СлужебныеПоля.Добавить("ПериодСекунда");
	СлужебныеПоля.Добавить("ПериодДень");
	СлужебныеПоля.Добавить("ПериодНеделя");
	СлужебныеПоля.Добавить("ПериодДекада");
	СлужебныеПоля.Добавить("ПериодМесяц");
	СлужебныеПоля.Добавить("ПериодКвартал");
	СлужебныеПоля.Добавить("ПериодПолугодие");
	СлужебныеПоля.Добавить("ПериодГод");
	СлужебныеПоля.Добавить("ПериодКурса");
	СлужебныеПоля.Добавить("Период");
	
	// Вспомогательные поля
	СлужебныеПоля.Добавить("ИдентификаторИсточникаДанных");
	СлужебныеПоля.Добавить("ХозяйственнаяОперация");
	СлужебныеПоля.Добавить("Счет");
	СлужебныеПоля.Добавить("ИсточникДанных");
	
	// Вспомогательные параметры
	СлужебныеПоля.Добавить("ПривилегированныйРежим");
	СлужебныеПоля.Добавить("ПривилегированныйРежимИсточника");
	
	// Поле для формирования корреспонденции регистров
	СлужебныеПоля.Добавить("ИдентификаторФинЗаписи");
	
	Возврат СлужебныеПоля;
	
КонецФункции

// Возвращает соответствие суммовых показателей для хозяйственной операции в зависимости от типов данных учета приход и расход
//
// Параметры:
//  ИсточникДанных - СправочникСсылка.НастройкиХозяйственныхОпераций
//  СписокВыбора - Булево - Истина, если формируется список показателей для выбора пользователем
//
// Возвращаемое значение:
//	Соответствие из КлючИЗначение:
//	* Ключ - ПеречислениеСсылка.ПоказателиАналитическихРегистров
//	* Значение - Строка - имя поля, связанное с показателем.
//
Функция ПоказателиСуммыПоИсточникуДанных(ИсточникДанных, СписокВыбора = Ложь) Экспорт
	
	Если ТипЗнч(ИсточникДанных) <> Тип("СправочникСсылка.НастройкиХозяйственныхОпераций") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыДанныхУчетаИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных, "Приход, Расход");
	ТипыДанныхУчета = Новый Массив;
	ТипыДанныхУчета.Добавить(ТипыДанныхУчетаИсточника.Приход);
	Если ТипыДанныхУчетаИсточника.Приход <> ТипыДанныхУчетаИсточника.Расход Тогда
		ТипыДанныхУчета.Добавить(ТипыДанныхУчетаИсточника.Расход);
	КонецЕсли;
	
	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = "Ресурсы";
	СвойстваРесурсов = "Имя, ИсточникВалюты";
	
	Если ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.ДенежныеСредства) <> Неопределено Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5") Или Не СписокВыбора Тогда
			
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеВРамкахЛимита", "Валюта"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеВРамкахЛимита,
				Новый Структура(СвойстваПоказателей, МассивРесурсов));
			
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеСверхЛимита", "Валюта"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеСверхЛимита,
				Новый Структура(СвойстваПоказателей, МассивРесурсов));
			
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплате", "Валюта"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплате,
				Новый Структура(СвойстваПоказателей, МассивРесурсов));
			
		КонецЕсли;
		
		Если ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.Контрагенты) <> Неопределено Тогда
			
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплатыУпр", "ВалютаУпр"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплатыРегл", "ВалютаРегл"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаОплатыВал", "Валюта"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаОплаты, Новый Структура(СвойстваПоказателей, МассивРесурсов));
			
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплатыУпр", "ВалютаУпр"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплатыРегл", "ВалютаРегл"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПостоплатыВал", "Валюта"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПостоплаты,
				Новый Структура(СвойстваПоказателей, МассивРесурсов));
			
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплатыУпр", "ВалютаУпр"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплатыРегл", "ВалютаРегл"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаПредоплатыВал", "Валюта"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПредоплаты,
				Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		Иначе
			
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаУпр", "ВалютаУпр"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВал", "Валюта"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма,
				Новый Структура(СвойстваПоказателей, МассивРесурсов));
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.Номенклатура) <> Неопределено
		И ТипыДанныхУчетаИсточника.Расход <> Перечисления.ТипыДанныхУчета.Контрагенты Тогда
		
		МассивРесурсов = Новый Массив;
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьУпр", "ВалютаУпр"));
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьРегл", "ВалютаРегл"));
		Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Себестоимость,
			Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		МассивРесурсов = Новый Массив;
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьРегл", "ВалютаРегл"));
		Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СебестоимостьРегл,
			Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		МассивРесурсов = Новый Массив;
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьУпр", "ВалютаУпр"));
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
		Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Стоимость,
			Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		МассивРесурсов = Новый Массив;
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьРегл", "ВалютаРегл"));
		Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьРегл,
			Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		МассивРесурсов = Новый Массив;
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаДопРасходовУпр", "ВалютаУпр"));
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаДопРасходовРегл", "ВалютаРегл"));
		Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходов,
			Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		Если ТипыДанныхУчетаИсточника.Расход = Перечисления.ТипыДанныхУчета.Номенклатура Тогда
		
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "РезервПодОбесценениеУпр", "ВалютаУпр"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "РезервПодОбесценениеРегл", "ВалютаРегл"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.РезервПодОбесценение,
				Новый Структура(СвойстваПоказателей, МассивРесурсов));
				
			Если ТипыДанныхУчетаИсточника.Приход = Перечисления.ТипыДанныхУчета.Контрагенты Тогда
				
				МассивРесурсов = Новый Массив;
				МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СебестоимостьБезНДСУпр", "ВалютаУпр"));
				Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СебестоимостьБезНДС,
					Новый Структура(СвойстваПоказателей, МассивРесурсов));
				
				МассивРесурсов = Новый Массив;
				МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СтоимостьБезНДСУпр", "ВалютаУпр"));
				Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьБезНДС,
					Новый Структура(СвойстваПоказателей, МассивРесурсов));
				
				МассивРесурсов = Новый Массив;
				МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДССтоимостиУпр", "ВалютаУпр"));
				Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДССтоимости,
					Новый Структура(СвойстваПоказателей, МассивРесурсов));

				МассивРесурсов = Новый Массив;
				МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСДопРасходовУпр", "ВалютаУпр"));
				Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДСДопРасходов,
					Новый Структура(СвойстваПоказателей, МассивРесурсов));
				
				МассивРесурсов = Новый Массив;
				МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаДопРасходовБезНДСУпр", "ВалютаУпр"));
				Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходовБезНДС,
					Новый Структура(СвойстваПоказателей, МассивРесурсов));
			
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.Контрагенты) <> Неопределено
		И ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.ДенежныеСредства) = Неопределено Тогда
		
		МассивРесурсов = Новый Массив;
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаУпр", "ВалютаУпр"));
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
		Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма,
			Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		МассивРесурсов = Новый Массив;
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСУпр", "ВалютаУпр"));
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаБезНДСРегл", "ВалютаРегл"));
		Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС,
			Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		МассивРесурсов = Новый Массив;
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСУпр", "ВалютаУпр"));
		МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
		Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС,
			Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
	КонецЕсли;

	Если Показатели.Количество() = 0 Тогда
		
		Если ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.НДС) <> Неопределено Тогда
		
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСУпр", "ВалютаУпр"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаНДСРегл", "ВалютаРегл"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС,
				Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		Иначе
		
			МассивРесурсов = Новый Массив;
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаУпр", "ВалютаУпр"));
			МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма,
				Новый Структура(СвойстваПоказателей, МассивРесурсов));
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

// Возвращает суммовые показатели по умолчанию для хозяйственной операции в зависимости от типов данных учета приход и расход (для служебного регистра корреспонденций)
//
// Параметры:
//  ИсточникДанных - СправочникСсылка.НастройкиХозяйственныхОпераций
//
// Возвращаемое значение:
//	Массив из ПеречислениеСсылка.ПоказателиАналитическихРегистров
//
Функция ПоказателиСуммыПоУмолчаниюПоИсточникуДанных(ИсточникДанных) Экспорт
	
	Если ТипЗнч(ИсточникДанных) <> Тип("СправочникСсылка.НастройкиХозяйственныхОпераций") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыДанныхУчетаИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных, "Приход, Расход");
	ТипыДанныхУчета = Новый Массив;
	ТипыДанныхУчета.Добавить(ТипыДанныхУчетаИсточника.Приход);
	ТипыДанныхУчета.Добавить(ТипыДанныхУчетаИсточника.Расход);
	
	Показатели = Новый Массив;
	
	Если ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.Контрагенты) <> Неопределено
		И ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.ДенежныеСредства) <> Неопределено Тогда
		
		Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.СуммаПостоплаты);
		Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.СуммаПредоплаты)
		
	Иначе
		
		Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.Сумма);
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

// Возвращает соответствие количественных показателей для хозяйственной операции в зависимости от типов данных учета приход и расход
//
// Параметры:
//  ИсточникДанных - СправочникСсылка.НастройкиХозяйственныхОпераций
//
// Возвращаемое значение:
//	Соответствие из КлючИЗначение:
//	* Ключ - ПеречислениеСсылка.ПоказателиАналитическихРегистров
//	* Значение - Строка - имя поля, связанное с показателем.
//
Функция ПоказателиКоличестваПоИсточникуДанных(ИсточникДанных) Экспорт
	
	Если ТипЗнч(ИсточникДанных) <> Тип("СправочникСсылка.НастройкиХозяйственныхОпераций") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыДанныхУчетаИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных, "Приход, Расход");
	ТипыДанныхУчета = Новый Массив;
	ТипыДанныхУчета.Добавить(ТипыДанныхУчетаИсточника.Приход);
	ТипыДанныхУчета.Добавить(ТипыДанныхУчетаИсточника.Расход);
	
	Показатели = Новый Соответствие;
	
	Если ТипыДанныхУчета.Найти(Перечисления.ТипыДанныхУчета.Номенклатура) <> Неопределено Тогда
		
		Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Количество, "Количество");
		Если ТипыДанныхУчетаИсточника.Приход = ТипыДанныхУчетаИсточника.Расход Тогда
			Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.КорКоличество, "КорКоличество");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Показатели;
	
КонецФункции

// Возвращает массив суммовых показателей, относящихся к контролю лимита расхода денежных средств.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ПоказателиАналитическихРегистров
//
Функция ПоказателиДвиженияДенежныхСредствКВыплате() Экспорт
	
	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = "Ресурсы";
	СвойстваРесурсов = "Имя, ИсточникВалюты";
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеВРамкахЛимита", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеВРамкахЛимита,
		Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплатеСверхЛимита", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплатеСверхЛимита,
		Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаКВыплате", "ВалютаПлатежа"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаКВыплате,
		Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

// Возвращает структуру аналитики по указанному типу данных учета
//
// Параметры:
//	ТипДанныхУчета - ПеречислениеСсылка.ТипыДанныхУчета - тип данных учета
//
// Возвращаемое значение:
//	Структура:
//	* Подразделение - Структура - параметры поля аналитики:
//	  ** ПутьКДанным - Строка - путь к полю аналитики.
//	  ** Тип - ОписаниеТипов - тип значения аналитики.
//	  ** Заголовок - Строка - представление поля аналитики.
//	  ** ИмяКор - Строка - имя поля в качестве кор. аналитики
//	  ** ЗаголовокКор - Строка - представление поля кор. аналитики
//
Функция СтруктураАналитикиПоТипуДанныхУчета(ТипДанныхУчета) Экспорт
	
	ШаблонПараметровПоляАналитики = Новый Структура;
	ШаблонПараметровПоляАналитики.Вставить("ПутьКДанным");
	ШаблонПараметровПоляАналитики.Вставить("Тип");
	ШаблонПараметровПоляАналитики.Вставить("Заголовок");
	ШаблонПараметровПоляАналитики.Вставить("ИмяКор");
	ШаблонПараметровПоляАналитики.Вставить("ЗаголовокКор");
	
	СтруктураАналитики = Новый Структура;
	
	// Подразделение
	ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
	ПараметрыПоляАналитики.ПутьКДанным = "Подразделение";
	ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ПараметрыПоляАналитики.Заголовок = НСтр("ru='Подразделение'");
	ПараметрыПоляАналитики.ИмяКор = "КорПодразделение";
	ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. подразделение'");
	СтруктураАналитики.Вставить("Подразделение", ПараметрыПоляАналитики);
	
	// НаправлениеДеятельности
	ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
	ПараметрыПоляАналитики.ПутьКДанным = "НаправлениеДеятельности";
	ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ПараметрыПоляАналитики.Заголовок = НСтр("ru='Направление деятельности'");
	ПараметрыПоляАналитики.ИмяКор = "КорНаправлениеДеятельности";
	ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. направление деятельности'");
	СтруктураАналитики.Вставить("НаправлениеДеятельности", ПараметрыПоляАналитики);
	
	// Номенклатура
	Если ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Номенклатура Тогда
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "АналитикаУчетаНоменклатуры.Номенклатура";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Номенклатура'");
		ПараметрыПоляАналитики.ИмяКор = "КорНоменклатура";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. номенклатура'");
		СтруктураАналитики.Вставить("Номенклатура", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "АналитикаУчетаНоменклатуры.МестоХранения";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия,СправочникСсылка.Партнеры,СправочникСсылка.Склады");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Склад'");
		ПараметрыПоляАналитики.ИмяКор = "КорСклад";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. склад'");
		СтруктураАналитики.Вставить("Склад", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "ВидЗапасов";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Вид запасов'");
		ПараметрыПоляАналитики.ИмяКор = "КорВидЗапасов";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. вид запасов'");
		СтруктураАналитики.Вставить("ВидЗапасов", ПараметрыПоляАналитики);
		
	// Контрагенты
	ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Контрагенты Тогда
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "АналитикаУчетаПоПартнерам.Партнер";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Партнер'");
		ПараметрыПоляАналитики.ИмяКор = "КорПартнер";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. партнер'");
		СтруктураАналитики.Вставить("Партнер", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "АналитикаУчетаПоПартнерам.Контрагент";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.Контрагенты,СправочникСсылка.Организации");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Контрагент'");
		ПараметрыПоляАналитики.ИмяКор = "КорКонтрагент";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. контрагент'");
		СтруктураАналитики.Вставить("Контрагент", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "ОбъектРасчетов.Договор";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.ДоговорыАренды,СправочникСсылка.ДоговорыМеждуОрганизациями,СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.ДоговорыКредитовИДепозитов");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Договор'");
		ПараметрыПоляАналитики.ИмяКор = "КорДоговор";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. договор'");
		СтруктураАналитики.Вставить("Договор", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "ОбъектРасчетов";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов,СправочникСсылка.ПодарочныеСертификаты");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Объект расчетов'");
		ПараметрыПоляАналитики.ИмяКор = "КорОбъектРасчетов";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. объект расчетов'");
		СтруктураАналитики.Вставить("ОбъектРасчетов", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "РасчетныйДокумент";
		ПараметрыПоляАналитики.Тип = Метаданные.ОпределяемыеТипы.РасчетныйДокумент.Тип;
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Расчетный документ'");
		ПараметрыПоляАналитики.ИмяКор = "КорРасчетныйДокумент";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. расчетный документ'");
		СтруктураАналитики.Вставить("РасчетныйДокумент", ПараметрыПоляАналитики);
	
	// ДенежныеСредства
	ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДенежныеСредства Тогда
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций,СправочникСсылка.Кассы,СправочникСсылка.КассыККМ,СправочникСсылка.Контрагенты,СправочникСсылка.ФизическиеЛица,СправочникСсылка.ДоговорыКредитовИДепозитов,СправочникСсылка.ЭквайринговыеТерминалы");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Денежные средства'");
		ПараметрыПоляАналитики.ИмяКор = "КорДенежныеСредства";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. денежные средства'");
		СтруктураАналитики.Вставить("ДенежныеСредства", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДенежныхСредств");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Тип денежных средств'");
		ПараметрыПоляАналитики.ИмяКор = "КорТипДенежныхСредств";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. тип денежных средств'");
		СтруктураАналитики.Вставить("ТипДенежныхСредств", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "СтатьяДвиженияДенежныхСредств";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Статья движения денежных средств'");
		ПараметрыПоляАналитики.ИмяКор = "КорСтатьяДвиженияДенежныхСредств";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. статья движения денежных средств'");
		СтруктураАналитики.Вставить("СтатьяДвиженияДенежныхСредств", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "СтатьяКалькуляции";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.СтатьиКалькуляции");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Статья калькуляции'");
		ПараметрыПоляАналитики.ИмяКор = "КорСтатьяКалькуляции";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. статья калькуляции'");
		СтруктураАналитики.Вставить("СтатьяКалькуляции", ПараметрыПоляАналитики);
	
	// ДоходыРасходы
	ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы Тогда
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "СтатьяДоходовРасходов";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов,ПланВидовХарактеристикСсылка.СтатьиДоходов");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Статья доходов/расходов'");
		ПараметрыПоляАналитики.ИмяКор = "КорСтатьяДоходовРасходов";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. статья доходов/расходов'");
		СтруктураАналитики.Вставить("СтатьяДоходовРасходов", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "АналитикаДоходов";
		ПараметрыПоляАналитики.Тип = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов.Тип;
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Аналитика доходов'");
		ПараметрыПоляАналитики.ИмяКор = "КорАналитикаДоходов";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. аналитика доходов'");
		СтруктураАналитики.Вставить("АналитикаДоходов", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "АналитикаРасходов";
		ПараметрыПоляАналитики.Тип = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип;
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Аналитика расходов'");
		ПараметрыПоляАналитики.ИмяКор = "КорАналитикаРасходов";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. аналитика расходов'");
		СтруктураАналитики.Вставить("АналитикаРасходов", ПараметрыПоляАналитики);
	
	// ПрочиеАктивыПассивы
	ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы Тогда
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "Статья";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Статья'");
		ПараметрыПоляАналитики.ИмяКор = "КорСтатьяАктивовПассивов";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. статья'");
		СтруктураАналитики.Вставить("СтатьяАктивовПассивов", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "АналитикаАктивовПассивов";
		ПараметрыПоляАналитики.Тип = Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип;
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Аналитика активов/пассивов'");
		ПараметрыПоляАналитики.ИмяКор = "КорАналитикаАктивовПассивов";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. аналитика активов/пассивов'");
		СтруктураАналитики.Вставить("АналитикаАктивовПассивов", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "ГруппаФинансовогоУчета";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Группа финансового учета'");
		ПараметрыПоляАналитики.ИмяКор = "КорГруппаФинансовогоУчета";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. группа финансового учета'");
		СтруктураАналитики.Вставить("ГруппаФинансовогоУчета", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "Контрагент";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Контрагент'");
		ПараметрыПоляАналитики.ИмяКор = "КорКонтрагент";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. контрагент'");
		СтруктураАналитики.Вставить("Контрагент", ПараметрыПоляАналитики);
	
	// НДС
	ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.НДС Тогда
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "Контрагент";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Контрагент'");
		ПараметрыПоляАналитики.ИмяКор = "КорКонтрагент";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. контрагент'");
		СтруктураАналитики.Вставить("Контрагент", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "СчетФактура";
		ПараметрыПоляАналитики.Тип = Метаданные.ОпределяемыеТипы.ОснованиеДвиженийПоНДС.Тип;
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Счет-фактура'");
		ПараметрыПоляАналитики.ИмяКор = "КорСчетФактура";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. счет=фактура'");
		СтруктураАналитики.Вставить("СчетФактура", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "СтавкаНДС";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Ставка НДС'");
		ПараметрыПоляАналитики.ИмяКор = "КорСтавкаНДС";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. ставка НДС'");
		СтруктураАналитики.Вставить("СтавкаНДС", ПараметрыПоляАналитики);
		
		ПараметрыПоляАналитики = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонПараметровПоляАналитики);
		ПараметрыПоляАналитики.ПутьКДанным = "ВидЦенности";
		ПараметрыПоляАналитики.Тип = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей");
		ПараметрыПоляАналитики.Заголовок = НСтр("ru='Вид ценности'");
		ПараметрыПоляАналитики.ИмяКор = "КорВидЦенности";
		ПараметрыПоляАналитики.ЗаголовокКор = НСтр("ru='Кор. вид ценности'");
		СтруктураАналитики.Вставить("ВидЦенности", ПараметрыПоляАналитики);
	
	КонецЕсли;
	
	ИсточникиДанныхЛокализация.ДобавитьАналитикуПоТипуДанныхУчета(ТипДанныхУчета, СтруктураАналитики, ШаблонПараметровПоляАналитики);
	
	Возврат СтруктураАналитики;

КонецФункции

// Возвращает имя поля аналитики статьи бюджета в зависимости от типа данных учета.
//
// Параметры:
//  ИмяПоля - Строка - исходное имя поля аналитики
//  ЗаголовокПоля - Строка - представление заголовка поля аналитики
//  ТипДанныхУчета - ПеречислениеСсылка.ТипыДанныхУчета - тип данных учета, для которого определяется имя поля аналитики.
//
// Возвращаемое значение:
//  Строка - видоизмененное поле аналитики в зависимости от типа данных учета.
//
Функция ИмяПоляПоТипуДанныхУчета(ИмяПоля, ЗаголовокПоля, ТипДанныхУчета) Экспорт
	
	ПараметрыПоля = Новый Структура("ИмяПоля, ЗаголовокПоля", ИмяПоля, ЗаголовокПоля);
	
	Если ИмяПоля = "НаправлениеДеятельности" Тогда
		Если ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДенежныеСредства Тогда
			ИмяПоля = "НаправлениеДеятельностиДС";
			ЗаголовокПоля = НСтр("ru='Направление деятельности денежных средств'")
		ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Контрагенты
			Или ТипДанныхУчета = Перечисления.ТипыДанныхУчета.НДС Тогда
			ИмяПоля = "НаправлениеДеятельностиКонтрагента";
			ЗаголовокПоля = НСтр("ru='Направление деятельности контрагента'")
		ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.Номенклатура Тогда
			ИмяПоля = "НаправлениеДеятельностиНоменклатуры";
			ЗаголовокПоля = НСтр("ru='Направление деятельности номенклатуры'")
		ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы Тогда
			ИмяПоля = "НаправлениеДеятельностиДоходовРасходов";
			ЗаголовокПоля = НСтр("ru='Направление деятельности доходов/расходов'")
		Иначе
			ИмяПоля = "НаправлениеДеятельностиАктивовПассивов";
			ЗаголовокПоля = НСтр("ru='Направление деятельности активов/пассивов'")
		КонецЕсли;
		ПараметрыПоля.ИмяПоля = ИмяПоля;
		ПараметрыПоля.ЗаголовокПоля = ЗаголовокПоля;
	ИначеЕсли ИмяПоля = "Подразделение" Тогда
		Если ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДоходыРасходы Тогда
			ИмяПоля = "ПодразделениеДоходовРасходов";
			ЗаголовокПоля = НСтр("ru='Подразделение доходов/расходов'")
		ИначеЕсли ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы Тогда
			ИмяПоля = "ПодразделениеАктивовПассивов";
			ЗаголовокПоля = НСтр("ru='Подразделение активов/пассивов'")
		КонецЕсли;
		ПараметрыПоля.ИмяПоля = ИмяПоля;
		ПараметрыПоля.ЗаголовокПоля = ЗаголовокПоля;
	КонецЕсли;
	
	Возврат ПараметрыПоля;
	
КонецФункции

// Возвращает параметры суммовых и количественных ресурсов балансовых регистров.
//
// Возвращаемое значение:
//  Структура:
//  * ДлинаСуммы - Число
//  * ТочностьСуммы - Число
//  * ДлинаКоличества - Число
//  * ТочностьКоличества - Число
//
Функция ПараметрыРесурсовСуммыИКоличества() Экспорт
	
	ПараметрыРесурсов = Новый Структура;
	ПараметрыРесурсов.Вставить("ДлинаСуммы", 15);
	ПараметрыРесурсов.Вставить("ТочностьСуммы", 2);
	ПараметрыРесурсов.Вставить("ДлинаКоличества", 15);
	ПараметрыРесурсов.Вставить("ТочностьКоличества", 3);
	
	Возврат ПараметрыРесурсов;
	
КонецФункции

// Возвращает массив показателей, относящихся одновременно к обоим балансовым регистрам и использующихся только в паре.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ПоказателиАналитическихРегистров
//
Функция ПоказателиПоКорреспондирующимРегистрам() Экспорт
	
	Показатели = Новый Массив;
	Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.СебестоимостьБезНДС);
	Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьБезНДС);
	Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходовБезНДС);
	Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДССтоимости);
	Показатели.Добавить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДСДопРасходов);
	
	Возврат Показатели;
	
КонецФункции

// Возвращает соответствие показателей и их имен для добавления колонок в таблицу корреспонденций балансовых регистров
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ПоказателиАналитическихРегистров - показатеь
//  * Значение - Структура:
//   ** Ключ - Строка - тип показателя (упр, регл, вал)
//   ** Значение - Строка - имя показателя
//
Функция ИменаСуммовыхПоказателей() Экспорт
	
	ИменаПоказателей = Новый Соответствие;
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.Себестоимость,
		Новый Структура("Упр, Регл, Вал", "СебестоимостьУпр", "СебестоимостьРегл", "СебестоимостьВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СебестоимостьБезНДС,
		Новый Структура("Упр, Регл, Вал", "СебестоимостьБезНДСУпр", "СебестоимостьБезНДСРегл",
		"СебестоимостьБезНДСВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.Стоимость,
		Новый Структура("Упр, Регл, Вал", "СтоимостьУпр", "СтоимостьРегл", "СтоимостьВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СтоимостьБезНДС,
		Новый Структура("Упр, Регл, Вал", "СтоимостьБезНДСУпр", "СтоимостьБезНДСРегл", "СтоимостьБезНДСВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура("Упр, Регл, Вал",
		"СуммаУпр", "СуммаРегл", "СуммаВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаБезНДС,
		Новый Структура("Упр, Регл, Вал", "СуммаБезНДСУпр", "СуммаБезНДСРегл", "СуммаБезНДСВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходов,
		Новый Структура("Упр, Регл, Вал", "СуммаДопРасходовУпр", "СуммаДопРасходовРегл", "СуммаДопРасходовВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаДопРасходовБезНДС,
		Новый Структура("Упр, Регл, Вал", "СуммаДопРасходовБезНДСУпр", "СуммаДопРасходовБезНДСРегл",
		"СуммаДопРасходовБезНДСВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура("Упр, Регл, Вал",
		"СуммаНДСУпр", "СуммаНДСРегл", "СуммаНДСВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДСДопРасходов,
		Новый Структура("Упр, Регл, Вал", "СуммаНДСДопРасходовУпр", "СуммаНДСДопРасходовРегл",
		"СуммаНДСДопРасходовВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаОплаты,
		Новый Структура("Упр, Регл, Вал", "СуммаОплатыУпр", "СуммаОплатыРегл", "СуммаОплатыВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПостоплаты,
		Новый Структура("Упр, Регл, Вал", "СуммаПостоплатыУпр", "СуммаПостоплатыРегл", "СуммаПостоплатыВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаПредоплаты,
		Новый Структура("Упр, Регл, Вал", "СуммаПредоплатыУпр", "СуммаПредоплатыРегл", "СуммаПредоплатыВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.РезервПодОбесценение,
		Новый Структура("Упр, Регл, Вал", "РезервПодОбесценениеУпр", "РезервПодОбесценениеРегл",
		"РезервПодОбесценениеВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаРасходовНаПродажу,
		Новый Структура("Упр, Регл, Вал", "СуммаРасходовНаПродажуУпр", "СуммаРасходовНаПродажуРегл",
		"СуммаРасходовНаПродажуВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаРасходовНаПродажуБезНДС,
		Новый Структура("Упр, Регл, Вал", "СуммаРасходовНаПродажуБезНДСУпр", "СуммаРасходовНаПродажуБезНДСРегл",
		"СуммаРасходовНаПродажуБезНДСВал"));
	ИменаПоказателей.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДССтоимости,
		Новый Структура("Упр, Регл, Вал", "СуммаНДССтоимостиУпр", "СуммаНДССтоимостиРегл", "СуммаНДССтоимостиВал"));

	Возврат ИменаПоказателей;

КонецФункции

// Возвращает массив имен документов по указанному типу данных учета хозяйственной операции
//
// Параметры:
//  ТипДанныхУчета - ПеречислениеСсылка.ТипыДанныхУчета - тип данных учета
// Возвращаемое значение:
//  Массив из Строка - массив балансовых регистров
//
Функция ИменаВидовДокументовПоТипуДанныхУчета(ТипДанныхУчета) Экспорт
	
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	
	ТипыРегистраторов = Новый Массив;
	
	ТипыРегистраторовБюджетирования = РегистрыНакопления.ФактическиеДанныеБюджетирования.СоздатьНаборЗаписей().Отбор.Регистратор.ТипЗначения.Типы();
	
	Для Каждого МетаданныеРегистра Из РегистрыНакопленияМетаданные Цикл
		
		Если МетаданныеРегистра.Реквизиты.Найти("ИдентификаторФинЗаписи") = Неопределено
			Или МетаданныеРегистра.Реквизиты.Найти("НастройкаХозяйственнойОперации") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеРегистра = РегистрыНакопленияМетаданные.РасчетыСКлиентами
			Или МетаданныеРегистра = РегистрыНакопленияМетаданные.РасчетыСПоставщиками Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПараметрыОтраженияДвижений = РегистрыНакопления[МетаданныеРегистра.Имя].ПараметрыОтраженияДвиженийВФинансовомУчете(МетаданныеРегистра);
			Если ПараметрыОтраженияДвижений.ТипДанныхУчета <> ТипДанныхУчета Тогда
				Продолжить;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если МетаданныеРегистра = РегистрыНакопленияМетаданные.РасчетыСКлиентамиПоСрокам Тогда
			МетаданныеРегистра = РегистрыНакопленияМетаданные.РасчетыСКлиентами;
		ИначеЕсли МетаданныеРегистра = РегистрыНакопленияМетаданные.РасчетыСПоставщикамиПоСрокам Тогда
			МетаданныеРегистра = РегистрыНакопленияМетаданные.РасчетыСПоставщиками;
		КонецЕсли;
		
		ТипыРегистраторовПоРегистру = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей().Отбор.Регистратор.ТипЗначения.Типы();
		Для Каждого ТипРегистратора Из ТипыРегистраторовПоРегистру Цикл
			Если ТипыРегистраторов.Найти(ТипРегистратора) = Неопределено
				И ТипыРегистраторовБюджетирования.Найти(ТипРегистратора) <> Неопределено Тогда
				ТипыРегистраторов.Добавить(ТипРегистратора);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ИменаНеиспользуемыхДокументов = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИменаНеиспользуемыхДокументов();
	
	МассивИменВидовДокументов = Новый Массив;
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРегистратора);
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеТипа)
			И ИменаНеиспользуемыхДокументов.Найти(МетаданныеТипа.Имя) = Неопределено Тогда
			МассивИменВидовДокументов.Добавить(МетаданныеТипа.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИменВидовДокументов;
	
КонецФункции

// Возвращает соответствие имен видов документов, по которым осуществляется контроль лимита расхода денежных средств.
//
// Параметры:
//  ТипДанныхУчета - ПеречислениеСсылка.ТипыДанныхУчета
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   *Ключ - Строка - краткое имя документа
//   *Значение - Строка - полное имя документа
//
Функция ИменаВидовДокументовДляКонтроляЛимитов(ТипДанныхУчета) Экспорт
	
	ИменаВидовДокументов = Новый Соответствие;
	ИмяРегистра = "";
	
	Если ТипДанныхУчета = Перечисления.ТипыДанныхУчета.ДенежныеСредства Тогда
		ИмяРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваКВыплате.Имя;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяРегистра) Тогда
	
		ИменаНеиспользуемыхДокументов = ФинансовыйУчетПоДаннымБалансовыхРегистров.ИменаНеиспользуемыхДокументов();
		ТипыРегистраторовРегистраЛимитов = РегистрыНакопления.ЛимитыПоДаннымБюджетирования.СоздатьНаборЗаписей().Отбор.Регистратор.ТипЗначения.Типы();
		ТипыРегистраторовПоРегистру = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей().Отбор.Регистратор.ТипЗначения.Типы();
		ТипыРегистраторов = ОбщегоНазначенияУТКлиентСервер.ПересечениеМассивов(ТипыРегистраторовРегистраЛимитов,
			ТипыРегистраторовПоРегистру);
		Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРегистратора);
			Если ИменаНеиспользуемыхДокументов.Найти(МетаданныеТипа.Имя) = Неопределено Тогда
				ИменаВидовДокументов.Вставить(МетаданныеТипа.Имя, МетаданныеТипа.ПолноеИмя());
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИменаВидовДокументов;
	
КонецФункции

// Возвращает массив соответствий типов данных учета Приход-Расход для правила получения фактических данных
// с произвольным источником данных.
// Типы данных учета зависят от наличия обращений в запросе к оборотным регистрам.
//
// Параметры:
//  ПравилоФакта - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - правило с произвольным источником данных
//
// Возвращаемое значение:
//  Массив из Структура:
//   *ТипДанныхУчетаПриход - ПеречислениеСсылка.ТипыДанныхУчета - приход
//   *ТипДанныхУчетаРасход - ПеречислениеСсылка.ТипыДанныхУчета - расход
//
Функция ТипыДанныхУчетаПравилаСПроизвольнымиДанными(ПравилоФакта) Экспорт
	
	СоответствиеИсточниковПроизвольныхДанных = Новый Соответствие;
	СоответствиеИсточниковПроизвольныхДанных.Вставить(
		Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.ПолноеИмя(),
		Новый Структура("ТипДанныхУчетаРасход, ТипДанныхУчетаПриход", Перечисления.ТипыДанныхУчета.ДенежныеСредства,
		Перечисления.ТипыДанныхУчета.ДоходыРасходы));
	СоответствиеИсточниковПроизвольныхДанных.Вставить(
		Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.ПолноеИмя(),
		Новый Структура("ТипДанныхУчетаРасход, ТипДанныхУчетаПриход", Перечисления.ТипыДанныхУчета.ДенежныеСредства,
		Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы));
	СоответствиеИсточниковПроизвольныхДанных.Вставить(
		Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.ПолноеИмя(),
		Новый Структура("ТипДанныхУчетаРасход, ТипДанныхУчетаПриход", Перечисления.ТипыДанныхУчета.ДенежныеСредства,
		Перечисления.ТипыДанныхУчета.Контрагенты));
	СоответствиеИсточниковПроизвольныхДанных.Вставить(
		Метаданные.РегистрыНакопления.ДвиженияДенежныхСредств.ПолноеИмя(),
		Новый Структура("ТипДанныхУчетаРасход, ТипДанныхУчетаПриход", Перечисления.ТипыДанныхУчета.ДенежныеСредства,
		Перечисления.ТипыДанныхУчета.ДенежныеСредства));
	
	СКД = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ПравилоФакта);
	
	ТипыДанныхУчетаПравила = Новый Массив;
	
	Для Каждого ЭлементСоответствия Из СоответствиеИсточниковПроизвольныхДанных Цикл
		ОтборИсточниковПоИменамРегистров = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементСоответствия.Ключ);
		Если КомпоновкаДанныхСервер.НаборыДанныхСсылаютсяВЗапросахНаТаблицы(СКД.НаборыДанных,
			ОтборИсточниковПоИменамРегистров) Тогда
			ТипыДанныхУчетаПравила.Добавить(ЭлементСоответствия.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипыДанныхУчетаПравила;
	
КонецФункции

// Возвращает признак использования СКД для расчета факта по правилам с типом Исполнение бюджета, которая формируется программно.
// 
// Параметры:
//  ИсточникСуммыПравила - ПеречислениеСсылка.ПоказателиАналитическихРегистров - показатель суммы правила
//  Расход - ПеречислениеСсылка.ТипыДанныхУчета - тип данных Расход
//
// Возвращаемое значение:
//  Булево - Истина, если 
//
Функция ИспользуетсяСКД_ИсполнениеБюджета(ИсточникСуммыПравила, Расход) Экспорт
	
	ИспользуетсяСКД = Ложь;
	
	Если (ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам")
		Или ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5")) Тогда
		
		СуммовыеПоказатели = Новый Массив;
		Если Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства Тогда
			СуммовыеПоказатели = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(
				ПоказателиДвиженияДенежныхСредствКВыплате());
		КонецЕсли;
		
		ИспользуетсяСКД = (СуммовыеПоказатели.Найти(ИсточникСуммыПравила) <> Неопределено);
	
	КонецЕсли;
	
	Возврат ИспользуетсяСКД;
	
КонецФункции

// Возвращает схему компоновки данных для расчета факта по документу при контроле лимитов бюджетирования.
//
// Параметры:
//  Расход - ПеречислениеСсылка.ТипыДанныхУчета - расход
//  Приход - ПеречислениеСсылка.ТипыДанныхУчета - приход
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных
//
Функция СКД_ИсполнениеБюджета(Расход, Приход) Экспорт
	
	ВидыДокументов = ИменаВидовДокументовДляКонтроляЛимитов(Расход);
	Если ВидыДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	ИмяНабораДанных = "Движения" + ОбщегоНазначения.ИмяЗначенияПеречисления(Расход)
		+ ОбщегоНазначения.ИмяЗначенияПеречисления(Приход);
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
		ИмяНабораДанных);

	ТекстыЗапросов = Новый Массив;
	Для Каждого ВидДокумента Из ВидыДокументов Цикл
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ВидДокумента.Значение);
		ТекстЗапроса = МенеджерДокумента.ТекстЗапросаИсточникФактаПоТипамДанныхУчета(Расход, Приход);
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТаблицаКорреспонденций = ИсточникиДанныхСервер.ТаблицаКорреспонденцийРегистров(Новый Структура("Расход, Приход",
		Расход, Приход));
	ПоляЗапроса = Новый Массив;
	ВыбранныеПоляЗапроса = Новый Массив;
	ПоляУсловияЗапроса = Новый Массив;
	Для Каждого Колонка Из ТаблицаКорреспонденций.Колонки Цикл
		Если СтрНайти(ТекстЗапроса, " КАК " + Колонка.Имя) > 0 Тогда
			ПоляЗапроса.Добавить("ВложенныйЗапрос." + Колонка.Имя + " КАК " + Колонка.Имя);
			ВыбранныеПоляЗапроса.Добавить(Колонка.Имя + ".*");
			ПоляУсловияЗапроса.Добавить("ВложенныйЗапрос." + Колонка.Имя + ".* КАК " + Колонка.Имя);
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанных, Колонка.Имя, Колонка.Имя, Колонка.Заголовок,
				Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	Если Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства Тогда
		СуммовыеПоказатели = ПоказателиДвиженияДенежныхСредствКВыплате();
		Для Каждого КлючИЗначение Из СуммовыеПоказатели Цикл
			ИмяПоказателя = КлючИЗначение.Значение.Ресурсы[0].Имя;
			ПоляЗапроса.Добавить("ВложенныйЗапрос." + ИмяПоказателя + " КАК " + ИмяПоказателя);
			ВыбранныеПоляЗапроса.Добавить(ИмяПоказателя);
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанных, ИмяПоказателя, ИмяПоказателя, ,
				РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапросаНабораДанных = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ГОД) КАК ПериодГод,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ПОЛУГОДИЕ) КАК ПериодПолугодие,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, КВАРТАЛ) КАК ПериодКвартал,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, МЕСЯЦ) КАК ПериодМесяц,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕКАДА) КАК ПериодДекада,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, НЕДЕЛЯ) КАК ПериодНеделя,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) КАК ПериодДень,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ) КАК ПериодКурса,
	|	ВложенныйЗапрос.Период КАК ПериодСекунда,
	|	ВложенныйЗапрос.ИсточникДанных КАК ИсточникДанных,
	|	&ТекстПоляЗапроса КАК ПоляЗапроса
	|{ВЫБРАТЬ
	|	ПериодГод,
	|	ПериодПолугодие,
	|	ПериодКвартал,
	|	ПериодМесяц,
	|	ПериодДекада,
	|	ПериодНеделя,
	|	ПериодДень,
	|	ПериодКурса,
	|	ПериодСекунда,
	|	ИсточникДанных,
	|	(ПоляЗапроса)}
	|ИЗ
	|	&ВложенныйЗапрос КАК ВложенныйЗапрос
	|ГДЕ
	|	&ПривилегированныйРежимИсточника = &ПривилегированныйРежим
	|	И ВложенныйЗапрос.ИсточникДанных = &ХозяйственнаяОперация
	|{ГДЕ
	|	(""ИдентификаторИсточникаДанных"") КАК ИдентификаторИсточникаДанных,
	|	ВложенныйЗапрос.Регистратор КАК Регистратор,
	|	ВложенныйЗапрос.ИсточникДанных КАК ИсточникДанных,
	|	(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ)) КАК ПериодДень,
	|	(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, НЕДЕЛЯ)) КАК ПериодНеделя,
	|	(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕКАДА)) КАК ПериодДекада,
	|	(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, МЕСЯЦ)) КАК ПериодМесяц,
	|	(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, КВАРТАЛ)) КАК ПериодКвартал,
	|	(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ПОЛУГОДИЕ)) КАК ПериодПолугодие,
	|	(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ГОД)) КАК ПериодГод,
	|	(НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, ДЕНЬ)) КАК ПериодКурса,
	|	(&ТекстПоляУсловияЗапроса)}";
	ТекстЗапросаНабораДанных = СтрЗаменить(ТекстЗапросаНабораДанных, "&ТекстПоляЗапроса КАК ПоляЗапроса", СтрСоединить(
		ПоляЗапроса, "," + Символы.ПС + Символы.Таб));
	ТекстЗапросаНабораДанных = СтрЗаменить(ТекстЗапросаНабораДанных, "(ПоляЗапроса)", СтрСоединить(
		ВыбранныеПоляЗапроса, "," + Символы.ПС + Символы.Таб));
	ТекстЗапросаНабораДанных = СтрЗаменить(ТекстЗапросаНабораДанных, "(&ТекстПоляУсловияЗапроса)", СтрСоединить(
		ПоляУсловияЗапроса, "," + Символы.ПС + Символы.Таб));
	ТекстЗапросаНабораДанных = СтрЗаменить(ТекстЗапросаНабораДанных, "&ВложенныйЗапрос", "(" + ТекстЗапроса + ")");
	
	НаборДанных.Запрос = ТекстЗапросаНабораДанных;
	
	КорректируемыеПсевдонимыПолей = Новый Соответствие;
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам") Тогда
		// Используются псевдонимы полей по оборотным аналитическим регистрам
		Если Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы Тогда
			КорректируемыеПсевдонимыПолей.Вставить("НаправлениеДеятельностиДоходовРасходов",
				"НаправлениеДеятельностиСтатьи");
		ИначеЕсли Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы Тогда
			КорректируемыеПсевдонимыПолей.Вставить("НаправлениеДеятельностиАктивовПассивов",
				"НаправлениеДеятельностиСтатьи");
			КорректируемыеПсевдонимыПолей.Вставить("ПодразделениеАктивовПассивов", "ПодразделениеДоходовРасходов");
		КонецЕсли;
	КонецЕсли;
	Для Каждого КорректируемыйПсевдоним Из КорректируемыеПсевдонимыПолей Цикл
		НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, КорректируемыйПсевдоним.Ключ, КорректируемыйПсевдоним.Значение);
	КонецЦикла;
	
	КомпоновкаДанныхСервер.ДобавитьПараметр(СхемаКомпоновкиДанных, "Расход",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДанныхУчета"), Расход);
	КомпоновкаДанныхСервер.ДобавитьПараметр(СхемаКомпоновкиДанных, "Приход",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДанныхУчета"), Приход);
	КомпоновкаДанныхСервер.ДобавитьПараметр(СхемаКомпоновкиДанных, "ИдентификаторНеиспользуемойФинЗаписи", ,
		ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	КомпоновкаДанныхСервер.ДобавитьПараметр(СхемаКомпоновкиДанных, "ПривилегированныйРежим");
	КомпоновкаДанныхСервер.ДобавитьПараметр(СхемаКомпоновкиДанных, "ПривилегированныйРежимИсточника");

	Возврат СхемаКомпоновкиДанных;

КонецФункции

// Возвращает схему компоновки данных ИерархияИсточниковДанныхБюджетирования
//
// Возвращаемое значение:
//  СхемаКомпоновкиДанных
//
Функция СКД_ИерархияИсточниковДанныхБюджетирования() Экспорт
	
	Возврат ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолучитьМакет("ИерархияИсточниковДанныхБюджетирования");
	
КонецФункции

#КонецОбласти 
//-- НЕ УТ

#Область НастройкиХозяйственныхОпераций

// Для хозяйственной операции возвращает схему компоновки данных
// с помощью которой можно получить движения по текущей хозяйственной операции.
//
// Параметры:
//  ХозяйственнаяОперация - СправочникСсылка.НастройкиХозяйственныхОпераций - хозяйственная операция 
//                        для которой требуется получить схему получения данных.
//
// Возвращаемое значение:
//   СхемаКомпоновкиДанных - схема получения данных по текущей хозяйственной операции.
//
Функция СхемаПолученияДанных(ХозяйственнаяОперация) Экспорт

	СхемаПолученияДанных = Неопределено;
	ИмяИсточникаДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ХозяйственнаяОперация, "ИсточникДанных");
	МакетыИсточниковПолученияДанных = Метаданные.Справочники.НастройкиХозяйственныхОпераций.Макеты;
	МакетИсточникаПолученияДанных = МакетыИсточниковПолученияДанных.Найти(ИмяИсточникаДанных); // ОбъектМетаданныхМакет -
	Если МакетИсточникаПолученияДанных <> Неопределено Тогда
		ИмяСхемы = МакетИсточникаПолученияДанных.Имя; 
		СхемаПолученияДанных = Справочники.НастройкиХозяйственныхОпераций.ПолучитьМакет(ИмяСхемы);
	КонецЕсли;
	
	Возврат СхемаПолученияДанных;

КонецФункции

// Определяет список хозяйственных операций отражаемых в текущем регистре накопления.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра накопления.
//
// Возвращаемое значение:
//    СправочникСсылка.НастройкиХозяйственныхОпераций - массив хозяйственных операций отражаемых в переданном регистре накопления.
//
Функция ХозяйственныеОперацииАналитическихРегистров(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.Ссылка
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|ГДЕ
	|	НастройкиХозяйственныхОпераций.ИсточникДанных = &ИмяРегистра";
	Запрос.УстановитьПараметр("ИмяРегистра", ИмяРегистра);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает список всех регистров накопления используемых для хранения аналитической информации.
//
// Возвращаемое значение:
//    СписокЗначений - список регистров накопления.
//
Функция ДоступныеИсточникиДанных() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя, Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Имя, Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.Имя, Метаданные.РегистрыНакопления.ДвиженияДенежныеСредстваКонтрагент.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.ДвиженияДенежныхСредств.Имя, Метаданные.РегистрыНакопления.ДвиженияДенежныхСредств.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы.Имя, Метаданные.РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.Имя, Метаданные.РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.ДвиженияКонтрагентКонтрагент.Имя, Метаданные.РегистрыНакопления.ДвиженияКонтрагентКонтрагент.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.Имя, Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.Имя, Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.Закупки.Имя, Метаданные.РегистрыНакопления.Закупки.Синоним);
	
	Список.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя, Метаданные.РегистрыНакопления.ПрочиеРасходы.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.Имя, Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.Имя, Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.Синоним);
	//++ НЕ УТ
	Список.Добавить(Метаданные.РегистрыНакопления.АмортизацияОС.Имя, Метаданные.РегистрыНакопления.АмортизацияОС.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.АмортизацияНМА.Имя, Метаданные.РегистрыНакопления.АмортизацияНМА.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.СтоимостьОС.Имя, Метаданные.РегистрыНакопления.СтоимостьОС.Синоним);
	Список.Добавить(Метаданные.РегистрыНакопления.СтоимостьНМА.Имя, Метаданные.РегистрыНакопления.СтоимостьНМА.Синоним);
	//-- НЕ УТ
	
	РегистрыНДС = УчетНДСУП.ИсточникиДанныхХозяйственныхОпераций();
	Для каждого Регистр Из РегистрыНДС Цикл
		Список.Добавить(Регистр.Значение, Регистр.Представление);	
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

//++ НЕ УТ
#Область СлужебныеПроцедурыИФункции

Функция ИмяМакетаПоЗначениюИсточника(ИсточникИмениМакета)
	
	ИмяМакета = Неопределено;
	
	ПоддерживаемыеТипы = ПоддерживаемыеТипыИсточниковИмениМакета();
	ТипИсточникаИмениМакета = ТипЗнч(ИсточникИмениМакета);
	
	Если ПоддерживаемыеТипы.Найти(ТипИсточникаИмениМакета) = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Недопустимый тип источника получения данных.'");
	КонецЕсли;
	
	Если ТипИсточникаИмениМакета = Тип("ПеречислениеСсылка.ХозяйственныеОперации") Тогда
		ИмяОперации = ОбщегоНазначения.ИмяЗначенияПеречисления(ИсточникИмениМакета);
		ИмяМакета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.НастройкиХозяйственныхОпераций[ИмяОперации], "ИсточникДанных");
		
	ИначеЕсли ТипИсточникаИмениМакета = Тип("СправочникСсылка.НастройкиХозяйственныхОпераций") Тогда
		ИмяМакета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникИмениМакета, "ИсточникДанных");
		
	ИначеЕсли ТипИсточникаИмениМакета = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		ИмяМакета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникИмениМакета, "ИмяПредопределенныхДанных");
		
	КонецЕсли;
		
	Возврат ИмяМакета;
		
КонецФункции

Функция НаборДанныхСКДИсточника(Знач СхемаКомпоновкиДанных, Знач ИмяСправочникаИсточника, Знач ИдентификаторИсточникаДанных)
	Перем НаборДанныхСКДИсточника;
	
	НаборДанныхСКДИсточника = СхемаКомпоновкиДанных.НаборыДанных.Найти("ОбъединенныйФакт");
	Если НаборДанныхСКДИсточника = Неопределено Тогда
		Если СхемаКомпоновкиДанных.НаборыДанных.Количество() > 0 Тогда
			НаборДанныхСКДИсточника = СхемаКомпоновкиДанных.НаборыДанных[0];
		Иначе 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В СКД справочника ""%1"" макета ""%2"" нет ни одного набора данных.'"), 
				ИмяСправочникаИсточника,
				ИдентификаторИсточникаДанных);
				
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;

	Возврат НаборДанныхСКДИсточника;
КонецФункции

#КонецОбласти
//-- НЕ УТ

