#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не Документ.ДополнительныеСвойства.Свойство("ОтложенноеПроведение")
			Или Документ.ДополнительныеСвойства.ОтложенноеПроведение = Ложь Тогда
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ЛимитыПоДаннымБюджетирования);
		КонецЕсли;
		
		Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
			Или ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаКомандировку")
			Или ТипЗнч(Документ) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
			Или ТипЗнч(Документ) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
			Параметры.ЕстьПроизводныеДвижения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам бюджетирования.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЛимитыПоДаннымБюджетирования");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт

КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт

КонецПроцедуры

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствБюджетирования") Тогда
		
		ИспользоватьРегистрПоЛимитам = ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5");
		Если ИспользоватьРегистрПоЛимитам
			И Документ.ДополнительныеСвойства.Свойство("ИгнорироватьКонтрольЛимитовПоДаннымБюджетирования")
			И Документ.ДополнительныеСвойства.ИгнорироватьКонтрольЛимитовПоДаннымБюджетирования Тогда
			Документ.Движения.ЛимитыПоДаннымБюджетирования.Записывать = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствБюджетирования") Тогда
	
		Если ТребуетсяКонтрольПоЛимитамБюджетирования(Документ) Тогда
			
			Если ТипЗнч(Документ) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
				Или ТипЗнч(Документ) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
				
				РегистрыСведений.ЗаданияКОтражениюЛимитовПоДаннымБюджетирования.ДобавитьЗадание(Документ.Ссылка);
				РегистрыСведений.ЗаданияКОтражениюЛимитовПоДаннымБюджетирования.ЗапуститьЗадание();
				
			Иначе
				
				Параметры = ПараметрыКонтроляПоЛимитамБюджетирования(Документ.Ссылка);
				ВыполнитьКонтрольПоЛимитамБюджетирования(Параметры);
				
				Если ЗначениеЗаполнено(Параметры.Ошибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Параметры.Ошибки);
					Если Не Параметры.НарушеныТолькоИнформационныеЛимиты Тогда
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Не Отказ И Параметры.ТаблицыДляДвижений.Количество() > 0 Тогда
					ОтразитьДвижения(Параметры.ТаблицыДляДвижений, Документ.Движения, Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КэшНастроекЛимитов

// Возвращает признак использования статьи бюджетов в кэшируемых настройках лимитов по данным бюджетирования
//
// Параметры:
//  СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов - проверяемая статья бюджетов
//  ПроверятьПравилаЛимитов - Булево - Истина, если проверять по правилам лимитов
//     Ложь, если проверять по правилам получения фактических данных для контроля лимитов.
//
// Возвращаемое значение:
//  Булево - Истина, если статья бюджетов используется в настройках лимитов по данным бюджетирования
//
Функция СтатьяБюджетовИспользуетсяВНастройкахЛимитов(СтатьяБюджетов, ПроверятьПравилаЛимитов = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_4")
		И Не ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяБюджетов", СтатьяБюджетов);
	
	Если ПроверятьПравилаЛимитов Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаЛимитовПоДаннымБюджетирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК ПравилаЛимитовПоДаннымБюджетирования
		|ГДЕ
		|	ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета = &СтатьяБюджетов
		|	И НЕ ПравилаЛимитовПоДаннымБюджетирования.ПометкаУдаления";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
		|ГДЕ
		|	ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов = &СтатьяБюджетов
		|	И ПравилаПолученияФактаПоСтатьямБюджетов.ТипПравила <> ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные)
		|	И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПометкаУдаления";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Используется = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Используется;
	
КонецФункции

// Возвращает признак использования модели бюджетирования в правилах лимитов по данным бюджетирования
//
// Параметры:
//  МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - проверяемая модель бюджетирования
//
// Возвращаемое значение:
//  Булево - Истина, если модель используется в правилах лимитов по данным бюджетирования
//
Функция МодельБюджетированияИспользуетсяВНастройкахЛимитов(МодельБюджетирования) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_4")
		И Не ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаЛимитовПоДаннымБюджетирования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК ПравилаЛимитовПоДаннымБюджетирования
	|ГДЕ
	|	ПравилаЛимитовПоДаннымБюджетирования.Владелец = &МодельБюджетирования
	|	И НЕ ПравилаЛимитовПоДаннымБюджетирования.ПометкаУдаления";
	
	УстановитьПривилегированныйРежим(Истина);
	Используется = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Используется;
	
КонецФункции

#КонецОбласти

// Вызывается из Отчет.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования.МодульОбъекта
// Плановое и фактическое состояние по лимитам на расходование ДС.
// 
// Параметры:
//  Параметры - Структура - структура параметров для расчета лимитов:
//	 *ДатаПроверки - Дата - дата, на которую проверяется состояние лимитов.
//	 *Документ     - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - документ, для которого формируются временные движения по регистрам ДС.
//	               - Неопределено - Значение по умолчанию.
//	 *Валюта - СправочникСсылка.Валюты - валюта, в которой нужно получить план-факт.
//	               - Неопределено - Значение по умолчанию.
//	 *ВидДокумента - СправочникСсылка.ИдентификаторыОбъектовМетаданных - вид документа
//	 *ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция документа
//	ОтборРасшифровки - Структура - Отбор, накладываемый расшифровкой отчета (вышестоящие от расшифровываемой ячейки значения полей).
//	                               При расшифровке сравнение только на равенство:
//	 *ИспользоватьОтбор - Булево - Флаг использования отбора.
//	 *РасшифровкаПоРегистратору - Булево - Флаг использования расшифровки по регистратору. Расшифровка по регистратору может выполняться
//	                                       только если отбор задан, и отбор включает в себя отбор по правилу получения факта.
//	 *МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - отбор по модели бюджетирования (если отбор задан).
//	 *ПравилоЛимитов - СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - отбор по правилу лимитов (если отбор задан).
//	 *ОтборПоАналитикамПлана - Массив из Структура - отбор по вышестоящим аналитикам плана (если задан):
//	   **ИмяИзмеренияНомерАналитики - Строка - Имя измерения или путь к нумерованной аналитике (вида "Аналитика1", здесь номер тот, который задан в статье бюджетов).
//	   **Значение - Характеристика.АналитикиСтатейБюджетов - Значение измерения или аналитики.
//	 *ОтборПоАналитикамФакта - Массив из Структура - отбор по вышестоящим аналитикам факта (если задан):
//	   **ИмяИзмеренияНомерАналитики - Строка - Имя измерения или путь к нумерованной аналитике (вида "Аналитика1", здесь номер тот, который задан в статье бюджетов).
//	   **Значение - Характеристика.АналитикиСтатейБюджетов - Значение измерения или аналитики.
//
// Возвращаемое значение:
//	ТаблицаЗначений - данные о плановом и фактическом состоянии лимитов на расходование ДС.
// 
Функция ПланФактЛимитов(Параметры, ОтборРасшифровки = Неопределено) Экспорт
	
	Документ = Параметры.Документ;
	ПланПриОтсутствииФакта = Не ЗначениеЗаполнено(Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПродолжитьРасчет = Истина;
	
	КоличествоФормальноДействующихЛимитов = 0;
	КоличествоСработавшихЛимитов = 0;
	
	#Область ПараметрыЗаявки
	
	ПараметрыКонтроля = Новый Структура("РеквизитыДокумента", Параметры);
	
	ВозможенКонтрольПоДокументу = Не Документ = Неопределено И Документ.Проведен;
	
	ПоТаблицеКорреспонденций = ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам");
	
	#КонецОбласти 
	
	ДопОтборПоПравиламЛимитирования = ОтборПоПравиламРасшифровкиОтчета(ОтборРасшифровки);
	
	#Область Этап1_ОпределениеФормальноДействующихЛимитов
	
	Если ПродолжитьРасчет Тогда
		
		ДействующиеЛимиты = ДействующиеЛимиты(Параметры,,, ДопОтборПоПравиламЛимитирования);
		Если ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап2_РасчетФактаПоДокументу
	
	Если ПродолжитьРасчет Тогда
		Если ВозможенКонтрольПоДокументу Тогда
			ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(Параметры,
				ДействующиеЛимиты, Истина, ОтборРасшифровки);
			
			ФактПоДокументу = БюджетированиеСервер.ФактПоВидуБюджета(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
				ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
				Параметры.Валюта,
				Перечисления.РежимПолученияДанныхБюджетирования.Все);
			
			Если ФактПоДокументу.Количество() = 0 Тогда
				ПродолжитьРасчет = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	#КонецОбласти 
	
	#Область Этап3_ОпределениеЛимитовСработавшихПоДокументу
	Если ПродолжитьРасчет Тогда
		Если ВозможенКонтрольПоДокументу Тогда
			СработавшиеЛимиты = ДействующиеЛимиты(Параметры, ФактПоДокументу.ВыгрузитьКолонку("СтатьяБюджетов"), , ДопОтборПоПравиламЛимитирования);
			Если СработавшиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
				ПродолжитьРасчет = Ложь;
			КонецЕсли;
		Иначе
			СработавшиеЛимиты = ДействующиеЛимиты;
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап4_ПолучениеФактПоСработавшимЛимитам
	Если ПродолжитьРасчет Тогда
		
		Если ПоТаблицеКорреспонденций Тогда
			
			ПравилаПоСработавшимЛимитам = СработавшиеЛимиты.ТаблицаПравилСтатей.Скопировать(
				Новый Структура("РазделИсточникаДанных",
				Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет), "Правило, ТипДанныхУчетаРасход");
			
			Если ПравилаПоСработавшимЛимитам.Количество() > 0 Тогда
				// Отражаем документы в бюджетировании "на лету", то есть в транзакции проведения заявки
				ИменаВидовДокументов = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(
					ИсточникиДанныхПовтИсп.ИменаВидовДокументовДляКонтроляЛимитов(
					ПравилаПоСработавшимЛимитам[0].ТипДанныхУчетаРасход));
				Для Каждого СтрокаЛимит Из СработавшиеЛимиты.ЛимитыДействующиеНаДату Цикл
					Если РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ТребуетсяОтражениеВБюджетированииДляОтчетаЗаПериод(
						СтрокаЛимит.НачалоПериода, СтрокаЛимит.КонецПериода, , Истина, ИменаВидовДокументов) Тогда
						ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыВБюджетировании(СтрокаЛимит.НачалоПериода,
						СтрокаЛимит.КонецПериода, ИменаВидовДокументов);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;

		ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(Параметры,
			СработавшиеЛимиты, Ложь, ОтборРасшифровки);
		
		ФактПоДокументам = БюджетированиеСервер.ФактПоВидуБюджета(
			ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
			ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
			Параметры.Валюта,
			Перечисления.РежимПолученияДанныхБюджетирования.Все);
			
		Если ПоТаблицеКорреспонденций И ВозможенКонтрольПоДокументу Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФактПоДокументу, ФактПоДокументам);
		КонецЕсли;
		
		Если ПоТаблицеКорреспонденций И ПравилаПоСработавшимЛимитам.Количество() > 0 Тогда
			
			ПараметрыПолученияХранимогоФакта = ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта;
			ПараметрыПолученияХранимогоФакта.Вставить("РежимПолученияДанных",
				Перечисления.РежимПолученияДанныхБюджетирования.Все);

			НастройкиОтбора = Новый НастройкиКомпоновкиДанных;
			ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиОтбора.Отбор, "Правило.ТипПравила",
				Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные, , ВидСравненияКомпоновкиДанных.НеВСписке);
			ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиОтбора.Отбор, "Правило",
				ПравилаПоСработавшимЛимитам.ВыгрузитьКолонку("Правило"), , ВидСравненияКомпоновкиДанных.ВСписке);
			Если ВозможенКонтрольПоДокументу Тогда
				ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиОтбора.Отбор, "Регистратор",
					Документ, , ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
			ПараметрыПолученияХранимогоФакта.Вставить("ДополнительныйОтбор", НастройкиОтбора);

			ПараметрыПолученияХранимогоФакта.Вставить("ФункциональнаяВалюта", Неопределено);
			ПараметрыПолученияХранимогоФакта.Вставить("ВозвращатьУпрИРеглСуммы", Ложь);
			ПараметрыПолученияХранимогоФакта.Вставить("ВалютаОтчета", Параметры.Валюта);
			ПараметрыПолученияХранимогоФакта.Вставить("ДействующиеЛимиты",
				СработавшиеЛимиты.ЛимитыДействующиеНаДату.Скопировать( , "СтатьяБюджетов,НачалоПериода,КонецПериода"));
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта, ПараметрыПолученияХранимогоФакта,
				Истина);

			ХранимыйФактПоДокументам = БюджетированиеСервер.ФактСтатьиБюджетовХранимый(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта);
			ХранимыйФактПоДокументам.Колонки.Сумма.Имя = "СуммаПриход";
			ХранимыйФактПоДокументам.Колонки.СуммаВВалюте.Имя = "СуммаВалПриход";
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ХранимыйФактПоДокументам, ФактПоДокументам);
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап5_ПланФактныйАнализСработавшихЛимитов
	
	ПланФактПоПравилам = Новый ТаблицаЗначений;
	Если ПродолжитьРасчет Тогда
		ФактПоДокументам.Колонки.СуммаВалПриход.Имя = "СуммаФакт";
		
		// Факт по всем заявкам получается с избытком для целей контроля, т.к. разные аналитики (измерения) могут расходовать одни и те же аналитики лимита.
		// Добавим колонку - признак участия аналитик (измерений) в исходной заявке - чтобы не контролировать лишние аналитики.
		ФактПоДокументам.Колонки.Добавить("ВИсходнойЗаявке", Новый ОписаниеТипов("Булево"));
		
		Если ВозможенКонтрольПоДокументу Тогда
			КолонкиПоискаПоЗаявке = "СтатьяБюджетов, НачалоПериода, КонецПериода";
			МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
			Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
				КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Аналитика" + НомерАналитики;
			КонецЦикла;
			
			Если ФактПоДокументам.Колонки.Найти("Организация") <> Неопределено Тогда
				КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Организация";
			КонецЕсли;
			Если ФактПоДокументам.Колонки.Найти("Подразделение") <> Неопределено Тогда
				КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Подразделение";
			КонецЕсли;
			
			ФактПоДокументам.Индексы.Добавить(КолонкиПоискаПоЗаявке);
			СтруктураПоискаФакта = Новый Структура(КолонкиПоискаПоЗаявке);
			ЕстьСтрокиИсходнойЗаявки = Ложь;
			Для каждого СтрокаИсходнойЗаявки Из ФактПоДокументу Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаФакта, СтрокаИсходнойЗаявки);
				СтрокиОбщегоФакта = ФактПоДокументам.НайтиСтроки(СтруктураПоискаФакта);
				Для каждого СтрокаОбщегоФакта Из СтрокиОбщегоФакта Цикл
					СтрокаОбщегоФакта.ВИсходнойЗаявке = Истина;
					ЕстьСтрокиИсходнойЗаявки = Истина;
				КонецЦикла;
			КонецЦикла;
			Если НЕ ЕстьСтрокиИсходнойЗаявки
				И НЕ ОтборРасшифровки = Неопределено
				И ОтборРасшифровки.ИспользоватьОтбор Тогда
				// В прочих аналитиках плана есть разные аналитики факта.
				// Отбор установлен на аналитики факта, которые не совпадают с аналитиками заявки
				Для каждого СтрокаФактаЗаявки Из ФактПоДокументу Цикл
					ДополнениеФакта = ФактПоДокументам.Добавить();
					ЗаполнитьЗначенияСвойств(ДополнениеФакта, СтрокаФактаЗаявки,, "СуммаПриход, СуммаРасход, СуммаВалРасход");
					ДополнениеФакта.СуммаФакт = 0;
					ДополнениеФакта.ВИсходнойЗаявке = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПланПриОтсутствииФакта И КоличествоФормальноДействующихЛимитов <> КоличествоСработавшихЛимитов Тогда
			НеСработавшиеЛимиты = ДействующиеЛимиты(
				Параметры, 
				ФактПоДокументам.ВыгрузитьКолонку("СтатьяБюджетов"),
				Истина,
				ДопОтборПоПравиламЛимитирования);
			
			ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(
				НеСработавшиеЛимиты.ЛимитыДействующиеНаДату,
				ФактПоДокументам);
		КонецЕсли;
		
		// Сбор запроса для план-факт анализа
		ПланФактПоПравилам = ПланФактПоПравиламЛимитов(ПараметрыПолученияФактаДляКонтроляЛимитов, ПараметрыКонтроля, ФактПоДокументам, СработавшиеЛимиты, Истина, ОтборРасшифровки);
		
	КонецЕсли;
	
	#КонецОбласти 
	
	Возврат ПланФактПоПравилам;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьВариантКонтроляЛимитовПоДаннымБюджетирования(Параметры, АдресХранилища) Экспорт
	
	ВариантКонтроляЛимитов2_5 = Параметры.ВариантКонтроляЛимитов2_5;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ОбработатьПравилаПолученияФакта_ИсполнениеБюджета(
				ВариантКонтроляЛимитов2_5);
		Если ВариантКонтроляЛимитов2_5 Тогда
			СформироватьДвиженияЛимитыПоДаннымБюджетированияПоДокументам();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось изменить вариант контроля лимитов по данным бюджетирования по причине: %1'"),
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Изменение варианта контроля лимитов по данным бюджетирования.'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьДвиженияЛимитыПоДаннымБюджетированияПоДокументам()
	
	// Плановые значения лимитов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета КАК СтатьяБюджета
	|ПОМЕСТИТЬ ЛимитируемыеСтатьиБюджетов
	|ИЗ
	|	Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК ПравилаЛимитовПоДаннымБюджетирования
	|ГДЕ
	|	НЕ ПравилаЛимитовПоДаннымБюджетирования.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыБюджетовОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ОборотыБюджетов.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			СтатьяБюджетов В
	|					(ВЫБРАТЬ
	|						ЛимитируемыеСтатьиБюджетов.СтатьяБюджета
	|					ИЗ
	|						ЛимитируемыеСтатьиБюджетов КАК ЛимитируемыеСтатьиБюджетов)
	|				И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)) КАК ОборотыБюджетовОбороты
	|ГДЕ
	|	ОборотыБюджетовОбороты.Регистратор ССЫЛКА Документ.ЭкземплярБюджета";
	
	Движения = Новый Структура("ЛимитыПоДаннымБюджетирования");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийДокумент = Выборка.Регистратор;
		ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(ТекущийДокумент, "ЛимитыПоДаннымБюджетирования");
		
		НаборЛимитыПоДаннымБюджетирования = РегистрыНакопления.ЛимитыПоДаннымБюджетирования.СоздатьНаборЗаписей();
		НаборЛимитыПоДаннымБюджетирования.Отбор.Регистратор.Установить(ТекущийДокумент);
		Движения.ЛимитыПоДаннымБюджетирования = НаборЛимитыПоДаннымБюджетирования;
		
		ОтразитьДвижения(ТаблицыДляДвижений, Движения, Ложь);
		
		НаборЛимитыПоДаннымБюджетирования = Движения.ЛимитыПоДаннымБюджетирования; // РегистрНакопленияНаборЗаписей.ЛимитыПоДаннымБюджетирования -
		НаборЛимитыПоДаннымБюджетирования.Записать(Истина);
		
	КонецЦикла;
	
	// Фактическое потребление лимитов
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредстваКВыплате.Регистратор КАК Регистратор,
	|	ДенежныеСредстваКВыплате.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
	|ГДЕ
	|	ДенежныеСредстваКВыплате.Регистратор ССЫЛКА Документ.ЗаявкаНаКомандировку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредстваКВыплате.Регистратор,
	|	ДенежныеСредстваКВыплате.Период
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
	|ГДЕ
	|	ДенежныеСредстваКВыплате.Регистратор ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредстваНаличные.Регистратор,
	|	ДенежныеСредстваНаличные.Период
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредстваНаличные
	|ГДЕ
	|	ДенежныеСредстваНаличные.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|	И ДенежныеСредстваНаличные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредстваБезналичные.Регистратор,
	|	ДенежныеСредстваБезналичные.Период
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредстваБезналичные
	|ГДЕ
	|	ДенежныеСредстваБезналичные.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|	И ДенежныеСредстваБезналичные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
			Или ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			РегистрыСведений.ЗаданияКОтражениюЛимитовПоДаннымБюджетирования.ДобавитьЗадание(Выборка.Регистратор);
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
		Иначе
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаявкаНаКомандировку");
		КонецЕсли;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Параметры = ПараметрыКонтроляПоЛимитамБюджетирования(Выборка.Регистратор);
		Параметры.Вставить("ПоискОшибок", Ложь);

		ВыполнитьКонтрольПоЛимитамБюджетирования(Параметры);
		
		Если Параметры.ТаблицыДляДвижений.Количество() > 0 Тогда
			НаборЛимитыПоДаннымБюджетирования = РегистрыНакопления.ЛимитыПоДаннымБюджетирования.СоздатьНаборЗаписей();
			НаборЛимитыПоДаннымБюджетирования.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЛимитыПоДаннымБюджетирования.Загрузить(Параметры.ТаблицыДляДвижений.ТаблицаЛимитыПоДаннымБюджетирования);
			НаборЛимитыПоДаннымБюджетирования.Записать(Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ЗаданияКОтражениюЛимитовПоДаннымБюджетирования.ЗапуститьЗадание();
	
КонецПроцедуры

Функция ТребуетсяКонтрольПоЛимитамБюджетирования(ДокументОбъект)

	ИспользоватьРегистрПоЛимитам = ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5");
	Если ИспользоватьРегистрПоЛимитам
		И ДокументОбъект.ДополнительныеСвойства.Свойство("ИгнорироватьКонтрольЛимитовПоДаннымБюджетирования")
		И ДокументОбъект.ДополнительныеСвойства.ИгнорироватьКонтрольЛимитовПоДаннымБюджетирования Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
			И ДокументОбъект.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена
			И (ИспользоватьРегистрПоЛимитам Или Не ДокументОбъект.СверхЛимита))
		Или (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаявкаНаКомандировку")
			И (ДокументОбъект.Статус <> Перечисления.СтатусыЗаявокСотрудников.Отклонена
			И ДокументОбъект.Статус <> Перечисления.СтатусыЗаявокСотрудников.Отозвана)
			И ДокументОбъект.ВыдачаПодОтчет.Количество()
			И (ИспользоватьРегистрПоЛимитам Или Не ДокументОбъект.СверхЛимита))
		Или (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
			И ИспользоватьРегистрПоЛимитам
			И ДокументОбъект.ПроведеноБанком)
		Или (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")
			И ИспользоватьРегистрПоЛимитам);

КонецФункции

Функция ПараметрыКонтроляПоЛимитамБюджетирования(Документ)
	
	ПараметрыКонтроля = Новый Структура;
	ПараметрыКонтроля.Вставить("Ошибки");
	ПараметрыКонтроля.Вставить("НарушеныТолькоИнформационныеЛимиты", Ложь);
	ПараметрыКонтроля.Вставить("ПоРегиструЛимитов", ПолучитьФункциональнуюОпцию(
		"КонтрольЛимитовПоДаннымБюджетирования2_5"));
	ПараметрыКонтроля.Вставить("ПоТаблицеКорреспонденций", ПолучитьФункциональнуюОпцию(
		"НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам"));
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Валюта, ЖелательнаяДатаПлатежа, СверхЛимита, ХозяйственнаяОперация, ХозяйственнаяОперацияПоЗарплате");
		Если ЗначениеЗаполнено(РеквизитыДокумента.ХозяйственнаяОперацияПоЗарплате) Тогда
			РеквизитыДокумента.Вставить("ХозяйственнаяОперация", РеквизитыДокумента.ХозяйственнаяОперацияПоЗарплате);
		КонецЕсли;
		РеквизитыДокумента.Удалить("ХозяйственнаяОперацияПоЗарплате");
		ИмяРеквизитаДатаПроверки = "ЖелательнаяДатаПлатежа";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Валюта, ЖелательнаяДатаПлатежа, СверхЛимита");
		РеквизитыДокумента.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
		ИмяРеквизитаДатаПроверки = "ЖелательнаяДатаПлатежа";
	Иначе
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Валюта, Дата, ХозяйственнаяОперация");
		РеквизитыДокумента.Вставить("СверхЛимита", Истина);
		ИмяРеквизитаДатаПроверки = "Дата";
	КонецЕсли;
	РеквизитыДокумента.Вставить("ДатаПроверки", РеквизитыДокумента[ИмяРеквизитаДатаПроверки]);
	РеквизитыДокумента.Удалить(ИмяРеквизитаДатаПроверки);
	РеквизитыДокумента.Вставить("Документ", Документ);
	РеквизитыДокумента.Вставить("ВидДокумента", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Документ)));
	ПараметрыКонтроля.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	
	Если ПараметрыКонтроля.ПоРегиструЛимитов Тогда
		Если (ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
			Или ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаКомандировку")) Тогда
			ПараметрыКонтроля.Вставить("ПоискОшибок", Не РеквизитыДокумента.СверхЛимита);
			ПараметрыКонтроля.Вставить("РезервироватьСуммуЛимита", Истина);
		Иначе
			ПараметрыКонтроля.Вставить("ПоискОшибок", Ложь);
			ПараметрыКонтроля.Вставить("РезервироватьСуммуЛимита", Ложь);
		КонецЕсли;
	Иначе
		ПараметрыКонтроля.Вставить("ПоискОшибок", Истина);
	КонецЕсли;
	
	ПараметрыКонтроля.Вставить("ТаблицыДляДвижений", Новый Структура);
	ПараметрыКонтроля.Вставить("МенеджерВременныхТаблиц");
	
	Возврат ПараметрыКонтроля;
	
КонецФункции

Функция РассчитанФактПоДокументуПоНастройкамПолученияФакта(РеквизитыДокумента, МенеджерВременныхТаблиц,
	НастройкаПолученияФакта)
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(НастройкаПолученияФакта.ТекстЗапроса);
	
	Запрос = Новый Запрос;
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Для Каждого Параметр Из НастройкаПолученияФакта.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("Документ", РеквизитыДокумента.Документ);
	Запрос.УстановитьПараметр("НачалоПериода", РеквизитыДокумента.ДатаПроверки);
	Запрос.УстановитьПараметр("КонецПериода", РеквизитыДокумента.ДатаПроверки);
	
	Возврат ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов,
		"ФактическиеДанныеПоДокументу");
	
КонецФункции

Процедура ВыполнитьКонтрольПоЛимитамБюджетирования(ПараметрыКонтроля)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешающийЛимитОбязателен = Истина;
	РазрешающийЛимитНайден     = Ложь;
	ИнформационныйЛимитНайден  = Ложь;
	
	РазрешающийЛимит = Перечисления.ТипыЛимитовРасходованияДС.РазрешающийВПределахЛимита;
	ИнформационныйЛимит = Перечисления.ТипыЛимитовРасходованияДС.Информационный;
	
	ПродолжитьРасчет = Истина;
	
	НарушеныТолькоИнформационныеЛимиты = ПараметрыКонтроля.НарушеныТолькоИнформационныеЛимиты;
	Ошибки = ПараметрыКонтроля.Ошибки;
	ПоискОшибок = ПараметрыКонтроля.ПоискОшибок;
	РеквизитыДокумента = ПараметрыКонтроля.РеквизитыДокумента;
	
	#Область Этап1_ОпределениеФормальноДействующихЛимитов
	
	Если ПродолжитьРасчет Тогда
		
		ДействующиеЛимиты = ДействующиеЛимиты(РеквизитыДокумента);
		Если ДействующиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			РазрешающийЛимитОбязателен = Ложь;
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
		
		РазрешающийЛимитОбязателен = ДействующиеЛимиты.РазрешающийЛимитОбязателен;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап2_РасчетФактаПоДокументу
	
	Если ПродолжитьРасчет Тогда
		Если ПараметрыКонтроля.ПоРегиструЛимитов Тогда
			Если ДействующиеЛимиты.НастройкаПолученияФакта = Неопределено
				Или ПустаяСтрока(ДействующиеЛимиты.НастройкаПолученияФакта.ТекстЗапроса) Тогда
				ПродолжитьРасчет = Ложь;
			ИначеЕсли Не РассчитанФактПоДокументуПоНастройкамПолученияФакта(РеквизитыДокумента,
				ПараметрыКонтроля.МенеджерВременныхТаблиц, ДействующиеЛимиты.НастройкаПолученияФакта) Тогда
				ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыКонтроля.МенеджерВременныхТаблиц, "ФактическиеДанныеПоДокументу");
				ПродолжитьРасчет = Ложь;
			КонецЕсли;
		Иначе
			ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыДокумента,
				ДействующиеЛимиты, Истина);
			ФактПоДокументу = БюджетированиеСервер.ФактПоВидуБюджета(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
				ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
				РеквизитыДокумента.Валюта,
				Перечисления.РежимПолученияДанныхБюджетирования.Все);
			Если ФактПоДокументу.Количество() = 0 Тогда
				ПродолжитьРасчет = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область Этап3_ОпределениеЛимитовСработавшихПоДокументу
	
	Если ПродолжитьРасчет И Не ПараметрыКонтроля.ПоРегиструЛимитов Тогда
		
		СработавшиеЛимиты = ДействующиеЛимиты(РеквизитыДокумента, ФактПоДокументу.ВыгрузитьКолонку("СтатьяБюджетов"));
		Если СработавшиеЛимиты.ЛимитыДействующиеНаДату.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если ПродолжитьРасчет И Не ПараметрыКонтроля.ПоРегиструЛимитов Тогда
		
		Если ПараметрыКонтроля.ПоТаблицеКорреспонденций Тогда
			
			ПравилаПоСработавшимЛимитам = СработавшиеЛимиты.ТаблицаПравилСтатей.Скопировать(
				Новый Структура("РазделИсточникаДанных",
				Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет), "Правило, ТипДанныхУчетаРасход");
			Если ПравилаПоСработавшимЛимитам.Количество() > 0 Тогда
				// Отражаем документы в бюджетировании "на лету", то есть в транзакции проведения заявки
				ИменаВидовДокументов = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(
					ИсточникиДанныхПовтИсп.ИменаВидовДокументовДляКонтроляЛимитов(
					ПравилаПоСработавшимЛимитам[0].ТипДанныхУчетаРасход));
				Для Каждого СтрокаЛимит Из СработавшиеЛимиты.ЛимитыДействующиеНаДату Цикл
					Если РегистрыСведений.ЗаданияКОтражениюВБюджетировании.ТребуетсяОтражениеВБюджетированииДляОтчетаЗаПериод(
						СтрокаЛимит.НачалоПериода, СтрокаЛимит.КонецПериода, , Истина, ИменаВидовДокументов) Тогда
						ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыВБюджетировании(СтрокаЛимит.НачалоПериода,
							СтрокаЛимит.КонецПериода, ИменаВидовДокументов);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		
		КонецЕсли;

		ПараметрыПолученияФактаДляКонтроляЛимитов = ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыДокумента,
			СработавшиеЛимиты, Ложь);
		
		ФактПоДокументам = БюджетированиеСервер.ФактПоВидуБюджета(
			ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта,
			ПараметрыПолученияФактаДляКонтроляЛимитов.ИсточникиДанных,
			РеквизитыДокумента.Валюта,
			Перечисления.РежимПолученияДанныхБюджетирования.Все);
			
		Если ПараметрыКонтроля.ПоТаблицеКорреспонденций Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФактПоДокументу, ФактПоДокументам);
		КонецЕсли;
		
		Если ПараметрыКонтроля.ПоТаблицеКорреспонденций И ПравилаПоСработавшимЛимитам.Количество() > 0 Тогда
			
			ПараметрыПолученияХранимогоФакта = ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта;
			ПараметрыПолученияХранимогоФакта.Вставить("РежимПолученияДанных",
				Перечисления.РежимПолученияДанныхБюджетирования.Все);
	
			НастройкиОтбора = Новый НастройкиКомпоновкиДанных;
			ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиОтбора.Отбор, "Правило.ТипПравила",
				Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные, ,
				ВидСравненияКомпоновкиДанных.НеРавно);
			ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиОтбора.Отбор, "Правило",
				ПравилаПоСработавшимЛимитам.ВыгрузитьКолонку("Правило"), , ВидСравненияКомпоновкиДанных.ВСписке);
			ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиОтбора.Отбор, "Регистратор",
				РеквизитыДокумента.Документ, , ВидСравненияКомпоновкиДанных.НеРавно);
			ПараметрыПолученияХранимогоФакта.Вставить("ДополнительныйОтбор", НастройкиОтбора);
    
			ПараметрыПолученияХранимогоФакта.Вставить("ФункциональнаяВалюта", Неопределено);
			ПараметрыПолученияХранимогоФакта.Вставить("ВозвращатьУпрИРеглСуммы", Ложь);
			ПараметрыПолученияХранимогоФакта.Вставить("ВалютаОтчета", РеквизитыДокумента.Валюта);
			ПараметрыПолученияХранимогоФакта.Вставить("ДействующиеЛимиты",
				СработавшиеЛимиты.ЛимитыДействующиеНаДату.Скопировать( , "СтатьяБюджетов,НачалоПериода,КонецПериода"));
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта, ПараметрыПолученияХранимогоФакта,
				Истина);
    
			ХранимыйФактПоДокументам = БюджетированиеСервер.ФактСтатьиБюджетовХранимый(
				ПараметрыПолученияФактаДляКонтроляЛимитов.ПараметрыПолученияФакта);
			ХранимыйФактПоДокументам.Колонки.Сумма.Имя = "СуммаПриход";
			ХранимыйФактПоДокументам.Колонки.СуммаВВалюте.Имя = "СуммаВалПриход";
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ХранимыйФактПоДокументам, ФактПоДокументам);
			
		КонецЕсли;
		
		ФактПоДокументам.Колонки.СуммаВалПриход.Имя = "СуммаФакт";
		
		Если ФактПоДокументам.Количество() = 0 Тогда
			ПродолжитьРасчет = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти 
	
	#Область Этап4_ПланФактныйАнализСработавшихЛимитов
	
	ПланФактПоПравилам = Новый ТаблицаЗначений;
	
	Если ПродолжитьРасчет И Не ПараметрыКонтроля.ПоРегиструЛимитов Тогда
		
		ФактПоДокументу.Колонки.СуммаВалПриход.Имя = "СуммаФакт";
		
		// Факт по всем заявкам получается с избытком для целей контроля, т.к. разные аналитики (измерения) могут расходовать одни и те же аналитики лимита.
		// Добавим колонку - признак участия аналитик (измерений) в исходной заявке - чтобы не контролировать лишние аналитики.
		ФактПоДокументам.Колонки.Добавить("ВИсходнойЗаявке", Новый ОписаниеТипов("Булево"));
		// Колонка для расчета суммы, которую можно списать.
		ФактПоДокументам.Колонки.Добавить("СуммаФактИсходнойЗаявки", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		
		КолонкиПоискаПоЗаявке = "СтатьяБюджетов, Валюта, НачалоПериода, КонецПериода";
		МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Аналитика" + НомерАналитики;
		КонецЦикла;
		
		Если ФактПоДокументам.Колонки.Найти("Организация") <> Неопределено Тогда
			КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Организация";
		КонецЕсли;
		Если ФактПоДокументам.Колонки.Найти("Подразделение") <> Неопределено Тогда
			КолонкиПоискаПоЗаявке = КолонкиПоискаПоЗаявке + ", Подразделение";
		КонецЕсли;
		
		ФактПоДокументам.Индексы.Добавить(КолонкиПоискаПоЗаявке);
		СтруктураПоискаФакта = Новый Структура(КолонкиПоискаПоЗаявке);
		Для каждого СтрокаИсходнойЗаявки Из ФактПоДокументу Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаФакта, СтрокаИсходнойЗаявки);
			СтрокиОбщегоФакта = ФактПоДокументам.НайтиСтроки(СтруктураПоискаФакта);
			Если СтрокиОбщегоФакта.Количество() > 0 Тогда
				СтрокаОбщегоФакта = СтрокиОбщегоФакта[0];
				СтрокаОбщегоФакта.ВИсходнойЗаявке = Истина;
				СтрокаОбщегоФакта.СуммаФактИсходнойЗаявки = СтрокаИсходнойЗаявки.СуммаФакт;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПродолжитьРасчет Тогда
		
		Если ПараметрыКонтроля.ПоРегиструЛимитов Тогда
			// Фактические данные по документу хранятся во временной таблице. Остальные данные - в регистре лимитов
			// Предварительный отбор сработавших лимитов не требуется.
			ФактПоДокументам = Неопределено;
			ПараметрыПолученияФактаДляКонтроляЛимитов = Неопределено;
			СработавшиеЛимиты = ДействующиеЛимиты;
		КонецЕсли;
		
		// Сбор запроса для план-факт анализа
		ПланФактПоПравилам = ПланФактПоПравиламЛимитов(ПараметрыПолученияФактаДляКонтроляЛимитов, ПараметрыКонтроля,
			ФактПоДокументам, СработавшиеЛимиты);
		
		НарушеныТолькоИнформационныеЛимиты = Истина;
		КэшПредставлений = Новый Соответствие;
		
		// План-факт анализ
		Для Каждого СтрокаПланФакта Из ПланФактПоПравилам Цикл
			Если СтрокаПланФакта.СуммаПревышения = 0 Тогда
				Продолжить;
			КонецЕсли;
			ИерархияАналитикПоПравилам = СработавшиеЛимиты.ИерархияАналитикПоПравилам; // Соответствие
			ИерархияАналитик = ИерархияАналитикПоПравилам.Получить(СтрокаПланФакта.ПравилоЛимитов);
			
			ТекстСообщения = ТекстСообщенияПроверкиПревышенияЛимитовПоДаннымБюджетирования(
				ИерархияАналитик,
				СтрокаПланФакта, 
				РеквизитыДокумента.ДатаПроверки,
				КэшПредставлений);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
			Если СтрокаПланФакта.ТипЛимита <> Перечисления.ТипыЛимитовРасходованияДС.Информационный Тогда
				НарушеныТолькоИнформационныеЛимиты = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	#КонецОбласти 
	
	Если Не ПоискОшибок Тогда
		Возврат;
	КонецЕсли;
	
	Если ПродолжитьРасчет Тогда
		ПланФактПоПравилам.Индексы.Добавить("ТипЛимита");
		
		РазрешающийЛимитНайден    = ПланФактПоПравилам.Найти(РазрешающийЛимит, "ТипЛимита") <> Неопределено;
		ИнформационныйЛимитНайден = ПланФактПоПравилам.Найти(ИнформационныйЛимит, "ТипЛимита") <> Неопределено;
	КонецЕсли;
	
	Если НЕ РазрешающийЛимитНайден И РазрешающийЛимитОбязателен Тогда
		// Анализ, что заявка попала в один из "разрешающих лимитов".
		НарушеныТолькоИнформационныеЛимиты = Ложь;
		ТекстСообщения = НСтр("ru = 'Заявка не попадает ни в одно ""Разрешающее"" правило лимитирования. 
									|Заявка может быть только сверх-лимитной.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "",ТекстСообщения, "");
	ИначеЕсли НЕ РазрешающийЛимитНайден И НЕ ИнформационныйЛимитНайден Тогда
		// Если в системе на текущую дату действуют только информационные лимиты - то разрешающие лимиты не обязательны,
		// но если заявка не попадает ни в одно правило лимита, то это ошибка,
		// т.к. возможно не были учтены настройки правил сбора фактических данных.
		НарушеныТолькоИнформационныеЛимиты = Ложь;
		ТекстСообщения = НСтр("ru = 'Заявка не попадает ни в одно правило лимитирования.
									|Заявка может быть только сверх-лимитной.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "",ТекстСообщения, "");
	КонецЕсли;
	
	ПараметрыКонтроля.Ошибки = Ошибки;
	ПараметрыКонтроля.НарушеныТолькоИнформационныеЛимиты = НарушеныТолькоИнформационныеЛимиты;
	
КонецПроцедуры

Функция ТекстСообщенияПроверкиПревышенияЛимитовПоДаннымБюджетирования(ИерархияАналитик, СтрокаПланФакта, ДатаПроверки, КэшПредставлений)
	
	ПрименяемоеПравилоЛимита = СтрокаПланФакта.ПравилоЛимитов; // СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования -
	
	Если ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5") Тогда
		ПравоИспользованияОтчета = ПравоДоступа("Использование", Метаданные.Отчеты.ЛимитыПоДаннымБюджетирования);
	Иначе
		ПравоИспользованияОтчета = ПравоДоступа("Использование", Метаданные.Отчеты.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования);
	КонецЕсли;
	
	ПредставлениеАналитикЛимита = ПредставлениеЛимита(ИерархияАналитик, СтрокаПланФакта, КэшПредставлений);
	
	ПрименяемоеПравилоЛимитаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрименяемоеПравилоЛимита,
		"Наименование, Периодичность");
	ПериодПравила = ФинансоваяОтчетностьСервер.ПредставлениеИнтервала(ДатаПроверки,
		ПрименяемоеПравилоЛимитаРеквизиты.Периодичность);
	
	ПредставлениеПравилаЛимитов = КэшПредставлений.Получить(ПрименяемоеПравилоЛимита);
	Если ПредставлениеПравилаЛимитов = Неопределено Тогда
		ПредставлениеПравилаЛимитов = ПрименяемоеПравилоЛимитаРеквизиты.Наименование;
		КэшПредставлений.Вставить(ПрименяемоеПравилоЛимита, ПредставлениеПравилаЛимитов);
	КонецЕсли;
	
	Если ПравоИспользованияОтчета Тогда
		Если ЗначениеЗаполнено(ПредставлениеАналитикЛимита) Тогда
			ТекстСообщения = НСтр("ru = 'Общее превышение на %1 %4 лимита ""%5"" по аналитикам запланированного бюджета %6.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Общее превышение на %1 %4 лимита ""%5"".'");
		КонецЕсли;
		Если СтрокаПланФакта.СуммаПлан = 0 Тогда
			ТекстСообщения = ТекстСообщения
				+ Символы.ПС
				+ НСтр("ru = 'Лимит в периоде %7 не установлен.'");
		ИначеЕсли СтрокаПланФакта.СуммаМожноСписать > 0 Тогда
			ТекстСообщения = ТекстСообщения
				+ Символы.ПС
				+ НСтр("ru = 'Всего лимит в периоде %7 - %2 %4. Можно списать %3 %4.'");
		Иначе
			ТекстСообщения = ТекстСообщения
				+ Символы.ПС
				+ НСтр("ru = 'Всего лимит в периоде %7 - %2 %4. Лимит израсходован.'");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ПредставлениеАналитикЛимита) Тогда
			ТекстСообщения = НСтр("ru = 'Общее превышение лимита ""%5"" по аналитикам запланированного бюджета %6 за период %7.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Общее превышение лимита ""%5"" за период %7.'");
		КонецЕсли;
		Если СтрокаПланФакта.СуммаМожноСписать > 0 Тогда
			ТекстСообщения = ТекстСообщения
			+ Символы.ПС
			+ НСтр("ru = 'Можно списать %3 %4.'");
		Иначе
			ТекстСообщения = ТекстСообщения
			+ Символы.ПС
			+ НСтр("ru = 'Лимит израсходован.'");
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
		СтрокаПланФакта.СуммаПревышения,
		СтрокаПланФакта.СуммаПлан,
		СтрокаПланФакта.СуммаМожноСписать,
		СтрокаПланФакта.Валюта,
		ПредставлениеПравилаЛимитов,
		ПредставлениеАналитикЛимита,
		ПериодПравила);
		
	Возврат ТекстСообщения;

КонецФункции

Функция ПредставлениеЛимита(ИерархияАналитик, НайденнаяСтрока, КэшПредставлений)
	
	ЧастиПредставлениеЛимита = Новый Массив;
	
	Для каждого ИспользуемаяАналитика Из ИерархияАналитик Цикл
		Если НЕ ИспользуемаяАналитика.Используется Тогда
			Продолжить;
		КонецЕсли;
		ИмяИзмеренияВидАналитики = ИспользуемаяАналитика.ИзмерениеВидАналитики;
		
		ЗначениеАналитики = НайденнаяСтрока[ИспользуемаяАналитика.ПутьКАналитике];
		Если ЗначениеЗаполнено(ЗначениеАналитики) Тогда
			ПредставлениеЗначения = КэшПредставлений.Получить(ЗначениеАналитики);
			Если ПредставлениеЗначения = Неопределено Тогда
				ПредставлениеЗначения = Строка(ЗначениеАналитики);
				КэшПредставлений.Вставить(ЗначениеАналитики, ПредставлениеЗначения);
			КонецЕсли;
		Иначе
			ПредставлениеЗначения = БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(
				ИмяИзмеренияВидАналитики, "Прочие",, КэшПредставлений);
		КонецЕсли;
		
		ЧастиПредставлениеЛимита.Добавить(ПредставлениеЗначения);
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПредставлениеЛимита, " / ");
	
КонецФункции

Процедура РассчитатьБлижайшиеАналитикиПланаСУчетомИерархии(ФактическиеДанные, ПравилаЛимитов, ПлановыеДанные)
	
	ИерархияАналитикПоПравилам = ПравилаЛимитов.ИерархияАналитикПоПравилам; // Соответствие
	ЕстьСценарийПлана = ПлановыеДанные.Колонки.Найти("СценарийПлан") <> Неопределено;
	Если ЕстьСценарийПлана Тогда
		СценарииПравил = ПравилаЛимитов.СценарииПравил; // Соответствие
	КонецЕсли;
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	// Заполним аналитику плана по итоговому коэффициенту аналитик плана и соответствующим аналитикам
	ФактическиеДанные.Колонки.Добавить("ОрганизацияПлан", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ФактическиеДанные.Колонки.Добавить("ПодразделениеПлан", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ФактическиеДанные.Колонки.Добавить("Аналитика" + НомерАналитики + "План", БюджетированиеСервер.ВсеТипыАналитик());
		Если ФактическиеДанные.Колонки.Найти("Аналитика" + НомерАналитики).ТипЗначения.Типы().Количество() = 0 Тогда
			ФактическиеДанные.Колонки.Удалить("Аналитика" + НомерАналитики);
			ФактическиеДанные.Колонки.Добавить("Аналитика" + НомерАналитики, БюджетированиеСервер.ВсеТипыАналитик());
		КонецЕсли;
	КонецЦикла;
	
	НеНайденныеСтрокиПлана = ПлановыеДанные.СкопироватьКолонки();
	ИменаКолонок = ПоляПоискаПлановыхЗначенийЛимитов();
	
	ПоискПлана = Новый Структура(ИменаКолонок);
	ИндексТаблицыПлана = ПлановыеДанные.Индексы.Добавить(ИменаКолонок);
	
	Для Каждого СтрокаФакта Из ФактическиеДанные Цикл
		
		ИерархияАналитик = ИерархияАналитикПоПравилам.Получить(СтрокаФакта.ПравилоЛимитов);
		ОстатокКоэффициент = СтрокаФакта.ИтоговыйКоэффициентАналитикиПлана;
		ЕстьИспользуемыеАналитики = Ложь;
		НайденоПолноеНесовпадениеАналитик = Ложь;
		Для Каждого СтрокаИерархии Из ИерархияАналитик Цикл
			Если НЕ СтрокаИерархии.Используется Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьИспользуемыеАналитики = Истина;
			КоэффициентСовпадения = Цел(ОстатокКоэффициент / СтрокаИерархии.Коэффициент);
			ОстатокКоэффициент = ОстатокКоэффициент % СтрокаИерархии.Коэффициент;
			Если КоэффициентСовпадения = 2 Тогда
				// Точное совпадение измерения / аналитики.
				СтрокаФакта[СтрокаИерархии.ПутьКАналитике + "План"] = СтрокаФакта[СтрокаИерархии.ПутьКАналитике];
			ИначеЕсли КоэффициентСовпадения = 0 Тогда
				// Полное несовпадение аналитик для используемого вида измерения (аналитики).
				// Начиная с данного шага вся следующая по иерархии аналитика является прочей.
				НайденоПолноеНесовпадениеАналитик = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоПолноеНесовпадениеАналитик
			ИЛИ НЕ ЕстьИспользуемыеАналитики Тогда
			// Т.к. данной строки нет в плане, добавляем ее.
			ЗаполнитьЗначенияСвойств(ПоискПлана, СтрокаФакта);
			Если ПлановыеДанные.НайтиСтроки(ПоискПлана).Количество() = 0 Тогда
				СтрокаДополненияПлана = НеНайденныеСтрокиПлана.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДополненияПлана, ПоискПлана);
				Если ЕстьСценарийПлана Тогда
					СтрокаДополненияПлана.СценарийПлан = СценарииПравил.Получить(СтрокаФакта.ПравилоЛимитов);
				КонецЕсли;
				СтрокаДополненияПлана.Валюта = СтрокаФакта.Валюта; // Валюты пересчитаны в валюту заявки.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПлановыеДанные.Индексы.Удалить(ИндексТаблицыПлана);
	Если НеНайденныеСтрокиПлана.Количество() > 0 Тогда
		ИменаКолонок = "";
		Для Каждого Колонка Из НеНайденныеСтрокиПлана.Колонки Цикл
			ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + Колонка.Имя;
		КонецЦикла;
		НеНайденныеСтрокиПлана.Свернуть(ИменаКолонок); // План с нулевой суммой.
		Для Каждого СтрокаДополненияПлана Из НеНайденныеСтрокиПлана Цикл
			НоваяСтрокаПлана = ПлановыеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлана, СтрокаДополненияПлана);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПланФактПоПравиламЛимитов(ПараметрыПолученияФакта, ПараметрыКонтроля, ФактическиеДанные, ПравилаЛимитов, ВРазрезеГруппировокФакта = Ложь, ДополнительныйОтборРасшифровкиОтчета = Неопределено)
	
	ПланФактПоПравиламЛимитов = Новый ТаблицаЗначений;
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Документ = ПараметрыКонтроля.РеквизитыДокумента.Документ;
	Валюта = ПараметрыКонтроля.РеквизитыДокумента.Валюта;
	ДатаПроверки = ПараметрыКонтроля.РеквизитыДокумента.ДатаПроверки;
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	РасшифровкаПоРегистратору = Ложь;
	Если НЕ ДополнительныйОтборРасшифровкиОтчета = Неопределено
		И ДополнительныйОтборРасшифровкиОтчета.ИспользоватьОтбор Тогда
		// Расшифровка отчета по лимитам. Используется только вместе с отбором по правилу лимитов.
		РасшифровкаПоРегистратору = ДополнительныйОтборРасшифровкиОтчета.РасшифровкаПоРегистратору;
	КонецЕсли;
	
	ПравилаЛимитовСДопДанными = ПравилаЛимитов.ЛимитыДействующиеНаДату;
	
	Если ПараметрыПолученияФакта <> Неопределено Тогда
		Если Не ПараметрыПолученияФакта.ПараметрыПолученияФакта.ПоОрганизациям 
			И ФактическиеДанные.Колонки.Найти("Организация") = Неопределено Тогда
			ФактическиеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		КонецЕсли;
		Если Не ПараметрыПолученияФакта.ПараметрыПолученияФакта.ПоПодразделениям 
			И ФактическиеДанные.Колонки.Найти("Подразделение") = Неопределено Тогда
			ФактическиеДанные.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		КонецЕсли;
	КонецЕсли;
	
	ОтборПоДокументу = ЗначениеЗаполнено(Документ);
	
	#Область ПолучениеПлановыхДанных
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОтборПоЗаявке", ОтборПоДокументу);
	ДополнительныеПараметры.Вставить("РасшифровкаПоРегистратору", РасшифровкаПоРегистратору);
	ДополнительныеПараметры.Вставить("ИспользоватьНесколькоВалют", ИспользоватьНесколькоВалют);
	ДополнительныеПараметры.Вставить("ДатаПроверки", ДатаПроверки);
	ДополнительныеПараметры.Вставить("ВалютаЗаявки", Валюта);
	ДополнительныеПараметры.Вставить("ДополнительныйОтборРасшифровкиОтчета", ДополнительныйОтборРасшифровкиОтчета);
	
	ПоРегиструЛимитов = ПараметрыКонтроля <> Неопределено И ПараметрыКонтроля.Свойство("ПоРегиструЛимитов")
		И ПараметрыКонтроля.ПоРегиструЛимитов;
	
	Если ПоРегиструЛимитов Тогда
	
		МенеджерВременныхТаблиц = ПараметрыКонтроля.МенеджерВременныхТаблиц;
		
		МенеджерВременныхТаблиц = МенеджерВТ_ПланФактПоРегиструЛимитов(ПравилаЛимитовСДопДанными, ФактическиеДанные,
			ДополнительныеПараметры, МенеджерВременныхТаблиц);
		ПлановыеДанные = МенеджерВременныхТаблиц.Таблицы.Найти("ПлановыеДанныеПоПравилам").ПолучитьДанные().Выгрузить();
		
	ИначеЕсли РасшифровкаПоРегистратору Тогда
		
		ПлановыеДанныеПоРегистраторам = ПлановыеДанныеДляПланФакта(ПравилаЛимитовСДопДанными, ДополнительныеПараметры);
		
		// Сворачиваем данные для корректного распределения.
		ПлановыеДанные = ПлановыеДанныеПоРегистраторам.Скопировать();
		Если ПлановыеДанные.Количество() > 0 Тогда
			КолонкиИзмерений = "";
			Для Каждого Колонка Из ПлановыеДанные.Колонки Цикл
				Если Колонка.Имя = "Регистратор"
					ИЛИ Колонка.Имя = "СуммаПлан" Тогда
					Продолжить;
				КонецЕсли;
				КолонкиИзмерений = КолонкиИзмерений + ?(КолонкиИзмерений = "", "", ", ") + Колонка.Имя;
			КонецЦикла;
			ПлановыеДанные.Свернуть(КолонкиИзмерений, "СуммаПлан");
		КонецЕсли;
	Иначе
		ПлановыеДанные = ПлановыеДанныеДляПланФакта(ПравилаЛимитовСДопДанными, ДополнительныеПараметры);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СверкаФактаИДополнениеПлана
	
	Если ПоРегиструЛимитов Тогда
		
		ФактическиеДанныеСвернутые = МенеджерВременныхТаблиц.Таблицы.Найти("ФактическиеДанныеПоПравилам").ПолучитьДанные().Выгрузить();
		
	Иначе
		
		ФактическиеДанныеСвернутые = СвернутыйФактДляПланФакта(ПравилаЛимитовСДопДанными,
	                                                       ФактическиеДанные,
	                                                       ПлановыеДанные,
	                                                       ДополнительныеПараметры);
	КонецЕсли;
	
	// Дозаполнение аналитик плана в таблице свернутого факта и дополнение таблицы плана при отсутствии данных.
	РассчитатьБлижайшиеАналитикиПланаСУчетомИерархии(ФактическиеДанныеСвернутые,
		ПравилаЛимитов,
		ПлановыеДанные);
	
	#КонецОбласти 
	
	#Область РасчетПланФакта
	
	Если РасшифровкаПоРегистратору Тогда
		// Таблица ФактическиеДанныеСвернутые свернута по неиспользуемым измерениям (аналитикам), но содержит регистратор.
		// Оставляем исходную таблицу для получения расшифровки.
		ФактическиеДанные = ФактическиеДанныеСвернутые.Скопировать();
		ИзмеренияФакта = "";
		Для Каждого КолонкаФакта Из ФактическиеДанные.Колонки Цикл
			Если КолонкаФакта.Имя = "СуммаФакт" Тогда
				Продолжить;
			КонецЕсли;
			ИзмеренияФакта = ИзмеренияФакта + ?(ИзмеренияФакта = "", "", ", ") + КолонкаФакта.Имя;
		КонецЦикла;
		ФактическиеДанные.Свернуть(ИзмеренияФакта, "СуммаФакт");
	Иначе
		ФактическиеДанные = ФактическиеДанныеСвернутые;
	КонецЕсли;
	
	Если ПоРегиструЛимитов Тогда
		
		ДополнитьВременнуюТаблицуФактаАналитикамиПлана(МенеджерВременныхТаблиц, ФактическиеДанные);
		ТаблицыДанныхПоЛимитам = РассчитатьПланФактИСформироватьТаблицуДвижений(МенеджерВременныхТаблиц, ПараметрыКонтроля);
		ПланФактПоПравиламЛимитов = ТаблицыДанныхПоЛимитам.ПланФактПоПравиламЛимитов;
		Если ПараметрыКонтроля.РезервироватьСуммуЛимита Тогда
			ПараметрыКонтроля.ТаблицыДляДвижений.Вставить("ТаблицаЛимитыПоДаннымБюджетирования",
				ТаблицыДанныхПоЛимитам.ТаблицаЛимитыПоДаннымБюджетирования);
			МенеджерВременныхТаблиц.Закрыть();
		Иначе
			ПараметрыКонтроля.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		КонецЕсли;
		
	Иначе
		
		СхемаПланФакта = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ПолучитьМакет("ПланФактныйАнализЛимитов");
		
		Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(СхемаПланФакта.НаборыДанных.Факт,
			"СуммаФактИсходнойЗаявки",
			"СуммаФактИсходнойЗаявки",,
			ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
			
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаПланФакта,
			"СуммаМожноСписать",
			"0",
			,
			Истина,
			ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
			
			ФинансоваяОтчетностьСервер.НовыйРесурс(СхемаПланФакта, 
			"СуммаМожноСписать",
			"Сумма",
			"ВЫБОР
			| КОГДА ЕстьNull(Сумма(СуммаПлан), 0) > (ЕстьNull(Сумма(СуммаФакт), 0) - ЕстьNull(Сумма(СуммаФактИсходнойЗаявки), 0))
			|     ТОГДА ЕстьNull(Сумма(СуммаПлан), 0) - (ЕстьNull(Сумма(СуммаФакт), 0) - ЕстьNull(Сумма(СуммаФактИсходнойЗаявки), 0))
			|     ИНАЧЕ 0
			| КОНЕЦ");
			
		КонецЕсли;
		
		КомпоновщикНастроек = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(СхемаПланФакта);
		
		КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(КомпоновщикНастроек);
		
		ВнешниеНаборыДанных = Новый Структура;
		ВнешниеНаборыДанных.Вставить("ПравилаЛимитовСДопДанными", ПравилаЛимитовСДопДанными);
		ВнешниеНаборыДанных.Вставить("ФактическиеДанные", ФактическиеДанные);
		ВнешниеНаборыДанных.Вставить("ПлановыеДанные",    ПлановыеДанные);
		
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПланФакта));
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
		
		ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек, "ОтборПоЗаявке", ОтборПоДокументу);
		ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек, "ДатаПроверкиКурса", ДатаПроверки);
		ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(КомпоновщикНастроек, "ВалютаОтчета", Валюта);
		
		Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
			ПолеСуммаФактИсходнойЗаявки =КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеСуммаФактИсходнойЗаявки.Использование = Истина;
			ПолеСуммаФактИсходнойЗаявки.Поле = Новый ПолеКомпоновкиДанных("СуммаМожноСписать");
		КонецЕсли;
		
		Если ВРазрезеГруппировокФакта Тогда
			Настройки = КомпоновщикНастроек.ПолучитьНастройки();
			Если Настройки.Структура.Количество() > 0 Тогда
				Группировка = Настройки.Структура[0];
				Если Группировка.Структура.Количество() > 0
					И Группировка.Структура[0].Имя = "ГруппировкиФакта" Тогда
					Группировка.Структура[0].Использование = Истина;
				КонецЕсли;
			КонецЕсли;
			КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
			
			ДеревоПланФакт = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПланФакта, КомпоновщикНастроек,
				ВнешниеНаборыДанных, Истина);
			
			ПланФактПоПравиламЛимитов = Новый ТаблицаЗначений;
			Для Каждого КолонкаДерева Из ДеревоПланФакт.Колонки Цикл
				Если КолонкаДерева.Имя = "Организация"
					ИЛИ КолонкаДерева.Имя = "ОрганизацияФакт" Тогда
					ТипКолонки = Новый ОписаниеТипов("СправочникСсылка.Организации");
				ИначеЕсли КолонкаДерева.Имя = "Подразделение"
					ИЛИ КолонкаДерева.Имя = "ПодразделениеФакт" Тогда
					ТипКолонки = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
				Иначе
					ТипКолонки = КолонкаДерева.ТипЗначения;
				КонецЕсли;
				ПланФактПоПравиламЛимитов.Колонки.Добавить(КолонкаДерева.Имя, ТипКолонки);
			КонецЦикла;
			ПланФактПоПравиламЛимитов.Колонки.Добавить("ЭтоСтрокаФакта", Новый ОписаниеТипов("Булево"));
			ПланФактПоПравиламЛимитов.Колонки.Добавить("ИмеетСтрокиФакта", Новый ОписаниеТипов("Булево"));
			
			Если РасшифровкаПоРегистратору Тогда
				ПланФактПоПравиламЛимитов.Колонки.Добавить("Регистратор");
				
				// Соответствия, где Ключ - имя колонки ПланФакта, значение - имя колонки таблицы с регистратором.
				ПоляПоискаПлан = Новый Соответствие;
				ПоляПоискаФакт = Новый Соответствие;
				
				ПоляПоискаПлан.Вставить("Организация", "ОрганизацияПлан");
				ПоляПоискаПлан.Вставить("Подразделение", "ПодразделениеПлан");
				
				ПоляПоискаФакт.Вставить("ОрганизацияФакт", "Организация");
				ПоляПоискаФакт.Вставить("ПодразделениеФакт", "Подразделение");
				
				Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
					ПоляПоискаПлан.Вставить("Аналитика" + НомерАналитики, "Аналитика" + НомерАналитики + "План");
					ПоляПоискаФакт.Вставить("Аналитика" + НомерАналитики + "Факт", "Аналитика" + НомерАналитики);
				КонецЦикла;
				
				КолонкиРегистраторовПлана = "ПравилоЛимитов, СтатьяБюджетов, НачалоПериода, КонецПериода";
				КолонкиРегистраторовФакта = "ПравилоЛимитов, СтатьяБюджетов, НачалоПериода, КонецПериода";
				
				Для каждого СоответствиеКолонок Из ПоляПоискаПлан Цикл
					КолонкиРегистраторовПлана = КолонкиРегистраторовПлана + ", " + СоответствиеКолонок.Значение;
				КонецЦикла;
				Для каждого СоответствиеКолонок Из ПоляПоискаФакт Цикл
					КолонкиРегистраторовФакта = КолонкиРегистраторовФакта + ", " + СоответствиеКолонок.Значение;
				КонецЦикла;
				
				ПлановыеДанныеПоРегистраторам.Индексы.Добавить(КолонкиРегистраторовПлана);
				ФактическиеДанныеСвернутые.Индексы.Добавить(КолонкиРегистраторовФакта);
				
				ПоискПлан = Новый Структура(КолонкиРегистраторовПлана);
				ПоискФакт = Новый Структура(КолонкиРегистраторовФакта);
				
			КонецЕсли;
			// Обходится дерево значений. На 1-ом уровне устанавливается только сумма плана, на 2-ом только сумма факта.
			// Получается таблица, помещаемая в схему компоновки отчета.
			
			Для Каждого СтрокаПлан Из ДеревоПланФакт.Строки Цикл
				
				Если РасшифровкаПоРегистратору Тогда
					
					ЗаполнитьЗначенияСвойств(ПоискПлан, СтрокаПлан, "ПравилоЛимитов, СтатьяБюджетов, НачалоПериода, КонецПериода");
					Для Каждого СоответствиеКолонок Из ПоляПоискаПлан Цикл
						ПоискПлан[СоответствиеКолонок.Значение] = СтрокаПлан[СоответствиеКолонок.Ключ];
					КонецЦикла;
					РегистраторыПлана = ПлановыеДанныеПоРегистраторам.НайтиСтроки(ПоискПлан);
					Для Каждого СтрокаПланаСРегистратором Из РегистраторыПлана Цикл
						
						НоваяСтрока = ПланФактПоПравиламЛимитов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлан,, "СуммаФакт");
						НоваяСтрока.СуммаПлан = СтрокаПланаСРегистратором.СуммаПлан;
						НоваяСтрока.Регистратор = СтрокаПланаСРегистратором.Регистратор;
						НоваяСтрока.СуммаФакт = 0;
						НоваяСтрока.СуммаПревышения = 0;
						НоваяСтрока.ЭтоСтрокаФакта = Ложь;
						НоваяСтрока.ИмеетСтрокиФакта = (СтрокаПлан.Строки.Количество() > 0);
						
					КонецЦикла;
				Иначе
					
					НоваяСтрока = ПланФактПоПравиламЛимитов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлан,, "СуммаФакт");
					НоваяСтрока.СуммаФакт = 0;
					НоваяСтрока.ЭтоСтрокаФакта = Ложь;
					НоваяСтрока.ИмеетСтрокиФакта = (СтрокаПлан.Строки.Количество() > 0);
					
				КонецЕсли;
				
				Для Каждого СтрокаВложенногоФакта Из СтрокаПлан.Строки Цикл
					
					Если РасшифровкаПоРегистратору Тогда
						
						ЗаполнитьЗначенияСвойств(ПоискФакт, СтрокаПлан, "ПравилоЛимитов, СтатьяБюджетов, НачалоПериода, КонецПериода");
						Для Каждого СоответствиеКолонок Из ПоляПоискаФакт Цикл
							ПоискФакт[СоответствиеКолонок.Значение] = СтрокаВложенногоФакта[СоответствиеКолонок.Ключ];
						КонецЦикла;
						
						РегистраторыФакта = ФактическиеДанныеСвернутые.НайтиСтроки(ПоискФакт);
						Для Каждого СтрокаФактаСРегистратором Из РегистраторыФакта Цикл
							
							НоваяСтрока = ПланФактПоПравиламЛимитов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВложенногоФакта,, "СуммаПлан, СуммаПревышения");
							НоваяСтрока.СуммаПлан = 0;
							НоваяСтрока.СуммаПревышения = 0;
							НоваяСтрока.СуммаФакт = СтрокаФактаСРегистратором.СуммаФакт;
							НоваяСтрока.Регистратор = СтрокаФактаСРегистратором.Регистратор;
							НоваяСтрока.ЭтоСтрокаФакта = Истина;
							
						КонецЦикла;
					Иначе
						
						НоваяСтрока = ПланФактПоПравиламЛимитов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВложенногоФакта,, "СуммаПлан, СуммаПревышения");
						НоваяСтрока.СуммаПлан = 0;
						НоваяСтрока.СуммаПревышения = 0;
						НоваяСтрока.ЭтоСтрокаФакта = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			
			ПланФактПоПравиламЛимитов = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПланФакта,
				КомпоновщикНастроек, ВнешниеНаборыДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоВалют Тогда
		Если ПланФактПоПравиламЛимитов.Колонки.Найти("Валюта") = Неопределено Тогда
			ПланФактПоПравиламЛимитов.Колонки.Добавить("Валюта");
		КонецЕсли;
		ПланФактПоПравиламЛимитов.ЗаполнитьЗначения(Константы.ВалютаУправленческогоУчета.Получить(), "Валюта");
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ПланФактПоПравиламЛимитов;

КонецФункции

Функция ПлановыеДанныеДляПланФакта(ПравилаЛимитовСДопДанными, ДополнительныеПараметры)
	
	РасшифровкаПоРегистратору = ДополнительныеПараметры.РасшифровкаПоРегистратору;
	ИспользоватьНесколькоВалют = ДополнительныеПараметры.ИспользоватьНесколькоВалют;
	ДатаПроверки = ДополнительныеПараметры.ДатаПроверки;
	ВалютаЗаявки = ДополнительныеПараметры.ВалютаЗаявки;
	ДополнительныйОтборРасшифровкиОтчета = ДополнительныеПараметры.ДополнительныйОтборРасшифровкиОтчета; // - Структура -
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПравилаЛимитовСДопДанными", ПравилаЛимитовСДопДанными);
	СхемаПолученияПлана = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ПолучитьМакет("ПолучениеПлана");
	Если РасшифровкаПоРегистратору Тогда
		НаборДанныхПлан = СхемаПолученияПлана.НаборыДанных.План;
		НаборДанныхПлан.Запрос = СтрЗаменить(НаборДанныхПлан.Запрос,
		                                     "//ПериодичностьРегистраторДляРасшифровки",
		                                     "Регистратор");
		НаборДанныхПлан.Запрос = СтрЗаменить(НаборДанныхПлан.Запрос,
		                                     "//ВыражениеПоляРегистраторДляРасшифровки",
		                                     "ТаблицаПлана.Регистратор КАК Регистратор,");
		НаборДанныхПлан.Запрос = СтрЗаменить(НаборДанныхПлан.Запрос,
		                                     "//ПолеРегистраторДляРасшифровки",
		                                     "Регистратор.*,");
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхПлан, "Регистратор", "Регистратор");
	КонецЕсли;
	КомпоновщикНастроекПолученияПлана = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(СхемаПолученияПлана);
	
	Если ИспользоватьНесколькоВалют Тогда
		
		КолонкиПересчетаПлана = Новый Массив;
		КолонкиПересчетаПлана.Добавить("СуммаПлан");
		
		ПараметрыПересчетаПлана = БюджетированиеСервер.ШаблонПараметровПересчетаВВалюту();
		ПараметрыПересчетаПлана.ИмяНабораДанныхИсточника = "План";
		ПараметрыПересчетаПлана.ИсходнаяВалюта = "ВалютаПлан";
		ПараметрыПересчетаПлана.КолонкиПересчета = КолонкиПересчетаПлана;
		ПараметрыПересчетаПлана.ПериодКурса = ДатаПроверки;
		ПараметрыПересчетаПлана.ЦелеваяВалюта = ВалютаЗаявки;
		
		БюджетированиеСервер.ДобавитьПересчетДанныхВВалюту(СхемаПолученияПлана, КомпоновщикНастроекПолученияПлана, ПараметрыПересчетаПлана);
		
		ПолеРасчетнойВалюты = СхемаПолученияПлана.ВычисляемыеПоля.Найти("Валюта");
		ПолеРасчетнойВалюты.Выражение = "&ЦелеваяВалюта" + "План" + "1";
		
	КонецЕсли;
		
	КомпоновщикНастроекПолученияПлана.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПолученияПлана));
	КомпоновщикНастроекПолученияПлана.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(КомпоновщикНастроекПолученияПлана);
	
	Если НЕ ДополнительныйОтборРасшифровкиОтчета = Неопределено
		И ДополнительныйОтборРасшифровкиОтчета.ИспользоватьОтбор Тогда
		// Расшифровка отчета по лимитам. При расшифровке вид сравнения только на равенство.
		// Изменение настроек отчета не разрешено.
		Если ДополнительныйОтборРасшифровкиОтчета.Свойство("МодельБюджетирования")
			И НЕ ДополнительныйОтборРасшифровкиОтчета.Свойство("ПравилоЛимитов") Тогда
			
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаПолученияПлана,
			                                                "МодельБюджетирования",
			                                                "ПравилоЛимитов.Владелец",
			                                                ,
			                                                Истина,
			                                                Новый ОписаниеТипов("СправочникСсылка.МоделиБюджетирования"));
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(
				КомпоновщикНастроекПолученияПлана.Настройки.Отбор,
				"МодельБюджетирования",
				ДополнительныйОтборРасшифровкиОтчета.МодельБюджетирования,,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		Если ДополнительныйОтборРасшифровкиОтчета.Свойство("ПравилоЛимитов") Тогда
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(
				КомпоновщикНастроекПолученияПлана.Настройки.Отбор,
				"ПравилоЛимитов",
				ДополнительныйОтборРасшифровкиОтчета.ПравилоЛимитов,,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ОтборПоАналитикамПлана = Неопределено;
		Если ДополнительныйОтборРасшифровкиОтчета.Свойство("ОтборПоАналитикамПлана", ОтборПоАналитикамПлана) Тогда
			Для Каждого ЭлементОтбора Из ОтборПоАналитикамПлана Цикл
				ФинансоваяОтчетностьСервер.НовыйОтбор(
					КомпоновщикНастроекПолученияПлана.Настройки.Отбор,
					ЭлементОтбора.ИмяИзмеренияНомерАналитики + "План",
					ЭлементОтбора.Значение,,
					ВидСравненияКомпоновкиДанных.Равно);
			КонецЦикла;
		КонецЕсли;
		Если РасшифровкаПоРегистратору Тогда
			ГруппировкаПорцииДанных = КомпоновщикНастроекПолученияПлана.Настройки.Структура[0];
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Регистратор");
		КонецЕсли;
	КонецЕсли;
	
	ПлановыеДанные = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПолученияПлана,
		КомпоновщикНастроекПолученияПлана,
		ВнешниеНаборыДанных);
	
	Возврат ПлановыеДанные;
КонецФункции

Функция СвернутыйФактДляПланФакта(ПравилаЛимитовСДопДанными, ФактическиеДанные, ПлановыеДанные, ДополнительныеПараметры)
	
	РасшифровкаПоРегистратору = ДополнительныеПараметры.РасшифровкаПоРегистратору;
	ИспользоватьНесколькоВалют = ДополнительныеПараметры.ИспользоватьНесколькоВалют;
	ДатаПроверки = ДополнительныеПараметры.ДатаПроверки;
	ВалютаЗаявки = ДополнительныеПараметры.ВалютаЗаявки;
	
	#Область МакетСверткиФакта
	
	// 1. Исходно факт получается с аналитикой, указанной в статье. Так как в правилах контроля лимитов
	// измерения и аналитики могут быть отключены, то необходимо свернуть строки факта в разрезе используемых правил
	// контроля лимитов (разрез по статье бюджетирования не достаточен, т.к. одна статья может быть указана в разных правилах).
	
	// 2. В схеме ПланФактныйАнализЛимитов факт присоединяется к плану. Т.е. набор данных плана должен быть
	// получен без учета параметров набора данных факта. Таблицу правил дополним возможными периодами получения плановых данных.
	
	// 3. Для каждой строки факта получим наиболее подходящую для нее одну (и только одну) строку плана с учетом иерархии измерений
	// и аналитик, указанных в правиле контроля лимитов.
	//  ПРИМЕР 1. Таким образом, если задан план:
	//     Контрагент1
	//        <Прочие договоры>   - сумма 1 плана
	//     Контрагент2
	//        <Прочие договоры>   - сумма 2 плана
	//     <Прочие контрагенты>
	//        <Прочие договоры>   - сумма 3 плана,
	//   то для строки факта Контрагент1 и Договор2, должна быть получена только сумма 1 плана, как ближайшее значение.
	//  ПРИМЕР 2. Также, если задан план:
	//     Контрагент1
	//        Договор1   - сумма 1 плана
	//     Контрагент2
	//        Договор2   - сумма 2 плана
	//     <Прочие контрагенты>
	//        <Прочие договоры>   - сумма 3 плана,
	//   то для строки факта Контрагент1 и Договор2, должна быть получена только сумма = 0
	//   по НЕ заданной аналитике плана Контрагент1 и <Прочие договоры>.
	//  ПРИМЕР 3. Также, если задан план:
	//     Контрагент1
	//        <Прочие договоры>   - сумма 1 плана
	//     Контрагент2
	//        <Прочие договоры>   - сумма 2 плана
	//     <Прочие контрагенты>
	//        <Прочие договоры>   - сумма 3 плана,
	//   то для строки факта Контрагент3 и Договор3, должна быть получена только сумма 3 плана, как ближайшее значение.
	//
	// С помощью рассчитанных коэффициентов измерений и аналитик, в СКД свертки
	// факта рассчитывается максимальный совокупный коэффициент строки подходящего плана.
	// Причем, в СКД свертки факта для целей определения ближайшей аналитики плана с учетом иерархии,
	// считается, что для строки факта подходят ВСЕ строки плана. Таким образом, если нет подходящей строки
	// плана (пример 2), то максимальный совокупный коэффициент строки подходящего плана будет рассчитан верно.
	// Коэффициент измерения (аналитики) тем больше, чем выше измерение (аналитика) в иерархии.
	// При расчете общего коэффициента считается, если аналитики совпали полностью, коэффициент умножается на 2,
	// Если в факте аналитика заполнена, а в плане <прочая>, то коэффициент умножается на 1,
	// Если аналитика в плане заполнена и не совпадает с аналитикой факта, то коэффициент умножается на 0.
	//  ПРИМЕР 1 (условия приведены выше):
	//   для строки факта Контрагент1 и Договор2 соответствуют строки плана:
	//     Контрагент1, <Прочие договоры>. Общий коэффициент = 2 * 10 + 1 * 1 = 21,
	//                                       где 2  - совпадение контрагентов
	//                                           10 - коэффициент аналитики Контрагенты
	//                                           1  - прочая аналитика договоров в плане
	//                                           1  - коэффициент аналитики Договоры.
	//     Контрагент2, Договор2. Общий коэффициент = 0 * 10 + 2 * 1 = 2.
	//     <Прочие контрагенты>, <Прочие договоры>. Общий коэффициент = 1 * 10 + 1 * 1 = 11.
	//   Таким образом максимальный коэффициент подходящей аналитики плана = 21.
	//   Обратное преобразование дает аналитику плана: 20 = 2 * 10 (Контрагент1) и 1 = 1 * 1 (<Прочие договоры>).
	//  ПРИМЕР 2 (условия приведены выше):
	//   для строки факта Контрагент1 и Договор2 соответствуют строки плана:
	//     Контрагент1, <Прочие договоры>. Общий коэффициент = 2 * 10 + 0 * 1 = 20,
	//     Контрагент2, Договор2. Общий коэффициент = 0 * 10 + 2 * 1 = 2.
	//     <Прочие контрагенты>, <Прочие договоры>. Общий коэффициент = 1 * 10 + 1 * 1 = 11.
	//   Таким образом максимальный коэффициент подходящей аналитики плана = 20.
	//   Обратное преобразование дает аналитику плана: 20 = 2 * 10 (Контрагент1) и 0 = 0 * 1 (<Прочие договоры>), хотя такая аналитика плана НЕ задана.
	//  ПРИМЕР 3 (условия приведены выше):
	//   для строки факта Контрагент3 и Договор3 соответствуют строки плана:
	//     Контрагент1, <Прочие договоры>. Общий коэффициент = 0 * 10 + 1 * 1 = 1,
	//     Контрагент2, <Прочие договоры>. Общий коэффициент = 0 * 10 + 1 * 1 = 1.
	//     <Прочие контрагенты>, <Прочие договоры>. Общий коэффициент = 1 * 10 + 1 * 1 = 11.
	//   Таким образом максимальный коэффициент подходящей аналитики плана = 11.
	//   Обратное преобразование дает аналитику плана: 10 = 1 * 10 (<Прочие контрагенты>) и 1 = 1 * 1 (<Прочие договоры>).
	
	СхемаСверткиФакта = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ПолучитьМакет("СверткаФакта");
	
	ВыражениеИтоговыйКоэффициентАналитикиПлана = ВыражениеИтоговыйКоэффициентАналитикиПлана();
	
	#КонецОбласти
	
	НаборДанныхФакт = СхемаСверткиФакта.НаборыДанных.Факт;
	Если РасшифровкаПоРегистратору Тогда
		// Регистратор факта.
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхФакт, "Регистратор", "Регистратор");
	КонецЕсли;
	Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхФакт,
		                                           "СуммаФактИсходнойЗаявки",
		                                           "СуммаФактИсходнойЗаявки",,
		                                           ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		
		ФинансоваяОтчетностьСервер.НовыйРесурс(СхемаСверткиФакта, "СуммаФактИсходнойЗаявки", "Сумма");
	КонецЕсли;
	
	ПолеИтоговыйКоэффициентАналитикиПлана = СхемаСверткиФакта.ВычисляемыеПоля.Найти("ИтоговыйКоэффициентАналитикиПлана");
	ПолеИтоговыйКоэффициентАналитикиПлана.Выражение = ВыражениеИтоговыйКоэффициентАналитикиПлана;
	
	КомпоновщикНастроекСверткиФакта = БюджетированиеСервер.ИнициализированныйКомпоновщикПоУмолчанию(СхемаСверткиФакта);
	
	Если ИспользоватьНесколькоВалют Тогда
		
		КолонкиПересчетаПлана = Новый Массив;
		КолонкиПересчетаПлана.Добавить("СуммаФакт");
		Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
			КолонкиПересчетаПлана.Добавить("СуммаФактИсходнойЗаявки");
		КонецЕсли;
		
		ПараметрыПересчетаФакта = БюджетированиеСервер.ШаблонПараметровПересчетаВВалюту();
		ПараметрыПересчетаФакта.ИмяНабораДанныхИсточника = "Факт";
		ПараметрыПересчетаФакта.ИсходнаяВалюта = "ВалютаФакт";
		ПараметрыПересчетаФакта.КолонкиПересчета = КолонкиПересчетаПлана;
		ПараметрыПересчетаФакта.ПериодКурса = ДатаПроверки;
		ПараметрыПересчетаФакта.ЦелеваяВалюта = ВалютаЗаявки;
		
		БюджетированиеСервер.ДобавитьПересчетДанныхВВалюту(СхемаСверткиФакта, КомпоновщикНастроекСверткиФакта, ПараметрыПересчетаФакта);
		
		ПолеРасчетнойВалюты = СхемаСверткиФакта.ВычисляемыеПоля.Найти("Валюта");
		ПолеРасчетнойВалюты.Выражение = "&ЦелеваяВалюта" + "Факт" + "1";
		
	КонецЕсли;
	
	КомпоновщикНастроекСверткиФакта.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСверткиФакта));
	КомпоновщикНастроекСверткиФакта.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(КомпоновщикНастроекСверткиФакта);
	
	Если РасшифровкаПоРегистратору Тогда
		ГруппировкаПорцииДанных = КомпоновщикНастроекСверткиФакта.Настройки.Структура[0];
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Регистратор");
	КонецЕсли;
	Если ФактическиеДанные.Колонки.Найти("СуммаФактИсходнойЗаявки") <> Неопределено Тогда
		ПолеСуммаФактИсходнойЗаявки =КомпоновщикНастроекСверткиФакта.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеСуммаФактИсходнойЗаявки.Использование = Истина;
		ПолеСуммаФактИсходнойЗаявки.Поле = Новый ПолеКомпоновкиДанных("СуммаФактИсходнойЗаявки");
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ПравилаЛимитовСДопДанными", ПравилаЛимитовСДопДанными);
	ВнешниеНаборыДанных.Вставить("ПлановыеДанные", ПлановыеДанные);
	ВнешниеНаборыДанных.Вставить("ФактическиеДанные", ФактическиеДанные);
	
	ФактическиеДанныеСвернутые = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаСверткиФакта, КомпоновщикНастроекСверткиФакта, ВнешниеНаборыДанных);
	
	Возврат ФактическиеДанныеСвернутые;
КонецФункции

Функция ДанныеДополнительныхПолейПравилЛимитов(ПравилаЛимитов, ИерархияАналитикПоПравилам)
	
	ДанныеДополнительныхПолей = ПравилаЛимитов.СкопироватьКолонки();
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоОрганизациям", Новый ОписаниеТипов("Булево"));
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоПодразделениям", Новый ОписаниеТипов("Булево"));
	ДанныеДополнительныхПолей.Колонки.Добавить("ПоСценариям", Новый ОписаниеТипов("Булево"));
	// Поля для целей определения наиболее подходящей строки плана для каждой строки факта.
	ДанныеДополнительныхПолей.Колонки.Добавить("КоэффициентОрганизации", Новый ОписаниеТипов("Число", , ,
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ДанныеДополнительныхПолей.Колонки.Добавить("КоэффициентПодразделения", Новый ОписаниеТипов("Число", , ,
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	// Поля НачалоПериода и КонецПериода для передачи параметров в наборы получения плана.
	ДанныеДополнительныхПолей.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата", , , , ,
		Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ДанныеДополнительныхПолей.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата", , , , ,
		Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	ВидыАналитикПравила = Новый Структура; 
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ДанныеДополнительныхПолей.Колонки.Добавить("ВидАналитики" + НомерАналитики,
			Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов, Null"));
		ВидыАналитикПравила.Вставить("ВидАналитики" + НомерАналитики);
		
		// Поля для целей определения наиболее подходящей строки плана для каждой строки факта.
		ДанныеДополнительныхПолей.Колонки.Добавить("КоэффициентВидаАналитики" + НомерАналитики,
			Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
		ВидыАналитикПравила.Вставить("КоэффициентВидаАналитики" + НомерАналитики);
	КонецЦикла;
	
	Для Каждого ПравилоЛимита Из ПравилаЛимитов Цикл
	
		#Область КэшированиеНастроекПравила
		ИерархияАналитик = ИерархияАналитикПоПравилам.Получить(ПравилоЛимита.ПравилоЛимитов);
		НайденныеСтроки = ИерархияАналитик.НайтиСтроки(Новый Структура("ИзмерениеВидАналитики", "Организация"));
		Если НайденныеСтроки.Количество() > 0
		   И НайденныеСтроки[0].Используется Тогда
			ПоОрганизациям = Истина;
			КоэффициентОрганизации = НайденныеСтроки[0].Коэффициент;
		Иначе
			ПоОрганизациям = Ложь;
			КоэффициентОрганизации = 0;
		КонецЕсли;
			
		НайденныеСтроки = ИерархияАналитик.НайтиСтроки(Новый Структура("ИзмерениеВидАналитики", "Подразделение"));
		Если НайденныеСтроки.Количество() > 0
		   И НайденныеСтроки[0].Используется Тогда
			ПоПодразделениям = Истина;
			КоэффициентПодразделения = НайденныеСтроки[0].Коэффициент;
		Иначе
			ПоПодразделениям = Ложь;
			КоэффициентПодразделения = 0;
		КонецЕсли;
		
		ПоСценариям = ЗначениеЗаполнено(ПравилоЛимита.Сценарий);
		
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			НайденныеСтроки = ИерархияАналитик.НайтиСтроки(Новый Структура("ПутьКАналитике", "Аналитика" + НомерАналитики));
			Если НайденныеСтроки.Количество() > 0
			   И НайденныеСтроки[0].Используется Тогда
				ВидыАналитикПравила["ВидАналитики" + НомерАналитики] = НайденныеСтроки[0].ИзмерениеВидАналитики;
				ВидыАналитикПравила["КоэффициентВидаАналитики" + НомерАналитики] = НайденныеСтроки[0].Коэффициент;
			Иначе
				ВидыАналитикПравила["ВидАналитики" + НомерАналитики] = Неопределено;
				ВидыАналитикПравила["КоэффициентВидаАналитики" + НомерАналитики] = 0;
			КонецЕсли;
		КонецЦикла;
		
		#КонецОбласти 
		
		СтрокаДопДанных = ДанныеДополнительныхПолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДопДанных, ПравилоЛимита);
		СтрокаДопДанных.ПоОрганизациям           = ПоОрганизациям;
		СтрокаДопДанных.КоэффициентОрганизации   = КоэффициентОрганизации;
		СтрокаДопДанных.ПоПодразделениям         = ПоПодразделениям;
		СтрокаДопДанных.КоэффициентПодразделения = КоэффициентПодразделения;
		СтрокаДопДанных.ПоСценариям              = ПоСценариям;
		
		ЗаполнитьЗначенияСвойств(СтрокаДопДанных, ВидыАналитикПравила);
	КонецЦикла;
	
	Возврат ДанныеДополнительныхПолей;
КонецФункции

// Возвращает настройку получения факта по документу, потребляющему лимит
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ИдентификаторыОбъектовМетаданных - вид контролируемого документа
//  ПравилаПолученияФакта - ТаблицаЗначений - правила получения факта.
//
// Возвращаемое значение:
//  Структура - структура данных для построения запроса к источнику факта:
//   *ТекстЗапроса - Строка - текст запроса
//   *ПараметрыЗапроса - Структура - параметры запроса
//
Функция НастройкаПолученияФактаПоДокументуНаДату(ВидДокумента, ПравилаПолученияФакта)
	
	НастройкаПолученияФакта = Новый Структура("ТекстЗапроса, ПараметрыЗапроса", "", Новый Структура);
	Если ПравилаПолученияФакта.Количество() = 0 Тогда
		Возврат НастройкаПолученияФакта;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ЛимитыПоДаннымБюджетирования.НастройкаПолученияФактаПоДокументуНаДату");
	КоличествоОбработанныхСтрок = 0;
	
	КолонкиТипыДанныхУчетаПравил = "ТипДанныхУчетаПриход, ТипДанныхУчетаРасход, ХешСхемыКомпоновкиДанных";
	ПравилаПолученияФакта.Индексы.Добавить(КолонкиТипыДанныхУчетаПравил);
	ТипыДанныхУчетаПравил = ПравилаПолученияФакта.Скопировать(, КолонкиТипыДанныхУчетаПравил);
	ТипыДанныхУчетаПравил.Свернуть(КолонкиТипыДанныхУчетаПравил);
	ТипыДанныхУчетаПравил.Колонки.Добавить("ИмяВременнойТаблицы", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(500)));
	ТипыДанныхУчетаПравил.Колонки.Добавить("Показатель",
		Новый ОписаниеТипов("ПеречислениеСсылка.ПоказателиАналитическихРегистров"));
	ТипыДанныхУчетаПравил.Колонки.Добавить("НастройкиСКД", Новый ОписаниеТипов("НастройкиКомпоновкиДанных"));
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
		ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ВидДокумента).ПолноеИмя());
	
	ТекстыЗапросов = Новый Массив;
	
	РеквизитыПравил = Новый Массив;
	ШаблонРеквизитовПравил = "ВыражениеЗаполненияАналитики%1, ЗаполнятьУказаннымЗначениемАналитику%1, ЗначениеАналитики%1";
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		РеквизитыПравил.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРеквизитовПравил,
			НомерАналитики));
	КонецЦикла;
	
	ОписанияПравил = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПравилаПолученияФакта.ВыгрузитьКолонку("Правило"),
		СтрСоединить(РеквизитыПравил, ", ") + ", СтатьяБюджетов, ИсточникСуммыОперации, КомпоновщикНастроек, СхемаИсточникаДанных");
	
	СтруктураПоиска = Новый Структура(КолонкиТипыДанныхУчетаПравил);
	
	Для Каждого ПриходРасход Из ТипыДанныхУчетаПравил Цикл
		Если ПустаяСтрока(ПриходРасход.ХешСхемыКомпоновкиДанных) Тогда
			ИмяВременнойТаблицы = "Движения" + ОбщегоНазначения.ИмяЗначенияПеречисления(ПриходРасход.ТипДанныхУчетаРасход)
				+ ОбщегоНазначения.ИмяЗначенияПеречисления(ПриходРасход.ТипДанныхУчетаПриход);
			ТекстыЗапросов.Добавить(МенеджерДокумента.ТекстЗапросаИсточникФактаПоТипамДанныхУчета(
				ПриходРасход.ТипДанныхУчетаРасход, ПриходРасход.ТипДанныхУчетаПриход, ИмяВременнойТаблицы));
			ШаблонИсточникаФакта = ИсточникиДанныхСервер.ТаблицаКорреспонденцийРегистров(Новый Структура("Приход, Расход",
				ПриходРасход.ТипДанныхУчетаПриход, ПриходРасход.ТипДанныхУчетаРасход));
			СКДПравила = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПоТаблицеКорреспонденцийРегистров(ШаблонИсточникаФакта);
		Иначе
			ОбязательныеПоляИсточникаДанныхПравила = СтрРазделить(
				"Организация,Подразделение,Валюта,ИсточникДанных,Регистратор,СуммаВВалюте", ",");
			ИмяВременнойТаблицы = "ВременнаяТаблица_" + ПриходРасход.ХешСхемыКомпоновкиДанных;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПриходРасход);
			Правило = ПравилаПолученияФакта.НайтиСтроки(СтруктураПоиска)[0].Правило;
			СКДПравила = ОписанияПравил[Правило].СхемаИсточникаДанных.Получить();
			ТекстОшибки = "";
			Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
				ВыражениеЗаполненияАналитики = ОписанияПравил[Правило]["ВыражениеЗаполненияАналитики"+НомерАналитики];
				Если ПустаяСтрока(ВыражениеЗаполненияАналитики) Тогда
					Продолжить;
				КонецЕсли;
				ВыражениеЗаполненияАналитики = РаботаСФормуламиКлиентСервер.ЧастиОперанда(ВыражениеЗаполненияАналитики)[0];
				Если ОбязательныеПоляИсточникаДанныхПравила.Найти(ВыражениеЗаполненияАналитики) = Неопределено Тогда
					ОбязательныеПоляИсточникаДанныхПравила.Добавить(ВыражениеЗаполненияАналитики);
				КонецЕсли;
			КонецЦикла;
			ЭлементыОтбораПравила = КомпоновкаДанныхКлиентСервер.ПолучитьЭлементыОтбора(
				ОписанияПравил[Правило].КомпоновщикНастроек.Получить().Отбор);
			Для Каждого ЭлементОтбора Из ЭлементыОтбораПравила Цикл
				Если ОбязательныеПоляИсточникаДанныхПравила.Найти(СокрЛП(ЭлементОтбора.ЛевоеЗначение)) = Неопределено Тогда
					ОбязательныеПоляИсточникаДанныхПравила.Добавить(СокрЛП(ЭлементОтбора.ЛевоеЗначение));
				КонецЕсли;
			КонецЦикла;
			Для Каждого ОбязательноеПоле Из ОбязательныеПоляИсточникаДанныхПравила Цикл
				ВыбранныеПоляНастройкиСКДПравила = СКДПравила.НастройкиПоУмолчанию.Выбор; // - ВыбранныеПоляКомпоновкиДанных -
				Если КомпоновкаДанныхСервер.НайтиПолеСКДПоПолномуИмени(ВыбранныеПоляНастройкиСКДПравила.Элементы,
					ОбязательноеПоле) = Неопределено Тогда
					ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), "", ТекстОшибки + Символы.ПС)
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
						"ru = 'Некорректно настроено правило произвольных данных по статье бюджетов ""%1"": Поле ""%2"" для заполнения аналитики не указано в выбранных полях.'"),
						ОписанияПравил[Правило].СтатьяБюджетов, ОбязательноеПоле);
				КонецЕсли;
			КонецЦикла;
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			ЗапросПоПравилу = ИсточникиДанныхСервер.ЗапросПоСхемеИсточникаДанныхПравила(СКДПравила, ИмяВременнойТаблицы);
			Если ЗапросПоПравилу = Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru = 'Некорректно настроено правило произвольных данных по статье бюджетов ""%1"": отсутствуют выбранные поля в настройках.'"),
					ОписанияПравил[Правило].СтатьяБюджетов);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			ТекстыЗапросов.Добавить(ЗапросПоПравилу.Текст);
			Для Каждого ПараметрЗапроса Из ЗапросПоПравилу.Параметры Цикл
				НастройкаПолученияФакта.ПараметрыЗапроса.Вставить(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
			КонецЦикла;
		КонецЕсли;
		ПриходРасход.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
		ПриходРасход.НастройкиСКД = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДПравила);
	КонецЦикла;
	
	ШаблонЗапросаКИсточникуФактаПоПравилу =
		"ВЫБРАТЬ
		|	&СтатьяБюджетовGUID КАК СтатьяБюджетов,
		|	ПсевдонимТаблицыИсточника.Организация КАК Организация,
		|	ПсевдонимТаблицыИсточника.Подразделение КАК Подразделение,
		|	ПсевдонимТаблицыИсточника.Валюта КАК Валюта,
		|	&ТекстПолейАналитик,
		|	&ТекстСумма КАК Сумма
		|ПОМЕСТИТЬ ФактическиеДанныеПоДокументу
		|ИЗ
		|	ПсевдонимТаблицыИсточника КАК ПсевдонимТаблицыИсточника
		|ГДЕ
		|	ПсевдонимТаблицыИсточника.ИсточникДанных = &ИсточникДанных
		|	И &ТекстУсловия";
	ШаблонЗапросаКИсточникуФактаПоПравилу = СтрЗаменить(ШаблонЗапросаКИсточникуФактаПоПравилу,
		"КАК ПсевдонимТаблицыИсточника", "КАК ПсевдонимТаблицыИсточника
										 |	&ТекстСоединений"); // @query-part
	
	ТекстыЗапросовКИсточникуФактаПоПравилу = Новый Массив;
	
	ПоказателиСуммы = ИсточникиДанныхПовтИсп.ПоказателиДвиженияДенежныхСредствКВыплате();
	
	Для Каждого СтрокаПравило Из ПравилаПолученияФакта Цикл
		
		КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПравило);
		ТипыДанныхУчетаПравила = ТипыДанныхУчетаПравил.НайтиСтроки(СтруктураПоиска)[0];
		ОписаниеПравила = ОписанияПравил[СтрокаПравило.Правило];
		
		ДанныеДляЗапросаПоПравилу = ИсточникиДанныхСервер.ДанныеДляЗапросаКИсточникуФактаПоПравилу(ОписаниеПравила,
			ТипыДанныхУчетаПравила.НастройкиСКД);
		
		Если СтрокаПравило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
			ИмяПоказателяСуммы = ПоказателиСуммы.Получить(ОписаниеПравила.ИсточникСуммыОперации).Ресурсы[0]["Имя"];
		Иначе
			ИмяПоказателяСуммы = "СуммаВВалюте";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ШаблонЗапросаКИсточникуФактаПоПравилу, "&ТекстСумма", "ПсевдонимТаблицыИсточника."
			+ ИмяПоказателяСуммы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолейАналитик",
			ДанныеДляЗапросаПоПравилу.ФрагментыТекстаЗапроса.ТекстПолейАналитик);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстСоединений",
			ДанныеДляЗапросаПоПравилу.ФрагментыТекстаЗапроса.ТекстСоединений);
		Если Не ПустаяСтрока(ДанныеДляЗапросаПоПравилу.ФрагментыТекстаЗапроса.ТекстСоединений) Тогда
			// использование доп реквизитов увеличивает время расчета кэшируемой настройки
			ЧислоСоединений = СтрЧислоВхождений(ДанныеДляЗапросаПоПравилу.ФрагментыТекстаЗапроса.ТекстСоединений,
				"ЛЕВОЕ СОЕДИНЕНИЕ"); // @query-part
			КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 2*ЧислоСоединений;
		КонецЕсли;
		Если СтрокаПравило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных",
				ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(СтрокаПравило.ХозяйственнаяОперация));
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных",
				ФинансовыйУчетПоДаннымБалансовыхРегистров.СтрокаВыборкиЗначения(СтрокаПравило.ИсточникДанных));
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстУсловия",
			ДанныеДляЗапросаПоПравилу.ФрагментыТекстаЗапроса.ТекстУсловия);
		Если Не ПустаяСтрока(ДанныеДляЗапросаПоПравилу.ФрагментыТекстаЗапроса.ТекстУсловия) Тогда
			ЧислоУсловий = СтрЧислоСтрок(ДанныеДляЗапросаПоПравилу.ФрагментыТекстаЗапроса.ТекстУсловия);
			КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + ЧислоУсловий;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкаПолученияФакта.ПараметрыЗапроса,
			ДанныеДляЗапросаПоПравилу.ПараметрыЗапроса);
		ИмяПараметраСтатьиБюджетов = "СтатьяБюджетов" + МониторингЦелевыхПоказателей.УникальныйИдентификаторВСтроку(
			СтрокаПравило.СтатьяБюджетов.УникальныйИдентификатор());
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СтатьяБюджетовGUID", ИмяПараметраСтатьиБюджетов);
		НастройкаПолученияФакта.ПараметрыЗапроса.Вставить(ИмяПараметраСтатьиБюджетов, СтрокаПравило.СтатьяБюджетов);
		
		Если ТекстыЗапросовКИсточникуФактаПоПравилу.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ФактическиеДанныеПоДокументу", ""); // @query-part
		КонецЕсли;
		
		ТекстыЗапросовКИсточникуФактаПоПравилу.Добавить(СтрЗаменить(ТекстЗапроса, "ПсевдонимТаблицыИсточника",
			ТипыДанныхУчетаПравила.ИмяВременнойТаблицы));
		
	КонецЦикла;
	
	НастройкаПолученияФакта.ПараметрыЗапроса.Вставить("ИдентификаторНеиспользуемойФинЗаписи",
		ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ТекстЗапросаКИсточникуФактаПоПравилу = СтрСоединить(ТекстыЗапросовКИсточникуФактаПоПравилу,
		ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяБюджетов"; // @query-part
	ТекстыЗапросов.Добавить(ТекстЗапросаКИсточникуФактаПоПравилу);
	
	НастройкаПолученияФакта.ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхСтрок);
	
	Возврат НастройкаПолученияФакта;

КонецФункции

// Возвращает параметры получения факта для проверки документа на соответствие лимитам бюджетирования.
//
// Параметры:
// 	РеквизитыДокумента - Структура - Свойства заявки или параметры отчета:
// 	 *ДатаПроверки   - Дата - Дата проверки лимитов.
// 	 *СсылкаНаЗаявку - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - Проверяемая заявка.
// 	 *ВалютаЗаявки   - СправочникСсылка.Валюты - Валюта заявки или отчета.
// 	ДействующиеЛимиты - см. ДействующиеЛимиты.
// 	ОтборПоЗаявке - Булево - флаг необходимости установки отбора по заявке.
// 	ДополнительныйОтборРасшифровкиОтчета - Неопределено - Значение по умолчанию.
// 	                                     - Структура - структура дополнительного отбора отчета при расшифровке:
// 	 *ИспользоватьОтбор - Булево - Флаг использования отбора. Обязательное свойство.
// 	 *ПравилоЛимитов    - СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования.
// 	 *ОтборПоАналитикамФакта - Массив из Структура - массив элементов отбора по аналитикам факта, если они заданы. Необязательное свойство:
// 	  **ИмяИзмеренияНомерАналитики - Строка - Имя измерения или имя аналитики по номеру. Например, "Аналитика1".
// 	  **Значение - Характеристика.АналитикиСтатейБюджетов - Значение отбора.
// 	 *РасшифровкаПоРегистратору - Булево - Флаг необходимости расшифровки по регистратору.
//
// Возвращаемое значение:
//	Структура - Параметры получения факта по статьям и показателя бюджетов. См. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта.
//
Функция ПараметрыПолученияФактаДляКонтроляЛимитов(РеквизитыДокумента, ДействующиеЛимиты, ОтборПоЗаявке, ДополнительныйОтборРасшифровкиОтчета = Неопределено)
	
	ЛимитыДействующиеНаДату = ДействующиеЛимиты.ЛимитыДействующиеНаДату;
	
	Периодичности = ЛимитыДействующиеНаДату.Скопировать(, "Периодичность");
	Периодичности.Свернуть("Периодичность");
	
	ВидыАналитик = ДействующиеЛимиты.ВидыАналитик.Скопировать(, "ВидАналитики");
	ВидыАналитик.Свернуть("ВидАналитики");
	
	Измерения = ДействующиеЛимиты.Измерения.Скопировать(, "ИмяИзмерения");
	Измерения.Свернуть("ИмяИзмерения");
	
	// Инициализируем параметры получения факта
	РезультатФункции = Новый Структура("ПараметрыПолученияФакта, ИсточникиДанных");
	// Общие параметры получения фактических данных
	ПараметрыПолученияФакта = Новый Структура;
	ПараметрыПолученияФакта.Вставить("ВалютаСценария",    РеквизитыДокумента.Валюта);
	ПараметрыПолученияФакта.Вставить("ГраницаФактДанных", РеквизитыДокумента.ДатаПроверки);
	ПараметрыПолученияФакта.Вставить("ДатаАктуальности",  РеквизитыДокумента.ДатаПроверки);
	ПараметрыПолученияФакта.Вставить("НачалоПериода",     РеквизитыДокумента.ДатаПроверки); // Уточняется выражениями источников данных
	ПараметрыПолученияФакта.Вставить("КонецПериода",      РеквизитыДокумента.ДатаПроверки); // Уточняется выражениями источников данных
	ПараметрыПолученияФакта.Вставить("ПериодКурса",       РеквизитыДокумента.ДатаПроверки); // Переопределение даты пересчета курсов валют на дату проверки.
	ПараметрыПолученияФакта.Вставить("Сценарий",          Справочники.Сценарии.ИсполнениеБюджета);
	ПараметрыПолученияФакта.Вставить("Период", Новый СтандартныйПериод(РеквизитыДокумента.ДатаПроверки,
		РеквизитыДокумента.ДатаПроверки));
	ПараметрыПолученияФакта.Вставить("ДополнительныеФильтрыПоАналитикам", Новый Структура);
	ПараметрыПолученияФакта.Вставить("ПоРегистратору",    Ложь);
	
	Показатели = Новый Структура("Сумма");
	ПараметрыПолученияФакта.Вставить("Показатели", Показатели);
	
	КолонкиТаблицыДанных = Новый Структура("Периодичности, Измерения, ВидыАналитик");
	КолонкиТаблицыДанных.Периодичности = Периодичности.ВыгрузитьКолонку("Периодичность");
	КолонкиТаблицыДанных.Измерения     = Измерения.ВыгрузитьКолонку("ИмяИзмерения");
	КолонкиТаблицыДанных.ВидыАналитик  = ВидыАналитик.ВыгрузитьКолонку("ВидАналитики");
	ПараметрыПолученияФакта.Вставить("КолонкиТаблицыДанных", КолонкиТаблицыДанных);
	
	Если КолонкиТаблицыДанных.Измерения.Найти("Организация") <> Неопределено Тогда
		ПоОрганизациям = Истина;
	Иначе
		ПоОрганизациям = Ложь;
	КонецЕсли;
	ПараметрыПолученияФакта.Вставить("ПоОрганизациям", ПоОрганизациям);
	
	Если КолонкиТаблицыДанных.Измерения.Найти("Подразделение") <> Неопределено Тогда
		ПоПодразделениям = Истина;
	Иначе
		ПоПодразделениям = Ложь;
	КонецЕсли;
	ПараметрыПолученияФакта.Вставить("ПоПодразделениям", ПоПодразделениям);
	
	НастройкиСоставаПолей = Новый Структура;
	НастройкиСоставаПолей.Вставить("ТребуетсяКоличество", Ложь);
	НастройкиСоставаПолей.Вставить("ТребуетсяСумма", Истина);
	НастройкиСоставаПолей.Вставить("ТребуетсяСуммаНачальныйОстаток", Ложь);
	НастройкиСоставаПолей.Вставить("ТребуетсяСуммаПриход", Истина);
	НастройкиСоставаПолей.Вставить("ТребуетсяСуммаРасход", Ложь);
	
	ПараметрыПолученияФакта.Вставить("НастройкиСоставаПолей", НастройкиСоставаПолей);
	
	РезультатФункции.ПараметрыПолученияФакта = ПараметрыПолученияФакта;
	
	// Общие параметры источников данных
	ИсточникиДанных = Новый Массив;
	
	ОбщиеПараметрыИсточникаДанных = Новый Структура;
	ОбщиеПараметрыИсточникаДанных.Вставить("ТипИсточника", Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПериодСмещения", Неопределено);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПериодичностьСмещения", Перечисления.Периодичность.Год);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПривилегированныйРежим", Истина);
	ОбщиеПараметрыИсточникаДанных.Вставить("ПредполагаетФактическиеДанные", "НеПредполагается");
	ОбщиеПараметрыИсточникаДанных.Вставить("ПредполагаетИсполнениеБюджета", "Предполагается");
	ОбщиеПараметрыИсточникаДанных.Вставить("ЕстьОнЛайновыеПравила", Истина);
	ОбщиеПараметрыИсточникаДанных.Вставить("ЕстьЦелевыеПоказатели", Ложь);
	
	ОбщиеПараметрыИсточникаДанных.Вставить("ДополнительныйОтбор", Новый НастройкиКомпоновкиДанных);
	Если ОтборПоЗаявке Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОбщиеПараметрыИсточникаДанных.ДополнительныйОтбор,
			"Регистратор",
			РеквизитыДокумента.Документ);
		ПараметрыПолученияФакта.Вставить("ОтборПоРегистраторуДляВсегоФакта",
			Новый Структура("ВидСравнения, ПравоеЗначение", ВидСравненияКомпоновкиДанных.Равно,
			РеквизитыДокумента.Документ));
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДокумента.Документ)
		И ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам") Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОбщиеПараметрыИсточникаДанных.ДополнительныйОтбор,
			"Регистратор",
			РеквизитыДокумента.Документ, ВидСравненияКомпоновкиДанных.НеРавно);
		ПараметрыПолученияФакта.Вставить("ОтборПоРегистраторуДляВсегоФакта",
			Новый Структура("ВидСравнения, ПравоеЗначение", ВидСравненияКомпоновкиДанных.НеРавно,
			РеквизитыДокумента.Документ));
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		ОбщиеПараметрыИсточникаДанных.ДополнительныйОтбор,
		"Сценарий",
		Справочники.Сценарии.ИсполнениеБюджета);
	
	Если НЕ ДополнительныйОтборРасшифровкиОтчета = Неопределено
		И ДополнительныйОтборРасшифровкиОтчета.ИспользоватьОтбор Тогда
		
		// Если задан отбор по регистратору, то действующие лимиты обязательно получены с отбором по одному правилу лимитов.
		ПараметрыПолученияФакта.ПоРегистратору = ДополнительныйОтборРасшифровкиОтчета.РасшифровкаПоРегистратору;
		
		Если ДополнительныйОтборРасшифровкиОтчета.Свойство("ОтборПоАналитикамФакта")
			И НЕ ОтборПоЗаявке Тогда
			// Правила получения факта по заявке должны выполниться без дополнительных отборов расшифровки отчета,
			// т.к. отбор по аналитике расшифровки может не совпадать с аналитикой заявки
			ОтборыПоАналитикамФакта = ДополнительныйОтборРасшифровкиОтчета.ОтборПоАналитикамФакта;
			Для каждого ЭлементОтбора Из ОтборыПоАналитикамФакта Цикл
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					ОбщиеПараметрыИсточникаДанных.ДополнительныйОтбор,
					ЭлементОтбора.ИмяИзмеренияНомерАналитики,
					ЭлементОтбора.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Уникальные параметры источников данных
	Для Каждого ПризнакУникальности Из Периодичности Цикл 
		УникальныеПараметрыИсточникаДанных = Новый Структура("Идентификатор, Периодичность, Объекты,
			|ВыражениеПериодаГруппировки, ВыражениеНачалоПериода, ВыражениеКонецПериода");
		
		ЗаполнитьЗначенияСвойств(УникальныеПараметрыИсточникаДанных, ПризнакУникальности);
		УникальныеПараметрыИсточникаДанных.Идентификатор = "ИД_" + ИсточникиДанных.Количество();
		
		ИмяПериодичности = ОбщегоНазначения.ИмяЗначенияПеречисления(ПризнакУникальности.Периодичность);
		УникальныеПараметрыИсточникаДанных.ВыражениеПериодаГруппировки = СтрШаблон("НАЧАЛОПЕРИОДА(&НачалоПериода, %1)", ИмяПериодичности);
		УникальныеПараметрыИсточникаДанных.ВыражениеНачалоПериода      = СтрШаблон("НАЧАЛОПЕРИОДА(&НачалоПериода, %1)", ИмяПериодичности);
		УникальныеПараметрыИсточникаДанных.ВыражениеКонецПериода       = СтрШаблон("КОНЕЦПЕРИОДА(&КонецПериода, %1)", ИмяПериодичности);
		
		Если Периодичности.Количество() = 1 Тогда
			УникальныеПараметрыИсточникаДанных.Объекты = ЛимитыДействующиеНаДату.ВыгрузитьКолонку("СтатьяБюджетов");
		Иначе
			ОтборПравилЛимитов = Новый Структура("Периодичность");
			ЗаполнитьЗначенияСвойств(ОтборПравилЛимитов, ПризнакУникальности);
			
			УникальныеПараметрыИсточникаДанных.Объекты = ЛимитыДействующиеНаДату.Скопировать(ОтборПравилЛимитов, "СтатьяБюджетов").ВыгрузитьКолонку("СтатьяБюджетов");
		КонецЕсли;
		УникальныеПараметрыИсточникаДанных.Объекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			УникальныеПараметрыИсточникаДанных.Объекты);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(УникальныеПараметрыИсточникаДанных, ОбщиеПараметрыИсточникаДанных, Ложь);
		
		ИсточникиДанных.Добавить(УникальныеПараметрыИсточникаДанных);
	КонецЦикла;
	
	РезультатФункции.ИсточникиДанных = ИсточникиДанных;
	
	Возврат РезультатФункции;
	
КонецФункции

/// Возвращает действующие на указанную дату настройки лимитов по данным бюджетирования.
// 
// Параметры:
//	Параметры - Структура - структура параметров.
//
// Возвращаемое значение:
//  Неопределено - если настройки лимитов отсутствуют
//	Структура - Структура - настройки лимитов.
// 
Функция НастройкиЛимитовНаДату(Параметры) Экспорт
	
	ЗначениеКэша = РегистрыСведений.КэшНастроекЛимитовПоДаннымБюджетирования.ПолучитьЗначениеКэша(
		Параметры.ДатаПроверки, Параметры.ВидДокумента, Параметры.ХозяйственнаяОперация);
	Если ЗначениеКэша <> Неопределено Тогда
		Возврат ЗначениеКэша;
	КонецЕсли;
	
	ПоРегиструЛимитов = ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5");
	
	ПравилаЛимитовНаДату = Новый Структура;
	ПравилаЛимитовНаДату.Вставить("ПравилаЛимитов");
	ПравилаЛимитовНаДату.Вставить("ПравилаПолученияФакта");
	ПравилаЛимитовНаДату.Вставить("ИерархияАналитикПоПравилам");
	ПравилаЛимитовНаДату.Вставить("РазрешающийЛимитОбязателен", Ложь);
	Если Не ПоРегиструЛимитов Тогда
		ПравилаЛимитовНаДату.Вставить("ВидыАналитик");
		ПравилаЛимитовНаДату.Вставить("Измерения");
		ПравилаЛимитовНаДату.Вставить("СценарииПравил");
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаЛимитов", Параметры.ДатаПроверки);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Параметры.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ПоТаблицеКорреспонденций", ПолучитьФункциональнуюОпцию(
		"НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам"));
	
	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	МоделиБюджетирования.Ссылка КАК Ссылка,
		|	МоделиБюджетирования.НачалоДействия КАК НачалоДействия,
		|	ВЫБОР
		|		КОГДА МоделиБюджетирования.КонецДействия = ДАТАВРЕМЯ(1,1,1)
		|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|		ИНАЧЕ МоделиБюджетирования.КонецДействия
		|	КОНЕЦ КАК КонецДействия
		|ПОМЕСТИТЬ МоделиБюджетирования
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	МоделиБюджетирования.НачалоДействия <= &ДатаЛимитов
		|	И (&ДатаЛимитов <= МоделиБюджетирования.КонецДействия
		|			ИЛИ (МоделиБюджетирования.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
		|					И МоделиБюджетирования.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМоделейБюджетирования.Действует)))
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК ПравилаЛимитовПоДаннымБюджетирования
		|			ГДЕ
		|				ПравилаЛимитовПоДаннымБюджетирования.Владелец = МоделиБюджетирования.Ссылка)");
	
	Если Не ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов, "МоделиБюджетирования") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПравилаЛимитовПоДаннымБюджетирования.Ссылка КАК ПравилоЛимитов,
		|	ПравилаЛимитовПоДаннымБюджетирования.Наименование КАК Наименование,
		|	ПравилаЛимитовПоДаннымБюджетирования.СтатьяБюджета КАК СтатьяБюджетов,
		|	ПравилаЛимитовПоДаннымБюджетирования.Сценарий КАК Сценарий,
		|	ПравилаЛимитовПоДаннымБюджетирования.Периодичность КАК Периодичность,
		|	ПравилаЛимитовПоДаннымБюджетирования.ТипЛимита КАК ТипЛимита
		|ПОМЕСТИТЬ ДействующиеПравилаЛимитов
		|ИЗ
		|	Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК ПравилаЛимитовПоДаннымБюджетирования
		|ГДЕ
		|	НЕ ПравилаЛимитовПоДаннымБюджетирования.ЭтоГруппа
		|	И НЕ ПравилаЛимитовПоДаннымБюджетирования.ПометкаУдаления
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				МоделиБюджетирования КАК МоделиБюджетирования
		|			ГДЕ
		|				МоделиБюджетирования.Ссылка = ПравилаЛимитовПоДаннымБюджетирования.Владелец)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяБюджетов");
	
	Если ЗначениеЗаполнено(Параметры.ВидДокумента) Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
			ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Параметры.ВидДокумента).ПолноеИмя());
		ТекстыЗапросов.Добавить(МенеджерДокумента.ТекстЗапросаИсточникиДанныхПравилПолученияФакта());
	Иначе
		ТекстыПодзапросов = Новый Массив;
		Если ПоРегиструЛимитов Тогда
			МассивИменДокументов = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(
				ИсточникиДанныхПовтИсп.ИменаВидовДокументовДляКонтроляЛимитов(
				Перечисления.ТипыДанныхУчета.ДенежныеСредства), Ложь);
		Иначе
			МассивИменДокументов = Новый Массив;
			МассивИменДокументов.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
			МассивИменДокументов.Добавить(Метаданные.Документы.ЗаявкаНаКомандировку.ПолноеИмя());
		КонецЕсли;
		Для Каждого ИмяДокумента Из МассивИменДокументов Цикл
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяДокумента);
			ТекстЗапроса = МенеджерДокумента.ТекстЗапросаИсточникиДанныхПравилПолученияФакта();
			Если ТекстыПодзапросов.Количество() > 0 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИсточникиДанныхПравилПолученияФакта", "");
			КонецЕсли;
			ТекстыПодзапросов.Добавить(ТекстЗапроса);
		КонецЦикла;
		ТекстыЗапросов.Добавить(СтрСоединить(ТекстыПодзапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(
			Истина)));
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Правило,
		|	ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов КАК СтатьяБюджетов,
		|	ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных КАК РазделИсточникаДанных,
		|	НЕ ИсточникиДанныхПравилПолученияФакта.ИсточникДанных ЕСТЬ NULL КАК ПрименятьПравило
		|ПОМЕСТИТЬ ДействующиеПравилаПолученияФактаОперативныйУчет
		|ИЗ
		|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиДанныхПравилПолученияФакта КАК ИсточникиДанныхПравилПолученияФакта
		|		ПО ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных = ИсточникиДанныхПравилПолученияФакта.ИсточникДанных
		|ГДЕ
		|	ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных = ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет)
		|	И ПравилаПолученияФактаПоСтатьямБюджетов.ТипПравила В (ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные), ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета))
		|	И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПометкаУдаления
		|	И ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетС <= &ДатаЛимитов
		|	И (&ДатаЛимитов <= ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо
		|			ИЛИ ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1))
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
		|			ГДЕ
		|				ДействующиеПравилаЛимитов.СтатьяБюджетов = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяБюджетов,
		|	Правило");
	
	ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Правило,
		|	ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов КАК СтатьяБюджетов
		|ИЗ
		|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
		|ГДЕ
		|	ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных = ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные)
		|	И ПравилаПолученияФактаПоСтатьямБюджетов.ТипПравила В (ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные), ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета))
		|	И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПометкаУдаления
		|	И ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетС <= &ДатаЛимитов
		|	И (&ДатаЛимитов <= ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо
		|			ИЛИ ПравилаПолученияФактаПоСтатьямБюджетов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1))
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
		|			ГДЕ
		|				ДействующиеПравилаЛимитов.СтатьяБюджетов = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов)");
		
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстыЗапросов.Очистить();
	Результат = Запрос.Выполнить();
	ЕстьПравилаСПроизвольнымиДанными = Ложь;
	Если Не Результат.Пустой() Тогда
		ИсходнаяТаблицаПравилСПроизвольнымиДанными = Результат.Выгрузить();
		НоваяТаблицаПравилСПроизвольнымиДанными = ИсходнаяТаблицаПравилСПроизвольнымиДанными.СкопироватьКолонки();
		НоваяТаблицаПравилСПроизвольнымиДанными.Колонки.Добавить("ТипДанныхУчетаРасход",
			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДанныхУчета"));
		НоваяТаблицаПравилСПроизвольнымиДанными.Колонки.Добавить("ТипДанныхУчетаПриход",
			Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДанныхУчета"));
		Для Каждого СтрокаПравила Из ИсходнаяТаблицаПравилСПроизвольнымиДанными Цикл
			ТипыДанныхУчетаПравила = ИсточникиДанныхПовтИсп.ТипыДанныхУчетаПравилаСПроизвольнымиДанными(СтрокаПравила.Правило);
			Для Каждого ПриходРасходПравила Из ТипыДанныхУчетаПравила Цикл
				НоваяСтрока = НоваяТаблицаПравилСПроизвольнымиДанными.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПравила);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПриходРасходПравила);
			КонецЦикла;
		КонецЦикла;
		
		Если НоваяТаблицаПравилСПроизвольнымиДанными.Количество() > 0 Тогда
			
			ЕстьПравилаСПроизвольнымиДанными = Истина;
			
			ТекстыЗапросов.Добавить("
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ПравилаСПроизвольнымиДанными.Правило КАК Справочник.ПравилаПолученияФактаПоСтатьямБюджетов) КАК Правило,
				|	ВЫРАЗИТЬ(ПравилаСПроизвольнымиДанными.СтатьяБюджетов КАК Справочник.СтатьиБюджетов) КАК СтатьяБюджетов,
				|	ВЫРАЗИТЬ(ПравилаСПроизвольнымиДанными.ТипДанныхУчетаРасход КАК Перечисление.ТипыДанныхУчета) КАК Расход,
				|	ВЫРАЗИТЬ(ПравилаСПроизвольнымиДанными.ТипДанныхУчетаПриход КАК Перечисление.ТипыДанныхУчета) КАК Приход
				|ПОМЕСТИТЬ ПравилаСПроизвольнымиДанными
				|ИЗ
				|	&ПравилаСПроизвольнымиДанными КАК ПравилаСПроизвольнымиДанными");
			Запрос.УстановитьПараметр("ПравилаСПроизвольнымиДанными", НоваяТаблицаПравилСПроизвольнымиДанными);
			
			ТекстыЗапросов.Добавить("
				|ВЫБРАТЬ
				|	ПравилаСПроизвольнымиДанными.Правило КАК Правило,
				|	ПравилаСПроизвольнымиДанными.СтатьяБюджетов КАК СтатьяБюджетов,
				|	ЗНАЧЕНИЕ(Перечисление.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные) КАК РазделИсточникаДанных,
				|	НЕ ИсточникиДанныхПравилПолученияФакта.Расход ЕСТЬ NULL КАК ПрименятьПравило
				|ПОМЕСТИТЬ ДействующиеПравилаПолученияФактаПроизвольныеДанные
				|ИЗ
				|	ПравилаСПроизвольнымиДанными КАК ПравилаСПроизвольнымиДанными
				|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиДанныхПравилПолученияФакта КАК ИсточникиДанныхПравилПолученияФакта
				|		ПО ПравилаСПроизвольнымиДанными.Расход = ИсточникиДанныхПравилПолученияФакта.Расход
				|			И ПравилаСПроизвольнымиДанными.Приход = ИсточникиДанныхПравилПолученияФакта.Приход");
			
			ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов,
				"ПравилаСПроизвольнымиДанными");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстыПодзапросов = Новый Массив;
	ТекстыПодзапросов.Добавить("
		|ВЫБРАТЬ
		|	ДействующиеПравилаПолученияФактаОперативныйУчет.Правило КАК Правило,
		|	ДействующиеПравилаПолученияФактаОперативныйУчет.СтатьяБюджетов КАК СтатьяБюджетов,
		|	ДействующиеПравилаПолученияФактаОперативныйУчет.РазделИсточникаДанных КАК РазделИсточникаДанных,
		|	ДействующиеПравилаПолученияФактаОперативныйУчет.ПрименятьПравило КАК ПрименятьПравило
		|ПОМЕСТИТЬ ДействующиеПравилаПолученияФакта
		|ИЗ
		|	ДействующиеПравилаПолученияФактаОперативныйУчет КАК ДействующиеПравилаПолученияФактаОперативныйУчет");
	
	Если ЕстьПравилаСПроизвольнымиДанными Тогда
		ТекстыПодзапросов.Добавить("
			|ВЫБРАТЬ
			|	ДействующиеПравилаПолученияФактаПроизвольныеДанные.Правило,
			|	ДействующиеПравилаПолученияФактаПроизвольныеДанные.СтатьяБюджетов,
			|	ДействующиеПравилаПолученияФактаПроизвольныеДанные.РазделИсточникаДанных,
			|	ДействующиеПравилаПолученияФактаПроизвольныеДанные.ПрименятьПравило
			|ИЗ
			|	ДействующиеПравилаПолученияФактаПроизвольныеДанные КАК ДействующиеПравилаПолученияФактаПроизвольныеДанные");
	
	КонецЕсли;
	
	ТекстыЗапросов.Добавить(СтрСоединить(ТекстыПодзапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении())
		+ Символы.ПС + "ИНДЕКСИРОВАТЬ ПО СтатьяБюджетов, Правило");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов,
		"ДействующиеПравилаПолученияФактаОперативныйУчет");
	Если ЕстьПравилаСПроизвольнымиДанными Тогда
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов,
			"ДействующиеПравилаПолученияФактаПроизвольныеДанные");
	КонецЕсли;
	
	Если Не ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос, ТекстыЗапросов,
		"ДействующиеПравилаПолученияФакта") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	МАКСИМУМ(МоделиБюджетирования.НачалоДействия) КАК НачалоДействия,
		|	МИНИМУМ(МоделиБюджетирования.КонецДействия) КАК КонецДействия
		|ИЗ
		|	МоделиБюджетирования КАК МоделиБюджетирования");
	
	ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Правило,
		|	ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов КАК СтатьяБюджетов,
		|	ПравилаПолученияФактаПоСтатьямБюджетов.РазделИсточникаДанных КАК РазделИсточникаДанных,
		|	ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК ИсточникДанных,
		|	ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).Приход КАК ТипДанныхУчетаПриход,
		|	ВЫРАЗИТЬ(ПравилаПолученияФактаПоСтатьямБюджетов.ИсточникДанных КАК Справочник.НастройкиХозяйственныхОпераций).Расход КАК ТипДанныхУчетаРасход,
		|	ПравилаПолученияФактаПоСтатьямБюджетов.ХешСхемыКомпоновкиДанных КАК ХешСхемыКомпоновкиДанных
		|ИЗ
		|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
		|ГДЕ
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			ДействующиеПравилаПолученияФакта КАК ДействующиеПравилаПолученияФакта
		|		ГДЕ
		|			ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов = ДействующиеПравилаПолученияФакта.СтатьяБюджетов
		|			И ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка = ДействующиеПравилаПолученияФакта.Правило
		|			И (ДействующиеПравилаПолученияФакта.ПрименятьПравило))");
	
	ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ДействующиеПравилаЛимитов.ПравилоЛимитов КАК ПравилоЛимитов,
		|	ДействующиеПравилаЛимитов.Наименование КАК Наименование,
		|	ДействующиеПравилаЛимитов.СтатьяБюджетов КАК СтатьяБюджетов,
		|	ДействующиеПравилаЛимитов.Сценарий КАК Сценарий,
		|	ДействующиеПравилаЛимитов.Периодичность КАК Периодичность,
		|	ДействующиеПравилаЛимитов.ТипЛимита КАК ТипЛимита
		|ИЗ
		|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ДействующиеПравилаПолученияФакта КАК ДействующиеПравилаПолученияФакта
		|			ГДЕ
		|				ДействующиеПравилаПолученияФакта.СтатьяБюджетов = ДействующиеПравилаЛимитов.СтатьяБюджетов
		|				И (ДействующиеПравилаПолученияФакта.ПрименятьПравило))");
	
	ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДействующиеПравилаЛимитов.ПравилоЛимитов КАК ПравилоЛимитов
		|ИЗ
		|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
		|ГДЕ
		|	ДействующиеПравилаЛимитов.ТипЛимита В (ЗНАЧЕНИЕ(Перечисление.ТипыЛимитовРасходованияДС.РазрешающийВПределахЛимита), ЗНАЧЕНИЕ(Перечисление.ТипыЛимитовРасходованияДС.РазрешающийВПределахЛимита))");
	
	Если Не ПоРегиструЛимитов Тогда
		
		ТекстыЗапросов.Добавить("
			|ВЫБРАТЬ
			|	ДействующиеПравилаЛимитов.ПравилоЛимитов КАК ПравилоЛимитов,
			|	ДействующиеПравилаЛимитов.СтатьяБюджетов КАК СтатьяБюджетов,
			|	ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ВидАналитики КАК ВидАналитики
			|ИЗ
			|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЛимитовПоДаннымБюджетирования.ИерархияАналитик КАК ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик
			|		ПО ДействующиеПравилаЛимитов.ПравилоЛимитов = ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.Ссылка
			|			И (ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ВидАналитики <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка))
			|			И (ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.Используется)");
		
		ТекстыЗапросов.Добавить("
			|ВЫБРАТЬ
			|	ДействующиеПравилаЛимитов.ПравилоЛимитов КАК ПравилоЛимитов,
			|	ДействующиеПравилаЛимитов.СтатьяБюджетов КАК СтатьяБюджетов,
			|	ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ИмяИзмерения КАК ИмяИзмерения
			|ИЗ
			|	ДействующиеПравилаЛимитов КАК ДействующиеПравилаЛимитов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаЛимитовПоДаннымБюджетирования.ИерархияАналитик КАК ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик
			|		ПО ДействующиеПравилаЛимитов.ПравилоЛимитов = ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.Ссылка
			|			И (ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.ИмяИзмерения <> """")
			|			И (ПравилаЛимитовПоДаннымБюджетированияИерархияАналитик.Используется)");
			
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	СценарииПравил = Новый Соответствие;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ПравилаЛимитов   = РезультатЗапроса[2].Выгрузить();
	ИерархияАналитикПоПравилам = Справочники.ПравилаЛимитовПоДаннымБюджетирования.ИерархияАналитикПоПравиламСУказаниемКолонокИсточника(
		ПравилаЛимитов.ВыгрузитьКолонку("ПравилоЛимитов"));
	Для каждого СтрокаПравила Из ПравилаЛимитов Цикл
		ИерархияАналитикПравила = ИерархияАналитикПоПравилам.Получить(СтрокаПравила.ПравилоЛимитов);
		ИерархияАналитикПравила.Колонки.Добавить("Коэффициент");
		СтрокВИерархии = ИерархияАналитикПравила.Количество();
		Для каждого СтрокаИерархииАналитики Из ИерархияАналитикПравила Цикл
			// Определяется коэффициент влияния аналитики (измерения) с учетом иерархии.
			// Чем меньше номер строки, тем выше коэффициент, тем приоритетнее аналитика (измерение).
			КоэффициентАналитики = ?(СтрокаИерархииАналитики.Используется, 1, 0)
				* Pow(10, СтрокВИерархии - СтрокаИерархииАналитики.НомерВИерархии);
			СтрокаИерархииАналитики.Коэффициент = КоэффициентАналитики;
		КонецЦикла;
		ИерархияАналитикПоПравилам.Вставить(СтрокаПравила.ПравилоЛимитов, ИерархияАналитикПравила);
		
		СценарииПравил.Вставить(СтрокаПравила.ПравилоЛимитов, СтрокаПравила.Сценарий);
	КонецЦикла;
	
	ПравилаЛимитовСДопДанными = ДанныеДополнительныхПолейПравилЛимитов(ПравилаЛимитов, ИерархияАналитикПоПравилам);
	
	ПравилаЛимитовНаДату.ПравилаПолученияФакта = РезультатЗапроса[1].Выгрузить();
	ПравилаЛимитовНаДату.ПравилаЛимитов = ПравилаЛимитовСДопДанными;
	ПравилаЛимитовНаДату.ИерархияАналитикПоПравилам = ИерархияАналитикПоПравилам;
	ПравилаЛимитовНаДату.РазрешающийЛимитОбязателен = Не РезультатЗапроса[3].Пустой();
	Если Не ПоРегиструЛимитов Тогда
		ПравилаЛимитовНаДату.ВидыАналитик = РезультатЗапроса[4].Выгрузить();
		ПравилаЛимитовНаДату.Измерения = РезультатЗапроса[5].Выгрузить();
		ПравилаЛимитовНаДату.СценарииПравил = СценарииПравил;
	КонецЕсли;
	
	// Уточнение данных
	ПравилаПолученияФакта = ПравилаЛимитовНаДату.ПравилаПолученияФакта; // ТаблицаЗначений - 
	ПравилаПолученияФакта.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ПравилаПолученияФакта.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"), "ТипОбъектаИсточникаДанных");
	
	ПериодДействияНастройки = РезультатЗапроса[0].Выгрузить();

	НастройкиЛимитовНаДату = Новый Структура("НастройкаПолученияФакта, НастройкаПравилЛимитов");
	Если ПоРегиструЛимитов И ЗначениеЗаполнено(Параметры.ВидДокумента) Тогда
		НастройкиЛимитовНаДату.НастройкаПолученияФакта = НастройкаПолученияФактаПоДокументуНаДату(
			Параметры.ВидДокумента, ПравилаЛимитовНаДату.ПравилаПолученияФакта);
	КонецЕсли;
	НастройкиЛимитовНаДату.НастройкаПравилЛимитов = ПравилаЛимитовНаДату;
	РегистрыСведений.КэшНастроекЛимитовПоДаннымБюджетирования.УстановитьЗначениеКэша(
		ПериодДействияНастройки[0].НачалоДействия, ПериодДействияНастройки[0].КонецДействия, Параметры.ВидДокумента,
		Параметры.ХозяйственнаяОперация, НастройкиЛимитовНаДату);
	
	Возврат НастройкиЛимитовНаДату;
	
КонецФункции

// Возвращает условия проверки заявки на соответствие лимитам бюджетирования.
//
// Параметры:
//  Параметры - Структура - параметры для расчета действующих правил лимитов:
//   *ДатаПроверки - Дата - дата, на которую проверяется состояние лимитов.
//   *ВидДокумента - СправочникСсылка.ИдентификаторыОбъектовМетаданных - вид документа, по которому рассчитываются правила лимитов.
//   *ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция документа
//	ОтборПоСтатьямБюджетов - Неопределено, Массив из СправочникСсылка.СтатьиБюджетов - отбор настроек лимитов по бюджетам.
//	ИнвертироватьОтбор - Булево - признак применения отбора ОтборПоСтатьямБюджетов по условию Не.
//	ОтборПоПравиламЛимитов - Массив из СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - Дополнительный
//					не инвертируемый отбор по правилам лимитов. Применяется при расшифровке отчета по лимитам.
//					Неопределено. Значение по умолчанию.
//
// Возвращаемое значение:
//	Структура - параметры проверки заявки на соответствие лимитам бюджетирования:
//		*ЛимитыДействующиеНаДату - см. ЛимитыПоДаннымБюджетированияСервер.НастройкиЛимитовНаДату
//		*ТаблицаПравилСтатей - ТаблицаЗначений - см. в Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.Макеты.ПравилаПолученияФакта
//		*ИерархияАналитикПоПравилам - Соответствие из КлючИЗначение - структура иерархии аналитик по правилам лимитов.
//		*РазрешающийЛимитОбязателен - Булево - Истина, если требуется контроль по какому-либо разрешающему лимиту
//		*ВидыАналитик - ТаблицаЗначений
//		*Измерения - ТаблицаЗначений
//		*СценарииПравил - Соответствие из КлючИЗначение - соответствие правила лимитов и его сценария
//
Функция ДействующиеЛимиты(Параметры, ОтборПоСтатьямБюджетов = Неопределено, ИнвертироватьОтбор = Ложь, ОтборПоПравиламЛимитов = Неопределено)
	
	ДействующиеЛимиты = Новый Структура("ЛимитыДействующиеНаДату, ТаблицаПравилСтатей, ИерархияАналитикПоПравилам",
		Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый Соответствие);
	ДействующиеЛимиты.Вставить("РазрешающийЛимитОбязателен", Ложь);
	ПоРегиструЛимитов = ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5");
	Если ПоРегиструЛимитов Тогда
		ДействующиеЛимиты.Вставить("НастройкаПолученияФакта");
	Иначе
		ДействующиеЛимиты.Вставить("ВидыАналитик");
		ДействующиеЛимиты.Вставить("Измерения");
		ДействующиеЛимиты.Вставить("СценарииПравил");
	КонецЕсли;
	
	НастройкиЛимитовНаДату = НастройкиЛимитовНаДату(Параметры);
	Если НастройкиЛимитовНаДату = Неопределено Тогда
		Возврат ДействующиеЛимиты;
	КонецЕсли;
	ПравилаЛимитовНаДату = НастройкиЛимитовНаДату.НастройкаПравилЛимитов;
	
	ЛимитыДействующиеНаДату = ПравилаЛимитовНаДату.ПравилаЛимитов; // ТаблицаЗначений -
	Для Каждого ДействующийЛимит Из ЛимитыДействующиеНаДату Цикл 
		ДействующийЛимит.НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(Параметры.ДатаПроверки,
			ДействующийЛимит.Периодичность);
		ДействующийЛимит.КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(Параметры.ДатаПроверки,
			ДействующийЛимит.Периодичность);
	КонецЦикла;
	
	ЛимитыДействующиеНаДату.Индексы.Добавить("ПравилоЛимитов"); // Ссылка на СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования
	ЛимитыДействующиеНаДату.Индексы.Добавить("Сценарий");
	ЛимитыДействующиеНаДату.Индексы.Добавить("Периодичность");
	
	ТребуетсяОтборПоСтатьямБюджетов = Ложь;
	Если ТипЗнч(ОтборПоСтатьямБюджетов) = Тип("Массив") Тогда
		ОтборПоСтатьямБюджетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОтборПоСтатьямБюджетов);
		СтатьиБюджетовПравилЛимитов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЛимитыДействующиеНаДату.ВыгрузитьКолонку("СтатьяБюджетов"));
		ТребуетсяОтборПоСтатьямБюджетов = (ОтборПоСтатьямБюджетов.Количество() < СтатьиБюджетовПравилЛимитов.Количество());
	КонецЕсли;
	Если ТребуетсяОтборПоСтатьямБюджетов Тогда
		Для Каждого КлючИЗначение Из ПравилаЛимитовНаДату Цикл
			Если ТипЗнч(КлючИЗначение.Значение) <> Тип("ТаблицаЗначений") Тогда
				Продолжить;
			КонецЕсли;
			Счетчик = 0;
			Пока Счетчик < КлючИЗначение.Значение.Количество() Цикл
				Если ОтборПоСтатьямБюджетов.Найти(КлючИЗначение.Значение[Счетчик].СтатьяБюджетов) = Неопределено Тогда
					КлючИЗначение.Значение.Удалить(Счетчик);
				Иначе
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТребуетсяОтборПоПравиламЛимитов = Ложь;
	Если ТипЗнч(ОтборПоПравиламЛимитов) = Тип("Массив") Тогда
		ПравилаЛимитов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЛимитыДействующиеНаДату.ВыгрузитьКолонку("ПравилоЛимитов"));
		ТребуетсяОтборПоПравиламЛимитов = (ОтборПоПравиламЛимитов.Количество() < ПравилаЛимитов.Количество());
	КонецЕсли;
	Если ТребуетсяОтборПоПравиламЛимитов Тогда
		Для Каждого КлючИЗначение Из ПравилаЛимитовНаДату Цикл
			Если ТипЗнч(КлючИЗначение.Значение) <> Тип("ТаблицаЗначений")
				Или КлючИЗначение.Значение.Колонки.Найти("ПравилоЛимитов") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Счетчик = 0;
			Пока Счетчик < КлючИЗначение.Значение.Количество() Цикл
				Если ОтборПоПравиламЛимитов.Найти(КлючИЗначение.Значение[Счетчик].ПравилоЛимитов) = Неопределено Тогда
					КлючИЗначение.Значение.Удалить(Счетчик);
				Иначе
					Счетчик = Счетчик + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДействующиеЛимиты.ЛимитыДействующиеНаДату = ЛимитыДействующиеНаДату;
	ДействующиеЛимиты.ТаблицаПравилСтатей = ПравилаЛимитовНаДату.ПравилаПолученияФакта;
	ДействующиеЛимиты.ИерархияАналитикПоПравилам = ПравилаЛимитовНаДату.ИерархияАналитикПоПравилам;
	ДействующиеЛимиты.РазрешающийЛимитОбязателен = ПравилаЛимитовНаДату.РазрешающийЛимитОбязателен;
	Если ПоРегиструЛимитов Тогда
		ДействующиеЛимиты.НастройкаПолученияФакта = НастройкиЛимитовНаДату.НастройкаПолученияФакта;
	Иначе
		ДействующиеЛимиты.ВидыАналитик = ПравилаЛимитовНаДату.ВидыАналитик;
		ДействующиеЛимиты.Измерения = ПравилаЛимитовНаДату.Измерения;
		ДействующиеЛимиты.СценарииПравил = ПравилаЛимитовНаДату.СценарииПравил;
	КонецЕсли;
	
	Возврат ДействующиеЛимиты;
	
КонецФункции

// Возвращает массив правил лимитов в соответствии с отбором расшифровки отчета
//
// Параметры:
//  ОтборРасшифровки - Неопределено, Структура - параметры расшифровки:
//   * МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - модель бюджетирования из расширофвки
//   * ПравилоЛимитов - СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования - правило лимитов из расшифровки
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.ПравилаЛимитовПоДаннымБюджетирования
//
Функция ОтборПоПравиламРасшифровкиОтчета(ОтборРасшифровки)
	
	ОтборПоПравиламЛимитов = Неопределено;
	Если НЕ ОтборРасшифровки = Неопределено
		И ОтборРасшифровки.ИспользоватьОтбор Тогда
		Если ОтборРасшифровки.Свойство("МодельБюджетирования")
			ИЛИ ОтборРасшифровки.Свойство("ПравилоЛимитов") Тогда
		
			// При расшифровке используются отборы только на равенство.
			// Произвольные отборы и настройка отчета не предусмотрены.
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Правила.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПравилаЛимитовПоДаннымБюджетирования КАК Правила
			|ГДЕ
			|	&ТекстОтбораПоМодели
			|	И &ТекстОтбораПоПравилу";
			
			Если ОтборРасшифровки.Свойство("МодельБюджетирования") Тогда
				ТекстОтбораПоМодели = "Правила.Владелец = &МодельБюджетирования";
				Запрос.УстановитьПараметр("МодельБюджетирования", ОтборРасшифровки.МодельБюджетирования);
			Иначе
				ТекстОтбораПоМодели = "Истина";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораПоМодели", ТекстОтбораПоМодели);
			Если ОтборРасшифровки.Свойство("ПравилоЛимитов") Тогда
				ТекстОтбораПоПравилу = "Правила.Ссылка = &ПравилоЛимитов";
				Запрос.УстановитьПараметр("ПравилоЛимитов", ОтборРасшифровки.ПравилоЛимитов);
			Иначе
				ТекстОтбораПоПравилу = "Истина";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораПоПравилу", ТекстОтбораПоПравилу);
			
			ОтборПоПравиламЛимитов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтборПоПравиламЛимитов;
	
КонецФункции

Функция ПоляПоискаПлановыхЗначенийЛимитов()
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Если ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5") Тогда
		ИменаКолонок = "ПравилоЛимитов, ОрганизацияПлан, ПодразделениеПлан, НачалоПериода, КонецПериода";
	Иначе
		ИменаКолонок = "ПравилоЛимитов, СтатьяБюджетов, ОрганизацияПлан, ПодразделениеПлан, НачалоПериода, КонецПериода";
	КонецЕсли;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИменаКолонок = ИменаКолонок + ", " + "Аналитика" + НомерАналитики + "План";
	КонецЦикла;
	
	Возврат ИменаКолонок;
	
КонецФункции

Функция ВыражениеИтоговыйКоэффициентАналитикиПлана(ИменаТаблиц = Неопределено)
	
	// Расчет итогового коэффициента для нахождения ближайшей аналитики
	// Значения коэффициентов соответствующих измерений (аналитик) определяется их положением
	// и использованием в иерархии измерений (аналитик) в настройках правила контроля лимитов.
	// Чем выше положение в иерархии, тем кратно (в 10 раз) выше коэффициент измерения (аналитики).
	
	// Общий коэффициент наиболее подходящей аналитики плана рассчитывается как
	// сумма коэффициентов вида измерения (вида аналитики), умноженных на коэффициент
	// совпадения измерений (аналитик) плана и факта.
	// Коэффициент совпадения измерения (аналитики) плана и факта равен 2, 
	// если значения измерения (аналитики) плана и факта полностью совпадают.
	// Коэффициент совпадения измерения (аналитики) плана и факта равен 1, 
	// если значение измерения (аналитики) плана - это прочее значение.
	// Коэффициент совпадения измерения (аналитики) плана и факта равен 0, 
	// если значения измерения (аналитики) плана и факта полностью не совпадают.
	ВыражениеИтоговыйКоэффициентАналитикиПлана = "
		| ТаблицаПравил.КоэффициентОрганизацииПравила
		| * ВЫБОР
		|       КОГДА НЕ ТаблицаПравил.ПоОрганизациямПравила
		|           ТОГДА 2
		|       КОГДА ТаблицаФакта.ОрганизацияФакт = ТаблицаПлана.ОрганизацияПлан
		|           ТОГДА 2
		|       КОГДА ТаблицаПлана.ОрганизацияПлан = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|           ТОГДА 1
		|    ИНАЧЕ 0
		|    КОНЕЦ";
	ВыражениеИтоговыйКоэффициентАналитикиПлана = ВыражениеИтоговыйКоэффициентАналитикиПлана + "
		| + ТаблицаПравил.КоэффициентПодразделенияПравила
		| * ВЫБОР
		|       КОГДА НЕ ТаблицаПравил.ПоПодразделениямПравила
		|           ТОГДА 2
		|        КОГДА ТаблицаФакта.ПодразделениеФакт = ТаблицаПлана.ПодразделениеПлан
		|            ТОГДА 2
		|        КОГДА ТаблицаПлана.ПодразделениеПлан = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|            ТОГДА 1
		|        ИНАЧЕ 0
		|    КОНЕЦ";
	
	ШаблонВыраженияКоэффициентАналитикиПлана = "
		| + ТаблицаПравил.КоэффициентВидаАналитики%НомерАналитики%Правила
		| * ВЫБОР
		|        КОГДА ТаблицаПравил.ВидАналитики%НомерАналитики%Правила = НЕОПРЕДЕЛЕНО
		|            ТОГДА 2
		|        КОГДА ТаблицаФакта.Аналитика%НомерАналитики%Факт = ТаблицаПлана.Аналитика%НомерАналитики%План
		|            ТОГДА 2
		|        КОГДА ТаблицаПлана.Аналитика%НомерАналитики%План = НЕОПРЕДЕЛЕНО
		|            ТОГДА 1
		|        ИНАЧЕ 0
		|    КОНЕЦ";
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ВыражениеИтоговыйКоэффициентАналитикиПлана = ВыражениеИтоговыйКоэффициентАналитикиПлана
			+ СтрЗаменить(ШаблонВыраженияКоэффициентАналитикиПлана, "%НомерАналитики%", НомерАналитики);
	КонецЦикла;
	
	Если ИменаТаблиц = Неопределено Тогда
		ВыражениеИтоговыйКоэффициентАналитикиПлана = СтрЗаменить(ВыражениеИтоговыйКоэффициентАналитикиПлана,
			"ТаблицаПравил.", "");
		ВыражениеИтоговыйКоэффициентАналитикиПлана = СтрЗаменить(ВыражениеИтоговыйКоэффициентАналитикиПлана,
			"ТаблицаПлана.", "");
		ВыражениеИтоговыйКоэффициентАналитикиПлана = СтрЗаменить(ВыражениеИтоговыйКоэффициентАналитикиПлана,
			"ТаблицаФакта.", "");
	Иначе
		ВыражениеИтоговыйКоэффициентАналитикиПлана = СтрЗаменить(ВыражениеИтоговыйКоэффициентАналитикиПлана,
			"ТаблицаПравил", ИменаТаблиц.ТаблицаПравил);
		ВыражениеИтоговыйКоэффициентАналитикиПлана = СтрЗаменить(ВыражениеИтоговыйКоэффициентАналитикиПлана,
			"ТаблицаПлана", ИменаТаблиц.ТаблицаПлана);
		ВыражениеИтоговыйКоэффициентАналитикиПлана = СтрЗаменить(ВыражениеИтоговыйКоэффициентАналитикиПлана,
			"ТаблицаФакта", ИменаТаблиц.ТаблицаФакта);
	КонецЕсли;
	
	Возврат ВыражениеИтоговыйКоэффициентАналитикиПлана;
	
КонецФункции

Функция МенеджерВТ_ПланФактПоРегиструЛимитов(ПравилаЛимитовСДопДанными, ФактическиеДанные, ДополнительныеПараметры,
	МенеджерВременныхТаблиц)
	
	ИспользоватьНесколькоВалют = ДополнительныеПараметры.ИспользоватьНесколькоВалют;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПравилаЛимитовСДопДанными", ПравилаЛимитовСДопДанными);
	Запрос.УстановитьПараметр("ФактическиеДанные", ФактическиеДанные);
	Запрос.УстановитьПараметр("ДатаПроверки", ДополнительныеПараметры.ДатаПроверки);
	Запрос.УстановитьПараметр("БазоваяВалюта", Константы.БазоваяВалютаПоУмолчанию.Получить());
	Запрос.УстановитьПараметр("ЦелеваяВалюта", ДополнительныеПараметры.ВалютаЗаявки);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстыЗапросов = Новый Массив;
	
	// Действующие правила лимитов с доп данными
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.ПравилоЛимитов КАК Справочник.ПравилаЛимитовПоДаннымБюджетирования) КАК ПравилоЛимитов,
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.ТипЛимита КАК Перечисление.ТипыЛимитовРасходованияДС) КАК ТипЛимита,
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.Периодичность КАК Перечисление.Периодичность) КАК Периодичность,
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.СтатьяБюджетов КАК Справочник.СтатьиБюджетов) КАК СтатьяБюджетов,
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.НачалоПериода КАК ДАТА) КАК НачалоПериода,
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.КонецПериода КАК ДАТА) КАК КонецПериода,
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.ПоОрганизациям КАК БУЛЕВО) КАК ПоОрганизациямПравила,
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.КоэффициентОрганизации КАК ЧИСЛО(10, 0)) КАК КоэффициентОрганизацииПравила,
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.ПоПодразделениям КАК БУЛЕВО) КАК ПоПодразделениямПравила,
	|	ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.КоэффициентПодразделения КАК ЧИСЛО(10, 0)) КАК КоэффициентПодразделенияПравила,
	|	&ТекстВидовАналитик,
	|	&ТекстКоэффициентовВидовАналитик
	|ПОМЕСТИТЬ ДействующиеПравилаЛимитовСДопДанными
	|ИЗ
	|	&ПравилаЛимитовСДопДанными КАК ПравилаЛимитовСДопДанными
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяБюджетов";
	ТекстВидовАналитик = "";
	ТекстКоэффициентовВидовАналитик = "";
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстВидовАналитик = ТекстВидовАналитик + ?(ТекстВидовАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ЕСТЬNULL(ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.ВидАналитики%1 КАК ПланВидовХарактеристик.АналитикиСтатейБюджетов), НЕОПРЕДЕЛЕНО) КАК ВидАналитики%1Правила",
				НомерАналитики);
		ТекстКоэффициентовВидовАналитик = ТекстКоэффициентовВидовАналитик + ?(ТекстКоэффициентовВидовАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫРАЗИТЬ(ПравилаЛимитовСДопДанными.КоэффициентВидаАналитики%1 КАК ЧИСЛО(10, 0)) КАК КоэффициентВидаАналитики%1Правила",
				НомерАналитики);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВидовАналитик", ТекстВидовАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстКоэффициентовВидовАналитик", ТекстКоэффициентовВидовАналитик);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	// Сработавшие по документу правила лимитов с доп данными
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДействующиеПравилаЛимитовСДопДанными.НачалоПериода,
	|	ДействующиеПравилаЛимитовСДопДанными.ПравилоЛимитов,
	|	ДействующиеПравилаЛимитовСДопДанными.СтатьяБюджетов,
	|	*
	|ПОМЕСТИТЬ ПравилаЛимитовСДопДанными
	|ИЗ
	|	ДействующиеПравилаЛимитовСДопДанными КАК ДействующиеПравилаЛимитовСДопДанными
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ФактическиеДанныеПоДокументу КАК ФактическиеДанныеПоДокументу
	|			ГДЕ
	|				ДействующиеПравилаЛимитовСДопДанными.СтатьяБюджетов = ФактическиеДанныеПоДокументу.СтатьяБюджетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоПериода,
	|	ПравилоЛимитов";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов,
		"ДействующиеПравилаЛимитовСДопДанными");
	
	// Коэффициенты пересчета плановых сумм по лимитам в целевую валюту (валюту документа)
	Если ИспользоватьНесколькоВалют Тогда
		ТекстыЗапросов.Добавить(" 
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсВалюты.Валюта КАК Валюта,
		|	КурсВалюты.КурсЧислитель * КурсЦелевойВалюты.КурсЗнаменатель / (КурсВалюты.КурсЗнаменатель * КурсЦелевойВалюты.КурсЧислитель) КАК КоэффициентПересчета
		|ПОМЕСТИТЬ КоэффициентыПересчетаВЦелевуюВалюту
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
		|			&ДатаПроверки,
		|			БазоваяВалюта = &БазоваяВалюта) КАК КурсВалюты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
		|				&ДатаПроверки,
		|				Валюта = &ЦелеваяВалюта
		|					И БазоваяВалюта = &БазоваяВалюта) КАК КурсЦелевойВалюты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КурсВалюты.КурсЗнаменатель <> 0
		|	И КурсЦелевойВалюты.КурсЧислитель <> 0");
	КонецЕсли;
	
	// Остатки лимитов в плановых суммах
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	Лимиты.ПериодЛимитирования КАК ПериодЛимитирования,
	|	Лимиты.ПравилоЛимитов КАК ПравилоЛимитов,
	|	Лимиты.Организация КАК Организация,
	|	Лимиты.Подразделение КАК Подразделение,
	|	Лимиты.Аналитика1 КАК Аналитика1,
	|	Лимиты.Аналитика2 КАК Аналитика2,
	|	Лимиты.Аналитика3 КАК Аналитика3,
	|	Лимиты.Аналитика4 КАК Аналитика4,
	|	Лимиты.Аналитика5 КАК Аналитика5,
	|	Лимиты.Аналитика6 КАК Аналитика6,
	|	Лимиты.Валюта КАК Валюта,
	|	Лимиты.ЛимитОборот КАК Лимит,
	|	Лимиты.СуммаЗаявкиОборот + Лимиты.СуммаФактОборот КАК ПотреблениеЛимита
	|ПОМЕСТИТЬ ПлановыеДанные
	|ИЗ
	|	РегистрНакопления.ЛимитыПоДаннымБюджетирования.Обороты(
	|			,
	|			,
	|			,
	|			(ПериодЛимитирования, ПравилоЛимитов) В
	|				(ВЫБРАТЬ
	|					ПравилаЛимитовСДопДанными.НачалоПериода,
	|					ПравилаЛимитовСДопДанными.ПравилоЛимитов
	|				ИЗ
	|					ПравилаЛимитовСДопДанными КАК ПравилаЛимитовСДопДанными)) КАК Лимиты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Лимиты.ПериодЛимитирования,
	|	Лимиты.ПравилоЛимитов,
	|	Лимиты.Организация,
	|	Лимиты.Подразделение,
	|	Лимиты.Аналитика1,
	|	Лимиты.Аналитика2,
	|	Лимиты.Аналитика3,
	|	Лимиты.Аналитика4,
	|	Лимиты.Аналитика5,
	|	Лимиты.Аналитика6,
	|	Лимиты.Валюта,
	|	0,
	|	-Лимиты.СуммаФактОборот
	|ИЗ
	|	РегистрНакопления.ЛимитыПоДаннымБюджетирования.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			(ПериодЛимитирования, ПравилоЛимитов) В
	|				(ВЫБРАТЬ
	|					ПравилаЛимитовСДопДанными.НачалоПериода,
	|					ПравилаЛимитовСДопДанными.ПравилоЛимитов
	|				ИЗ
	|					ПравилаЛимитовСДопДанными КАК ПравилаЛимитовСДопДанными)) КАК Лимиты
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
	|			ГДЕ
	|				Лимиты.Период = ДенежныеСредстваКВыплате.Период
	|				И Лимиты.Регистратор = ДенежныеСредстваКВыплате.Регистратор
	|				И (ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|					ИЛИ ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаКомандировку))
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрНакопления.ЛимитыПоДаннымБюджетирования КАК СторноРезерва
	|				ГДЕ
	|					Лимиты.Период = СторноРезерва.Период
	|					И Лимиты.Регистратор = СторноРезерва.Регистратор
	|					И Лимиты.ПериодЛимитирования = СторноРезерва.ПериодЛимитирования
	|					И Лимиты.ПравилоЛимитов = СторноРезерва.ПравилоЛимитов
	|					И СторноРезерва.СуммаЗаявки <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодЛимитирования,
	|	ПравилоЛимитов");
	
	// Остатки лимитов в суммах в целевой валюте
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПравилаЛимитовСДопДанными.ПравилоЛимитов КАК ПравилоЛимитов,
	|	ПравилаЛимитовСДопДанными.НачалоПериода КАК НачалоПериода,
	|	ПравилаЛимитовСДопДанными.КонецПериода КАК КонецПериода,
	|	ПлановыеДанные.Организация КАК ОрганизацияПлан,
	|	ПлановыеДанные.Подразделение КАК ПодразделениеПлан,
	|	ПлановыеДанные.Аналитика1 КАК Аналитика1План,
	|	ПлановыеДанные.Аналитика2 КАК Аналитика2План,
	|	ПлановыеДанные.Аналитика3 КАК Аналитика3План,
	|	ПлановыеДанные.Аналитика4 КАК Аналитика4План,
	|	ПлановыеДанные.Аналитика5 КАК Аналитика5План,
	|	ПлановыеДанные.Аналитика6 КАК Аналитика6План,
	|	ПлановыеДанные.Валюта КАК Валюта,
	|	СУММА(ВЫРАЗИТЬ(ПлановыеДанные.Лимит * &КоэффициентПересчета КАК ЧИСЛО(31,2))) КАК СуммаПлан,
	|	СУММА(ВЫРАЗИТЬ(ПлановыеДанные.ПотреблениеЛимита * &КоэффициентПересчета КАК ЧИСЛО(31,2))) КАК СуммаФакт,
	|	МАКСИМУМ(&КоэффициентПересчета) КАК КоэффициентПересчетаВЦелевуюВалюту
	|ПОМЕСТИТЬ ПлановыеДанныеПоПравилам
	|ИЗ
	|	ПравилаЛимитовСДопДанными КАК ПравилаЛимитовСДопДанными
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлановыеДанные КАК ПлановыеДанные
	|		ПО ПравилаЛимитовСДопДанными.НачалоПериода = ПлановыеДанные.ПериодЛимитирования
	|			И ПравилаЛимитовСДопДанными.ПравилоЛимитов = ПлановыеДанные.ПравилоЛимитов
	|		И &ТекстСоединенияПересчетаВЦелевуюВалюту
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаЛимитовСДопДанными.ПравилоЛимитов,
	|	ПравилаЛимитовСДопДанными.НачалоПериода,
	|	ПравилаЛимитовСДопДанными.КонецПериода,
	|	ПлановыеДанные.Организация,
	|	ПлановыеДанные.Подразделение,
	|	ПлановыеДанные.Аналитика1,
	|	ПлановыеДанные.Аналитика2,
	|	ПлановыеДанные.Аналитика3,
	|	ПлановыеДанные.Аналитика4,
	|	ПлановыеДанные.Аналитика5,
	|	ПлановыеДанные.Аналитика6,
	|	ПлановыеДанные.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПлановыеДанные.Лимит) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоПериода,
	|	КонецПериода,
	|	ПравилоЛимитов";
	Если ИспользоватьНесколькоВалют Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоэффициентПересчета", "ЕСТЬNULL(КоэффициентыПересчетаВЦелевуюВалюту.КоэффициентПересчета, 1)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстСоединенияПересчетаВЦелевуюВалюту", "
				|	ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыПересчетаВЦелевуюВалюту КАК КоэффициентыПересчетаВЦелевуюВалюту
				|	ПО ПлановыеДанные.Валюта = КоэффициентыПересчетаВЦелевуюВалюту.Валюта");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоэффициентПересчета", "1");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстСоединенияПересчетаВЦелевуюВалюту", "");
	КонецЕсли;
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ПлановыеДанные");
	Если ИспользоватьНесколькоВалют Тогда
		ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов,
			"КоэффициентыПересчетаВЦелевуюВалюту");
	КонецЕсли;
	
	// Рассчитанный факт по документу
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПравилаЛимитовСДопДанными.ПравилоЛимитов КАК ПравилоЛимитов,
	|	ПравилаЛимитовСДопДанными.НачалоПериода КАК НачалоПериода,
	|	ПравилаЛимитовСДопДанными.КонецПериода КАК КонецПериода,
	|	ВЫБОР
	|		КОГДА ПравилаЛимитовСДопДанными.ПоОрганизациямПравила
	|			ТОГДА ФактическиеДанные.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК ОрганизацияФакт,
	|	ВЫБОР
	|		КОГДА ПравилаЛимитовСДопДанными.ПоПодразделениямПравила
	|			ТОГДА ФактическиеДанные.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК ПодразделениеФакт,
	|	ФактическиеДанные.Валюта КАК Валюта,
	|	&ТекстПолейАналитик,
	|	СУММА(ФактическиеДанные.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ФактическиеДанные
	|ИЗ
	|	ПравилаЛимитовСДопДанными КАК ПравилаЛимитовСДопДанными
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФактическиеДанныеПоДокументу КАК ФактическиеДанные
	|		ПО ПравилаЛимитовСДопДанными.СтатьяБюджетов = ФактическиеДанные.СтатьяБюджетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаЛимитовСДопДанными.ПравилоЛимитов,
	|	ПравилаЛимитовСДопДанными.НачалоПериода,
	|	ПравилаЛимитовСДопДанными.КонецПериода,
	|	ВЫБОР
	|		КОГДА ПравилаЛимитовСДопДанными.ПоОрганизациямПравила
	|			ТОГДА ФактическиеДанные.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПравилаЛимитовСДопДанными.ПоПодразделениямПравила
	|			ТОГДА ФактическиеДанные.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ,
	|	ФактическиеДанные.Валюта,
	|	&ТекстГруппАналитик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоПериода,
	|	КонецПериода,
	|	ПравилоЛимитов";
	ТекстПолейАналитик = "";
	ТекстГруппАналитик = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстПолейАналитик = ТекстПолейАналитик + ?(ТекстПолейАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫБОР
				|	КОГДА ПравилаЛимитовСДопДанными.ВидАналитики%1Правила = НЕОПРЕДЕЛЕНО
				|		ТОГДА НЕОПРЕДЕЛЕНО
				|	ИНАЧЕ ФактическиеДанные.Аналитика%1
				|КОНЕЦ КАК Аналитика%1Факт",
				НомерАналитики);
		ТекстГруппАналитик = ТекстГруппАналитик + ?(ТекстГруппАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ВЫБОР
				|	КОГДА ПравилаЛимитовСДопДанными.ВидАналитики%1Правила = НЕОПРЕДЕЛЕНО
				|		ТОГДА НЕОПРЕДЕЛЕНО
				|	ИНАЧЕ ФактическиеДанные.Аналитика%1
				|КОНЕЦ",
				НомерАналитики);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолейАналитик", ТекстПолейАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстГруппАналитик", ТекстГруппАналитик);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов,
		"ФактическиеДанныеПоДокументу");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПравилаЛимитовСДопДанными.ПравилоЛимитов КАК ПравилоЛимитов,
	|	ПравилаЛимитовСДопДанными.ТипЛимита КАК ТипЛимита,
	|	ПравилаЛимитовСДопДанными.НачалоПериода КАК НачалоПериода,
	|	ПравилаЛимитовСДопДанными.КонецПериода КАК КонецПериода,
	|	ФактическиеДанные.ОрганизацияФакт КАК Организация,
	|	ФактическиеДанные.ПодразделениеФакт КАК Подразделение,
	|	&ТекстПолейАналитик,
	|	ЕСТЬNULL(МАКСИМУМ(&ВыражениеИтоговыйКоэффициентАналитикиПлана), 0) КАК ИтоговыйКоэффициентАналитикиПлана,
	|	ФактическиеДанные.Валюта КАК Валюта,
	|	ФактическиеДанные.Сумма КАК СуммаФакт
	|ПОМЕСТИТЬ ФактическиеДанныеПоПравилам
	|ИЗ
	|	ФактическиеДанные КАК ФактическиеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаЛимитовСДопДанными КАК ПравилаЛимитовСДопДанными
	|		ПО ФактическиеДанные.НачалоПериода = ПравилаЛимитовСДопДанными.НачалоПериода
	|			И ФактическиеДанные.КонецПериода = ПравилаЛимитовСДопДанными.КонецПериода
	|			И ФактическиеДанные.ПравилоЛимитов = ПравилаЛимитовСДопДанными.ПравилоЛимитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеДанныеПоПравилам КАК ПлановыеДанные
	|		ПО ФактическиеДанные.НачалоПериода = ПлановыеДанные.НачалоПериода
	|			И ФактическиеДанные.КонецПериода = ПлановыеДанные.КонецПериода
	|			И ФактическиеДанные.ПравилоЛимитов = ПлановыеДанные.ПравилоЛимитов
	|			И (ФактическиеДанные.ОрганизацияФакт = ПлановыеДанные.ОрганизацияПлан
	|			ИЛИ ПлановыеДанные.ОрганизацияПлан = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			И (ФактическиеДанные.ПодразделениеФакт = ПлановыеДанные.ПодразделениеПлан
	|			ИЛИ ПлановыеДанные.ПодразделениеПлан = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|			И &ТекстСоединенияАналитик
	|
	|СГРУППИРОВАТЬ ПО
	|	ПравилаЛимитовСДопДанными.ПравилоЛимитов,
	|	ПравилаЛимитовСДопДанными.ТипЛимита,
	|	ПравилаЛимитовСДопДанными.НачалоПериода,
	|	ПравилаЛимитовСДопДанными.КонецПериода,
	|	ФактическиеДанные.ОрганизацияФакт,
	|	ФактическиеДанные.ПодразделениеФакт,
	|	&ТекстГруппАналитик,
	|	ФактическиеДанные.Валюта,
	|	ФактическиеДанные.Сумма
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоПериода,
	|	КонецПериода,
	|	ПравилоЛимитов";
	ТекстПолейАналитик = "";
	ТекстГруппАналитик = "";
	ТекстСоединенияАналитик = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстПолейАналитик = ТекстПолейАналитик + ?(ТекстПолейАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ФактическиеДанные.Аналитика%1Факт КАК Аналитика%1", НомерАналитики);
		ТекстГруппАналитик = ТекстГруппАналитик + ?(ТекстГруппАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ФактическиеДанные.Аналитика%1Факт",
			НомерАналитики);
		ТекстСоединенияАналитик = ТекстСоединенияАналитик + ?(ТекстСоединенияАналитик = "", "", Символы.ПС
			+ Символы.Таб + "И ") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"(ФактическиеДанные.Аналитика%1Факт = ПлановыеДанные.Аналитика%1План ИЛИ ПлановыеДанные.Аналитика%1План = НЕОПРЕДЕЛЕНО)",
			НомерАналитики);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолейАналитик", ТекстПолейАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстГруппАналитик", ТекстГруппАналитик);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстСоединенияАналитик", ТекстСоединенияАналитик);
	
	ИменаТаблиц = Новый Структура("ТаблицаПравил, ТаблицаПлана, ТаблицаФакта", "ПравилаЛимитовСДопДанными",
		"ПлановыеДанные", "ФактическиеДанные");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыражениеИтоговыйКоэффициентАналитикиПлана",
		ВыражениеИтоговыйКоэффициентАналитикиПлана(ИменаТаблиц));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ФактическиеДанные");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.ВыполнитьПакет();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Процедура ДополнитьВременнуюТаблицуФактаАналитикамиПлана(МенеджерВременныхТаблиц, ТаблицаФакта)
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ФактическиеДанныеПоПравилам");
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ФактическиеДанные.ПравилоЛимитов КАК Справочник.ПравилаЛимитовПоДаннымБюджетирования) КАК ПравилоЛимитов,
	|	ВЫРАЗИТЬ(ФактическиеДанные.Валюта КАК Справочник.Валюты) КАК Валюта,
	|	ВЫРАЗИТЬ(ФактическиеДанные.НачалоПериода КАК ДАТА) КАК НачалоПериода,
	|	ВЫРАЗИТЬ(ФактическиеДанные.КонецПериода КАК ДАТА) КАК КонецПериода,
	|	ВЫРАЗИТЬ(ФактическиеДанные.Организация КАК Справочник.Организации) КАК Организация,
	|	ВЫРАЗИТЬ(ФактическиеДанные.Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение,
	|	ВЫРАЗИТЬ(ФактическиеДанные.Организация КАК Справочник.Организации) КАК ОрганизацияПлан,
	|	ВЫРАЗИТЬ(ФактическиеДанные.Подразделение КАК Справочник.СтруктураПредприятия) КАК ПодразделениеПлан,
	|	&ТекстАналитикФакт,
	|	&ТекстАналитикПлан,
	|	ВЫРАЗИТЬ(ФактическиеДанные.СуммаФакт КАК ЧИСЛО(31, 2)) КАК Сумма
	|ПОМЕСТИТЬ ФактическиеДанныеПоПравилам
	|ИЗ
	|	&ФактическиеДанные КАК ФактическиеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачалоПериода,
	|	КонецПериода,
	|	ПравилоЛимитов";
	ТекстАналитикФакт = "";
	ТекстАналитикПлан = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстАналитикФакт = ТекстАналитикФакт + ?(ТекстАналитикФакт = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ФактическиеДанные.Аналитика%1 КАК Аналитика%1",
				НомерАналитики);
		ТекстАналитикПлан = ТекстАналитикПлан + ?(ТекстАналитикПлан = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ФактическиеДанные.Аналитика%1План КАК Аналитика%1План",
				НомерАналитики);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитикФакт", ТекстАналитикФакт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитикПлан", ТекстАналитикПлан);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФактическиеДанные", ТаблицаФакта);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РассчитатьПланФактИСформироватьТаблицуДвижений(МенеджерВременныхТаблиц, ПараметрыКонтроля)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ТекстыЗапросов = Новый Массив;
	
	// План-факт по правилам лимитов (в валюте документа)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПравилаЛимитовСДопДанными.ПравилоЛимитов КАК ПравилоЛимитов,
	|	ПравилаЛимитовСДопДанными.ТипЛимита КАК ТипЛимита,
	|	ПравилаЛимитовСДопДанными.НачалоПериода КАК НачалоПериода,
	|	ПравилаЛимитовСДопДанными.КонецПериода КАК КонецПериода,
	|	ФактическиеДанные.ОрганизацияПлан КАК Организация,
	|	ФактическиеДанные.ПодразделениеПлан КАК Подразделение,
	|	&ТекстАналитикПлан,
	|	ФактическиеДанные.Валюта КАК Валюта,
	|	ЕСТЬNULL(ПлановыеДанные.СуммаПлан, 0) КАК СуммаПлан,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПлановыеДанные.СуммаПлан, 0) < ЕСТЬNULL(ПлановыеДанные.СуммаФакт, 0) + ФактическиеДанные.Сумма
 	|			ТОГДА ЕСТЬNULL(ПлановыеДанные.СуммаФакт, 0) + ФактическиеДанные.Сумма - ЕСТЬNULL(ПлановыеДанные.СуммаПлан, 0)
 	|		ИНАЧЕ 0 
 	|	КОНЕЦ КАК СуммаПревышения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПлановыеДанные.СуммаПлан, 0) > ЕСТЬNULL(ПлановыеДанные.СуммаФакт, 0)
	|			ТОГДА ЕСТЬNULL(ПлановыеДанные.СуммаПлан, 0) - ЕСТЬNULL(ПлановыеДанные.СуммаФакт, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаМожноСписать
	|ИЗ
	|	ФактическиеДанныеПоПравилам КАК ФактическиеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаЛимитовСДопДанными КАК ПравилаЛимитовСДопДанными
	|		ПО ФактическиеДанные.НачалоПериода = ПравилаЛимитовСДопДанными.НачалоПериода
	|			И ФактическиеДанные.КонецПериода = ПравилаЛимитовСДопДанными.КонецПериода
	|			И ФактическиеДанные.ПравилоЛимитов = ПравилаЛимитовСДопДанными.ПравилоЛимитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеДанныеПоПравилам КАК ПлановыеДанные
	|		ПО ФактическиеДанные.НачалоПериода = ПлановыеДанные.НачалоПериода
	|			И ФактическиеДанные.КонецПериода = ПлановыеДанные.КонецПериода
	|			И ФактическиеДанные.ПравилоЛимитов = ПлановыеДанные.ПравилоЛимитов
	|			И ФактическиеДанные.ОрганизацияПлан = ПлановыеДанные.ОрганизацияПлан
	|			И ФактическиеДанные.ПодразделениеПлан = ПлановыеДанные.ПодразделениеПлан
	|			И &ТекстСоединенияАналитикПлан
	|ГДЕ
	|	&ПоискОшибок";
	ТекстАналитикПлан = "";
	ТекстСоединенияАналитикПлан = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстАналитикПлан = ТекстАналитикПлан + ?(ТекстАналитикПлан = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ФактическиеДанные.Аналитика%1План КАК Аналитика%1", НомерАналитики);
		ТекстСоединенияАналитикПлан = ТекстСоединенияАналитикПлан + ?(ТекстСоединенияАналитикПлан = "", "", Символы.ПС
			+ Символы.Таб + "И ") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ФактическиеДанные.Аналитика%1План = ПлановыеДанные.Аналитика%1План", НомерАналитики);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитикПлан", ТекстАналитикПлан);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстСоединенияАналитикПлан", ТекстСоединенияАналитикПлан);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	// Таблица движения регистра по лимитам бюджетирования (в валюте плана)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ДатаПроверки КАК Период,
	|	ПравилаЛимитовСДопДанными.Периодичность КАК Периодичность,
	|	ПравилаЛимитовСДопДанными.ПравилоЛимитов КАК ПравилоЛимитов,
	|	ПравилаЛимитовСДопДанными.НачалоПериода КАК ПериодЛимитирования,
	|	ФактическиеДанные.ОрганизацияПлан КАК Организация,
	|	ФактическиеДанные.ПодразделениеПлан КАК Подразделение,
	|	&ТекстАналитикПлан,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ОрганизацияФакт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеФакт,
	|	&ТекстПустыхАналитикФакт,
	|	ЕСТЬNULL(ПлановыеДанные.Валюта, ФактическиеДанные.Валюта) КАК Валюта,
	|	&Документ КАК ДокументРезервирования,
	|	0 КАК Лимит,
	|	ВЫРАЗИТЬ(ФактическиеДанные.Сумма / ЕСТЬNULL(ПлановыеДанные.КоэффициентПересчетаВЦелевуюВалюту, 1) КАК ЧИСЛО(31,2)) КАК СуммаЗаявки,
	|	0 КАК СуммаФакт
	|ПОМЕСТИТЬ ТаблицаЛимитыПоДаннымБюджетирования
	|ИЗ
	|	ФактическиеДанныеПоПравилам КАК ФактическиеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаЛимитовСДопДанными КАК ПравилаЛимитовСДопДанными
	|		ПО ФактическиеДанные.НачалоПериода = ПравилаЛимитовСДопДанными.НачалоПериода
	|			И ФактическиеДанные.КонецПериода = ПравилаЛимитовСДопДанными.КонецПериода
	|			И ФактическиеДанные.ПравилоЛимитов = ПравилаЛимитовСДопДанными.ПравилоЛимитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеДанныеПоПравилам КАК ПлановыеДанные
	|		ПО ФактическиеДанные.НачалоПериода = ПлановыеДанные.НачалоПериода
	|			И ФактическиеДанные.КонецПериода = ПлановыеДанные.КонецПериода
	|			И ФактическиеДанные.ПравилоЛимитов = ПлановыеДанные.ПравилоЛимитов
	|			И ФактическиеДанные.ОрганизацияПлан = ПлановыеДанные.ОрганизацияПлан
	|			И ФактическиеДанные.ПодразделениеПлан = ПлановыеДанные.ПодразделениеПлан
	|			И &ТекстСоединенияАналитикПлан
	|ГДЕ
	|	&РезервироватьСуммуЛимита
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаПроверки,
	|	ПравилаЛимитовСДопДанными.Периодичность,
	|	ПравилаЛимитовСДопДанными.ПравилоЛимитов,
	|	ПравилаЛимитовСДопДанными.НачалоПериода,
	|	ФактическиеДанные.ОрганизацияПлан,
	|	ФактическиеДанные.ПодразделениеПлан,
	|	&ТекстАналитикПлан,
	|	ФактическиеДанные.Организация,
	|	ФактическиеДанные.Подразделение,
	|	&ТекстАналитикФакт,
	|	ЕСТЬNULL(ПлановыеДанные.Валюта, ФактическиеДанные.Валюта),
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	0,
	|	ВЫРАЗИТЬ(ФактическиеДанные.Сумма / ЕСТЬNULL(ПлановыеДанные.КоэффициентПересчетаВЦелевуюВалюту, 1) КАК ЧИСЛО(31,2))
	|ИЗ
	|	ФактическиеДанныеПоПравилам КАК ФактическиеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаЛимитовСДопДанными КАК ПравилаЛимитовСДопДанными
	|		ПО ФактическиеДанные.НачалоПериода = ПравилаЛимитовСДопДанными.НачалоПериода
	|			И ФактическиеДанные.КонецПериода = ПравилаЛимитовСДопДанными.КонецПериода
	|			И ФактическиеДанные.ПравилоЛимитов = ПравилаЛимитовСДопДанными.ПравилоЛимитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеДанныеПоПравилам КАК ПлановыеДанные
	|		ПО ФактическиеДанные.НачалоПериода = ПлановыеДанные.НачалоПериода
	|			И ФактическиеДанные.КонецПериода = ПлановыеДанные.КонецПериода
	|			И ФактическиеДанные.ПравилоЛимитов = ПлановыеДанные.ПравилоЛимитов
	|			И ФактическиеДанные.ОрганизацияПлан = ПлановыеДанные.ОрганизацияПлан
	|			И ФактическиеДанные.ПодразделениеПлан = ПлановыеДанные.ПодразделениеПлан
	|			И &ТекстСоединенияАналитикПлан
	|ГДЕ
	|	НЕ &РезервироватьСуммуЛимита";
	ТекстАналитикФакт = "";
	ТекстАналитикПлан = "";
	ТекстПустыхАналитикФакт = "";
	ТекстСоединенияАналитикПлан = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстАналитикПлан = ТекстАналитикПлан + ?(ТекстАналитикПлан = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ФактическиеДанные.Аналитика%1План КАК Аналитика%1", НомерАналитики);
		ТекстАналитикФакт = ТекстАналитикФакт + ?(ТекстАналитикФакт = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ФактическиеДанные.Аналитика%1 КАК Аналитика%1Факт", НомерАналитики);
		ТекстПустыхАналитикФакт = ТекстПустыхАналитикФакт + ?(ТекстПустыхАналитикФакт = "", "", "," + Символы.ПС
			+ Символы.Таб) + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"НЕОПРЕДЕЛЕНО КАК Аналитика%1Факт", НомерАналитики);
		ТекстСоединенияАналитикПлан = ТекстСоединенияАналитикПлан + ?(ТекстСоединенияАналитикПлан = "", "", Символы.ПС
			+ Символы.Таб + "И ") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ФактическиеДанные.Аналитика%1План = ПлановыеДанные.Аналитика%1План", НомерАналитики);
	КонецЦикла;
	Если ПараметрыКонтроля.РезервироватьСуммуЛимита Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаЛимитыПоДаннымБюджетирования", "");
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитикПлан", ТекстАналитикПлан);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитикФакт", ТекстАналитикФакт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПустыхАналитикФакт", ТекстПустыхАналитикФакт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстСоединенияАналитикПлан", ТекстСоединенияАналитикПлан);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Документ", ПараметрыКонтроля.РеквизитыДокумента.Документ);
	Запрос.УстановитьПараметр("ДатаПроверки", ПараметрыКонтроля.РеквизитыДокумента.ДатаПроверки);
	Запрос.УстановитьПараметр("ПоискОшибок", ПараметрыКонтроля.ПоискОшибок);
	Запрос.УстановитьПараметр("РезервироватьСуммуЛимита", ПараметрыКонтроля.РезервироватьСуммуЛимита);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДанныхПоЛимитам = Новый Структура;
	ТаблицыДанныхПоЛимитам.Вставить("ПланФактПоПравиламЛимитов", Результат[0].Выгрузить());
	Если ПараметрыКонтроля.РезервироватьСуммуЛимита Тогда
		ТаблицыДанныхПоЛимитам.Вставить("ТаблицаЛимитыПоДаннымБюджетирования", Результат[1].Выгрузить());
	Иначе
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,
			"ПравилаЛимитовСДопДанными,ПлановыеДанныеПоПравилам,ФактическиеДанныеПоПравилам");
	КонецЕсли;
	
	Возврат ТаблицыДанныхПоЛимитам;
	
КонецФункции

Процедура ВыполнитьОтражениеЛимитовПоДаннымБюджетирования(Задания, ИдентификаторыНеобработанныхЗаписей,
	ДополнительныеСвойства = Неопределено) Экспорт
	
	ДокументыКОбработке = Задания.ВыгрузитьКолонку("Документ");
	Если ДокументыКОбработке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ТекстыЗапросов = Новый Массив;
	
    #Область ОбщиеТаблицы
	
	ТекстыЗапросов.Добавить(" 
	|ВЫБРАТЬ
	|	ДенежныеСредстваКВыплате.Регистратор КАК Документ,
	|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК ДокументРезервирования,
	|	ВЫРАЗИТЬ(ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаКомандировку).ЖелательнаяДатаПлатежа КАК Дата,
	|	СУММА(ДенежныеСредстваКВыплате.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ДокументыРезервирования
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
	|ГДЕ
	|	ДенежныеСредстваКВыплате.Регистратор В(&ДокументыКОбработке)
	|	И ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаКомандировку
	|	И ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаКомандировку.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДенежныеСредстваКВыплате.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредстваКВыплате.Регистратор,
	|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВЫРАЗИТЬ(ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ЖелательнаяДатаПлатежа,
	|	СУММА(ДенежныеСредстваКВыплате.Сумма)
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
	|ГДЕ
	|	ДенежныеСредстваКВыплате.Регистратор В(&ДокументыКОбработке)
	|	И ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|	И ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств <> ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДенежныеСредстваКВыплате.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРезервирования");
	
	#КонецОбласти
	
	#Область ТаблицыДляКорректировкиПериодаЛимитирования
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДокументыРезервирования.Документ КАК Документ,
	|	ДокументыРезервирования.ДокументРезервирования КАК ДокументРезервирования,
	|	ДокументыРезервирования.Дата КАК Дата,
	|	ДокументыРезервирования.Сумма КАК База,
	|	ЕСТЬNULL(СУММА(ДокументыРезервирования_Предыдущие.Сумма), 0) КАК БазаНакопленная
	|ПОМЕСТИТЬ Документы_Коэффициенты
	|ИЗ
	|	ДокументыРезервирования КАК ДокументыРезервирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыРезервирования КАК ДокументыРезервирования_Предыдущие
	|		ПО ДокументыРезервирования.Документ = ДокументыРезервирования_Предыдущие.Документ
	|			И ДокументыРезервирования.ДокументРезервирования > ДокументыРезервирования_Предыдущие.ДокументРезервирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыРезервирования.Документ,
	|	ДокументыРезервирования.ДокументРезервирования,
	|	ДокументыРезервирования.Дата,
	|	ДокументыРезервирования.Сумма
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДокументыРезервирования.Документ КАК Документ,
	|	СУММА(ДокументыРезервирования.Сумма) КАК СуммаБазы
	|ПОМЕСТИТЬ Документы_СуммаБазы
	|ИЗ
	|	ДокументыРезервирования КАК ДокументыРезервирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыРезервирования.Документ");
	
	#КонецОбласти
	
	#Область ТаблицыДляСторнированияРезервовПоЛимитам
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДенежныеСредстваКВыплате.Регистратор КАК ДокументРезервирования,
	|	СУММА(ДенежныеСредстваКВыплате.Сумма) КАК Сумма
	|ПОМЕСТИТЬ СуммыПоДокументамРезервирования
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ДокументыРезервирования КАК ДокументыРезервирования
	|			ГДЕ
	|				ДенежныеСредстваКВыплате.Регистратор = ДокументыРезервирования.ДокументРезервирования)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваКВыплате.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРезервирования");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК ДокументРезервирования,
	|	ДенежныеСредстваКВыплате.Регистратор КАК Документ,
	|	СУММА(ДенежныеСредстваКВыплате.Сумма) КАК Сумма
	|ПОМЕСТИТЬ СуммыФактаПоДокументамРезервирования
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ДокументыРезервирования КАК ДокументыРезервирования
	|			ГДЕ
	|				ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = ДокументыРезервирования.ДокументРезервирования)
	|	И ДенежныеСредстваКВыплате.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДенежныеСредстваКВыплате.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДенежныеСредстваКВыплате.Регистратор,
	|	СУММА(ДенежныеСредстваКВыплате.Сумма)
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ДокументыРезервирования КАК ДокументыРезервирования
	|			ГДЕ
	|				ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = ДокументыРезервирования.ДокументРезервирования)
	|	И ДенежныеСредстваКВыплате.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДенежныеСредстваКВыплате.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРезервирования,
	|	Документ");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ДокументыРезервирования");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДокументРезервирования КАК ДокументРезервирования,
	|	МАКСИМУМ(ВложенныйЗапрос.Сумма) КАК СуммаБазы
	|ПОМЕСТИТЬ ДокументыРезервирования_СуммаБазы
	|ИЗ
	|	(ВЫБРАТЬ
	|		СуммыФактаПоДокументамРезервирования.ДокументРезервирования КАК ДокументРезервирования,
	|		СУММА(СуммыФактаПоДокументамРезервирования.Сумма) КАК Сумма
	|	ИЗ
	|		СуммыФактаПоДокументамРезервирования КАК СуммыФактаПоДокументамРезервирования
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СуммыФактаПоДокументамРезервирования.ДокументРезервирования
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СуммыПоДокументамРезервирования.ДокументРезервирования,
	|		СуммыПоДокументамРезервирования.Сумма
	|	ИЗ
	|		СуммыПоДокументамРезервирования КАК СуммыПоДокументамРезервирования) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДокументРезервирования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРезервирования");

	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СуммыФактаПоДокументамРезервирования.ДокументРезервирования КАК ДокументРезервирования,
	|	СуммыФактаПоДокументамРезервирования.Документ КАК Документ,
	|	СуммыФактаПоДокументамРезервирования.Сумма КАК База,
	|	ЕСТЬNULL(СУММА(ДокументыРезервирования_Предыдущие.Сумма), 0) КАК БазаНакопленная
	|ПОМЕСТИТЬ ДокументыРезервирования_Коэффициенты
	|ИЗ
	|	СуммыФактаПоДокументамРезервирования КАК СуммыФактаПоДокументамРезервирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммыФактаПоДокументамРезервирования КАК ДокументыРезервирования_Предыдущие
	|		ПО СуммыФактаПоДокументамРезервирования.ДокументРезервирования = ДокументыРезервирования_Предыдущие.ДокументРезервирования
	|			И СуммыФактаПоДокументамРезервирования.Документ > ДокументыРезервирования_Предыдущие.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыФактаПоДокументамРезервирования.ДокументРезервирования,
	|	СуммыФактаПоДокументамРезервирования.Документ,
	|	СуммыФактаПоДокументамРезервирования.Сумма
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРезервирования");
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "СуммыФактаПоДокументамРезервирования");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "СуммыПоДокументамРезервирования");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РезервыЛимитов.ПериодЛимитирования КАК ПериодЛимитирования,
	|	РезервыЛимитов.ПравилоЛимитов КАК ПравилоЛимитов,
	|	РезервыЛимитов.Организация КАК Организация,
	|	РезервыЛимитов.Валюта КАК Валюта,
	|	РезервыЛимитов.Подразделение КАК Подразделение,
	|	&ТекстАналитик,
	|	РезервыЛимитов.ДокументРезервирования КАК ДокументРезервирования,
	|	РезервыЛимитов.СуммаЗаявки КАК СуммаЗаявки
	|ПОМЕСТИТЬ РезервыЛимитов
	|ИЗ
	|	РегистрНакопления.ЛимитыПоДаннымБюджетирования КАК РезервыЛимитов
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ДокументыРезервирования_СуммаБазы КАК ДокументыРезервирования_СуммаБазы
	|			ГДЕ
	|				РезервыЛимитов.Регистратор = ДокументыРезервирования_СуммаБазы.ДокументРезервирования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРезервирования";
	ТекстАналитик = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстАналитик = ТекстАналитик + ?(ТекстАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("РезервыЛимитов.Аналитика%1 КАК Аналитика%1", НомерАналитики);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитик", ТекстАналитик);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РезервыЛимитов.ПериодЛимитирования КАК ПериодЛимитирования,
	|	РезервыЛимитов.ПравилоЛимитов КАК ПравилоЛимитов,
	|	РезервыЛимитов.Организация КАК Организация,
	|	РезервыЛимитов.Валюта КАК Валюта,
	|	РезервыЛимитов.Подразделение КАК Подразделение,
	|	&ТекстАналитик,
	|	РезервыЛимитов.ДокументРезервирования КАК ДокументРезервирования,
	|	ДокументыРезервирования_Коэффициенты.Документ КАК Документ,
	|	&РаспределениеСуммы_СуммаЗаявки * (-1) КАК СуммаЗаявки
	|ПОМЕСТИТЬ ТаблицаСторноРезервовЛимитов
	|ИЗ
	|	РезервыЛимитов КАК РезервыЛимитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыРезервирования_Коэффициенты КАК ДокументыРезервирования_Коэффициенты
	|		ПО РезервыЛимитов.ДокументРезервирования = ДокументыРезервирования_Коэффициенты.ДокументРезервирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыРезервирования_СуммаБазы КАК ДокументыРезервирования_СуммаБазы
	|		ПО РезервыЛимитов.ДокументРезервирования = ДокументыРезервирования_СуммаБазы.ДокументРезервирования";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитик", ТекстАналитик);
	ТекстРаспределенияСуммы = ОбщегоНазначенияУТ.ТекстРаспределенияСуммы(
		"РезервыЛимитов.СуммаЗаявки",
		"ЕСТЬNULL(ДокументыРезервирования_Коэффициенты.База, 0)",
		"ЕСТЬNULL(ДокументыРезервирования_Коэффициенты.БазаНакопленная, 0)",
		"ЕСТЬNULL(ДокументыРезервирования_СуммаБазы.СуммаБазы, 0)");
	ТекстыЗапросов.Добавить(СтрЗаменить(ТекстЗапроса, "&РаспределениеСуммы_СуммаЗаявки", ТекстРаспределенияСуммы));
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ДокументыРезервирования_СуммаБазы");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ДокументыРезервирования_Коэффициенты");
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "РезервыЛимитов");
	
	#КонецОбласти
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументыКОбработке", ДокументыКОбработке);
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.ВыполнитьПакет();
	
	ТекстыЗапросов.Очистить();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЛимитыПоДаннымБюджетирования.Период КАК Период,
	|	ЛимитыПоДаннымБюджетирования.ПравилоЛимитов КАК ПравилоЛимитов,
	|	ВЫБОР
	|		КОГДА Документы_Коэффициенты.Дата ЕСТЬ NULL
	|			ТОГДА ЛимитыПоДаннымБюджетирования.ПериодЛимитирования
	|		КОГДА ЛимитыПоДаннымБюджетирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|			ТОГДА Документы_Коэффициенты.Дата
	|		КОГДА ЛимитыПоДаннымБюджетирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|			ТОГДА НАЧАЛОПЕРИОДА(Документы_Коэффициенты.Дата, НЕДЕЛЯ)
	|		КОГДА ЛимитыПоДаннымБюджетирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|			ТОГДА НАЧАЛОПЕРИОДА(Документы_Коэффициенты.Дата, ДЕКАДА)
	|		КОГДА ЛимитыПоДаннымБюджетирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(Документы_Коэффициенты.Дата, МЕСЯЦ)
	|		КОГДА ЛимитыПоДаннымБюджетирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(Документы_Коэффициенты.Дата, КВАРТАЛ)
	|		КОГДА ЛимитыПоДаннымБюджетирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|			ТОГДА НАЧАЛОПЕРИОДА(Документы_Коэффициенты.Дата, ПОЛУГОДИЕ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(Документы_Коэффициенты.Дата, ГОД)
	|	КОНЕЦ КАК ПериодЛимитирования,
	|	ЛимитыПоДаннымБюджетирования.Организация КАК Организация,
	|	ЛимитыПоДаннымБюджетирования.Подразделение КАК Подразделение,
	|	&ТекстАналитикПлан,
	|	ЛимитыПоДаннымБюджетирования.ОрганизацияФакт КАК ОрганизацияФакт,
	|	ЛимитыПоДаннымБюджетирования.ПодразделениеФакт КАК ПодразделениеФакт,
	|	&ТекстАналитикФакт,
	|	ЛимитыПоДаннымБюджетирования.Валюта КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ДокументРезервирования,
	|	0 КАК Лимит,
	|	0 КАК СуммаЗаявки,
	|	ВЫБОР
	|		КОГДА Документы_СуммаБазы.Документ ЕСТЬ NULL
	|			ТОГДА ЛимитыПоДаннымБюджетирования.СуммаФакт
	|		ИНАЧЕ &РаспределениеСуммы_СуммаФакт
	|	КОНЕЦ КАК СуммаФакт
	|ИЗ
	|	ТаблицаЛимитыПоДаннымБюджетирования КАК ЛимитыПоДаннымБюджетирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документы_Коэффициенты КАК Документы_Коэффициенты
	|		ПО (Документы_Коэффициенты.Документ = &ТекущийДокумент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документы_СуммаБазы КАК Документы_СуммаБазы
	|		ПО (Документы_СуммаБазы.Документ = &ТекущийДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаПроверки,
	|	ЛимитыПоДаннымБюджетирования.ПравилоЛимитов КАК ПравилоЛимитов,
	|	ЛимитыПоДаннымБюджетирования.ПериодЛимитирования КАК ПериодЛимитирования,
	|	ЛимитыПоДаннымБюджетирования.Организация КАК Организация,
	|	ЛимитыПоДаннымБюджетирования.Подразделение КАК Подразделение,
	|	&ТекстАналитикПлан,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ОрганизацияФакт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеФакт,
	|	&ТекстПустыхАналитикФакт,
	|	ЛимитыПоДаннымБюджетирования.Валюта КАК Валюта,
	|	ЛимитыПоДаннымБюджетирования.ДокументРезервирования КАК ДокументРезервирования,
	|	0 КАК Лимит,
	|	ЛимитыПоДаннымБюджетирования.СуммаЗаявки КАК СуммаЗаявки,
	|	0 КАК СуммаФакт
	|ИЗ
	|	ТаблицаСторноРезервовЛимитов КАК ЛимитыПоДаннымБюджетирования
	|ГДЕ
	|	ЛимитыПоДаннымБюджетирования.Документ = &ТекущийДокумент";
	ТекстАналитикПлан = "";
	ТекстАналитикФакт = "";
	ТекстПустыхАналитикФакт = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстАналитикПлан = ТекстАналитикПлан + ?(ТекстАналитикПлан = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЛимитыПоДаннымБюджетирования.Аналитика%1 КАК Аналитика%1", НомерАналитики);
		ТекстАналитикФакт = ТекстАналитикФакт + ?(ТекстАналитикФакт = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЛимитыПоДаннымБюджетирования.Аналитика%1Факт КАК Аналитика%1Факт", НомерАналитики);
		ТекстПустыхАналитикФакт = ТекстПустыхАналитикФакт + ?(ТекстПустыхАналитикФакт = "", "", "," + Символы.ПС
			+ Символы.Таб) + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"НЕОПРЕДЕЛЕНО КАК Аналитика%1Факт", НомерАналитики);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитикПлан", ТекстАналитикПлан);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстАналитикФакт", ТекстАналитикФакт);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПустыхАналитикФакт", ТекстПустыхАналитикФакт);
	ТекстРаспределенияСуммы = ОбщегоНазначенияУТ.ТекстРаспределенияСуммы(
		"ЛимитыПоДаннымБюджетирования.СуммаФакт",
		"ЕСТЬNULL(Документы_Коэффициенты.База, 0)",
		"ЕСТЬNULL(Документы_Коэффициенты.БазаНакопленная, 0)",
		"ЕСТЬNULL(Документы_СуммаБазы.СуммаБазы, 0)");
	ТекстыЗапросов.Добавить(СтрЗаменить(ТекстЗапроса, "&РаспределениеСуммы_СуммаФакт", ТекстРаспределенияСуммы));
	
	ФинансовыйУчетПоДаннымБалансовыхРегистров.ДобавитьЗапросУдаленияВременнойТаблицы(ТекстыЗапросов, "ТаблицаЛимитыПоДаннымБюджетирования");
	
	Задания.Сортировать("ДатаЗаписи");
	
	СтруктураПоискаДокумента = Новый Структура("Документ");
	
	ОбработанныеДокументы = Новый Массив;
	ИдентификаторНеобработаннойЗаписи = Неопределено;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ОбщийМодуль.ЛимитыПоДаннымБюджетирования.ВыполнитьОтражениеЛимитовПоДаннымБюджетирования");
	КоличествоОбработанныхЗаписей = 0;
	
	Для Каждого СтрокаЗадание Из Задания Цикл
		
		Если ОбработанныеДокументы.Найти(СтрокаЗадание.Документ) <> Неопределено Тогда
			КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + 1;
			Продолжить;
		КонецЕсли;
		
		ТекущийДокумент = СтрокаЗадание.Документ;
		ИдентификаторНеобработаннойЗаписи = СтрокаЗадание.ИдентификаторЗаписи;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКОтражениюЛимитовПоДаннымБюджетирования");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗаписи", ИдентификаторНеобработаннойЗаписи);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Параметры = ПараметрыКонтроляПоЛимитамБюджетирования(ТекущийДокумент);
			Параметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
			ВыполнитьКонтрольПоЛимитамБюджетирования(Параметры);
			
			ЕстьТаблицаЛимитов = (МенеджерВременныхТаблиц.Таблицы.Найти("ТаблицаЛимитыПоДаннымБюджетирования") <> Неопределено);
			Если Не ЕстьТаблицаЛимитов Тогда
				КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + 1;
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ТекстыЗапросовПоДокументу = Новый Массив;
			
			Если Не ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос,
				ТекстыЗапросовПоДокументу, "ТаблицаЛимитыПоДаннымБюджетирования") Тогда
				
				ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ТаблицаЛимитыПоДаннымБюджетирования");
				КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + 1;
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			ТекстыЗапросовПоДокументу.Очистить();
			
			НаборЗаписей = РегистрыНакопления.ЛимитыПоДаннымБюджетирования.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийДокумент);
			
			Если Не ФинансовыйУчетПоДаннымБалансовыхРегистров.ЕстьЗаписиВоВременнойТаблице(Запрос,
				ТекстыЗапросовПоДокументу, "ТаблицаСторноРезервовЛимитов") Тогда
				
				НаборЗаписей.Загрузить(МенеджерВременныхТаблиц.Таблицы.Найти(
					"ТаблицаЛимитыПоДаннымБюджетирования").ПолучитьДанные().Выгрузить());
				НаборЗаписей.Записать();
				
				ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ТаблицаЛимитыПоДаннымБюджетирования");
				
				КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + НаборЗаписей.Количество();
				
			Иначе
				
				Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
				Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
				Запрос.УстановитьПараметр("ДатаПроверки", Параметры.РеквизитыДокумента.ДатаПроверки);
				
				Результат = Запрос.ВыполнитьПакет();
				НаборЗаписей.Загрузить(Результат[0].Выгрузить());
				НаборЗаписей.Записать();
				
				КоличествоОбработанныхЗаписей = КоличествоОбработанныхЗаписей + НаборЗаписей.Количество();
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
		
			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если ИдентификаторНеобработаннойЗаписи <> Неопределено Тогда
				ТекстОшибки = ОтложенныеЗадания.ТекстОшибкиВыполнения(СтруктураПоискаДокумента, СтрокаЗадание, ТекстОшибки);
			КонецЕсли;
			ИдентификаторыНеобработанныхЗаписей.Вставить(ИдентификаторНеобработаннойЗаписи, ТекстОшибки);
			
			ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхЗаписей);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоОбработанныхЗаписей);
		
КонецПроцедуры

#Область ПодпискиНаСобытия

Процедура ОпределитьНеобходимостьКонтроляЛимитовПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("КонтрольЛимитовПоДаннымБюджетирования2_5") Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		НепроверяемыеРеквизиты = Новый Структура;
		НепроверяемыеРеквизиты.Вставить("Комментарий");
		
		НепроверяемыеТабличныеЧасти = Новый Структура;
		НепроверяемыеТабличныеЧасти.Вставить("ДополнительныеРеквизиты");
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			НепроверяемыеТабличныеЧасти.Вставить("ПодтверждающиеДокументы");
			НепроверяемыеТабличныеЧасти.Вставить("ДоговорыСЗаказчиками");
		КонецЕсли;
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
			Или ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
			НепроверяемыеТабличныеЧасти.Вставить("ИнструкцииБанку");
		КонецЕсли;
		
		ИзмененияДокумента = ОбщегоНазначенияУТ.ИзмененияДокумента(Источник, НепроверяемыеРеквизиты, НепроверяемыеТабличныеЧасти);
		
		Если ИзмененияДокумента.Количество() = 0 Тогда
			Источник.ДополнительныеСвойства.Вставить("ИгнорироватьКонтрольЛимитовПоДаннымБюджетирования", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти