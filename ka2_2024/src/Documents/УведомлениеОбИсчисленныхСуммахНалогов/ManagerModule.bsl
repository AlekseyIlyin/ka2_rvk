#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 21, 0);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

Функция ВыгрузитьУведомлениеОбИсчисленныхСуммахНалогов(ДокументСсылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	УведомлениеОбъект = ДокументОбъект.Уведомление.ПолучитьОбъект();
	Возврат УведомлениеОбъект.ВыгрузитьДокумент(УникальныйИдентификатор)
	
КонецФункции

#КонецОбласти

Функция СтатусДокумента(ДокументСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитУведомление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Уведомление");
	
	Возврат ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(РеквизитУведомление);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОписаниеДокумента(ДокументСсылка) Экспорт
	
	ОписаниеДокумента = Новый Структура("Наименование, Сумма");
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		РеквизитыДокумента    = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
			"Номер, Дата, СуммаДокумента, Уведомление");
		
		НаименованиеДокумента = ДокументСсылка.Метаданные().Синоним;
		НомерДокумента        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
		ДатаДокумента         = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
		Статус                = ИнтерфейсыВзаимодействияБРО.ПредставлениеСостоянияДокумента(РеквизитыДокумента.Уведомление);
		
		ШаблонПредставления = НСтр("ru = '%1 %2 от %3 на сумму %4 (%5)'");
		
		ОписаниеДокумента.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			НаименованиеДокумента, НомерДокумента, ДатаДокумента, Формат(РеквизитыДокумента.СуммаДокумента, "ЧДЦ=2; ЧН=0,00"), Статус);
		ОписаниеДокумента.Сумма = РеквизитыДокумента.СуммаДокумента;
	КонецЕсли;
	
	Возврат ОписаниеДокумента;
	
КонецФункции

Функция ДатаНачалаСторнированияДублирующихУведомлений() Экспорт
	
	Возврат Дата(2023, 10, 1);
	
КонецФункции

Функция ПолучитьДанныеДляУведомления(ПараметрыЗаполнения) Экспорт
	
	ТаблицаНалогов = ПустаяСсылка().Налоги.ВыгрузитьКолонки();
	
	Организация = Неопределено;
	ДатаУведомления = '00010101';
	
	Если НЕ (ПараметрыЗаполнения.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация)
		И ПараметрыЗаполнения.Свойство("ДатаУведомления", ДатаУведомления) И ЗначениеЗаполнено(ДатаУведомления)) Тогда
		Возврат ТаблицаНалогов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаУведомления", НачалоДня(ДатаУведомления));
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, ДатаУведомления);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("КодПоОКТМО", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КодПоОКТМО"));
	ОтборНДФЛЗаПервуюПоловинуПериода = ПараметрыЗаполнения.Свойство("НДФЛЗаПервуюПоловинуПериода") И ПараметрыЗаполнения.НДФЛЗаПервуюПоловинуПериода;
	Запрос.УстановитьПараметр("НДФЛЗаПервуюПоловинуПериода", ОтборНДФЛЗаПервуюПоловинуПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Расшифровка.ТипНалога КАК ТипНалога,
	|	Расшифровка.КодБК КАК КодБК,
	|	ЕСТЬNULL(Регистрации.Ссылка, &РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(Регистрации.КодПоОКТМО, &КодПоОКТМО) КАК КодПоОКТМО,
	|	Расшифровка.НачалоПериода КАК НачалоПериода,
	|	Расшифровка.КонецПериода КАК КонецПериода,
	|	Расшифровка.СрокУплаты КАК СрокУплаты,
	|	СУММА(Расшифровка.Сумма) КАК Сумма
	|ИЗ
	|	Документ.НачислениеЕНП КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЕНП.РасшифровкаНалогов КАК Расшифровка
	|		ПО ДанныеДокумента.Ссылка = Расшифровка.Ссылка
	|		И Расшифровка.ФормироватьУведомление
	|		И ДанныеДокумента.Проведен
	|		И ((&НДФЛЗаПервуюПоловинуПериода И ДанныеДокумента.ПредварительноеУведомлениеПоНДФЛ)
	|			ИЛИ НЕ &НДФЛЗаПервуюПоловинуПериода)
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК Регистрации
	|	ПО Регистрации.Ссылка = (ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Расшифровка.Субконто1) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА Расшифровка.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(Расшифровка.Субконто2) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА Расшифровка.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(Расшифровка.Субконто3) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА Расшифровка.Субконто3
	|		ИНАЧЕ &РегистрацияВНалоговомОргане
	|	КОНЕЦ)
	|
	|ГДЕ
	|	ДанныеДокумента.Организация = &Организация
	|	И Расшифровка.СрокУплаты > &ДатаУведомления
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.ТипНалога,
	|	Расшифровка.КодБК,
	|	Расшифровка.НачалоПериода,
	|	Расшифровка.КонецПериода,
	|	Расшифровка.СрокУплаты,
	|	Регистрации.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНалогов.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ТаблицаНалогов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.УведомлениеОСпецрежимахНалогообложения";
	КомандаПечати.Обработчик     = "РегламентированнаяОтчетностьУПКлиент.ВыполнитьКомандуПечатиУведомленияОбИсчисленныхСуммахНалогов";
	КомандаПечати.Идентификатор  = "Уведомление";
	КомандаПечати.Представление  = НСтр("ru = 'Уведомление об исчисленных суммах налога'");
	КомандаПечати.Порядок        = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.УведомлениеОСпецрежимахНалогообложения";
	КомандаПечати.Обработчик     = "РегламентированнаяОтчетностьУПКлиент.ВыполнитьКомандуПечатиУведомленияОбИсчисленныхСуммахНалоговPDF417";
	КомандаПечати.Идентификатор  = "Уведомление";
	КомандаПечати.Представление  = НСтр("ru = 'Уведомление об исчисленных суммах налога (PDF417)'");
	КомандаПечати.СписокФорм     = "ФормаДокумента";
	КомандаПечати.Порядок        = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.УведомлениеОбИсчисленныхСуммахНалогов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.20.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8ba93030-fba8-44e8-93a2-5732f0d53c21");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.УведомлениеОбИсчисленныхСуммахНалогов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Обновление документов ""Уведомление об исчисленных суммах налогов"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- заполнение колонки ""Тип налога"" по данным колонки ""Тип налога (Не используется)"" в табличной части ""Налоги"";'"));
	
	Обработчик.Комментарий = СтрСоединить(СписокОписаний, Символы.ПС);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.УведомлениеОбИсчисленныхСуммахНалогов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УведомлениеОбИсчисленныхСуммахНалогов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УведомлениеОбИсчисленныхСуммахНалогов.Налоги КАК УведомлениеОбИсчисленныхСуммахНалогов
	|ГДЕ
	|	УведомлениеОбИсчисленныхСуммахНалогов.УдалитьТипНалога <> ЗНАЧЕНИЕ(Перечисление.УдалитьТипыНалогов.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ИсключенияПриОбновлении = Новый Массив;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось обработать документы ""Уведомление об исчисленных суммах налогов"" по обработчику:'"));
	СписокОписаний.Добавить(НСтр("ru = '- заполнение колонки ""Тип налога"" по данным колонки ""Тип налога (Не используется)"" в табличной части ""Налоги"";'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОбИсчисленныхСуммахНалогов КАК ДанныеДокумента
		|		ПО ТаблицаДокументов.Ссылка = ДанныеДокумента.Ссылка
		|";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Документ = Запрос.Выполнить().Выбрать();
	
	Пока Документ.Следующий() Цикл
		
		ПричинаИсключения = 0;
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = 1; // Блокировка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Документ.Ссылка, Документ.ВерсияДанных, Параметры.Очередь); // ДокументОбъект
			
			ПричинаИсключения = 2; // ПлохиеДанные
			Рекомендация = НСтр("ru = 'Перепроведите документ вручную.'");
			
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект, "Налоги.УдалитьТипНалога", "ТипНалога");
				ОбъектИзменен = Истина;
				
			КонецЕсли;
			
			ПричинаИсключения = 3; // Запись
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
			Если ПричинаИсключения = 2 Тогда
				
				ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(
					Документ.Ссылка, Рекомендация, ИнформацияОбОшибке());
				ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
				
			ИначеЕсли ПричинаИсключения = 3 Тогда
				
				ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
					ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли