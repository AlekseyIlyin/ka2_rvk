#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ОсновныеСредства");
	МеханизмыДокумента.Добавить("ОбесценениеВНА");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
	ВводОстатковУзловКомпонентовАмортизацииЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура:
//     * Ключ - Строка - Имя таблицы.
//     * Значение - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВводОстатковУзловКомпонентовАмортизации") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры);
		
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаПервоначальныеСведенияОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОСБУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииОСБУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСтоимостьОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаАмортизацияОС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаУзлыКомпонентыАмортизации(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаСоставЕГДС(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаОбесценениеВНА(ТекстыЗапроса, Регистры);
		
		
		ВводОстатковУзловКомпонентовАмортизацииЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	ТаблицыДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
	Возврат ТаблицыДвижений;
	
КонецФункции

#КонецОбласти

#Область Команды

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоДаннымОперативногоУчета

// Возвращает таблицу значения для заполнения документа ввода остатков данными, полученными по данным оперативного учета.
// 
// Параметры:
// 	Дата - Дата - Дата, на которую формируются остатки.
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция, для которой выбираются остатки
// 	Организации - Массив - Массив, содержащий элементы типа СправочникСсылка.Организации, для которых выбираются остатки.
// 	ДополнительныйОтбор - Структура - Структура, содержащая ключ и значение дополнительного отбора.
// 	ПараметрыЗаполненияОстатков - Структура - Структура, содержащая дополнительные параметры необходимые, для заполнения остатков.
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений, Неопределено - Если для данной хозяйственной операции есть данные, для нее возвращается таблица значений с значениями заполнения.
//
Функция ОстаткиПоТипуОперации(Дата, ХозяйственнаяОперация, Организации, ДополнительныйОтбор = Неопределено, ПараметрыЗаполненияОстатков = Неопределено) Экспорт
	
	Результат = ВводОстатковУзловКомпонентовАмортизацииЛокализация.ОстаткиПоТипуОперации(
					Дата, 
					Организации, 
					ДополнительныйОтбор, 
					ПараметрыЗаполненияОстатков);

	Возврат Результат;
			
КонецФункции

// Возвращает массив в котором содержатся имена полей при изменении которых, необходимо генерировать новый документ ввода остатков.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция, для которой определяются ключевые поля.
// Возвращаемое значение:
// 	Массив - Массив содержащий имена полей.
//
Функция КлючевыеПоляРеглУчетаПоТипуОперации(ХозяйственнаяОперация = Неопределено) Экспорт
	
	КлючевыеРеквизиты = Новый Массив;
	КлючевыеРеквизиты.Добавить("Организация");
	КлючевыеРеквизиты.Добавить("Местонахождение");
	
	Возврат КлючевыеРеквизиты;
		
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// 
// Параметры:
//  ОбъектИлиДанныеСтроки - СтрокаТабличнойЧасти - 
//  ВспомогательныеРеквизиты - Структура - 
//  ПараметрыРеквизитовОбъекта - Массив из Структура -
// 
// Возвращаемое значение:
//  Строка - 
Функция ЗаполнитьРеквизитыВЗависимостиОтСвойств(ОбъектИлиДанныеСтроки, ВспомогательныеРеквизиты, ПараметрыРеквизитовОбъекта) Экспорт

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Истина Тогда
			Действие = "Очистить";
		ИначеЕсли ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Истина Тогда
			Действие = "Заполнить";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Действие = "Очистить"
			И (ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьБУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьУУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ПервоначальнаяСтоимостьБУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ПервоначальнаяСтоимостьУУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияБУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияУУ") Тогда
			
			ОбъектИлиДанныеСтроки[ПараметрыРеквизита.ИмяРеквизита] = 0;
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаБУ" Тогда
		
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации, 
				Неопределено,
				ИзмененныеРеквизиты);
		
		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаУУ" Тогда
			
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				Перечисления.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию,
				Неопределено,
				ИзмененныеРеквизиты);

		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюБУ" 
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюУУ" Тогда
			
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				Истина,
				Ложь,
				ИзмененныеРеквизиты);
				
		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "МетодНачисленияАмортизацииБУ" Тогда
			
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				Перечисления.СпособыНачисленияАмортизацииОС.Линейный,
				Неопределено,
				ИзмененныеРеквизиты);
	
		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "МетодНачисленияАмортизацииУУ" Тогда
			
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				Перечисления.СпособыНачисленияАмортизацииОС.Линейный,
				Неопределено,
				ИзмененныеРеквизиты);

		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "СрокИспользованияБУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "СрокИспользованияУУ" Тогда
			
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				ОбъектИлиДанныеСтроки.СрокИспользованияБУ,
				0,
				ИзмененныеРеквизиты);

		ИначеЕсли ПараметрыРеквизита.ИмяРеквизита = "КоэффициентУскоренияБУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "КоэффициентУскоренияУУ" Тогда
		
			ВнеоборотныеАктивыСлужебный.ЗаполнитьОчиститьРеквизит(
				ОбъектИлиДанныеСтроки,
				ПараметрыРеквизита.ИмяРеквизита, 
				Действие, 
				1,
				0,
				ИзмененныеРеквизиты);
				
		КонецЕсли;
		
		ВводОстатковУзловКомпонентовАмортизацииЛокализация.ЗаполнитьРеквизитыВЗависимостиОтСвойств(
			ОбъектИлиДанныеСтроки, ВспомогательныеРеквизиты, ПараметрыРеквизита, Действие, ИзмененныеРеквизиты);
			
	КонецЦикла; 
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");
	
КонецФункции

// Вспомогательные реквизиты.
// 
// Параметры:
//  Объект - ДокументОбъект.ВводОстатковУзловКомпонентовАмортизации -
//  ЭтоДанныеСтроки - Булево -
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура - 
Функция ВспомогательныеРеквизиты(Объект, ЭтоДанныеСтроки) Экспорт

	ВспомогательныеРеквизиты = Новый Структура;
	ВспомогательныеРеквизиты.Вставить("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВБУиНУ", Объект.ОтражатьВБУиНУ);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВОперативномУчете", Объект.ОтражатьВОперативномУчете);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВУУ", Объект.ОтражатьВУУ);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВБУ", Объект.ОтражатьВРеглУчете);
	ВспомогательныеРеквизиты.Вставить("ОтражатьВНУ", Ложь);
	ВспомогательныеРеквизиты.Вставить("Организация", Объект.Организация);
	ВспомогательныеРеквизиты.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВводОстатковУзловКомпонентовАмортизации);
	ВспомогательныеРеквизиты.Вставить("Дата", Объект.Дата);
	ВспомогательныеРеквизиты.Вставить("ДатаНачалаУчета", '000101010000');
	ВспомогательныеРеквизиты.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	ВспомогательныеРеквизиты.Вставить("ИспользоватьРеглУчет", РеглУчетСервер.ВедетсяРеглУчет(Объект.Дата));
	ВспомогательныеРеквизиты.Вставить("ПорядокУчетаВНА", НастройкиНалоговУчетныхПолитикПовтИсп.ПорядокУчетаВНА(Объект.Организация, ?(Объект.Дата <> '000101010000', КонецМесяца(Объект.Дата), ТекущаяДатаСеанса())));
	ВспомогательныеРеквизиты.Вставить("ИспользоватьРаздельныйУчетВНАПоНалогообложению", ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетВНАПоНалогообложению"));
	ВспомогательныеРеквизиты.Вставить("ИспользуетсяУчетАрендыПоФСБУ25_2018", УчетАрендованныхОС.ИспользуетсяУчетАрендыПоФСБУ25_2018(Объект.Организация, Объект.Дата));
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ВспомогательныеРеквизиты.Вставить("ВалютыСовпадают", ВалютаУпр = ВалютаРегл);
	
	ВспомогательныеРеквизиты.Вставить(
		"РеглУчетВНАВедетсяНезависимо",
		НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо(Объект.Организация, ?(Объект.Дата <> '000101010000', КонецМесяца(Объект.Дата), ТекущаяДатаСеанса())));
	
	ВспомогательныеРеквизиты.Вставить("ДоступенУчетУУ", Объект.ОтражатьВУпрУчете);
	ВспомогательныеРеквизиты.Вставить("ДоступенУчетБУ", Объект.ОтражатьВРеглУчете И ВспомогательныеРеквизиты.РеглУчетВНАВедетсяНезависимо);
	ВспомогательныеРеквизиты.Вставить("ДоступенУчетНУ", Ложь);
		
	ВводОстатковУзловКомпонентовАмортизацииЛокализация.ДополнитьВспомогательныеРеквизиты(Объект, ЭтоДанныеСтроки, ВспомогательныеРеквизиты);
	
	ВспомогательныеРеквизиты = Новый ФиксированнаяСтруктура(ВспомогательныеРеквизиты);
	
	Возврат ВспомогательныеРеквизиты;
	
КонецФункции

Процедура ЗаполнитьЗначенияПоУмолчанию(ДанныеСтроки, Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ГруппаФинансовогоУчета) Тогда
		ДанныеСтроки.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ЗначениеПоУмолчанию(
												Перечисления.ВидыВнеоборотныхАктивов.ОсновноеСредство);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ВводОстатковУзловКомпонентовАмортизации";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	
	ВЗапросеЕстьИсточник = Истина;
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	ТекстЗапроса = Неопределено;
	СинонимТаблицыДокумента = Неопределено;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
				
	ИначеЕсли ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
				
	КонецЕсли;
				
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов"
		ИЛИ ИмяРегистра = "ДокументыПоОС" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры)
	
	ПроведениеДокументов.ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка, ДопПараметры);

	ПолучитьДанныеДокумента(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                               КАК Ссылка,
	|	ДанныеДокумента.Дата                                 КАК Период,
	|	ДанныеДокумента.Номер                                КАК Номер,
	|	ДанныеДокумента.Организация                          КАК Организация,
	|	ДанныеДокумента.Местонахождение                      КАК Местонахождение,
	|	ДанныеДокумента.Ответственный                        КАК Ответственный,
	|	ДанныеДокумента.Комментарий                          КАК Комментарий,
	|	ДанныеДокумента.Проведен                             КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                      КАК ПометкаУдаления,
	|	ДанныеДокумента.ОтражатьВРеглУчете                   КАК ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете                    КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.ОтражатьВБУиНУ                       КАК ОтражатьВБУиНУ,
	|	ДанныеДокумента.ОтражатьВОперативномУчете            КАК ОтражатьВОперативномУчете,
	|	ДанныеДокумента.ОтражатьВУУ                          КАК ОтражатьВУУ
	|
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Реквизиты);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ПолучитьДанныеДокумента(Запрос)
	
	СписокЗапросов = Новый Массив;
	
	#Область ДанныеДокументаРеквизиты
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|
	|ПОМЕСТИТЬ ДанныеДокументаРеквизиты
	|
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ДанныеДокументаТаблицаОС
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаДокумента.ОсновноеСредствоВладелец КАК ОсновноеСредствоВладелец,
	|	ТаблицаДокумента.ОсновноеСредство КАК ОбъектУчета
	|
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаОС
	|
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство
	|";
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	Запрос.Текст = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ВводОстатковУзловКомпонентовАмортизации"));
	ЗначенияПараметровПроведения.Вставить("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	ЗначенияПараметровПроведения.Вставить("НазваниеДокумента", НСтр("ru='Ввод остатков узлов, компонентов амортизации'"));
	ЗначенияПараметровПроведения.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	ЗначенияПараметровПроведения.Вставить("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВводОстатковУзловКомпонентовАмортизации);
	ЗначенияПараметровПроведения.Вставить("НастройкаХозяйственнойОперации", Справочники.НастройкиХозяйственныхОпераций.ВводОстатковУзловКомпонентовАмортизации);
	
	Если Реквизиты <> Неопределено Тогда
		
		ЗначенияПараметровПроведения.Вставить("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
		ЗначенияПараметровПроведения.Вставить(
			"РеглУчетВНАВедетсяНезависимо", 
			НастройкиНалоговУчетныхПолитикПовтИсп.РеглУчетВНАВедетсяНезависимо(Реквизиты.Организация, Реквизиты.Период));
		
	КонецЕсли; 
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Местонахождение                        КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО                            КАК Контрагент,
	|	&Ответственный                          КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	ЛОЖЬ                                    КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДокументыПоОС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДокументыПоОС";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаОС.НомерСтроки-1, 0)    КАК НомерЗаписи,
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК Дата,
	|	&Организация                            КАК Организация,
	|	&Местонахождение                        КАК Подразделение,
	|	&Проведен                               КАК Проведен,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство
	|
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации КАК ДанныеДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
	|		ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаПервоначальныеСведенияОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПервоначальныеСведенияОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаПервоначальныеСведенияОС(ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ВнеоборотныеАктивыСлужебный.ТекстЗапросаТаблицаВтПервоначальныеСведенияОС(ТекстыЗапроса);
			
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Ссылка                         КАК Регистратор,
		|	&Период                         КАК Период,
		|	ТаблицаОС.ОсновноеСредство      КАК ОсновноеСредство,
		|	&Организация                    КАК Организация,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВРеглУчете 
		|			ТОГДА ТаблицаОС.ДатаПринятияКУчетуБУ 
		|		ИНАЧЕ ЕСТЬNULL(втПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ                           КАК ДатаВводаВЭксплуатациюБУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВУпрУчете 
		|			ТОГДА ТаблицаОС.ДатаПринятияКУчетуУУ 
		|		ИНАЧЕ ЕСТЬNULL(втПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ                           КАК ДатаВводаВЭксплуатациюУУ,
		|
		|	ВЫБОР
		|		КОГДА &ОтражатьВРеглУчете
		|			ТОГДА &Ссылка 
		|		ИНАЧЕ ЕСТЬNULL(втПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюБУ, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ                           КАК ДокументВводаВЭксплуатациюБУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВУпрУчете
		|			ТОГДА &Ссылка 
		|		ИНАЧЕ ЕСТЬNULL(втПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ                           КАК ДокументВводаВЭксплуатациюУУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВРеглУчете 
		|			ТОГДА ТаблицаОС.МетодНачисленияАмортизацииБУ 
		|		ИНАЧЕ ЕСТЬNULL(втПервоначальныеСведенияОС.МетодНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ                           КАК МетодНачисленияАмортизацииБУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВРеглУчете 
		|			ТОГДА ТаблицаОС.ПорядокУчетаБУ 
		|		ИНАЧЕ ЕСТЬNULL(втПервоначальныеСведенияОС.ПорядокУчетаБУ, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ                           КАК ПорядокУчетаБУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВУпрУчете 
		|			ТОГДА ТаблицаОС.ПорядокУчетаУУ 
		|		ИНАЧЕ ЕСТЬNULL(втПервоначальныеСведенияОС.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ                           КАК ПорядокУчетаУУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВРеглУчете 
		|			ТОГДА ТаблицаОС.ПервоначальнаяСтоимостьБУ 
		|		ИНАЧЕ ЕСТЬNULL(втПервоначальныеСведенияОС.ПервоначальнаяСтоимостьБУ, 0)
		|	КОНЕЦ КАК ПервоначальнаяСтоимостьБУ,
		|
		|	ВЫБОР 
		|		КОГДА &ОтражатьВУпрУчете 
		|			ТОГДА ТаблицаОС.ПервоначальнаяСтоимостьУУ 
		|		ИНАЧЕ ЕСТЬNULL(втПервоначальныеСведенияОС.ПервоначальнаяСтоимостьУУ, 0)
		|	КОНЕЦ КАК ПервоначальнаяСтоимостьУУ
		|
		|ИЗ
		|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПервоначальныеСведенияОС КАК втПервоначальныеСведенияОС
		|		ПО втПервоначальныеСведенияОС.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
		|
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &РеглУчетВНАВедетсяНезависимо
		|	И &ОтражатьВОперативномУчете
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Ссылка                         КАК Регистратор,
		|	&Период                         КАК Период,
		|	ТаблицаОС.ОсновноеСредство      КАК ОсновноеСредство,
		|	&Организация                    КАК Организация,
		|
		|	ТаблицаОС.ДатаПринятияКУчетуУУ  КАК ДатаВводаВЭксплуатациюБУ,
		|	ТаблицаОС.ДатаПринятияКУчетуУУ  КАК ДатаВводаВЭксплуатациюУУ,
		|
		|	&Ссылка                         КАК ДокументВводаВЭксплуатациюБУ,
		|	&Ссылка                         КАК ДокументВводаВЭксплуатациюУУ,
		|
		|	ТаблицаОС.МетодНачисленияАмортизацииУУ КАК МетодНачисленияАмортизацииБУ,
		|
		|	ВЫБОР ТаблицаОС.ПорядокУчетаУУ
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеНачислятьАмортизацию)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена)
		|	КОНЕЦ КАК ПорядокУчетаБУ,
		|
		|	ТаблицаОС.ПорядокУчетаУУ        КАК ПорядокУчетаУУ,
		|
		|	ТаблицаОС.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
		|	ТаблицаОС.ПервоначальнаяСтоимостьУУ КАК ПервоначальнаяСтоимостьУУ
		|
		|ИЗ
		|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
		|
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И НЕ &РеглУчетВНАВедетсяНезависимо
		|	И &ОтражатьВОперативномУчете
		|";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаМестонахождениеОС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестонахождениеОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапросаТаблицаВтТаблицаВладельцев(ТекстыЗапроса);
	
	ВнеоборотныеАктивы.ТекстЗапросаСрезПоследнихРегистра(
		"МестонахождениеОС", "ВтМестонахождениеВладельцев", "ВтТаблицаВладельцев", ТекстыЗапроса);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                       КАК Регистратор,
	|	&Период                       КАК Период,
	|	&Организация                  КАК Организация,
	|	ТаблицаОС.ОсновноеСредство    КАК ОсновноеСредство,
	|	СведенияВладельца.МОЛ         КАК МОЛ,
	|
	|	&Местонахождение              КАК Местонахождение,
	|
	|	СведенияВладельца.АдресМестонахождения КАК АдресМестонахождения,
	|	СведенияВладельца.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
	|	СведенияВладельца.Арендатор КАК Арендатор,
	|	СведенияВладельца.ПодразделениеАрендатора КАК ПодразделениеАрендатора,
	|	СведенияВладельца.МОЛАрендатора КАК МОЛАрендатора,
	|
	|	&ОтражатьВРеглУчете           КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете            КАК ОтражатьВУпрУчете
	|
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтМестонахождениеВладельцев КАК СведенияВладельца
	|		ПО СведенияВладельца.Ссылка = ТаблицаОС.Ссылка 
	|			И СведенияВладельца.ОсновноеСредство = ТаблицаОС.ОсновноеСредствоВладелец 
	|
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПорядокУчетаОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Регистратор,
	|	&Период                                 КАК Период,
	|	&Организация                            КАК Организация,
	|	ТаблицаОС.ОсновноеСредство              КАК ОсновноеСредство,
	|	ТаблицаОС.ГруппаФинансовогоУчета        КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	ТаблицаОС.ПоказательНаработки           КАК ПоказательНаработки,
	|	ТаблицаОС.ОбъемНаработки                КАК ОбъемНаработки,
	|	&ОтражатьВРеглУчете                     КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                      КАК ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
	|
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПорядокУчетаОСБУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОСБУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтТаблицаВладельцев(ТекстыЗапроса);

	ТекстЗапроса = ВводОстатковУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаПорядокУчетаОСБУ(ТекстыЗапроса);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Период                                          КАК Период,
		|	&Организация                                     КАК Организация,
		|	ТаблицаОС.ОсновноеСредство                       КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК СостояниеБУ,
		|	ТаблицаОС.НачислятьАмортизациюБУ                 КАК НачислятьАмортизациюБУ,
		|	ТаблицаОС.СпособОтраженияРасходовБУ              КАК СпособОтраженияРасходовБУ,
		|	ТаблицаОС.СтатьяРасходовБУ                       КАК СтатьяРасходовБУ,
		|	ТаблицаОС.АналитикаРасходовБУ                    КАК АналитикаРасходовБУ,
		|	ТаблицаОС.ПодразделениеБУ                        КАК ПодразделениеБУ,
		|	ТаблицаОС.НаправлениеДеятельностиБУ              КАК НаправлениеДеятельностиБУ
		|
		|ИЗ
		|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
		|
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &РеглУчетВНАВедетсяНезависимо
		|	И &ОтражатьВРеглУчете
		|	И &ОтражатьВОперативномУчете
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период                                          КАК Период,
		|	&Организация                                     КАК Организация,
		|	ТаблицаОС.ОсновноеСредство                       КАК ОсновноеСредство,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК СостояниеБУ,
		|	ТаблицаОС.НачислятьАмортизациюУУ                 КАК НачислятьАмортизациюБУ,
		|	ТаблицаОС.СпособОтраженияРасходовУУ              КАК СпособОтраженияРасходовБУ,
		|	ТаблицаОС.СтатьяРасходовУУ                       КАК СтатьяРасходовБУ,
		|	ТаблицаОС.АналитикаРасходовУУ                    КАК АналитикаРасходовБУ,
		|	ТаблицаОС.ПодразделениеУУ                        КАК ПодразделениеБУ,
		|	ТаблицаОС.НаправлениеДеятельностиУУ              КАК НаправлениеДеятельностиБУ
		|
		|ИЗ
		|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
		|
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И НЕ &РеглУчетВНАВедетсяНезависимо
		|	И &ОтражатьВРеглУчете
		|	И &ОтражатьВОперативномУчете
		|";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаПорядокУчетаОСУУ(ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПорядокУчетаОСУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                          КАК Регистратор,
	|	&Период                                          КАК Период,
	|	&Организация                                     КАК Организация,
	|	ТаблицаОС.ОсновноеСредство                       КАК ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК Состояние,
	|	ТаблицаОС.НачислятьАмортизациюУУ                 КАК НачислятьАмортизацию,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаОС.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию)
	|				И ТаблицаОС.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету)
	|				И ТаблицаОС.ПорядокУчетаУУ <> ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы)
	|			
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|
	|		КОГДА ТаблицаОС.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				И &ОтражатьВУпрУчете
	|				И &ОтражатьВРеглУчете
	|				И (ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена))
	|
	|			ТОГДА ТаблицаОС.СпособОтраженияРасходовБУ
	|
	|		ИНАЧЕ ТаблицаОС.СпособОтраженияРасходовУУ 
	|
	|	КОНЕЦ КАК СпособОтраженияРасходов,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаОС.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				И &ОтражатьВУпрУчете
	|				И &ОтражатьВРеглУчете
	|				И (ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена))
	|
	|			ТОГДА ТаблицаОС.СтатьяРасходовБУ
	|
	|		ИНАЧЕ ТаблицаОС.СтатьяРасходовУУ 
	|
	|	КОНЕЦ КАК СтатьяРасходов,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаОС.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				И &ОтражатьВУпрУчете
	|				И &ОтражатьВРеглУчете
	|				И (ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена))
	|
	|			ТОГДА ТаблицаОС.АналитикаРасходовБУ
	|
	|		ИНАЧЕ ТаблицаОС.АналитикаРасходовУУ
	| 
	|	КОНЕЦ КАК АналитикаРасходов,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаОС.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				И &ОтражатьВУпрУчете
	|				И &ОтражатьВРеглУчете
	|				И (ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена))
	|
	|			ТОГДА ТаблицаОС.ПодразделениеБУ
	|
	|		ИНАЧЕ ТаблицаОС.ПодразделениеУУ
	| 
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаОС.СтатьяРасходовУУ = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|				И &ОтражатьВУпрУчете
	|				И &ОтражатьВРеглУчете
	|				И (ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислитьАмортизациюПриПринятииКУчету)
	|					ИЛИ ТаблицаОС.ПорядокУчетаБУ = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.АмортизацияНачислена))
	|
	|			ТОГДА ТаблицаОС.НаправлениеДеятельностиБУ
	|
	|		ИНАЧЕ ТаблицаОС.НаправлениеДеятельностиУУ
	| 
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|
	|	ЛОЖЬ КАК ПередаватьРасходыВДругуюОрганизацию,
	|	НЕОПРЕДЕЛЕНО КАК ОрганизацияПолучательРасходов
	|
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
	|
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете
	|	И &ОтражатьВОперативномУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииОСБУ(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииОСБУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаПараметрыАмортизацииОСБУ();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&Ссылка                               КАК Регистратор,
		|	&Период                               КАК Период,
		|	&Организация                          КАК Организация,
		|	ТаблицаОС.ОсновноеСредство            КАК ОсновноеСредство,
		|
		|	ТаблицаОС.СрокИспользованияБУ         КАК СрокПолезногоИспользованияБУ,
		|	ТаблицаОС.КоэффициентУскоренияБУ      КАК КоэффициентУскорения,
		|	ТаблицаОС.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимость,
		|	ТаблицаОС.ОбъемНаработки              КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	ТаблицаОС.СрокИспользованияБУ         КАК СрокИспользованияДляВычисленияАмортизации,
		|	ТаблицаОС.ДатаПринятияКУчетуБУ        КАК ДатаПоследнегоИзменения
		|
		|ИЗ
		|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
		|
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &РеглУчетВНАВедетсяНезависимо
		|	И &ОтражатьВРеглУчете
		|	И &ОтражатьВОперативномУчете
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Ссылка                               КАК Регистратор,
		|	&Период                               КАК Период,
		|	&Организация                          КАК Организация,
		|	ТаблицаОС.ОсновноеСредство            КАК ОсновноеСредство,
		|
		|	ТаблицаОС.СрокИспользованияУУ         КАК СрокПолезногоИспользованияБУ,
		|	ТаблицаОС.КоэффициентУскоренияУУ      КАК КоэффициентУскорения,
		|	ТаблицаОС.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимость,
		|	ТаблицаОС.ОбъемНаработки              КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	ТаблицаОС.СрокИспользованияУУ         КАК СрокИспользованияДляВычисленияАмортизации,
		|	ТаблицаОС.ДатаПринятияКУчетуУУ        КАК ДатаПоследнегоИзменения
		|
		|ИЗ
		|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
		|
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И НЕ &РеглУчетВНАВедетсяНезависимо
		|	И &ОтражатьВРеглУчете
		|	И &ОтражатьВОперативномУчете
		|
		|";
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаПараметрыАмортизацииОСУУ(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПараметрыАмортизацииОСУУ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	ТаблицаОС.ДатаПринятияКУчетуУУ               КАК ДатаПоследнегоИзменения,
	|	&Организация                                 КАК Организация,
	|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
	|	ТаблицаОС.СрокИспользованияУУ                КАК СрокИспользования,
	|	ТаблицаОС.СрокИспользованияУУ                КАК СрокИспользованияДляВычисленияАмортизации,
	|	ТаблицаОС.ОбъемНаработки                     КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаОС.КоэффициентУскоренияУУ             КАК КоэффициентУскорения,
	|	ТаблицаОС.МетодНачисленияАмортизацииУУ       КАК МетодНачисленияАмортизации,
	|	ТаблицаОС.ЛиквидационнаяСтоимость            КАК ЛиквидационнаяСтоимость,
	|	ТаблицаОС.ЛиквидационнаяСтоимостьРегл        КАК ЛиквидационнаяСтоимостьРегл,
	|
	|	ТаблицаОС.ТекущаяСтоимостьУУ                 КАК СтоимостьДляВычисленияАмортизации,
	|	ТаблицаОС.ТекущаяСтоимостьБУ                 КАК СтоимостьДляВычисленияАмортизацииРегл
	|
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
	|
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВУпрУчете
	|	И &ОтражатьВОперативномУчете
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаСтоимостьОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "СтоимостьОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаСтоимостьОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
		|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
		|	ТаблицаОС.НаправлениеДеятельности            КАК НаправлениеДеятельности,
		|
		|	&ОтражатьВРеглУчете                          КАК ОтражатьВРеглУчете,
		|	&ОтражатьВУпрУчете                           КАК ОтражатьВУпрУчете,
		|
		|	ТаблицаОС.ТекущаяСтоимостьУУ                 КАК Стоимость,
		|	ТаблицаОС.ТекущаяСтоимостьБУ                 КАК СтоимостьРегл,
		|
		|	ТаблицаОС.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковСтоимостиОС)  КАК ХозяйственнаяОперация,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВводОстатковСтоимостиОС) КАК НастройкаХозяйственнойОперации
		|
		|ИЗ
		|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
		|
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &ОтражатьВОперативномУчете
		|	И (ТаблицаОС.ТекущаяСтоимостьУУ <> 0
		|		ИЛИ ТаблицаОС.ТекущаяСтоимостьБУ <> 0)
		|";
	
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаАмортизацияОС(ТекстыЗапроса, Регистры)

	ИмяРегистра = "АмортизацияОС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВводОстатковУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаТаблицаАмортизацияОС();
	
	Если ТекстЗапроса = Неопределено Тогда
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)       КАК ВидДвижения,
		|	&Ссылка                                      КАК Регистратор,
		|	&Период                                      КАК Период,
		|	&Организация                                 КАК Организация,
		|	&Местонахождение                             КАК Подразделение,
		|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
		|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
		|	ТаблицаОС.НаправлениеДеятельности            КАК НаправлениеДеятельности,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковАмортизацииОС)  КАК ХозяйственнаяОперация,
		|	ТаблицаОС.НакопленнаяАмортизацияУУ           КАК Амортизация,
		|	ТаблицаОС.НакопленнаяАмортизацияБУ           КАК АмортизацияРегл,
		|	ТаблицаОС.ИдентификаторСтроки                КАК ИдентификаторФинЗаписи,
		|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВводОстатковАмортизацииОС) КАК НастройкаХозяйственнойОперации
		|
		|ИЗ
		|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
		|
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|	И &ОтражатьВОперативномУчете
		|	И (ТаблицаОС.НакопленнаяАмортизацияУУ <> 0
		|		ИЛИ ТаблицаОС.НакопленнаяАмортизацияБУ <> 0)
		|";
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаСоставЕГДС(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СоставЕГДС";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка               КАК Регистратор,
	|	ТаблицаОС.Ссылка.Дата          КАК Период,
	|	ТаблицаОС.Ссылка.Организация   КАК Организация,
	|	ТаблицаОС.ОсновноеСредство     КАК ВнеоборотныйАктив,
	|	ТаблицаОС.ЕГДС                 КАК ЕГДС
	|
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
	|
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|	И ТаблицаОС.ЕГДС <> ЗНАЧЕНИЕ(Справочник.ЕдиницыГенерирующиеДенежныеСредства.ПустаяСсылка)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбесценениеВНА(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбесценениеВНА";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТаблицаОС.Ссылка                       КАК Регистратор,
	|	ТаблицаОС.Ссылка.Дата                  КАК Период,
	|	ТаблицаОС.Ссылка.Организация           КАК Организация,
	|	ТаблицаОС.ОсновноеСредство             КАК ВнеоборотныйАктив,
	|	ТаблицаОС.ЕГДС                         КАК ЕГДС,
	|	&Местонахождение                       КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ТаблицаОС.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.ОбесценениеБУ                КАК ОбесценениеРегл,
	|	ТаблицаОС.ОбесценениеУУ                КАК ОбесценениеУпр,
	|	ТаблицаОС.ИдентификаторСтроки          КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВводОстатковОбесцененияОС) КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
	|
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|	И (ТаблицаОС.ОбесценениеБУ <> 0
	|		ИЛИ ТаблицаОС.ОбесценениеУУ <> 0)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаУзлыКомпонентыАмортизации(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УзлыКомпонентыАмортизации";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	ТаблицаОС.ОсновноеСредство КАК УзелКомпонент,
	|	ТаблицаОС.ОсновноеСредствоВладелец КАК ОсновноеСредство
	|ИЗ
	|	Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаОС
	|
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Истина);
	
КонецПроцедуры


Процедура ТекстЗапросаТаблицаВтТаблицаВладельцев(ТекстыЗапроса)
	
	ИмяТаблицы = "ВтТаблицаВладельцев";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Период КАК Период,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТаблицаОС.ОсновноеСредствоВладелец КАК ОсновноеСредство
	|
	|ПОМЕСТИТЬ ВтТаблицаВладельцев
	|
	|ИЗ
	|	ДанныеДокументаТаблицаОС КАК ТаблицаОС
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаРеквизиты КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОС.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеРегламентированныйУчет

Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ВводОстатковУзловКомпонентовАмортизацииЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ВводОстатковУзловКомпонентовАмортизацииЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбораСтатейИАналитик = Новый Массив;
	
	// СтатьяРасходовБУ
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.ОС";
	ПараметрыВыбора.Статья = "СтатьяРасходовБУ";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовБУ";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовБУ");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовБУ");
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	// СтатьяРасходовУУ
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.ОС";
	ПараметрыВыбора.Статья = "СтатьяРасходовУУ";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовУУ";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовУУ");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовУУ");
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	Возврат ПараметрыВыбораСтатейИАналитик;
	
КонецФункции

Процедура ОбновитьДанныеВСвязаннойТаблице(ТЧ, НовыеДанные, КодСтроки) Экспорт
	
	ПоискСтрок = Новый Структура("КодСтроки", КодСтроки);
	СтрокиКУдалению = ТЧ.НайтиСтроки(ПоискСтрок);
	
	Для Каждого СтрокаТаблицы Из СтрокиКУдалению Цикл
		ТЧ.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из НовыеДанные Цикл
		НоваяСтрока = ТЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.КодСтроки = КодСтроки;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ВводОстатковУзловКомпонентовАмортизации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.20.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a3a78595-c018-4cea-9b59-057e23d792b5");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВводОстатковУзловКомпонентовАмортизации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Обновляет документы ""Ввод остатков узлов и компонентов амортизации"":
								  |- Заполняет реквизит ""Подразделение и направление деятельности совпадают с данными учета""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковУзловКомпонентовАмортизации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ВводОстатковУзловКомпонентовАмортизации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ВводОстатковУзловКомпонентовАмортизации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ВводОстатковУзловКомпонентовАмортизации";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.Ссылка
	|	ИЗ
	|		Документ.ВводОстатковУзловКомпонентовАмортизации.ОС КАК ТаблицаДокумента
	|	ГДЕ
	|		(НЕ ТаблицаДокумента.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ
	|				И ТаблицаДокумента.ПодразделениеБУ = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И ТаблицаДокумента.СтатьяРасходовБУ <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|			ИЛИ НЕ ТаблицаДокумента.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ
	|				И ТаблицаДокумента.ПодразделениеУУ = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И ТаблицаДокумента.СтатьяРасходовУУ <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|		)
	|	) КАК СписокДокументов
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Документ.ВводОстатковУзловКомпонентовАмортизации.ОбработатьДанныеДляПереходаНаНовуюВерсию");

	ПолноеИмяОбъекта = "Документ.ВводОстатковУзловКомпонентовАмортизации";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;

	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ВводОстатковУзловКомпонентовАмортизации
			Если ДокументОбъект = Неопределено Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Для Каждого ДанныеСтроки Из ДокументОбъект.ОС Цикл
				
				Если НЕ ДанныеСтроки.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ
					И ДанныеСтроки.ПодразделениеБУ = Справочники.СтруктураПредприятия.ПустаяСсылка()
					И ДанныеСтроки.СтатьяРасходовБУ <> ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка() Тогда
						
					ДанныеСтроки.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаБУ = Истина;
					
				КонецЕсли;
				
				Если НЕ ДанныеСтроки.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ
					И ДанныеСтроки.ПодразделениеУУ = Справочники.СтруктураПредприятия.ПустаяСсылка()
					И ДанныеСтроки.СтатьяРасходовУУ <> ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка() Тогда
						
					ДанныеСтроки.ПодразделениеИНаправлениеДеятельностиСовпадаютСДаннымиУчетаУУ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
 	ВнеоборотныеАктивыСлужебный.ПроверитьВыполнениеОбработчика(
 		ПроблемныхОбъектов, 
 		ОбъектовОбработано, 
 		ПолноеИмяОбъекта);
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ОбъектовОбработано);	
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
