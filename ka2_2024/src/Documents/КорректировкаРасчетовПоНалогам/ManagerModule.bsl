#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("ИнтеграцияБЗК");
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов - таблиц значений - данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.КорректировкаРасчетовПоНалогам") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаРасчетыПоЕдиномуНалоговомуСчету(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыПоНалогамНаЕдиномНалоговомСчете(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыПоСанкциямНаЕдиномНалоговомСчете(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛ(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыСФондамиПоСтраховымВзносам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	Строки.Сумма КАК Сумма,
	|	Строки.Сумма / КурсВалютыУпрУчета.Курс КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиДт,
	|
	|	Строки.СчетУчета КАК СчетДт,
	|	Строки.Субконто1 КАК СубконтоДт1,
	|	Строки.Субконто2 КАК СубконтоДт2,
	|	Строки.Субконто3 КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеКт,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР Операция.ВидОперации 
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов) ТОГДА
	|			""Перенос начисленных налогов на ЕНС""
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов) ТОГДА
	|			""Перенос начисленных пеней, штрафов на ЕНС""
	|		ИНАЧЕ
	|			""Единый налоговый счет: списание""
	|	КОНЕЦ КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРасчетовПоНалогам КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НачалоПериода(Операция.Дата, ДЕНЬ)
	|ГДЕ
	|	Операция.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов))
	|	ИЛИ Операция.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|		И Строки.ВидДвижения = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	Строки.Сумма КАК Сумма,
	|	Строки.Сумма / КурсВалютыУпрУчета.Курс КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеКт,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиКт,
	|
	|	Строки.СчетУчета КАК СчетКт,
	|	Строки.Субконто1 КАК СубконтоКт1,
	|	Строки.Субконто2 КАК СубконтоКт2,
	|	Строки.Субконто3 КАК СубконтоКт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Единый налоговый счет: пополнение"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРасчетовПоНалогам КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НачалоПериода(Операция.Дата, ДЕНЬ)
	|ГДЕ
	|	Операция.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|		И Строки.ВидДвижения = ЛОЖЬ
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - текст запроса создания временных таблиц.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьОстаткиРасчетов(ПараметрыДокумента) Экспорт
	
	Организация         = ПараметрыДокумента.Организация;
	Период              = ПараметрыДокумента.Дата;
	ВидОперации         = ПараметрыДокумента.ВидОперации;
	ВводОстатковРасчетовПоЕНС = ПараметрыДокумента.ВводОстатковРасчетовПоЕНС;
	СписокНалогов       = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДокумента, "СписокНалогов");
	Если СписокНалогов <> Неопределено Тогда
		МассивСчетовУчета = Новый Массив;
		Для Каждого СтрокаСписка Из СписокНалогов Цикл
			СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(СтрокаСписка.Значение);
			Если ЗначениеЗаполнено(СчетУчета) Тогда
				МассивСчетовУчета.Добавить(СчетУчета);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивСчетовУчета = ЕдиныйНалоговыйСчет.ОбслуживаемыеСчетаУчета(Период-1);
	КонецЕсли;
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
	
	ТаблицаРасшифровкаНалогов = ОписаниеТаблицыРасшифровкаНалогов();
	
	Если ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
		Множитель = -1;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов Тогда
		Множитель = -1;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета Тогда
		Множитель = 1;
	Иначе
		Возврат ТаблицаРасшифровкаНалогов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаОстатков",   Новый Граница(КонецДня(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("МассивСчетовУчета", МассивСчетовУчета);
	Запрос.УстановитьПараметр("СчетаИсключения",   СчетаИсключения);
	Запрос.УстановитьПараметр("Множитель",         Множитель);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	&Множитель * ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В (&МассивСчетовУчета)
	|				И НЕ Счет В (&СчетаИсключения),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Множитель < 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток > 0
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетКод";
	
	ТаблицаОстатки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатки Цикл
		НоваяСтрока = ТаблицаРасшифровкаНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если ТаблицаРасшифровкаНалогов.Колонки.Найти("СчетЗатрат") <> Неопределено Тогда
			НоваяСтрока.СчетЗатрат = СтрокаТаблицы.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	ТаблицаРасшифровкаНалогов.Колонки.Добавить("ВидНалоговогоОбязательства", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ЗаполнитьВидыНалогов(ТаблицаРасшифровкаНалогов, Организация, Период);
	
	ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	
	МассивСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРасшифровкаНалогов Цикл
		Если ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
			Если ВидыНалоговыхПлатежей.Найти(СтрокаТаблицы.ВидНалоговогоОбязательства) = Неопределено Тогда
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов Тогда
			Если Перечисления.ВидыПлатежейВГосБюджет.ЭтоПени(СтрокаТаблицы.ВидНалоговогоОбязательства) Тогда
				СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.ПениСам;
			ИначеЕсли Перечисления.ВидыПлатежейВГосБюджет.ЭтоШтраф(СтрокаТаблицы.ВидНалоговогоОбязательства) Тогда
				СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Штраф;
			ИначеЕсли Перечисления.ВидыПлатежейВГосБюджет.ЭтоПроценты(СтрокаТаблицы.ВидНалоговогоОбязательства) Тогда
				СтрокаТаблицы.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Проценты;
			Иначе
				МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаМассива Из МассивСтрокКУдалению Цикл
		ТаблицаРасшифровкаНалогов.Удалить(СтрокаМассива);
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов Тогда
		ДозаполнитьТаблицуНалогов(ТаблицаРасшифровкаНалогов, Организация, Период, ВводОстатковРасчетовПоЕНС);
	КонецЕсли;
	
	Возврат ТаблицаРасшифровкаНалогов;
	
КонецФункции

Функция ОписаниеТаблицыРасшифровкаНалогов() Экспорт
	
	ТаблицаНалогов = Новый ТаблицаЗначений;
	ТаблицаНалогов.Колонки.Добавить("ТипНалога",                   Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговВзносов"));
	ТаблицаНалогов.Колонки.Добавить("КодБК",                       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ТаблицаНалогов.Колонки.Добавить("ВидПлатежаВГосБюджет",        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаНалогов.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаНалогов.Колонки.Добавить("КодПоОКТМО",                  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	ТаблицаНалогов.Колонки.Добавить("Сумма",                       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаНалогов.Колонки.Добавить("СрокУплаты",                  Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаНалогов.Колонки.Добавить("СчетУчета",                   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНалогов.Колонки.Добавить("Субконто1",                   Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("Субконто2",                   Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("Субконто3",                   Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	ТаблицаНалогов.Колонки.Добавить("НачалоПериода",               Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаНалогов.Колонки.Добавить("КонецПериода",                Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаНалогов.Колонки.Добавить("ВидПлатежа",                  Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаНалогов.Колонки.Добавить("ВидДвижения",                 Метаданные.Документы.КорректировкаРасчетовПоНалогам.ТабличныеЧасти.РасшифровкаНалогов.Реквизиты.ВидДвижения.Тип);
	ТаблицаНалогов.Колонки.Добавить("ПлатежныйДокумент",           Метаданные.Документы.КорректировкаРасчетовПоНалогам.ТабличныеЧасти.РасшифровкаНалогов.Реквизиты.ПлатежныйДокумент.Тип);
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Процедура ЗаполнитьПоДвижениямДляЗачетаАванса(ДокументОбъект, Движения) Экспорт
	
	ДокументОбъект.РасшифровкаНалогов.Очистить();
		
	Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов Тогда
		
		Для Каждого Движение Из Движения.РасчетыПоНалогамНаЕдиномНалоговомСчете Цикл
			НоваяСтрока = ДокументОбъект.РасшифровкаНалогов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
			НоваяСтрока.ТипНалога = Движение.Налог;
			НоваяСтрока.КодБК = ВидыНалоговВзносовЛокализация.КБКПоВидуНалоговогоОбязательства(НоваяСтрока.ТипНалога);
		КонецЦикла;
		
	ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов Тогда
		
		Для Каждого Движение Из Движения.РасчетыПоСанкциямНаЕдиномНалоговомСчете Цикл
			НоваяСтрока = ДокументОбъект.РасшифровкаНалогов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                    КАК Период,
	|	ДанныеДокумента.Номер                   КАК Номер,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.СуммаДокумента          КАК СуммаДокумента,
	|	ДанныеДокумента.Ответственный           КАК Ответственный,
	|	ДанныеДокумента.Комментарий             КАК Комментарий,
	|	ДанныеДокумента.ПометкаУдаления         КАК ПометкаУдаления,
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	ДанныеДокумента.Проведен                КАК Проведен
	|
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Реквизиты.Организация, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("КодПоОКТМО", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КодПоОКТМО"));
	Запрос.УстановитьПараметр("НДФЛНалоговогоАгента", ВидыНалоговВзносовЛокализация.НДФЛНалоговогоАгента());
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	Значения.Вставить("ИдентификаторМетаданных",                         ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.КорректировкаРасчетовПоНалогам"));
	Значения.Вставить("ИспользоватьНачислениеЗарплаты",                  Константы.ИспользоватьНачислениеЗарплаты.Получить());
	Значения.Вставить("ИспользоватьУчетПрочихАктивовПассивов",           ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов"));
	Значения.Вставить("ВалютаУправленческогоУчета",                      Константы.ВалютаУправленческогоУчета.Получить());
	
	Если Реквизиты <> Неопределено Тогда
		
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация);
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			ВалютаРегламентированногоУчета,
			ВалютаРегламентированногоУчета,
			Реквизиты.Период,
			Реквизиты.Организация);
			
		Значения.Вставить("КоэффициентПересчетаВВалютуУпр",              Коэффициенты.КоэффициентПересчетаВВалютуУпр);
		Значения.Вставить("ВалютаРегламентированногоУчета",              ВалютаРегламентированногоУчета);
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоЕдиномуНалоговомуСчету(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыПоЕдиномуНалоговомуСчету";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ВЫБОР КОГДА ДанныеДокумента.ВидДвижения = ЛОЖЬ ТОГДА
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ДанныеДокумента.Сумма КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ДанныеДокумента.Сумма КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ВидОперации В
	|		(ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоНалогамНаЕдиномНалоговомСчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыПоНалогамНаЕдиномНалоговомСчете";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.СчетУчета КАК СчетУчета,
	|	ДанныеДокумента.ТипНалога КАК Налог,
	|	ДанныеДокумента.КодБК КАК КодБК,
	|	ЕСТЬNULL(Регистрации.Ссылка, &РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(Регистрации.КодПоОКТМО, &КодПоОКТМО) КАК КодПоОКТМО,
	|	ДанныеДокумента.СрокУплаты КАК СрокУплаты,
	|	НЕОПРЕДЕЛЕНО КАК ПлатежныйДокумент,
	|	ДанныеДокумента.Сумма КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК Регистрации
	|	ПО Регистрации.Ссылка = (ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Субконто1) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА ДанныеДокумента.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Субконто2) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА ДанныеДокумента.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Субконто3) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА ДанныеДокумента.Субконто3
	|		ИНАЧЕ &РегистрацияВНалоговомОргане
	|	КОНЕЦ)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.СчетУчета КАК СчетУчета,
	|	ДанныеДокумента.ТипНалога КАК Налог,
	|	ДанныеДокумента.КодБК КАК КодБК,
	|	ЕСТЬNULL(Регистрации.Ссылка, &РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(Регистрации.КодПоОКТМО, &КодПоОКТМО) КАК КодПоОКТМО,
	|	ДанныеДокумента.СрокУплаты КАК СрокУплаты,
	|	ДанныеДокумента.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ДанныеДокумента.Сумма КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК Регистрации
	|	ПО Регистрации.Ссылка = (ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Субконто1) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА ДанныеДокумента.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Субконто2) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА ДанныеДокумента.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Субконто3) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА ДанныеДокумента.Субконто3
	|		ИНАЧЕ &РегистрацияВНалоговомОргане
	|	КОНЕЦ)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоСанкциямНаЕдиномНалоговомСчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыПоСанкциямНаЕдиномНалоговомСчете";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.ВидПлатежа КАК ВидПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ПлатежныйДокумент,
	|	ДанныеДокумента.Сумма КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.ВидПлатежа КАК ВидПлатежа,
	|	ДанныеДокумента.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	ДанныеДокумента.Сумма КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.ПогашениеПенейШтрафов)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	Налоги.ТипНалога КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))) КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Налоги
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|	И (Налоги.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов))
	|		ИЛИ Налоги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|			И Налоги.ВидДвижения = ИСТИНА)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Налоги.ТипНалога
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.ЕдиныйНалоговыйПлатеж) КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))) КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Налоги
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|	И (Налоги.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов))
	|		ИЛИ Налоги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|			И Налоги.ВидДвижения = ИСТИНА)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Налоги.ТипНалога
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	Налоги.ТипНалога КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))) КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Налоги
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|	И Налоги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|		И Налоги.ВидДвижения = ЛОЖЬ
	|	
	|СГРУППИРОВАТЬ ПО
	|	Налоги.ТипНалога
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.ЕдиныйНалоговыйПлатеж) КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))) КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Налоги
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|	И Налоги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|		И Налоги.ВидДвижения = ЛОЖЬ
	|	
	|СГРУППИРОВАТЬ ПО
	|	Налоги.ТипНалога
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияПоПрочимАктивамПассивам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	Налоги.ТипНалога КАК Аналитика,
	|	Налоги.Сумма КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	Налоги.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ДвижениеАктивовПассивовЗаСчетАктивовПассивов) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Налоги
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|	И (Налоги.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов))
	|		ИЛИ Налоги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|			И Налоги.ВидДвижения = ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.ЕдиныйНалоговыйПлатеж) КАК Аналитика,
	|	Налоги.Сумма КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	Налоги.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ДвижениеАктивовПассивовЗаСчетАктивовПассивов) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Налоги
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|	И (Налоги.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеНалогов),
	|							ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.НачислениеПенейШтрафов))
	|		ИЛИ Налоги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|			И Налоги.ВидДвижения = ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	Налоги.ТипНалога КАК Аналитика,
	|	Налоги.Сумма КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	Налоги.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ДвижениеАктивовПассивовЗаСчетАктивовПассивов) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Налоги
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|	И Налоги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|		И Налоги.ВидДвижения = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.ЕдиныйНалоговыйПлатеж) КАК Аналитика,
	|	Налоги.Сумма КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	Налоги.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ДвижениеАктивовПассивовЗаСчетАктивовПассивов) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Налоги
	|ГДЕ
	|	Налоги.Ссылка = &Ссылка
	|	И Налоги.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.КорректировкаСчета)
	|		И Налоги.ВидДвижения = ЛОЖЬ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяТаблицы = "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяТаблицы, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	Расшифровка.Сумма КАК Сумма,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
	|	&Организация КАК Организация,
	|	ДанныеПервичныхДокументов.Номер КАК ПлатежноеПоручениеНомер,
	|	ДанныеПервичныхДокументов.Дата КАК ПлатежноеПоручениеДата,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Расшифровка.Субконто1) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА Расшифровка.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(Расшифровка.Субконто2) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА Расшифровка.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(Расшифровка.Субконто3) = ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			ТОГДА Расшифровка.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	Расшифровка.ТипНалога КАК ТипНалога,
	|	""0"" КАК ПоказательОснования,
	|	""0"" КАК ПоказательПериода
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Расшифровка
	|		ПО ДанныеДокумента.Ссылка = Расшифровка.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО Расшифровка.ПлатежныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И ДанныеДокумента.Организация = ДанныеПервичныхДокументов.Организация
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьНачислениеЗарплаты
	|	И ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов)
	|	И Расшифровка.ТипНалога В (&НДФЛНалоговогоАгента)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСФондамиПоСтраховымВзносам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяТаблицы = "РасчетыСФондамиПоСтраховымВзносам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяТаблицы, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТипыНалоговВФонды", ТекстыЗапроса) Тогда
		ЕдиныйНалоговыйСчет.ТекстЗапросаВтТипыНалоговВФонды(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТипыНалоговВзносов.ВидСтрахования КАК ВидОбязательногоСтрахованияСотрудников,
	|	ДанныеПервичныхДокументов.Номер КАК ПлатежноеПоручениеНомер,
	|	ДанныеПервичныхДокументов.Дата КАК ПлатежноеПоручениеДата,
	|	ИСТИНА КАК ЭтоСтраховыеВзносы,
	|	0 КАК ГодЗадолженностиПоЕСН,
	|	Расшифровка.Сумма КАК Сумма
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК Расшифровка
	|		ПО ДанныеДокумента.Ссылка = Расшифровка.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТипыНалоговВФонды КАК ТипыНалоговВзносов
	|		ПО Расшифровка.ТипНалога = ТипыНалоговВзносов.ТипНалога
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО Расшифровка.ПлатежныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И ДанныеДокумента.Организация = ДанныеПервичныхДокументов.Организация
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьНачислениеЗарплаты
	|	И ДанныеДокумента.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЕдиномуНалоговомуСчету.УплатаНалогов)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                        КАК Период,
	|	&Организация                   КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)   КАК ДатаОтражения";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьВидыНалогов(ТекущаяТаблица, Организация, Период) Экспорт
	
	ОсновнаяРегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Организация, Период);
	
	Если ТекущаяТаблица.Колонки.Найти("СчетЗатрат") <> Неопределено Тогда
		ИмяКолонкиСчет = "СчетЗатрат";
	Иначе
		ИмяКолонкиСчет = "СчетУчета";
	КонецЕсли;
	
	Если ТекущаяТаблица.Колонки.Найти("РегистрацияВНалоговомОргане") <> Неопределено Тогда
		ЗаполнятьРегистрацию = Истина;
	Иначе
		ЗаполнятьРегистрацию = Ложь;
	КонецЕсли;
	
	Если ТекущаяТаблица.Колонки.Найти("ТипНалога") <> Неопределено  Тогда
		ЗаполнятьНалог = Истина;
	Иначе
		ЗаполнятьНалог = Ложь;
	КонецЕсли;
	
	Если ТекущаяТаблица.Колонки.Найти("ВидПлатежаВГосБюджет") <> Неопределено  Тогда
		ЗаполнятьВидПлатежаВГосБюджет = Истина;
	Иначе
		ЗаполнятьВидПлатежаВГосБюджет = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы[ИмяКолонкиСчет]);
		
		Если ЗаполнятьРегистрацию Тогда
			Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
				НомерСубконто = НомерВидаСубконтоНаСчете(СвойстваСчета, "РегистрацияВНалоговомОргане");
				СтрокаТаблицы.РегистрацияВНалоговомОргане = ?(НомерСубконто > 0, 
					СтрокаТаблицы["Субконто" + НомерСубконто], Неопределено);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.РегистрацияВНалоговомОргане) Тогда
				СтрокаТаблицы.РегистрацияВНалоговомОргане = ОсновнаяРегистрацияВНалоговомОргане;
			КонецЕсли;
			СтрокаТаблицы.КодПоОКТМО = Справочники.РегистрацииВНалоговомОргане.КодТерритории(СтрокаТаблицы.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Если ЗаполнятьНалог Тогда
			НомерСубконто  = НомерВидаСубконтоНаСчете(СвойстваСчета, "УровниБюджетов");
			УровеньБюджета = ?(НомерСубконто > 0, СтрокаТаблицы["Субконто" + НомерСубконто], Неопределено);
			СтрокаТаблицы.ТипНалога = РеглУчетСервер.ТипНалогаПоСчетуУчета(СтрокаТаблицы.СчетУчета);
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ТипНалога) Тогда
				СтрокаТаблицы.ТипНалога = Справочники.ВидыНалоговВзносов.ПрочиеНалогиИСборы;
			КонецЕсли;
		КонецЕсли;
		СтрокаТаблицы.ВидНалоговогоОбязательства = ВидНалоговогоОбязательстваПоАналитикеПлатежа(СтрокаТаблицы, ИмяКолонкиСчет);
		Если ЗаполнятьВидПлатежаВГосБюджет Тогда
			СтрокаТаблицы.ВидПлатежаВГосБюджет = СтрокаТаблицы.ВидНалоговогоОбязательства;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДозаполнитьТаблицуНалогов(ТаблицаНалогов, Организация, Период, ВводНачальныхДанных)
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалогов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ТипНалога) Тогда
			СтрокаТаблицы.КодБК      = ВидыНалоговВзносовЛокализация.КБКПоВидуНалоговогоОбязательства(СтрокаТаблицы.ТипНалога);
			СтрокаТаблицы.СчетУчета  = РеглУчетСервер.СчетУчетаПоТипуНалога(СтрокаТаблицы.ТипНалога);
			СтрокаТаблицы.СрокУплаты = '20221231'; // переносим только недоимки, т.е. со сроком уплаты до 2023 года.
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция НомерВидаСубконтоНаСчете(СвойстваСчета, ИмяВидаСубконто)
	
	ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяВидаСубконто];
	Если СвойстваСчета.ВидСубконто1 = ВидСубконто Тогда
		Возврат 1;
	ИначеЕсли СвойстваСчета.ВидСубконто2 = ВидСубконто Тогда
		Возврат 2;
	ИначеЕсли СвойстваСчета.ВидСубконто3 = ВидСубконто Тогда
		Возврат 3;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция ВидНалоговогоОбязательстваПоАналитикеПлатежа(СтрокаТаблицыПлатежей, ИмяКолонкиСчет)
	
	НомерСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомерСубконто(СтрокаТаблицыПлатежей[ИмяКолонкиСчет],
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Если НомерСубконто <> 0 Тогда
		ВидНалоговогоОбязательства = СтрокаТаблицыПлатежей["Субконто" + НомерСубконто]
	Иначе
		ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидНалоговогоОбязательства;
	
КонецФункции
#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.КорректировкаРасчетовПоНалогам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.20.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("2aaa386f-3b2e-4cbd-a2e8-66f3cc690694");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.КорректировкаРасчетовПоНалогам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Обновление документов ""Корректировка расчетов по налогам"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- заполнение колонки ""Тип налога"" по данным реквизита ""Тип налога (Не используется)"" в табличной части ""Расшифровка налогов"";'"));
	
	Обработчик.Комментарий = СтрСоединить(СписокОписаний, Символы.ПС);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.КорректировкаРасчетовПоНалогам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.КорректировкаРасчетовПоНалогам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.КорректировкаРасчетовПоНалогам.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаРасчетовПоНалогамРасшифровкаНалогов.Ссылка
	|ИЗ
	|	Документ.КорректировкаРасчетовПоНалогам.РасшифровкаНалогов КАК КорректировкаРасчетовПоНалогамРасшифровкаНалогов
	|ГДЕ
	|	КорректировкаРасчетовПоНалогамРасшифровкаНалогов.УдалитьТипНалога <> ЗНАЧЕНИЕ(Перечисление.УдалитьТипыНалогов.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ИсключенияПриОбновлении = Новый Массив;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось обработать документы ""Корректировка расчетов по налогам"" по обработчику:'"));
	СписокОписаний.Добавить(НСтр("ru = '- заполнение колонки ""Тип налога"" по данным реквизита ""Тип налога (Не используется)"" в табличной части ""Расшифровка налогов"";'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРасчетовПоНалогам КАК ДанныеДокумента
		|		ПО ТаблицаДокументов.Ссылка = ДанныеДокумента.Ссылка
		|";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Документ = Запрос.Выполнить().Выбрать();
	
	Пока Документ.Следующий() Цикл
		
		ПричинаИсключения = 0;
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = 1; // Блокировка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Документ.Ссылка, Документ.ВерсияДанных, Параметры.Очередь); // ДокументОбъект
			
			ПричинаИсключения = 2; // ПлохиеДанные
			Рекомендация = НСтр("ru = 'Перепроведите документ вручную.'");
			
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект, "РасшифровкаНалогов.УдалитьТипНалога", "ТипНалога");
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			ПричинаИсключения = 3; // Запись
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
			Если ПричинаИсключения = 2 Тогда
				
				ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(
					Документ.Ссылка, Рекомендация, ИнформацияОбОшибке());
				ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
				
			ИначеЕсли ПричинаИсключения = 3 Тогда
				
				ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
					ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
