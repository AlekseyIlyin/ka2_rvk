#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ЭтоНовый() И Не ЗначениеЗаполнено(Автор) Тогда
		Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	Если ДокументыОтгрузки.Количество() > 0
		И ДополнительныеСвойства.Свойство("ИзменениеДокументовОтгрузки") Тогда
		
		ПараметрыЗаявления = ПараметрыЗаявленияПоОтгрузкам();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаявления);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ДокументыОтгрузки.Количество() = 0 Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Заполнение",,,"ДокументыОтгрузки");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ДокументыОтгрузки", "Объект", Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодПричины) Тогда
		
		Если КодПричины <> "1"
		И НЕ ЗначениеЗаполнено(РанееПредставленноеЗаявление) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				НСтр("ru = 'Ранее представленное заявление'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "РанееПредставленноеЗаявление","Объект", Отказ);
		КонецЕсли;
		
		Если КодПричины = "5"
		И НЕ ЗначениеЗаполнено(ИзменениеЦены) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				НСтр("ru = 'Цена увеличена с'"));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ИзменениеЦены","Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Отгрузки", ДокументыОтгрузки.Выгрузить(,"НомерСтроки, ДокументОтгрузки"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Отгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Отгрузки.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НомераОтгрузокТЧ
	|ИЗ
	|	&Отгрузки КАК Отгрузки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераОтгрузокТЧ.ДокументОтгрузки КАК ДокументОтгрузки,
	|	НомераОтгрузокТЧ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	НомераОтгрузокТЧ КАК НомераОтгрузокТЧ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО НомераОтгрузокТЧ.ДокументОтгрузки = РеестрДокументов.Ссылка
	|ГДЕ
	|	НЕ РеестрДокументов.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераОтгрузокТЧ.ДокументОтгрузки КАК ДокументОтгрузки,
	|	КОЛИЧЕСТВО(НомераОтгрузокТЧ.НомерСтроки) КАК КолвоОтгрузок
	|ПОМЕСТИТЬ КоличествоОтгрузок
	|ИЗ
	|	НомераОтгрузокТЧ КАК НомераОтгрузокТЧ
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераОтгрузокТЧ.ДокументОтгрузки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоОтгрузок.ДокументОтгрузки КАК ДокументОтгрузки,
	|	НомераОтгрузокТЧ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	КоличествоОтгрузок КАК КоличествоОтгрузок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераОтгрузокТЧ КАК НомераОтгрузокТЧ
	|		ПО КоличествоОтгрузок.ДокументОтгрузки = НомераОтгрузокТЧ.ДокументОтгрузки
	|ГДЕ
	|	КоличествоОтгрузок.КолвоОтгрузок > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераОтгрузокТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоОтгрузок";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаНеПроведен = Результат[1].Выбрать();
	
	Пока ВыборкаНеПроведен.Следующий() Цикл
		Текст = СтрШаблон(НСтр("ru = 'В строке %1 должен быть указан проведенный документ.'"), ВыборкаНеПроведен.НомерСтроки);
					
				ОбщегоНазначения.СообщитьПользователю(
						Текст,
						,
						"ДокументыОтгрузки["+Формат(ВыборкаНеПроведен.НомерСтроки - 1, "ЧГ=")+"].ДокументОтгрузки",
						,
						Отказ);
	КонецЦикла;
	
	ВыборкаДубли = Результат[3].Выбрать();
	
	Пока ВыборкаДубли.Следующий() Цикл
		Текст = СтрШаблон(НСтр("ru = 'В строке %1 повторно указан документ %2.'"),
						ВыборкаДубли.НомерСтроки,
						ВыборкаДубли.ДокументОтгрузки);
						
					ОбщегоНазначения.СообщитьПользователю(
						Текст,
						,
						"ДокументыОтгрузки["+Формат(ВыборкаДубли.НомерСтроки - 1, "ЧГ=")+"].ДокументОтгрузки",
						,
						Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Дата = ОбщегоНазначения.ТекущаяДатаПользователя();
	Автор = Пользователи.ТекущийПользователь();
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	КлиентКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения.Ссылка) <> Тип("ДокументСсылка.ПервичныйДокумент")
			И ЗначениеЗаполнено(ДанныеЗаполнения.ХозяйственнаяОперация)
			И ДанныеЗаполнения.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиенту
			И ДанныеЗаполнения.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера
			И ДанныеЗаполнения.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОтчетДавальцу2_5
			И ДанныеЗаполнения.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Заявление о ввозе товаров от покупателя из ЕАЭС нельзя выписать на основании документа с типом хоз. операции ""%1"".'"),
				ДанныеЗаполнения.ХозяйственнаяОперация);
			ВызватьИсключение ТекстСообщения;
		
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.ПервичныйДокумент")
			И ДанныеЗаполнения.ТипПервичногоДокумента <> Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Заявление о ввозе товаров от покупателя из ЕАЭС нельзя выписать на основании первичного документа с типом ""%1"".'"),
				ДанныеЗаполнения.ТипПервичногоДокумента);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.НалогообложениеНДС) Тогда
			
			ТекстСообщения = НСтр("ru = 'Заявление о ввозе товаров от покупателя из ЕАЭС нельзя выписать на основании документа с пустым типом налогообложения.'");
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
			И ДанныеЗаполнения.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров
			И ДанныеЗаполнения.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Заявление о ввозе товаров от покупателя из ЕАЭС нельзя выписать на основании документа с типом налогообложения ""%1"".'"),
				ДанныеЗаполнения.НалогообложениеНДС);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.ПометкаУдаления Тогда
			ТекстСообщения = НСтр("ru = 'Заявление о ввозе товаров от покупателя из ЕАЭС нельзя выписать на основании документа, помеченного на удаление.'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера Тогда
			КлиентКонтрагент = ДанныеЗаполнения.КлиентКонтрагент;
		КонецЕсли;
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения, Дата);
		
	КонецЕсли;
	
	// ТипДанныхЗаполнения с типом Структура используется в случае вызова обработки заполнения не из форм списка
	// документов оснований.
	// Такой способ заполнения в конфигурации используется только в форме ФормаРабочееМесто.
	// Заполнение реквизитов табличной части заявления о ввозе товаров от покупателя на основании массива выбранных 
	// документов отгрузки выполняется в модуле формы документа с помощью параметра ЗначенияЗаполнения, чтобы 
	// в данной процедуре обработки заполнения не вычислять дважды значения СуммаОтгрузки - реквизита табличной части
	// документа, который отображается только в форме документа, но не храниться в базе данных.
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(КлиентКонтрагент) Тогда
		Контрагент = КлиентКонтрагент;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	Автор = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Ответственный") Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(Ссылка, Дата)
	
	ИсключаемыеПоля = "Номер, Дата, Проведен, ПометкаУдаления, Комментарий";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Ссылка, , ИсключаемыеПоля);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Валюта, СуммаДокумента");
	
	ДокументОтгрузки = ДокументыОтгрузки.Добавить();
	ДокументОтгрузки.ДокументОтгрузки = Ссылка;
	ДокументОтгрузки.Валюта = РеквизитыДокумента.Валюта;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.СуммаДокумента) Тогда
		СуммаОтгрузки = РеквизитыДокумента.СуммаДокумента;
	Иначе
		СуммаОтгрузки = 0;
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		Тогда
		СуммаОтгрузки = Документы.ЗаявлениеОВвозеТоваровПолученное.СуммаОтгрузкиТоваров(Ссылка, Дата, КодПричины);
	КонецЕсли;
	
	ДокументОтгрузки.СуммаПоЗаявлению = Макс(0,
		СуммаОтгрузки - Документы.ЗаявлениеОВвозеТоваровПолученное.ПодтвержденнаяЗаявлениямиСуммаНулевойСтавки(Ссылка, Дата));
	
	Если НЕ ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗаявленияПоОтгрузкам()
	
	Результат = Новый Структура;
	Результат.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
	Результат.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	Результат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	Результат.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	Результат.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыОтгрузки", ДокументыОтгрузки.ВыгрузитьКолонку("ДокументОтгрузки"));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОснований.Ссылка КАК ДокументОснование,
	|	ДанныеОснований.Проведен КАК Проведен,
	|	ДанныеОснований.Подразделение КАК Подразделение,
	|	ДанныеОснований.Партнер КАК Партнер,
	|	ДанныеОснований.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеОснований.МестоХранения.Ключ КАК Склад,
	|	ДанныеОснований.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК ДанныеОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОснованийСчетовФактур КАК ДанныеОснованийСФ
	|		ПО ДанныеОснований.Ссылка = ДанныеОснованийСФ.Регистратор
	|		И ДанныеОснованийСФ.НалогообложениеНДС В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|ГДЕ
	|	ДанныеОснований.Ссылка В (&ДокументыОтгрузки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Ссылка,
	|	ПервичныйДокумент.Проведен,
	|	ПервичныйДокумент.Подразделение,
	|	ПервичныйДокумент.Партнер,
	|	Значение(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
	|	Значение(Справочник.Склады.ПустаяСсылка),
	|	ПервичныйДокумент.НаправлениеДеятельности
	|ИЗ
	|	Документ.ПервичныйДокумент КАК ПервичныйДокумент
	|ГДЕ
	|	ПервичныйДокумент.Ссылка В (&ДокументыОтгрузки)";
	
	Запрос.Текст = ТекстЗапроса;
	
	ПерваяСтрока                = Истина;
	РазныеПартнеры                = Ложь;
	РазныеСклады                  = Ложь;
	РазныеПодразделения           = Ложь;
	РазныеХозяйственныеОперации   = Ложь;
	РазныеНаправленияДеятельности = Ложь;
	
	ВыборкаОснований = Запрос.Выполнить().Выбрать();
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиВозможностиВводаНаОсновании();
	
	Пока ВыборкаОснований.Следующий() Цикл
		
		ПараметрыПроверки.ЕстьОшибкиПроведен = НЕ ВыборкаОснований.Проведен;
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСПараметрами(ВыборкаОснований.ДокументОснование,
			ПараметрыПроверки);
		
		Если ПерваяСтрока Тогда
			ЗаполнитьЗначенияСвойств(Результат, ВыборкаОснований);
			Продолжить;
		КонецЕсли;
		
		РазныеПартнеры      = РазныеПартнеры Или Результат.Партнер <> ВыборкаОснований.Партнер;
		РазныеСклады        = РазныеСклады Или Результат.Склад <> ВыборкаОснований.Склад;
		РазныеПодразделения = РазныеПодразделения Или Результат.Подразделение <> ВыборкаОснований.Подразделение;
		РазныеХозяйственныеОперации = РазныеХозяйственныеОперации 
			Или Результат.ХозяйственнаяОперация <> ВыборкаОснований.ХозяйственнаяОперация;
		РазныеНаправленияДеятельности = РазныеНаправленияДеятельности
			Или Результат.НаправлениеДеятельности <> ВыборкаОснований.НаправлениеДеятельности;
		
	КонецЦикла;
	
	Если РазныеПартнеры Тогда
		Результат.Партнер = Неопределено;
	КонецЕсли;
	Если РазныеСклады Тогда
		Результат.Склад = Неопределено;
	КонецЕсли;
	Если РазныеПодразделения Тогда
		Результат.Подразделение = Неопределено;
	КонецЕсли;
	Если РазныеХозяйственныеОперации Тогда
		Результат.ХозяйственнаяОперация = Неопределено;
	КонецЕсли;
	Если РазныеНаправленияДеятельности Тогда
		Результат.НаправлениеДеятельности = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли