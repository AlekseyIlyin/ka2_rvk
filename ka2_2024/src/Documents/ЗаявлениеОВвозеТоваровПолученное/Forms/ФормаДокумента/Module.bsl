
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.ЗначенияЗаполнения.Свойство("ДокументыОтгрузки") Тогда
			Для каждого СтрокаТЧ Из Параметры.ЗначенияЗаполнения.ДокументыОтгрузки Цикл
				НоваяСтрока = Объект.ДокументыОтгрузки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
			Объект.ХозяйственнаяОперация = Параметры.ЗначенияЗаполнения.ХозяйственнаяОперация;
			ПодготовитьФормуНаСервере();
		Иначе
			ПодготовитьФормуНаСервере(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СписокСуммОтгрузок.Очистить();
	
	Для каждого Отгрузка Из Объект.ДокументыОтгрузки Цикл
		СписокСуммОтгрузок.Добавить(Отгрузка.СуммаОтгрузки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаявленияОВвозеТоваровПолученного = Новый Структура;
	ПараметрыЗаявленияОВвозеТоваровПолученного.Вставить("ЗаявлениеОВвозеТоваровПолученное", Объект.Ссылка);
	ПараметрыЗаявленияОВвозеТоваровПолученного.Вставить("Основания", Новый Массив);
	
	Для Каждого Документ Из Объект.ДокументыОтгрузки Цикл
		ПараметрыЗаявленияОВвозеТоваровПолученного.Основания.Добавить(Документ.ДокументОтгрузки);
	КонецЦикла;

	Оповестить("Запись_ЗаявлениеОВвозеТоваровПолученное", ПараметрыЗаявленияОВвозеТоваровПолученного);
	СуммыОтгрузок();
	УправлениеФормой(ЭтотОбъект);
	ИзменениеДокументовОтгрузки = Ложь;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения

	ПодготовитьФормуНаСервере(Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ИзменениеДокументовОтгрузки Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзменениеДокументовОтгрузки", Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура КодПричиныПриИзменении(Элемент)
	
	Если Объект.КодПричины <> "5" Тогда
		Объект.ИзменениеЦены = '00010101';
	КонецЕсли;
	
	Если Объект.КодПричины = "1"
		ИЛИ НЕ ЗначениеЗаполнено(Объект.КодПричины) Тогда
		
		ОчиститьРанееПредставленноеЗаявление();
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	СуммыОтгрузок();
	
КонецПроцедуры

&НаКлиенте
Процедура РанееПредставленноеЗаявлениеПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьСообщения();
	Если ЗначениеЗаполнено(Объект.РанееПредставленноеЗаявление) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОткрытьИзменитьРанееПредставленноеЗаявление",
					ЭтотОбъект,
					Новый Структура("Заявление", Объект.РанееПредставленноеЗаявление));
		
		ПоказатьВыборИзМеню(Оповещение, СписокДействий, Элемент);
		
	Иначе
		
		ЗаполнениеЗаявленияСогласноПричине();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОтгрузки

&НаКлиенте
Процедура ДокументыОтгрузкиДокументОтгрузкиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				НСтр("ru = 'Организация'"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.Организация", Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				НСтр("ru = 'Контрагент'"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.Контрагент", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Выбор типа данных будет осуществляться с помощью метода списка значений
	// Для обработки выбора типа используется описание оповещения
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораТипаДанных", ЭтотОбъект);
	
	СписокТиповДокументовОтгрузки.ПоказатьВыборЭлемента(Оповещение, НСтр("ru='Выбор типа данных'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОтгрузкиДокументОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДанныеОтгрузки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОтгрузкиПослеУдаления(Элемент)
	ИзменениеДокументовОтгрузки = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОтгрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Элементы.ДокументыОтгрузкиДокументОтгрузки.ТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОтгрузкиПередУдалением(Элемент, Отказ)
	Отказ = Элементы.ДокументыОтгрузкиДокументОтгрузки.ТолькоПросмотр
			И ЗначениеЗаполнено(Объект.РанееПредставленноеЗаявление);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОтгрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ДокументыОтгрузкиДокументОтгрузки.ТолькоПросмотр Тогда
		ТекущаяСтрока = Элементы.ДокументыОтгрузки.ТекущиеДанные;
		Если Поле.Имя = "ДокументыОтгрузкиДокументОтгрузки"
			И ТекущаяСтрока <> Неопределено 
			И ЗначениеЗаполнено(ТекущаяСтрока.ДокументОтгрузки) Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(Неопределено, ТекущаяСтрока.ДокументОтгрузки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте

Процедура УстановитьСнятьПометкуНаУдаление(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВопросОПометкеУдаленияЗавершение", ЭтотОбъект);
	Если Объект.ПометкаУдаления Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru='Снять с ""%1"" пометку удаления?'"), Объект.Ссылка);
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru='Пометить ""%1"" на удаление?'"), Объект.Ссылка);
	КонецЕсли;

	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// ИзмениеЦены

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИзменениеЦены");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ИзменениеЦены", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПометкеУдаленияЗавершение(Результат, ДополнительныеСвойства) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Объект.ПометкаУдаления Тогда
			Объект.ПометкаУдаления = Ложь;
		Иначе
			Объект.ПометкаУдаления = Истина;
		КонецЕсли;
		
		ПараметрыЗаписи = Новый Структура ("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
		Записать(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ЗаполнитьСуммыОтгрузок = Ложь)
	
	Если СписокДействий.Количество() = 0 Тогда
		СписокДействий.Добавить("Открыть");
		СписокДействий.Добавить("Изменить");
	КонецЕсли;
	
	Типы = Метаданные.Документы.ЗаявлениеОВвозеТоваровПолученное.ТабличныеЧасти.ДокументыОтгрузки.Реквизиты.ДокументОтгрузки.Тип.Типы();
	
	Для каждого Тип Из Типы Цикл
		СписокТиповДокументовОтгрузки.Добавить(Тип);
	КонецЦикла;
	
	СписокНалогообложенийНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт);
	СписокНалогообложенийНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров);
	СписокНалогообложенийНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг);
	
	ПредставлениеОтметкиЗаявления();
	
	Если ЗаполнитьСуммыОтгрузок Тогда
		СуммыОтгрузок();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ДокументыОтгрузкиСуммаПоЗаявлению.Заголовок = НСтр("ru = 'Сумма по заявлению'");
	
	Если Объект.КодПричины = "4" Тогда
		Элементы.РанееПредставленноеЗаявлениеПредставление.Видимость = Истина;
		Элементы.ИзменениеЦены.Видимость = Ложь;
		Элементы.ДокументыОтгрузкиДокументОтгрузки.ТолькоПросмотр = Ложь;
	ИначеЕсли Объект.КодПричины = "6" Тогда
		Элементы.РанееПредставленноеЗаявлениеПредставление.Видимость = Истина;
		Элементы.ИзменениеЦены.Видимость = Ложь;
		Элементы.ДокументыОтгрузкиДокументОтгрузки.ТолькоПросмотр = Истина;
	ИначеЕсли Объект.КодПричины = "5" Тогда
		Элементы.РанееПредставленноеЗаявлениеПредставление.Видимость = Истина;
		Элементы.ИзменениеЦены.Видимость = Истина;
		Элементы.ДокументыОтгрузкиСуммаПоЗаявлению.Заголовок = НСтр("ru = 'Сумма увеличения стоимости'");
		Элементы.ДокументыОтгрузкиДокументОтгрузки.ТолькоПросмотр = Истина;
	Иначе
		Элементы.РанееПредставленноеЗаявлениеПредставление.Видимость = Ложь;
		Элементы.ИзменениеЦены .Видимость = Ложь;
		Элементы.ДокументыОтгрузкиДокументОтгрузки.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Элементы.ФормаУстановитьСнятьПометкуНаУдаление.Доступность = ЗначениеЗаполнено(Форма.Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОрганизацииКонтрагента(ИмяРеквизита, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ДокументыОтгрузки.Количество() > 0 И ВыбранноеЗначение <> Объект[ИмяРеквизита] Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура("ИмяРеквизита, ВыбранноеЗначение", ИмяРеквизита, ВыбранноеЗначение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru = 'Табличная часть документа будет очищена. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ОтветНаВопрос = РезультатВопроса;
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Объект[ДополнительныеПараметры.ИмяРеквизита] = ДополнительныеПараметры.ВыбранноеЗначение;
		Объект.ДокументыОтгрузки.Очистить();
		ОчиститьРанееПредставленноеЗаявление();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРанееПредставленноеЗаявление()
	Объект.РанееПредставленноеЗаявление = ПредопределенноеЗначение("Документ.ЗаявлениеОВвозеТоваровПолученное.ПустаяСсылка");
		
		РанееПредставленноеЗаявлениеПредставление = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Выбор ранее представленного заявления'"), ,
				WebЦвета.Кирпичный, ,
				"ВыбратьРанееПредставленноеЗаявление");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРанееПредставленноеЗаявление()
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект" , ЕстьОшибкиЗаполнения);
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПараметрыРанееПредставленногоЗаявления();
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьРанееПредставленноеЗаявлениеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ЗаявлениеОВвозеТоваровПолученное.Форма.ФормаВыбора",
		СтруктураПараметров,
		ЭтотОбъект, , , ,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРанееПредставленноеЗаявлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
			
		Если Объект.РанееПредставленноеЗаявление <> Результат Тогда
			Объект.РанееПредставленноеЗаявление = Результат;
			ПредставлениеОтметкиЗаявления();
		КонецЕсли;
		
		Если Объект.КодПричины = "5"
			ИЛИ Объект.КодПричины = "6" Тогда
			ЗаполнитьДокументыОтгрузкиПоРанееПредставленномуЗаявлению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыРанееПредставленногоЗаявления()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаявлениеОВвозеПолученное", Объект.Ссылка);
	СтруктураПараметров.Вставить("Организация",               Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                Объект.Контрагент);
	СтруктураПараметров.Вставить("ТолькоПросмотр",            ТолькоПросмотр);
	СтруктураПараметров.Вставить("Проведен",                  Истина);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьИзменитьРанееПредставленноеЗаявление(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Значение = "Открыть" Тогда
			
			ПоказатьЗначение(, ДополнительныеПараметры.Заявление);
			
		ИначеЕсли Результат.Значение = "Изменить" Тогда
			
			ЗаполнениеЗаявленияСогласноПричине();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗаявленияСогласноПричине()
	Если Объект.ДокументыОтгрузки.Количество() > 0
		И (Объект.КодПричины = "5"
			ИЛИ Объект.КодПричины = "6") Тогда
		
		ТекстВопроса = НСтр("ru='При частичном возврате или корректировки цены товаров данные в списке ""Документы отгрузки"" подставляются из ранее зарегистрированного заявления.
			|Перезаполнить данные по документам отгрузки?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДанныеПоОтгрузкамЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		ВыбратьРанееПредставленноеЗаявление();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДанныеПоОтгрузкамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыбратьРанееПредставленноеЗаявление();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПредставлениеОтметкиЗаявления()
	
	Если ЗначениеЗаполнено(Объект.РанееПредставленноеЗаявление) Тогда
		РанееПредставленноеЗаявлениеПредставление = 
			Документы.ЗаявлениеОВвозеТоваровПолученное.ПредставлениеОтметкиЗаявления(
				Объект.РанееПредставленноеЗаявление);
	Иначе
		РанееПредставленноеЗаявлениеПредставление = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Выбор ранее представленного заявления'"), ,
				WebЦвета.Кирпичный, ,
				"ВыбратьРанееПредставленноеЗаявление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТипаДанных(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ИмяОткрываемойФормы = "";
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбораДокументовОтгрузки(ЭтотОбъект, ВыбранныйЭлемент.Значение));
		
		Оповещение = Новый ОписаниеОповещения("ВвестиДокументОснованиеЗавершение", ЭтотОбъект);
		
		ИмяОткрываемойФормы = ИмяФормыВыбораДокументаОтгрузки(ВыбранныйЭлемент.Значение);
		
		Если НЕ ЗначениеЗаполнено(ИмяОткрываемойФормы) Тогда
			
			ОчиститьСообщения();
			Текст = СтрШаблон(НСтр("ru = 'Не определена форма выбора для документа отгрузки типа %1.'"), ВыбранныйЭлемент.Значение);
		
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст, ЭтотОбъект);
			Возврат;
			
		КонецЕсли;
		
		ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОтбораДокументовОтгрузки(Форма, ТипДокумента)
	
	Объект = Форма.Объект;
	
	ЗначениеОтбора = Новый Структура();
	
	ЗначениеОтбора.Вставить("Организация", Объект.Организация);
	
	Если ТипДокумента <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗначениеОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ЗначениеЗаполнено(Форма.Объект.Контрагент) Тогда
		ЗначениеОтбора.Вставить("КомиссионерИлиКлиент", Объект.Контрагент);
	КонецЕсли;
	
	ЗначениеОтбора.Вставить("НалогообложениеНДС", Форма.СписокНалогообложенийНДС);
	
	Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Хозоперации = Новый СписокЗначений;
		Хозоперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
		Хозоперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияЧерезКомиссионера"));
		ЗначениеОтбора.Вставить("ХозяйственнаяОперация", Хозоперации);
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		Хозоперации = Новый СписокЗначений;
		Хозоперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов"));
		Хозоперации.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
		ЗначениеОтбора.Вставить("ХозяйственнаяОперация", Хозоперации);
	КонецЕсли;
	
	Возврат ЗначениеОтбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяФормыВыбораДокументаОтгрузки(ТипДокумента)
	
	Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат "Документ.РеализацияТоваровУслуг.ФормаВыбора";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		Возврат "Документ.РеализацияУслугПрочихАктивов.ФормаВыбора";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		Возврат "Документ.ПервичныйДокумент.ФормаВыбора";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ВвестиДокументОснованиеЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеОтгрузки(ЭтотОбъект, РезультатВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеОтгрузки(Форма, ДокументОтгрузки = Неопределено)
	
	ТекущиеДанные = Форма.Элементы.ДокументыОтгрузки.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДокументОтгрузки) Тогда
			ТекущиеДанные.ДокументОтгрузки = ДокументОтгрузки;
		КонецЕсли;
		
		ТекДанные = Новый Структура;
		ТекДанные.Вставить("Валюта", ТекущиеДанные.Валюта);
		ТекДанные.Вставить("ДокументОтгрузки", ТекущиеДанные.ДокументОтгрузки);
		ТекДанные.Вставить("СуммаОтгрузки", ТекущиеДанные.СуммаПоЗаявлению);
		ТекДанные.Вставить("СуммаПоЗаявлению", ТекущиеДанные.СуммаПоЗаявлению);
		
		ДанныеПоДокументуОтгрузки(ТекДанные, Форма.Объект.Дата, Форма.Объект.КодПричины);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ТекДанные);
		
		Форма.ИзменениеДокументовОтгрузки = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеПоДокументуОтгрузки(ТекущиеДанные, Дата, КодПричиныЗаявления)
	
	ДокументОтгрузки = ТекущиеДанные.ДокументОтгрузки;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтгрузки, "Валюта, СуммаДокумента");
	ТекущиеДанные.Валюта = РеквизитыДокумента.Валюта;
	
	Если ЗначениеЗаполнено(РеквизитыДокумента.СуммаДокумента) Тогда
		ТекущиеДанные.СуммаОтгрузки = РеквизитыДокумента.СуммаДокумента;
	Иначе
		ТекущиеДанные.СуммаОтгрузки = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОтгрузки) Тогда
		
		Если ТипЗнч(ТекущиеДанные.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			Тогда
			ТекущиеДанные.СуммаОтгрузки = Документы.ЗаявлениеОВвозеТоваровПолученное.СуммаОтгрузкиТоваров(
				ДокументОтгрузки, Дата, КодПричиныЗаявления);
		КонецЕсли;
		
		ТекущиеДанные.СуммаПоЗаявлению = Макс(0, ТекущиеДанные.СуммаОтгрузки -
			Документы.ЗаявлениеОВвозеТоваровПолученное.ПодтвержденнаяЗаявлениямиСуммаНулевойСтавки(ДокументОтгрузки, Дата));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СуммыОтгрузок()
	
	// Для реализации товаров и услуг надо из другого реестра вычислять данные
	Отгрузки = Новый Массив;
	Для каждого Отгрузка Из Объект.ДокументыОтгрузки Цикл
		Отгрузки.Добавить(Отгрузка.ДокументОтгрузки);
	КонецЦикла;
	
	ТипыЗапасов = Новый Массив;
	ТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.Услуга);
	ТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.Работа);
	ТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.АгентскаяУслуга);
	
	КодПричиныЗаявления = Объект.КодПричины;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ТипыЗапасов", ТипыЗапасов);
	Запрос.УстановитьПараметр("Отгрузки", Отгрузки);
	
	// Если подается завление на корректировку увеличения стоимости или частичный возврат
	Если КодПричиныЗаявления = "5"
		ИЛИ КодПричиныЗаявления = "6" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеестрДокументов.Ссылка КАК ДокументОтгрузки,
		|	РеестрДокументов.Сумма КАК СуммаОтгрузки
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|ГДЕ
		|	РеестрДокументов.Ссылка В(&Отгрузки)
		|	И (РеестрДокументов.Ссылка ССЫЛКА Документ.РеализацияУслугПрочихАктивов
		|			ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ПервичныйДокумент)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыручкаИСебестоимостьПродаж.Регистратор,
		|	ЕСТЬNULL(СУММА(ВыручкаИСебестоимостьПродаж.СуммаБезНДСВВалютеДокумента), 0)
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
		|ГДЕ
		|	ВыручкаИСебестоимостьПродаж.Регистратор В(&Отгрузки)
		|	И (ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НЕ ВыручкаИСебестоимостьПродаж.ТипЗапасов В (&ТипыЗапасов)
		|	)
		|	И ВыручкаИСебестоимостьПродаж.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыручкаИСебестоимостьПродаж.Регистратор";
	
	Иначе
		// Если подается первичное заявление или замен ранее представленного
		Запрос.Параметры.Вставить("Период", КонецДня(Объект.Дата));
		Запрос.Текст =
		"
		|ВЫБРАТЬ
		|	РеестрДокументов.Ссылка КАК ДокументОтгрузки,
		|	РеестрДокументов.Сумма КАК СуммаОтгрузки
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|ГДЕ
		|	РеестрДокументов.Ссылка В (&Отгрузки)
		|	И (РеестрДокументов.Ссылка ССЫЛКА Документ.РеализацияУслугПрочихАктивов
		|			ИЛИ РеестрДокументов.Ссылка ССЫЛКА Документ.ПервичныйДокумент)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыручкаИСебестоимостьПродаж.ЗаказКлиента КАК ДокументОтгрузки,
		|	ЕСТЬNULL(СУММА(ВыручкаИСебестоимостьПродаж.СуммаБезНДСВВалютеДокумента), 0) КАК СуммаОтгрузки
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
		|ГДЕ
		|	ВыручкаИСебестоимостьПродаж.ЗаказКлиента В(&Отгрузки)
		|	И ВыручкаИСебестоимостьПродаж.ЗаказКлиента ССЫЛКА Документ.РеализацияТоваровУслуг
		|	И НЕ ВыручкаИСебестоимостьПродаж.ТипЗапасов В (&ТипыЗапасов)
		|	И ВыручкаИСебестоимостьПродаж.Период <= &Период
		|	И ВыручкаИСебестоимостьПродаж.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыручкаИСебестоимостьПродаж.ЗаказКлиента";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("ДокументОтгрузки", Выборка.ДокументОтгрузки);
		РезультатПоиска = Объект.ДокументыОтгрузки.НайтиСтроки(Отбор);
		Для каждого СтрокаТЧ Из РезультатПоиска Цикл
			СтрокаТЧ.СуммаОтгрузки = Выборка.СуммаОтгрузки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыОтгрузкиПоРанееПредставленномуЗаявлению()
	ТипыЗапасов = Новый Массив;
	ТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.Услуга);
	ТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.Работа);
	ТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.АгентскаяУслуга);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.РанееПредставленноеЗаявление);
	Запрос.Параметры.Вставить("ТипыЗапасов", ТипыЗапасов);
	
	КодПричиныЗаявления = Объект.КодПричины;
	
	// Если подается завление на корректировку увеличения стоимости или частичный возврат
	Если КодПричиныЗаявления = "5"
		ИЛИ КодПричиныЗаявления = "6" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.Валюта КАК Валюта,
		|	ЕСТЬNULL(РеестрДокументов.Сумма, 0) КАК СуммаОтгрузки
		|ПОМЕСТИТЬ ДокументыОтгрузки
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваровПолученное.ДокументыОтгрузки КАК ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.ДокументОтгрузки = РеестрДокументов.Ссылка
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВыручкаИСебестоимостьПродаж.СуммаБезНДСВВалютеДокумента), 0) КАК СуммаОтгрузки,
		|	ДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ДокументыОтгрузки.Валюта КАК Валюта
		|ИЗ
		|	ДокументыОтгрузки КАК ДокументыОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
		|		ПО ДокументыОтгрузки.ДокументОтгрузки = ВыручкаИСебестоимостьПродаж.Регистратор
		|ГДЕ
		|	(ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И НЕ ВыручкаИСебестоимостьПродаж.ТипЗапасов В (&ТипыЗапасов)
		|	)
		|	И ВыручкаИСебестоимостьПродаж.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыОтгрузки.ДокументОтгрузки,
		|	ДокументыОтгрузки.Валюта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументыОтгрузки.ДокументОтгрузки,
		|	ДокументыОтгрузки.Валюта,
		|	ДокументыОтгрузки.СуммаОтгрузки
		|ИЗ
		|	ДокументыОтгрузки КАК ДокументыОтгрузки
		|ГДЕ
		|	(ДокументыОтгрузки.ДокументОтгрузки ССЫЛКА Документ.РеализацияУслугПрочихАктивов
		|			ИЛИ ДокументыОтгрузки.ДокументОтгрузки ССЫЛКА Документ.ПервичныйДокумент)";
	
	Иначе
		// Если подается взамен ранее представленного
		Запрос.Параметры.Вставить("Период", КонецДня(Объект.Дата));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.Валюта КАК Валюта,
		|	ЕСТЬNULL(РеестрДокументов.Сумма, 0) КАК СуммаОтгрузки
		|ПОМЕСТИТЬ ДокументыОтгрузки
		|ИЗ
		|	Документ.ЗаявлениеОВвозеТоваровПолученное.ДокументыОтгрузки КАК ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.ДокументОтгрузки = РеестрДокументов.Ссылка
		|ГДЕ
		|	ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВыручкаИСебестоимостьПродаж.СуммаБезНДСВВалютеДокумента), 0) КАК СуммаОтгрузки,
		|	ДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
		|	ДокументыОтгрузки.Валюта КАК Валюта
		|ИЗ
		|	ДокументыОтгрузки КАК ДокументыОтгрузки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
		|		ПО ДокументыОтгрузки.ДокументОтгрузки = ВыручкаИСебестоимостьПродаж.ЗаказКлиента
		|ГДЕ
		|	ВыручкаИСебестоимостьПродаж.ЗаказКлиента ССЫЛКА Документ.РеализацияТоваровУслуг
		|	И НЕ ВыручкаИСебестоимостьПродаж.ТипЗапасов В (&ТипыЗапасов)
		|	И ВыручкаИСебестоимостьПродаж.Период <= &Период
		|	И ВыручкаИСебестоимостьПродаж.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыОтгрузки.ДокументОтгрузки,
		|	ДокументыОтгрузки.Валюта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументыОтгрузки.ДокументОтгрузки,
		|	ДокументыОтгрузки.Валюта,
		|	ДокументыОтгрузки.СуммаОтгрузки
		|ИЗ
		|	ДокументыОтгрузки КАК ДокументыОтгрузки
		|ГДЕ
		|	(ДокументыОтгрузки.ДокументОтгрузки ССЫЛКА Документ.РеализацияУслугПрочихАктивов
		|			ИЛИ ДокументыОтгрузки.ДокументОтгрузки ССЫЛКА Документ.ПервичныйДокумент)";
	КонецЕсли;
	
	Объект.ДокументыОтгрузки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	СуммыОтгрузок();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	ОбработкаВыбораОрганизацииКонтрагента("Организация", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	ОбработкаВыбораОрганизацииКонтрагента("Контрагент", ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти