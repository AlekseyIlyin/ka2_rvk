#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СтандартныеПодсистемы_УправлениеДоступом

// Позволяет указать объекты метаданных, для которых задана логика ограничения доступа к данным.
// Параметры:
//  Список - ОбъектМетаданных - список, для которого нужно вернуть текст ограничения.
//                              В процедуре ПриЗаполненииСписковСОграничениемДоступа нужно
//                              указать для списка значение Ложь, иначе вызова не будет.
//
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

#КонецОбласти

// Формирует форматированную строку заявлений о ввозе товаров от покупателей из ЕАЭС для форм документов отгрузки,
// на основании которых оформляется заявления.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения:
//  	* Объект - ДанныеФормыСтруктура:
//  		** Ссылка - ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.РеализацияУслугПрочихАктивов,
//						ДокументСсылка.ОтчетДавальцу2_5  - документ отгрузки
// Возвращаемое значение:
//  ФорматированнаяСтрока
//
Функция ТекстЗаявленияОВвозеТоваровОтПокупателя(Форма) Экспорт
	
	ЧастиФорматированнойСтроки = Новый Массив;
	Объект = Форма.Объект;
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьПродажиНаЭкспортНесырьевыхТоваров")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг"))
		ИЛИ (НЕ ЗначениеЗаполнено(Объект.Ссылка)
			И НЕ ПравоДоступа("Добавление", Метаданные.Документы.ЗаявлениеОВвозеТоваровПолученное))
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Документы.ЗаявлениеОВвозеТоваровПолученное) Тогда
		
		Возврат Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки);
		
	КонецЕсли;
	
	Если НеобходимоОформитьЗаявлениеОВвозеТоваровПолученное(Объект.Ссылка) Тогда
		Выборка = ПараметрыФормированияЗаявленияОВвозеТоваровПолученного(Объект.Ссылка);
		КоличествоЗаявлений = Выборка.Количество();
		Если КоличествоЗаявлений = 0 Тогда
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Оформить заявление о ввозе от покупателя'"),,,,"ОформитьЗаявлениеОВвозеПолученное"));
		ИначеЕсли КоличествоЗаявлений = 1 Тогда
			Если Выборка.Следующий() Тогда
				МассивПодстрок = Новый Массив;
				МассивПодстрок.Добавить(СтрШаблон(НСтр("ru='Отметка о регистрации заявления %1 от %2'"),
					Выборка.НомерОтметкиОРегистрацииЗаявления,
					Формат(Выборка.ДатаОтметкиОРегистрацииЗаявления, "ДЛФ=D")));
				
				Если НЕ Выборка.Проведен Тогда
					МассивПодстрок.Добавить(НСтр("ru='(не проведен)'"));
				КонецЕсли;
				
				ПредставлениеЗаявления = СтрСоединить(МассивПодстрок, " ");
				
				ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(
					ПредставлениеЗаявления
					,,,,
					ПолучитьНавигационнуюСсылку(Выборка.Ссылка)));
			КонецЕсли;
		Иначе
			Форма.СписокЗаявленийОтПокупателя.Очистить();
			Пока Выборка.Следующий() Цикл
				МассивПодстрок = Новый Массив;
				МассивПодстрок.Добавить(СтрШаблон(НСтр("ru='Заявление с отметкой о регистрации %1 от %2'"),
					Выборка.НомерОтметкиОРегистрацииЗаявления,
					Формат(Выборка.ДатаОтметкиОРегистрацииЗаявления, "ДЛФ=D")));
				
				Если НЕ Выборка.Проведен Тогда
					МассивПодстрок.Добавить(НСтр("ru='(не проведен)'"));
				КонецЕсли;
				
				ПредставлениеЗаявления = СтрСоединить(МассивПодстрок, " ");
					
				Форма.СписокЗаявленийОтПокупателя.Добавить(Выборка.Ссылка, ПредставлениеЗаявления);
			КонецЦикла;
			ПредставлениеКоличествоДокументов = ПолучитьСклоненияСтрокиПоЧислу("документ", КоличествоЗаявлений,
				"","ЧС=Количественное", "ПД=Именительный; ПЧ=Число");
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(
				СтрШаблон(НСтр("ru = 'Заявление о ввозе от покупателя из ЕАЭС (%1)'"),
					ПредставлениеКоличествоДокументов[0])
				,,,,
				"ВыборИзСпискаЗаявленийОВвозеПолученных"));
		КонецЕсли;
	КонецЕсли;

	Возврат Новый ФорматированнаяСтрока(ЧастиФорматированнойСтроки);
	
КонецФункции

#КонецОбласти

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("УчетНДС");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявлениеОВвозеТоваровПолученное") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Формирует представление номера и даты отметки о регистрации заявления о ввозе товаров от покупателя из страны ЕАЭС
// в налоговом органе своей страны.
//
// Параметры:
//  ЗаявлениеОВвозеТоваровОтПокупателяИзЕАЭС - ДокументСсылка.ЗаявлениеОВвозеТоваровПолученное
//
// Возвращаемое значение:
//	ФорматированнаяСтрока - Представление номера и даты отметки о регистрации заявления о ввозе от покупателя из страны ЕАЭС
//           в налоговом органе своей страны.
//
Функция ПредставлениеОтметкиЗаявления(ЗаявлениеОВвозеТоваровОтПокупателяИзЕАЭС) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗаявлениеОВвозеТоваровОтПокупателяИзЕАЭС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаРеквизитов = "НомерОтметкиОРегистрацииЗаявления, ДатаОтметкиОРегистрацииЗаявления";
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявлениеОВвозеТоваровОтПокупателяИзЕАЭС, ИменаРеквизитов);
	
	Возврат Новый ФорматированнаяСтрока(
				СтрШаблон(НСтр("ru = 'Отметка о регистрации заявления %1 от %2'"), 
						РеквизитыКонтрагента.НомерОтметкиОРегистрацииЗаявления,
						Формат (РеквизитыКонтрагента.ДатаОтметкиОРегистрацииЗаявления,"ДЛФ=Д"))
						, , ЦветаСтиля.ГиперссылкаЦвет, ,
				ПолучитьНавигационнуюСсылку(ЗаявлениеОВвозеТоваровОтПокупателяИзЕАЭС));
	
КонецФункции

// Функция возвращает по документу отгрузки сумму отгрузки, по которой уже подтверждена правомерность использования
// ставки НДС 0% по заявлениям о ввозе товаров от покупателей из страны ЕАЭС.
//
// Параметры:
//  ДокументОтгрузки - ДокументСсылка.ПервичныйДокумент,ДокументСсылка.РеализацияУслугПрочихАктивов, 
//                     ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.ОтчетДавальцу2_5 - Документы отгрузок в ЕАЭС.
//  Период           - Дата - Дата, на которую необходимо получить сумму по заявлениям о ввозе товаров от покупателя.
// Возвращаемое значение:
//	Число - Сумма подтвержденной отгрузки в ЕАЭС по ставки НДС 0%.
//
Функция ПодтвержденнаяЗаявлениямиСуммаНулевойСтавки(ДокументОтгрузки, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.СуммаПоЗаявлению), 0) КАК СуммаПоЗаявлениям
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваровПолученное.ДокументыОтгрузки КАК ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.ДокументОтгрузки = &ДокументОтгрузки
	|	И ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.Ссылка.Дата <= &Период
	|	И ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.Ссылка.Проведен";
	
	Запрос.Параметры.Вставить("ДокументОтгрузки", ДокументОтгрузки);
	Запрос.Параметры.Вставить("Период", КонецДня(Период));
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаПоЗаявлениям;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Функция возвращает по документу сумму отгруки товаров с учетом корректировок и возвратов.
//
// Параметры:
//  ДокументОтгрузки - ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.ОтчетДавальцу2_5 - Документ отгрузки в ЕАЭС.
//  Период           - Дата - Дата, на которую необходимо получить сумму отгрузки товаров.
//  КодПричиныЗаявления - Строка - код причины возникновения заявления.
//
// Возвращаемое значение:
//	Число - Сумма товар отгрузки.
//
Функция СуммаОтгрузкиТоваров(ДокументОтгрузки, Период, КодПричиныЗаявления) Экспорт
	
	ТипыЗапасов = Новый Массив;
	ТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.Услуга);
	ТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.Работа);
	ТипыЗапасов.Добавить(Перечисления.ТипыЗапасов.АгентскаяУслуга);
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ДокументОтгрузки", ДокументОтгрузки);
	Запрос.Параметры.Вставить("ТипыЗапасов", ТипыЗапасов);
	
	// Если подается первичное завление или взамен ранее представленного
	Если КодПричиныЗаявления = "1"
		ИЛИ КодПричиныЗаявления = "4" Тогда
		
		Запрос.Параметры.Вставить("Период", КонецДня(Период));
		
		Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ВыручкаИСебестоимостьПродаж.СуммаБезНДСВВалютеДокумента), 0) КАК СуммаБезНДСВВалютеДокумента
			|ИЗ
			|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
			|ГДЕ
			|	ВыручкаИСебестоимостьПродаж.ЗаказКлиента = &ДокументОтгрузки
			|	И ВыручкаИСебестоимостьПродаж.Период <= &Период
			|	И НЕ ВыручкаИСебестоимостьПродаж.ТипЗапасов В (&ТипыЗапасов)
			|	И ВыручкаИСебестоимостьПродаж.Активность";
		КонецЕсли;
		
	Иначе
		// Если подается завление на корректировку увеличения стоимости или частичный возврат
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВыручкаИСебестоимостьПродаж.СуммаБезНДСВВалютеДокумента), 0) КАК СуммаБезНДСВВалютеДокумента
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
		|ГДЕ
		|	ВыручкаИСебестоимостьПродаж.Регистратор = &ДокументОтгрузки
		|	И (ВыручкаИСебестоимостьПродаж.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|	И НЕ ВыручкаИСебестоимостьПродаж.ТипЗапасов В (&ТипыЗапасов)
		|	)
		|	И ВыручкаИСебестоимостьПродаж.Активность";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаБезНДСВВалютеДокумента;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает количество счетов-фактур к оформлению.
//
// Параметры:
//	Параметры - Структура:
//	* МассивОрганизаций - Массив Из СправочникСсылка.Организации - массив организаций.
//	* КонецПериода - Дата - ограничение сверху на дату документа-основания.
//	* БезОграниченияПериода - Булево - не ограничивать по дате документа-основания
//
// Возвращаемое значение:
//	Число - количество счетов-фактур к оформлению.
//
Функция ЕстьСчетаФактурыКОформлению(Параметры) Экспорт
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение);
	Состояния.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.МассивОрганизаций);
	Запрос.УстановитьПараметр("КонецПериода",      Параметры.КонецПериода);
	Запрос.УстановитьПараметр("Состояния",         Состояния);
	Запрос.УстановитьПараметр("УсловиеОтбора",     Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
	|		ПО Контрагенты.СтранаРегистрации = СтраныМира.Ссылка
	|ГДЕ
	|	СтраныМира.Ссылка <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И СтраныМира.УчастникЕАЭС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КРегистрации.ДокументРеализации КАК ДокументРеализации,
	|	0 КАК СуммаДокумента
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	РегистрСведений.НДССостояниеРеализации0.СрезПоследних(
	|			&КонецПериода,
	|			Контрагент В
	|					(ВЫБРАТЬ
	|						Контрагенты.Ссылка
	|					ИЗ
	|						Контрагенты)
	|				И Состояние В (&Состояния)
	|				И &КонецПериода <= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Период, ДЕНЬ), ГОД, 3)
	|				И &УсловиеОтбораНДССостояниеРеализации0) КАК КРегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.Ссылка,
	|	ПервичныйДокумент.СуммаДокумента
	|ИЗ
	|	Документ.ПервичныйДокумент КАК ПервичныйДокумент
	|ГДЕ
	|	ПервичныйДокумент.Проведен
	|	И ПервичныйДокумент.НалогообложениеНДС В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт), ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров), ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|	И ПервичныйДокумент.Контрагент В
	|			(ВЫБРАТЬ
	|				Контрагенты.Ссылка
	|			ИЗ
	|				Контрагенты)
	|	И ПервичныйДокумент.Дата <= &КонецПериода
	|	И &КонецПериода <= ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПервичныйДокумент.Дата, ДЕНЬ), ГОД, 3)
	|	И ПервичныйДокумент.ТипПервичногоДокумента = Значение(Перечисление.ТипыПервичныхДокументов.РеализацияКлиенту)
	|	И &УсловиеОтбораПервичныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Контрагенты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОтгрузки.ДокументРеализации КАК ДокументРеализации,
	|	СУММА(ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.СуммаБезНДСВВалютеДокумента, 0)) КАК СуммаОтгрузки
	|ПОМЕСТИТЬ ДокументыОтгрузкиСумма
	|ИЗ
	|	ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|		ПО ДокументыОтгрузки.ДокументРеализации = ВыручкаИСебестоимостьПродаж.ЗаказКлиента
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.НалогообложениеНДС В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт), ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров), ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг))
	|	И ВыручкаИСебестоимостьПродаж.Период <= &КонецПериода
	|	И ВыручкаИСебестоимостьПродаж.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияЧерезКомиссионера), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноРеализации))
	|	И ДокументыОтгрузки.ДокументРеализации ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И НЕ ВыручкаИСебестоимостьПродаж.ТипЗапасов В (ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Работа), ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга))
	|	И ВыручкаИСебестоимостьПродаж.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОтгрузки.ДокументРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтгрузки.ДокументРеализации,
	|	СУММА(ЕСТЬNULL(ДвиженияКонтрагентДоходыРасходы.СуммаБезНДСВВалюте, 0))
	|ИЗ
	|	ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДвиженияКонтрагентДоходыРасходы
	|		ПО ДокументыОтгрузки.ДокументРеализации = ДвиженияКонтрагентДоходыРасходы.Регистратор
	|ГДЕ
	|	ДокументыОтгрузки.ДокументРеализации ССЫЛКА Документ.РеализацияУслугПрочихАктивов
	|	И ДвиженияКонтрагентДоходыРасходы.Период <= &КонецПериода
	|	И НЕ ДвиженияКонтрагентДоходыРасходы.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияУслугПоАренде), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав))
	|	И ДвиженияКонтрагентДоходыРасходы.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОтгрузки.ДокументРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервичныйДокумент.ДокументРеализации,
	|	ПервичныйДокумент.СуммаДокумента
	|ИЗ
	|	ДокументыОтгрузки КАК ПервичныйДокумент
	|ГДЕ
	|	ПервичныйДокумент.ДокументРеализации ССЫЛКА Документ.ПервичныйДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОтгрузки.ДокументРеализации КАК ОформленныеОтгрузки,
	|	СУММА(ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.СуммаПоЗаявлению) КАК СуммаПоЗаявлению
	|ПОМЕСТИТЬ Оформленные
	|ИЗ
	|	ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваровПолученное.ДокументыОтгрузки КАК ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки
	|		ПО ДокументыОтгрузки.ДокументРеализации = ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.ДокументОтгрузки
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.Ссылка.Проведен
	|	И ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.Ссылка.Дата <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОтгрузки.ДокументРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОформленныеОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОтгрузкиСумма.ДокументРеализации КАК ДокументОтгрузки,
	|	ДокументыОтгрузкиСумма.СуммаОтгрузки КАК СуммаОтгрузки,
	|	ДокументыОтгрузкиСумма.СуммаОтгрузки - ЕСТЬNULL(Оформленные.СуммаПоЗаявлению, 0) КАК СуммаДляПодтверждения0
	|ПОМЕСТИТЬ КОформлению
	|ИЗ
	|	ДокументыОтгрузкиСумма КАК ДокументыОтгрузкиСумма
	|		ЛЕВОЕ СОЕДИНЕНИЕ Оформленные КАК Оформленные
	|		ПО ДокументыОтгрузкиСумма.ДокументРеализации = Оформленные.ОформленныеОтгрузки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СуммаДляПодтверждения0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Оформленные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыОтгрузкиСумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КОформлению.ДокументОтгрузки) КАК КоличествоЗаписей
	|ИЗ
	|	КОформлению КАК КОформлению
	|ГДЕ
	|	КОформлению.СуммаДляПодтверждения0 > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КОформлению";
	
	Если ЗначениеЗаполнено(Параметры.МассивОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораНДССостояниеРеализации0", "Организация В (&МассивОрганизаций)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОтбораПервичныйДокумент", "ПервичныйДокумент.Организация В (&МассивОрганизаций)");
		Запрос.УстановитьПараметр("МассивОрганизаций", Параметры.МассивОрганизаций);
	Иначе
		Запрос.УстановитьПараметр("УсловиеОтбораНДССостояниеРеализации0", Истина);
		Запрос.УстановитьПараметр("УсловиеОтбораПервичныйДокумент", Истина);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗаписей;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

#Область ФормированиеГиперссылкиВЖурналеДокументовНДС

// Возвращает текст гиперссылки перехода из журнала документов в рабочее место оформления.
//
// Параметры:
//  Параметры - Структура - параметры формирования текста гиперссылки.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока, Неопределено - текст гиперссылки перехода в рабочее место оформления передач.
//
Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ЗаявлениеОВвозеТоваровПолученное) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("МассивОрганизаций",?(ЗначениеЗаполнено(Параметры.Организация), 
											ОбщегоНазначенияУТКлиентСервер.Массив(Параметры.Организация),
											Неопределено));
	
	ТекстГиперссылки = НСтр("ru = 'Заявления о ввозе от покупателей'");
	
	Если ЕстьСчетаФактурыКОформлению(Параметры) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыРабочееМесто());
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыРабочееМесто());
	КонецЕсли;
	
КонецФункции

// Имя формы рабочее место.
// 
// Возвращаемое значение:
//  Строка - Имя формы рабочее место
//
Функция ИмяФормыРабочееМесто() Экспорт
	
	Возврат "Документ.ЗаявлениеОВвозеТоваровПолученное.Форма.ФормаРабочееМесто";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет по документу отгрузки необходимо ли оформление заявления о ввозе товаров от покупателя из ЕАЭС
//
// Параметры:
//  ДокументОтгрузки - ДокументСсылка - документ отгрузки
// Возвращаемое значение:
//  Булево - Истина, если по документу отгрузки необходимо оформлять заявление о ввозе товаров от покупателя из ЕАЭС
Функция НеобходимоОформитьЗаявлениеОВвозеТоваровПолученное(ДокументОтгрузки)
	
	Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьПродажиНаЭкспортНесырьевыхТоваров")
	ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(ДокументОтгрузки);
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		РеквизитыДокументаОтгрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтгрузки,
		"Дата, Контрагент, КлиентКонтрагент, ХозяйственнаяОперация, НалогообложениеНДС");
		
		Если РеквизитыДокументаОтгрузки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
			
			Контрагент = РеквизитыДокументаОтгрузки.Контрагент;
			
		ИначеЕсли РеквизитыДокументаОтгрузки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера Тогда
			
			Контрагент = РеквизитыДокументаОтгрузки.КлиентКонтрагент;
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		
		РеквизитыДокументаОтгрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтгрузки,
		"Дата, Контрагент, ХозяйственнаяОперация, НалогообложениеНДС");
		
		Если РеквизитыДокументаОтгрузки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов
			ИЛИ РеквизитыДокументаОтгрузки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
			
			Контрагент = РеквизитыДокументаОтгрузки.Контрагент;
			
		КонецЕсли;
		
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		
		РеквизитыДокументаОтгрузки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОтгрузки,
		"Дата, Контрагент, ТипПервичногоДокумента, НалогообложениеНДС");
		
		Если РеквизитыДокументаОтгрузки.ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
			
			Контрагент = РеквизитыДокументаОтгрузки.Контрагент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УчетНДСРФ.СтранаЯвляетсяЧленомТаможенногоСоюза(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "СтранаРегистрации"),
			РеквизитыДокументаОтгрузки.Дата)
		И (РеквизитыДокументаОтгрузки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
		ИЛИ РеквизитыДокументаОтгрузки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров
		ИЛИ РеквизитыДокументаОтгрузки.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет по документу отгрузки структуру параметры оформления гиперссылки заявлений о ввозе товаров от покупателя из ЕАЭС
//
// Параметры:
//  ДокументОтгрузки - ДокументСсылка - документ отгрузки
// Возвращаемое значение:
//  ВыборкаДанных - параметры для оформления гиперссылки заявлений о ввозе товаров от покупателя из ЕАЭС.
//   Поля выборки:
//    Ссылка - ДокументСсылка.ЗаявлениеОВвозеТоваровПолученное - заявление о ввозе товаров от покупателя из ЕАЭС.
//    НомерОтметкиОРегистрацииЗаявления - Строка - номер отметки о регистрации заявления в налоговом органе страны покупателя из ЕАЭС.
//    ДатаОтметкиОРегистрацииЗаявления - Дата - дата отметки о регистрации заявления в налоговом органе страны покупателя из ЕАЭС.
//    Проведен - Булево - признак проведения заявления о ввозе товаров от покупателя из ЕАЭС.
Функция ПараметрыФормированияЗаявленияОВвозеТоваровПолученного(ДокументОтгрузки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровПолученное.Ссылка КАК Ссылка,
	|	ЗаявлениеОВвозеТоваровПолученное.НомерОтметкиОРегистрацииЗаявления КАК НомерОтметкиОРегистрацииЗаявления,
	|	ЗаявлениеОВвозеТоваровПолученное.ДатаОтметкиОРегистрацииЗаявления КАК ДатаОтметкиОРегистрацииЗаявления,
	|	ЗаявлениеОВвозеТоваровПолученное.Проведен КАК Проведен
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваровПолученное КАК ЗаявлениеОВвозеТоваровПолученное
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеОВвозеТоваровПолученное.ДокументыОтгрузки КАК ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки
	|		ПО ЗаявлениеОВвозеТоваровПолученное.Ссылка = ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.Ссылка
	|ГДЕ
	|	НЕ ЗаявлениеОВвозеТоваровПолученное.ПометкаУдаления
	|	И ЗаявлениеОВвозеТоваровПолученноеДокументыОтгрузки.ДокументОтгрузки = &ДокументОтгрузки";
	
	Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Команда = БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаДокумента,ФормаСписка,ФормаВыбора";
	КонецЕсли;
	
КонецПроцедуры

// Добавляет команду создания документа "Таможенная декларация на экспорт".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
// Возвращаемое значение:
//  СтрокаТаблицыЗначений
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявлениеОВвозеТоваровПолученное) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаявлениеОВвозеТоваровПолученное.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "УчетНДСРФКлиент.ЗаявлениеОВвозеТоваровПолученноеНаОсновании";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаявлениеОВвозеТоваровПолученное);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПродажиНаЭкспортНесырьевыхТоваров, ИспользоватьПродажиНаЭкспортСырьевыхТоваровУслуг";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция СоздатьДокументНаОсновании(ПараметрыСоздания) Экспорт
	
	ЗаявлениеОВвозеТоваровПолученное = Документы.ЗаявлениеОВвозеТоваровПолученное.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ЗаявлениеОВвозеТоваровПолученное, ПараметрыСоздания);
	
	Документ = ЗаявлениеОВвозеТоваровПолученное.ДокументыОтгрузки.Добавить();
	Документ.ДокументОтгрузки = ПараметрыСоздания.ДокументОтгрузки;
	
	ЗаявлениеОВвозеТоваровПолученное.Записать(ПараметрыСоздания.РежимЗаписиДокумента);
	
	Возврат ЗаявлениеОВвозеТоваровПолученное.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ЗаявлениеОВвозеТоваровПолученное";
	
	ВЗапросеЕстьИсточник = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров,
										ТекстыЗапросаВременныхТаблиц);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров,
										ТекстыЗапросаВременныхТаблиц);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявлениеОВвозеТоваровПолученное.Ссылка КАК Ссылка,
	|	ЗаявлениеОВвозеТоваровПолученное.Дата КАК Дата,
	|	ЗаявлениеОВвозеТоваровПолученное.Организация КАК Организация,
	|	ЗаявлениеОВвозеТоваровПолученное.Организация.ВалютаРегламентированногоУчета КАК Валюта,
	|	ЗаявлениеОВвозеТоваровПолученное.Номер КАК Номер,
	|	ЗаявлениеОВвозеТоваровПолученное.НомерОтметкиОРегистрацииЗаявления КАК НомерОтметкиОРегистрацииЗаявления,
	|	ЗаявлениеОВвозеТоваровПолученное.ДатаОтметкиОРегистрацииЗаявления КАК ДатаОтметкиОРегистрацииЗаявления,
	|	ЗаявлениеОВвозеТоваровПолученное.КодПричины КАК КодПричины,
	|	ЗаявлениеОВвозеТоваровПолученное.ИзменениеЦены КАК ИзменениеЦены,
	|	ЗаявлениеОВвозеТоваровПолученное.РанееПредставленноеЗаявление КАК РанееПредставленноеЗаявление,
	|	ЗаявлениеОВвозеТоваровПолученное.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗаявлениеОВвозеТоваровПолученное.Автор КАК Автор,
	|	ЗаявлениеОВвозеТоваровПолученное.Комментарий КАК Комментарий,
	|	ЗаявлениеОВвозеТоваровПолученное.Подразделение КАК Подразделение,
	|	ЗаявлениеОВвозеТоваровПолученное.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаявлениеОВвозеТоваровПолученное.Проведен КАК Проведен,
	|	ЗаявлениеОВвозеТоваровПолученное.Партнер КАК Партнер,
	|	ЗаявлениеОВвозеТоваровПолученное.Склад КАК Склад,
	|	ЗаявлениеОВвозеТоваровПолученное.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваровПолученное КАК ЗаявлениеОВвозеТоваровПолученное
	|ГДЕ
	|	ЗаявлениеОВвозеТоваровПолученное.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Дата,
	|	Реквизиты.Организация,
	|	Реквизиты.Валюта,
	|	Реквизиты.Номер,
	|	Реквизиты.НомерОтметкиОРегистрацииЗаявления,
	|	Реквизиты.ДатаОтметкиОРегистрацииЗаявления,
	|	Реквизиты.КодПричины,
	|	Реквизиты.ИзменениеЦены,
	|	Реквизиты.РанееПредставленноеЗаявление,
	|	Реквизиты.ХозяйственнаяОперация,
	|	Реквизиты.Автор,
	|	Реквизиты.Комментарий,
	|	Реквизиты.Подразделение,
	|	Реквизиты.ПометкаУдаления,
	|	Реквизиты.Проведен,
	|	Реквизиты.Партнер,
	|	Реквизиты.Склад,
	|	Реквизиты.НаправлениеДеятельности
	|ИЗ
	|	Реквизиты КАК Реквизиты";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Комментарий",           Реквизиты.Комментарий);
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения();
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ЗаявлениеОВвозеТоваровПолученное"));

	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	ДанныеДокумента.Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Склад КАК МестоХранения,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Автор КАК Автор,
	|	&Комментарий КАК Комментарий,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК Валюта,
	|	0 КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК Статус,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО КАК РазделительЗаписи,
	|	"""" КАК Дополнительно,
	|	ДанныеДокумента.Дата КАК ДатаПервичногоДокумента,
	|	ДанныеДокумента.Номер КАК НомерПервичногоДокумента,
	|	ЛОЖЬ КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО КАК СторнируемыйДокумент,
	|	ДанныеДокумента.РанееПредставленноеЗаявление КАК ИсправляемыйДокумент,
	|	ДанныеДокумента.Дата КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваровПолученное КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли