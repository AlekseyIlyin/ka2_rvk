#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("ИнтеграцияБЗК");
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов - таблиц значений - данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.НачислениеЕНП") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос        = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛ(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыСФондамиПоСтраховымВзносам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРасчетыПоНалогамНаЕдиномНалоговомСчете(ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ПроводкиРеглУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Перенос налогов на ЕНС
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Строки.СрокУплаты < Операция.Дата ТОГДА Операция.Дата
	|		ИНАЧЕ Строки.СрокУплаты
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	Строки.Сумма КАК Сумма,
	|	Строки.Сумма / КурсВалютыУпрУчета.Курс КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	&ВалютаРеглУчета КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиДт,
	|
	|	Строки.СчетУчета КАК СчетДт,
	|	Строки.Субконто1 КАК СубконтоДт1,
	|	Строки.Субконто2 КАК СубконтоДт2,
	|	Строки.Субконто3 КАК СубконтоДт3,
	|	
	|	Строки.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	&ВалютаРеглУчета КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеКт,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Перенос налогов на ЕНС"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.НачислениеЕНП КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТРасшифровкаНалогов КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НачалоПериода(Операция.Дата, ДЕНЬ)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - текст запроса создания временных таблиц.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Строки.Ссылка,
	|	Строки.НомерСтроки,
	|	Строки.СрокУплаты,
	|	Строки.СчетУчета,
	|	Строки.Субконто1,
	|	Строки.Субконто2,
	|	Строки.Субконто3,
	|	СУММА(Строки.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТРасшифровкаНалогов
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЕНП.РасшифровкаНалогов КАК Строки
	|	ПО
	|		ДокументыКОтражению.Ссылка = Строки.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Ссылка,
	|	Строки.НомерСтроки,
	|	Строки.СрокУплаты,
	|	Строки.СчетУчета,
	|	Строки.Субконто1,
	|	Строки.Субконто2,
	|	Строки.Субконто3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Строки.Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Добавляет команду создания документа "Начисление ЕНП".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.НачислениеЕНП) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.НачислениеЕНП.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.НачислениеЕНП);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Заполнение

Функция ПолучитьНалогиПоДаннымЗарплаты(ПараметрыОтбора) Экспорт
	
	ТаблицаНалогов = ПустаяСсылка().РасшифровкаНалогов.ВыгрузитьКолонки();
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбора, "Организация");
	ДатаДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбора, "ДатаДокумента", '00010101');
	
	Если НЕ (ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ДатаДокумента)) Тогда
		Возврат ТаблицаНалогов;
	КонецЕсли;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияНДФЛНалоговогоАгента(ДатаДокумента);
	НДФЛНалоговогоАгента = УчетНДФЛ.УдержаноНалогаЗаПериод(
		Организация, ПараметрыЗаполнения.ДатаНачала, ПараметрыЗаполнения.ДатаОкончания);
	
	ВидыНалоговПоКБК = ВидыНалоговПоКБК(ДатаДокумента);
	
	Для Каждого СтрокаТаблицы Из НДФЛНалоговогоАгента Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сумма) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНалогов.Добавить();
		
		НоваяСтрока.ТипНалога = ВидыНалоговПоКБК.Получить(СтрокаТаблицы.КБК);
		Если Не ЗначениеЗаполнено(НоваяСтрока.ТипНалога) Тогда
			НоваяСтрока.ТипНалога = Справочники.ВидыНалоговВзносов.НДФЛ;
		КонецЕсли;
		
		НоваяСтрока.КодБК = СтрокаТаблицы.КБК;
		НоваяСтрока.Сумма = СтрокаТаблицы.Сумма;
		
		Если ДатаДокумента >= ЕдиныйНалоговыйСчет.ДатаВступленияВСилу539ФЗ() Тогда
			
			Если СтрокаТаблицы.ДатаУдержания < ПараметрыЗаполнения.ГраницаПериодов Тогда
				НоваяСтрока.НачалоПериода = НачалоМесяца(ПараметрыЗаполнения.ОтчетныйПериод);
				НоваяСтрока.КонецПериода = ПараметрыЗаполнения.ГраницаПериодов - 1;
			Иначе
				НоваяСтрока.НачалоПериода = ПараметрыЗаполнения.ГраницаПериодов;
				НоваяСтрока.КонецПериода = КонецМесяца(ПараметрыЗаполнения.ОтчетныйПериод);
			КонецЕсли;
			
		ИначеЕсли ДатаДокумента >= ЕдиныйНалоговыйСчет.ДатаНачалаПрименения() Тогда
			
			Если ПараметрыЗаполнения.ОтчетныйПериод < КонецГода(ДатаДокумента) Тогда
				НоваяСтрока.НачалоПериода = НачалоМесяца(ПараметрыЗаполнения.ОтчетныйПериод);
			Иначе
				НоваяСтрока.НачалоПериода = ПараметрыЗаполнения.ГраницаПериодов;
			КонецЕсли;
			
			НоваяСтрока.КонецПериода = КонецМесяца(ПараметрыЗаполнения.ОтчетныйПериод);
			
		Иначе
			
			НоваяСтрока.НачалоПериода = НачалоМесяца(ПараметрыЗаполнения.ОтчетныйПериод);
			НоваяСтрока.КонецПериода = КонецМесяца(ПараметрыЗаполнения.ОтчетныйПериод);
			
		КонецЕсли;
		
		НоваяСтрока.СрокУплаты = СтрокаТаблицы.СрокПеречисленияНалога;
		
		НоваяСтрока.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(НоваяСтрока.ТипНалога);
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Субконто2 = СтрокаТаблицы.РегистрацияВНалоговомОргане;
		
	КонецЦикла;
	
	ВычестьУжеЗарегистрированныеДанныеПоНДФЛ(ТаблицаНалогов, ПараметрыОтбора);
	
	ОтражениеЗарплатыВУчете.СвернутьТаблицу(ТаблицаНалогов);
	
	Возврат ТаблицаНалогов;
	
КонецФункции

Функция ПолучитьНалогиПоДаннымДекларацийИРасчетов(ПараметрыОтбора) Экспорт
	
	ТаблицаНалогов = ПустаяСсылка().РасшифровкаНалогов.ВыгрузитьКолонки();
	
	Организация = Неопределено;
	ДатаДокумента = '00010101';
	
	Если НЕ (ПараметрыОтбора.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация)
		И ПараметрыОтбора.Свойство("ДатаДокумента", ДатаДокумента) И ЗначениеЗаполнено(ДатаДокумента)) Тогда
		Возврат ТаблицаНалогов;
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("ТипыНалогов") Тогда
		ОтборПоТипамНалогов = ПараметрыОтбора.ТипыНалогов;
	Иначе
		ОтборПоТипамНалогов = Неопределено;
	КонецЕсли;
	
	МесяцНачисления = Месяц(ДатаДокумента);
	ДействующиеРегистрацииВНалоговомОргане = ПолучитьДействующиеРегистрацииВНалоговомОргане(Организация);
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.НДС) <> Неопределено Тогда
		
		ДанныеДеклараций = ДанныеДляУплатыНалогаНДС(Организация, ДействующиеРегистрацииВНалоговомОргане, ДатаДокумента);
		ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДеклараций, ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.НалогНаПрибыль_РегиональныйБюджет) <> Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.НалогНаПрибыль_ФедеральныйБюджет) <> Неопределено Тогда
		
		ДанныеДеклараций = ДанныеДляУплатыНалогаНаПрибыль(Организация, ДействующиеРегистрацииВНалоговомОргане, ДатаДокумента);
		ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеДеклараций, ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.ЗемельныйНалог) <> Неопределено Тогда
		
		Если МесяцНачисления % 3 = 1 Тогда
			
			ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
			ДанныеРасчета = ДанныеДляУплатыЗемельногоНалога(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.ТранспортныйНалог) <> Неопределено Тогда
		
		Если МесяцНачисления % 3 = 1 Тогда
			
			ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
			ДанныеРасчета = ДанныеДляУплатыТранспортногоНалога(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.НалогНаИмущество) <> Неопределено Тогда
		
		Если МесяцНачисления % 3 = 1 Тогда
			
			ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
			ДанныеРасчета = ДанныеДляУплатыНалогаНаИмущество(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.УСН_Доходы) <> Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.УСН_ДоходыМинусРасходы) <> Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.УСН_МинимальныйНалог) <> Неопределено Тогда
		
		Если МесяцНачисления % 3 = 1 Тогда
			
			ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
			ДанныеРасчета = ДанныеДляУплатыНалогаУСН(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов = Неопределено
		Или ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.ТорговыйСбор) <> Неопределено Тогда
		
		ПериодНачисления = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
		
		Если МесяцНачисления % 3 = 1
			И ТорговыйСбор.УплачиваетсяТорговыйСбор(Организация, ПериодНачисления) Тогда
			
			ДанныеРасчета = ДанныеДляУплатыТорговогоСбора(Организация, ПериодНачисления);
			ДобавитьВТаблицуНалогов(ТаблицаНалогов, ДанныеРасчета, ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов <> Неопределено
		И ОтборПоТипамНалогов.Получить(Справочники.ВидыНалоговВзносов.НДС_НалоговыйАгент) <> Неопределено Тогда
		
		ДополнитьТаблицуНалоговДаннымиНА(Организация, ДатаДокумента, ТаблицаНалогов);
		
	КонецЕсли;
	
	Если ОтборПоТипамНалогов <> Неопределено Тогда
		ДополнитьТаблицуНалоговПрочимиНалогами(Организация, ДатаДокумента, ОтборПоТипамНалогов, ТаблицаНалогов);
	КонецЕсли;
	
	Возврат ТаблицаНалогов;
	
КонецФункции

#КонецОбласти

// Срок уплаты по типу налога.
// 
// Параметры:
//  ВидНалога - СправочникСсылка.ВидыНалоговВзносов - 
//  ОтчетныйПериод - Дата - 
// 
// Возвращаемое значение:
//  Дата - срок уплаты по типу налога
Функция СрокУплатыПоТипуНалога(ВидНалога, ОтчетныйПериод) Экспорт
	
	// 28 день месяца - единый срок уплаты.
	Возврат НачалоМесяца(ОтчетныйПериод) + 27*24*3600;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.НачислениеЕНП.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.20.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8fda5e32-94cd-42fe-bdfa-fcc791547600");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.НачислениеЕНП.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Обновление документов ""Начисление ЕНП"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- заполнение информацию об отражении в регламентированном учете документов ""Начисление ЕНП"" на дату уплаты налога.'"));
	СписокОписаний.Добавить(НСтр("ru = '- заполнение колонки ""Тип налога"" по данным колонки ""Тип налога (Не используется)"" в табличной части ""Расшифровка налогов"";'"));
	
	Обработчик.Комментарий = СтрСоединить(СписокОписаний, Символы.ПС);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.НачислениеЕНП.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.НачислениеЕНП.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.НачислениеЕНП";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	#Область ТекстыЗапроса
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.НачислениеЕНП.РасшифровкаНалогов КАК Расшифровка
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЕНП КАК ДанныеДокумента
		|	ПО Расшифровка.Ссылка = ДанныеДокумента.Ссылка
		|		И Расшифровка.СрокУплаты > ДанныеДокумента.Дата
		|		И ДанныеДокумента.Проведен
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеВРеглУчете
		|	ПО ДанныеДокумента.Ссылка = ОтражениеВРеглУчете.Регистратор
		|		И ДанныеДокумента.Организация = ОтражениеВРеглУчете.Организация
		|		И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) = ОтражениеВРеглУчете.ДатаОтражения
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеНаДатуУплаты
		|	ПО ДанныеДокумента.Ссылка = ОтражениеНаДатуУплаты.Регистратор
		|		И ДанныеДокумента.Организация = ОтражениеНаДатуУплаты.Организация
		|		И Расшифровка.СрокУплаты = ОтражениеНаДатуУплаты.ДатаОтражения
		|
		|ГДЕ
		|	ОтражениеНаДатуУплаты.Статус ЕСТЬ NULL
		|");
	
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЕНП.Ссылка
		|ИЗ
		|	Документ.НачислениеЕНП.РасшифровкаНалогов КАК НачислениеЕНП
		|ГДЕ
		|	НачислениеЕНП.УдалитьТипНалога <> ЗНАЧЕНИЕ(Перечисление.УдалитьТипыНалогов.ПустаяСсылка)
		|");
	
	#КонецОбласти
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина)));
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.НачислениеЕНП";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	#Область ТекстыЗапроса
	
	ТекстыЗапроса = Новый Массив;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ОбновляемыеДанные.Ссылка КАК Ссылка,
		|	НАЧАЛОПЕРИОДА(ОбновляемыеДанные.Дата, ДЕНЬ) КАК ДатаДокумента
		|ПОМЕСТИТЬ ОбновляемыеДанные
		|ИЗ
		|	&ОбновляемыеДанные КАК ОбновляемыеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО Ссылка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбновляемыеДанные.Ссылка КАК Ссылка,
		|	Налоги.СрокУплаты КАК СрокУплаты
		|ПОМЕСТИТЬ ВТДатыУплатыНалогов
		|ИЗ
		|	ОбновляемыеДанные КАК ОбновляемыеДанные
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЕНП.РасшифровкаНалогов КАК Налоги
		|	ПО Налоги.Ссылка = ОбновляемыеДанные.Ссылка
		|		И Налоги.СрокУплаты > ОбновляемыеДанные.ДатаДокумента
		|
		|ИНДЕКСИРОВАТЬ ПО Ссылка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ОбновляемыеДанные.Ссылка КАК Ссылка,
		|	ДатыУплатыНалогов.СрокУплаты КАК СрокУплаты,
		|	ОтражениеНаДатуДокумента.*
		|ИЗ
		|	ОбновляемыеДанные КАК ОбновляемыеДанные
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеНаДатуДокумента
		|	ПО ОбновляемыеДанные.Ссылка = ОтражениеНаДатуДокумента.Регистратор
		|		И ОбновляемыеДанные.ДатаДокумента = ОтражениеНаДатуДокумента.ДатаОтражения
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыУплатыНалогов КАК ДатыУплатыНалогов
		|	ПО ОбновляемыеДанные.Ссылка = ДатыУплатыНалогов.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеНаДатуУплаты
		|	ПО ОбновляемыеДанные.Ссылка = ОтражениеНаДатуУплаты.Регистратор
		|		И ДатыУплатыНалогов.СрокУплаты = ОтражениеНаДатуУплаты.ДатаОтражения
		|
		|ГДЕ
		|	ОтражениеНаДатуУплаты.Статус ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	СрокУплаты");
	
	
	#КонецОбласти
	
	Запрос = Новый Запрос(СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаРегл = Результат[2].Выбрать();
	
	Для Каждого СтрокаТаблицы Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить("Документ.НачислениеЕНП")
				.УстановитьЗначение("Ссылка", СтрокаТаблицы.Ссылка);
			Блокировка.Добавить("РегистрСведений.ОтражениеДокументовВРеглУчете.НаборЗаписей")
				.УстановитьЗначение("Регистратор", СтрокаТаблицы.Ссылка);
			Блокировка.Заблокировать();

			ДокументОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект(); // ДокументОбъект
			Если ДокументОбъект <> Неопределено Тогда
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект,"РасшифровкаНалогов.УдалитьТипНалога","ТипНалога");
			КонецЕсли;
			
			Если ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(СтрокаТаблицы.Ссылка);
			НаборЗаписей.Прочитать();
			
			ВыборкаРегл.Сбросить();
			Пока ВыборкаРегл.НайтиСледующий(СтрокаТаблицы.Ссылка, "Ссылка") Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаРегл,, "ДатаОтражения");
				НоваяЗапись.ДатаОтражения = ВыборкаРегл.СрокУплаты;
				НаборЗаписей.Записывать = Истина;
			КонецЦикла;
			
			Если НаборЗаписей.Записывать Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			КонецЕсли;
			
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаТаблицы.Ссылка);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), СтрокаТаблицы.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                    КАК Период,
	|	ДанныеДокумента.Номер                   КАК Номер,
	|	ДанныеДокумента.Организация             КАК Организация,
	|	ДанныеДокумента.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ДанныеДокумента.СуммаДокумента          КАК СуммаДокумента,
	|	ДанныеДокумента.Ответственный           КАК Ответственный,
	|	ДанныеДокумента.Комментарий             КАК Комментарий,
	|	ДанныеДокумента.ПометкаУдаления         КАК ПометкаУдаления,
	|	ДанныеДокумента.Ссылка                  КАК Ссылка,
	|	ДанныеДокумента.Проведен                КАК Проведен
	|
	|ИЗ
	|	Документ.НачислениеЕНП КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(Реквизиты.Организация, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("КодПоОКТМО", РегистрацияВНалоговомОргане.КодПоОКТМО);

	Запрос.УстановитьПараметр("ИспользуетсяРаспределениеОплатИНачислений", Реквизиты.Период >= РеглУчетСервер.ДатаНачалаОбязательногоПримененияЕНП());
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	Значения.Вставить("ИдентификаторМетаданных",                         ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.НачислениеЕНП"));
	Значения.Вставить("ИспользоватьНачислениеЗарплаты",                  Константы.ИспользоватьНачислениеЗарплаты.Получить());
	Значения.Вставить("ИспользоватьУчетПрочихАктивовПассивов",           ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов"));
	Значения.Вставить("ВалютаУправленческогоУчета",                      Константы.ВалютаУправленческогоУчета.Получить());
	
	Если Реквизиты <> Неопределено Тогда
		
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация);
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			ВалютаРегламентированногоУчета,
			ВалютаРегламентированногоУчета,
			Реквизиты.Период,
			Реквизиты.Организация);
			
		Значения.Вставить("КоэффициентПересчетаВВалютуУпр",              Коэффициенты.КоэффициентПересчетаВВалютуУпр);
		Значения.Вставить("ВалютаРегламентированногоУчета",              ВалютаРегламентированногоУчета);
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

#Область ТекстыЗапросаВременныхТаблиц

Процедура ДобавитьТекстЗапросаВТДанныеДокументов(ТекстыЗапроса)
	
	ИмяТаблицы = "ВТДанныеДокументов";
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Организация КАК Организация
	|
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ГДЕ
	|	&Проведен";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВТРасшифровкаНалогов(ТекстыЗапроса)
	
	ИмяТаблицы = "ВТРасшифровкаНалогов";
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТДанныеДокументов(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасшифровкаНалогов.Ссылка КАК Ссылка,
	|	РасшифровкаНалогов.ТипНалога КАК ТипНалога,
	|	РасшифровкаНалогов.СрокУплаты КАК СрокУплаты,
	|	РасшифровкаНалогов.Сумма КАК Сумма,
	|	РасшифровкаНалогов.КодБК КАК КодБК,
	|	РасшифровкаНалогов.НачалоПериода КАК НачалоПериода,
	|	РасшифровкаНалогов.КонецПериода КАК КонецПериода,
	|	РасшифровкаНалогов.СчетУчета КАК СчетУчета,
	|	РасшифровкаНалогов.Субконто1 КАК Субконто1,
	|	РасшифровкаНалогов.Субконто2 КАК Субконто2,
	|	РасшифровкаНалогов.Субконто3 КАК Субконто3,
	|	РасшифровкаНалогов.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ВТРасшифровкаНалогов
	|ИЗ
	|	Документ.НачислениеЕНП.РасшифровкаНалогов КАК РасшифровкаНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокументов КАК ДанныеДокументов
	|		ПО РасшифровкаНалогов.Ссылка = ДанныеДокументов.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТРасшифровкаНалогов(ТекстыЗапроса);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	Налоги.ТипНалога КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))) КАК Сумма
	|ИЗ
	|	ВТРасшифровкаНалогов КАК Налоги
	|
	|СГРУППИРОВАТЬ ПО
	|	Налоги.ТипНалога
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.ЕдиныйНалоговыйПлатеж) КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))) КАК Сумма
	|ИЗ
	|	ВТРасшифровкаНалогов КАК Налоги";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияПоПрочимАктивамПассивам";
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТРасшифровкаНалогов(ТекстыЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Налоги.СрокУплаты < &Период ТОГДА &Период
	|		ИНАЧЕ Налоги.СрокУплаты
	|	КОНЕЦ КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	Налоги.ТипНалога КАК Аналитика,
	|	Налоги.Сумма КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	Налоги.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ДвижениеАктивовПассивовЗаСчетАктивовПассивов) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВТРасшифровкаНалогов КАК Налоги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Налоги.СрокУплаты < &Период ТОГДА &Период
	|		ИНАЧЕ Налоги.СрокУплаты
	|	КОНЕЦ КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК Статья,
	|	ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.ЕдиныйНалоговыйПлатеж) КАК Аналитика,
	|	Налоги.Сумма КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(Налоги.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	Налоги.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ДвижениеАктивовПассивовЗаСчетАктивовПассивов) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВТРасшифровкаНалогов КАК Налоги
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыНалоговыхАгентовСБюджетомПоНДФЛ(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ";
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТРасшифровкаНалогов(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	Налоги.Ссылка КАК Ссылка,
	|	&Организация КАК Организация,
	|	Налоги.ТипНалога КАК ТипНалога,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
	|	"""" КАК ПлатежноеПоручениеНомер,
	|	Налоги.СрокУплаты КАК ПлатежноеПоручениеДата,
	|	ВЫБОР ТИП(Справочник.РегистрацииВНалоговомОргане)
	|		КОГДА ТИПЗНАЧЕНИЯ(Налоги.Субконто1) ТОГДА Налоги.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(Налоги.Субконто2) ТОГДА Налоги.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(Налоги.Субконто3) ТОГДА Налоги.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	""0"" КАК ПоказательОснования,
	|	""0"" КАК ПоказательПериода,
	|	Налоги.Сумма КАК Сумма
	|ИЗ
	|	ВТРасшифровкаНалогов КАК Налоги
	|
	|ГДЕ
	|	&ИспользоватьНачислениеЗарплаты
	|	И Налоги.ТипНалога В (
	|			ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛ),
	|			ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛСПревышения),
	|			ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛДоначисленныйПоРезультатамПроверки),
	|			ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛДоходыКонтрагентов),
	|			ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛПередачаЗадолженностиВНалоговыйОрган),
	|			ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛПрочиеРасчетыСПерсоналом))
	|	И НЕ &ИспользуетсяРаспределениеОплатИНачислений
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСФондамиПоСтраховымВзносам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСФондамиПоСтраховымВзносам";
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТипыНалоговВФонды", ТекстыЗапроса) Тогда
		ЕдиныйНалоговыйСчет.ТекстЗапросаВтТипыНалоговВФонды(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТРасшифровкаНалогов(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТипыНалоговВзносов.ВидСтрахования КАК ВидОбязательногоСтрахованияСотрудников,
	|	Налоги.СрокУплаты КАК ПлатежноеПоручениеДата,
	|	"""" КАК ПлатежноеПоручениеНомер,
	|	ИСТИНА КАК ЭтоСтраховыеВзносы,
	|	0 КАК ГодЗадолженностиПоЕСН,
	|	Налоги.Сумма КАК Сумма
	|ИЗ
	|	ВТРасшифровкаНалогов КАК Налоги
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТипыНалоговВФонды КАК ТипыНалоговВзносов
	|		ПО Налоги.ТипНалога = ТипыНалоговВзносов.ТипНалога
	|
	|ГДЕ
	|	&ИспользоватьНачислениеЗарплаты
	|	И НЕ &ИспользуетсяРаспределениеОплатИНачислений
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТРасшифровкаНалогов(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                        КАК Период,
	|	&Организация                   КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)   КАК ДатаОтражения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                        КАК Период,
	|	&Организация                   КАК Организация,
	|	НАЧАЛОПЕРИОДА(Налоги.СрокУплаты, ДЕНЬ) КАК ДатаОтражения
	|ИЗ
	|	ВТРасшифровкаНалогов КАК Налоги
	|
	|ГДЕ
	|	Налоги.СрокУплаты > &Период";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоНалогамНаЕдиномНалоговомСчете(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыПоНалогамНаЕдиномНалоговомСчете";
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ДобавитьТекстЗапросаВТРасшифровкаНалогов(ТекстыЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	&Организация КАК Организация,
	|	Налоги.СчетУчета КАК СчетУчета,
	|	Налоги.ТипНалога КАК Налог,
	|	Налоги.КодБК КАК КодБК,
	|	ЕСТЬNULL(Регистрации.Ссылка, &РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(Регистрации.КодПоОКТМО, &КодПоОКТМО) КАК КодПоОКТМО,
	|	НЕОПРЕДЕЛЕНО КАК ПлатежныйДокумент,
	|	Налоги.СрокУплаты КАК СрокУплаты,
	|	Налоги.Сумма КАК Сумма
	|ИЗ
	|	ВТРасшифровкаНалогов КАК Налоги
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК Регистрации
	|	ПО Регистрации.Ссылка = (
	|		ВЫБОР ТИП(Справочник.РегистрацииВНалоговомОргане)
	|			КОГДА ТИПЗНАЧЕНИЯ(Налоги.Субконто1) ТОГДА Налоги.Субконто1
	|			КОГДА ТИПЗНАЧЕНИЯ(Налоги.Субконто2) ТОГДА Налоги.Субконто2
	|			КОГДА ТИПЗНАЧЕНИЯ(Налоги.Субконто3) ТОГДА Налоги.Субконто3
	|			ИНАЧЕ &РегистрацияВНалоговомОргане
	|		КОНЕЦ)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Заполнение

Функция ПараметрыЗаполненияНДФЛНалоговогоАгента(Знач ДатаДокумента)
	
	ГраницаОтбора = КонецДня(ДатаДокумента);
	ОтчетныйПериод = НачалоМесяца(ДатаДокумента);
	
	Если ДатаДокумента >= ЕдиныйНалоговыйСчет.ДатаВступленияВСилу539ФЗ() Тогда
		
		// С 1 января 2024 года налоговые агенты перечисляют удержанный НДФЛ дважды в месяц
		// За период с 1-го по 22-е число текущего месяца - 28-е число текущего месяца
		// С 23-го числа по последнее число текущего месяца - 5-е число следующего месяца
		
		НачалоСведений = НачалоМесяца(ГраницаОтбора);
		ГраницаПериодов = НачалоСведений + 22 * 86400; // 23-е число текущего месяца
		
	ИначеЕсли ДатаДокумента >= ЕдиныйНалоговыйСчет.ДатаНачалаПрименения() Тогда
		
		// С 1 января 2023 года, при подаче уведомлений об исчисленных суммах налогов, данные по НДФЛ удержанному
		// в отчетном периоде предоставляются с 23 числа предыдущего месяца по 22 число текущего
		
		Если День(ДатаДокумента) < 23 Тогда
			НачалоСведений = ДобавитьМесяц(ОтчетныйПериод, -1) + 22 * 86400; // 23-е число предыдущего месяца
		ИначеЕсли Месяц(ДатаДокумента) = 12 Тогда
			НачалоСведений = ОтчетныйПериод + 22 * 86400; // 23-е декабря
			ОтчетныйПериод = КонецГода(ДатаДокумента);
		Иначе
			НачалоСведений = НачалоМесяца(ДатаДокумента) + 22 * 86400; // 23-е число текущего месяца
			ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, 1);
		КонецЕсли;
		
		Если ДатаДокумента >= УчетНДФЛ.НачалоПередачиЧастичныхУведомлений() Тогда
			ГраницаПериодов = НачалоМесяца(ОтчетныйПериод) + 8 * 86400; // 9-е число отчетного месяца
		Иначе
			ГраницаПериодов = НачалоСведений;
		КонецЕсли;
		
	Иначе
		
		НачалоСведений = НачалоМесяца(ГраницаОтбора);
		ГраницаПериодов = НачалоСведений;
		
	КонецЕсли;
	
	НачалоСведений = Макс(НачалоСведений, НачалоГода(ДатаДокумента));
	ГраницаПериодов = Макс(ГраницаПериодов, НачалоСведений);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаНачала", НачалоСведений);
	ПараметрыОтбора.Вставить("ДатаОкончания", ГраницаОтбора);
	ПараметрыОтбора.Вставить("ГраницаПериодов", ГраницаПериодов);
	ПараметрыОтбора.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	
	Возврат Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
КонецФункции

Процедура ВычестьУжеЗарегистрированныеДанныеПоНДФЛ(ТаблицаНалогов, ПараметрыЗаполнения)
	
	Организация         = ПараметрыЗаполнения.Организация;
	ДатаДокумента       = ПараметрыЗаполнения.ДатаДокумента;
	ИсключаемыйДокумент = ПараметрыЗаполнения.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(ДатаДокумента));
	Запрос.УстановитьПараметр("ИсключаемыйДокумент", ИсключаемыйДокумент);
	Запрос.УстановитьПараметр("ТаблицаНДФЛ", ТаблицаНалогов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛ.КодБК КАК КодБК,
	|	НДФЛ.ТипНалога КАК ТипНалога,
	|	НДФЛ.НачалоПериода КАК НачалоПериода,
	|	НДФЛ.КонецПериода КАК КонецПериода,
	|	НДФЛ.СрокУплаты КАК СрокУплаты,
	|	НДФЛ.СчетУчета КАК СчетУчета,
	|	НДФЛ.Субконто1 КАК Субконто1,
	|	НДФЛ.Субконто2 КАК Субконто2
	|ПОМЕСТИТЬ ТаблицаНДФЛ
	|ИЗ
	|	&ТаблицаНДФЛ КАК НДФЛ
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Налоги.КодБК КАК КодБК,
	|	Налоги.ТипНалога КАК ТипНалога,
	|	Налоги.НачалоПериода КАК НачалоПериода,
	|	Налоги.КонецПериода КАК КонецПериода,
	|	Налоги.СрокУплаты КАК СрокУплаты,
	|	Налоги.СчетУчета КАК СчетУчета,
	|	Налоги.Субконто1 КАК Субконто1,
	|	Налоги.Субконто2 КАК Субконто2,
	|	-Налоги.Сумма КАК Сумма
	|ИЗ
	|	Документ.НачислениеЕНП.РасшифровкаНалогов КАК Налоги
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНДФЛ КАК НДФЛ
	|		ПО Налоги.ТипНалога = НДФЛ.ТипНалога
	|			И Налоги.НачалоПериода = НДФЛ.НачалоПериода
	|			И Налоги.КонецПериода = НДФЛ.КонецПериода
	|			И Налоги.СрокУплаты = НДФЛ.СрокУплаты
	|			И Налоги.Субконто1 = НДФЛ.Субконто1
	|			И Налоги.Субконто2 = НДФЛ.Субконто2
	|
	|ГДЕ
	|	Налоги.Ссылка.Проведен
	|	И Налоги.Ссылка <> &ИсключаемыйДокумент
	|	И Налоги.Ссылка.Организация = &Организация
	|	И НАЧАЛОПЕРИОДА(Налоги.Ссылка.Дата, МЕСЯЦ) = &ПериодРегистрации
	|	И Налоги.ТипНалога В (
	|		ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛ),
	|		ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛСПревышения),
	|		ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛДивиденды),
	|		ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.НДФЛДивидендыСПревышения))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаНалогов.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйТаблицаПлатежиПоДаннымДекларации()
	
	Платежи = ИнтерфейсыВзаимодействияБРО.НовыйТаблицаДанныхРеглОтчета();
	Платежи.Колонки.Добавить("РегистрацияВНалоговомОргане",
		Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	Платежи.Колонки.Добавить("КодНалоговогоОргана", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Платежи.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговВзносов"));
	Платежи.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Платежи.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Платежи.Колонки.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат Платежи;
	
КонецФункции

Функция ДанныеДляУплатыНалогаНДС(Организация, РегистрацииВНалоговыхОрганах, ДатаДокумента)
	
	Платежи = НовыйТаблицаПлатежиПоДаннымДекларации();
	
	ПериодДекларации = КонецКвартала(ДобавитьМесяц(ДатаДокумента,-3));
	ПериодыПлатежей  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КонецМесяца(ДатаДокумента));
	
	Для Каждого РегистрацияВНалоговомОргане Из РегистрацииВНалоговыхОрганах Цикл
		
		ДанныеРеглОтчета = ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога(
			"НДС", Организация, РегистрацияВНалоговомОргане, ПериодДекларации);
		
		Если ДанныеРеглОтчета <> Неопределено
			И ЗначениеЗаполнено(ДанныеРеглОтчета.Ссылка) Тогда
			ДанныеРеглОтчета.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
			
			ДобавитьПлатежиПоДаннымДекларации(Платежи, ДанныеРеглОтчета, ПериодыПлатежей);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Платежи.Сортировать("ТипНалога Возр, Период Возр");
	
	Возврат Платежи;
	
КонецФункции

Функция ДанныеДляУплатыНалогаНаПрибыль(Организация, РегистрацииВНалоговыхОрганах, ДатаДокумента)
	
	Платежи = НовыйТаблицаПлатежиПоДаннымДекларации();
	
	ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
		"НастройкиУчетаНалогаНаПрибыль", Организация, ДатаДокумента, Ложь);
	
	Если ПараметрыУчетнойПолитики = Неопределено Тогда
		Возврат Платежи;
	КонецЕсли;
	
	МесяцНачисления = Месяц(ДатаДокумента);
	ПериодыДекларацийИПлатежей = Новый Соответствие;
	
	Если Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли
		= ПараметрыУчетнойПолитики.ПорядокУплатыАвансовПоНалогуНаПрибыль Тогда
		
		// данные для заполнения берем:
		// * в январе - не заполняем,
		// * в остальные месяцы - из декларации за предыдущий месяц,
		// * в марте - дополнительно из декларации за прошлый год.
		
		Если МесяцНачисления >= 2 Тогда
			ПериодДекларации = КонецМесяца(ДобавитьМесяц(ДатаДокумента, -1));
			ПериодыДекларацийИПлатежей.Вставить(ПериодДекларации);
		КонецЕсли;
		
		Если МесяцНачисления = 3 Тогда
			ПериодДекларации = КонецГода(ДобавитьМесяц(ДатаДокумента, -3));
			ПериодыДекларацийИПлатежей.Вставить(ПериодДекларации);
		КонецЕсли;
		
	КонецЕсли;
	Если Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежеквартально
		= ПараметрыУчетнойПолитики.ПорядокУплатыАвансовПоНалогуНаПрибыль Тогда
	
		// данные для заполнения берем:
		// * в марте - из годовой декларации предыдущего года,
		// * в апреле, июле, октябре - из декларации предыдущего квартала.
		
		Если МесяцНачисления = 3
			Или (МесяцНачисления > 1 И МесяцНачисления % 3 = 1) Тогда
			ПериодДекларации = КонецКвартала(ДобавитьМесяц(ДатаДокумента, -3));
			ПериодыДекларацийИПлатежей.Вставить(ПериодДекларации);
		КонецЕсли;
		
	КонецЕсли;
	Если Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно
		= ПараметрыУчетнойПолитики.ПорядокУплатыАвансовПоНалогуНаПрибыль Тогда
		
		// данные для заполнения берем:
		// * в январе, феврале и марте - из декларации за 9 месяцев предыдущего года (с отбором по месяцу начисления),
		// * остальные месяцы - из декларации предыдущего квартала (с отбором по месяцу начисления),
		// * в марте - дополнительно все платежи из декларации за прошлый год.
		
		Если МесяцНачисления <= 3 Тогда
			ПериодДекларации = ДобавитьМесяц(КонецГода(ДобавитьМесяц(ДатаДокумента, -3)), -3);
			ПериодыПлатежей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КонецМесяца(ДатаДокумента));
			ПериодыДекларацийИПлатежей.Вставить(ПериодДекларации, ПериодыПлатежей);
		Иначе
			ПериодДекларации = КонецКвартала(ДобавитьМесяц(ДатаДокумента, -3));
			ПериодыПлатежей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КонецМесяца(ДатаДокумента));
			Если МесяцНачисления % 3 = 1 Тогда
				ПериодыПлатежей.Добавить(КонецМесяца(ПериодДекларации));
			КонецЕсли;
			ПериодыДекларацийИПлатежей.Вставить(ПериодДекларации, ПериодыПлатежей);
		КонецЕсли;
		
		Если МесяцНачисления = 3 Тогда
			ПериодДекларации = КонецГода(ДобавитьМесяц(ДатаДокумента, -3));
			ПериодыДекларацийИПлатежей.Вставить(ПериодДекларации);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПериодыДекларацийИПлатежей Цикл
		ПериодДекларации = КлючИЗначение.Ключ;
		ПериодыПлатежей  = КлючИЗначение.Значение;
		Для Каждого РегистрацияВНалоговомОргане Из РегистрацииВНалоговыхОрганах Цикл
			
			ДанныеРеглОтчета = ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога(
				"НалогНаПрибыль", Организация, РегистрацияВНалоговомОргане, ПериодДекларации);
			
			Если ДанныеРеглОтчета <> Неопределено
				И ЗначениеЗаполнено(ДанныеРеглОтчета.Ссылка) Тогда
				ДанныеРеглОтчета.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
				
				ДобавитьПлатежиПоДаннымДекларации(Платежи, ДанныеРеглОтчета, ПериодыПлатежей);
				
			КонецЕсли;
			
			ПоОбособленномуПодразделению = Новый Структура("ОбособленноеПодразделение", Истина);
			ДанныеРеглОтчета = ИнтерфейсыВзаимодействияБРО.ДанныеРеглОтчетаДляУплатыНалога(
				"НалогНаПрибыль", Организация, РегистрацияВНалоговомОргане, ПериодДекларации, ПоОбособленномуПодразделению);
			
			Если ДанныеРеглОтчета <> Неопределено
				И ЗначениеЗаполнено(ДанныеРеглОтчета.Ссылка) Тогда
				ДанныеРеглОтчета.Вставить("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
				
				ДобавитьПлатежиПоДаннымДекларации(Платежи, ДанныеРеглОтчета, ПериодыПлатежей);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Платежи.Сортировать("ТипНалога Возр, Период Возр");
	
	Возврат Платежи;
	
КонецФункции

Процедура ДобавитьПлатежиПоДаннымДекларации(Платежи, ДанныеРеглОтчета, Периоды)
	
	ДанныеДекларации = Новый Структура;
	ДанныеДекларации.Вставить("РегистрацияВНалоговомОргане", ДанныеРеглОтчета.РегистрацияВНалоговомОргане);
	
	Если ДанныеРеглОтчета.Свойство("КодНалоговогоОргана") Тогда
		ДанныеДекларации.Вставить("КодНалоговогоОргана", ДанныеРеглОтчета.КодНалоговогоОргана);
	КонецЕсли;
	
	ПериодРеглОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеРеглОтчета.Ссылка, "ДатаНачала, ДатаОкончания");
	ДанныеДекларации.Вставить("НачалоПериода", ПериодРеглОтчета.ДатаНачала);
	ДанныеДекларации.Вставить("КонецПериода", КонецДня(ПериодРеглОтчета.ДатаОкончания));
	
	ВидыНалоговПоКБК = ВидыНалоговПоКБК(ПериодРеглОтчета.ДатаОкончания);
	
	Для Каждого Платеж Из ДанныеРеглОтчета.Платежи Цикл
		
		Если Платеж.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Периоды <> Неопределено
			И Периоды.Найти(КонецМесяца(Платеж.Период)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Платеж);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДекларации);
		
		ВидНалога = ВидыНалоговПоКБК.Получить(Платеж.КБК);
		Если Не ЗначениеЗаполнено(ВидНалога) Тогда
			ВидНалога = Справочники.ВидыНалоговВзносов.ПрочиеНалогиИСборы;
		ИначеЕсли ВидНалога = Справочники.ВидыНалоговВзносов.НДС И Платеж.Агент Тогда
			ВидНалога = Справочники.ВидыНалоговВзносов.НДС_НалоговыйАгент;
		КонецЕсли;
		
		НоваяСтрока.СчетУчета =
			РеглУчетСервер.СчетУчетаПоТипуНалога(ВидНалога);
		НоваяСтрока.ТипНалога = ВидНалога;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляУплатыЗемельногоНалога(Организация, ОкончаниеОтчетногоПериодаДляРасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(ОкончаниеОтчетногоПериодаДляРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета));
	
	Запрос.УстановитьПараметр("НачалоПримененияНовогоРасчета", 
								РасчетИмущественныхНалоговКлиентСервер.НачалоПримененияНовогоРасчетаЗемельногоНалога());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расчет.НачалоПериода КАК НачалоПериода,
	|	Расчет.КонецПериода КАК КонецПериода,
	|	Расчет.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(Расчет.Сумма) КАК Сумма,
	|	Расчет.КБК КАК КБК
	|	
	|ИЗ (
	|	ВЫБРАТЬ
	|		&НачалоПериода КАК НачалоПериода,
	|		&ПериодРасчета КАК КонецПериода,
	|		РасчетЗемельногоНалога.ИФНС КАК РегистрацияВНалоговомОргане,
	|		СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) КАК Сумма,
	|		РасчетЗемельногоНалога.КБК КАК КБК
	|	ИЗ
	|		РегистрСведений.РасчетЗемельногоНалога КАК РасчетЗемельногоНалога
	|	ГДЕ
	|		РасчетЗемельногоНалога.ПериодРасчета = &ПериодРасчета
	|		И РасчетЗемельногоНалога.Организация = &Организация
	|		И РасчетЗемельногоНалога.ПериодРасчета >= &НачалоПримененияНовогоРасчета
	|		И РасчетЗемельногоНалога.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетЗемельногоНалога.КБК,
	|		РасчетЗемельногоНалога.ИФНС
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетЗемельногоНалога.СуммаНалогаКУплате) > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&НачалоПериода КАК НачалоПериода,
	|		&ПериодРасчета КАК КонецПериода,
	|		РасчетЗемельногоНалогаДо2020.ИФНС КАК РегистрацияВНалоговомОргане,
	|		СУММА(РасчетЗемельногоНалогаДо2020.СуммаНалогаКУплате) КАК Сумма,
	|		РасчетЗемельногоНалогаДо2020.КБК КАК КБК
	|	ИЗ
	|		РегистрСведений.РасчетЗемельногоНалогаДо2020 КАК РасчетЗемельногоНалогаДо2020
	|	ГДЕ
	|		РасчетЗемельногоНалогаДо2020.ПериодРасчета = &ПериодРасчета
	|		И РасчетЗемельногоНалогаДо2020.Организация = &Организация
	|		И РасчетЗемельногоНалогаДо2020.ПериодРасчета < &НачалоПримененияНовогоРасчета
	|		И РасчетЗемельногоНалогаДо2020.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетЗемельногоНалогаДо2020.КБК,
	|		РасчетЗемельногоНалогаДо2020.ИФНС
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетЗемельногоНалогаДо2020.СуммаНалогаКУплате) > 0
	|	) КАК Расчет
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчет.КБК,
	|	Расчет.РегистрацияВНалоговомОргане,
	|	Расчет.НачалоПериода,
	|	Расчет.КонецПериода"; 
	
	ДанныеРасчета = Запрос.Выполнить().Выгрузить(); 
	ДанныеРасчета.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговВзносов"));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого Платеж Из ДанныеРасчета Цикл 
		
		Платеж.ТипНалога = Справочники.ВидыНалоговВзносов.ЗемельныйНалог;
		Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога);
		
	КонецЦикла; 
	
	Возврат ДанныеРасчета;
	
КонецФункции

Функция ДанныеДляУплатыТранспортногоНалога(Организация, ОкончаниеОтчетногоПериодаДляРасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(ОкончаниеОтчетногоПериодаДляРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&НачалоПериода КАК НачалоПериода,
	|	&ПериодРасчета КАК КонецПериода,
	|	РасчетТранспортногоНалога.ИФНС КАК РегистрацияВНалоговомОргане,
	|	ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.ТранспортныйНалог) КАК ТипНалога,
	|	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате) КАК Сумма
	|ИЗ
	|	РегистрСведений.РасчетТранспортногоНалога КАК РасчетТранспортногоНалога
	|ГДЕ
	|	РасчетТранспортногоНалога.ПериодРасчета = &ПериодРасчета
	|	И РасчетТранспортногоНалога.Организация = &Организация
	|	И РасчетТранспортногоНалога.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетТранспортногоНалога.ИФНС
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетТранспортногоНалога.СуммаНалогаКУплате) > 0"; 
	
	ДанныеРасчета = Запрос.Выполнить().Выгрузить(); 
	ДанныеРасчета.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого Платеж Из ДанныеРасчета Цикл 
		
		Платеж.КБК = Справочники.ВидыНалоговВзносов.КБКПоВидуНалоговогоОбязательства(Платеж.ТипНалога);
		Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога);
		
	КонецЦикла; 
	
	Возврат ДанныеРасчета;
	
КонецФункции

Функция ДанныеДляУплатыНалогаНаИмущество(Организация, ОкончаниеОтчетногоПериодаДляРасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(ОкончаниеОтчетногоПериодаДляРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалогНаИмущество.НачалоПериода                 КАК НачалоПериода,
	|	НалогНаИмущество.КонецПериода                  КАК КонецПериода,
	|	НалогНаИмущество.РегистрацияВНалоговомОргане   КАК РегистрацияВНалоговомОргане,
	|	НалогНаИмущество.КБК                           КАК КБК,
	|	СУММА(НалогНаИмущество.Сумма)                  КАК Сумма
	|ИЗ
	|(
	|	ВЫБРАТЬ
	|		&НачалоПериода                                    КАК НачалоПериода,
	|		&ПериодРасчета                                    КАК КонецПериода,
	|		РасчетНалогаНаИмущество.ИФНС                      КАК РегистрацияВНалоговомОргане,
	|		РасчетНалогаНаИмущество.КБК                       КАК КБК,
	|		СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате) КАК Сумма
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|	ГДЕ
	|		РасчетНалогаНаИмущество.ПериодРасчета = &ПериодРасчета
	|		И РасчетНалогаНаИмущество.Организация = &Организация
	|		И РасчетНалогаНаИмущество.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетНалогаНаИмущество.КБК,
	|		РасчетНалогаНаИмущество.ИФНС
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате) > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&НачалоПериода                                        КАК НачалоПериода,
	|		&ПериодРасчета                                        КАК КонецПериода,
	|		РасчетНалогаНаИмуществоПоКС.ИФНС                      КАК РегистрацияВНалоговомОргане,
	|		ЕСТЬNULL(ПараметрыНачисленияННИ.КБК, """")            КАК КБК,
	|		СУММА(РасчетНалогаНаИмуществоПоКС.СуммаНалогаКУплате) КАК Сумма
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости КАК РасчетНалогаНаИмуществоПоКС
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(&ПериодРасчета,
	|				Организация = &Организация) КАК ПараметрыНачисленияННИ
	|			ПО РасчетНалогаНаИмуществоПоКС.Организация = ПараметрыНачисленияННИ.Организация
	|				И РасчетНалогаНаИмуществоПоКС.ОсновноеСредство = ПараметрыНачисленияННИ.ОсновноеСредство
	|				И РасчетНалогаНаИмуществоПоКС.КодПоОКТМО = ПараметрыНачисленияННИ.КодПоОКТМО
	|	ГДЕ
	|		РасчетНалогаНаИмуществоПоКС.ПериодРасчета = &ПериодРасчета
	|		И РасчетНалогаНаИмуществоПоКС.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоКС.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетНалогаНаИмуществоПоКС.ИФНС,
	|		ЕСТЬNULL(ПараметрыНачисленияННИ.КБК, """")
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетНалогаНаИмуществоПоКС.СуммаНалогаКУплате) > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&НачалоПериода                                         КАК НачалоПериода,
	|		&ПериодРасчета                                         КАК КонецПериода,
	|		РасчетНалогаНаИмуществоПоСГС.ИФНС                      КАК РегистрацияВНалоговомОргане,
	|		РасчетНалогаНаИмуществоПоСГС.КБК                       КАК КБК,
	|		СУММА(РасчетНалогаНаИмуществоПоСГС.СуммаНалогаКУплате) КАК Сумма
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости КАК РасчетНалогаНаИмуществоПоСГС
	|	ГДЕ
	|		РасчетНалогаНаИмуществоПоСГС.ПериодРасчета = &ПериодРасчета
	|		И РасчетНалогаНаИмуществоПоСГС.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоСГС.Активность
	|	СГРУППИРОВАТЬ ПО
	|		РасчетНалогаНаИмуществоПоСГС.КБК,
	|		РасчетНалогаНаИмуществоПоСГС.ИФНС
	|	ИМЕЮЩИЕ
	|		СУММА(РасчетНалогаНаИмуществоПоСГС.СуммаНалогаКУплате) > 0
	|) КАК НалогНаИмущество
	|
	|СГРУППИРОВАТЬ ПО
	|	НалогНаИмущество.НачалоПериода,
	|	НалогНаИмущество.КонецПериода,
	|	НалогНаИмущество.РегистрацияВНалоговомОргане,
	|	НалогНаИмущество.КБК
	|	";
	
	ДанныеРасчета = Запрос.Выполнить().Выгрузить();
	ДанныеРасчета.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговВзносов"));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого Платеж Из ДанныеРасчета Цикл 
		
		Платеж.ТипНалога = Справочники.ВидыНалоговВзносов.НалогНаИмущество;
		Если Не ЗначениеЗаполнено(Платеж.КБК) Тогда
			Платеж.КБК = Справочники.ВидыНалоговВзносов.КБКПоВидуНалоговогоОбязательства(Платеж.ТипНалога);
		КонецЕсли;
		Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога);
		
	КонецЦикла; 
	
	Возврат ДанныеРасчета;
	
КонецФункции

Функция ДанныеДляУплатыНалогаУСН(Организация, ОкончаниеОтчетногоПериодаДляРасчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРасчета", НачалоДня(ОкончаниеОтчетногоПериодаДляРасчета));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(ОкончаниеОтчетногоПериодаДляРасчета));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&НачалоПериода КАК НачалоПериода,
	|	&ПериодРасчета КАК КонецПериода,
	|	РасчетНалогаУСН.ОбъектНалогообложения КАК ОбъектНалогообложения,
	|	СУММА(РасчетНалогаУСН.НалогКУплате) КАК Сумма,
	|	СУММА(РасчетНалогаУСН.МинимальныйНалог) КАК МинимальныйНалог,
	|	СУММА(РасчетНалогаУСН.НалогИсчисленныйВсего) КАК НалогИсчисленныйВсего,
	|	СУММА(РасчетНалогаУСН.АвансовыеПлатежи) КАК АвансовыеПлатежи
	|ИЗ
	|	РегистрСведений.РасчетНалогаУСН КАК РасчетНалогаУСН
	|ГДЕ
	|	РасчетНалогаУСН.Организация = &Организация
	|	И РасчетНалогаУСН.ПериодРасчета = &ПериодРасчета
	|	И РасчетНалогаУСН.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаУСН.ОбъектНалогообложения
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасчетНалогаУСН.НалогКУплате) > 0";
	
	ДанныеРасчета = Запрос.Выполнить().Выгрузить();
	ДанныеРасчета.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговВзносов"));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ДанныеРасчета.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеРасчета.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	Для Каждого Платеж Из ДанныеРасчета Цикл 
		
		Если Платеж.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда 
			Платеж.ТипНалога = Справочники.ВидыНалоговВзносов.УСН_Доходы;
		ИначеЕсли Платеж.ОбъектНалогообложения = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда 
			Если КонецГода(ОкончаниеОтчетногоПериодаДляРасчета) = ОкончаниеОтчетногоПериодаДляРасчета
				И Платеж.НалогИсчисленныйВсего < Платеж.МинимальныйНалог Тогда
				Платеж.ТипНалога = Справочники.ВидыНалоговВзносов.УСН_МинимальныйНалог;
			Иначе
				Платеж.ТипНалога = Справочники.ВидыНалоговВзносов.УСН_ДоходыМинусРасходы;
			КонецЕсли;
		КонецЕсли;
		Платеж.КБК = Справочники.ВидыНалоговВзносов.КБКПоВидуНалоговогоОбязательства(Платеж.ТипНалога);
		Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога);
		Платеж.РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
		
	КонецЦикла;
	
	Возврат ДанныеРасчета;
	
КонецФункции

Функция ДанныеДляУплатыТорговогоСбора(Организация, ОкончаниеОтчетногоПериодаДляРасчета)
	
	РасчетПоСбору = ТорговыйСбор.СуммаТорговогоСбора(Организация, НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета), ОкончаниеОтчетногоПериодаДляРасчета);
	
	ДанныеРасчета = Новый ТаблицаЗначений;
	ДанныеРасчета.Колонки.Добавить("ТипНалога", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговВзносов"));
	ДанныеРасчета.Колонки.Добавить("КБК", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	ДанныеРасчета.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15,2)); 
	ДанныеРасчета.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеРасчета.Колонки.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДанныеРасчета.Колонки.Добавить("СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ДанныеРасчета.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	Если РасчетПоСбору.Количество() = 0 Тогда
		Возврат ДанныеРасчета;
	КонецЕсли;
	
	Платеж = ДанныеРасчета.Добавить();
	Платеж.ТипНалога = Справочники.ВидыНалоговВзносов.ТорговыйСбор;
	Платеж.КБК = Справочники.ВидыНалоговВзносов.КБКПоВидуНалоговогоОбязательства(Платеж.ТипНалога);
	Платеж.Сумма = РасчетПоСбору.ВыгрузитьКолонку("Сумма");
	Платеж.НачалоПериода = НачалоКвартала(ОкончаниеОтчетногоПериодаДляРасчета);
	Платеж.КонецПериода = ОкончаниеОтчетногоПериодаДляРасчета;
	Платеж.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(Платеж.ТипНалога); 
	Платеж.РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане");
	
	Возврат ДанныеРасчета;
	
КонецФункции

Функция ВидыНалоговПоКБК(Знач ОтчетныйПериод)
	
	Если Не ЗначениеЗаполнено(ОтчетныйПериод)
		ИЛИ ТипЗнч(ОтчетныйПериод) <> Тип("Дата") Тогда
		ОтчетныйПериод = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить("18210602010021000110", Справочники.ВидыНалоговВзносов.НалогНаИмущество);
	Соответствие.Вставить("18210101012021000110", Справочники.ВидыНалоговВзносов.НалогНаПрибыль_РегиональныйБюджет);
	Соответствие.Вставить("18210101011011000110", Справочники.ВидыНалоговВзносов.НалогНаПрибыль_ФедеральныйБюджет);
	Соответствие.Вставить("18210606031031000110", Справочники.ВидыНалоговВзносов.ЗемельныйНалог);
	Соответствие.Вставить("18210604011021000110", Справочники.ВидыНалоговВзносов.ТранспортныйНалог);
	Соответствие.Вставить("18210301000011000110", Справочники.ВидыНалоговВзносов.НДС);
	
	КБКпоНДФЛ = УчетНДФЛ.КБКпоНДФЛ(ОтчетныйПериод);
	Соответствие.Вставить(КБКпоНДФЛ.ПоОблигациям,         Справочники.ВидыНалоговВзносов.НДФЛ);
	Соответствие.Вставить(КБКпоНДФЛ.ДивидендыСПревышения, Справочники.ВидыНалоговВзносов.НДФЛДивидендыСПревышения);
	Соответствие.Вставить(КБКпоНДФЛ.Дивиденды,            Справочники.ВидыНалоговВзносов.НДФЛДивиденды);
	Соответствие.Вставить(КБКпоНДФЛ.СПревышения,          Справочники.ВидыНалоговВзносов.НДФЛСПревышения);
	Соответствие.Вставить(КБКпоНДФЛ.Основной,             Справочники.ВидыНалоговВзносов.НДФЛ);
	
	Возврат Новый ФиксированноеСоответствие(Соответствие);
	
КонецФункции

Процедура ДополнитьТаблицуНалоговДаннымиНА(Организация, ДатаОстатков, ТаблицаНалогов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("СчетНалогов", РеглУчетСервер.СчетУчетаПоТипуНалога(Справочники.ВидыНалоговВзносов.НДС_НалоговыйАгент));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	СУММА(-ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В ИЕРАРХИИ (&СчетНалогов),,
	|			Организация = &Организация
	|		) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3";
	
	ТаблицаНалоговНА = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНалога Из ТаблицаНалоговНА Цикл 
			
		СуммаНалогаКУплате = СтрокаНалога.Сумма;
			
		НоваяСтрока = ТаблицаНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалога);
		НоваяСтрока.ТипНалога = Справочники.ВидыНалоговВзносов.НДС_НалоговыйАгент;
		НоваяСтрока.КодБК = Справочники.ВидыНалоговВзносов.КБКПоВидуНалоговогоОбязательства(Справочники.ВидыНалоговВзносов.НДС_НалоговыйАгент); 
		НоваяСтрока.Сумма  = СуммаНалогаКУплате;
		НоваяСтрока.НачалоПериода = НачалоКвартала(ДобавитьМесяц(ДатаОстатков,-3));
		НоваяСтрока.КонецПериода = КонецКвартала(ДобавитьМесяц(ДатаОстатков,-3));
		НоваяСтрока.СрокУплаты = СрокУплатыПоТипуНалога(НоваяСтрока.ТипНалога, ДатаОстатков);
		НоваяСтрока.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(НоваяСтрока.ТипНалога);
		
	КонецЦикла;
	
	ТаблицаНалогов.Сортировать("ТипНалога Возр, СрокУплаты Возр");
	
КонецПроцедуры

Процедура ДополнитьТаблицуНалоговПрочимиНалогами(Организация, ДатаДокумента, ОтборПоТипамНалогов, ТаблицаНалогов)
	
	ДатаОстатков = ДатаДокумента;
	
	ПрочиеНалоги = Новый Массив;
	СчетаПрочихНалогов = Новый Массив;
	ВидыНалоговСОсобымЗаполнением = ВидыНалоговСОсобымЗаполнением();
	Для Каждого ЭлементСписка Из ОтборПоТипамНалогов Цикл
		Если ВидыНалоговСОсобымЗаполнением.Найти(ЭлементСписка.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПрочиеНалоги.Добавить(ЭлементСписка.Ключ);
		Если ЭлементСписка.Ключ = Справочники.ВидыНалоговВзносов.ПрочиеНалогиИСборы Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаПрочихНалогов, ЭлементСписка.Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ПрочиеНалоги) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрочиеНалоги", ПрочиеНалоги);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыНалогов.Ссылка КАК ТипНалога,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетУчета
	|ИЗ
	|	Справочник.ВидыНалоговВзносов КАК ТипыНалогов
	|ГДЕ
	|	ТипыНалогов.Ссылка В (&ПрочиеНалоги)
	|	И ТипыНалогов.Ссылка <> ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.ПрочиеНалогиИСборы)";
	
	ТипыНалогов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТипыНалогов Цикл
		СтрокаТаблицы.СчетУчета = РеглУчетСервер.СчетУчетаПоТипуНалога(СтрокаТаблицы.ТипНалога);
	КонецЦикла;
	
	Если СчетаПрочихНалогов <> Неопределено Тогда
		
		Для Каждого СчетПрочихНалогов Из СчетаПрочихНалогов Цикл 
			НоваяСтрока = ТипыНалогов.Добавить();
			НоваяСтрока.ТипНалога = Справочники.ВидыНалоговВзносов.ПрочиеНалогиИСборы;
			НоваяСтрока.СчетУчета = СчетПрочихНалогов;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипыНалогов", ТипыНалогов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаНалогов", ТипыНалогов.ВыгрузитьКолонку("СчетУчета"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ТипНалога,
	|	Таблица.СчетУчета
	|ПОМЕСТИТЬ ТипыНалогов
	|ИЗ &ТипыНалогов КАК Таблица
	|;
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	СУММА(-ХозрасчетныйОстатки.СуммаОстаток) КАК Сумма
	|ПОМЕСТИТЬ НалогиКУплате
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В ИЕРАРХИИ (&СчетаНалогов),,
	|			Организация = &Организация
	|		) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3
	|;
	|
	|ВЫБРАТЬ
	|	ТипыНалогов.ТипНалога КАК ТипНалога,
	|	НалогиКУплате.Счет КАК СчетУчета,
	|	НалогиКУплате.Субконто1 КАК Субконто1,
	|	НалогиКУплате.Субконто2 КАК Субконто2,
	|	НалогиКУплате.Субконто3 КАК Субконто3,
	|	НалогиКУплате.Сумма
	|ИЗ
	|	НалогиКУплате КАК НалогиКУплате
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипыНалогов КАК ТипыНалогов
	|	ПО НалогиКУплате.Счет= ТипыНалогов.СчетУчета";
	
	ТаблицаПрочихНалогов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНалога Из ТаблицаПрочихНалогов Цикл
		
		НоваяСтрока = ТаблицаНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалога);
		НоваяСтрока.КодБК = Справочники.ВидыНалоговВзносов.КБКПоВидуНалоговогоОбязательства(СтрокаНалога.ТипНалога);
		НоваяСтрока.НачалоПериода = НачалоМесяца(ДатаОстатков);
		НоваяСтрока.КонецПериода = КонецМесяца(ДатаОстатков);
		НоваяСтрока.СрокУплаты = СрокУплатыПоТипуНалога(НоваяСтрока.ТипНалога, ДатаДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыНалоговСОсобымЗаполнением()
	
	ВидыНалоговВзносов = Новый Массив;
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.НДС);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.НДС_НалоговыйАгент);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.НалогНаПрибыль_РегиональныйБюджет);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.НалогНаПрибыль_ФедеральныйБюджет);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.ЗемельныйНалог);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.ТранспортныйНалог);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.НалогНаИмущество);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.ТорговыйСбор);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.УСН_Доходы);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.УСН_ДоходыМинусРасходы);
	ВидыНалоговВзносов.Добавить(Справочники.ВидыНалоговВзносов.УСН_МинимальныйНалог);
	
	Возврат ВидыНалоговВзносов;
	
КонецФункции

Процедура ДобавитьВТаблицуНалогов(ТаблицаНалогов, Платежи, ПараметрыОтбора)
	
	Если ПараметрыОтбора.Свойство("ТипыНалогов") Тогда
		ОтборПоТипамНалогов = ПараметрыОтбора.ТипыНалогов;
	Иначе
		ОтборПоТипамНалогов = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаНалога Из Платежи Цикл
		Если ОтборПоТипамНалогов = Неопределено Или ОтборПоТипамНалогов.Получить(СтрокаНалога.ТипНалога) <> Неопределено Тогда
			
			НоваяСтрока = ТаблицаНалогов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНалога);
			НоваяСтрока.КодБК = СтрокаНалога.КБК;
			НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
			Если СтрокаНалога.ТипНалога = Справочники.ВидыНалоговВзносов.НалогНаПрибыль_РегиональныйБюджет Тогда
				НоваяСтрока.Субконто2 = Перечисления.УровниБюджетов.РегиональныйБюджет;
				НоваяСтрока.Субконто3 = СтрокаНалога.РегистрацияВНалоговомОргане;
				НоваяСтрока.НачалоПериода = НачалоКвартала(НоваяСтрока.КонецПериода);
			ИначеЕсли СтрокаНалога.ТипНалога = Справочники.ВидыНалоговВзносов.НалогНаПрибыль_ФедеральныйБюджет Тогда
				НоваяСтрока.Субконто2 = Перечисления.УровниБюджетов.ФедеральныйБюджет;
				НоваяСтрока.Субконто3 = СтрокаНалога.РегистрацияВНалоговомОргане;
				НоваяСтрока.НачалоПериода = НачалоКвартала(НоваяСтрока.КонецПериода);
			Иначе
				ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаНалога.СчетУчета);
				Если ДанныеСчета.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане Тогда
					НоваяСтрока.Субконто2 = СтрокаНалога.РегистрацияВНалоговомОргане;
				ИначеЕсли ДанныеСчета.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане Тогда
					НоваяСтрока.Субконто3 = СтрокаНалога.РегистрацияВНалоговомОргане;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаНалога.ТипНалога = Справочники.ВидыНалоговВзносов.НДС
				Или СтрокаНалога.ТипНалога = Справочники.ВидыНалоговВзносов.НДС_НалоговыйАгент Тогда
				НоваяСтрока.СрокУплаты = СрокУплатыПоТипуНалога(СтрокаНалога.ТипНалога, СтрокаНалога.Период);
			Иначе
				НоваяСтрока.СрокУплаты = СрокУплатыПоТипуНалога(СтрокаНалога.ТипНалога, ПараметрыОтбора.ДатаДокумента);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДействующиеРегистрацииВНалоговомОргане(Организация)
	
	МассивОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	Если ЗначениеЗаполнено(Организация.ГоловнаяОрганизация) Тогда
		МассивОрганизаций.Добавить(Организация.ГоловнаяОрганизация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", МассивОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец В (&Организация)
	|	И НЕ РегистрацииВНалоговомОргане.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
