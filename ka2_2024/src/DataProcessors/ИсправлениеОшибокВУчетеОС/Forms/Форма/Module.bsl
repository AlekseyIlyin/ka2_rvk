
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьТекстЗапросовДинамическихСписков();
	
	ВосстановитьНастройки();
	
	НастроитьФормуНаСервере();
	
	#Область СтандартныеМеханизмы
	
	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.СписокДокументыГруппаРеглПроверка);
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ИспользуемыеТипыДокументов = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументы Цикл
		ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;

	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокДокументыКоманднаяПанель;
	ПараметрыРазмещения.ПрефиксГрупп = "СписокДокументы";
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НачатьОбновлениеСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьДокументаВЖурналОС" Тогда
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)

	НачатьОбновлениеСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОсновноеСредствоПриИзменении(Элемент)
	
	НачатьОбновлениеСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	НачатьОбновлениеСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда
		ТекстИнформация = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекущиеДанные.Информация);
	Иначе
		ТекстИнформация = Новый ФорматированнаяСтрока(ИнформацияПоУмолчанию());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.СписокОсновноеСредство
		ИЛИ Поле = Элементы.СписокОсновноеСредствоКод
		ИЛИ Поле = Элементы.СписокОсновноеСредствоИнвентарныйНомер Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.ОсновноеСредство);

	ИначеЕсли Поле = Элементы.СписокПринятиеКУчетуПредставление Тогда
		
		ПоказатьИлиСоздатьДокумент(ТекущиеДанные, "ПринятиеКУчетуОС2_4");
		
	ИначеЕсли Поле = Элементы.СписокИзменениеПараметровПредставление Тогда
		
		ПоказатьИлиСоздатьДокумент(ТекущиеДанные, "ИзменениеПараметровОС2_4");
		
	ИначеЕсли Поле = Элементы.СписокСписаниеПредставление Тогда
		
		ПоказатьИлиСоздатьДокумент(ТекущиеДанные, "СписаниеОС2_4");
		
	ИначеЕсли Поле = Элементы.СписокКорректировкаПредставление Тогда
		
		ПоказатьИлиСоздатьДокумент(ТекущиеДанные, "КорректировкаСтоимостиИАмортизацииОС");
		
	//++ Локализация
	ИначеЕсли Поле = Элементы.СписокПараметрыНачисленияНалогаПредставление Тогда
		
		ПоказатьИлиСоздатьДокумент(ТекущиеДанные, "ПараметрыНачисленияНалога");
		
	ИначеЕсли Поле = Элементы.СписокСнятиеСРегистрацииПредставление Тогда
		
		ПоказатьИлиСоздатьДокумент(ТекущиеДанные, "СнятиеСРегистрации");
		
	ИначеЕсли Поле = Элементы.СписокПерерасчетИмущественныхНалоговПредставление Тогда
		
		ПоказатьИлиСоздатьДокумент(ТекущиеДанные, "ПерерасчетИмущественныхНалогов");
	//-- Локализация
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументы

&НаКлиенте
Процедура СписокДокументыПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокДокументыГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокДокументыГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьПринятиеКУчету(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыДокумента(ТекущиеДанные);
	ОткрытьФорму("Документ.ПринятиеКУчетуОС2_4.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменениеПараметров(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыДокумента(ТекущиеДанные);
	ОткрытьФорму("Документ.ИзменениеПараметровОС2_4.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуСтоимостиИАмортизации(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыДокумента(ТекущиеДанные);
	ОткрытьФорму("Документ.КорректировкаСтоимостиИАмортизацииОС.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписание(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыДокумента(ТекущиеДанные);
	ОткрытьФорму("Документ.СписаниеОС2_4.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

//@skip-check module-empty-method
&НаКлиенте
Процедура СоздатьПараметрыНачисленияЗемельногоНалога(Команда)

	//++ Локализация
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыДокумента(ТекущиеДанные);
	ОткрытьФорму("Документ.ПараметрыНачисленияЗемельногоНалога.ФормаОбъекта", ПараметрыФормы);
	//-- Локализация
	
КонецПроцедуры

//@skip-check module-empty-method
&НаКлиенте
Процедура СоздатьПараметрыНачисленияНалогаНаИмущество(Команда)

	//++ Локализация
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыДокумента(ТекущиеДанные);
	ОткрытьФорму("Документ.ПараметрыНачисленияНалогаНаИмущество.ФормаОбъекта", ПараметрыФормы);
	//-- Локализация
	
КонецПроцедуры

//@skip-check module-empty-method
&НаКлиенте
Процедура СоздатьПараметрыНачисленияТранспортногоНалога(Команда)

	//++ Локализация
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыДокумента(ТекущиеДанные);
	ОткрытьФорму("Документ.ПараметрыНачисленияТранспортногоНалога.ФормаОбъекта", ПараметрыФормы);
	//-- Локализация

КонецПроцедуры

//@skip-check module-empty-method
&НаКлиенте
Процедура СоздатьСнятиеСРегистрацииЗемельныхУчастков(Команда)

	//++ Локализация
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыДокумента(ТекущиеДанные);
	ОткрытьФорму("Документ.СнятиеСРегистрацииЗемельныхУчастков.ФормаОбъекта", ПараметрыФормы);
	//-- Локализация
	
КонецПроцедуры

//@skip-check module-empty-method
&НаКлиенте
Процедура СоздатьСнятиеСРегистрацииТранспортныхСредств(Команда)
	
	//++ Локализация
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	ПараметрыФормы = ПараметрыФормыДокумента(ТекущиеДанные);
	ОткрытьФорму("Документ.СнятиеСРегистрацииТранспортныхСредств.ФормаОбъекта", ПараметрыФормы);
	//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокДокументы, Заголовок);
	
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	ВнеоборотныеАктивыКлиент.ОповеститьОЗаписиДокументаВЖурналОС();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокДокументы, Заголовок);

	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	ВнеоборотныеАктивыКлиент.ОповеститьОЗаписиДокументаВЖурналОС();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.СписокДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокДокументы, Заголовок);
	
	ОбщегоНазначенияУТКлиент.ОповеститьОЗаписиДокументаВЖурнал();
	ВнеоборотныеАктивыКлиент.ОповеститьОЗаписиДокументаВЖурналОС();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПроводкиМеждународногоУчета(Команда)
	
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнформацию(Команда)

	Элементы.СписокПоказатьИнформацию.Пометка = НЕ Элементы.СписокПоказатьИнформацию.Пометка;
	
	Элементы.ДекорацияИнформация.Видимость = Элементы.СписокПоказатьИнформацию.Пометка;
	Элементы.ТекстИнформация.Видимость = Элементы.СписокПоказатьИнформацию.Пометка;
	Элементы.ДекорацияПодвалКартинка.Видимость = Элементы.СписокПоказатьИнформацию.Пометка;
	Элементы.ДекорацияПодвалИнформация.Видимость = Элементы.СписокПоказатьИнформацию.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	НачатьОбновлениеСписка();
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.СписокДокументы);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДанныеКогдаФормаСтанетАктивной()

	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной", 0.8, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеКогдаФормаСтанетАктивной()
	
	Если ВводДоступен() И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		НачатьОбновлениеСписка();
	Иначе
		ОбновитьДанныеКогдаФормаСтанетАктивной();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеСписка()
	ПодключитьОбработчикОжидания("Подключаемый_НачатьОбновлениеСписка", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьОбновлениеСписка()
	
	ДлительнаяОперация = ОбновитьСписокНаСервере();
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("НачатьОбновлениеСпискаЗавершение", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Обновление'");
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется получение данных'");
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСписокНаСервере()
	
	СохранитьНастройки();
	
	УстановитьОтборыДинамическогоСписка();
		
	ПараметрыРабочегоМеста = Новый Структура;
	ПараметрыРабочегоМеста.Вставить("ОтборПериод", ОтборПериод);
	ПараметрыРабочегоМеста.Вставить("ОтборОсновноеСредство", ОтборОсновноеСредство);
	ПараметрыРабочегоМеста.Вставить("ОтборОрганизация", ОтборОрганизация);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения, "Обработки.ИсправлениеОшибокВУчетеОС.ДанныеРабочегоМеста", ПараметрыРабочегоМеста);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура НачатьОбновлениеСпискаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОбновлениеСпискаЗавершениеНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеСпискаЗавершениеНаСервере(Знач Результат)

	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ДанныеСтроки = Список.НайтиПоИдентификатору(ТекущаяСтрока);
		ДанныеТекущейСтроки = Новый Структура("ОсновноеСредство");
		ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ДанныеСтроки);
	Иначе
		ДанныеТекущейСтроки = Неопределено;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Список.Очистить();
		КоличествоСтрокСписок = 0;
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ДанныеРабочегоМеста = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ДанныеРабочегоМеста = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Список.Загрузить(ДанныеРабочегоМеста.ДанныеСписка);
	
	КоличествоСтрокСписок = Список.Количество();
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		РезультатПоиска = Список.НайтиСтроки(ДанныеТекущейСтроки);
		Если РезультатПоиска.Количество() <> 0 Тогда
			Элементы.Список.ТекущаяСтрока = РезультатПоиска[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);
	АдресХранилища = ПоместитьВоВременноеХранилище(ДанныеРабочегоМеста.ДанныеДокументов, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ОтборПериод.Вариант = ВариантСтандартногоПериода.ЭтотМесяц;
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		Метаданные.Обработки.ИсправлениеОшибокВУчетеОС.ПолноеИмя(), 
		КлючНазначенияИспользования);
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		Возврат
	КонецЕсли;
	
	ОтборПериод = Настройки.ОтборПериод;
	ОтборОсновноеСредство = Настройки.ОтборОсновноеСредство;
	ОтборОрганизация = Настройки.ОтборОрганизация;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ИменаСохраняемыхРеквизитов = "ОтборПериод,ОтборОсновноеСредство,ОтборОрганизация";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		Метаданные.Обработки.ИсправлениеОшибокВУчетеОС.ПолноеИмя(), 
		КлючНазначенияИспользования, 
		Настройки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
		
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокДокументы.Дата", "СписокДокументыДата");
		
	#Область СписокПринятиеКУчетуПредставление_ЦветТекста
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокПринятиеКУчетуПредставление.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокИзменениеПараметровПредставление.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокСписаниеПредставление.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокКорректировкаПредставление.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокПараметрыНачисленияНалогаПредставление.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокСнятиеСРегистрацииПредставление.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокПерерасчетИмущественныхНалоговПредставление.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	
	#КонецОбласти

	#Область СписокПринятиеКУчетуПредставление_Текст
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокПринятиеКУчетуПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПринятиеКУчетуПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создать'"));
	
	#КонецОбласти

	#Область СписокИзменениеПараметровПредставление_Текст
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокИзменениеПараметровПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ИзменениеПараметровПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создать'"));
	
	#КонецОбласти
	
	#Область СписокСписаниеПредставление_Текст
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокСписаниеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СписаниеПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создать'"));
	
	#КонецОбласти
	
	#Область СписокКорректировкаПредставление_Текст
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокКорректировкаПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.КорректировкаПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создать'"));
	
	#КонецОбласти
	
	#Область СписокПараметрыНачисленияНалогаПредставление_Текст
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокПараметрыНачисленияНалогаПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПараметрыНачисленияНалогаПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создать'"));
	
	#КонецОбласти
	
	#Область СписокСнятиеСРегистрацииПредставление_Текст
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокСнятиеСРегистрацииПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СнятиеСРегистрацииПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГруппаОС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокГрупп.ВыгрузитьЗначения();

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создать'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокСнятиеСРегистрацииПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СнятиеСРегистрацииПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ГруппаОС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокГрупп.ВыгрузитьЗначения();

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется'"));
	
	#КонецОбласти
	
	#Область СписокПерерасчетИмущественныхНалоговПредставление_Текст
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Элементы.СписокПерерасчетИмущественныхНалоговПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПерерасчетИмущественныхНалоговПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Создать'"));
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравам()

	ИспользоватьРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ПринятиеКУчетуОС2_4) Тогда
		Элементы.СоздатьПринятиеКУчету.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ИзменениеПараметровОС2_4) Тогда
		Элементы.СоздатьИзменениеПараметров.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС) Тогда
		Элементы.СоздатьКорректировкуСтоимостиИАмортизации.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СписаниеОС2_4) Тогда
		Элементы.СоздатьСписание.Видимость = Ложь;
	КонецЕсли;
	
	//++ Локализация
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество)
		ИЛИ НЕ ИспользоватьРеглУчет Тогда
		Элементы.СоздатьПараметрыНачисленияНалогаНаИмущество.Видимость = Ложь;
	КонецЕсли;

	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ПараметрыНачисленияТранспортногоНалога)
		ИЛИ НЕ ИспользоватьРеглУчет Тогда
		Элементы.СоздатьПараметрыНачисленияТранспортногоНалога.Видимость = Ложь;
	КонецЕсли;

	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ПараметрыНачисленияЗемельногоНалога)
		ИЛИ НЕ ИспользоватьРеглУчет Тогда
		Элементы.СоздатьПараметрыНачисленияЗемельногоНалога.Видимость = Ложь;
	КонецЕсли;

	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СнятиеСРегистрацииТранспортныхСредств)
		ИЛИ НЕ ИспользоватьРеглУчет Тогда
		Элементы.СоздатьСнятиеСРегистрацииТранспортныхСредств.Видимость = Ложь;
	КонецЕсли;

	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СнятиеСРегистрацииЗемельныхУчастков)
		ИЛИ НЕ ИспользоватьРеглУчет Тогда
		Элементы.СоздатьСнятиеСРегистрацииЗемельныхУчастков.Видимость = Ложь;
	КонецЕсли;
	//-- Локализация
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИлиСоздатьДокумент(ТекущиеДанные, ИмяДокумента)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДанныеДокументовОС = ДанныеДокументовОС(ТекущиеДанные.ОсновноеСредство, АдресХранилища); // Структура
	
	Если ДанныеДокументовОС <> Неопределено
		И ДанныеДокументовОС.Свойство(ИмяДокумента) Тогда
	
		СписокДокументов = ДанныеДокументовОС[ИмяДокумента];
		
		Если СписокДокументов.Количество() = 1 Тогда
			
			ПоказатьЗначение(, СписокДокументов[0].ДокументСсылка);
		
		Иначе
			
			СписокВыбора = Новый СписокЗначений();
			Для Каждого СтрокаДокумент Из СписокДокументов Цикл
				СписокВыбора.Добавить(СтрокаДокумент.ДокументСсылка);
			КонецЦикла;
			
			ОповещениеОВыборе = Новый ОписаниеОповещения("ВыборДокументаЗавершение", ЭтотОбъект);
			СписокВыбора.ПоказатьВыборЭлемента(ОповещениеОВыборе);
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыОснования = Новый Структура;
		ПараметрыОснования.Вставить("ОсновноеСредство", ТекущиеДанные.ОсновноеСредство);
		ПараметрыОснования.Вставить("РежимИсправленияСПрошлойДаты", Истина);
		ПараметрыФормы.Вставить("Основание", ПараметрыОснования);
		
		Если ИмяДокумента = "ПараметрыНачисленияНалога" Тогда
			
			//++ Локализация
			Если ТекущиеДанные.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ЗемельныеУчастки") Тогда
				ОткрытьФорму("Документ.ПараметрыНачисленияЗемельногоНалога.ФормаОбъекта", ПараметрыФормы);
			ИначеЕсли ТекущиеДанные.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ТранспортныеСредства")
				ИЛИ ТекущиеДанные.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.МашиныИОборудование") Тогда
				ОткрытьФорму("Документ.ПараметрыНачисленияТранспортногоНалога.ФормаОбъекта", ПараметрыФормы);
			Иначе
				ОткрытьФорму("Документ.ПараметрыНачисленияНалогаНаИмущество.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
			//-- Локализация
			
		ИначеЕсли ИмяДокумента = "СнятиеСРегистрации" Тогда
			
			//++ Локализация
			Если ТекущиеДанные.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ЗемельныеУчастки") Тогда
				ОткрытьФорму("Документ.СнятиеСРегистрацииЗемельныхУчастков.ФормаОбъекта", ПараметрыФормы);
			ИначеЕсли ТекущиеДанные.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.ТранспортныеСредства")
				ИЛИ ТекущиеДанные.ГруппаОС = ПредопределенноеЗначение("Перечисление.ГруппыОС.МашиныИОборудование") Тогда
				ОткрытьФорму("Документ.СнятиеСРегистрацииТранспортныхСредств.ФормаОбъекта", ПараметрыФормы);
			КонецЕсли;
			//-- Локализация
			
		Иначе
			ОткрытьФорму("Документ" + "." + ИмяДокумента + "." + "ФормаОбъекта", ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДокументовОС(Знач ОсновноеСредство, Знач АдресХранилища)
	
	ДанныеДокументов = ПолучитьИзВременногоХранилища(АдресХранилища); // Соответствие
	Если ДанныеДокументов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДокументовОС = ДанныеДокументов.Получить(ОсновноеСредство);
	
	Возврат ДанныеДокументовОС;
	
КонецФункции

&НаКлиенте
Процедура ВыборДокументаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ПоказатьЗначение(, ВыбранныйЭлемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыДокумента(ТекущиеДанные)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("РежимИсправленияСПрошлойДаты", Истина);
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыОснования.Вставить("ОсновноеСредство", ТекущиеДанные.ОсновноеСредство);
	
	Иначе
		
		Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
			ПараметрыОснования.Вставить("Организация", ОтборОрганизация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборОсновноеСредство) Тогда
			ПараметрыОснования.Вставить("ОсновноеСредство", ОтборОсновноеСредство);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Основание", ПараметрыОснования);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь)
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ИзменениеПараметровОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ИзменениеПараметровОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.КорректировкаСтоимостиИАмортизацииОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеОС;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеУзловКомпонентовАмортизации;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.СписаниеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	//++ Локализация
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
	
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СнятиеСРегистрацииЗемельныхУчастков;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.СнятиеСРегистрацииЗемельныхУчастков.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
		Строка.ДобавитьКнопкуСоздать        = Истина;
	
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СнятиеСРегистрацииТранспортныхСредств;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.СнятиеСРегистрацииТранспортныхСредств.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПараметрыНачисленияЗемельногоНалога;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПараметрыНачисленияЗемельногоНалога.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПараметрыНачисленияНалогаНаИмущество;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПараметрыНачисленияНалогаНаИмущество.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПараметрыНачисленияТранспортногоНалога;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПараметрыНачисленияТранспортногоНалога.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПерерасчетНалогаНаИмущество;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПерерасчетИмущественныхНалогов.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПерерасчетТранспортногоНалога;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПерерасчетИмущественныхНалогов.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ПерерасчетЗемельногоНалога;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПерерасчетИмущественныхНалогов.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
		Строка.ДобавитьКнопкуСоздать        = Истина;
		
	КонецЕсли;
	//-- Локализация
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНазначенияИспользования);
	
	Возврат ТаблицаЗначенийДоступно;
		
КонецФункции

&НаСервере
Процедура УстановитьТекстЗапросовДинамическихСписков()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыПоОСПереопределяемый.ОсновноеСредство,
	|	ДокументыПоОСПереопределяемый.Ссылка,
	|	ДокументыПоОСПереопределяемый.Организация,
	|	ДокументыПоОСПереопределяемый.Дата КАК Дата,
	|	ДокументыПоОСПереопределяемый.НачалоПериодаИсправления КАК НачалоПериодаИсправления,
	|	ДокументыПоОСПереопределяемый.КонецПериодаИсправления КАК КонецПериодаИсправления,
	|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
	|	ДокументыПоОСПереопределяемый.ХозяйственнаяОперация,
	|	ДокументыПоОСПереопределяемый.Подразделение,
	|	РеестрДокументовПереопределяемый.Ответственный,
	|	РеестрДокументовПереопределяемый.Дополнительно,
	|	РеестрДокументовПереопределяемый.Комментарий,
	|	ДокументыПоОСПереопределяемый.Проведен,
	|	РеестрДокументовПереопределяемый.ПометкаУдаления,
	|
	|	ВЫБОР
	|		КОГДА ДокументыПоОСПереопределяемый.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументовПереопределяемый.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НестандартнаяКартинка,
	|
	|	ДокументыПоОСПереопределяемый.ДополнительнаяЗапись,
	|	РеестрДокументовПереопределяемый.ДополнительнаяЗапись КАК ДополнительнаяЗаписьРеестр,
	|	ДокументыПоОСПереопределяемый.ТипСсылки,
	|	ТИПЗНАЧЕНИЯ(ДокументыПоОСПереопределяемый.Ссылка) КАК ТипСсылкиДокумента,
	|	&СтатусПроверки КАК СтатусПроверки,
	|	ВЫРАЗИТЬ(&ИндикаторПроверки КАК БУЛЕВО) КАК ИндикаторПроверки,
	|
	|	ВЫБОР
	|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьФайлы
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОСПереопределяемый
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовПереопределяемый
	|		ПО (РеестрДокументовПереопределяемый.Ссылка = ДокументыПоОСПереопределяемый.Ссылка)
	|			И (НЕ РеестрДокументовПереопределяемый.ДополнительнаяЗапись)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайловПереопределяемый
	|		ПО ДокументыПоОСПереопределяемый.Ссылка = НаличиеФайловПереопределяемый.ОбъектСФайлами
	|		
	|ГДЕ
	|
	|	ДокументыПоОСПереопределяемый.ЭтоИсправление
	|	
	|{ГДЕ
	|	ДокументыПоОСПереопределяемый.ОсновноеСредство.* КАК ОсновноеСредство,
	|	ДокументыПоОСПереопределяемый.Ссылка.* КАК Ссылка,
	|	ДокументыПоОСПереопределяемый.Организация.* КАК Организация,
	|	ДокументыПоОСПереопределяемый.Дата КАК Дата,
	|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
	|	ДокументыПоОСПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументыПоОСПереопределяемый.Подразделение.* КАК Подразделение,
	|	РеестрДокументовПереопределяемый.Ответственный.* КАК Ответственный,
	|	РеестрДокументовПереопределяемый.Дополнительно КАК Дополнительно,
	|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
	|	ДокументыПоОСПереопределяемый.Проведен КАК Проведен,
	|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
	|
	|	(ДокументыПоОСПереопределяемый.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1)
	|			И ДокументыПоОСПереопределяемый.Дата >= &НачалоПериода)}";
	
	//++ Локализация
	
	// ПроверкаДокументовВРеглУчете
	ПроверкаДокументовСервер.ДоработатьЗапросДинамическогоСпискаЖурналаДокументов(ТекстЗапроса, "РеестрДокументовПереопределяемый");
	// Конец ПроверкаДокументовВРеглУчете
	
	//-- Локализация
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокДокументы, СвойстваСписка);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокДокументов()

	ТаблицаЗначенийДоступно = ИнициализироватьХозяйственныеОперацииИДокументы(
		ХозяйственныеОперацииИДокументы.Выгрузить(),
		ОтборХозяйственныеОперации,
		ОтборТипыДокументов,
		КлючНастроек);
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаЗначенийДоступно);
	
	ОбщегоНазначенияУТ.ДанныеРабочегоМеста(
		ХозяйственныеОперацииИДокументы.Выгрузить(), 
		КлючНазначенияФормыПоУмолчанию(), 
		НСтр("ru = 'все'"));
	
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.СписокДокументы, ХозяйственныеОперацииИДокументы);

	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма = ЭтотОбъект;
	СтруктураПараметров.ИмяГруппыСоздать = "СписокДокументыГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст = "СписокДокументыГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать = "СписокДокументыСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню = "СписокДокументыСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить = "СписокДокументыИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню = "СписокДокументыИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести = "СписокДокументыПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню = "СписокДокументыПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения = "СписокДокументыОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню = "СписокДокументыОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления = "СписокДокументыУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню = "СписокДокументыУстановитьПометкуУдаленияКонтекст";
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, ОтборыДляСозданияДокумента());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	
	КлючФормы = КлючНазначенияФормыПоУмолчанию();
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(АдресХозяйственныеОперацииИДокументы,
		КлючФормы, КлючНазначенияИспользования, ОтборыДляСозданияДокумента());
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокДокументы);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Функция ОтборыДляСозданияДокумента()
	
	СтруктураОтборы = Новый Структура;
	СтруктураОтборы.Вставить("РежимИсправленияСПрошлойДаты", Истина);
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураОтборы.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОсновноеСредство) Тогда
		СтруктураОтборы.Вставить("ОсновноеСредство", ОтборОсновноеСредство);
	КонецЕсли;
	
	Возврат СтруктураОтборы;
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументы,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперации,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументы,
		"ТипСсылки",
		ОтборТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументы,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументы,
		"ДополнительнаяЗапись",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		НЕ ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументы,
		"ОсновноеСредство",
		ОтборОсновноеСредство,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОсновноеСредство));
		
	СписокДокументы.Параметры.УстановитьЗначениеПараметра("НачалоПериода", ОтборПериод.ДатаНачала);
	
	СписокДокументы.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(ОтборПериод.ДатаОкончания),
			КонецДня(ОтборПериод.ДатаОкончания),
			КонецДня(Дата(3999, 12, 31))));
			
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуНаСервере()
	
	ИмяСтиляШрифтНаклонный = Метаданные.ЭлементыСтиля.ШрифтНаклонныйУП.Имя;

	НастроитьФормуПоПравам();
	НастроитьСписокДокументов();
	
	Если Параметры.Свойство("Отбор") Тогда
		
		Параметры.Отбор.Свойство("Период", ОтборПериод);
		Параметры.Отбор.Свойство("ОсновноеСредство", ОтборОсновноеСредство);
		Параметры.Отбор.Свойство("Организация", ОтборОрганизация);
		
	КонецЕсли;

	//++ Локализация
	СписокГрупп.Добавить(Перечисления.ГруппыОС.ТранспортныеСредства);
	СписокГрупп.Добавить(Перечисления.ГруппыОС.МашиныИОборудование);
	СписокГрупп.Добавить(Перечисления.ГруппыОС.ЗемельныеУчастки);
	//-- Локализация
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Элементы.СписокПараметрыНачисленияНалогаПредставление.Видимость = Ложь;
		Элементы.СписокСнятиеСРегистрацииПредставление.Видимость = Ложь;
		Элементы.СписокПерерасчетИмущественныхНалоговПредставление.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РегламентированныйУчетВНА") Тогда

		//@skip-check module-nstr-camelcase
		Текст = СтрШаблон(НСтр("ru = 'Исправление ошибок в учете выполняется в несколько этапов:<b>
							   |1. Исправить учетные данные</b>
							   |Для этого создается соответствующий документ, в котором указываются правильные данные, выбирается режим <span style=""font:%1"">Параметры действуют с прошлой даты</span>.
							   |Например, если при принятии к учету был указан неправильный срок использования, то требуется создать изменение параметров, указать правильный срок, выбрать режим <span style=""font:%1"">Параметры действуют с прошлой даты</span> и указать с какой даты должен был измениться срок.<b>
							   |2. Скорректировать стоимость или амортизацию</b>
							   |Если неправильный срок использования привел к неправильному расчету амортизации, то требуется создать корректировку стоимости и амортизации, указать, что корректируется только амортизация, выбирать режим <span style=""font:%1"">Корректировка с прошлой даты</span>, с помощью закладки <span style=""font:%1"">Параметры учета</span> рассчитать амортизацию и указать нужные суммы на закладке <span style=""font:%1"">Основные средства</span>.<b>
							   |3. Пересчитать имущественные налоги</b>
							   |После исправления учетных данных и корректировки стоимости или амортизации может потребоваться доначислить налог или зачесть переплату, для этого создается документ <span style=""font:%1"">Перерасчет имущественных налогов</span>.
							   |С помощью документа можно рассчитать сумму налога с учетом сделанных исправлений и определить сумму для доначисления или возмещения.'"), 
						 ИмяСтиляШрифтНаклонный);
		
		Элементы.ДекорацияПодвалИнформация.РасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Текст);
		
	Иначе
		
		//@skip-check module-nstr-camelcase
		Текст = СтрШаблон(НСтр("ru = 'Исправление ошибок в учете выполняется в несколько этапов:<b>
							   |1. Исправить учетные данные</b>
							   |Для этого создается соответствующий документ, в котором указываются правильные данные, выбирается режим <span style=""font:%1"">Параметры действуют с прошлой даты</span>.
							   |Например, если при принятии к учету был указан неправильный срок использования, то требуется создать изменение параметров, указать правильный срок, выбрать режим <span style=""font:%1"">Параметры действуют с прошлой даты</span> и указать с какой даты должен был измениться срок.<b>
							   |2. Скорректировать стоимость или амортизацию</b>
							   |Если неправильный срок использования привел к неправильному расчету амортизации, то требуется создать корректировку стоимости и амортизации, указать, что корректируется только амортизация, выбирать режим <span style=""font:%1"">Корректировка с прошлой даты</span>, с помощью закладки <span style=""font:%1"">Параметры учета</span> рассчитать амортизацию и указать нужные суммы на закладке <span style=""font:%1"">Основные средства</span>.'"),
						 ИмяСтиляШрифтНаклонный);
						 
		Элементы.ДекорацияПодвалИнформация.РасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Текст);
				  
	КонецЕсли;
	
	ТекстИнформация = Новый ФорматированнаяСтрока(ИнформацияПоУмолчанию());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ИсправлениеОшибокВУчетеОС";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнформацияПоУмолчанию()

	ТекстИнформация = НСтр("ru = 'Для получения информации необходимо выбрать строку списка.
						   |В списке отображаются документы проведенные в режиме ""с прошлой даты"".
						   |Если список пустой, то необходимо создать соответствующий документ.
						   |Например, если при принятии к учету был указан неправильный срок использования, то требуется создать изменение параметров и указать правильный срок.'");
						   
	Возврат ТекстИнформация;
		
КонецФункции

#КонецОбласти
