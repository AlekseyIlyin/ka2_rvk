
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// НастройкиДинамическихСписков
	ИнициироватьНастройкиДинамическихСписков();
	// Конец НастройкиДинамическихСписков
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	Если Не Параметры.Свойство("КлючНазначенияФормы")
		Или ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = "ДокументыПоАренде";
		КлючНастроек = "";
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
		КлючНастроек                = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	СписокДокументовРежимАвтообновления = Истина;
	Если Параметры.Свойство("ОтборыФормыСписка") Тогда
		ФормыОткрытаПоГиперссылке = Истина;
		ОтборТипыДокументов = Параметры.ОтборыФормыСписка.ОтборТипыДокументов;
		ОтборХозяйственныеОперации = Параметры.ОтборыФормыСписка.ОтборХозяйственныеОперации;
	Иначе
		ВосстановитьНастройки();
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("МестоРазмещенияДанныхПроверкиРегл", Элементы.СписокГруппаРеглПроверка);
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
	ТЗХозОперацииИТипыДокументов = ИнициализироватьХозяйственныеОперацииИДокументы(
		ХозяйственныеОперацииИДокументы.Выгрузить(),
		ОтборХозяйственныеОперации,
		ОтборТипыДокументов,
		КлючНастроек);
	
	ХозяйственныеОперацииИДокументы.Загрузить(ТЗХозОперацииИТипыДокументов);
	
	УстановитьТекстЗапросаСписок();
	УстановитьОтборыДинамическогоСписка();
	УстановитьПараметрыВыбора();
	
	НастроитьЭлементыФормыПриСоздании();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, 
		ХозяйственныеОперацииИДокументы, 
		ОтборТипыДокументов, 
		ОтборХозяйственныеОперации);
	
	ИспользуемыеТипыДокументов = ТЗХозОперацииИТипыДокументов.ВыгрузитьКолонку("ТипДокумента");
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(Список);
	
	Если ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно() Тогда
		Элементы.ЕстьОшибкиПроверкиКонтрагентов.Видимость = Истина;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.Сторно"));
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ИспользуемыеТипыДокументов.Количество() > 0 Тогда
		ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
		ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
		ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
		ПараметрыРазмещения.ПрефиксГрупп = "Список";
		ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	КонецЕсли
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// НастройкиДинамическихСписков
	УстановитьПараметрыОбновленияСписковДокументов(Ложь, 0);
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ТребуетсяОбновлениеСписка = Ложь;
	Если ИмяСобытия = "Запись_Файл"
		Или ИмяСобытия = "Проведение_Сторно"
		Или ИмяСобытия = "Запись_Сторно" Тогда
			
		ТребуетсяОбновлениеСписка = Истина;
		
	ИначеЕсли СтрНайти(ИмяСобытия, "Запись_") <> 0 Тогда
		
		Для каждого СтрокаДокумент Из ХозяйственныеОперацииИДокументы Цикл
			ИмяСобытияЗаписьДокумента = СтрЗаменить(СтрокаДокумент.ПолноеИмяДокумента, "Документ.", "Запись_");
			Если ИмяСобытияЗаписьДокумента = ИмяСобытия Тогда
				ТребуетсяОбновлениеСписка = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТребуетсяОбновлениеСписка Тогда
		// НастройкиДинамическихСписков
		ОбновитьСписокДокументовСобытиеОбработкаОповещения("Список", Параметр);
		// Конец НастройкиДинамическихСписков
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартнерПриИзменении(Элемент)
	
	ПриИзмененииОтбора();

КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговорПриИзменении(Элемент)
	
	ПриИзмененииОтбора();

КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьОтборОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы());
	
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ПараметрыФормы.Вставить("КлючФормы", КлючНазначенияФормыПоУмолчанию());
	
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
	ПараметрыФормы,,,,,Новый ОписаниеОповещения("УстановитьОтборыПоХозОперациямИДокументам", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы.Количество() <> 0 Тогда 
		Если Копирование Тогда
			ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
		ИначеЕсли ОтборТипыДокументов.Количество() = 1 И ОтборХозяйственныеОперации.Количество() = 1 Тогда 
			СтруктураКоманды = Новый Структура("Имя", Элементы.СписокГруппаСоздатьГенерируемая.ПодчиненныеЭлементы[0].Имя);
			Подключаемый_СоздатьДокумент(СтруктураКоманды);
		Иначе
			Подключаемый_СоздатьДокументЧерезФормуВыбора(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(Элемент, СтандартнаяОбработка)
	
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "Список");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Список

&НаКлиенте
Процедура СписокУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(СписокИнтервал,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзменить(Команда)
	
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.Список, Заголовок,
		РаботаСЖурналамиДокументовКлиент.ПараметрыОбновленияСпискаДокументов(ЭтотОбъект, "Список"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.Список, Заголовок,
		РаботаСЖурналамиДокументовКлиент.ПараметрыОбновленияСпискаДокументов(ЭтотОбъект, "Список"));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.Список, Заголовок, Неопределено,
		РаботаСЖурналамиДокументовКлиент.ПараметрыОбновленияСпискаДокументов(ЭтотОбъект, "Список"));
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СоздатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезКоманду(Команда.Имя, ОтборыДляСозданияДокумента());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоздатьДокументЧерезФормуВыбора(Команда)
	
	КлючФормы = КлючНазначенияФормыПоУмолчанию();
	АдресХозяйственныеОперацииИДокументы = ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы();
	ОбщегоНазначенияУТКлиент.СоздатьДокументЧерезФормуВыбора(АдресХозяйственныеОперацииИДокументы,
		КлючФормы, КлючНазначенияИспользования, ОтборыДляСозданияДокумента());
		
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СписокДокументовОбновить(Команда)
	
	// НастройкиДинамическихСписков
	ОбновитьДанныеСпискаДокументовСЗамеромВремени("Список");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ЖурналДокументовАренды.Форма.ДокументыЛизинг", КлючНазначенияИспользования);
	
	СписокДокументовРежимАвтообновления = Истина;
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
	
		СписокИнтервал = Настройки.СписокИнтервал;

		Настройки.Свойство("ОтборОрганизация", ОтборОрганизация);
		Настройки.Свойство("ОтборПартнер", ОтборПартнер);
		Настройки.Свойство("ОтборКонтрагент", ОтборКонтрагент);
		Настройки.Свойство("ОтборДоговор", ОтборДоговор);
		
		Настройки.Свойство("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
		Настройки.Свойство("ОтборТипыДокументов", ОтборТипыДокументов);
		
		Если Настройки.Свойство("СписокДокументовРежимАвтообновления") Тогда
			СписокДокументовРежимАвтообновления = Настройки.СписокДокументовРежимАвтообновления;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормыОткрытаПоГиперссылке Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"СписокИнтервал,
		|ОтборОрганизация,ОтборПартнер,ОтборКонтрагент,ОтборДоговор,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов,
		|СписокДокументовРежимАвтообновления";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЖурналДокументовАренды.Форма.ДокументыЛизинг", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ПолноеИмяДокумента") Тогда
						
			Отбор = Новый Структура();
			Отбор.Вставить("ПолноеИмяДокумента", Параметры.СтруктураБыстрогоОтбора.ПолноеИмяДокумента);
			
			НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Отбор = Истина;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		// Если доступны контрагенты, то отбор по партнеру избыточен.
		Элементы.ОтборПартнер.Видимость = Ложь;
	Иначе
		Элементы.СписокКонтрагент.Видимость = Ложь;
		Элементы.ОтборКонтрагент.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Элементы.ОтборОрганизация.Видимость = Ложь;
		Элементы.СписокОрганизация.Видимость = Ложь;
	КонецЕсли;
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов()
	
	ОбщегоНазначенияУТ.ДанныеРабочегоМеста(
		ХозяйственныеОперацииИДокументы.Выгрузить(), 
		КлючНазначенияФормыПоУмолчанию(), 
		НСтр("ru = 'все'"));
	
	НастроитьКнопкиУправленияДокументами();
	
	ОбщегоНазначенияУТ.ЗаменитьПолеСсылкаКонструкциейВыразитьПоТипамДокументов(Элементы.Список,
		ХозяйственныеОперацииИДокументы);
	
КонецПроцедуры

// Определяет состав документов и хозяйственных операций, доступных для отображения в рабочем месте.
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка
//  ОтборХозяйственныеОперации		 - СписокЗначений из ПеречислениеСсылка.ХозяйственныеОперации
//  ОтборТипыДокументов				 - СписокЗначений из СправочникСсылка.ИдентификаторыОбъектовМетаданных
//  КлючНазначенияИспользования		 - Строка - ключ рабочего места для которого вызывается функция
//  ДокументыКОформлению			 - Булево - признак вызова метода для формы "ФормаСпискаКОформлению".
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка.
//
//
&НаСервереБезКонтекста
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов, КлючНазначенияИспользования, ДокументыКОформлению = Ложь)
	
	#Область УчетУАрендатораНаБалансе
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ЗаключениеДоговораАренды;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ЗаключениеДоговораАренды");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ЗаключениеДоговораАренды.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Заключение договора аренды'");
	Строка.Порядок                      = 1;
	Строка.ГруппаКнопок                 = "УчетУАрендатораНаБалансе";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПринятиеКУчетуОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Принятие к учету предметов аренды'");
	Строка.Порядок                      = 2;
	Строка.ГруппаКнопок                 = "УчетУАрендатораНаБалансе";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.СписаниеОС;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.СписаниеОС2_4");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.СписаниеОС2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Списание предметов аренды'");
	Строка.Порядок                      = 2;
	Строка.ГруппаКнопок                 = "УчетУАрендатораНаБалансе";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПоступлениеУслугПоАренде;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПоступлениеУслугПоАренде");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПоступлениеУслугПоАренде.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Поступление услуг по аренде'");
	Строка.Порядок                      = 3;
	Строка.ГруппаКнопок                 = "УчетУАрендатораНаБалансе";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ИзменениеУсловийДоговораАренды;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ИзменениеУсловийДоговораАренды");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ИзменениеУсловийДоговораАренды.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Изменение условий договора аренды ОС'");
	Строка.Порядок                      = 4;
	Строка.ГруппаКнопок                 = "УчетУАрендатораНаБалансе";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ВыкупАрендованныхОС;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВыкупАрендованныхОС");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ВыкупАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Выкуп арендованных ОС'");
	Строка.Порядок                      = 5;
	Строка.ГруппаКнопок                 = "УчетУАрендатораНаБалансе";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ДосрочныйВыкупАрендованныхОС;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВыкупАрендованныхОС");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ВыкупАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Досрочный выкуп арендованных ОС'");
	Строка.Порядок                      = 6;
	Строка.ГруппаКнопок                 = "УчетУАрендатораНаБалансе";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПрекращениеДоговораАренды;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПрекращениеДоговораАренды");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПрекращениеДоговораАренды.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Прекращение договоров аренды'");
	Строка.Порядок                      = 7;
	Строка.ГруппаКнопок                 = "УчетУАрендатораНаБалансе";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ДосрочноеПрекращениеДоговораАренды;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПрекращениеДоговораАренды");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПрекращениеДоговораАренды.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Досрочное прекращение договоров аренды'");
	Строка.Порядок                      = 8;
	Строка.ГруппаКнопок                 = "УчетУАрендатораНаБалансе";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	#КонецОбласти
	
	#Область УчетУАрендатораЗаБалансом
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПоступлениеАрендованныхОС;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПоступлениеАрендованныхОС");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПоступлениеАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Поступление арендованных ОС (забалансовый учет)'");
	Строка.ДокументПредставление        = НСтр("ru = 'Поступление (забалансовый учет)'");
	Строка.Порядок                      = 9;
	Строка.ГруппаКнопок                 = "УчетУАрендатораЗаБалансом";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ВыбытиеАрендованныхОС;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВыбытиеАрендованныхОС");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ВыбытиеАрендованныхОС.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Выбытие арендованных ОС (забалансовый учет)'");
	Строка.ДокументПредставление        = НСтр("ru = 'Выбытие (забалансовый учет)'");
	Строка.Порядок                      = 10;
	Строка.ГруппаКнопок                 = "УчетУАрендатораЗаБалансом";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	#КонецОбласти
	
	#Область УчетУАрендодателя
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПередачаОСВАренду;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПередачаОСВАренду2_4");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПередачаОСВАренду2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Передача ОС в аренду'");
	Строка.Порядок                      = 11;
	Строка.ГруппаКнопок                 = "УчетУАрендодателя";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ВозвратОСИзАренды;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВозвратОСИзАренды2_4");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ВозвратОСИзАренды2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Возврат ОС из аренды'");
	Строка.Порядок                      = 12;
	Строка.ГруппаКнопок                 = "УчетУАрендодателя";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ИзменениеУсловийПередачиВАренду;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ИзменениеУсловийПередачиВАренду");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ИзменениеУсловийПередачиВАренду.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Изменение условий передачи в аренду'");
	Строка.Порядок                      = 13;
	Строка.ГруппаКнопок                 = "УчетУАрендодателя";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.РеализацияУслугПоАренде;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Реализация услуг и прочих активов'");
	Строка.Порядок                      = 14;
	Строка.ГруппаКнопок                 = "УчетУАрендодателя";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	#КонецОбласти
	
	#Область Казначейство
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ОплатаАрендодателю;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Списания безналичных ДС'");
	Строка.Порядок                      = 15;
	Строка.ГруппаКнопок                 = "Казначейство";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ОплатаАрендодателю;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.РасходныйКассовыйОрдер");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Расходные кассовые ордера'");
	Строка.Порядок                      = 16;
	Строка.ГруппаКнопок                 = "Казначейство";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Поступления безналичных ДС'");
	Строка.Порядок                      = 17;
	Строка.ГруппаКнопок                 = "Казначейство";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтАрендодателя;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Поступления безналичных ДС'");
	Строка.Порядок                      = 18;
	Строка.ГруппаКнопок                 = "Казначейство";
	Строка.ДобавитьКнопкуСоздать        = Истина;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Приходные кассовые ордера'");
	Строка.Порядок                      = 19;
	Строка.ГруппаКнопок                 = "Казначейство";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация        = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтАрендодателя;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
	Строка.ПолноеИмяДокумента           = Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя();
	Строка.КлючНазначенияИспользования  = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста       = НСтр("ru = 'Приходные кассовые ордера'");
	Строка.Порядок                      = 20;
	Строка.ГруппаКнопок                 = "Казначейство";
	Строка.ДобавитьКнопкуСоздать        = Истина;
	#КонецОбласти
	
	#Область ВводОстатков
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков арендованных ОС (на балансе)'");
	Строка.Порядок                      = 21;
	Строка.ГруппаКнопок                 = "ВводОстатков";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСЗаБалансом;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков арендованных ОС (за балансом)'");
	Строка.Порядок                      = 22;
	Строка.ГруппаКнопок                 = "ВводОстатков";
	Строка.ДобавитьКнопкуСоздать        = Ложь;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков предметов лизинга за балансом'");
	Строка.Порядок                      = 23;
	Строка.ГруппаКнопок                 = "ВводОстатков";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков переданных в аренду предметов лизинга на балансе'");
	Строка.Порядок                      = 24;
	Строка.ГруппаКнопок                 = "ВводОстатков";
	Строка.ДобавитьКнопкуСоздать        = Ложь;

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод начальных остатков переданных в аренду основных средств'");
	Строка.Порядок                      = 25;
	Строка.ГруппаКнопок                 = "ВводОстатков";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковВзаиморасчетовПоДоговорамАренды;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВводОстатковВзаиморасчетовПоАренде");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковВзаиморасчетовПоАренде.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод остатков взаиморасчетов по аренде'");
	Строка.Порядок                      = 26;
	Строка.ГруппаКнопок                 = "ВводОстатков";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ВводОстатковИнвестицииВАренду;
	Строка.ТипДокумента                 = Тип("ДокументСсылка.ВводОстатковИнвестицииВАренду");
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВводОстатковИнвестицииВАренду.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Ввод остатков инвестиции в аренду'");
	Строка.Порядок                      = 27;
	Строка.ГруппаКнопок                 = "ВводОстатков";
	Строка.ДобавитьКнопкуСоздать        = Ложь;
	#КонецОбласти
	
	Если КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию() Тогда
		КлючНастроек = "";
	Иначе
		КлючНастроек = КлючНазначенияИспользования;
	КонецЕсли;
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								ОтборХозяйственныеОперации, 
								ОтборТипыДокументов, 
								КлючНастроек);
	
	Возврат ТаблицаЗначенийДоступно;
		
КонецФункции

&НаСервере
Процедура ИнициализироватьДополнитьТекстВтДокументыДоговорВТЧ(ТекстВтДокументыДоговорВТЧ)
	
	Если ТекстВтДокументыДоговорВТЧ = "" Тогда
		
		ТекстВтДокументыДоговорВТЧ =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втДокументыДоговорВТЧ
		|";
		
	Иначе
		ТекстВтДокументыДоговорВТЧ = ТекстВтДокументыДоговорВТЧ + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаСписок()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеестрДокументовПереопределяемый.Ссылка КАК Ссылка,
	|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
	|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументовПереопределяемый.Статус КАК Статус,
	|	РеестрДокументовПереопределяемый.Проведен КАК Проведен,
	|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
	|	РеестрДокументовПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументовПереопределяемый.Партнер КАК Партнер,
	|	ВЫРАЗИТЬ(РеестрДокументовПереопределяемый.Контрагент.Ключ КАК Справочник.Контрагенты) КАК Контрагент,
	|	РеестрДокументовПереопределяемый.Контрагент КАК КонтрагентКлюч,
	|	РеестрДокументовПереопределяемый.Договор КАК Договор,
	|	РеестрДокументовПереопределяемый.Организация КАК Организация,
	|	РеестрДокументовПереопределяемый.Подразделение КАК Подразделение,
	|	РеестрДокументовПереопределяемый.Валюта КАК Валюта,
	|	РеестрДокументовПереопределяемый.Сумма КАК СуммаДокумента,
	|	РеестрДокументовПереопределяемый.Ответственный КАК Ответственный,
	|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
	|	РеестрДокументовПереопределяемый.НомерПервичногоДокумента КАК НомерВходящегоДокумента,
	|	РеестрДокументовПереопределяемый.ДатаПервичногоДокумента КАК ДатаВходящегоДокумента,
	|	РеестрДокументовПереопределяемый.Дополнительно КАК Дополнительно,
	|	СостоянияЭДПереопределяемый.СостояниеЭДО КАК СостояниеЭДО,	
	|	ВЫБОР
	|		КОГДА ДокументыСОшибкамиПроверкиКонтрагентовПереопределяемый.Документ ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиПроверкиКонтрагентов,
	|	ВЫБОР
	|		КОГДА РеестрДокументовПереопределяемый.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументовПереопределяемый.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НестандартнаяКартинка,
	|	РеестрДокументовПереопределяемый.ДополнительнаяЗапись КАК ДополнительнаяЗапись,
	|	РеестрДокументовПереопределяемый.ТипСсылки КАК ТипСсылки,
	|	ТИПЗНАЧЕНИЯ(РеестрДокументовПереопределяемый.Ссылка) КАК ТипЗначения,
	|	&Договор КАК ОтборДоговор,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПодтвержденияОплаты,
	|	&СтатусПроверки КАК СтатусПроверки,
	|	ВЫРАЗИТЬ(&ИндикаторПроверки КАК БУЛЕВО) КАК ИндикаторПроверки,
	|	ЛОЖЬ КАК ЕстьЗаявкаНаОплату,
	|	ЛОЖЬ КАК ЕстьОплата,
	|	РеестрДокументовПереопределяемый.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ВЫБОР
	|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА НаличиеФайловПереопределяемый.ЕстьФайлы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьФайлы
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументовПереопределяемый
	|
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияПоОбъектамУчетаЭДО КАК СостоянияЭДПереопределяемый
	|		ПО (СостоянияЭДПереопределяемый.СсылкаНаОбъект = РеестрДокументовПереопределяемый.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыСОшибкамиПроверкиКонтрагентов КАК ДокументыСОшибкамиПроверкиКонтрагентовПереопределяемый
	|		ПО РеестрДокументовПереопределяемый.Ссылка = ДокументыСОшибкамиПроверкиКонтрагентовПереопределяемый.Документ
	|			И (&ИспользованиеПроверкиВозможно)}
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайловПереопределяемый
	|		ПО РеестрДокументовПереопределяемый.Ссылка = НаличиеФайловПереопределяемый.ОбъектСФайлами
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДокументыДоговорВТЧ КАК втДокументыДоговорВТЧ
	|		ПО втДокументыДоговорВТЧ.Ссылка = РеестрДокументовПереопределяемый.Ссылка
	|ГДЕ
	|	ВЫБОР КОГДА НЕ РеестрДокументовПереопределяемый.Ссылка ССЫЛКА Документ.СписаниеОС2_4 ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ВЫРАЗИТЬ(РеестрДокументовПереопределяемый.Ссылка КАК Документ.СписаниеОС2_4).ДокументОснование
	|			ССЫЛКА Документ.ИзменениеУсловийДоговораАренды ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	КОНЕЦ
	|
	|{ГДЕ
	|	РеестрДокументовПереопределяемый.Ссылка.* КАК Ссылка,
	|	РеестрДокументовПереопределяемый.Организация.* КАК Организация,
	|	РеестрДокументовПереопределяемый.ДатаДокументаИБ КАК Дата,
	|	РеестрДокументовПереопределяемый.НомерДокументаИБ КАК Номер,
	|	РеестрДокументовПереопределяемый.Статус КАК Статус,
	|	РеестрДокументовПереопределяемый.ТипСсылки КАК ТипСсылки,
	|	РеестрДокументовПереопределяемый.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументовПереопределяемый.Партнер.* КАК Партнер,
	|	ВЫРАЗИТЬ(РеестрДокументовПереопределяемый.Контрагент.Ключ КАК Справочник.Контрагенты).* КАК Контрагент,
	|	РеестрДокументовПереопределяемый.Договор.* КАК Договор,
	|	РеестрДокументовПереопределяемый.Подразделение.* КАК Подразделение,
	|	РеестрДокументовПереопределяемый.Ответственный.* КАК Менеджер,
	|	РеестрДокументовПереопределяемый.Дополнительно КАК Дополнительно,
	|	РеестрДокументовПереопределяемый.Комментарий КАК Комментарий,
	|	РеестрДокументовПереопределяемый.Проведен КАК Проведен,
	|	РеестрДокументовПереопределяемый.ПометкаУдаления КАК ПометкаУдаления,
	|	(РеестрДокументовПереопределяемый.ДатаДокументаИБ >= &НачалоПериода
	|		И РеестрДокументовПереопределяемый.ДатаДокументаИБ <= &КонецПериода)}";
	
	Если ЗначениеЗаполнено(ОтборДоговор) Тогда
		
		ТекстВтДокументыДоговорВТЧ = "";
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.РасходныйКассовыйОрдер) Тогда
			
			ИнициализироватьДополнитьТекстВтДокументыДоговорВТЧ(ТекстВтДокументыДоговорВТЧ);
			
			ТекстВтДокументыДоговорВТЧ = ТекстВтДокументыДоговорВТЧ + 
			"ИЗ
			|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В
			|			(ВЫБРАТЬ
			|				ДанныеТабличнойЧасти.Ссылка
			|			ИЗ
			|				Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеТабличнойЧасти
			|			ГДЕ
			|				ДанныеТабличнойЧасти.Ссылка = ДанныеДокумента.Ссылка
			|				И ДанныеТабличнойЧасти.ДоговорАренды = &Договор)";
			
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда

			ИнициализироватьДополнитьТекстВтДокументыДоговорВТЧ(ТекстВтДокументыДоговорВТЧ);

			ТекстВтДокументыДоговорВТЧ = ТекстВтДокументыДоговорВТЧ + 
			"ИЗ
			|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В
			|			(ВЫБРАТЬ
			|				ДанныеТабличнойЧасти.Ссылка
			|			ИЗ
			|				Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ДанныеТабличнойЧасти
			|			ГДЕ
			|				ДанныеТабличнойЧасти.Ссылка = ДанныеДокумента.Ссылка
			|				И ДанныеТабличнойЧасти.ДоговорАренды = &Договор)";
			
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
			
			ИнициализироватьДополнитьТекстВтДокументыДоговорВТЧ(ТекстВтДокументыДоговорВТЧ);
			
			ТекстВтДокументыДоговорВТЧ = ТекстВтДокументыДоговорВТЧ + 
			"ИЗ
			|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В
			|			(ВЫБРАТЬ
			|				ДанныеТабличнойЧасти.Ссылка
			|			ИЗ
			|				Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеТабличнойЧасти
			|			ГДЕ
			|				ДанныеТабличнойЧасти.Ссылка = ДанныеДокумента.Ссылка
			|				И ДанныеТабличнойЧасти.ДоговорАренды = &Договор)";
			
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств) Тогда

			ИнициализироватьДополнитьТекстВтДокументыДоговорВТЧ(ТекстВтДокументыДоговорВТЧ);

			ТекстВтДокументыДоговорВТЧ = ТекстВтДокументыДоговорВТЧ + 
			"ИЗ
			|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В
			|			(ВЫБРАТЬ
			|				ДанныеТабличнойЧасти.Ссылка
			|			ИЗ
			|				Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДанныеТабличнойЧасти
			|			ГДЕ
			|				ДанныеТабличнойЧасти.Ссылка = ДанныеДокумента.Ссылка
			|				И ДанныеТабличнойЧасти.ДоговорАренды = &Договор)";
			
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4) Тогда
			
			ИнициализироватьДополнитьТекстВтДокументыДоговорВТЧ(ТекстВтДокументыДоговорВТЧ);
			
			ТекстВтДокументыДоговорВТЧ = ТекстВтДокументыДоговорВТЧ + 
			"ИЗ
			|	Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В
			|			(ВЫБРАТЬ
			|				ДанныеТабличнойЧасти.Ссылка
			|			ИЗ
			|				Документ.ВводОстатковВнеоборотныхАктивов2_4.ОС КАК ДанныеТабличнойЧасти
			|			ГДЕ
			|				ДанныеТабличнойЧасти.Ссылка = ДанныеДокумента.Ссылка
			|				И ДанныеТабличнойЧасти.Договор = &Договор)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка В
			|			(ВЫБРАТЬ
			|				ДанныеТабличнойЧасти.Ссылка
			|			ИЗ
			|				Документ.ВводОстатковВнеоборотныхАктивов2_4.АрендованныеОС КАК ДанныеТабличнойЧасти
			|			ГДЕ
			|				ДанныеТабличнойЧасти.Ссылка = ДанныеДокумента.Ссылка
			|				И ДанныеТабличнойЧасти.Договор = &Договор)";
			
		КонецЕсли;
		
		Если ТекстВтДокументыДоговорВТЧ <> "" Тогда
			
			ТекстВтДокументыДоговорВТЧ = ТекстВтДокументыДоговорВТЧ + "
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
			
			ТекстЗамены =
			"ВЫБОР
			|	КОГДА НЕ втДокументыДоговорВТЧ.Ссылка ЕСТЬ NULL
			|		ТОГДА &Договор
			|	ИНАЧЕ РеестрДокументовПереопределяемый.Договор
			|КОНЕЦ КАК Договор";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеестрДокументовПереопределяемый.Договор КАК Договор", ТекстЗамены);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеестрДокументовПереопределяемый.Договор.* КАК Договор", ТекстЗамены);
		
			ТекстЗапроса =
				ТекстВтДокументыДоговорВТЧ 
				+ ОбщегоНазначения.РазделительПакетаЗапросов()
				+ ТекстЗапроса; 
			
		КонецЕсли;
		
	Иначе
		
		ТекстПоиска =
			"ЛЕВОЕ СОЕДИНЕНИЕ втДокументыДоговорВТЧ КАК втДокументыДоговорВТЧ
			|		ПО втДокументыДоговорВТЧ.Ссылка = РеестрДокументовПереопределяемый.Ссылка";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, "");
		
	КонецЕсли;
	
	// ПроверкаДокументовВРеглУчете
	ПроверкаДокументовСервер.ДоработатьЗапросДинамическогоСпискаЖурналаДокументов(ТекстЗапроса, "РеестрДокументовПереопределяемый");
	// Конец ПроверкаДокументовВРеглУчете
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ХозяйственнаяОперация",
		ОтборХозяйственныеОперации,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипСсылки",
		ОтборТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборОрганизация));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Партнер",
		ОтборПартнер,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборПартнер));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Контрагент",
		ОтборКонтрагент,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборКонтрагент));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Договор",
		ОтборДоговор,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборДоговор));
	
	Список.Параметры.УстановитьЗначениеПараметра("Договор", ОтборДоговор);
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокИнтервал.ДатаНачала);
	
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания),
			КонецДня(СписокИнтервал.ДатаОкончания),
			КонецДня(Дата(3999, 12, 31))));
			
	Элементы.СписокУстановитьИнтервал.Пометка = 
		ЗначениеЗаполнено(СписокИнтервал.ДатаНачала) ИЛИ ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания);
	
	// НастройкиДинамическихСписков
	РаботаСЖурналамиДокументов.УстановитьВидимостьГруппыНастройкиОбновленияПоУмолчанию(ЭтотОбъект, "Список");
	// Конец НастройкиДинамическихСписков
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыОС";
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОтбора()
	
	СохранитьНастройки();
	УстановитьТекстЗапросаСписок();
	УстановитьОтборыДинамическогоСписка();
	УстановитьПараметрыВыбора();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКнопкиУправленияДокументами()
	
	СтруктураПараметров = ОбщегоНазначенияУТ.СтруктураПараметровНастройкиКнопокУправленияДокументами();
	СтруктураПараметров.Форма 												= ЭтотОбъект;
	СтруктураПараметров.ИмяГруппыСоздать                                    = "СписокГруппаСоздатьГенерируемая";
	СтруктураПараметров.ИмяГруппыСоздатьКонтекст                            = "СписокГруппаСоздатьГенерируемаяКонтекст";
	СтруктураПараметров.ИмяКнопкиСкопировать                                = "СписокСкопировать";
	СтруктураПараметров.ИмяКнопкиСкопироватьКонтекстноеМеню                 = "СписокСкопироватьКонтекст";
	СтруктураПараметров.ИмяКнопкиИзменить                                   = "СписокИзменить";
	СтруктураПараметров.ИмяКнопкиИзменитьКонтекстноеМеню                    = "СписокИзменитьКонтекст";
	СтруктураПараметров.ИмяКнопкиПровести                                   = "СписокПровести";
	СтруктураПараметров.ИмяКнопкиПровестиКонтекстноеМеню                    = "СписокПровестиКонтекст";
	СтруктураПараметров.ИмяКнопкиОтменаПроведения                           = "СписокОтменаПроведения";
	СтруктураПараметров.ИмяКнопкиОтменаПроведенияКонтекстноеМеню            = "СписокОтменаПроведенияКонтекст";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаления                  = "СписокУстановитьПометкуУдаления";
	СтруктураПараметров.ИмяКнопкиУстановитьПометкуУдаленияКонтекстноеМеню   = "СписокУстановитьПометкуУдаленияКонтекст";
	СтруктураПараметров.МаксимальноеКоличествоКомандВПодменю                = 10;
	
	ОбщегоНазначенияУТ.НастроитьКнопкиУправленияДокументами(СтруктураПараметров);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", "СписокДата");
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляСКлючемРеестраДокументов(
		ЭтотОбъект,
		Элементы.СписокКонтрагент.Имя,
		"Список.Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыПоХозОперациямИДокументам(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		АдресДоступныхХозяйственныхОперацийИДокументов = ВыбранноеЗначение;
		ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборОперацияТипОбработкаВыбораСервер(АдресДоступныхХозяйственныхОперацийИДокументов)
	
	ТаблицаХозяйственныеОперацииИДокументы = ПолучитьИзВременногоХранилища(АдресДоступныхХозяйственныхОперацийИДокументов);
	ХозяйственныеОперацииИДокументы.Загрузить(ТаблицаХозяйственныеОперацииИДокументы);
	
	ОбщегоНазначенияУТ.ЗаполнитьОтборыПоТаблицеХозОперацийИТиповДокументов(
		ТаблицаХозяйственныеОперацииИДокументы, ОтборХозяйственныеОперации, ОтборТипыДокументов);
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
	ПриИзмененииОтбора();
	
	ОбщегоНазначенияУТ.СформироватьНадписьОтбор(
		ИнформационнаяНадписьОтбор, ХозяйственныеОперацииИДокументы, ОтборТипыДокументов, ОтборХозяйственныеОперации);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеХозяйственныеОперацииИДокументы()
	Возврат ПоместитьВоВременноеХранилище(ХозяйственныеОперацииИДокументы.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора()
	
	СвязиПараметровВыбора = Новый Массив;
	
	Если НЕ ОтборОрганизация.Пустая() Тогда
		СвязьПараметраВыбора = Новый СвязьПараметраВыбора("Отбор.Организация", "ОтборОрганизация", РежимИзмененияСвязанногоЗначения.Очищать);
		СвязиПараметровВыбора.Добавить(СвязьПараметраВыбора);
	КонецЕсли;
	
	Если НЕ ОтборКонтрагент.Пустая() Тогда
		СвязьПараметраВыбора = Новый СвязьПараметраВыбора("Отбор.Контрагент", "ОтборКонтрагент", РежимИзмененияСвязанногоЗначения.Очищать);
		СвязиПараметровВыбора.Добавить(СвязьПараметраВыбора);
	КонецЕсли;
	
	Элементы.ОтборДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

&НаКлиенте
Функция ОтборыДляСозданияДокумента()
	
	СтруктураОтборы = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		СтруктураОтборы.Вставить("Организация", ОтборОрганизация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПартнер) Тогда
		СтруктураОтборы.Вставить("Партнер", ОтборПартнер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
		СтруктураОтборы.Вставить("Контрагент", ОтборКонтрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборДоговор) Тогда
		СтруктураОтборы.Вставить("Договор", ОтборДоговор);
	КонецЕсли;
	
	Возврат СтруктураОтборы;
	
КонецФункции

#Область ШтрихкодыИТорговоеОборудование

&НаСервере
Функция ДанныеПоШтрихКодуПечатнойФормы(Штрихкод)
	
	ДанныеПоШтрихКоду = ОбщегоНазначенияУТ.ДанныеПоШтрихКодуПечатнойФормы(Штрихкод, ХозяйственныеОперацииИДокументы.Выгрузить());	
	
	Возврат ДанныеПоШтрихКоду;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Состояние(НСтр("ru = 'Выполняется поиск документа по штрихкоду...'"));
	ДанныеПоШтрихКоду = ДанныеПоШтрихКодуПечатнойФормы(Данные.Штрихкод);
	ОбщегоНазначенияУТКлиент.ОбработатьШтрихкоды(Данные.Штрихкод, ДанныеПоШтрихКоду, ЭтотОбъект, "Список");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиДинамическихСписков

&НаСервере
Процедура ИнициироватьНастройкиДинамическихСписков()
	
	ПараметрыСписковДокументов = Новый Массив;
	
	СтруктураПараметровСписка = РаботаСЖурналамиДокументов.СтруктураФормированияНаФормеГруппыПользовательскихНастроекДинамическогоСписка();
	СтруктураПараметровСписка.ИмяСписка = "Список";
	СтруктураПараметровСписка.ГруппаРазмещенияНастройки = Элементы.ГруппаНастройкиСпискаДокументов;
	СтруктураПараметровСписка.ИмяРеквизитаРежимАвтообновления = "СписокДокументовРежимАвтообновления";
	СтруктураПараметровСписка.ИмяКомандыОбновленияСписка = Команды.СписокДокументовОбновить.Имя;
	ПараметрыСписковДокументов.Добавить(СтруктураПараметровСписка);
	
	РаботаСЖурналамиДокументов.ИнициироватьНастройкиДинамическихСписков(ЭтотОбъект, ПараметрыСписковДокументов);

КонецПроцедуры

&НаКлиенте
Процедура ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка)
	
	ДлительноеОбновление = РаботаСЖурналамиДокументовКлиент.ВремяОбновленияСпискаПревышаетДопутимое(ЭтотОбъект,
		ИмяСписка);
		
	Если ДлительноеОбновление Тогда
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"ПровереныНастройкиКомпоновкиДанных", Истина);
		СтруктураНастроекКомпоновкиДанных = ПолучитьИсполняемыеНастройкиКомпоновкиДанных(ИмяСписка);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"НастройкиКомпоновкиДанных", СтруктураНастроекКомпоновкиДанных.НастройкиКомпоновкиДанных);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"СтруктураПользовательскихНастроек", СтруктураНастроекКомпоновкиДанных.СтруктураПользовательскихНастроек);
	Иначе
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"ПровереныНастройкиКомпоновкиДанных", Ложь);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"НастройкиКомпоновкиДанных", Новый НастройкиКомпоновкиДанных);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"СтруктураПользовательскихНастроек", Новый Структура);
	КонецЕсли;

	РаботаСЖурналамиДокументовКлиент.ДокументыОтображениеГруппыПользовательскихОтборовИНастроек(ЭтотОбъект, ИмяСписка);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсполняемыеНастройкиКомпоновкиДанных(ИмяСписка)
	
	ИмяЭлемента = РаботаСЖурналамиДокументов.ЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
		"ИмяЭлементаСписка");
	ЭлементФормыСписок = Элементы[ИмяЭлемента];
	НастройкиКомпоновкиДанных = ЭлементФормыСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НастройкиКомпоновкиДанных", НастройкиКомпоновкиДанных);

	СписокПолейСоставногоТипа = РаботаСЖурналамиДокументов.ЗначениеНастройкиСпискаДокументов(ЭтотОбъект,
		ИмяСписка, "СписокПолейСоставногоТипа");

	СтруктураПользовательскихНастроек = РаботаСЖурналамиДокументов.ПроверитьПользовательскиеНастройкиДинамическогоСписка(
		НастройкиКомпоновкиДанных, СписокПолейСоставногоТипа);

	СтруктураВозврата.Вставить("СтруктураПользовательскихНастроек", СтруктураПользовательскихНастроек);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыОбновленияСписковДокументов(ДанныеУстарели, ДлительностьОбновления = Неопределено)
	
	ИмяНастройки = "СписокДокументовКэшНастроек";
	ИмяСписка = "";
	Для Каждого НастройкаСписокДокументов Из ЭтотОбъект[ИмяНастройки] Цикл
		ИмяСписка = НастройкаСписокДокументов.Ключ;
		РаботаСЖурналамиДокументовКлиент.УстановитьПараметрыОбновленияСпискаДокументов(ЭтотОбъект, ИмяСписка, ДанныеУстарели,
			ДлительностьОбновления);
		ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСпискаДокументовСЗамеромВремени(ИмяСписка, УчитыватьПараметрАвтообновления = Ложь)

	Если Не УчитыватьПараметрАвтообновления Тогда

		ТребуетсяОбновлениеСписка = Истина;

	Иначе

		ТребуетсяОбновлениеСписка = РаботаСЖурналамиДокументовКлиент.ЗначениеНастройкиАвтообновленияСпискаДокументов(
			ЭтотОбъект, ИмяСписка);

		Если Не ТребуетсяОбновлениеСписка Тогда
			РаботаСЖурналамиДокументовКлиент.УстановитьПризнакОтображенияНеактуальныхДанныхВСписке(ЭтотОбъект, ИмяСписка);
		КонецЕсли;

	КонецЕсли;

	Если ТребуетсяОбновлениеСписка Тогда

		РаботаСЖурналамиДокументовКлиент.ОбновитьДанныеСпискаДокументовСЗамеромВремени(ЭтотОбъект, ИмяСписка);
		ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументовСобытиеОбработкаОповещения(ИмяСписка, Параметр = Неопределено)
	
	РаботаСЖурналамиДокументовКлиент.ОбновитьСписокДокументовСобытиеОбработкаОповещения(ЭтотОбъект, ИмяСписка, Параметр);
	ОтображениеГруппыПользовательскихОтборовИНастроек(ИмяСписка);

КонецПроцедуры

// Обработка события элемента формы.
// 
// Параметры:
//  Элемент - ПолеФормы
//@skip-check module-unused-method
&НаКлиенте
Процедура СписокДокументовОбработкаСобытияЭлементаФормы(Элемент)

	ДействиеСписка = РаботаСЖурналамиДокументовКлиент.ИмяСпискаДокументовПоИмениЭлементаФормы(ЭтотОбъект, Элемент.Имя);
	
	Если ДействиеСписка.ИмяСписка = "" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСписка = ДействиеСписка.ИмяСписка;
	Действие = ДействиеСписка.Действие;
	
	Если Действие = "Отборы" Или Действие = "Порядок" Или Действие = "УсловноеОформление" Тогда
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"ПровереныНастройкиКомпоновкиДанных", Истина);
		СтруктураНастроекКомпоновкиДанных = ПолучитьИсполняемыеНастройкиКомпоновкиДанных(ИмяСписка);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"НастройкиКомпоновкиДанных", СтруктураНастроекКомпоновкиДанных.НастройкиКомпоновкиДанных);
		РаботаСЖурналамиДокументовКлиент.УстановитьЗначениеНастройкиСпискаДокументов(ЭтотОбъект, ИмяСписка,
			"СтруктураПользовательскихНастроек", СтруктураНастроекКомпоновкиДанных.СтруктураПользовательскихНастроек);
	КонецЕсли;
	
	Если Действие = "Отборы" Тогда
		РаботаСЖурналамиДокументовКлиент.ИсправитьПользовательскиеОтборыВСпискеДокументов(ЭтотОбъект, ИмяСписка);
	ИначеЕсли Действие = "Порядок" Тогда
		РаботаСЖурналамиДокументовКлиент.ИсправитьНастройкиСортировкиВСпискеДокументов(ЭтотОбъект, ИмяСписка);
	ИначеЕсли Действие = "УсловноеОформление" Тогда
		РаботаСЖурналамиДокументовКлиент.ИсправитьНастройкиУсловногоОформленияВСпискеДокументов(ЭтотОбъект, ИмяСписка);
	ИначеЕсли Действие = "Обновление" Тогда
		ОбновитьДанныеСпискаДокументовСЗамеромВремени(ИмяСписка);
	ИначеЕсли Действие = "УскорениеОбновленияСписка" Тогда
		РаботаСЖурналамиДокументовКлиент.СохранитьНастройкуПроизводительныйРежимОбновленияСписка(ЭтотОбъект, ИмяСписка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
