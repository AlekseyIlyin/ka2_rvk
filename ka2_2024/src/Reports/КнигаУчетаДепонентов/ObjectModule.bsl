#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено
//   КлючВарианта - Строка, Неопределено
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//   Контекст - Произвольный
//   КлючСхемы - Строка
//   КлючВарианта - Строка, Неопределено
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	СхемаВариантаОтчета = СхемаВариантаОтчета(КлючВарианта);
	Если КлючСхемы <> СхемаВариантаОтчета Тогда
		
		ИнициализироватьОтчет();
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, СхемаВариантаОтчета);
		
		КлючСхемы = СхемаВариантаОтчета;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	МенеджерВТ = СформироватьВременныеТаблицы(НастройкиОтчета);
	
	Если КлючВариантаОтчета(НастройкиОтчета) = "КнигаУчетаДепонентов" Тогда
		ПриКомпоновкеОтчетаКнигаУчетаДепонентов(ДокументРезультат, МенеджерВТ, СтандартнаяОбработка);
	Иначе
		ПриКомпоновкеОтчета(ДокументРезультат, МенеджерВТ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет()
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКомпоновкеОтчетаКнигаУчетаДепонентов(ДокументРезультат, МенеджерВременныхТаблиц, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	ДокументРезультат.Очистить();
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	НастройкиОтчета.Выбор.Элементы.Очистить();
	
	СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	
	ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметраПериод <> Неопределено И ЗначениеПараметраПериод.Значение <> '00010101' Тогда
		НачалоПериода = ЗначениеПараметраПериод.Значение.ДатаНачала;
		КонецПериода  = ЗначениеПараметраПериод.Значение.ДатаОкончания;
	Иначе
		НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
		КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если КонецПериода = '00010101' Тогда
		КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Данные = Новый ДеревоЗначений;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина, , МенеджерВременныхТаблиц);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Данные);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	ВывестиМакетыСГруппировкамиКнигаДепонентов(ДокументРезультат, Данные, НачалоПериода, КонецПериода, СоответствиеПользовательскихПолей);
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

Процедура ВывестиМакетыСГруппировкамиКнигаДепонентов(ДокументРезультат, Данные, НачалоПериода, КонецПериода, СоответствиеПользовательскихПолей)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.КнигаУчетаДепонентов.ПФ_MXL_КнигаУчетаДепонентов");
	
	Для Каждого ДанныеШапкиОтчета Из Данные.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Шапка	= Макет.ПолучитьОбласть("Шапка");
		
		Шапка.Параметры.Заполнить(ДанныеШапкиОтчета);
		Шапка.Параметры.Начало    = НачалоПериода;
		Шапка.Параметры.Окончание = КонецПериода;
		
		ДокументРезультат.Вывести(Шапка);
		ИтогоОстатокНач = 0;
		
		Для Каждого ДанныеСтрокиОтчета Из ДанныеШапкиОтчета.Строки Цикл
			
			Строка	= Макет.ПолучитьОбласть("Строка");
			Строка.Параметры.Заполнить(ДанныеСтрокиОтчета);
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Строка, ДанныеСтрокиОтчета, СоответствиеПользовательскихПолей);
			
			НомераПлатежныхДокументов = "";
			Для Каждого СтрокаСНомером Из ДанныеСтрокиОтчета.Строки Цикл
				НомераПлатежныхДокументов = ?(ПустаяСтрока(НомераПлатежныхДокументов), "", НомераПлатежныхДокументов + "; ") + СтрокаСНомером.НомерПлатежногоДокумента;
			КонецЦикла;
			
			Строка.Параметры.НомерПлатежногоДокумента = НомераПлатежныхДокументов;
			
			ДокументРезультат.Вывести(Строка);
			
			Если ЗначениеЗаполнено(ДанныеСтрокиОтчета.ОстатокНач) Тогда
				ИтогоОстатокНач = ИтогоОстатокНач + ДанныеСтрокиОтчета.ОстатокНач;
			ИначеЕсли ЗначениеЗаполнено(ДанныеСтрокиОтчета.ВедомостьСуммаПоступления) Тогда
				ИтогоОстатокНач = ИтогоОстатокНач + ДанныеСтрокиОтчета.ВедомостьСуммаПоступления;
			КонецЕсли;
			
		КонецЦикла;
		
		Подвал	= Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.Заполнить(ДанныеШапкиОтчета);
		
		Подвал.Параметры.ОстатокНаКонец = ИтогоОстатокНач - ДанныеШапкиОтчета.СуммаДвижения;
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Подвал, ДанныеШапкиОтчета, СоответствиеПользовательскихПолей);
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриКомпоновкеОтчета(ДокументРезультат, МенеджерВременныхТаблиц, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета);
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина, , МенеджерВременныхТаблиц);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
КонецПроцедуры

Функция СформироватьВременныеТаблицы(НастройкиОтчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ЗначениеПараметраПериод <> Неопределено И ЗначениеПараметраПериод.Использование Тогда
		ПериодОтчета = ЗначениеПараметраПериод.Значение;
	Иначе
		ПериодОтчета = Новый СтандартныйПериод;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", ПериодОтчета.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ПериодОтчета.ДатаОкончания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка
	|ПОМЕСТИТЬ ДоступныеОрганизации
	|ИЗ Справочник.Организации
	|;
	|
	|//////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка
	|ПОМЕСТИТЬ РазрешенныеФизлица
	|ИЗ Справочник.ФизическиеЛица
	|ИНДЕКСИРОВАТЬ ПО Ссылка";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.Период КАК Год,
	|	ВзаиморасчетыСДепонентами.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ВзаиморасчетыСДепонентами.Субконто1 КАК Справочник.ФизическиеЛица) КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(ВзаиморасчетыСДепонентами.Субконто2 КАК Документ.ДепонированиеЗарплаты) КАК Депонирование,
	|	ВзаиморасчетыСДепонентами.СуммаНачальныйОстатокКт КАК ОстатокНач
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				Год,
	|				ДвиженияИГраницыПериода,
	|				Счет = &СчетУчетаДепонентов,
	|				&ВидыСубконто,
	|				Организация В (ВЫБРАТЬ Ссылка ИЗ ДоступныеОрганизации)
	|			) КАК ВзаиморасчетыСДепонентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеФизлица КАК РазрешенныеФизлица
	|		ПО ВзаиморасчетыСДепонентами.Субконто1 = РазрешенныеФизлица.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ВзаиморасчетыСДепонентами.Регистратор КАК Регистратор,
	|	ВзаиморасчетыСДепонентами.Организация КАК Организация,
	|	ВЫРАЗИТЬ(ВзаиморасчетыСДепонентами.СубконтоДт1 КАК Справочник.ФизическиеЛица) КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(ВзаиморасчетыСДепонентами.СубконтоДт2 КАК Документ.ДепонированиеЗарплаты) КАК Депонирование,
	|	ВзаиморасчетыСДепонентами.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТВзаиморасчетыСДепонентами
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&КонецПериода,
	|			СчетДт = &СчетУчетаДепонентов
	|				И ВидСубконтоДт1 В (&ВидыСубконто)
	|				И ВидСубконтоДт2 В (&ВидыСубконто)
	|				И Организация В (ВЫБРАТЬ Ссылка ИЗ ДоступныеОрганизации),
	|			,
	|			) КАК ВзаиморасчетыСДепонентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеФизлица КАК РазрешенныеФизлица
	|		ПО ВзаиморасчетыСДепонентами.СубконтоДт1 = РазрешенныеФизлица.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзаиморасчетыСДепонентами.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ВзаиморасчетыСДепонентами.Регистратор,
	|	ВзаиморасчетыСДепонентами.Организация,
	|	ВЫРАЗИТЬ(ВзаиморасчетыСДепонентами.СубконтоКт1 КАК Справочник.ФизическиеЛица),
	|	ВЫРАЗИТЬ(ВзаиморасчетыСДепонентами.СубконтоКт2 КАК Документ.ДепонированиеЗарплаты),
	|	ВзаиморасчетыСДепонентами.Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&КонецПериода,
	|			СчетКт = &СчетУчетаДепонентов
	|				И ВидСубконтоКт1 В (&ВидыСубконто)
	|				И ВидСубконтоКт2 В (&ВидыСубконто)
	|				И Организация В (ВЫБРАТЬ Ссылка ИЗ ДоступныеОрганизации),
	|			,
	|			) КАК ВзаиморасчетыСДепонентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазрешенныеФизлица КАК РазрешенныеФизлица
	|		ПО ВзаиморасчетыСДепонентами.СубконтоКт1 = РазрешенныеФизлица.Ссылка";
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Депонирования);
	
	Запрос.УстановитьПараметр("СчетУчетаДепонентов",
		ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

Функция СхемаВариантаОтчета(КлючВарианта)
	
	Если СтрНачинаетсяС(КлючВарианта, "КнигаУчетаДепонентов") Тогда
		Возврат "КнигаУчетаДепонентов";
	ИначеЕсли СтрНачинаетсяС(КлючВарианта, "АнализДепонированнойЗарплаты") Тогда
		Возврат "АнализДепонированнойЗарплаты";
	ИначеЕсли СтрНачинаетсяС(КлючВарианта, "СписокДепонентов") Тогда
		Возврат "СписокДепонентов";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция КлючВариантаОтчета(НастройкиОтчета)
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КлючВарианта"));
	Если ЗначениеПараметра <> Неопределено
		И ЗначениеПараметра.Использование
		И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
		Возврат ЗначениеПараметра.Значение;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли