/////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ИНТЕРФЕЙСОВ

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	Представление = ЭтотОбъект.Метаданные().Синоним;
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("Назначение", НазначениеОбработки());
	ПараметрыРегистрации.Вставить("Наименование", Представление);
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", НСтр("ru = 'Внешняя печатная форма счета-фактуры, реализованная в соответствии с постановлением Правительства РФ от 26.12.2011 г. № 1137 ""О формах и правилах заполнения (ведения) документов, применяемых при расчетах по налогу на добавленную стоимость"". Предназначена для релиза 11.0.7.13 конфигурации Управление торговлей, редакция 11.0.'"));
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд,
					Представление,
					"УПД",
					"ВызовСерверногоМетода",
					Истина,
					"ПечатьMXL");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция НазначениеОбработки()
	
	Назначение = Новый Массив;
	Назначение.Добавить("Документ.РеализацияТоваровУслуг");
	
	Возврат Назначение;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов,КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыводитьУслуги",Ложь);
	ПараметрыПечати.Вставить("ПечатьВВалюте",Ложь);
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УПД") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УПД", "Универсальный передаточный документ (УПД)", СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
		
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, СтруктураТипов, КоллекцияПечатныхФорм);
	
КонецПроцедуры


#Область Печать_УПД

Функция СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати = Неопределено, КомплектыПечати = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД";
	
	СтруктураТиповНаПечать              = Новый Структура;
	МассивСчетФактураВыданный           = Новый Массив;
	МассивСчетФактураПолученный         = Новый Массив;
	ОснованияНаРеализацию               = Новый Массив;
	ОснованияСчетФактураПолученный      = Новый Массив;
	ДокументыБезВыданногоСчетаФактуры   = Новый Массив;
	ДокументыБезПолученногоСчетаФактуры = Новый Массив;
	
	Если ПараметрыПечати = Неопределено Тогда
		ПараметрыПечати = Новый Структура;
	КонецЕсли;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяОбъекта = "СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
				И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияНаРеализацию.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияНаРеализацию);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(ОснованияСчетФактураПолученный);
		
		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
		
		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезПолученногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	Для Каждого Документ Из ДокументыБезВыданногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			СтруктураТиповНаПечать[ИмяОбъекта].Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Истина);
		
		Попытка
			ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При формировании печ. формы документа: " + СтруктураОбъектов.Ключ + " произошла ошибка: " + ИнформацияОбОшибке());
			Продолжить;
		КонецПопытки;
		
		ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати);
		
	КонецЦикла;
	
	СтруктураТиповНаПечать.Очистить();
	Для Каждого Документ Из ДокументыБезПолученногоСчетаФактуры Цикл
		
		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			СтруктураТиповНаПечать[ИмяОбъекта].Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Ложь);
		ПараметрыПечати.Вставить("НеВыводитьОсновнойУПД", Истина);
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОПоставщике, СведенияОПокупателе, Макет, ТабличныйДокумент)
	
	СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
	СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,
		ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета,
		ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	ПараметрыШапки = Новый Структура;
	
	ПараметрыШапки.Вставить("Номер", НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения));
	ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=ДД"));
	ПараметрыШапки.Вставить("НомерИсправления", ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--"));
	ПараметрыШапки.Вставить("ДатаИсправления",
		?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--"));
	
	// Выводим данные о поставщике.
	ПредставлениеПоставщика = "Продавец: " +
		СведенияОПоставщике.ОфициальноеНаименование + ", " + Строка(СведенияОПоставщике.Банк) + ", БИК " + Строка(СведенияОПоставщике.БИК) + ", Корр. счет " + Строка(СведенияОПоставщике.КоррСчет) +", " +Символы.ПС+  "р/с " + Строка(СведенияОПоставщике.НомерСчета);
	
	АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Адрес: %1'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
	
	ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИНН/КПП продавца: %1%2'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
		?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
		
	ПараметрыШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	ПараметрыШапки.Вставить("АдресПоставщика", АдресПоставщика);
	ПараметрыШапки.Вставить("ИННПоставщика", ИННПоставщика);
	
	// Выводим данные грузоотправителя.
	ТекстГрузоотправителя = "";
	Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.Грузоотправитель = Неопределено Тогда
		ТекстГрузоотправителя = "--";
	ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		ТекстГрузоотправителя = НСтр("ru='он же'");
	Иначе
		ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
	КонецЕсли;
	
	ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Грузоотправитель и его адрес: %1'"),
		ТекстГрузоотправителя);
	
	ПараметрыШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	
	// Выводим данные грузополучателя и покупателя.
	ТекстГрузополучателя = "--";
	Если Не (ДанныеПечати.ТолькоУслуги Или ДанныеПечати.Грузополучатель = Неопределено) Тогда
		ТекстГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузополучателе,
			"ПолноеНаименование,ФактическийАдрес",
			Ложь);
	КонецЕсли;
	
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Грузополучатель и его адрес: %1'"),
		ТекстГрузополучателя);
	// Програмтех Нозадзе 14082019 +++
	//ПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	птПредставлениеГрузополучателяАдрес = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(ДанныеПечати.Ссылка.Партнер,ДанныеПечати.Дата);
	птПредставлениеГрузополучателя = "Грузополучатель и его адрес: " + ДанныеПечати.Ссылка.Партнер.НаименованиеПолное
		+ ", " + птПредставлениеГрузополучателяАдрес;
	ПараметрыШапки.Вставить("ПредставлениеГрузополучателя", птПредставлениеГрузополучателя);
	// ---
	
	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='К платежно-расчетному документу № %1'"),
		?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
			НСтр("ru='-- от --'"),
			ДанныеПечати.СтрокаПоДокументу));
	
	ПараметрыШапки.Вставить("ПоДокументу", СтрокаПоДокументу);
	
	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Покупатель: %1'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
	
	АдресПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Адрес: %1'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
	
	ИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИНН/КПП покупателя: %1%2'"),
		ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь),
		?(Не ПустаяСтрока(ДанныеПечати.КПППокупателя), "/" + ДанныеПечати.КПППокупателя, ""));
	
	ПараметрыШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	ПараметрыШапки.Вставить("АдресПокупателя", АдресПокупателя);
	ПараметрыШапки.Вставить("ИННПокупателя", ИННПокупателя);
	
	ПараметрыШапки.Вставить("Валюта", НСтр("ru='Валюта: наименование, код Российский рубль, 643'"));
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации, СведенияОКонтрагенте)
	
	ОбластьПодвала.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителяОрганизации", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),НСтр("ru = 'г.'"),"");
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПозицияРазделителя = СтрНайти(ПолнаяДатаДокумента, " ");
	ПредставлениеДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='""%1"" %2года'"),
		Лев(ПолнаяДатаДокумента, ПозицияРазделителя -1),
		Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПозицияРазделителя));
		
	СтруктураПараметров.Вставить("ДатаДокумента", ПредставлениеДаты);
	
	ИННПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			СведенияОбОрганизации.ОфициальноеНаименование,
			ИННПоставщика,
			ДанныеПечати.КПППоставщика);
	ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
		ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
			СведенияОбОрганизации.ОфициальноеНаименование,
			ИННПоставщика);
	Иначе
		ПредставлениеОрганизации = СведенияОбОрганизации.ОфициальноеНаименование;
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	
	ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ИНН,", Ложь);
	Если ЗначениеЗаполнено(ДанныеПечати.КПППокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя,
			ДанныеПечати.КПППокупателя);
	ИначеЕсли ЗначениеЗаполнено(ИННПокупателя) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь),
			ИННПокупателя);
	Иначе
		ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование", Ложь);
	КонецЕсли;
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) И ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата)
		И (ЗначениеЗаполнено(ДанныеПечати.ДоверенностьВыдана) Или ЗначениеЗаполнено(ДанныеПечати.ДоверенностьЛицо)) Тогда
		
		ТекстОснования = СокрЛП(ДанныеПечати.Основание) + "; "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по доверенности №%1 от %2, выданной %3 %4'"),
				ДанныеПечати.ДоверенностьНомер,
				Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"),
				ДанныеПечати.ДоверенностьВыдана,
				ДанныеПечати.ДоверенностьЛицо);
		СтруктураПараметров.Вставить("Основание", ТекстОснования);
		
	КонецЕсли;
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати = Неопределено) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаОснований = Неопределено;
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.Дата >= '20210701' Тогда
			Макет = ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокумент534_ru");
		Иначе
			Макет = ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокумент");
		КонецЕсли;
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			
			КомплектПечатиПоСсылке = Неопределено;
			
			Если ВыборкаОснований <> Неопределено Тогда
				
				СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
				ВыборкаОснований.НайтиСледующий(СтруктураПоиска);
				СтрокиОснований = ВыборкаОснований.Выбрать();
			
				Если СтрокиОснований.Следующий() Тогда
					КомплектПечатиПоСсылке = КомплектыПечати.Найти(СтрокиОснований.ДокументОснование, "Ссылка");
				КонецЕсли;
				
			Иначе
				КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			КонецЕсли;
			
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеПечати.СтатусУПД = 2
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И НЕ ДанныеПечати.ЭтоПередачаНаКомиссию Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен %2'"),
				ДанныеПечати.Ссылка,
				ДанныеПечати.ПредставлениеДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				,
				"ТекстСчетФактура");
				
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, СведенияОКонтрагенте, Макет, ТабличныйДокумент);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтраницы = 1;
		
		// Инициализация итогов в документе
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, СведенияОКонтрагенте);
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
			ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
		КонецЕсли;
		
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати);
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		ТолькоСтавкаБезНДС = Истина;
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл
			
			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
				ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
					ИЛИ (ДанныеПечати.Покупатель <> НЕОПРЕДЕЛЕНО
						И НачалоДня(СтрокаТовары.Дата) <> НачалоДня(ДанныеПечати.Дата)
						И СтрокаТовары.Дата <> '00010101') Тогда
						Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаКомплектующие;
			Иначе
				ОбластьСтрока = ОбластьСтрокаСтандарт;
			КонецЕсли;
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД);
			Иначе
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД);
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			Если СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru='без НДС'"));
				СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru='без НДС'"));
			ИначеЕсли СтрокаТовары.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтруктураПараметров.Вставить("СуммаНДС", 0);
				ТолькоСтавкаБезНДС = Ложь;
			Иначе
				ТолькоСтавкаБезНДС = Ложь;
			КонецЕсли;
			Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				СтруктураПараметров.Вставить("Акциз", НСтр("ru='без акциза'"));
			КонецЕсли;
			ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьИтого);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			КонецЕсли;
			
			Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
				ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
				ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
				ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
				
				ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
			КонецЕсли;
		КонецЦикла;
		// Выводим итоги по документу
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
		
		Если ТолькоСтавкаБезНДС Тогда
			ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru='без НДС'");
		КонецЕсли;
		ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
		ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на %1 %2'"),
			НомерСтраницы,
			ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), НомерСтраницы));
		СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
			И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено
			И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПечати.Ссылка);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


Функция СтруктураИтоговыеСуммы()
	
	Структура = Новый Структура;
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		Структура.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
		Структура.Вставить("Итого"+Элемент.Ключ, 0);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Процедура ОбнулитьИтогиПоСтранице(ИтоговыеСуммы)
	
	СтруктураРесурсовДляИтогов = СтруктураРесурсовДляИтогов();
	
	Для Каждого Элемент Из СтруктураРесурсовДляИтогов Цикл
		ИтоговыеСуммы.Вставить("Итого"+Элемент.Ключ+"НаСтранице", 0);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары)
	
	СтруктураСуммПоСтроке = СтруктураРесурсовДляИтогов();
	
	ЗаполнитьЗначенияСвойств(СтруктураСуммПоСтроке, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураСуммПоСтроке.КоличествоМест);
	Для Каждого Элемент Из СтруктураСуммПоСтроке Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] = ИтоговыеСуммы["Итого"+Элемент.Ключ+"НаСтранице"] + Элемент.Значение;
			ИтоговыеСуммы["Итого"+Элемент.Ключ] = ИтоговыеСуммы["Итого"+Элемент.Ключ] + Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, ВсегоНомеров, ВалютаРегламентированногоУчета)
	
	ИтоговыеСуммы.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ЧислоПрописью(ВсегоНомеров, ,",,,,,,,,0"));
	ИтоговыеСуммы.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, ВалютаРегламентированногоУчета));
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, ВыводитьКодНоменклатуры = Истина, ВыводитьКодТНВД = Ложь)
	
	ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
	
	Если ИспользоватьНаборы
		И СтрокаТовары.ЭтоКомплектующие
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	ИначеЕсли ИспользоватьНаборы
		И СтрокаТовары.ЭтоНабор
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	Иначе
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("КоличествоМест, КоличествоВОдномМесте, НоменклатураКод", 0, 0, "");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;	
	ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(ВыводитьКодТНВД, СтрокаТовары.КодТНВЭД, "");
	
	ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НоменклатураНаименование,
			СтрокаТовары.ХарактеристикаНаименование,
			,
			,
			ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс;
	
	СтруктураПараметров.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
		
	Если Не ВыводитьКодНоменклатуры Тогда
		СтруктураПараметров.НоменклатураКод = "";
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	ОбластьМакета.Параметры.НоменклатураКод = ШтрихкодыНоменклатуры(СтрокаТовары);
	
КонецПроцедуры

Функция НомерСчетаФактурыНаПечать(Номер, ИндексПодразделения, УдалитьПользовательскийПрефикс = Ложь)
	
	НомерНаПечать = "";
	
	Если Номер <> Неопределено Тогда
	
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, УдалитьПользовательскийПрефикс);
		
		ПозицияРазделителя = СтрНайти(НомерНаПечать, "-");
		Префикс = Лев(НомерНаПечать, ПозицияРазделителя);
		НомерБезПрефикса = Сред(НомерНаПечать, ПозицияРазделителя + 1);
		
		Если Лев(НомерБезПрефикса, 1) = "И" Тогда
			НомерНаПечать = Префикс + Сред(НомерБезПрефикса, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИндексПодразделения) Тогда
			НомерНаПечать = НомерНаПечать + "/" + ИндексПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерНаПечать;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочее

Функция СтруктураРесурсовДляИтогов()
	
	Структура = Новый Структура;
	
	Структура.Вставить("СуммаБезНДС",       0);
	Структура.Вставить("СуммаНДС",          0);
	Структура.Вставить("СуммаСНДС",         0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	
	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
	
	Возврат Структура;
	
КонецФункции

Функция ПараметрыМассыПрописью(Масса, КоэффициентПересчетаВТонны)
	
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент*КоэффициентПересчетаВТонны);
	
КонецФункции

Функция СведенияОГрузоотправителе(ДанныеПечати)
	
	Если ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		СведенияОГрузоотправителе = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(ДанныеПечати.Грузоотправитель);
	Иначе
		СведенияОГрузоотправителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
	КонецЕсли;
	
	Возврат СведенияОГрузоотправителе;
	
КонецФункции

Процедура СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(ТаблицаОшибок, ПечатьКомиссионеру = Ложь)
	
	Если ПечатьКомиссионеру Тогда
		ПредставлениеДокумента = НСтр("ru='счет-фактура комиссионера'");
	Иначе
		ПредставлениеДокумента = НСтр("ru='счет-фактура'");
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		
		ТекстОшибки = "";
		ПутьКДанным = "";
		
		Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2'");
		ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте'");
		ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2'");
			ПутьКДанным = "ТекстСчетФактура";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				СтрокаТаблицы.ДокументОснование,
				ПредставлениеДокумента);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, , ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПечатиСчетФактурыПолученного(ТаблицаОшибок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		
		ТекстОшибки = "";
		ПутьКДанным = "";
		
		Если СтрокаТаблицы.НеТребуетсяСчетФактура Тогда
			Продолжить;
		ИначеЕсли СтрокаТаблицы.НеТребуетсяПечатьВВалюте Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не требуется %2 в иностранной валюте'");
		ИначеЕсли СтрокаТаблицы.НеВыставленСчетФактура Тогда
			ТекстОшибки = НСтр("ru = 'Для документа %1 не введен %2'");
			ПутьКДанным = "ПредъявленСчетФактура";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				СтрокаТаблицы.ДокументОснование,
				НСтр("ru='счет-фактура посредника'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, СтрокаТаблицы.ДокументОснование, ПутьКДанным);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов)
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("СведенияОПокупателе");
	ТаблицаКонтрагентов.Колонки.Добавить("СведенияОГрузополучателе");
	ТаблицаКонтрагентов.Колонки.Добавить("КПП");
	
	Если ДанныеКонтрагентов <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеКонтрагентов.НайтиСледующий(СтруктураПоиска);
		ВыборкаКонтрагентов = ДанныеКонтрагентов.Выбрать();
		
		Пока ВыборкаКонтрагентов.Следующий() Цикл
			
			СтрокаКонтрагента = ТаблицаКонтрагентов.Добавить();
			СтрокаКонтрагента.СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
				ВыборкаКонтрагентов.Контрагент, ДанныеПечати.Дата);
			СтрокаКонтрагента.СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
				ВыборкаКонтрагентов.Грузополучатель, ДанныеПечати.Дата);
			СтрокаКонтрагента.КПП = ВыборкаКонтрагентов.КПППокупателя;
			
		КонецЦикла;
		
	Иначе
		
		СтрокаКонтрагента = ТаблицаКонтрагентов.Добавить();
		СтрокаКонтрагента.СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Контрагент, ДанныеПечати.Дата);
		СтрокаКонтрагента.СведенияОГрузополучателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Грузополучатель, ДанныеПечати.Дата);
		СтрокаКонтрагента.КПП = ДанныеПечати.КПППокупателя;
		
	КонецЕсли;
	
	Возврат ТаблицаКонтрагентов;
	
КонецФункции

Процедура ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета)

	Для т = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		
		ТекПараметр = ОбластьМакета.Параметры.Получить(т);
		
		Если НЕ ЗначениеЗаполнено(ТекПараметр) Тогда
			ОбластьМакета.Параметры.Установить(т, "--");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОкруглитьДоЦелого(ОкругляемоеЧисло)
	Если ЗначениеЗаполнено(ОкругляемоеЧисло) Тогда
		Если ОкругляемоеЧисло <> Цел(ОкругляемоеЧисло) Тогда
			ОкругляемоеЧисло = Цел(ОкругляемоеЧисло) + 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВыводитьКодыТНВЭД(ДанныеПечати)
	
	Возврат Ложь;
		//ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")
		//И ПолучитьФункциональнуюОпцию("ВыводитьКодыТНВЭДвCчетахФактурахПриРеализацииВСтраныEАЭС")
		//И УчетНДСУТ.СтранаЯвляетсяЧленомЕАЭС(ДанныеПечати.СтранаРегистрации, ДанныеПечати.Дата)
		//И ДанныеПечати.Дата >= УчетНДСУТ.ДатаНачалаДействия150ФЗ();
	
КонецФункции

// Функция возращает массив со штрихкодами
//
// Параметры:
//  Номенклатура   - СправочникСсылка.Номенклатура
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//  Упаковка       - СправочникСсылка.УпаковкиЕдиницыИзмерения
//
// Возвращаемое значение:
//  Массив штрихкодов
//
Функция ШтрихкодыНоменклатуры(СтрокаТовары) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	|";

	Запрос.УстановитьПараметр("Номенклатура", СтрокаТовары.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", СтрокаТовары.Характеристика);
	//Запрос.УстановитьПараметр("Упаковка", Упаковка);

	Штрихкоды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	ВозвращаемоеЗначение = Новый Массив;
	Для Каждого Штрихкод Из Штрихкоды Цикл
		Возврат Штрихкод;
	КонецЦикла;
	
	Возврат "";
	 
КонецФункции

