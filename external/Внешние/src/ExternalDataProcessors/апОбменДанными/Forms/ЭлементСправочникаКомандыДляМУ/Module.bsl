#Область ОписаниеПеременных

&НаКлиенте
Перем МодульМТ;  // Общий клиентский модуль со спецификой мобильной торговли
&НаКлиенте
Перем ГМодульК;  // общий клиентский модуль
 
// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры, "ID");
	ТекОбъект.ВОКонтекстФормыДополнить(СтррКонтекст, "_КомандыДляМУ", Ложь);	
	//@skip-check unknown-form-parameter-access
	ПрочестьОбъектИзХранилища(Параметры.ID);
	
	ТекОбъект.ВОПриСозданииФормыЭлемента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Загружаем общий клиентский модуль "МодульОбщийМТ". В параметре "Параметры" важно передавать структуру с заполненным
	// свойством "ВХОбщиеПараметры" - оно используется для предотвращения повторной загрузки текущей обработки.
	//@skip-check use-non-recommended-method
	//@skip-check form-self-reference
	МодульМТ = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщийМТ", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийМТ"); // в СтррКонтекст есть заполненное свойство "ВХОбщиеПараметры"
	
	ЗаполнитьВидКомандыСписок();
	ЗаполнитьВариантУдаления();
	ЗаполнитьВидыДокумент();
	
	ГруппаВариантУдаленияВидимостьЭлементов();
	ГруппаВидыДокументовВидимостьЭлементов();
	ГруппаАгентыДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументыПреставлениеДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	Оповещение = Новый ОписаниеОповещения("ДокументыПреставлениеДокументаНачалоВыбораЗавершение", ЭтотОбъект);
	
	СтррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Агенты", Агенты.ВыгрузитьЗначения()));  //не реализовано
	//@skip-check form-self-reference
	МодульК().ОткрытьФормуОбработки("ВыборЗагруженногоДокумента", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	
КонецПроцедуры

//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Истина;
	
	Если Элемент = Элементы.ВариантУдаленияФлаг Тогда
		ГруппаВариантУдаленияВидимостьЭлементов();
	ИначеЕсли Элемент = Элементы.ВидКомандыСписок Тогда
		ГруппаВариантУдаленияВидимостьЭлементов();
		ГруппаВидыДокументовВидимостьЭлементов();
	ИначеЕсли Элемент = Элементы.ДляВсехАгентов Тогда
		ГруппаАгентыДоступностьЭлементов();	
	КонецЕсли;
	
	Если ТипЗнч(Элемент.Родитель) = Тип("ГруппаФормы") Тогда
		Если Элемент.Родитель = Элементы.ГруппаВариантУдаления Тогда
			ВариантУдаления = ?(ВариантУдаленияФлаг, ВариантУдаленияКоличество, ВариантУдаленияДата);			
		КонецЕсли;			
	КонецЕсли;
	
	СформироватьПараметрКоманды();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОчистка(Элемент, СтандартнаяОбработка)
	
	ВидыДокумент.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКомандыСписокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВидКоманды = Новый УникальныйИдентификатор(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПредставлениеСпискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получаем весь список.
	СЗСписок = ВидыДокументов();
	
	// Очищаем элементы списка в соответствии с уже отмеченными элементами на форме 
	Для Каждого ЭлементСписка Из СЗСписок Цикл
		Если ВидыДокументСписокВидов.НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		Иначе
			ЭлементСписка.Пометка = Ложь;
		КонецЕсли;		
	КонецЦикла; 
	
	// Форма выбора
	ОповещениеПослеОтметкиЭлементов = Новый ОписаниеОповещения("СписокЗначенийПослеОтметкиЭлементов", ЭтотОбъект, "ВидыДокументСписокВидов");	
	СЗСписок.ПоказатьОтметкуЭлементов(ОповещениеПослеОтметкиЭлементов, "ВидыДокументСписокВидов");

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ВидыДокумент.Количество() < 1 Тогда
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(ВидыДокумент[0].Значение) = Тип("Структура") Тогда
		Если ВидыДокумент[0].Значение.Свойство("ID") Тогда
			МодульК().ВООткрытьФорму(ВидыДокумент[0].Значение);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ВидыДокумент[0].Значение) Тогда 
			ПоказатьЗначение(Неопределено, ВидыДокумент[0].Значение);
		КонецЕсли;		                                                      
	КонецЕсли;	
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыАгенты

&НаКлиенте
Процедура АгентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущийАгент 	= ?(Элементы.Агенты.ТекущиеДанные = Неопределено, Неопределено, Элементы.Агенты.ТекущиеДанные.Значение);
	СтррПараметры 	= Новый Структура("ПараметрыВыбора", Новый Структура("Пользователь, МножественныйВыбор", ТекущийАгент, Истина));
	Оповещение 		= Новый ОписаниеОповещения("ПланФактДобавлениеЗавершение", ЭтотОбъект);
	
	//@skip-check form-self-reference
	МодульК().ОткрытьФормуОбработки("ВыборАгента", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);

КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыАгенты
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	// для исключения совпадений наименований без крайних пробелов
	Наименование = СокрЛП(Наименование); 
	
	// Проверка заполнения
	Если ПустаяСтрока(Наименование) Тогда
		// Не заполнено наименование
		ВывестиОшибкуЗаполнения(Элементы.Наименование);
		Возврат;
		
	ИначеЕсли Не ЗначениеЗаполнено(ВидКоманды) Тогда
		//Не заполнен вид команды
		ВывестиОшибкуЗаполнения(Элементы.ВидКомандыСписок);
		Возврат;
		
	ИначеЕсли Активна И НетАгентовДляВыгрузки() Тогда
		//Нет агентов для выгрузки
		ВывестиОшибкуЗаполнения(Элементы.ДляВсехАгентов);
		Возврат;
		
	ИначеЕсли ВидКоманды = Новый УникальныйИдентификатор("A21840F9-8CA4-43A0-92A0-8F45350AD6B1") Тогда
		//Удалить документ, не выбран документ.
		Если Активна И ВидыДокумент.Количество() = 0 Тогда 
			ВывестиОшибкуЗаполнения(Элементы.ДокументыПреставлениеДокумента, Истина);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВариантУдаления) = Тип("Дата") И ВариантУдаления = '00010101' Тогда	
		//Некорректно заполнен вариант удаления
		ВывестиОшибкуЗаполнения(Элементы.ВариантУдаленияДата, Истина);
		Возврат;
		
	ИначеЕсли ТипЗнч(ВариантУдаления) = Тип("Число") И ВариантУдаления < 1 Тогда	
		//Некорректно заполнен вариант удаления
		ВывестиОшибкуЗаполнения(Элементы.ВариантУдаленияКоличество, Истина);
		Возврат;     
		
	ИначеЕсли Активна И ВидыДокумент.Количество() = 0 И
				 (		ВидКоманды = Новый УникальныйИдентификатор("3DD4A962-C1FA-44C3-88AB-D93AA8AB0763")  // Удалить документы (только подтвержденные)
					ИЛИ ВидКоманды = Новый УникальныйИдентификатор("ECE307BC-245E-4474-8838-3523F8F42EC2")  // Удалить документы (только неподтвержденные)
					ИЛИ ВидКоманды = Новый УникальныйИдентификатор("D7D9DDD8-50C1-484C-9BE1-49BA8B119141")  // Удалить документы (все)
				 )
	Тогда
		// Не выбраны виды документов.
		ВывестиОшибкуЗаполнения(Элементы.ДокументыСписокВидов, Истина);
		Возврат;
		
	КонецЕсли;
	
	
		
	Если Не ЗначениеЗаполнено(ID) Тогда 
		ID = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	СохранитьОбъектВХранилищеКлиент();
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Ложь;
	Закрыть();
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Хранилище

// Процедура считывает объект (список торговых точек) из хранилища значений. 
&НаСервере
Процедура ПрочестьОбъектИзХранилища(КлючID) 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ID = КлючID;
	СтррОбъект = ТекОбъект.ВОЭлементЗагрузить(СтррКонтекст.ВО, ID);
	Если СтррОбъект = Неопределено Тогда // создание нового элемента справочника
		Наименование = НСтр("ru = 'Новое имя'");
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		ТекОбъект.ЗаполнитьРеквизитыОбъектаИзСтруктуры(ЭтотОбъект, СтррОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбъектВХранилищеКлиент()
	
	МодульМТ.ВОПередЗаписьюЭлемента(ЭтотОбъект);
	
	СохранитьОбъектВХранилище();
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Ложь;
	Оповестить("АПЭлементСправочникаЗаписан_" + СтррКонтекст.ВО.ВидОбъекта, ID);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОбъектВХранилище()

	//@skip-check structure-consructor-too-many-keys
	СтррОбъект = Новый Структура("	Статус, 
								|	Наименование, 
								|	Агенты, 
								|	Активна, 
								|	ВариантУдаления, 
								|	ВидКоманды, 
								|	ВидыДокумент, 
								|	ДляВсехАгентов, 
								|	ПараметрКоманды "); 	
									
	//@skip-check form-self-reference
	ЗаполнитьЗначенияСвойств(СтррОбъект, ЭтаФорма);
	
	// ВидКомандыПредставление
	СтррОбъект.Вставить("ВидКомандыПредставление", ВидКомандыСписок);
	Если ЗначениеЗаполнено(ВидКомандыСписок) Тогда
		Для Каждого Элемент Из Элементы.ВидКомандыСписок.СписокВыбора Цикл
			Если ВидКомандыСписок = Элемент.Значение Тогда
				СтррОбъект.ВидКомандыПредставление = Элемент.Представление;
				Прервать;
			КонецЕсли;
		КонецЦикла;				
	КонецЕсли; 	
	
	РеквизитФормыВЗначение("Объект").ВОЭлементСохранить(СтррКонтекст.ВО, ID, СтррОбъект);	
	
КонецПроцедуры

//&НаСервере
//Функция ПолучитьВОДокумент(СсылкаВО)
//	
//	ТекОбъект = РеквизитФормыВЗначение("Объект");
//	
//	СтррОбъект = ТекОбъект.ВОЭлементЗагрузить(СсылкаВО, СсылкаВО.ID);
//	
//	Возврат СтррОбъект; 	
//КонецФункции

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти


#Область СлужебныеПроцедурыИФункции_Обработчики

&НаКлиенте
Процедура ПланФактДобавлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Массив") ИЛИ Результат.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Для Каждого Агент Из Результат Цикл
		Если Агенты.НайтиПоЗначению(Агент) = Неопределено Тогда
			Агенты.Добавить(Агент);
		КонецЕсли;			
	КонецЦикла;  
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаЗаписатьИЗакрыть(Неопределено);
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПреставлениеДокументаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Документ") Тогда
		
		ВидыДокумент.Очистить();
		
		ВидыДокумент.Добавить(Результат.Документ, Результат.ДокументПредставление);
		
		ВидыДокументПреставлениеДокумента = Результат.ДокументПредставление;		
		
		ЭлементПриИзменении(Элементы.ДокументыПреставлениеДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗначенийПослеОтметкиЭлементов(Список, ИмяРеквизита) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	//@skip-check form-self-reference
	ЭтаФорма[ИмяРеквизита] = ПолучитьОтмеченыеЗначенияСписка(Список);
	//@skip-check form-self-reference
	ВидыДокумент = ЭтаФорма[ИмяРеквизита];
	
	ЭлементПриИзменении(Элементы.ДокументыСписокВидов);
		
КОнецПроцедуры

// СлужебныеПроцедурыИФункции_Обработчики
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Процедура ЗаполнитьВидКомандыСписок()
	
	ВидыКомандДляМУ = ВидыКомандДляМУ();
	Для Каждого Элемент Из ВидыКомандДляМУ Цикл
		Элементы.ВидКомандыСписок.СписокВыбора.Добавить(Строка(Элемент.Ключ), Элемент.Значение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ВидКоманды) Тогда
		ВидКомандыСписок = Строка(ВидКоманды);
	Иначе
		//Значение ПоУсолчанию "Удалить документ".
		ВидКоманды		 = Новый УникальныйИдентификатор("A21840F9-8CA4-43A0-92A0-8F45350AD6B1");
		ВидКомандыСписок = Строка(ВидКоманды); 	
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантУдаления()
	
	Если ТипЗнч(ВариантУдаления) = Тип("Дата") Тогда
		ВариантУдаленияФлаг = Ложь;
		ВариантУдаленияДата = ВариантУдаления;
		
	ИначеЕсли ТипЗнч(ВариантУдаления) = Тип("Число") Тогда
		ВариантУдаленияФлаг 		= Истина;
		ВариантУдаленияКоличество   = ВариантУдаления;
		
	КонецЕсли;
	
	Если ВариантУдаленияДата = '00010101' Тогда
		//@skip-check use-non-recommended-method
		ВариантУдаленияДата = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыДокумент()
	
	Если ВидыДокумент.Количество() = 0 Тогда 
		Возврат; //Новый элемент или ошибка
	КонецЕсли;	
	
	Если ВидыДокумент.Количество() = 1 И ТипЗнч(ВидыДокумент[0].Значение) <> Тип("Строка") Тогда
		//Это ссылка на документ. 2 типа: Ссылка на документ или структура ВО
		ВидыДокументПреставлениеДокумента = ВидыДокумент[0].Представление;
	Иначе
		//Это список иидов документов МТ. 
		ВидыДокументСписокВидов = ВидыДокумент.Скопировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВидыКомандДляМУ()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ТекОбъект.ВидыКомандДляМУ();
КонецФункции

&НаСервере
Функция ВидыДокументов()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	//Возврат ТекОбъект.ПолучитьВсеВидыОбъектовДля1C("Документ", "СоздаваемыеВМУ");
	Возврат ТекОбъект.ПолучитьВсеВидыОбъектовДляМУ("Документ", Истина);
КонецФункции

&НаКлиенте
Функция ПолучитьОтмеченыеЗначенияСписка(Список)
	
	СЗСписок = Новый СписокЗначений;	
	Для Каждого Элемент Из Список Цикл
		Если Элемент.Пометка Тогда
			СЗСписок.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СЗСписок;
КОнецФункции

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции

&НаКлиенте
Процедура СформироватьПараметрКоманды()
	
	Если НЕ ЗначениеЗаполнено(ВидКоманды) Тогда
		ПараметрКоманды = "";
		Возврат;
	КонецЕсли;
	
	ЧастьПараметраДата 			 = "";
	ЧастьПараметраОбъектУдаления = "";
	ЧастьПараметраВидыДокументов = "";
		
	Если ВидКоманды = Новый УникальныйИдентификатор("D7D9DDD8-50C1-484C-9BE1-49BA8B119141") 
		ИЛИ ВидКоманды = Новый УникальныйИдентификатор("3DD4A962-C1FA-44C3-88AB-D93AA8AB0763")
		ИЛИ ВидКоманды = Новый УникальныйИдентификатор("ECE307BC-245E-4474-8838-3523F8F42EC2")
	Тогда
		// Удалить документы (все)
		// Удалить документы (только подтвержденные)
		// Удалить документы (только неподтвержденные)
		ЧастьПараметраДата 			 = СформироватьЧастьПараметраДата();
		ЧастьПараметраВидыДокументов = СформироватьЧастьПараметраВидыДокументов();	
		
	ИначеЕсли ВидКоманды = Новый УникальныйИдентификатор("B029EBDD-0B8F-48D5-BE91-F01E403878E4") ИЛИ  ВидКоманды = Новый УникальныйИдентификатор("19F912FF-34BB-4792-A07A-8754C56B3BFF") Тогда
		// Удалить фотографии (все)
		// Удалить фотографии (только подтвержденные)
		ЧастьПараметраДата = СформироватьЧастьПараметраДата();
		
	ИначеЕсли  ВидКоманды = Новый УникальныйИдентификатор("A21840F9-8CA4-43A0-92A0-8F45350AD6B1") Тогда  
		// Удалить документ
		ЧастьПараметраОбъектУдаления = СформироватьЧастьПараметраУдаляемыйДокумент();		
		
	Иначе
		//Ошибка                
		ПараметрКоманды = "";
		Возврат;
		
	КонецЕсли;
	
	ПараметрКоманды = ЧастьПараметраДата + ЧастьПараметраВидыДокументов + ЧастьПараметраОбъектУдаления;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьЧастьПараметраДата()
	
	Если ВариантУдаленияФлаг Тогда
		Возврат "КоличествоДней:" + Строка(ВариантУдаленияКоличество) + ";";	
		
	ИначеЕсли ВариантУдаленияДата = '00010101' Тогда
		Возврат "";	
		
	Иначе	
		Возврат "ДатаУдаления:" + СтрЗаменить(Строка(Формат(ВариантУдаленияДата, "ДФ=yyyy-MM-dd")),"-","") + ";";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СформироватьЧастьПараметраВидыДокументов()
	
	Результат = "";	
	
	Для Каждого Элемент Из ВидыДокументСписокВидов Цикл
		
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ",") + Элемент.Значение; 
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		Результат = "СписокДокументов:" + Результат + ";";	
	КонецЕсли;	
		
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СформироватьЧастьПараметраУдаляемыйДокумент()
	
	Если ВидКоманды <> Новый УникальныйИдентификатор("A21840F9-8CA4-43A0-92A0-8F45350AD6B1") ИЛИ ВидыДокумент.Количество() <> 1 Тогда
		Возврат "";
	КонецЕсли;		
	
	СсылкаДок = ВидыДокумент[0].Значение;
	
	// Тип документа в МТ 
	Если ТипЗнч(СсылкаДок) = Тип("Структура") Тогда
		СтрТипДок = СтрЗаменить(СсылкаДок.ВидДокумента, "_", ""); //ВО
			
	ИначеЕсли НЕ ЗначениеЗаполнено(СсылкаДок) Тогда
		Возврат ""; //Ошибка
		
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		СтрТипДок = "Заказ";
		
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		СтрТипДок = "ПКО";
		
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		СтрТипДок = "РКО";
		
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СтрТипДок = "Реализация";
		
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		СтрТипДок = "Перемещение";
		
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		СтрТипДок = "ВозвратТоваров";

	Иначе
		Возврат ""; //Ошибка
		
	КонецЕсли;
	
	Результат = "ТипДокумента:" 
					+ СтрТипДок 
					+ ";"
					+ "ИдДокумента:"
					+ ?(ТипЗнч(СсылкаДок) = Тип("Структура"), Строка(СсылкаДок.ID), ВРег(СсылкаДок.УникальныйИдентификатор()))  
					+ ";";
					
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НетАгентовДляВыгрузки()
	
	Если ДляВсехАгентов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Элемент Из Агенты Цикл
		Если Элемент.Пометка Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ГруппаВариантУдаленияВидимостьЭлементов()
	
	Элементы.ГруппаВариантУдаления.Видимость 		= НЕ (ВидКоманды = Новый УникальныйИдентификатор("A21840F9-8CA4-43A0-92A0-8F45350AD6B1"));
	Элементы.ВариантУдаленияДата.Видимость 			= НЕ ВариантУдаленияФлаг;
	Элементы.ВариантУдаленияКоличество.Видимость	= ВариантУдаленияФлаг;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВидыДокументовВидимостьЭлементов()
	
	Если Не ЗначениеЗаполнено(ВидКоманды) Тогда
		Элементы.ГруппаВидыДокументов.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаВидыДокументов.Видимость = Истина;
	КонецЕсли;
	
	Если ВидКоманды = Новый УникальныйИдентификатор("3DD4A962-C1FA-44C3-88AB-D93AA8AB0763")  
		ИЛИ ВидКоманды = Новый УникальныйИдентификатор("ECE307BC-245E-4474-8838-3523F8F42EC2")
		ИЛИ ВидКоманды = Новый УникальныйИдентификатор("D7D9DDD8-50C1-484C-9BE1-49BA8B119141")
	Тогда
	 	Элементы.ДокументыСписокВидов.Видимость 			= Истина;
		Элементы.ДокументыПреставлениеДокумента.Видимость 	= Ложь;
		
	ИначеЕсли ВидКоманды = Новый УникальныйИдентификатор("A21840F9-8CA4-43A0-92A0-8F45350AD6B1") Тогда
	    Элементы.ДокументыСписокВидов.Видимость 			= Ложь;
		Элементы.ДокументыПреставлениеДокумента.Видимость 	= Истина;
		
	Иначе
		Элементы.ГруппаВидыДокументов.Видимость = Ложь;
		
	КонецЕсли;	  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаАгентыДоступностьЭлементов()
	
	Элементы.Агенты.Доступность = Не ДляВсехАгентов;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибкуЗаполнения(Элемент, ИнфАктивна = Ложь)
	
	Если Элемент = Элементы.ДляВсехАгентов Тогда
		ТекстОшибки = НСтр("ru = 'У команды установлен признак ""Активна"". Для выгрузки необходимо заполнить агентов или отметить поле: ""'") + ПолучитьЗаголовокЭлемента(Элемент);
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	ИначеЕсли ИнфАктивна Тогда
		ТекстОшибки = НСтр("ru = 'У команды установлен признак ""Активна"". Для выгрузки необходимо заполнить поле: ""'") + ПолучитьЗаголовокЭлемента(Элемент);
	Иначе
		ТекстОшибки = НСтр("ru = 'Заполните поле'") + " " + ПолучитьЗаголовокЭлемента(Элемент);
	КонецЕсли;	
		
	ИмяРеквизита = ПолучитьИмяРеквизитаЭлемента(Элемент.Имя);
	
	//@skip-check object-deprecated
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗаголовокЭлемента(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Заголовок) Тогда
		Возврат Элемент.Заголовок;
		
	Иначе
		Возврат ПолучитьЗаголовокЭлементаИзРеквизита(Элемент.Имя);	 
		
	КонецЕсли;		
	
КонецФункции

&НаСервере
Функция ПолучитьЗаголовокЭлементаИзРеквизита(ИмяЭлемента)
	
	ИмяРеквизита = ПолучитьИмяРеквизитаЭлемента(ИмяЭлемента); 
	//@skip-check form-self-reference
	ВсеРквизмты	 = ЭтаФорма.ПолучитьРеквизиты();
	
	Для Каждого Реквизит Из ВсеРквизмты Цикл
		Если Реквизит.Имя = ИмяЭлемента Тогда
			Возврат Реквизит.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяЭлемента; //Ошибка, заглушка. 
КонецФункции

&НаСервере
Функция ПолучитьИмяРеквизитаЭлемента(ИмяЭлемента)
	
	Возврат Элементы[ИмяЭлемента].ПутьКДанным;
КонецФункции 

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти
