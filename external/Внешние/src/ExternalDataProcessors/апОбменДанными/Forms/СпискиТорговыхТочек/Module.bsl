#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульК; // общий клиентский модуль

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//@skip-check structure-consructor-too-many-keys
	СтррКонтекст = Новый Структура("НастройкиАгентовРедактируются,ID,ДляВыбора,Конфигурация", Ложь);	
	
	СтррКонтекст.Вставить("СпрТоргТочки");// KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	Если СтррКонтекст.ДляВыбора = Истина Тогда
		Элементы.СпискиТТ.РежимВыбора = Истина;
		Элементы.СпискиТТ.МножественныйВыбор = Истина;
		Элементы.СпискиТТ.ТолькоПросмотр = Истина;
		//@skip-check form-self-reference
		ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	ПрочестьОбъектИзХранилища();
	
	КомандаФормы = Команды.Найти("ПоказатьПартнеров");
	КомандаФормы.Заголовок = СтррКонтекст.СпрТоргТочки.Синоним;
	КомандаФормы.Подсказка = "Показать """ + СтррКонтекст.СпрТоргТочки.Синоним + """";

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	Если СтррКонтекст.ДляВыбора = Истина Тогда
		Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
		МСтроки = Объект.СпискиТорговыхТочек.НайтиСтроки(Новый Структура("ID", СтррКонтекст.ID));
		Если МСтроки.Количество() <> 0 Тогда
			Элементы.СпискиТТ.ТекущаяСтрока = МСтроки[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
	Элементы.СпискиТТГруппа.Видимость = (СтррКонтекст.Конфигурация = "УТ_АКФ");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АПСписокТорговыхТочекЗаписан" Тогда // записан новый элемент списка ТТ или обновлен существующий элемент
		
		ПрочестьОбъектИзХранилища();
		ЭлементСпискаВыделить(Параметр);
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпискиТТ

&НаКлиенте
Процедура СпискиТТПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	GUID = ?(Копирование, ЭлементСпискаПолучитьIDТекущего(), Неопределено);
	ЭлементСпискаОткрытьФорму(GUID, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СпискиТТВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	Если СтррКонтекст.ДляВыбора = Истина Тогда
		СпискиТТВыбратьЗначения(ВыбраннаяСтрока);
	ИначеЕсли Элемент.ТекущиеДанные <> Неопределено Тогда
		ЭлементСпискаОткрытьФорму(ЭлементСпискаПолучитьIDТекущего());
	КонецЕсли;
	
КонецПроцедуры

// Событие вызывается при нажатию на кнопку "Выбор", когда форма открыта в режиме выбора.
&НаКлиенте
Процедура СпискиТТВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СпискиТТВыбратьЗначения(Значение);

КонецПроцедуры

&НаКлиенте
Процедура СпискиТТПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	// проверяем - редактируются ли сейчас настройки агентов?
	СтррКонтекст.НастройкиАгентовРедактируются = Ложь;
	Оповестить("АППроверкаРедактированияНастроекАгентов", СтррКонтекст);
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда
		Текст = НСтр("ru = 'Удалить выбранные списки торговых точек (выбрано: %1) ?'");
		Текст = СтрШаблон_(Текст, Элемент.ВыделенныеСтроки.Количество());
	Иначе
		Текст = НСтр("ru = 'Удалить список торговых точек?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СпискиТТПередУдалениемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура СпискиТТПриИзменении(Элемент)
	
	// Внимание!!! На данной форме это событие происходит только при смене порядка строк. Если будет расширено поведение поля СпискаТТ
	// и это событие будет вызываться при других изменениях списка, то нужно сохранять объект в хранилище только после изменения порядка строк.
	СохранитьОбъектВХранилище(); 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыСпискиТТ
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура АКФ_ДобавитьТорговыеТочкиВСписки(Команда)
	
	МИзменения = Новый Массив;
	АКФ_ДобавитьТорговыеТочкиВСписки_Сервер(МИзменения);
	
	Для Каждого Элемент Из МИзменения Цикл
		//@skip-check use-non-recommended-method
		Сообщить(Элемент);	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура АКФ_ДобавитьТорговыеТочкиВСпискиПоПодразделению(Команда)
	
	Оповещение = Новый ОписаниеОповещения("АКФ_ДобавитьТорговыеТочкиВСпискиПоПодразделениюОбработкаВыбора", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещение, , "Выбор подразделения", АКФ_ПолучитьТипПодразделения());
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Хранилище

&НаСервере
Процедура ПрочестьОбъектИзХранилища()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	// проверяем - записывались ли вообще списки ТТ? если нет, записываем пустой список - чтобы в хранилище всегда была ТЗ правильной структуры.
	ТЗСТТ = ТекОбъект.ПрочитатьЗначениеНастройки("СпискиТорговыхТочек");
	Если ТипЗнч(ТЗСТТ) <> Тип("ТаблицаЗначений") Тогда
		ТекОбъект.СохранитьЗначениеНастройки("СпискиТорговыхТочек", Объект.СпискиТорговыхТочек.Выгрузить());
	КонецЕсли; 
	
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы());
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");

КонецПроцедуры

&НаСервере
Процедура СохранитьОбъектВХранилище()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьЗначениеНастройки("СпискиТорговыхТочек", Объект.СпискиТорговыхТочек.Выгрузить());

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиФормы()

	Возврат "СпискиТорговыхТочек";
	
КонецФункции

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ЭлементыСписка

&НаКлиенте
Процедура ЭлементСпискаОткрытьФорму(GUID = Неопределено, Копирование = Ложь)
	
	Ключ = ?(GUID = Неопределено Или Копирование, Новый УникальныйИдентификатор, GUID);
	CтррПараметры = Новый Структура("ID,Копирование,ВызовИзФормыСписка", GUID, Копирование, Истина);
	МодульК().ОткрытьФормуОбработки("СписокТорговыхТочек", CтррПараметры, Ключ);
	
КонецПроцедуры

&НаКлиенте
Функция ЭлементСпискаПолучитьIDТекущего()
	
	СтрокаТ = Элементы.СпискиТТ.ТекущиеДанные;
	Возврат ?(СтрокаТ <> Неопределено, СтрокаТ.ID, Неопределено);

КонецФункции
 
&НаКлиенте
Процедура ЭлементСпискаВыделить(GUID)
	
	Если ТипЗнч(GUID) = Тип("УникальныйИдентификатор") Тогда
		МСтроки = Объект.СпискиТорговыхТочек.НайтиСтроки(Новый Структура("ID", GUID));
		Если МСтроки.Количество() <> 0 Тогда
			Элементы.СпискиТТ.ТекущаяСтрока = МСтроки[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура удаляет списки торговых точек. Если список ТТ удалить нельзя, выводит сообщения.
// 
// Параметры:
//	 МУдаляемыеID - Массив Из УникальныйИдентификатор - массив идентификаторов ID удаляемых списков торговых точек.
//	
&НаСервере
Процедура ЭлементСпискаУдалить(МУдаляемыеID)
	
	СтррПоискСТТ = Новый Структура("ID"); // структура для поиска списка торговых точек по реквизиту "ID"
	ТЗСТТ = Объект.СпискиТорговыхТочек;
	
	МУдаляемыеСтроки = Новый Массив; // массив удаляемых строк
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТЗНА = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов");
	
	Если ТипЗнч(ТЗНА) = Тип("ТаблицаЗначений") Тогда // проверяем - используются ли удаляемые списки ТТ в настройках агентов?
		
		СтррПоискНА = Новый Структура("СсылкаСписокТТ"); // структура для поиска настроек агентов по реквизиту "СсылкаСписокТТ"
		
		Для каждого ID Из МУдаляемыеID Цикл
			СтррПоискСТТ.ID 			= ID;
			СтррПоискНА.СсылкаСписокТТ	= ID;			
			мСтрокиСТТ = ТЗСТТ.НайтиСтроки(СтррПоискСТТ); // массив найденных строк списков торговых точек (состоит из одного элемента)
			мСтрокиНА  = ТЗНА.НайтиСтроки(СтррПоискНА);   // массив найденных строк настроек агентов
			Если мСтрокиНА.Количество() = 0 Тогда // можно удалить список торговых точек
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МУдаляемыеСтроки, мСтрокиСТТ);
			ИначеЕсли мСтрокиНА.Количество() = 1 Тогда
				Текст = НСтр("ru = 'Нельзя удалить элемент ""%1"", т.к. он используется торговым агентом ""%2"".'");
				Текст = СтрШаблон_(Текст, мСтрокиСТТ[0].Наименование, мСтрокиНА[0].Пользователь);
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Иначе
				Текст = НСтр("ru = 'Нельзя удалить элемент ""%1"", т.к. он используется торговыми агентами:'");
				Текст = СтрШаблон_(Текст, мСтрокиСТТ[0].Наименование);
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				Для Индекс = 0 По мСтрокиНА.ВГраница() Цикл
					Текст = СтрШаблон_(НСтр("ru = '    %1. %2'"), Индекс+1, мСтрокиНА[Индекс].Пользователь);
					//@skip-check object-deprecated
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла; 
		
	Иначе // настройки агентов отсутствуют, удаляем элементы без проверки использования
		
		Для каждого ID Из МУдаляемыеID Цикл
			СтррПоискСТТ.ID = ID;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МУдаляемыеСтроки, ТЗСТТ.НайтиСтроки(СтррПоискСТТ));
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если МУдаляемыеСтроки.Количество() > 0 Тогда
		Для каждого СтрокаТ Из МУдаляемыеСтроки Цикл
			ТекОбъект.УдалитьОбъектИзХранилища("СпрСТТ", СтрокаТ.ID); // удаляем элемент списка торговых точек из хранилища
			ТЗСТТ.Удалить(ТЗСТТ.Индекс(СтрокаТ));
		КонецЦикла; 
		// записываем списки ТЗ списка торговых точек в хранилище
		СохранитьОбъектВХранилище();
	КонецЕсли; 
	
КонецПроцедуры

// Выбор значения и закрытие формы - когда форма открыта в режиме подбора.
&НаКлиенте
Процедура СпискиТТВыбратьЗначения(МСтроки)
	
	Элемент = Элементы.СпискиТТ;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТ = Элемент.ТекущиеДанные;
	СтррРезультат = Новый Структура("ID,Наименование", СтрокаТ.ID, СтрокаТ.Наименование);
	
	// учитываем, что может быть выбрано несколько значений
	Если ТипЗнч(МСтроки) = Тип("Массив") Тогда
		МЗначения = Новый Массив;
		ТЗн = Объект.СпискиТорговыхТочек;	
		Для Каждого ИдСтроки Из МСтроки Цикл
			СтрокаТ = ТЗн.НайтиПоИдентификатору(ИдСтроки);
			МЗначения.Добавить(Новый Структура("ID,Наименование", СтрокаТ.ID, СтрокаТ.Наименование));
		КонецЦикла;
		СтррРезультат.Вставить("мВыбранныеЗначения", МЗначения);
	КонецЕсли; 
	
	//@skip-check form-self-reference
	ЭтаФорма.Закрыть(СтррРезультат);

КонецПроцедуры

&НаСервере
Процедура АКФ_ДобавитьТорговыеТочкиВСписки_Сервер(МИзменения, Подразделение = Неопределено)
	ТекОбъект = РеквизитФормыВЗначение("Объект"); 
	ТекОбъект.АКФ_ДобавитьТорговыеТочкиВСпискиНаСервере(МИзменения, Подразделение);
	ПрочестьОбъектИзХранилища();	
КонецПроцедуры

&НаСервере
Функция АКФ_ПолучитьТипПодразделения() 
	возврат Метаданные.ОпределяемыеТипы.Подразделение.Тип;
КонецФункции

&НаКлиенте
Процедура СпискиТТПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Если СтррКонтекст.НастройкиАгентовРедактируются Тогда
			Текст = НСтр("ru = 'Настройки агентов сейчас редактируются, сохраните настройки агентов и повторите попытку.'");
			ПоказатьПредупреждение(, Текст);
			Возврат;
		КонецЕсли; 

		МСтроки = Элементы.СпискиТТ.ВыделенныеСтроки;
		МУдаляемыеID = Новый Массив;
		
		ТЗн = Объект.СпискиТорговыхТочек;	
		Для Каждого ИдСтроки Из МСтроки Цикл
			СтрокаТ = ТЗн.НайтиПоИдентификатору(ИдСтроки);
			МУдаляемыеID.Добавить(СтрокаТ.ID);
		КонецЦикла;
		
		ОчиститьСообщения();
		ЭлементСпискаУдалить(МУдаляемыеID);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АКФ_ДобавитьТорговыеТочкиВСпискиПоПодразделениюОбработкаВыбора(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		//@skip-check use-non-recommended-method
		Сообщить("Не выбрано подразделение.");
		Возврат;
	КонецЕсли;
	
	МИзменения = Новый Массив;
	АКФ_ДобавитьТорговыеТочкиВСписки_Сервер(МИзменения, Результат);
	
	Для Каждого Элемент Из МИзменения Цикл
		//@skip-check use-non-recommended-method
		Сообщить(Элемент);	
	КонецЦикла;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ЭлементыСписка
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти