#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульК; // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("Отладка");
	
	СтррКонтекст.Отладка = Неопределено; //"МУ"; // параметр отладки, возможные значения: 
	    // - Неопределено - отладка выключена,
		// - "КО" - эмуляция получения каналов обмена, 
		// - "МУ" - эмуляция получения списка МУ.
	
	СтррАдресаЛК = Новый Структура;
	СтррАдресаЛК.Вставить("url0", "agentplus.online"); // адрес ЛК - "agentplus.online", "apweb:80".
	СтррАдресаЛК.Вставить("url1", "agentplus.online"); // адрес сервиса чеков "apweb:80" "cp.agentplus.online"   
	СтррОперацииЛК = ПолучитьОперацииЛК(СтррАдресаЛК); // структуру со всеми операциями API для работы с ЛК
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	Объект.ЛКЗапомнитьЛогинИПароль = Истина;
	
	ВосстановитьНастройкиСервер();
	
	Если ПустаяСтрока(Объект.ЛКЛогин) Тогда // логин еще не указывался, по умолчанию рекомендуем запоминать логин
		Объект.ЛКЗапомнитьЛогинИПароль = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;	
	УстановитьМодифицированостьФормы(Ложь);
	
	Элементы.ЛКДекорацияОжиданиеОтвета.Видимость = Ложь;
	ЛКРегистрацияУчетнойСистемыОбновитьФорму();
	
	ПодключитьОбработчикОжидания("ЛКПроверитьЗавершениеОперации", 1, Истина); // проверяем - есть ли незавершенные операции с ЛК от предыдущего сеанса?
	
	Если СтррКонтекст.Отладка <> Неопределено Тогда
		//@skip-check use-non-recommended-method
		Сообщить("Внимание!!! Включен режим отладки: " + СтррКонтекст.Отладка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПЗакрытьФормуОбработки" Тогда
		
		//@skip-check use-non-recommended-method
		Если Параметр = "*" Или Найти(","+Параметр+",", ",ЛичныйКабинет,") <> 0 Тогда
			//@skip-check form-self-reference
			Если ЭтаФорма.Открыта() Тогда
				ЭтаФорма.Модифицированность = Ложь;
				ЭтаФорма.Закрыть();
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭлементФормыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
	ПоляУдаленияПробелов = "ЛКЛогин,ЛКНазваниеУС,ЛКТокенУС";
	
	Имя = Элемент.Имя;	
	//@skip-check use-non-recommended-method
	Если 0 <> Найти(","+ПоляУдаленияПробелов+",", ","+Имя+",") Тогда
		Объект[Имя] = СокрЛП(Объект[Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛКРегистрацияУСПриИзменении(Элемент)
	
	Если ФлагЛКРегистрацияУС И ПустаяСтрока(Объект.ЛКНазваниеУС) Тогда
		Объект.ЛКНазваниеУС = "Основная";
	КонецЕсли;
	
	ЛКРегистрацияУчетнойСистемыОбновитьФорму();
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСохранитьВсе(Команда)

	СохранитьНастройкиКлиент();
	
КонецПроцедуры

#Область ОбработчикиКомандФормы_КомандыЛК

&НаКлиенте
Процедура КомандаЛКВойтиЧерезБраузер(Команда)
	
	ЗапуститьПриложение("http://agentplus.online/");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКПроверитьПодключение(Команда)
	
	Если ЛКПроверитьЛогинИПароль() Тогда	
		СтррJSON = ЛКОперацияВыполнить("УСРегистрацияТест",, Ложь);
		Если СтррJSON <> Неопределено Тогда
			Текст = СтрШаблон_(НСтр("ru='Код ответа %1.'"), СтррJSON.КодСостояния) + " ";
			Если СтррJSON.КодСостояния = 400 Тогда
				Если СтррJSON.Свойство("ErrorCode") Тогда
					Если СтррJSON.ErrorCode = 1 Тогда // ошибка "User with this login and password is not found!"
						Текст = Текст + НСтр("ru='Неверный логин или пароль.'");
					Иначе // любой адекватный ответ со свойством ErrorCode считаем прошедшим проверку на логин и пароль
						Текст = НСтр("ru='Подключение установлено успешно.'");
					КонецЕсли; 
				Иначе
					Текст =	ЛКОписаниеОшибки(НСтр("ru='Ошибка подключения.'"), СтррJSON.КодСостояния, СтррJSON);
				КонецЕсли; 
			ИначеЕсли СтррJSON.КодСостояния = 0 Тогда
				Текст = Текст + НСтр("ru='Ошибка подключения к Интернет или некорректный адрес.'");
			Иначе
				Текст = ЛКОписаниеОшибки(НСтр("ru='Ошибка подключения.'"), СтррJSON.КодСостояния, СтррJSON);
			КонецЕсли; 
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКЗарегистрироватьУС(Команда)
	
	//@skip-check form-self-reference
	Если Не ЛКПроверитьЛогинИПароль() Тогда
	ИначеЕсли ПустаяСтрока(Объект.ЛКНазваниеУС) Тогда
		Текст = НСтр("ru='Укажите название учетной системы для регистрации в ""Личном кабинете"". Например, ""Основная"".'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ЛКНазваниеУС");
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПередДействием", ЭтотОбъект, "УСРегистрация");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Настройки были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЛКНачалоПодключения("УСРегистрация");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКОбновитьСведенияУС(Команда)
	
	//@skip-check form-self-reference
	Если Не ЛКПроверитьЛогинИПароль() Тогда
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПередДействием", ЭтотОбъект, "УСОбновитьСведения");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Настройки были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЛКНачалоПодключения("УСОбновитьСведения");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКОтменитьРегистрациюУС(Команда)

	Текст = НСтр("ru = 'Отменить регистрацию учетной системы в ""Личном кабинете""?
		|После отмены станут недоступны некоторые сервисы ""Личного кабинета"" (автоматическое получение обновлений,
		|обмен данными с использованием функционала ""Личного кабинета""). Продолжить?'");
	Текст = СтрЗаменить(Текст, Символы.ПС, " "); 
	Оповещение = Новый ОписаниеОповещения("КомандаЛКОтменитьРегистрациюУСПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьРегистрациюУС(Команда)
	Текст = НСтр("ru = 'Очистить сведения о регистрации учетной системы? Операция выполнится без обращения к ""Личному кабинету"". 
		|Не рекомендуется ее применять, если в ЛК сохранились сведения о регистрации текущей учетной системы.
		|Продолжить?'");
	Текст = СтрЗаменить(Текст, Символы.ПС, " "); 
	Оповещение = Новый ОписаниеОповещения("КомандаСброситьРегистрациюУСПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКНетДоступа(Команда)
	
	МодульК().КомандаВыполнить("ПоказатьЛичныйКабинетЗаявка");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКЧтоТакоеЛК(Команда)
	
	Текст = НСтр("ru='Показать описание ""Личного кабинета""? Будет открыта страница в веб-браузере.'");
	Оповещение = Новый ОписаниеОповещения("ЧтоТакоеЛКПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

// Убрать!!!
&НаКлиенте
Процедура КомандаЛКРазблокироватьТокен(Команда)
	Элементы.ЛКИдентификаторУС.Доступность = Истина;
	Элементы.ЛКИдентификаторУС.ТолькоПросмотр = Ложь;
	Элементы.ЛКТокенУС.Доступность = Истина;
	Элементы.ЛКТокенУС.ТолькоПросмотр = Ложь;
КонецПроцедуры

//  ОбработчикиКомандФормы_КомандыЛК
#КонецОбласти

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект);
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//       т.е. для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив Из Строка - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	//@skip-check use-non-recommended-method
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		//@skip-check use-non-recommended-method
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ВосстановитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект));
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Если Не Объект.ЛКЗапомнитьЛогинИПароль Тогда // от предыдущей версии мог остаться логин и пароль в БД
		Объект.ЛКЛогин  = "";
		Объект.ЛКПароль = "";
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция НастройкиФормы(ТекОбъект)

	СтрРеквизиты = "ЛКПодтверждение,"; // добавили реквизит обработки, отсутствующий на форме
	
	Для Каждого ЭлементМетаданных Из ТекОбъект.Метаданные().Реквизиты Цикл
		//@skip-check form-self-reference
		Если ЭтаФорма.Элементы.Найти(ЭлементМетаданных.Имя) <> Неопределено Тогда
			СтрРеквизиты = СтрРеквизиты + ЭлементМетаданных.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Лев(СтрРеквизиты, СтрДлина(СтрРеквизиты)-1);

КонецФункции

&НаКлиенте
Процедура СохранитьНастройкиКлиент()
	
	УстановитьМодифицированостьФормы(Ложь);
	СохранитьНастройкиСервер();
	Оповестить("АПЛКИзменение", Неопределено);

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Если Не Объект.ЛКЗапомнитьЛогинИПароль Тогда // сохраняем в хранилище пустые логин и пароль
		ТекОбъект.ЛКЛогин  = "";
		ТекОбъект.ЛКПароль = "";
	КонецЕсли; 
	ТекОбъект.СохранитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект));
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьЗначениеНастройки(ИмяНастройки)
	
	Возврат РеквизитФормыВЗначение("Объект").ПрочитатьЗначениеНастройки(ИмяНастройки);
	
КонецФункции 

&НаСервере
Процедура СохранитьЗначениеНастройки(ИмяНастройки, Значение)
	
	РеквизитФормыВЗначение("Объект").СохранитьЗначениеНастройки(ИмяНастройки, Значение);
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Форма

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Режим;
	Элементы.СохранитьВсе.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиКлиент();
		Закрыть();
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьЛогинИлиПарольЛКПродолжить(РезультатОтвета, МПараметры) Экспорт
	
	Оповестить("АППрерватьБыструюНастройку", Неопределено);	
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		СообщитьОбУказанииРеквизитов(МПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбУказанииРеквизитов(МПараметры) Экспорт
	
	//@skip-check form-self-reference
	Если Не ЭтаФорма.Открыта() Тогда
		ЭтаФорма.Открыть();
	Иначе
		ЭтаФорма.Активизировать();
	КонецЕсли; 

	ОчиститьСообщения();
	Для Каждого СтррПараметр Из МПараметры  Цикл
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррПараметр.Описание,, "Объект." + СтррПараметр.Реквизит);	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПередДействием(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиКлиент();
		ЛКНачалоПодключения(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция ЛКПроверитьЛогинИПароль()
	
	Если ПустаяСтрока(Объект.ЛКЛогин) Или ПустаяСтрока(Объект.ЛКПароль) Тогда

		Если ПустаяСтрока(Объект.ЛКЛогин) И ПустаяСтрока(Объект.ЛКПароль) Тогда
			Текст = НСтр("ru='Не заполнены логин и пароль для доступа в ""Личный кабинет"". Хотите указать логин?'");
		ИначеЕсли ПустаяСтрока(Объект.ЛКЛогин) Тогда
			Текст = НСтр("ru='Не заполнен логин для доступа в ""Личный кабинет"". Хотите указать логин?'");
		Иначе
			Текст = НСтр("ru='Не заполнен пароль для доступа в ""Личный кабинет"". Хотите указать пароль?'");
		КонецЕсли;
		
		МПараметры = Новый Массив;		
		Если ПустаяСтрока(Объект.ЛКЛогин) Тогда
			МПараметры.Добавить(Новый Структура("Описание,Реквизит", НСтр("ru='Заполните логин для доступа в ""Личный кабинет"".'"), "ЛКЛогин"));
		КонецЕсли; 
		Если ПустаяСтрока(Объект.ЛКПароль) Тогда
			МПараметры.Добавить(Новый Структура("Описание,Реквизит", НСтр("ru='Заполните пароль для доступа в ""Личный кабинет"".'"), "ЛКПароль"));
		КонецЕсли; 
		
		Оповещение = Новый ОписаниеОповещения("УказатьЛогинИлиПарольЛКПродолжить", ЭтотОбъект, МПараметры);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиВЛКПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		//@skip-check form-self-reference
		Если ЭтаФорма.Открыта() И ЭтаФорма.ВводДоступен() Тогда
			КомандаЛКВойтиЧерезБраузер(Неопределено);
		Иначе
			Открыть();
		КонецЕсли; 
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Строка") Тогда // передана строка-подсказка, ее нужно вывести в сообщении
			//@skip-check use-non-recommended-method
			Сообщить(ДополнительныеПараметры);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОкноФормыЛКПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Открыть();
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Форма
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ОписаниеКонфигурации1С

&НаСервере
Функция ПолучитьПоколениеВерсииКонфигурации1С() 
	
	МНомераВерсии = СтрРазделить_(Метаданные.Версия, ".");
	ВсегоПодВерсий = Мин(МНомераВерсии.Количество(), 2);
	
	Для Поз = 0 По ВсегоПодВерсий - 1 Цикл
		Номер = СокрЛП(МНомераВерсии[Поз]);
		МНомераВерсии[Поз] = ?(Номер = "", "0", Номер);
	КонецЦикла;
	
	Если ВсегоПодВерсий > 1 Тогда
		Результат = СокрЛП(МНомераВерсии[0]) + "." + СокрЛП(МНомераВерсии[1]);
	ИначеЕсли ВсегоПодВерсий = 1 Тогда
		Результат = СокрЛП(МНомераВерсии[0]) + ".0";
	Иначе
		Результат = "0.0";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура дополняет структуру описанием конфигурации 1С.
//	
//	Параметры:	
//		Структура - Структура - структура для вставки описания конфигурации 1С.
//	
&НаСервере
Функция ПолучитьОписаниеКонфигурации1С(Структура = Неопределено)

	Если Структура = Неопределено Тогда
		Структура = Новый Структура;
	КонецЕсли; 
	
	Структура.Вставить("ProductName", 		Метаданные.Имя);
	Структура.Вставить("ProductAlias", 		Метаданные.Синоним);
	Структура.Вставить("ProductGeneration",	ПолучитьПоколениеВерсииКонфигурации1С());
	Структура.Вставить("ProductVersion",  	Метаданные.Версия); 
	Структура.Вставить("Compatibility", 	Строка(Метаданные.РежимСовместимости));
	Структура.Вставить("UICompatibility",	Строка(Метаданные.РежимСовместимостиИнтерфейса));
	Структура.Вставить("IsProductModified",	Ложь);
	
	Возврат Структура;

КонецФункции

&НаСервере
Функция ПолучитьНазваниеУС()
	
	Если Не ПустаяСтрока(Метаданные.Синоним) Тогда
		Результат = Метаданные.Синоним;
	Иначе
		Результат = Метаданные.Имя;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

//&НаКлиенте
//Функция ОписаниеКонфигурации1СОтличаетсяОтЛК(СтррОписаниеИзЛК)
//
//	СтррОписание1С = ПолучитьОписаниеКонфигурации1С();
//	
//	ЕстьОтличия = Ложь;
//	Для каждого Элемент Из СтррОписание1С Цикл
//		ЗначениеВЛК = СтррОписаниеИзЛК[Элемент.Ключ];
//		Если Элемент.Значение <> ЗначениеВЛК Тогда
//			Если Не ЕстьОтличия Тогда
//				ЕстьОтличия = Истина;
//				//@skip-check object-deprecated
//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Отличаются свойства конфигурации:'"));
//			КонецЕсли;
//			Текст = СтрШаблон_(НСтр("ru = 'Свойство ""%1"". Текущее значение: ""%2"". Значение в ЛК: ""%3"".'"),
//						Элемент.Ключ, Элемент.Значение, ЗначениеВЛК);
//			//@skip-check object-deprecated
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
//		КонецЕсли; 
//	КонецЦикла; 
//	
//	Возврат ЕстьОтличия;
//	          
//КонецФункции

// СлужебныеПроцедурыИФункции_ОписаниеКонфигурации1С
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РегистрацияУС

&НаКлиенте
Процедура ЛКРегистрацияУчетнойСистемыОбновитьФорму()
	
	Если Не ПустаяСтрока(Объект.ЛКИдентификаторУС) Тогда
		ФлагЛКРегистрацияУС = Истина;
		ЗаголовокГруппы = НСтр("ru = 'Сведения о регистрации учетной системы'");
	Иначе
		ЗаголовокГруппы = НСтр("ru = 'Сведения для регистрации учетной системы'")
	КонецЕсли;
	
	Элементы.ГруппаЛКДействияРегистрация.Видимость = ФлагЛКРегистрацияУС;
	Элементы.ДекорацияЛКРегистрацияУчетнойСистемы.Видимость = Не ФлагЛКРегистрацияУС;
	
	ВидимостьКнопкиРегистрацииУС = ПустаяСтрока(Объект.ЛКИдентификаторУС);
	
	Элементы.ЛКРегистрацияУС.Видимость 			= ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКЗарегистрировать.Видимость 		= ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКОтменитьРегистрациюУС.Видимость 	= Не ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКОбновитьСведенияУС.Видимость 	= Не ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКНазваниеУС.ТолькоПросмотр  		= Не ВидимостьКнопкиРегистрацииУС;
	Элементы.СброситьРегистрациюУС.Видимость	= Не ВидимостьКнопкиРегистрацииУС;
	
	Элементы.ЛКИдентификаторУС.Видимость 		= Не ВидимостьКнопкиРегистрацииУС;
	Элементы.ЛКТокенУС.Видимость 				= Не ВидимостьКнопкиРегистрацииУС;
	
	Элементы.ГруппаЛКРегистрация.Заголовок = ЗаголовокГруппы;
	
КонецПроцедуры

&НаКлиенте 
Функция ЛКПроверитьРегистрациюУчетнойСистемы(БыстраяНастройка)
	
	Если ПустаяСтрока(Объект.ЛКИдентификаторУС) Тогда
		Если БыстраяНастройка Тогда // автономно регистриуем УС в ЛК
			Возврат ЛКБыстраяРегистрацияУчетнойСистемы();
		Иначе
			Текст = НСтр("ru='Не зарегистрирована учетная система в ""Личном кабинете"". Перейти в ""Личный кабинет"" для регистрации учетной системы?'");
			Оповещение = Новый ОписаниеОповещения("ОткрытьОкноФормыЛКПродолжить", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
			Возврат Ложь;
		КонецЕсли; 
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте 
Функция ЛКБыстраяРегистрацияУчетнойСистемы()
	
	//@skip-check use-non-recommended-method
	Концовка = Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'");
	Объект.ЛКНазваниеУС = ПолучитьНазваниеУС() + " (" + Концовка + ")";
	Объект.ЛКЗапомнитьЛогинИПароль = Истина;
	ОперацияУСРегистрация();
	Возврат Не ПустаяСтрока(Объект.ЛКИдентификаторУС);
	
КонецФункции

// СлужебныеПроцедурыИФункции_РегистрацияУС
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВебСервисЛК_ОбщиеПроцедурыОпераций

&НаКлиенте 
Процедура ЛКНачалоПодключения(Операция)

	ОчиститьСообщения();
	СтррОперация = СтррОперацииЛК[Операция];
	//@skip-check object-deprecated
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru = 'Соединение с %1 ...'"), СтррОперация.url));
	Элементы.ЛКДекорацияОжиданиеОтвета.Видимость = Истина;
	ПодключитьОбработчикОжидания("Операция" + Операция, 1, Истина);

КонецПроцедуры

// Функция возвращает структуру со списком всех операций API ЛК.
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОперацииЛК(СтррАдресаЛК)
	
	МОперации = Новый Массив;
	
	// В опциях указываются параметры передаваемого запроса в ЛК или признаки обработки его результатов:
	// - СвойстваКонфигурации - передавать сведения о конфигурации 1С.
	// - Авторизация		  - требуется авторизация в ЛК.
	// - БезПодтверждения	  - запрос не требует подтверждения.
	// - Get	  			  - get-запрос (если не указан, то put-запрос).
	
	//					Операция - 0		url - 1	path - 2							Опции - 3							Представление операции - 4
	МОперации.Добавить("УСРегистрация;		url0;	api/erpsystem/actions/register;		СвойстваКонфигурации;				Регистрация УС в ЛК");
	МОперации.Добавить("УСРегистрацияТест;	url0;	api/erpsystem/actions/register;		БезПодтверждения; 					Проверка логина и пароля");
	МОперации.Добавить("УСОбновитьСведения;	url0;	api/erpsystem/actions/update;		СвойстваКонфигурации,Авторизация; 	Обновить сведения об УС в ЛК");
	МОперации.Добавить("УСУдалить;			url0;	api/erpsystem/actions/delete;		Авторизация;						Удалить сведения об УС из ЛК");
	МОперации.Добавить("УСПолучитьСведения;	url0;	api/erpsystem;						Авторизация,БезПодтверждения;		Получить сведения об УС из ЛК");
	МОперации.Добавить("КОПолучитьСписок;	url1;	api/my/settings/exchange/channels;	Авторизация,БезПодтверждения,Get;	Получить список каналов обмена из ЛК");
	МОперации.Добавить("МУПолучитьСписок;	url1;	api/my/devices;						Авторизация,БезПодтверждения,Get;	Получить список мобильных устройств из ЛК");
	
	СтррОперации = Новый Структура;
	
	Для каждого стрСписок Из МОперации Цикл
		мЗначения = СтрРазделить_(СтрСписок, ";",, Истина);
		//@skip-check structure-consructor-too-many-keys
		СтррОперации.Вставить(мЗначения[0], Новый Структура("url,path,Опции,Представление", СтррАдресаЛК[мЗначения[1]], мЗначения[2], мЗначения[3], мЗначения[4]));
	КонецЦикла; 
	
	Возврат СтррОперации;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЛКОписаниеКодаСостояния(КодСостояния)
	
	Если КодСостояния = 200 Тогда
		Результат = НСтр("ru = 'Ошибок нет.'"); 
	ИначеЕсли КодСостояния = 204 Тогда
		Результат = НСтр("ru = 'Нет запрошенных данных.'"); 
	ИначеЕсли КодСостояния = 400 Тогда
		Результат = НСтр("ru = 'Неверный запрос.'"); 
	ИначеЕсли КодСостояния = 401 Тогда
		Результат = НСтр("ru = 'Неавторизованный запрос.'"); 
	ИначеЕсли КодСостояния = 404 Тогда
		Результат = НСтр("ru = 'Неверный адрес ресурса или команда не поддерживается.'"); 
	ИначеЕсли КодСостояния = 500 Тогда
		Результат = НСтр("ru = 'Внутренняя ошибка сервера.'"); 
	ИначеЕсли КодСостояния = 503 Тогда
		Результат = НСтр("ru = 'Сервис недоступен.'"); 
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
&НаКлиентеНаСервереБезКонтекста
Функция ЛКОписаниеОшибки(ЗаголовокОшибки, КодСостояния, СтррJSON)
	
	Текст = СтрШаблон_(НСтр("ru = 'Код ответа %1.'"), КодСостояния) + " "; 
	
	ОписаниеОтвета = "";
	Если СтррJSON.Свойство("ErrorCode") Тогда
		ОписаниеОтвета = ОписаниеОтвета + "(" + Строка(СтррJSON.ErrorCode) + ") ";
	КонецЕсли; 
	Если СтррJSON.Свойство("Message") Тогда
		ОписаниеОтвета = ОписаниеОтвета + СтррJSON.Message + " ";
	КонецЕсли;
	
	Если ОписаниеОтвета = "" Тогда
		ОписаниеОтвета = ЛКОписаниеКодаСостояния(КодСостояния);
	КонецЕсли; 
	
	Если ОписаниеОтвета <> "" Тогда
	    Текст = Текст + НСтр("ru = 'Описание:'") + " " + ОписаниеОтвета; 
	КонецЕсли; 
	
	Возврат ЗаголовокОшибки + " " + Текст;
	
КонецФункции

// Функция возвращает структуру JSON, полученную из HTTP-запроса или Неопределено, если произошла ошибка.
// Описание ошибки возвращается в параметре ТекстОшибки.
&НаКлиенте
Функция ЛКОтправитьЗапрос(СтррСвойства, ТекстОшибки)

	IsPutQuery = Не СтррСвойства.Свойство("Get");
	Если IsPutQuery Тогда // 
		ТелоЗапроса = ПреобразоватьJSONВСтроку(СтррСвойства.Параметры);
	КонецЕсли; // для Get-запроса тело запроса не используем

	Соединение = Новый HTTPСоединение(СтррСвойства.url);
	
	HTTPЗапрос = Новый HTTPЗапрос(СтррСвойства.АдресРесурса);
	HTTPЗапрос.Заголовки.Вставить("Content-Type","application/json; charset=utf-8");
	
	Если СтррСвойства.Свойство("Заголовки") И ТипЗнч(СтррСвойства.Заголовки) = Тип("Структура") Тогда
		Для каждого Элемент Из СтррСвойства.Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
	Если IsPutQuery Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли; 
	
	ЗаголовокОшибки = ТекстОшибки;
	
	Попытка
		Если IsPutQuery Тогда
			//@skip-check object-deprecated
			HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			
			Если СтррКонтекст.Отладка = Неопределено Тогда
				HTTPОтвет = Соединение.Получить(HTTPЗапрос);
			Иначе
				HTTPОтвет = Новый Структура("КодСостояния", 200);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтррКонтекст.Отладка = Неопределено Тогда
			ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Иначе
			ТелоОтвета = "Отладка!";
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ЗаголовокОшибки + " " + НСтр("ru = 'Ошибка работы с Интернет.'");
	КонецПопытки;

	СтррJSON = Неопределено;
	
	Если ТелоОтвета = "null" И Не IsPutQuery И HTTPОтвет.КодСостояния = 200 Тогда
		ТекстОшибки = ТекстОшибки + " Получено пустое тело ответа на get-запрос! Код ответа сервера: " 
			+ Строка(HTTPОтвет.КодСостояния) + " " + ЛКОписаниеКодаСостояния(HTTPОтвет.КодСостояния);
		HTTPОтвет = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(ТелоОтвета) Тогда
		Попытка
			СтррJSON = ПреобразоватьСтрокуВJSON(ТелоОтвета);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли; 
	
	Если СтррJSON = Неопределено Тогда
		СтррJSON = Новый Структура;
	КонецЕсли; 
	
	СтррJSON.Вставить("КодСостояния", 0); // 0 - внутренняя ошибка
	
	Если HTTPОтвет <> Неопределено Тогда
		Если HTTPОтвет.КодСостояния = 200 Тогда // успешный ответ от сервера	
			ТекстОшибки = "";
		Иначе
			ТекстОшибки = ЛКОписаниеОшибки(ЗаголовокОшибки, HTTPОтвет.КодСостояния, СтррJSON);
		КонецЕсли;
		СтррJSON.КодСостояния = HTTPОтвет.КодСостояния;
	КонецЕсли; 
	
	Элементы.ЛКДекорацияОжиданиеОтвета.Видимость = Ложь; // функция после ответа от ЛК скрывает элемент ожидания на форме
	
	Возврат СтррJSON;

КонецФункции

// СлужебныеПроцедурыИФункции_ВебСервисЛК_ОбщиеПроцедурыОпераций
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВебСервисЛК_СтартОпераций

&НаКлиенте
Процедура ОперацияУСРегистрация()
	
	СтррJSON = ЛКОперацияВыполнить("УСРегистрация");
	Если СтррJSON.КодСостояния = 200 Тогда
		Объект.ЛКИдентификаторУС = СтррJSON.Key;
		Объект.ЛКТокенУС 		 = СтррJSON.Token;
		СохранитьНастройкиКлиент(); // сохраняем настройки в хранилище
		ЛКОперацияВыполнить("complete*");
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ОперацияУСОбновитьСведения()
//
//	СтррJSON = ЛКОперацияВыполнить("УСПолучитьСведения"); // сначала получаем сведения из ЛК, чтобы их сверить с текущими сведениями УС
//	Если СтррJSON.КодСостояния = 200 Тогда
//		Если Не ОписаниеКонфигурации1СОтличаетсяОтЛК(СтррJSON) Тогда
//			//@skip-check object-deprecated
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Описание конфигурации не отличается от описания в ЛК.'"));
//			Возврат;
//		КонецЕсли; 		
//	Иначе
//		Возврат; // произошла ошибка
//	КонецЕсли;
//	
//	СтррJSON = ЛКОперацияВыполнить("УСОбновитьСведения");
//	Если СтррJSON.КодСостояния = 200 Тогда
//		СохранитьНастройкиКлиент(); // сохраняем настройки в хранилище
//		ЛКОперацияВыполнить("complete*");
//	КонецЕсли;
//
//КонецПроцедуры

//&НаКлиенте
//Процедура ОперацияУСУдалить()
//
//	СтррJSON = ЛКОперацияВыполнить("УСУдалить");	
//	Если СтррJSON.КодСостояния = 200 Тогда
//		СохранитьНастройкиКлиент(); // сохраняем настройки в хранилище
//		ЛКОперацияВыполнить("complete*");
//	ИначеЕсли СтррJSON.КодСостояния = 400 И СтррJSON.ErrorCode = 4 Тогда // УС с заданным идентификатором (Key) в ЛК не найдена, просто очищаем данные об УС
//		//@skip-check object-deprecated
//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Ошибка 400 проигнорирована как некритичная...'"));
//		ЛКОперацияЗавершить("УСУдалить", Истина);
//	КонецЕсли;
//
//КонецПроцедуры

// СлужебныеПроцедурыИФункции_ВебСервисЛК_СтартОпераций
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВебСервисЛК_РаботаОпераций

// Функция генерирует и выполняет HTTP-запрос к ЛК в соответствии с операцией (в т.ч. и запросы подтверждения операции).
// В случае ошибки работы операции выводит сообщение с описанием причины ошибки.
// 
// Параметры:
//   Операция - Строка - название операции. Является именем свойства структуры СтррОперацииЛК. 
//				Если указано значение "complete*", то это означает команду подтверждания предыдущей операции.
//				Свойства подтверждаемой операции берутся из атрибута Объект.ЛКПодтверждение (тип - Структура).
//   ПоказатьСостояние - Булево - выводить состояние
//   ВыводитьСообщения - Булево - выводить сообщения
// Возвращаемое значение - структура ответа JSON с обязательным свойством КодСостояния, в котором 
//							возвращается HTTP-код состояния (200 - успешное заврешение).
//
&НаКлиенте
Функция ЛКОперацияВыполнить(Знач Операция, ПоказатьСостояние = Ложь, ВыводитьСообщения = Истина)
	
	Если Операция = "complete*" Тогда // подтверждение предыдущей операции
		Операция = Объект.ЛКПодтверждение.Операция;
	Иначе
		Объект.ЛКПодтверждение = Неопределено; 
	КонецЕсли;
	
	Если Не (СтррОперацииЛК.Свойство(Операция)) Тогда
	    ВызватьИсключение("Процедура ЛКОперацияВыполнить(), неизвестный параметр Операция = " + Операция);
	КонецЕсли; 
	
	РежимПодтверждения = Объект.ЛКПодтверждение <> Неопределено; // признак запроса "подтверждение операции"
	
	Если Операция = "УСРегистрация" Или Операция = "УСРегистрацияТест" Тогда
		СтрПараметры = "Name,Login,Password" + ?(РежимПодтверждения, ",Key,Token", "");
	Иначе
		СтрПараметры = "Key";
	КонецЕсли;
	
	СтррОперация = СтррОперацииЛК[Операция];
	Если ПоказатьСостояние Тогда
		Состояние(СтрШаблон_(НСтр("ru = '%1 - Выполняется операция ""%2""...'"), СтррОперация.url, СтррОперация.Представление));
	КонецЕсли; 
	
	СтррСвойства = ЛКСвойстваЗапроса(СтрПараметры + ?(РежимПодтверждения, ",Signature", ""), СтррОперация.Опции);
	
	ТекстОшибки = СтрШаблон_(?(РежимПодтверждения, НСтр("ru = 'Ошибка подтверждения операции ""%1""!'"), 
		НСтр("ru = 'Ошибка выполнения операции ""%1""!'")), СтррОперация.Представление);
		
	СтррСвойства.Вставить("АдресРесурса", СтррОперация.path + ?(РежимПодтверждения, "/complete", "")); // формат адреса ресурса подтверждения: Операция + "/complete"
	СтррСвойства.Вставить("url", СтррОперация.url);
	СтррJSON = ЛКОтправитьЗапрос(СтррСвойства, ТекстОшибки);
	
	Если СтррJSON.КодСостояния <> 200 Тогда	// произошла ошибка 
		Если ВыводитьСообщения Тогда
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);		
		КонецЕсли; 
	ИначеЕсли СтррJSON.Свойство("Signature") И Не РежимПодтверждения Тогда // ошибки нет и нужно запомнить информацию для дальнейшего подтверждения (подпись и операцию).
		Объект.ЛКПодтверждение = Новый Структура("Signature,Операция", СтррJSON.Signature, Операция);
	КонецЕсли;

	Если РежимПодтверждения Тогда // нужно завершить или отменить операцию (если была ошибка)
		ЛКОперацияЗавершить(Операция, СтррJSON.КодСостояния = 200);
	КонецЕсли;
	
	Возврат СтррJSON;
	
КонецФункции

// Возвращает заполненную структуру для отправки HTTP-запроса.
//
// Параметры:
// 		СтрПараметры - Строка - список параметров запроса.
// 		СтрОпции - Строка - список опций для свойств запроса (через запятую), значения:
//			СвойстваКонфигурации - добавить в структуру свойства конфигурации 1С.
//			Авторизация 		 - заполнить заголовок авторизации.
//			Get 		 		 - get-запрос (если не указан, то put-запрос).
//
&НаКлиенте
Функция ЛКСвойстваЗапроса(СтрПараметры, СтрОпции)
	
	СтррРезультат = Новый Структура("Заголовки,Параметры,НужноПодтверждение");
	
	СтррПараметры = Новый Структура(СтрПараметры);
	//@skip-check use-non-recommended-method
	Если 0 <> Найти(СтрОпции, "СвойстваКонфигурации") Тогда
		ПолучитьОписаниеКонфигурации1С(СтррПараметры); // дополняем структуру свойствами конфигурации
	КонецЕсли; 
	
	//@skip-check structure-consructor-too-many-keys
	СтррИсточник  = Новый Структура("Name,Login,Password,Key,Token", 
		Объект.ЛКНазваниеУС, Объект.ЛКЛогин, Объект.ЛКПароль, Объект.ЛКИдентификаторУС, Объект.ЛКТокенУС);
		
	ЗаполнитьЗначенияСвойств(СтррПараметры, СтррИсточник);
	
	Если СтррПараметры.Свойство("Signature") Тогда
			СтррПараметры.Signature = Объект.ЛКПодтверждение.Signature;
	КонецЕсли; 
	
	СтррРезультат.Параметры = СтррПараметры;
	
	//@skip-check use-non-recommended-method
	Если 0 <> Найти(СтрОпции, "Авторизация") Тогда
		СтррРезультат.Заголовки = Новый Структура;
		СтррРезультат.Заголовки.Вставить("Authorization", "token " + Объект.ЛКИдентификаторУС + ":" + Объект.ЛКТокенУС); 
	КонецЕсли; 
	
	//@skip-check use-non-recommended-method
	Если 0 <> Найти(СтрОпции, "Get") Тогда
		СтррРезультат.Вставить("Get");
	КонецЕсли; 
	
	Возврат СтррРезультат;
		
КонецФункции

// Завершающие действия операции в учетной системе.
// Процедура удаляет признак незавершенного подтверждения из хранилища и завершает / отменяет операцию.
// В случае отмены транзакции выводит сообщение об отмене операции.
&НаКлиенте
Процедура ЛКОперацияЗавершить(Операция = Неопределено, ЗавершитьТранзакцию)
	
	Если Операция = Неопределено Тогда
		Если ТипЗнч(Объект.ЛКПодтверждение) = Тип("Структура") Тогда
			Операция = Объект.ЛКПодтверждение.Операция;
		Иначе
			ВызватьИсключение("Отсутствуют данные для подтверждения операции в атрибуте Объект.ЛКПодтверждение!");			
		КонецЕсли;
	КонецЕсли; 
	
	Если Не СтррОперацииЛК.Свойство(Операция) Тогда
	    ВызватьИсключение("Неизвестный вид операции для завершения! Процедура ЛКОперацияЗавершить(), параметр Операция = " + Операция);
	КонецЕсли; 
	
	СтррОперация = СтррОперацииЛК[Операция];	
	
	Если Операция = "УСРегистрация" Тогда
		Если Не ЗавершитьТранзакцию Тогда
			Объект.ЛКИдентификаторУС = "";
			Объект.ЛКТокенУС		 = "";
		КонецЕсли;
	ИначеЕсли Операция = "УСУдалить" Тогда
		Если ЗавершитьТранзакцию Тогда
			Объект.ЛКИдентификаторУС = "";
			Объект.ЛКТокенУС 		 = "";
		КонецЕсли;
	КонецЕсли; 
	
	Объект.ЛКПодтверждение = Неопределено;
	СохранитьНастройкиКлиент(); 
	
	Если ЗавершитьТранзакцию Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Успешно завершена операция ""%1"".'"), СтррОперация.Представление);	
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);		
	КонецЕсли;
	
	ЛКРегистрацияУчетнойСистемыОбновитьФорму();	
	
КонецПроцедуры

// Процедура проверяет завершение операции, если она не была завершена при предыдущем сеансе работы обработки.
&НаКлиенте
Процедура ЛКПроверитьЗавершениеОперации()
	
	Если Объект.ЛКПодтверждение = Неопределено Тогда // подтверждать нечего - незавершенной операции нет.
		Возврат;
	КонецЕсли; 
	
	Операция = Объект.ЛКПодтверждение.Операция;
	
	Если Не СтррОперацииЛК.Свойство(Операция) Тогда
	    ВызватьИсключение("Неизвестный вид операции для подтверждения! Объект.ЛКПодтверждение.Операция = " + Операция);
	КонецЕсли; 
	
	СтррОперация = СтррОперацииЛК[Операция];	
	
	Текст = СтрШаблон_(НСтр("ru = 'Не подтверждена операция ""%1"".'"), СтррОперация.Представление);
	
	Оповещение = Новый ОписаниеОповещения("ЛКПроверитьЗавершениеОперацииПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст + " " + НСтр("ru = 'Подтвердить операцию?'"), РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

// Обработка ответа на вопрос "Подтвердить операцию?".
// Параметры:
//   РезультатОтвета - КодВозвратаДиалога - код ответа диалога
//   ДополнительныйПараметр - Произвольный - не используется
&НаКлиенте
Процедура ЛКПроверитьЗавершениеОперацииПродолжить(РезультатОтвета, ДополнительныйПараметр) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ЛКОперацияВыполнить("complete*"); // отправляем запрос на завершение и выполняем завершение
	Иначе
		ЛКОперацияЗавершить(, Ложь); // отменяем действие операции
	КонецЕсли;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ВебСервисЛК_РаботаОпераций
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_JSON

&НаСервере
Функция ОтладкаПрочитатьЗначениеКаналовОбмена()
	Возврат ЗначениеИзФайла("D:\Bak\Channels.dat");
КонецФункции

// Перенос (чтение) данных из строки JSON в структуру.
// Параметры:
//   Строка - Строка - строка JSON
// Возвращаемое значение:
//   Строка
&НаКлиенте
Функция ПреобразоватьСтрокуВJSON(Строка) Экспорт
	
	Если Строка = "Отладка!" Тогда
		Если СтррКонтекст.Отладка = "КО" Тогда // эмулируем возврат списка каналов обмена
			МКаналы = ОтладкаПрочитатьЗначениеКаналовОбмена();
			Возврат Новый Структура("JSON", МКаналы);
		ИначеЕсли СтррКонтекст.Отладка = "МУ" Тогда // эмулируем возврат списка МУ - помещаем в строку массив JSON
			//@skip-check type-not-defined
			Текст = Новый ЧтениеТекста("d:\Bak\DevicesJSON.txt", КодировкаТекста.UTF8);
			Строка = "";
			//@skip-check unknown-method-property
			СтрокаТекста = Текст.ПрочитатьСтроку();
			Пока СтрокаТекста <> Неопределено Цикл // строки читаются до символа перевода строки
				Строка = Строка + СтрокаТекста;
			    //@skip-check unknown-method-property
			    СтрокаТекста = Текст.ПрочитатьСтроку();
			КонецЦикла;
		Иначе
			ВызватьИсключение("Включен неизвестный параметр отдалки: " + СтррКонтекст.Отладка);
		КонецЕсли; 
	КонецЕсли; 
	
	Результат = Неопределено;
	
	//@skip-check type-not-defined
	ЧтениеJSON = Новый ЧтениеJSON;
	//@skip-check empty-except-statement
	Попытка
		//@skip-check unknown-method-property
		ЧтениеJSON.УстановитьСтроку(Строка);
		//@skip-check undefined-function
		ПромРезультат = ПрочитатьJSON(ЧтениеJSON);
		Если ТипЗнч(ПромРезультат) <> Тип("Структура") И ПромРезультат <> Неопределено Тогда
			Результат = Новый Структура("JSON", ПромРезультат);
		Иначе
			Результат = ПромРезультат;
		КонецЕсли;
		//@skip-check unknown-method-property
		ЧтениеJSON.Закрыть();
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Преобразование данных из структуры JSON в строку JSON.
// Параметры:
//   СтррЗначения - Структура
// Возвращаемое значение:
//   Строка  
&НаКлиенте
Функция ПреобразоватьJSONВСтроку(СтррЗначения) Экспорт
	
	//@skip-check type-not-defined
	ЗаписьJSON = Новый ЗаписьJSON;
	//@skip-check unknown-method-property
	ЗаписьJSON.УстановитьСтроку();
	//@skip-check unknown-method-property
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Для Каждого Элемент Из СтррЗначения Цикл
		//@skip-check unknown-method-property
		ЗаписьJSON.ЗаписатьИмяСвойства(Элемент.Ключ);
		//@skip-check unknown-method-property
		ЗаписьJSON.ЗаписатьЗначение(Элемент.Значение);
	КонецЦикла; 
	
	//@skip-check unknown-method-property
	ЗаписьJSON.ЗаписатьКонецОбъекта();	
	
	//@skip-check unknown-method-property
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// СлужебныеПроцедурыИФункции_JSON
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_КаналыОбмена

&НаКлиенте 
Процедура КОПредложитьЗадатьКаналыОбменаВЛК()
	
	НазваниеУС = ПрочитатьЗначениеНастройки("ЛКНазваниеУС");
	Текст = СтрШаблон_(НСтр("ru='В ""Личном кабинете"" не создан канал обмена для учетной системы ""%1"".'"), НазваниеУС)
		+ Символы.ПС + НСтр("ru='Задайте в ""Личном кабинете"" канал обмена для этой учетной системы, или общий канал для всех учетных систем.'")
		+ Символы.ПС + НСтр("ru='Перейти в окно настроек ""Личного кабинета""?'");
	Оповещение = Новый ОписаниеОповещения("ПерейтиВЛКПродолжить", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

// Процедура получает список каналов обмена данными из ЛК.
// 
// Параметры:
// 		БыстраяНастройка - Булево - Если значение Ложь, то результат возвращается через оповещение всех окон 
//									(т.е. подразумевается интерактивное участие пользователя).
// 									Если значение Истина, то результат возвращается ... 
// 									при этом канал обмена выбирается автоматически.
&НаКлиенте
Процедура КОПолучитьКаналыОбменаИзЛК(БыстраяНастройка)
	
	СтррJSON = ЛКОперацияВыполнить("КОПолучитьСписок", Истина);
	ВыбранныйКанал = Неопределено;
	
	Если СтррJSON.КодСостояния = 200 Тогда
		// проверяем указаны ли каналы обмена
		МКаналыОбмена = СтррJSON.JSON;
		Если МКаналыОбмена.Количество() = 0 Тогда // предупреждаем что нет каналов и предлагаем перейти в ЛК
			Если БыстраяНастройка Тогда
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В ""Личном кабинете"" не задан канал обмена, автоматическая настройка обмена данными пропущена...'"));
			Иначе
				КОПредложитьЗадатьКаналыОбменаВЛК();
			КонецЕсли; 
		ИначеЕсли МКаналыОбмена.Количество() = 1 Тогда
			ВыбранныйКанал = МКаналыОбмена[0];
		Иначе // каналов больше одного, нужно найти "канал по умолчанию", если такого нет, предложить выбрать канал из списка
			Для каждого Канал Из МКаналыОбмена Цикл
				Если Канал.IsDefault Тогда
					ВыбранныйКанал = Канал;
				    Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если ВыбранныйКанал = Неопределено Тогда // нет канала "по умолчанию", нужно предложить пользователю выбрать канал из списка
				Если БыстраяНастройка Тогда // выбираем канал автоматически
					ВыбранныйКанал = МКаналыОбмена[0]; // просто выбираем первый канал из списка
				Иначе // нужно предложить пользователю выбрать канал из списка
					ЛКИдентификаторКО = НРег(Строка(ПрочитатьЗначениеНастройки("ЛКИдентификаторКаналаОбмена")));
					ВыделитьЭлемент = Неопределено;
					Список = Новый СписокЗначений;
					Для каждого Канал Из МКаналыОбмена Цикл
						Элемент = Список.Добавить(Канал.Id, Канал.Name + " (" + СокрЛП(Канал.ExchangeWay) + ")");
						Если НРег(Канал.Id) = ЛКИдентификаторКО Тогда
							ВыделитьЭлемент = Элемент;
						КонецЕсли; 
					КонецЦикла;
					//@skip-check form-self-reference
					Оповещение = Новый ОписаниеОповещения("КОВыборКаналаИзСпискаПродолжить", ЭтаФорма, МКаналыОбмена);
					Список.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выберите канал обмена данными'"), ВыделитьЭлемент);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	
	Если ВыбранныйКанал <> Неопределено Тогда 
		КООповеститьОВыбранномКанале(ВыбранныйКанал, БыстраяНастройка);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура КОВыборКаналаИзСпискаПродолжить(ВыбранныйЭлемент, МКаналыОбмена) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ИдКанала = ВыбранныйЭлемент.Значение;
		ВыбранныйКанал = Неопределено;
		Для Каждого Канал Из МКаналыОбмена Цикл
			Если ИдКанала = Канал.Id Тогда
				ВыбранныйКанал = Канал;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		КООповеститьОВыбранномКанале(ВыбранныйКанал);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КООповеститьОВыбранномКанале(Канал, БыстраяНастройка = Ложь)
	
	ИдКанала = Новый УникальныйИдентификатор( ?(ЗначениеЗаполнено(Канал.Id), Канал.Id, "00000000-0000-0000-0000-000000000000") );
	СохранитьЗначениеНастройки("ЛКИдентификаторКаналаОбмена", ИдКанала);
	
	СтррРезультат = Новый Структура("ЕстьОшибки,ВидДанных,Результат");
	СтррРезультат.ВидДанных 	= "КаналыОбмена";
	СтррРезультат.ЕстьОшибки 	= Ложь;
	СтррРезультат.Результат 	= Канал;
	
	Источник = ?(БыстраяНастройка, "БыстраяНастройка", Неопределено);
	Оповестить("АПЛКОповещение", СтррРезультат, Источник);

КонецПроцедуры

// СлужебныеПроцедурыИФункции_КаналыОбмена
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_МобильныеУстройства

&НаКлиенте
Процедура МУПолучитьМобильныеУстройстваИзЛК(БыстраяНастройка)
	
	СтррJSON = ЛКОперацияВыполнить("МУПолучитьСписок", Истина);
	Если СтррJSON.КодСостояния = 200 Тогда
		// проверяем есть ли мобильные устройства в ЛК
		ММУ = СтррJSON.JSON;
		Если ММУ.Количество() = 0 И Не БыстраяНастройка Тогда // предупреждаем, что в ЛК нет МУ и предлагаем перейти в ЛК
			МУПредложитьЗадатьМобильныеУстройстваВЛК();
		Иначе 
			МУОповеститьОЗагруженныхМУ(ММУ, БыстраяНастройка);
		КонецЕсли; 
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте 
Функция ОписаниеОтсуствияМУвЛК() Экспорт
	
	Текст = НСтр("ru='В ""Личном кабинете"" не заданы мобильные устройства. Вероятная причина - программа ""Агент Плюс:Мобильная торговля"" еще не устанавливалась на Ваше мобильное устройство.'")
		+ Символы.ПС + НСтр("ru='Чтобы мобильное устройство появилось в ""Личном кабинете"" нужно:'")
		+ Символы.ПС + "   " + НСтр("ru='1. Зайти в ""Личный кабинет"" в раздел ""Управление лицензиями"".'")
		+ Символы.ПС + "   " + НСтр("ru='2. Убедиться, что в разделе есть свободные лицензии (для свободных лицензий указан код активации).'")
		+ Символы.ПС + "   " + НСтр("ru='3. Установить на мобильное устройство программу ""Агент Плюс:Мобильная торговля.""'")
		+ Символы.ПС + "   " + НСтр("ru='4. При первом запуске программы на мобильном устройстве ввести код активации, который показан в ""Личном кабинете"".'");
		
	Возврат Текст;
	
КонецФункции

&НаКлиенте 
Процедура МУПредложитьЗадатьМобильныеУстройстваВЛК()
	
	Текст = ОписаниеОтсуствияМУвЛК();
	ТекстВопроса = ОписаниеОтсуствияМУвЛК() + Символы.ПС + Символы.ПС + НСтр("ru='Перейти в окно настроек ""Личного кабинета""?'");
	Оповещение = Новый ОписаниеОповещения("ПерейтиВЛКПродолжить", ЭтотОбъект, Текст);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

// Процедура оповещает окна о полученным из ЛК массиве МУ.
//	Параметры:
//		ММУ - Массив Из Строка - массив мобильных устройств, загруженных из ЛК
//		БыстраяНастройка - Булево - если Истина, то в параметре Источник метода Оповестить() будет передана 
//				строка "БыстраяНастройка" - признак для неинтерактивной обработки оповещения.
//		
&НаКлиенте 
Процедура МУОповеститьОЗагруженныхМУ(ММУ, БыстраяНастройка)
	
	СтррРезультат = Новый Структура("ЕстьОшибки,ВидДанных,Результат");
	СтррРезультат.ВидДанных	 = "МобильныеУстройства";
	СтррРезультат.ЕстьОшибки = Ложь;
	СтррРезультат.Результат  = ММУ; // Новый Массив; Отладка!!! проверка загрузки пустого списка МУ
	Источник = ?(БыстраяНастройка, "БыстраяНастройка", Неопределено); // в случае с "быстрой настройкой" может быть передан и пустой массив ММУ
	Оповестить("АПЛКОповещение", СтррРезультат, Источник);

КонецПроцедуры

// СлужебныеПроцедурыИФункции_МобильныеУстройства
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВнешнийИнтерфейс

&НаКлиенте 
Процедура ВнешнийВызовЗадатьЛогинИПароль() Экспорт
	
	ЛКПроверитьЛогинИПароль();
	
КонецПроцедуры

// Процедура возвращает результат через оповещение "АПЛКОповещение".
// Вызывается из внешнего модуля.
// 
// Параметры:
// 		ВидДанных - Строка - возможные значения: 
// 						"КаналыОбмена" 			- получить массив каналов обмена данными
// 						"МобильныеУстройства" 	- получить массив мобильных устройств
// 						"ВсеНастройки"			- получить все настройки модуля обмена (пока отладочный параметр)
// 		БыстраяНастройка - Булево - если Истина, то операция выполняется по возможности без интерактивного участия пользователя.
// 
&НаКлиенте 
Процедура ВнешнийВызовЗагрузитьДанныеИзЛК(ВидДанных, БыстраяНастройка = Ложь) Экспорт

	Если Не ЛКПроверитьЛогинИПароль() Тогда
		Возврат;
	КонецЕсли;
	
	Если СтррКонтекст.Отладка <> Неопределено Тогда
		ПоказатьПредупреждение(, "Внимание!!! Включен режим отладки загрузки данных из ЛК. Режим: " + СтррКонтекст.Отладка);
	КонецЕсли; 
	
	Если ВидДанных = "КаналыОбмена" Тогда // нужно получить список каналов обмена из ЛК
		
		Если ЛКПроверитьРегистрациюУчетнойСистемы(БыстраяНастройка) Тогда // учетная система зарегистрирована в ЛК
			КОПолучитьКаналыОбменаИзЛК(БыстраяНастройка);
		КонецЕсли; 
		
	ИначеЕсли ВидДанных = "МобильныеУстройства" Тогда // нужно получить список МУ из ЛК
		
		Если ЛКПроверитьРегистрациюУчетнойСистемы(БыстраяНастройка) Тогда // учетная система зарегистрирована в ЛК		
			МУПолучитьМобильныеУстройстваИзЛК(БыстраяНастройка);
		КонецЕсли;
		
	ИначеЕсли ВидДанных = "ВсеНастройки" Тогда // !!! нужно скачать файл настроек обмена - тестовая операция!
		
		Путь = КаталогВременныхФайловДляТранспорта();
		ИмяФайлаНастроек = "apconfig";// имя файла без расширения
		ФайлНастроек = Путь + ИмяФайлаНастроек + ".zip";	
		
		ОчиститьСообщения();
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru = 'Соединение с %1 ...'"), "www.agentplus.ru"));
		Соединение = Новый HTTPСоединение("www.agentplus.ru");
		
		ФайлЛК = "/tmp/configs/" + СокрЛП(Объект.ЛКЛогин) + ".zip";
		
		ОписаниеОшибки = "";
		Попытка
			// !!! Разобраться - возможно, ошибка с передачей параметра "ФайлЛК"  
			//@skip-check wrong-type-expression
			HTTPОтвет = Соединение.Получить(ФайлЛК, ФайлНастроек);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			//@skip-check use-non-recommended-method
			Если 0 <> Найти(ОписаниеОшибки, "404") Тогда
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'В настройках указан либо неправильный логин доступа в ЛК, либо не заполнены настройки в ЛК.'"));
			Иначе
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Ошибка получения настроек.'") + " " + ОписаниеОшибки);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru = 'Ошибка работы с Интернет (%1)'"), HTTPОтвет.КодСостояния));
			Возврат;
		КонецЕсли;
		
		//@skip-check type-not-defined
		Архив = Новый ЧтениеZipФайла(ФайлНастроек, Объект.ЛКПароль);
		
		ФайлНастроекXML = Путь + ИмяФайлаНастроек + ".xml";
		УдалитьФайлы(ФайлНастроекXML);
		
		Описание = "";
		Попытка 
			//@skip-check unknown-method-property
			Архив.ИзвлечьВсе(Путь);
		Исключение
			Описание = ОписаниеОшибки();
		КонецПопытки;
		
		//@skip-check unknown-method-property
		Архив.Закрыть();
		
		УдалитьФайлы(Путь, "*.zip"); 
		
		Если Не ПустаяСтрока(Описание) Тогда
			//@skip-check use-non-recommended-method
			Если 0 <> Найти(Описание, "пароль") Тогда
				МПараметры = Новый Массив;
				МПараметры.Добавить(Новый Структура("Описание,Реквизит", НСтр("ru='Укажите пароль доступа к настройкам из Личного кабинета.'"), "ЛКПароль"));
				//@skip-check form-self-reference
				Оповещение = Новый ОписаниеОповещения("УказатьЛогинИлиПарольЛКПродолжить", ЭтаФорма, МПараметры);
				ПоказатьВопрос(Оповещение, НСтр("ru='Указан неверный пароль доступа в ЛК. Хотите указать пароль?'"), РежимДиалогаВопрос.ДаНетОтмена);
				Текст = НСтр("ru = 'Указан неверный пароль.'");
			Иначе
				Текст = Описание;
			КонецЕсли;
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
		
		Если Не МодульК().ФайлСуществует(ФайлНастроекXML) Тогда
			Текст = СтрШаблон_(НСтр("ru = 'Не найден файл настроек в архиве. Файл: %1.'"), ФайлНастроекXML);
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
		
		// имя скачанного файла настроек в переменной ФайлНастроекXML
		// Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлНастроекXML));
		ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлНастроекXML));
			
		СтррРезультат = Новый Структура("ЕстьОшибки,ВидДанных,Результат");
		СтррРезультат.ВидДанных  = "ВсеНастройки"; // загрузка всех настроек модуля
		СтррРезультат.ЕстьОшибки = Ложь;
		СтррРезультат.Результат  = ФайлНастроекXML;
		Оповестить("АПЛКОповещение", СтррРезультат);
		
	Иначе
		 ВызватьИсключение("Процедура ВнешнийВызовЗагрузитьДанныеИзЛК(). Неизвестное значение параметра! ВидДанных = " + ВидДанных);
	КонецЕсли; 
	
КонецПроцедуры // ВнешнийВызовЗагрузитьДанныеИзЛК()

&НаКлиенте 
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
		//@skip-check use-non-recommended-method
		//@skip-check form-self-reference
		ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийКлиент");	
	КонецЕсли;
	
	Возврат ГМодульК;

КонецФункции

&НаСервере
Функция КаталогВременныхФайловДляТранспорта(Подкаталог = "")
	Возврат РеквизитФормыВЗначение("Объект").КаталогВременныхФайловДляТранспорта(Подкаталог);
КонецФункции

&НаКлиенте
Процедура КомандаЛКОтменитьРегистрациюУСПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	//@skip-check form-self-reference
	Если Не ЛКПроверитьЛогинИПароль() Тогда
	ИначеЕсли ЭтаФорма.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПередДействием", ЭтотОбъект, "УСУдалить");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Настройки были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЛКНачалоПодключения("УСУдалить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьРегистрациюУСПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ЛКИдентификаторУС = "";
		Объект.ЛКТокенУС 		 = "";
		УстановитьМодифицированостьФормы(Истина);
		ЛКРегистрацияУчетнойСистемыОбновитьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛКНетДоступаПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		//@skip-check use-non-recommended-method
		Сообщить("Сейчас будет");
	КОнецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧтоТакоеЛКПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ЗапуститьПриложение("https://agentplus.ru/ul/"); // gi_240205 исправлен URL
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ВнешнийИнтерфейс
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти