#Область ОписаниеПеременных

&НаКлиенте
Перем МодульКарты;  // общий клиентский модуль работы с картами
&НаКлиенте
Перем ГМодульК;  // общий клиентский модуль

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//@skip-check structure-consructor-too-many-keys
	СтррКонтекст = Новый Структура("Повторно, КаталогИконок, ПрежниеЗначенияСтроки, ЗначениеБезТочности, КартаЦентр, РежимВыбораЦентраКарты, КоличествоМиганий, ОткрытыеПартнеры, Конфигурация");
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.Повторно = Ложь;
	
	СтррКонтекст.РежимВыбораЦентраКарты	= Ложь; // интерактивный режим выбора центра карты
	СтррКонтекст.КартаЦентр = ТекОбъект.ПрочитатьЗначениеНастройки("КартаЦентр"); // центр карты, выбранный до этого пользователем 
	СтррКонтекст.КоличествоМиганий = 0; //количество миганий координат в поле "ПартнерыКоординаты" после интерактивного изменения
	СтррКонтекст.КаталогИконок = ТекОбъект.ПолучитьВебКаталогИконок();
	
	СтррКонтекст.ПрежниеЗначенияСтроки = Новый Структура("Партнер,ИдентификаторСтроки"); // для восстановления значения строки элемента "Партнеры"
	СтррКонтекст.ЗначениеБезТочности = 99; // чтобы при интерактивной сортировке по точности определения координат строки без точности были в конце таблицы
	
	СтррКонтекст.ОткрытыеПартнеры = Новый Массив;
	
	СтррМаркер = Новый Структура("Широта,Долгота,Заголовок", 0, 0, "");
	
	Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
		МРеквизиты = Новый Массив;
   		МРеквизиты.Добавить(Новый РеквизитФормы("ТТАгент", Новый ОписаниеТипов("СправочникСсылка.ТорговыеТочки"), "Партнеры", "ТТАгент", Истина));
   		ИзменитьРеквизиты(МРеквизиты);
		
		НоваяКолонка = Элементы.Добавить("АКФ_ПартнерыТТАгент", Тип("ПолеФормы"), Элементы.ПартнерыГруппаНаименованиеАдрес); 
		НоваяКолонка.ПутьКДанным = "Партнеры.ТТАгент"; 
		НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//@skip-check use-non-recommended-method
	//@skip-check form-self-reference
	МодульКарты	= ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульКартыКлиент");	
	
	Если СтррКонтекст.КартаЦентр = Неопределено Тогда
		СохранитьЦентрКартыКлиент(МодульКарты.ПолучитьКоординатыПользователя());
	Иначе
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
	МодульКарты.УстановитьРегионГеокодера(СтррКонтекст.КартаЦентр); // для точности геокодирования
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
	КартаПереключитьРежимВыбораКоординат();
	
	МодульКарты.ЗаполнитьСписокДоступныхКарт(Элементы.ИсточникКарты.СписокВыбора);
	ПроверитьГотовностьДополнительныхРеквизитов();
	
	//@skip-check form-self-reference
	ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты;
	
	КартаОбновитьТекущийМакет();
	
	ОбновитьФлажокТолькоСПустымиКоординатами();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	СтррКонтекст.Повторно = Истина; // признак, что форма открыта повторно, используется чтобы учитывать загрузку карты в ПолеБраузера
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Параметр ИсточникВыбора принимает значение "ПриОткрытииФормы", если добавление партнеров вызвано извне 
// (при открытии или повторном открытии формы).
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		ВызватьИсключение("Не предусмотренное значение для подбора в форму: " + ВыбранноеЗначение);
	КонецЕсли; 
	
 	МНовыеПартнеры = Новый Массив; // массив добавленных партнеров во время подбора
	СтрокаТ = Неопределено;
	НачальнаяСтрока = Партнеры.Количество();
	
	ПроверятьНаПустыеКоординаты = Элементы.ПартнерыПризнакТолькоСПустымиКоординатами.Пометка;
	
	БезТочности = СтррКонтекст.ЗначениеБезТочности;
	ВыбранаОднаСтрока = (ВыбранноеЗначение.Количество() = 1);
	
	// подбор партнеров
	Для каждого Партнер Из ВыбранноеЗначение Цикл
		
		мСтроки = Партнеры.НайтиСтроки(Новый Структура("Партнер", Партнер));
		Если мСтроки.Количество() > 0 Тогда // в таблице уже есть такой партнер
			Если ВыбранаОднаСтрока Тогда
				СтрокаТ = мСтроки[0]; // выделяем найденную строку:
				ПоказатьПредупреждение(, НСтр("ru = 'Данный партнер уже выбран.'"));
				Прервать;
			Иначе
				Текст = СтрШаблон_(НСтр("ru = 'Пропущен партнер ""%1"" т.к. он уже выбран.'"), Партнер);
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				Продолжить;
			КонецЕсли;
		ИначеЕсли Не ПроверятьНаПустыеКоординаты Тогда // сразу добавляем партнеров в таблицу формы, иначе партнеры будут проверены на пустые координаты
			СтрокаТ = Партнеры.Добавить();
			СтрокаТ.Партнер  = Партнер;
			СтрокаТ.Точность = БезТочности;
		КонецЕсли;
		МНовыеПартнеры.Добавить(Партнер);
	
	КонецЦикла;
	
	// устанавливаем текущую строку
	СтрокаТ = ?(ИсточникВыбора = "ПриОткрытииФормы" И Партнеры.Количество() > 0, Партнеры[0], СтрокаТ);
	Если СтрокаТ <> Неопределено Тогда
		Элементы.Партнеры.ТекущаяСтрока = СтрокаТ.ПолучитьИдентификатор();	
	КонецЕсли; 		
	
	Если МНовыеПартнеры.Количество() <> 0 Тогда
		КоличествоПередДобавлением = МНовыеПартнеры.Количество();
		ОбновитьКоординатыПартнеров(МНовыеПартнеры, НачальнаяСтрока, Ложь, ПроверятьНаПустыеКоординаты);			
		ОбновитьАдресаПартнеров(МНовыеПартнеры, НачальнаяСтрока, Ложь);
		Если КоличествоПередДобавлением <> МНовыеПартнеры.Количество() И ПроверятьНаПустыеКоординаты Тогда
			Если КоличествоПередДобавлением = 1 Тогда
				Текст = НСтр("ru = 'У партнера указаны координаты'");
			ИначеЕсли МНовыеПартнеры.Количество() = 0 Тогда
			    Текст = НСтр("ru = 'Все выбранные партнеры с заполненными координатами'");
			Иначе
				Текст = НСтр("ru = 'Были исключены партнеры с заполненными координатами'");
			КонецЕсли; 
			ПоказатьПредупреждение(, Текст + " " + НСтр("ru = '(включен режим подбора только для партнеров с пустыми координатами).'"));
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникКартыПриИзменении(Элемент)
	
	КартаОбновитьТекущийМакет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеБраузераДокументСформирован(Элемент)

	#Если ВебКлиент Тогда
		СисИнфо = Новый СистемнаяИнформация;
		//@skip-check use-non-recommended-method
		Если Найти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") = 0 Тогда
			Документ = Элементы.ПолеБраузера.document;
			HTMLWindow = ?(Документ.parentWindow <> Неопределено, Документ.parentWindow, Документ.defaultView);
			HTMLWindow.name = КартаСформироватьПараметрРежимРедактора("LabelEditor", СтррКонтекст.КартаЦентр);
		КонецЕсли;
	#КонецЕсли 
	
	Таймер_Включить("ДобавитьМаркер");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеБраузераПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	Если Не РежимВыбораКоординат Или ДанныеСобытия.Button = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если МодульКарты.ИспользоватьWebKit() Тогда
		Если МодульКарты.ПлатформаMac() Тогда 
			СтандартнаяОбработка = Ложь;
			Источник = ДанныеСобытия.Button;
			Если Источник.id <> "ClickEvent" ИЛИ Источник.apObjectType <> "map" Тогда
				Возврат;
			КонецЕсли;
			СтрКоординаты = Источник.apValue;		
		Иначе
			ДанныеОперации = ДанныеСобытия.Document.documentElement.childNodes[3].childNodes; 
			Для Каждого СтрокаДанныхОперации Из ДанныеОперации Цикл
				Если СтрокаДанныхОперации.id = "ClickEvent" Тогда
					СтрКоординаты = СтрокаДанныхОперации["apValue"];    
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;	
	Иначе
		СтандартнаяОбработка = Ложь;
		Источник = ДанныеСобытия.Button;
	    Если Источник.id <> "ClickEvent" ИЛИ Источник.apObjectType <> "map" Тогда
	        Возврат;
	    КонецЕсли;
		
		СтрКоординаты = Источник.apValue;
		
	КонецЕсли;
		
	МКоординаты = СтрРазделить_(СтрКоординаты);
	Если МКоординаты.Количество() <> 2 Тогда
	    Возврат;
	КонецЕсли;

	Широта  = СтрокуВЧисло(МКоординаты[0]);
	Долгота = СтрокуВЧисло(МКоординаты[1]);

	// кликом по карте указаны новые координаты маркера
	стррМаркер.Широта  = Широта;
	стррМаркер.Долгота = Долгота;

	СтррПараметры = Новый Структура("Широта,Долгота", Широта, Долгота);

	Если СтррКонтекст.РежимВыбораЦентраКарты Тогда // режим указания координат для центра карты
	    Оповещение = Новый ОписаниеОповещения("ЗапомнитьНовыеКоординатыЦентраКартыПродолжить", ЭтотОбъект, СтррПараметры);
	    ПоказатьВопрос(Оповещение, НСтр("ru = 'Запомнить новые координаты центра карты?'"), РежимДиалогаВопрос.ДаНетОтмена);
	    // пока еще не показан вопрос, определим по координатам город
	    СтррЦентр = Новый Структура("Широта,Долгота", СтррПараметры.Широта, СтррПараметры.Долгота);
	    СтррПараметры.Вставить("Город", МодульКарты.ПолучитьАдресПоКоординатамОтВебСервиса(СтррЦентр, Истина));
	ИначеЕсли ПартнерыУстановитьНовыеКоординатыДляТекущегоПартнера(СтррПараметры, Ложь) Тогда // режим указания координат для текущего партнера
		КартаДобавитьМаркер(Истина);
		МигатьКоординатами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораКоординатПриИзменении(Элемент)
	
	КартаПереключитьРежимВыбораКоординат();
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыПартнеры

&НаКлиенте
Процедура ПартнерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерыПриИзменении(Элемент)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	
	Если СтрокаТ <> Неопределено Тогда
		
		ЭлементИмя = Элемент.ТекущийЭлемент.Имя;
			
		Если ЭлементИмя = "ПартнерыШирота" Или ЭлементИмя = "ПартнерыДолгота" Тогда
			
			СтрокаТ.КоординатыИзменены = Истина;
			УстановитьМодифицированостьФормы(Истина);
			
		ИначеЕсли ЭлементИмя = "ПартнерыКоординатыИзменены"  Тогда			
			
			Если СтрокаТ.КоординатыИзменены Тогда
				УстановитьМодифицированостьФормы(Истина);
			КонецЕсли; 
			
		КонецЕсли;

	КонецЕсли; // Если СтрокаТ <> Неопределено
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыПартнерПриИзменении(Элемент)
	
	СтрокаТ = Элементы.Партнеры.ТекущиеДанные;

	// Проверяем, не выбрали ли партнера, который уже есть в таблице
	Если ЗначениеЗаполнено(СтрокаТ.Партнер) Тогда
		МСтроки = Партнеры.НайтиСтроки(Новый Структура("Партнер", СтрокаТ.Партнер));
		Если МСтроки.Количество() > 1 Тогда // т.е. в таблице как минимум есть два таких партнера
			Текст = СтрШаблон_(НСтр("ru = 'Партнер ""%1"" уже присутствует в таблице.'"), СтрокаТ.Партнер);
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "Партнеры[" + СтрокаТ.ПолучитьИдентификатор() + "]");
			// восстанавливаем прежнее значение партнера
			ПрежниеЗначения = СтррКонтекст.ПрежниеЗначенияСтроки;
			Если ПрежниеЗначения.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор() Тогда
				СтрокаТ.Партнер = ПрежниеЗначения.Партнер;
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
			СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ПроставитьАдресИКоординатыПартнера(Партнеры.Индекс(СтрокаТ));// Элементы.Партнеры.ТекущаяСтрока - возвращает другой индекс после сортировки таблицы
	Элементы.Партнеры.ЗакончитьРедактированиеСтроки(Ложь); // почему-то в платформе (8.3.8.1784) продолжается редактирование поля (выделен текст поля синим фоном)
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыПартнерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтрокаТ = Элементы.Партнеры.ТекущиеДанные;
	Если СтрокаТ = Неопределено Или Не ЗначениеЗаполнено(СтрокаТ.Партнер) Тогда
		Возврат;
	КонецЕсли; 
	Если СтррКонтекст.ОткрытыеПартнеры.Найти(СтрокаТ.Партнер) = Неопределено Тогда
		СтррКонтекст.ОткрытыеПартнеры.Добавить(СтрокаТ.Партнер);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыПриАктивизацииСтроки(Элемент)

	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминаем некоторые знаечения текущей строки на случай, если потребуется восстановить прежнее значение в строке
	ЗаполнитьЗначенияСвойств(СтррКонтекст.ПрежниеЗначенияСтроки, СтрокаТ);
	СтррКонтекст.ПрежниеЗначенияСтроки.ИдентификаторСтроки = СтрокаТ.ПолучитьИдентификатор();
	
	//@skip-check form-self-reference
	Если ЭтаФорма.ТекущийЭлемент.Имя = "Партнеры" Тогда
		
		КартаПерейтиКМаркеруТекущегоПартнера(Истина);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементИмя = Элемент.ТекущийЭлемент.Имя;
	
	Если ЭлементИмя = "ПартнерыКоординаты" Тогда
		
		СтррПараметры = Новый Структура("Широта,Долгота", СтрокаТ.Широта, СтрокаТ.Долгота);
		
		Оповещение = Новый ОписаниеОповещения("ПартнерыВыборКоординатЗавершение", ЭтотОбъект);
		МодульК().ОткрытьФормуОбработки("ВыборКоординат", Новый Структура("Значения", СтррПараметры),, Оповещение);
		
	ИначеЕсли ЭлементИмя = "ПартнерыАдресКоординат" Или ЭлементИмя = "ПартнерыТочность" Тогда
		
		ОпределитьКоординатыПоАдресу(Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыПослеУдаления(Элемент)
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность И Партнеры.Количество() = 0 Тогда // если удалены все партнеры из формы, снимаем признак модифицированности формы
		УстановитьМодифицированостьФормы(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыПартнеры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОпределитьКоординатыПоАдресу(Команда)
	
	ОпределитьКоординатыПоАдресу();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	СохранитьКоординатыКлиент();

КонецПроцедуры

#Область ОбработчикиКомандФормы_ПартнерыКонтекстноеМеню

&НаКлиенте
Процедура КомандаСнятьПризнакИзмененияКоординат(Команда)

	УстановитьПризнакИзмененияКоординат(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПризнакИзмененияКоординат(Команда)
	
	УстановитьПризнакИзмененияКоординат(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСортироватьПоТочностиКоординат(Команда)
	Партнеры.Сортировать("Точность,Партнер");
КонецПроцедуры

// ОбработчикиКомандФормы_ПартнерыКонтекстноеМеню
#КонецОбласти

#Область ОбработчикиКомандФормы_ПодборПартнеров

&НаКлиенте
Процедура КомандаПодборПартнеровИзСправочника(Команда)

	СтррПараметры = Новый Структура;	
	СтррПараметры.Вставить("ЗакрыватьПриВыборе", Ложь); 
	СтррПараметры.Вставить("МножественныйВыбор", Истина); 
		
	//@skip-check form-self-reference
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", СтррПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодборПартнеровИзСпискаТТ(Команда)
	
	СтррПараметры  = Новый Структура("ID,ДляВыбора", Неопределено, Истина);
	//@skip-check form-self-reference
	Если ЭтаФорма.КлючУникальности = Неопределено Тогда
		ЭтаФорма.КлючУникальности = Новый УникальныйИдентификатор;
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("СписокТорговыхТочекВыборЗавершение", ЭтотОбъект, Неопределено);
	//@skip-check form-self-reference
	МодульК().ОткрытьФормуОбработки("СпискиТорговыхТочек", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВсехПартнеров(Команда)
	
	Если Партнеры.Количество() <> 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ДобавитьВсехПартнеровПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Перед добавленинем всех партнеров таблица будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ПартнерыДобавитьВсехПартнеровКлиент();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПризнакТолькоСПустымиКоординатами(Команда)
	
	ТолькоСПустымиКоординатами = Не ТолькоСПустымиКоординатами;
	ОбновитьФлажокТолькоСПустымиКоординатами();
	
КонецПроцедуры

// ОбработчикиКомандФормы_ПодборПартнеров
#КонецОбласти 

&НаКлиенте
Процедура КомандаУказатьЦентрКарты(Команда)
	
	СтррПараметры = Неопределено;
	Оповещение = Новый ОписаниеОповещения("КомандаУказатьЦентрКартыПродолжить", ЭтотОбъект);
	МодульК().ОткрытьФормуОбработки("ВыборЦентраКарты", СтррПараметры,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//       т.е. для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив Из Строка - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	//@skip-check use-non-recommended-method
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		//@skip-check use-non-recommended-method
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте 
Процедура ОбновитьЗаголовокФормы()
	
	СтррЦентр = СтррКонтекст.КартаЦентр;
	//@skip-check form-self-reference
	ЭтаФорма.Заголовок = НСтр("ru = 'Редактор меток на карте'") 
		+ ?(ТипЗнч(СтррЦентр) = Тип("Структура") И СтррЦентр.Свойство("Город") И ЗначениеЗаполнено(СтррЦентр.Город), " - " + СтррЦентр.Город, "");
	
КонецПроцедуры
	
&НаКлиенте 
Процедура ОбновитьФлажокТолькоСПустымиКоординатами()
	
	Элементы.ПартнерыПризнакТолькоСПустымиКоординатами.Пометка = ТолькоСПустымиКоординатами;

КонецПроцедуры

&НаКлиенте
Процедура ВнешнийВызовДобавитьИПоказатьПартнеров(МПартнеры) Экспорт
	
	Если МПартнеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Партнеры.Очистить();
	ТолькоСПустымиКоординатами = Ложь; // чтобы не игнорировались партнеры из массива, у кого заполнены координаты
	
	ОбработкаВыбора(МПартнеры, "ПриОткрытииФормы");

	Если СтррКонтекст.Повторно Тогда // форма открыта повторно, карта уже загружена
		КартаПерейтиКМаркеруТекущегоПартнера(Истина);	
	Иначе // форма открыта впервые, дожидаемся когда будет загружена карта - через отсрочку и попытку/исключение
		Таймер_Включить("!КартаПерейтиКМаркеруТекущегоПартнера(Истина)"); // команда не поддерживается на веб-клиенте!
	КонецЕсли; 

КонецПроцедуры

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КИПартнеров

&НаКлиенте
Процедура УстановитьПризнакИзмененияКоординат(КоординатыИзменены)

	Если Элементы.Партнеры.ТекущиеДанные <> Неопределено Тогда
		
		МСтроки = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МСтроки, Элементы.Партнеры.ВыделенныеСтроки);
		// применяем действие к выделенным строкам
		Для Каждого ИдСтроки Из МСтроки Цикл
			СтрокаТ = Партнеры.НайтиПоИдентификатору(ИдСтроки);
			СтрокаТ.КоординатыИзменены = КоординатыИзменены;
		КонецЦикла;
		
		Если КоординатыИзменены Тогда
			УстановитьМодифицированостьФормы(Истина);	
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыеКоординаты(СтрокаТ, СтрКоординаты, СтрАдресКоординат)
	
	СтрокаТ.АдресКоординат = СтрАдресКоординат;
	МКоординаты = СтрРазделить_(СтрКоординаты, " ");
	СтрокаТ.Широта   = МКоординаты[0];
	СтрокаТ.Долгота  = МКоординаты[1];
	СтрокаТ.Точность = МКоординаты[2];
	СтрокаТ.Координаты = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);
	СтрокаТ.КоординатыИзменены = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьАдресИКоординатыПартнера(ИндексСтроки)
	
	СтрокаТ = Партнеры[ИндексСтроки]; 
	
	Если Не ЗначениеЗаполнено(СтрокаТ.Партнер) Тогда
		СтрокаТ.Адрес = "";
		СтрокаТ.Долгота = 0;
		СтрокаТ.Широта  = 0;
		СтрокаТ.Координаты = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);		
		СтрокаТ.Точность = СтррКонтекст.ЗначениеБезТочности;
	Иначе
		МПартнеры = Новый Массив;
		МПартнеры.Добавить(СтрокаТ.Партнер);
		ОбновитьКоординатыПартнеров(МПартнеры, ИндексСтроки, Истина, Ложь);		
		ОбновитьАдресаПартнеров(МПартнеры, ИндексСтроки, Истина);
	КонецЕсли; 
		
КонецПроцедуры

// Процедура обновляет координаты партнеров на форме (если параметр ИсключитьСЗаполненнымиКоординатами = Ложь).
// Если параметр ИсключитьСЗаполненнымиКоординатами установлен в Истина, то из массива МПартнеры
// удаляются партнеры, у которых заполнены координаты, остальные добавляются в таблицу партнеров на форме.
&НаСервере
Процедура ОбновитьКоординатыПартнеров(МПартнеры, НачальнаяСтрока, ВОднойСтроке, ИсключитьСЗаполненнымиКоординатами)
	
	БезТочности = СтррКонтекст.ЗначениеБезТочности;
	
	ТЗКоординаты = ПолучитьТЗКоординатПартнеров(МПартнеры);
	
	СтррПоиск = Новый Структура("Ссылка");
	
	Если ИсключитьСЗаполненнымиКоординатами Тогда // нужно добавить в ТЗ Партнеры новые строки, иначе строки уже добавлены
		// Партнеры еще не включены в таблицу Партнеры на форме.
		// Исключаем из МПартнеры тех, у кого есть координаты. В тзКоординаты у нас сейчас те партнеры, у кого заполнены координаты.		
		// Остальных партнеров добавляем на форму.
		НачальнаяСтрока = Партнеры.Количество();
		МДобавленныеПартнеры = Новый Массив;
		Для Каждого Партнер Из МПартнеры Цикл
			СтррПоиск.Ссылка = Партнер;
			мСтроки = ТЗКоординаты.НайтиСтроки(СтррПоиск);
			Если мСтроки.Количество() = 0 Тогда // добавбяем нового партнера на форму
				СтрокаТ = Партнеры.Добавить();
				Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
					СтрокаТ.Партнер = Партнер.Партнер;
					СтрокаТ.ТТАгент = Партнер;
				Иначе
					СтрокаТ.Партнер = Партнер;
				КонецЕсли;
				СтрокаТ.Точность = БезТочности;
				МДобавленныеПартнеры.Добавить(Партнер);
			КонецЕсли; 
		КонецЦикла;
		МПартнеры = МДобавленныеПартнеры; // оставляем в массиве МПартнеры только партнеров с пустыми координатами
		
	ИначеЕсли НачальнаяСтрока = 0 И Не ВОднойСтроке Тогда // обновляем координаты для всей таблицы партнеров на форме
		// Партнеры уже включены в таблицу Партнеры на форме.
		Для Каждого СтрокаТ Из Партнеры Цикл
			СтррПоиск.Ссылка = СтрокаТ.Партнер;
			мСтроки = ТЗКоординаты.НайтиСтроки(СтррПоиск);
			Если мСтроки.Количество() > 0 Тогда
				СтрокаТ.Широта  = мСтроки[0].Широта;
				СтрокаТ.Долгота = мСтроки[0].Долгота;
				СтрокаТ.АдресКоординат = мСтроки[0].Адрес;
			Иначе
				СтрокаТ.Широта  = 0;
				СтрокаТ.Долгота = 0;
				СтрокаТ.АдресКоординат = "";
			КонецЕсли;
			СтрокаТ.Точность = БезТочности;
			СтрокаТ.Координаты = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);
			СтрокаТ.КоординатыИзменены = Ложь;
		КонецЦикла; 
		
	Иначе // обновляем координаты для партнеров начиная с указанной строки таблицы партнеров на форме и ниже
		// Партнеры уже включены в таблицу Партнеры на форме.
		ПоследняяСтрока = ?(ВОднойСтроке, НачальнаяСтрока, Партнеры.Количество() - 1);
		Для НомерСтроки = НачальнаяСтрока По ПоследняяСтрока Цикл
			СтрокаТ = Партнеры[НомерСтроки]; //Партнеры.НайтиПоИдентификатору(НомерСтроки); 
			СтррПоиск.Ссылка = СтрокаТ.Партнер;
			мСтроки = ТЗКоординаты.НайтиСтроки(СтррПоиск);
			Если мСтроки.Количество() > 0 Тогда
				СтрокаТ.Широта  = мСтроки[0].Широта;
				СтрокаТ.Долгота = мСтроки[0].Долгота;
				СтрокаТ.АдресКоординат = мСтроки[0].Адрес;
			Иначе
				СтрокаТ.Широта  = 0;
				СтрокаТ.Долгота = 0;
				СтрокаТ.АдресКоординат = "";
			КонецЕсли;
			СтрокаТ.Точность = БезТочности;
			СтрокаТ.Координаты = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);
			СтрокаТ.КоординатыИзменены = Ложь;
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПопыткаОбновитьАдресаПартнеров(МПартнеры, СтрокаТ = Неопределено, УбиратьПартнеровИзМассива = Истина)
	
	Если СтрокаТ <> Неопределено Тогда
		ИндексВМассиве = ?(ЗначениеЗаполнено(СтрокаТ.Партнер), МПартнеры.Найти(СтрокаТ.Партнер), Неопределено);
		Если ИндексВМассиве <> Неопределено Тогда
			МПартнер = Новый Массив();
			МПартнер.Добавить(СтрокаТ.Партнер);
			ОбновитьАдресаПартнеров(МПартнеры, Партнеры.Индекс(СтрокаТ), Истина);
			Если УбиратьПартнеровИзМассива Тогда
			    МПартнеры.Удалить(ИндексВМассиве);
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ОбновитьАдресаПартнеров(МПартнеры, Неопределено, Ложь);
		Если УбиратьПартнеровИзМассива Тогда
			МПартнеры.Очистить();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресаПартнеров(МПартнеры, НачальнаяСтрока, ВОднойСтроке)
	
	Если МПартнеры.Количество() = 0 Или Партнеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
		Если НачальнаяСтрока = 0 И Не ВОднойСтроке Тогда // обновление всех строк ТЗ Партнеры
			Для Каждого СтрокаТ Из Партнеры Цикл	
				АКФ_ОбновитьАдресПартнера(СтрокаТ);
			КонецЦикла; 
		ИначеЕсли НачальнаяСтрока = Неопределено Тогда // обновляем только те строки, у которых Партнер в массиве МПартнеры
			СтррПоискВТЗПартнеры = Новый Структура("Партнер");
			Для Каждого Партнер Из МПартнеры Цикл
				СтррПоискВТЗПартнеры.Партнер = Партнер;
				мСтроки = Партнеры.НайтиСтроки(СтррПоискВТЗПартнеры);
				Если мСтроки.Количество() <> 0 Тогда
					АКФ_ОбновитьАдресПартнера(мСтроки[0]);
				КонецЕсли; 
			КонецЦикла; 
		Иначе // обновление строк, начиная с НачальнаяСтрока и до последней строки ТЗ Партнеры
			ПоследняяСтрока = ?(ВОднойСтроке, НачальнаяСтрока, Партнеры.Количество() - 1);
			Для НомерСтроки = НачальнаяСтрока По ПоследняяСтрока Цикл
				АКФ_ОбновитьАдресПартнера(Партнеры[НомерСтроки]); 
			КонецЦикла; 
		КонецЕсли; 
	Иначе
		МВидыКИ = Новый Массив;
		МВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
		
		ТЗАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МПартнеры,, МВидыКИ, ТекущаяДатаСеанса());
		СтррПоиск = Новый Структура("Объект"); // структура для поиска партнера в тзАдреса
		
		Если НачальнаяСтрока = 0 И Не ВОднойСтроке Тогда // обновление всех строк ТЗ Партнеры
			Для Каждого СтрокаТ Из Партнеры Цикл
				ОбновитьАдресПартнера(СтрокаТ, ТЗАдреса, СтррПоиск);
			КонецЦикла; 
		ИначеЕсли НачальнаяСтрока = Неопределено Тогда // обновляем только те строки, у которых Партнер в массиве МПартнеры
			СтррПоискВТЗПартнеры = Новый Структура("Партнер");
			Для Каждого Партнер Из МПартнеры Цикл
				СтррПоискВТЗПартнеры.Партнер = Партнер;
				мСтроки = Партнеры.НайтиСтроки(СтррПоискВТЗПартнеры);
				Если мСтроки.Количество() <> 0 Тогда
					ОбновитьАдресПартнера(мСтроки[0], ТЗАдреса, СтррПоиск);
				КонецЕсли; 
			КонецЦикла; 
		Иначе // обновление строк, начиная с НачальнаяСтрока и до последней строки ТЗ Партнеры
			ПоследняяСтрока = ?(ВОднойСтроке, НачальнаяСтрока, Партнеры.Количество() - 1);
			Для НомерСтроки = НачальнаяСтрока По ПоследняяСтрока Цикл
				ОбновитьАдресПартнера(Партнеры[НомерСтроки], ТЗАдреса, СтррПоиск); 
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресПартнера(СТЗПартнеры, ТЗАдреса, СтррПоиск)
	СтррПоиск.Объект = СТЗПартнеры.Партнер;
	МСтроки = ТЗАдреса.НайтиСтроки(СтррПоиск);
	СТЗПартнеры.Адрес = ?(МСтроки.Количество() > 0, МСтроки[0].Представление, "");
КонецПроцедуры

// Обновляет адрес Партнера
//
// Параметры:
//	СТЗПартнеры - СтрокаТаблицыЗначений - строка
//
&НаСервере
Процедура АКФ_ОбновитьАдресПартнера(СТЗПартнеры)
	
	СТЗПартнеры.Адрес = СТЗПартнеры.ТТАгент.АдресGEO;
	
КонецПроцедуры
 
&НаСервере
Функция ПолучитьТЗКоординатПартнеров(МПартнеры)
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьТЗКоординатПартнеров(МПартнеры);

КонецФункции

// Функция устанавливает новые координаты для текущего партнера в элементе "Партнеры".
// Возаращает Истина, если новые координаты отличаются от старых.
&НаКлиенте
Функция ПартнерыУстановитьНовыеКоординатыДляТекущегоПартнера(СтррКоординаты, ФокусНаПартнерах)
	
	УстановленыНовыеКоординаты = Ложь;
	
	СтрокаТ = Элементы.Партнеры.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		
		Точность 	= ?(СтрокаТ.Широта = 0 Или СтрокаТ.Долгота = 0, СтррКонтекст.ЗначениеБезТочности, 1); //1 - максимальная точность
		Если СтрокаТ.Широта	<> СтррКоординаты.Широта Или СтрокаТ.Долгота <> СтррКоординаты.Долгота Или СтрокаТ.Точность <> Точность Тогда
			УстановленыНовыеКоординаты = Истина;
		КонецЕсли; 			
		
		ЗаполнитьЗначенияСвойств(СтрокаТ, СтррКоординаты, "Широта,Долгота");
		СтрокаТ.Точность = Точность;

		СтрокаТ.Координаты  = ПредставлениеКоординатNMEA(СтрокаТ.Широта, СтрокаТ.Долгота);
		СтрокаТ.КоординатыИзменены = Истина;
		УстановитьМодифицированостьФормы(Истина);
		Если ФокусНаПартнерах Тогда
			//@skip-check form-self-reference
			ЭтаФорма.ТекущийЭлемент = Элементы.Партнеры; // оставляем фокус на таблице партнеров		
		КонецЕсли; 
	КонецЕсли;
	
	Возврат УстановленыНовыеКоординаты;
	
КонецФункции

&НаСервере
Процедура ПроверитьГотовностьДополнительныхРеквизитов()
	
	СтррРезультат = РеквизитФормыВЗначение("Объект").ПроверитьДополнительныеРеквизитыСправочникаПартнеры();
	
	Если СтррРезультат.ЕстьОшибки Тогда
		Для каждого Текст Из СтррРезультат.Сообщения Цикл
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

//&НаКлиенте
//Функция ПартнерыПолучитьКоординатыТекущегоПартнераДлаМаркера()
//	
//	СтрокаТ = Элементы.Партнеры.ТекущиеДанные;
//	Если СтрокаТ <> Неопределено И СтрокаТ.Широта <> 0 Тогда
//		Возврат Новый Структура("Широта,Долгота,Заголовок", СтрокаТ.Широта, СтрокаТ.Долгота, СтрокаТ.Партнер);
//	Иначе
//		Возврат Неопределено;
//	КонецЕсли; 
//
//КонецФункции

#Область СлужебныеПроцедурыИФункции_КИПартнеров_ВебСервис

&НаКлиенте
Процедура ОпределитьКоординатыПоАдресу(ТолькоДляТекущейСтроки = Ложь)
	
	Если Партнеры.Количество() = 0 Тогда
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Сначала подберите в данную таблицу партнеров.'"), Неопределено, "Партнеры");
		Возврат;
	ИначеЕсли Элементы.Партнеры.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, Нстр("ru = 'Выберите в таблице нужных партнеров и повторите попытку.'"));
		Возврат;
	КонецЕсли; 
	
	БылиИзменения = Ложь;
	МСтроки = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МСтроки, Элементы.Партнеры.ВыделенныеСтроки);
	
	Если МСтроки.Количество() = 1 Или ТолькоДляТекущейСтроки Тогда
		СтрокаТ = ?(ТолькоДляТекущейСтроки, Элементы.Партнеры.ТекущиеДанные, Партнеры.НайтиПоИдентификатору(МСтроки[0]));
		ПопыткаОбновитьАдресаПартнеров(СтррКонтекст.ОткрытыеПартнеры, СтрокаТ); // если открывалась карточка партнера из формы, возможно у нее изменен адрес
		Если ПустаяСтрока(СтрокаТ.Адрес) Тогда
			Текст = СтрШаблон_(Нстр("ru = 'У партнера ""%1"" не указан адрес. Определение координат для данного партнера невозможно.'"), СтрокаТ.Партнер);
		    ПоказатьПредупреждение(, Текст);
			Возврат;
		КонецЕсли; 
		
		Ответ = МодульКарты.ПолучитьКоординатыОтВебСервиса(СтрокаТ.Адрес, Ложь);
		Если Ответ = Неопределено Тогда 
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не удалось определить координаты.'"));
		ИначеЕсли ТипЗнч(Ответ) = Тип("Структура")  Тогда // найден единственный адрес
			УстановитьНовыеКоординаты(СтрокаТ, Ответ.Координаты, Ответ.Адрес);
			МигатьКоординатами();
			БылиИзменения = Истина;
		Иначе 
			// предлагаем пользователю выбрать координаты + адрес из списка
			Оповещение = Новый ОписаниеОповещения("КоординатыОбработкаВыбораИзСписка", ЭтотОбъект);
			Ответ.ПоказатьВыборЭлемента(Оповещение, Нстр("ru = 'Выберите координаты по адресу'"));
		КонецЕсли;
		
	Иначе
		
		ПопыткаОбновитьАдресаПартнеров(СтррКонтекст.ОткрытыеПартнеры); // если открывалась карточки партнеров из формы, возможно у них изменен адрес
		
		Всего = МСтроки.Количество();
		ТекПроцент = Неопределено;
		
		Для Шаг = 1 По Всего Цикл
			Процент = Цел(100 * Шаг / Всего);
			Если Процент <> ТекПроцент Тогда
				ТекПроцент = Процент;
				Состояние(Нстр("ru = 'Получение координат...'"), Процент);
			КонецЕсли; 
			СтрокаТ = Партнеры.НайтиПоИдентификатору(МСтроки[Шаг-1]);
			стррКоординаты = МодульКарты.ПолучитьКоординатыОтВебСервиса(СтрокаТ.Адрес, Истина);
			Если стррКоординаты <> Неопределено Тогда
				УстановитьНовыеКоординаты(СтрокаТ, стррКоординаты.Координаты, стррКоординаты.Адрес);
				БылиИзменения = Истина;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
	Если БылиИзменения Тогда
		УстановитьМодифицированостьФормы(Истина);
		КартаПерейтиКМаркеруТекущегоПартнера(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КоординатыОбработкаВыбораИзСписка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтрокаТ = Элементы.Партнеры.ТекущиеДанные;
		УстановитьНовыеКоординаты(СтрокаТ, Результат.Значение, Результат.Представление);
		УстановитьМодифицированостьФормы(Истина);
		КартаПерейтиКМаркеруТекущегоПартнера(Ложь);
		МигатьКоординатами();
	КонецЕсли;

КонецПроцедуры	

// СлужебныеПроцедурыИФункции_КИПартнеров_ВебСервис
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_КИПартнеров_ЗаписьВБД

// Сохранение измененных координат для Партнеров с признаком КоординатыИзменены.
// Параметры:
//   РезультатОтвета - КодВозвратаДиалога
//   ДополнительныеПараметры - Произвольный
&НаКлиенте
Процедура СохранитьПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		СохранитьКоординатыКлиент();
		Закрыть();
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКоординатыКлиент()
	
	Состояние(НСтр("ru = 'Сохранение координат партнеров...'"));
	СохранитьКоординаты();
	УстановитьМодифицированостьФормы(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКоординаты()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	
	ТЗРеквизиты = Новый ТаблицаЗначений;
	ТЗРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТЗРеквизиты.Колонки.Добавить("Значение");
	
	СТЗШирота = ТЗРеквизиты.Добавить();	
	СТЗШирота.Свойство  = ТекОбъект.ДополнительноеСвойствоПоНаименованию(ТекОбъект.ИмяСвойстваШиротаПартнер());	
	СТЗДолгота = ТЗРеквизиты.Добавить();
	СТЗДолгота.Свойство = ТекОбъект.ДополнительноеСвойствоПоНаименованию(ТекОбъект.ИмяСвойстваДолготаПартнер());
	СТЗАдрес = ТЗРеквизиты.Добавить();
	СТЗАдрес.Свойство   = ТекОбъект.ДополнительноеСвойствоПоНаименованию(ТекОбъект.ИмяСвойстваАдресИзСервисаПартнер());
	
	Для Каждого СтрокаТ Из Партнеры Цикл
		Если СтрокаТ.КоординатыИзменены Тогда
			СТЗШирота.Значение  = СтрокаТ.Широта;
			СТЗДолгота.Значение = СтрокаТ.Долгота;
			СТЗАдрес.Значение   = СтрокаТ.АдресКоординат;
			УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(СтрокаТ.Партнер, ТЗРеквизиты);
			СтрокаТ.КоординатыИзменены = Ложь;
			Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
				ТТАгентОб = СтрокаТ.ТТАгент.ПолучитьОбъект();
				ТТАгентОб.АгентПлюсШиротаПартнер  = СтрокаТ.Широта;
				ТТАгентОб.АгентПлюсДолготаПартнер = СтрокаТ.Долгота;
				ТТАгентОб.АгентПлюсАдресИзСервиса = СтрокаТ.АдресКоординат;
				ТТАгентОб.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_КИПартнеров_ЗаписьВБД
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КИПартнеров_Мигание

&НаКлиенте
Процедура МигатьКоординатами()
	
	СтрокаТ = Элементы.Партнеры.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		СтррКонтекст.Вставить("ЗначениеМигания", СтрокаТ.Координаты);
		СтррКонтекст.КоличествоМиганий = 5; // количество переключений видимости
		ТаймерМигания();
		ПодключитьОбработчикОжидания("ТаймерМигания", 0.15, Истина); // дробные значения принимаются только для однократных таймеров
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймерМигания()
	
	СтррКонтекст.КоличествоМиганий = СтррКонтекст.КоличествоМиганий - 1;
	СтрокаТ = Элементы.Партнеры.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		СтрокаТ.Координаты = ?(СтррКонтекст.КоличествоМиганий % 2 = 0, СтррКонтекст.ЗначениеМигания, "");
		Если СтррКонтекст.КоличествоМиганий <> 0 Тогда
			ПодключитьОбработчикОжидания("ТаймерМигания", 0.15, Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_КИПартнеров_Мигание
#КонецОбласти 

// СлужебныеПроцедурыИФункции_КИПартнеров
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_СписокТорговыхТочек

&НаКлиенте
Процедура СписокТорговыхТочекВыборЗавершение(СтррРезультат, ДополнительныеПараметры) Экспорт
	
	Если СтррРезультат <> Неопределено Тогда
		СписокТорговыхТочекДобавитьПартнеровИзСписка(СтррРезультат);
		ПредупредитьПользователяОРезультатеДобавленияПартнеров(СтррРезультат);
	КонецЕсли; 
	
КонецПроцедуры

// Вывод предупреждения после добавления партнеров из списка ТТ или добавления всех партнеров в таблицу.
&НаКлиенте
Процедура ПредупредитьПользователяОРезультатеДобавленияПартнеров(СтррРезультат)
	
	Текст = "";
	Если СтррРезультат.Свойство("ИсключеноПартнеровСЗаполненнымиКоординатами") Тогда
		Текст = Текст + НСтр("ru = 'Были исключены партнеры с заполненными координатами'")
			+ " " + НСтр("ru = '(включен режим подбора только для партнеров с пустыми координатами).'")
			+ Символы.ПС + СтрШаблон_(НСтр("ru = 'Исключено партнеров: %1.'"), СтррРезультат.ИсключеноПартнеровСЗаполненнымиКоординатами) + " ";
	КонецЕсли; 
	
	Если СтррРезультат.ДобавленоПартнеров = 0 Тогда
		Если Партнеры.Количество() <> 0 Тогда
			Текст = Текст + НСтр("ru = 'Новых партнеров больше не добавлено, т.к. они уже есть в таблице.'");
		Иначе
			Текст = Текст + НСтр("ru = 'Новых партнеров больше не добавлено.'");
		КонецЕсли; 
	КонецЕсли; 
	
	Если Текст <> "" Тогда
		ПоказатьПредупреждение(, Текст);
	КонецЕсли; 
	
КонецПроцедуры

// Добавление в таблицу на форме партнеров из списков торговых точек (может быть добавлено из нескольких списков ТТ)
&НаСервере
Процедура СписокТорговыхТочекДобавитьПартнеровИзСписка(СтррПараметры)
	
	МВыбранныеЗначения = СтррПараметры.мВыбранныеЗначения; // выбранные списки торговых точек (партнеров)
	
	НачальнаяСтрока = Партнеры.Количество();
	
	МНовыеПартнеры = Новый Массив; // количество добавленных партнеров
	
	ПроверятьНаПустыеКоординаты = Элементы.ПартнерыПризнакТолькоСПустымиКоординатами.Пометка;
	БезТочности = СтррКонтекст.ЗначениеБезТочности;	
	ПрежнееКоличествоПартнеров = Партнеры.Количество();
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
		СтррПоиск = Новый Структура("Партнер, ТТАгент");
	Иначе
		СтррПоиск = Новый Структура("Партнер");
	КонецЕсли;
	
	Для Каждого Значение Из МВыбранныеЗначения Цикл
		
		СтррОбъект = ТекОбъект.ПолучитьОбъектИзХранилища("СпрСТТ", Значение.ID);
		Если СтррОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Для Каждого стзСостав Из СтррОбъект.Состав Цикл
			Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
				ТТАгент = стзСостав.АКФ_СпрТТ;
				СтррПоиск.ТТАгент = ТТАгент;
			КонецЕсли;
			Партнер = стзСостав.Партнер;
			СтррПоиск.Партнер = Партнер;
			мСтроки = Партнеры.НайтиСтроки(СтррПоиск);
			Если мСтроки.Количество() = 0 Тогда
				Если Не ПроверятьНаПустыеКоординаты Тогда
					СтрокаТ = Партнеры.Добавить();
					СтрокаТ.Партнер = Партнер;
					Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
						СтрокаТ.ТТАгент = ТТАгент;
					КонецЕсли;
					СтрокаТ.Точность = БезТочности;
				КонецЕсли; 
				Если СтррКонтекст.Конфигурация = "УТ_АКФ" Тогда
					МНовыеПартнеры.Добавить(ТТАгент);	
				Иначе
					МНовыеПартнеры.Добавить(Партнер);
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЦикла; 
	
	Если МНовыеПартнеры.Количество() <> 0 Тогда // добавлены новые партнеры 
		
		КоличествоВМассивеДоДобавления = МНовыеПартнеры.Количество(); // Если включена проверка на добавление с непустыми координатами, то после вызова 
		ОбновитьКоординатыПартнеров(МНовыеПартнеры, НачальнаяСтрока, Ложь, ПроверятьНаПустыеКоординаты); // этой процедуры из массива будут исключены партнеры с непустыми координатами.
		ОбновитьАдресаПартнеров(МНовыеПартнеры, НачальнаяСтрока, Ложь);
		Если КоличествоВМассивеДоДобавления <> МНовыеПартнеры.Количество() И ПроверятьНаПустыеКоординаты Тогда
			СтррПараметры.Вставить("ИсключеноПартнеровСЗаполненнымиКоординатами", КоличествоВМассивеДоДобавления - МНовыеПартнеры.Количество());
		КонецЕсли; 
		
	КонецЕсли; 
	
	СтррПараметры.Вставить("ДобавленоПартнеров", Партнеры.Количество() - ПрежнееКоличествоПартнеров);	
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_СписокТорговыхТочек
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ДобавлениеВсехПартнеров

&НаКлиенте
Процедура ПартнерыДобавитьВсехПартнеровКлиент()
	
	УстановитьМодифицированостьФормы(Ложь);
	СтррРезультат = ПартнерыДобавитьВсехПартнеров();
	ПредупредитьПользователяОРезультатеДобавленияПартнеров(СтррРезультат);	
	
КонецПроцедуры

// Добавление в таблицу на форме всех партнеров.
&НаСервере
Функция ПартнерыДобавитьВсехПартнеров()
	
	СтррРезультат = Новый Структура;	
	
	Партнеры.Очистить();
	
	МНовыеПартнеры = Новый Массив; // массив добавленных партнеров в элемент "Партнеры"
	БезТочности = СтррКонтекст.ЗначениеБезТочности;	
	ПрежнееКоличествоПартнеров = Партнеры.Количество();
	
	ПроверятьНаПустыеКоординаты = Элементы.ПартнерыПризнакТолькоСПустымиКоординатами.Пометка;	
	
	Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ 
		|	Партнеры.ПометкаУдаления = ЛОЖЬ";
		
	Запрос = Новый Запрос(Текст);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ПроверятьНаПустыеКоординаты Тогда
			СтрокаТ = Партнеры.Добавить();
			СтрокаТ.Партнер  = Выборка.Ссылка;
			СтрокаТ.Точность = БезТочности;
		КонецЕсли;
		МНовыеПартнеры.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	Если МНовыеПартнеры.Количество() <> 0 Тогда
		КоличествоВМассивеДоДобавления = МНовыеПартнеры.Количество();
		ОбновитьКоординатыПартнеров(МНовыеПартнеры, 0, Ложь, ПроверятьНаПустыеКоординаты);
		ОбновитьАдресаПартнеров(МНовыеПартнеры, 0, Ложь);
		Если КоличествоВМассивеДоДобавления <> МНовыеПартнеры.Количество() И ПроверятьНаПустыеКоординаты Тогда
			СтррРезультат.Вставить("ИсключеноПартнеровСЗаполненнымиКоординатами", КоличествоВМассивеДоДобавления - МНовыеПартнеры.Количество());
		КонецЕсли;
	КонецЕсли; 
	
	СтррРезультат.Вставить("ДобавленоПартнеров", Партнеры.Количество() - ПрежнееКоличествоПартнеров);
	Возврат СтррРезультат;

КонецФункции

// СлужебныеПроцедурыИФункции_ДобавлениеВсехПартнеров
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Карты

#Область СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений

// Конвертирует переданные координаты из формата NMEA  в формат WGS84. 
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКоординатNMEA(Широта, Долгота)

	Если Широта = 0 И Долгота = 0 Тогда
		Возврат "";
	Иначе
		Возврат Строка(Широта) + "; " + Строка(Долгота);			
	КонецЕсли; 

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВСтроку(Число) 
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(Число), " ", ""), ",", ".");
	
КонецФункции

// СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений
#КонецОбласти 

&НаКлиенте
Процедура КартаПереключитьРежимВыбораКоординат(Режим = "НеМенять", ВыборЦентраКарты = Ложь)
	
	СтррКонтекст.РежимВыбораЦентраКарты = ВыборЦентраКарты;
	
	Если ТипЗнч(Режим) = Тип("Булево") Тогда
	    РежимВыбораКоординат = Режим;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаОбновитьТекущийМакет()
	
	// Важно, чтобы в момент обновления карты диалоговый элемент "ПолеБраузера" не был сфокусирован,
	// иначе происходит ошибка выполнения JavaScript. (Баг работы с COM-объеткми?).
	//@skip-check form-self-reference
	Если ЭтаФорма.ТекущийЭлемент.Имя = "ПолеБраузера" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты; // Убираем фокус с "ПолеБраузера"
	КонецЕсли;
	
	ТекстМакета	= МодульКарты.ПолучитьСкриптКарты(ИсточникКарты);
	ФлПоказатьМаркер = СтррМаркер.Широта <> 0 И Партнеры.Количество() <> 0;
	СтррЦентр = ?(ФлПоказатьМаркер, СтррМаркер, СтррКонтекст.КартаЦентр); // Если маркер еще не использовался, показываем центр карты
	СтрПараметры = КартаСформироватьПараметрРежимРедактора("LabelEditor", СтррЦентр); // Параметры скрипта
	МодульКарты.ЗаполнитьПараметрыСкрипта(ТекстМакета, СтрПараметры);

	Если МодульКарты.ИспользоватьWebKit() Тогда
	    ТекстСкрипта = ТекстМакета;
	Иначе
		#Если Не ВебКлиент Тогда
			//@skip-check return-value-different-environment
			Документ = Элементы.ПолеБраузера.Document;	
			КартаЗагрузитьМакет(Документ, ТекстМакета);
			ОкноБраузера = Документ.parentWindow; // IE
		    Если ОкноБраузера = Неопределено Тогда
		        ОкноБраузера = Документ.defaultView; // Прочие браузеры
			КонецЕсли;
		#Иначе
			ТекстСкрипта = ТекстМакета;
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку скрипта карты из текста макета
//
//  Параметры:
//   Документ 	 - Произвольный - COM-объект - поле html-документа
//   ТекстМакета - Строка - текст скрипта
//
&НаКлиенте
Процедура КартаЗагрузитьМакет(Документ, ТекстМакета)

	Попытка
		Документ.designMode = "On";
		Документ.write(ТекстМакета);	
		Документ.designMode = "Off"; 
	Исключение
		Попытка
			Документ.body.document.designMode = "On";
			Документ.write(ТекстМакета);
			Документ.body.document.designMode = "Off";
		Исключение
			ТекстСкрипта = ТекстМакета;
		КонецПопытки;
	КонецПопытки; 
	
КонецПроцедуры

// Формирует параметр "Режим редактора" (режим + координаты центра карты - при их наличии)
//
//  Параметры:
//   РежимРедактора - Строка - режим редактора
//   СтррЦентр - Произвольный - Неопределено или Структура:
//    * Широта - Число - широта для позиционирования центра карты
//    * Долгота - Число - долгота для позиционирования центра карты
//     Если СтррЦентр не указан, то центр карты берется из атрибутов КартаСсылка.Широта и КартаСсылка.Долгота.
//
//  Возвращаемое значение:
//   Строка - режим редактора с координатами центра карты (при их наличии)  
//
&НаКлиентеНаСервереБезКонтекста
Функция КартаСформироватьПараметрРежимРедактора(РежимРедактора, СтррЦентр = Неопределено)
	
	Если ТипЗнч(СтррЦентр) = Тип("Структура") И СтррЦентр.Свойство("Широта") Тогда
		СтрШирота  = ЧислоВСтроку(КонвертироватьNMEAWGS84(СтррЦентр.Широта));
		СтрДолгота = ЧислоВСтроку(КонвертироватьNMEAWGS84(СтррЦентр.Долгота));
	Иначе
		СтрШирота  = "0";
		СтрДолгота = "0";
	КонецЕсли; 
	
	Возврат СтрШирота + "@" + СтрДолгота + "@" + РежимРедактора;	
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_Карты_Маркер

&НаКлиенте
Процедура КартаПерейтиКМаркеруТекущегоПартнера(Принудительно)
	
	СтрокаТ = Элементы.Партнеры.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		
		Если Не Принудительно И СтррМаркер.Широта = СтрокаТ.Широта И СтррМаркер.Долгота = СтрокаТ.Долгота Тогда
			Возврат; // координаты маркера не менялись
		КонецЕсли; 
		
		СтррМаркер.Широта    = СтрокаТ.Широта;
		СтррМаркер.Долгота   = СтрокаТ.Долгота;
		СтррМаркер.Заголовок = Строка(СтрокаТ.Партнер);
		
		Если СтррМаркер.Широта <> 0 И СтррМаркер.Долгота <> 0 Тогда 
			КартаПерейтиКМаркеру(Истина);
			КартаДобавитьМаркер(Истина);
		КонецЕсли;
	
	КонецЕсли; 

КонецПроцедуры		

&НаКлиенте
Процедура КартаПерейтиКМаркеру(УстановитьТаймер = Ложь)
	
	Документ = Элементы.ПолеБраузера.Document;
	
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	Широта 	= СтррМаркер.Широта;
	Долгота = СтррМаркер.Долгота;
	
	Если Не УстановитьТаймер Тогда 
		ОкноБраузера.GoToMarker(Широта, Долгота);
	Иначе
		Попытка
			ОкноБраузера.GoToMarker(Широта, Долгота);
		Исключение
			Таймер_Включить("ПерейтиКМаркеру");	
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура располагает на карте маркер из реквизита стррМаркер.
&НаКлиенте
Процедура КартаДобавитьМаркер(УстановитьТаймер = Ложь)
	
	Если СтррМаркер.Широта = 0 И СтррМаркер.Долгота = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Описание 		= "";
	Подвал 			= "";
	Подсказка 		= "";
	Порядок  		= "";
	
	ИмяФайлаИконки = "tpnochek.png";
	
	ОтображаемаяИконка = СтррКонтекст.КаталогИконок + ИмяФайлаИконки;
	
	Попытка 
		
		Документ 		= Элементы.ПолеБраузера.Document;		
		ОкноБраузера 	= Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
		
		ОкноБраузера.ClearCollection();	// удаление всех маркеров
		ОкноБраузера.setMarker(СтррМаркер.Широта, СтррМаркер.Долгота, ОтображаемаяИконка, СтррМаркер.Заголовок, Описание, Подвал, Подсказка, Порядок, Ложь);
		
	Исключение
		
		Если УстановитьТаймер Тогда 
			Таймер_Включить("ДобавитьМаркер");	
		Иначе	
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("При построении карты произошла ошибка. Возможно, карта не загружена.");
		КонецЕсли;	
		
	КонецПопытки;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты_Маркер
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Карты_Таймер

// Процедура включает таймер обработки очереди событий для поля браузера, 
// при этом в стек событий (ТаймерОжидания.Очередь) добавляется новое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
// Также должен быть объявлен реквизит формы ТаймерОжидания.
// Реквизит формы "ТаймерОжидания" используется для организациии очереди передачи команд в поле браузера, 
// т.к. поле браузера работает асинхронно и может запаздывать с реакцией на команды.
&НаКлиенте
Процедура Таймер_Включить(Событие)
	Если ТипЗнч(ТаймерОжидания) <> Тип("Структура") Тогда // реквизит еще не инициализировался
		ТаймерОжидания = Новый Структура("Включен,Очередь,Время", Ложь);
		ТаймерОжидания.Очередь = Новый Массив; // стэк событий для взаимодействия с полем браузера (обрабатывается в порядке добавления событий) 
	КонецЕсли;
	Если ТаймерОжидания.Очередь.Найти(Событие) = Неопределено Тогда
		ТаймерОжидания.Очередь.Добавить(Событие);
		//@skip-check use-non-recommended-method
		ТаймерОжидания.Время = ТекущаяДата();
	КонецЕсли;
	Если Не ТаймерОжидания.Включен Тогда
		ТаймерОжидания.Включен = Истина;
		ПодключитьОбработчикОжидания("Таймер_Обработчик", 1);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура Таймер_Обработчик()
	
	//@skip-check use-non-recommended-method
	Если ТекущаяДата() - ТаймерОжидания.Время > 5 Тогда // время с момента постановки события в очередь привысило 5 секунд - прекращаем обрабатывать все события
		Таймер_Выключить(Истина);
	КонецЕсли;
	Событие =  ТаймерОжидания.Очередь[0];
	Попытка
		Если Событие = "ДобавитьМаркер" Тогда
			КартаДобавитьМаркер();
		ИначеЕсли Событие = "ПерейтиКМаркеру" Тогда
			КартаПерейтиКМаркеру();
		ИначеЕсли Событие = "КартаОбновитьТекущийМакет" Тогда
			КартаОбновитьТекущийМакет();
		ИначеЕсли Лев(Событие, 1) = "!" Тогда // событие - строка кода для выполнения
			//@skip-check unsupported-operator
			Выполнить(Сред(Событие, 2) + ";");
		КонецЕсли;
	Исключение
		Возврат;
	КонецПопытки;
	Таймер_Выключить(Ложь);
	
КонецПроцедуры

// Процедура выключает таймер обработки очереди событий для поля браузера, 
// или удаляет из очереди первое событие.
// Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
&НаКлиенте
Процедура Таймер_Выключить(Знач ВыключитьДляВсехСобытий)
	Если Не ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Очередь.Удалить(0);
		Если ТаймерОжидания.Очередь.Количество() = 0 Тогда
			ВыключитьДляВсехСобытий = Истина;
	    КонецЕсли;
	КонецЕсли;
	Если ВыключитьДляВсехСобытий Тогда
		ТаймерОжидания.Включен = Ложь;
		ОтключитьОбработчикОжидания("Таймер_Обработчик");
	КонецЕсли;
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты_Таймер
#КонецОбласти

// СлужебныеПроцедурыИФункции_Карты
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Обработчики

// Сохранение измененных координат для Партнеров с признаком КоординатыИзменены.
// Параметры:
//   РезультатОтвета - КодВозвратаДиалога
//   ДополнительныеПараметры - Произвольный
&НаКлиенте
Процедура ДобавитьВсехПартнеровПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ПартнерыДобавитьВсехПартнеровКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУказатьЦентрКартыПродолжить(Центр, ДополнительныеПараметры) Экспорт
	
	Если Центр <> Неопределено Тогда
		
		Если ТипЗнч(Центр) = Тип("Структура") Тогда
			
			СохранитьЦентрКартыКлиент(Центр);
			ЗаполнитьЗначенияСвойств(СтррМаркер, Центр);
			КартаПерейтиКМаркеру(Истина);
			КартаДобавитьМаркер(Истина);
			
		ИначеЕсли Центр = "ВыбратьНаКарте" Тогда // включаем режим выбора центра на карте
			
			КартаПереключитьРежимВыбораКоординат(Истина, Истина);
		
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьНовыеКоординатыЦентраКартыПродолжить(РезультатОтвета, СтррПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КартаПереключитьРежимВыбораКоординат(Ложь);
		СохранитьЦентрКартыКлиент(СтррПараметры); // запоминаем центр карты в хранилище
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		КартаПереключитьРежимВыбораКоординат(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерыВыборКоординатЗавершение(СтррРезультат, ДополнительныеПараметры) Экспорт
    
	Если ТипЗнч(СтррРезультат) = Тип("Структура") Тогда
		ПартнерыУстановитьНовыеКоординатыДляТекущегоПартнера(СтррРезультат, Истина);
		МигатьКоординатами();
	КонецЕсли;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_Обработчики
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Режим;
	Элементы.Сохранить.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	СтрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			СтрЧисло = СтрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			СтрЧисло = СтрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(СтрЧисло), 0, Число(СтрЧисло));

КонецФункции

&НаКлиенте
Процедура СохранитьЦентрКартыКлиент(СтррЦентр)
	
	Если ТипЗнч(СтррЦентр) = Тип("Структура") Тогда
		СтррКонтекст.КартаЦентр = СтррЦентр;	
		ОбновитьЗаголовокФормы();
		МодульКарты.УстановитьРегионГеокодера(СтррЦентр); // для точности геокодирования
		МодульКарты.СохранитьЦентрКартыКлиент(СтррЦентр);
	КонецЕсли; 
	
КонецПроцедуры	

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти 
