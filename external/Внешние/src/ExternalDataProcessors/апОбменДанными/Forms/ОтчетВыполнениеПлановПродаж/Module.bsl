#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульК;  // общий клиентский модуль

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВостановитьСпискиЗначений(); // Востановление настроек отчета
	флДиаграмма = Ложь; 		 // Вкладка Таблица при открытии всегда выбрана поумолчанию.
	ОтображениеЭлементовФормы(); // Отображение видемости элементов формы
	
	//@skip-check form-self-reference
	СобытиеПриИзмененииНастроек(ЭтаФорма.Элементы.Результат);
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
    // а = 0;
КонецПроцедуры

&НаКлиенте
Процедура СобытиеПриИзмененииНастроек(Элемент)
	//@skip-check form-self-reference
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.Результат, "НеАктуальность");	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗначенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Получаем весь список с отмеченными полями по умолчанию
	Если Элемент.Имя = "Детализация" ИЛИ Элемент.Имя = "ДетализацияДиаграммы" Тогда
		СЗн = СписокДетализация();
	ИначеЕсли Элемент.Имя = "ВариантДиаграммы" Тогда    
		СЗн = СписокВариантДиаграммы();	
	Иначе
		Возврат;	
	КонецЕсли;

	//Очищаем элементы списка в соответствии с уже отмеченными элементами на форме 
	Для Каждого ЭлементСписка Из СЗн Цикл
		//@skip-check form-self-reference
		Если ЭтаФорма[Элемент.Имя].НайтиПоЗначению(ЭлементСписка.Значение) <> Неопределено Тогда
			ЭлементСписка.Пометка = Истина;
		Иначе
			ЭлементСписка.Пометка = Ложь;
		КонецЕсли;		
	КонецЦикла; 
			
	ОповещениеПослеОтметкиЭлементов = Новый ОписаниеОповещения("СписокЗначенийПослеОтметкиЭлементов", ЭтотОбъект, Элемент.Имя);	
	СЗн.ПоказатьОтметкуЭлементов(ОповещениеПослеОтметкиЭлементов, "Детализация");
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
КонецПроцедуры

&НаКлиенте
Процедура КомандаДиаграмма(Команда)
	 
	Если Команда.Имя = "КнопкаТаблица" Тогда
		флДиаграмма = Ложь;	
	ИначеЕсли Команда.Имя = "КнопкаДиаграмма" Тогда
		флДиаграмма = Истина;		
	КонецЕсли;
	
	ОтображениеЭлементовФормы();
	
	//@skip-check form-self-reference
	СобытиеПриИзмененииНастроек(ЭтаФорма.Элементы.Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)

	//@skip-check form-self-reference
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.Результат, "ФормированиеОтчета");
	
	//Проверка заполнения обязательных полей
	Если (флДиаграмма = Ложь И Детализация.Количество() = 0) ИЛИ (флДиаграмма = Истина И (ДетализацияДиаграммы.Количество() = 0 ИЛИ ВариантДиаграммы.Количество() = 0)) Тогда
		Оповещение =  Новый ОписаниеОповещения("ПослеЗакрытияВопросаПроверки", ЭтотОбъект);
		ТекстПредупреждения = ?(флДиаграмма, Элементы.ДетализацияДиаграммы.Заголовок + " "" или "" " + Элементы.ВариантДиаграммы.Заголовок ,Элементы.Детализация.Заголовок);
		ТекстПредупреждения = """" + ТекстПредупреждения + """";
		ТекстПредупреждения = "Не заполена настройка отчета: " + ТекстПредупреждения + ", заполнить настройку по умолчанию ?";
		ПоказатьВопрос(Оповещение, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да, "Не заполнены обязательные поля настроек");
		Возврат;
	КонецЕсли;
		
	СформироватьНаСервере();
	
	//@skip-check form-self-reference
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.Результат, "НеИспользовать");

КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВостановитьСпискиЗначений()
	//Если в форме не заполнены основные поля ,то заполним значениями поумолчанию. Предположительно первый запуск отчета.
	Если Детализация.Количество() = 0 Тогда
		Детализация	= ПолучитьОтмеченыеЗначенияСписка(СписокДетализация());
	Иначе
		ВостановитьСписокЗначений("Детализация");	
	КонецЕсли;
	
	Если ДетализацияДиаграммы.Количество() = 0 И ВариантДиаграммы.Количество() = 0 Тогда  
		ДетализацияДиаграммы = ПолучитьОтмеченыеЗначенияСписка(СписокДетализацияДиаграммы());
		ВариантДиаграммы 	 = ПолучитьОтмеченыеЗначенияСписка(СписокВариантДиаграммы());
	Иначе
		ВостановитьСписокЗначений("ДетализацияДиаграммы");
		ВостановитьСписокЗначений("ВариантДиаграммы");
	КонецЕсли;
Конецпроцедуры

// Процедура - Востанавливает список значений по представлениям.
//При сохранении форма не сохраняет значения СпискаЗначений реквизитов формы, сохраняются только представления.
//
// Параметры:
//  СтрИмяСписка - Строка - Имя реквизита списка значений.
//
&НаКлиенте
Процедура ВостановитьСписокЗначений(СтрИмяСписка)
	
	Если СтрИмяСписка = "Детализация" Тогда
		СЗСравнения = СписокДетализация();
	ИначеЕсли СтрИмяСписка = "ДетализацияДиаграммы" Тогда
		СЗСравнения = СписокДетализацияДиаграммы();	
	ИначеЕсли СтрИмяСписка = "ВариантДиаграммы" Тогда
		СЗСравнения = СписокВариантДиаграммы();	
	Иначе 
		Возврат;
	КонецЕсли;
	
	//@skip-check form-self-reference
	СЗТекущий = ЭтаФорма[СтрИмяСписка].Скопировать();
	//@skip-check form-self-reference
	ЭтаФорма[СтрИмяСписка] = Новый СписокЗначений; 
	
	Для каждого ЭлементТекущий Из СЗТекущий Цикл
		Для Каждого ЭлементСравнения Из СЗСравнения Цикл
			Если ЭлементТекущий.Представление = ЭлементСравнения.Представление Тогда
				//@skip-check form-self-reference
				ЭтаФорма[СтрИмяСписка].Добавить(ЭлементСравнения.Значение, ЭлементСравнения.Представление);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ОтображениеЭлементовФормы()
	//Видимость
	Элементы.ПланированиеПоСумме.Видимость 	= НЕ флДиаграмма;
	Элементы.ВариантДиаграммы.Видимость 	= флДиаграмма;
	Элементы.ДетализацияДиаграммы.Видимость = флДиаграмма;
	Элементы.Детализация.Доступность		= НЕ флДиаграмма;
	
	//Шрифты
	Если флДиаграмма Тогда
		//@skip-check new-font
		Элементы.КнопкаТаблица.Шрифт   		= Новый Шрифт(Элементы.КнопкаТаблица.Шрифт  , , ,Ложь);
		//@skip-check new-font
		Элементы.КнопкаДиаграмма.Шрифт 	 	= Новый Шрифт(Элементы.КнопкаДиаграмма.Шрифт, , ,Истина);
	Иначе
		//@skip-check new-font
		Элементы.КнопкаТаблица.Шрифт   = Новый Шрифт(Элементы.КнопкаТаблица.Шрифт  , , ,Истина);
		//@skip-check new-font
		Элементы.КнопкаДиаграмма.Шрифт = Новый Шрифт(Элементы.КнопкаДиаграмма.Шрифт, , ,Ложь);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНаСервере()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Схема = ТекОбъект.ПолучитьМакет("СКДПланыПродажНоменклатура");
	//Настройки = Схема.НастройкиПоУмолчанию;
	КомпоновщикНастроекДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикНастроекДанных.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	КомпоновщикНастроекДанных.Настройки.Структура.Очистить();
	
	НастройкиСКД = КомпоновщикНастроекДанных.Настройки;
	
	Если флДиаграмма = Ложь Тогда
	
		//++ ДЕТАЛИЗАЦИЯ Таблица
		ГрупировкаТекущая 	= НастройкиСКД;
		Для Каждого Элемент Из Детализация Цикл
			//ГРУППИРОВКА
			ГруппировкаНовая = ГрупировкаТекущая.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаНовая.Имя = Элемент.Значение;
			ГруппировкаНовая.Использование = Истина;
			
			//СОРТРОВКА
			ПолеСортировки = ГруппировкаНовая.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			ПолеСортировки.Поле = Новый ПолеКомпоновкиДанных(Элемент.Значение);
			ПолеСортировки.Использование = Истина;
			
			//ПОЛЕ ГРУППИРОВКИ
			ПолеГруппировки = ГруппировкаНовая.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование = Истина;
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Элемент.Значение);
			ПолеГруппировки.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.ТипДополнения   = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
			
			//ВЫБРАННЫЕ ПОЛЯ Признак использования выбраных полей. Если ложь или не задано, то поле текущей группировки (ПолеГруппировки) на форме пустое. Для того что бы система сама определила какие поля нужно выводить   
			ВыбранныеПоля = ГруппировкаНовая.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоля.Использование = Истина;
		
			ГрупировкаТекущая = ГруппировкаНовая;
		КонецЦикла;
		
		//ВЫБРАННЫЕ ПОЛЯ
		//Колонка Запланирвано
		ВыбранныеПоля = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоля.Использование = Истина;
		ВыбранныеПоля.Заголовок = "Запланированное количество";
		ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("ЗапланированноеКоличество");
		
		//Колонка ФактическиеПродажи
		ВыбранныеПоляГруппировка = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляГруппировка.Заголовок = "Фактические продажи"; 

		ВыбранныеПоля = ВыбранныеПоляГруппировка.Элементы.добавить(тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоля.Использование = Истина;
		ВыбранныеПоля.Заголовок = "%";
		ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("ВыполнениеФактическиеПродажи");
		
		ВыбранныеПоля = ВыбранныеПоляГруппировка.Элементы.добавить(тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоля.Использование = Истина;
		ВыбранныеПоля.Заголовок = "Кол-во";
		ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("ФактПоПродажам");
		
		//Колонка Продажи по документам агента
		ВыбранныеПоляГруппировка = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ВыбранныеПоляГруппировка.Заголовок = "Продажи по документам агента"; 

		ВыбранныеПоля = ВыбранныеПоляГруппировка.Элементы.добавить(тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоля.Использование = Истина;
		ВыбранныеПоля.Заголовок = "%";
		ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("ВыполнениеПоДокументамПродажи");
		
		ВыбранныеПоля = ВыбранныеПоляГруппировка.Элементы.добавить(тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранныеПоля.Использование = Истина;
		ВыбранныеПоля.Заголовок = "Кол-во";
		ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("ФактПоДокументамИзМУ");
		
		//Колонка планирование по сумме
		Если ПланированиеПоСумме Тогда
			ВыбранныеПоляГруппировка1 = НастройкиСКД.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляГруппировка1.Заголовок = "Планирование по сумме";
			
			//Колонка Запланирвано
			ВыбранныеПоля = ВыбранныеПоляГруппировка1.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоля.Использование = Истина;
			ВыбранныеПоля.Заголовок = "Запланированная сумма";
			ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("ЗапланированнаяСумма");

			//Колонка Фактические продаж
			ВыбранныеПоляГруппировка = ВыбранныеПоляГруппировка1.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляГруппировка.Заголовок = "Фактические продажи";
			
			ВыбранныеПоля = ВыбранныеПоляГруппировка.Элементы.Добавить(тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоля.Использование = Истина;
			ВыбранныеПоля.Заголовок = "%";
			ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("ВыполнениеСуммаФактическиеПродажи");
			
			ВыбранныеПоля = ВыбранныеПоляГруппировка.Элементы.Добавить(тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоля.Использование = Истина;
			ВыбранныеПоля.Заголовок = "Сумма";
			ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("СуммаФактПоПродажам");
			
			//Колонка Фактических продажи в валюте рег. учета
			ВыбранныеПоляГруппировка = ВыбранныеПоляГруппировка1.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ВыбранныеПоляГруппировка.Заголовок = "Фактических продажи в валюте рег. учета";
			
			ВыбранныеПоля = ВыбранныеПоляГруппировка.Элементы.Добавить(тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоля.Использование = Истина;
			ВыбранныеПоля.Заголовок = "%";
			ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("ВыполнениеСуммаФактическиеПродажиРегУчета");
			
			ВыбранныеПоля = ВыбранныеПоляГруппировка.Элементы.Добавить(тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоля.Использование = Истина;
			ВыбранныеПоля.Заголовок = "Сумма";
			ВыбранныеПоля.Поле = Новый ПолеКомпоновкиДанных("СуммаФактПоПродажамВалютпРегУчета");
		КонецЕсли;
		
		//-- ДЕТАЛИЗАЦИЯ Таблица
		
	Иначе
		
		//++ ДЕТАЛИЗАЦИЯ Диаграмма
		
		ФлСерии = ?(ВариантДиаграммы.Количество() = 1, Истина, Ложь);
		
		// Добавим в отчет диаграмму.
		Диаграмма = НастройкиСКД.Структура.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
		
		// Установим заголовок диаграммы
		ПараметрВывода = Диаграмма.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
		ПараметрВывода.Значение = "Диаграмма"; //?(флСерии, ВариантДиаграммы[0].Представление, "");
		ПараметрВывода.Использование = Истина;
		 
		// Укажем, какой ресурс нужно выводить в диаграмме
    	Для Каждого Элемент Из ВариантДиаграммы Цикл
   			ВыбранноеПоле = Диаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    	 	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Элемент.Значение);
    	 	ВыбранноеПоле.Заголовок = Элемент.Представление;
    	КонецЦикла;
 
		 
		// Добавим в диаграмму Точки.
		ГрупировкаТекущая = Неопределено;
		Для Каждого Элемент Из ДетализацияДиаграммы Цикл
			//Добавим точку
			Если ГрупировкаТекущая = Неопределено Тогда
				ГрупировкаТекущая = ?(ФлСерии, Диаграмма.Серии.Добавить(), Диаграмма.Точки.Добавить());
			Иначе
				ГрупировкаТекущая = ГрупировкаТекущая.Структура.Добавить();
			КонецЕсли;
			
			// Укажем, что система сама должна определять, какие поля нужно выводить в точку.
			ГрупировкаТекущая.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
			// Укажем каким образом нужно упорядочивать данные точки
			ЭлементПорядка = ГрупировкаТекущая.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	 		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(Элемент.Значение);	
			
			// Укажем, по какому полю нужно группировать в точке.
			ПолеГруппировки = ГрупировкаТекущая.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Элемент.Значение); 				
		КонецЦикла; 
		
		//-- ДЕТАЛИЗАЦИЯ Диаграмма
		
	КонецЕсли;
	
	//ПАРАМЕТРЫ
	Если ДатаНачало <> '00010101' Тогда
		Параметр = КомпоновщикНастроекДанных.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрДатаНачало");
		Параметр.Использование = Истина;
		Параметр.Значение = ДатаНачало;
	КонецЕсли;
	Если ДатаКонец <> '00010101' Тогда
		Параметр = КомпоновщикНастроекДанных.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрДатаКонец");
		Параметр.Использование = Истина;
		Параметр.Значение = ДатаКонец;
	КонецЕсли;
	Если Агент.Количество() > 0 Тогда
		Параметр = КомпоновщикНастроекДанных.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрАгент");
		Параметр.Использование = Истина;
		Параметр.Значение = Агент;
	КонецЕсли;
	Если ПланПродаж.Количество() > 0 Тогда
		Параметр = КомпоновщикНастроекДанных.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрПланПродаж");
		Параметр.Использование = Истина;
		Параметр.Значение = ПланПродаж;
	КонецЕсли;
	
	//ФОРМИРОВАНИЕ данных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	//МакетОформления = Н ПолучитьМакет("Основной");
	Макет = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроекДанных.ПолучитьНастройки(),,);
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

	Результат.Очистить();
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//СВЕРНУТЬ группировки
	Результат.ПоказатьУровеньГруппировокСтрок(0);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтмеченыеЗначенияСписка(Список)
	СЗн = Новый СписокЗначений;	
	Для Каждого Элемент Из Список Цикл
		Если Элемент.Пометка Тогда
			СЗн.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	Возврат СЗн;
КОнецФункции

&НаКлиенте
Функция СписокДетализация()
	СЗн = Новый СписокЗначений;
	СЗн.Добавить("Агент",				"Агент", 						Истина);
	СЗн.Добавить("ПланПродаж",			"План продаж", 					Истина);
	СЗн.Добавить("ПланПродажПериод", 	"План продаж по периодам", 		Ложь);
	СЗн.Добавить("Номенклатура", 		"Номенклатура", 				Истина);
	//сзСписок.Добавить("Партнер", 			"Партнер из плана продаж", 		Ложь); //Редко используется
	
	Возврат СЗн;
КонецФункции

&НаКлиенте
Функция СписокДетализацияДиаграммы()
	СЗн = Новый СписокЗначений;
	Для Каждого Элемент Из СписокДетализация() Цикл
		СЗн.Добавить(Элемент.Значение, Элемент.Представление, ?(Элемент.Значение = "Агент", Истина, Ложь));
	КонецЦикла;
		
	Возврат СЗн;
КонецФункции

&НаКлиенте
Функция СписокВариантДиаграммы()
	СЗн = Новый СписокЗначений;
	СЗн.Добавить("ВыполнениеФактическиеПродажи", "Выполнение по фактическим продажам, %",					Истина);
	СЗн.Добавить("ВыполнениеПоДокументамПродажи", "Выполнение по документам продажи агента, %",			Ложь);
	СЗн.Добавить("ВыполнениеСуммаФактическиеПродажиРегУчета", "Выполнение по сумме в валюте рег. учета, %",Ложь);
	СЗн.Добавить("ЗапланированноеКоличество", "Количество запланированное", 								Ложь);
	СЗн.Добавить("ФактПоПродажам", "Количество по фактическим продажам", 									Ложь);
	СЗн.Добавить("ФактПоДокументамИзМУ", "Количество по документам продажи агента", 						Ложь);
	СЗн.Добавить("ЗапланированнаяСумма", "Сумма запланированная", 											Ложь);
	СЗн.Добавить("СуммаФактПоПродажам", "Сумма без учета валюты", 											Ложь);
	СЗн.Добавить("СуммаФактПоПродажамВалютпРегУчета", "Сумма в валюте рег. учета", 						Ложь);
	
	Возврат СЗн;
КонецФункции

#Область СлужебныеПроцедурыИФункции_Обработчики

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроверки(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если флДиаграмма = Ложь Тогда
		Детализация	= ПолучитьОтмеченыеЗначенияСписка(СписокДетализация());
	Иначе
		ДетализацияДиаграммы	= ПолучитьОтмеченыеЗначенияСписка(СписокДетализацияДиаграммы());
		ВариантДиаграммы 		= ПолучитьОтмеченыеЗначенияСписка(СписокВариантДиаграммы());	
	КонецЕсли;
	
	СформироватьНаСервере();		
	
КОнецПроцедуры

&НаКлиенте
Процедура СписокЗначенийПослеОтметкиЭлементов(Список, ИмяЭлемента) Экспорт
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	//@skip-check form-self-reference
	ЭтаФорма[ИмяЭлемента] = ПолучитьОтмеченыеЗначенияСписка(Список);
	
КОнецПроцедуры

// СлужебныеПроцедурыИФункции_Обработчики
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

// Возвращает форму "МодульОбщий"
//
&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции 

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти