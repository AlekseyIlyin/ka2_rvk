#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульК;  // общий клиентский модуль

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	//@skip-check form-self-reference
	СтррРеквизиты = ЭтаФорма.Параметры.СтррРеквизиты; // реквизиты МУ для передачи в родительскую форму и между клиентом и сервером
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//@skip-check form-self-reference
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтррРеквизиты);
	ИдентификаторМУПредставление = Строка(ИдентификаторМУ);
	
	ЛК_IdentifierПредставление 	= Строка(ЛК_Identifier);
	ЛК_MDMIdПредставление 		= Строка(ЛК_MDMId);
	ЛК_HardwareIdПредставление 	= Строка(ЛК_HardwareId);
	
	//@skip-check form-self-reference
	ЭтаФорма.Заголовок = НСтр("ru = 'Мобильное устройство'");
	Если Не ЗначениеЗаполнено(СтррРеквизиты.ID) Тогда
		//@skip-check form-self-reference
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (" +НСтр("ru = 'Создание'") + ")";
	КонецЕсли;
	
	Оповестить("АППроверкаРедактированияНастроекАгентов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Значение = Параметр;
	
	Если ИмяСобытия = "АПМобильныеУстройстваОтвет" Тогда // оповещение, отправленное из модуля формы МобильныеУстройства.
		
		Если Не ЗначениеЗаполнено(Значение.ПолеОшибки) Тогда // ошибок нет
			//@skip-check form-self-reference
			ЭтаФорма.Модифицированность = Ложь;
			Закрыть();
		Иначе
			Поле = ?(Значение.ПолеОшибки = "ИдентификаторМУ", "ИдентификаторМУПредставление", Значение.ПолеОшибки);
			ОчиститьСообщения();
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Значение.Сообщение,, Поле);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "АПНастройкиАгентовРедактируются" Тогда // ответ на запрос "АППроверкаРедактированияНастроекАгентов" 
		// Если Параметр = Истина, то настройки агентов сейчас редактируются, поэтому блокируем изменение Пользователя на форме.
		Элементы.Пользователь.Доступность = Не Параметр;
		Если Не Элементы.Пользователь.Доступность Тогда // настройки агентов сейчас редактируются
			Элементы.Пользователь.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСверху;
			Элементы.Пользователь.Подсказка = НСтр("ru = 'Настройки агентов сейчас редактируются, агента изменить нельзя.'");
		Иначе // разрешаем изменять пользователя
			Элементы.Пользователь.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
			Элементы.Пользователь.Подсказка = НСтр("ru = 'Агент, закрепленный за мобильным устройством.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПолучитьКоличествоАгентов() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Сначала добавьте новых агентов в окне ""Настройки агентов"".'"));	
	Иначе
		СтррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Пользователь", Пользователь));
		Оповещение = Новый ОписаниеОповещения("ПользовательВыборЗавершение", ЭтотОбъект);
		//@skip-check form-self-reference
		МодульК().ОткрытьФормуОбработки("ВыборАгента", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ТекстОшибки = "";
	ОчиститьСообщения();
	
	Наименование = СокрЛП(Наименование); // для исключения совпадений наименований без крайних пробелов
	
	Если ПустаяСтрока(Наименование) Тогда
		ТекстОшибки = НСтр("ru = 'Заполните наименование.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Наименование");
	КонецЕсли;
	
	Если Не ЭтоПравильныйИдентификатор(ИдентификаторМУПредставление, ТекстОшибки) Тогда
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ИдентификаторМУПредставление");
	КонецЕсли;

	Если ПустаяСтрока(ТекстОшибки) Тогда // ошибок нет, оповещяем родительское окно о готовности записать МУ
		
		ИдентификаторМУ = Новый УникальныйИдентификатор(ИдентификаторМУПредставление);
		Если Не ЗначениеЗаполнено(ID) Тогда // значит добавляем новый МУ
			ID = Новый УникальныйИдентификатор;
			//@skip-check use-non-recommended-method
			ДатаРегистрации = ТекущаяДата();
		КонецЕсли;
	
		//@skip-check form-self-reference
		ЗаполнитьЗначенияСвойств(СтррРеквизиты, ЭтаФорма);
	
		Оповестить("АПМобильноеУстройствоПопыткаЗаписать", СтррРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

// Функция проверяет строку представления идентификатора GUID на соответствие формату GUID.
// 
// Параметры:
//  GUID - Строка - представление идентификатора GUID;
//  ОписаниеОшибки - Строка - параметр для возврата описания ошибки.
//
// Возвращаемое значение:
//   Булево - Истина - если идентификатор правильный, иначе Ложь.
//   В параметре ОписаниеОшибки возвращается описание ошибки.
//
&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоПравильныйИдентификатор(GUID, ОписаниеОшибки)
	
	GUID = ВРег(СокрЛП(GUID));
	//@skip-check use-non-recommended-method
	Если СтрДлина(GUID) <> 36 Тогда
		ОписаниеОшибки = СтрШаблон_(НСтр("ru = 'Длина идентификатора должна быть 36 символов, длина текущего: %1 симв.'"), СтрДлина(GUID));
		Возврат Ложь;
	ИначеЕсли 0 <> Найти(GUID, " ") Тогда
		ОписаниеОшибки = НСтр("ru = 'Значение идентификатора вводится без знаков ""Пробел"".'");
		Возврат Ложь;
	КонецЕсли;
	
	// Заменяем кирилические на латинские символы (бывает и такое)
	Для Поз = 1 По 8 Цикл
		GUID = СтрЗаменить(GUID, Сред("АБВСДЕФЦ", Поз, 1), Сред("ABBCDEFC", Поз, 1));
	КонецЦикла;

	GUID0 = GUID;
	Для Поз = 1 По 15 Цикл
		GUID0 = СтрЗаменить(GUID0, Сред("123456789ABCDEF", Поз, 1), "0");
	КонецЦикла;
	
	Если GUID0 <> "00000000-0000-0000-0000-000000000000" Тогда
		НедопустимыеСимволы = СтрЗаменить(СтрЗаменить(GUID0, "0", ""), "-", "");
		ОписаниеОшибки = СтрШаблон_(НСтр("ru = 'Недопустимые символы: %1.'"), НедопустимыеСимволы);
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Введите идентификатор в формате XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX, где вместо ""X"" указываются цифры 0-9 и символы A-F (или a-f).'");
		Возврат Ложь;
	ИначеЕсли GUID = GUID0 Тогда
		ОписаниеОшибки = НСтр("ru = 'Запрещено использование нулевого идентификатора.'");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПользовательВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Пользователи") Тогда
		Пользователь = Результат;
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоАгентов()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТЗн = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов");
	
	Возврат ?(ТипЗнч(ТЗн) = Тип("ТаблицаЗначений"), ТЗн.Количество(), 0);
	
КонецФункции

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции 

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаОК(Неопределено);
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти