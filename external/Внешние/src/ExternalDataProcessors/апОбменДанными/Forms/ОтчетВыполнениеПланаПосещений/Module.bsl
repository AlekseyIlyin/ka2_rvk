#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульК; // общий клиентский модуль

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СтррКонтекст = Новый Структура("СписокВсеВидыДокументов,ОбластьДней");
	
	СтррКонтекст.Вставить("СсылкаСписокТТ", Неопределено);  			// идентификатор списка ТТ, закрепленного за выбранным агентом
	СтррКонтекст.Вставить("НаименованиеСписокТТ", ""); 					// наименование списка ТТ, закрепленного за выбранным агентом
	СтррКонтекст.Вставить("ИспользуетсяДляПланированияСписокТТ", Ложь); // признак использования в списке ТТ детализации до графика или плана посещений

	СтррКонтекст.Вставить("СпискиТТ", Новый СписокЗначений);
	ПрочестьСпискиТТ();
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.Вставить("НомерВнеПлана", ТекОбъект.ПланПосещенийНомерПунктаВнеПлана()); // признак номера ТТ вне списка ТТ	
	
	СтррКонтекст.СписокВсеВидыДокументов = ТекОбъект.ПолучитьВсеВидыОбъектовДля1C("Документ", "СоздаваемыеВМУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
	// { Корректируем восстановленные из настроек формы значения

	Если ВидыДокументов.Количество() = 0 Тогда // если список пустой, заполняем его всеми видами документов
		ВидыДокументов = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 	
	КонецЕсли; 
	
	Если ПериодОтчета.ДатаНачала = '00010101' Или ПериодОтчета.ДатаОкончания = '00010101' Тогда
		//@skip-check use-non-recommended-method
		ПериодОтчета.ДатаНачала = НачалоМесяца(ТекущаяДата());
		//@skip-check use-non-recommended-method
		ПериодОтчета.ДатаОкончания = ТекущаяДата();
	КонецЕсли; 
	
	// }
	
	ОтчетВыключитьАктуальность();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭлементФормыПриИзменении(Элемент)
	
	Если Элемент = Элементы.ПериодОтчета Тогда
		Если ПериодОтчета.ДатаНачала > ПериодОтчета.ДатаОкончания Тогда
			Пром = ПериодОтчета.ДатаОкончания;
			ПериодОтчета.ДатаОкончания = ПериодОтчета.ДатаНачала;
			ПериодОтчета.ДатаНачала = Пром;
		КонецЕсли;
	КонецЕсли;	
	
	ОтчетВыключитьАктуальность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДляПометки = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> ВидыДокументов.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиСпискаВидовДокументов", ЭтотОбъект);
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите документы, включаемые в отчет'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СпискиТТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДляПометки = СтррКонтекст.СпискиТТ.Скопировать(); 	
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> СпискиТТ.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиСпискаСпискиТТ", ЭтотОбъект);
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите списки торговых точек, включаемые в отчет'"));

КонецПроцедуры

&НаКлиенте
Процедура АгентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Пользователь", Агент));
	Оповещение = Новый ОписаниеОповещения("ПользовательВыборЗавершение", ЭтотОбъект);
	//@skip-check form-self-reference
	МодульК().ОткрытьФормуОбработки("ВыборАгента", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура АгентОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Агент) Тогда
		МодульК().ОткрытьФормуОбработки("НастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("Пользователь", Агент));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТДОтчетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если Расшифровка = "СписокТТ" Тогда // нужно показать список торговых точек
		СтандартнаяОбработка = Ложь;
		СтррПараметры = Новый Структура("ID", СтррКонтекст.СсылкаСписокТТ);
		МодульК().ОткрытьФормуОбработки("СписокТорговыхТочек", СтррПараметры, СтррПараметры.ID);
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда // нужно показать документы за данный день
		СтандартнаяОбработка = Ложь;
		Список = ПолучитьСписокДокументовДляРасшифовки(Расшифровка);
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыборДокументаРасшифровкиИзСписка", ЭтотОбъект, Элемент);
		ПоказатьВыборИзСписка(ОбработкаВыбора, Список, Элемент); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Ответственный) И ЗначениеЗаполнено(Агент) Тогда
		Ответственный = Агент;
	КонецЕсли;	
		
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСкрытьОтбор(Команда)
	
	Элементы.СкрытьПараметры.Пометка = Не Элементы.СкрытьПараметры.Пометка;
	ФормаОбновитьВидимостьОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьОтчет(Команда)
	
	//@skip-check form-self-reference
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.ТДОтчет, "ФормированиеОтчета");	
	ПодключитьОбработчикОжидания("ОтчетСформироватьКлиент", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)
	
	Если ТДОтчет.ВысотаТаблицы = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Отчет не сформирован, сначала сформируйте отчет.'"));
		Возврат;
	КонецЕсли; 
	
	ТДОтчет.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТДОтчет.ПолеСлева	= 1;
    ТДОтчет.ПолеСправа	= 1;
	ТДОтчет.ПолеСверху	= 4;
	ТДОтчет.ПолеСнизу	= 1;
	
	ТДОтчет.ВерхнийКолонтитул.Выводить			 = Истина;
    ТДОтчет.РазмерКолонтитулаСверху				 = 4;
    ТДОтчет.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
    ТДОтчет.ВерхнийКолонтитул.НачальнаяСтраница	 = 1;    
    //@skip-check new-font
    ТДОтчет.ВерхнийКолонтитул.Шрифт				 = Новый Шрифт("Arial", 8,,Истина);
	ТДОтчет.ВерхнийКолонтитул.ТекстСправа		 = "Стр.[&НомерСтраницы] из [&СтраницВсего]";
	
	ТДОтчет.Напечатать(РежимИспользованияДиалогаПечати.Использовать);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьНаКарте(Команда)
	
	Если ТДОтчет.ВысотаТаблицы = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Отчет не сформирован, сначала сформируйте отчет.'"));
		Возврат;
	КонецЕсли; 
	
	Расшифровка = Элементы.ТДОтчет.ТекущаяОбласть.Расшифровка;
		
	ТекОбласть = Элементы.ТДОтчет.ТекущаяОбласть;
	СтррОбласть = СтррКонтекст.ОбластьДней;
	Если  ТекОбласть.Верх >= СтррОбласть.Верх И ТекОбласть.Низ <= СтррОбласть.Низ 
		И ТекОбласть.Лево >= СтррОбласть.Лево И ТекОбласть.Право <= СтррОбласть.Право
	Тогда
	    Дата = ПериодОтчета.ДатаНачала + (ТекОбласть.Лево - СтррОбласть.Лево - 1) * 86400;
		ПоказатьМаршрутНаДату(Дата);
	ИначеЕсли Расшифровка = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для просмотра данных на карте выделите партнера или одну из ячеек дня.'"));
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Расшифровка) = Тип("СправочникСсылка.Партнеры") Тогда
		ПоказатьПартнеровПоРасшифровке();
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда		
		//ПоказатьМаршрутПоРасшифровке();
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//       т.е. для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив Из Строка - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	//@skip-check use-non-recommended-method
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		//@skip-check use-non-recommended-method
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте
Процедура ФормаОбновитьВидимостьОтборов()
	
	//ВидимостьОтборов = Не Элементы.СкрытьПараметры.Пометка;
	Элементы.ГруппаПараметрыОтчета.Видимость = Не Элементы.СкрытьПараметры.Пометка;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФормированиеОтчета

// Функция возвращает структуру с основными свойствами списка ТТ закрепленного за агентом - наименование, ссылку и описание ошибки.
&НаСервере
Функция ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент)

	Возврат РеквизитФормыВЗначение("Объект").ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент);

КонецФункции

&НаКлиенте
Процедура ОтчетВыключитьАктуальность()
	
	//@skip-check form-self-reference
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.ТДОтчет, "НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСформироватьКлиент()
	
	СтррКонтекст.СсылкаСписокТТ 					 = Неопределено;
	СтррКонтекст.НаименованиеСписокТТ 				 = "";
	СтррКонтекст.ИспользуетсяДляПланированияСписокТТ = Истина;
	
	ЕстьОшибки = Ложь;
	ОчиститьСообщения();
	
	Если ПериодОтчета.ДатаНачала = '00010101' Или ПериодОтчета.ДатаОкончания = '00010101' Тогда
		Текст = НСтр("ru = 'Укажите период отчета.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "ПериодОтчета");
		ЕстьОшибки = Истина;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Агент) Тогда
		Текст = НСтр("ru = 'Укажите торгового агента.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "Пользователь");
		ЕстьОшибки = Истина;
		
	ИначеЕсли флСпискиТТ И СпискиТТ.Количество() = 0 Тогда
		Текст = НСтр("ru = 'Укажите списки торговых точек для отбора в отчете.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "СпискиТТ");
		ЕстьОшибки = Истина;
		
	ИначеЕсли флОтветственный И НЕ ЗначениеЗаполнено(Ответственный)  Тогда
		Текст = НСтр("ru = 'Укажите отвественого для отбора в отчете.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "Ответственный");
		ЕстьОшибки = Истина;
		
	ИначеЕсли НЕ (флСпискиТТ ИЛИ флОтветственный) Тогда
		СтррСвойстваСпискаТТ = ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент);
		Если СтррСвойстваСпискаТТ.КодОшибки <> Неопределено Тогда
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррСвойстваСпискаТТ.ТекстОшибки, Неопределено, "Пользователь");
			ЕстьОшибки = Истина;
		Иначе
			ЗаполнитьЗначенияСвойств(СтррКонтекст, СтррСвойстваСпискаТТ, "СсылкаСписокТТ, НаименованиеСписокТТ, ИспользуетсяДляПланированияСписокТТ");
		КонецЕсли;
		
	Иначе
		//Ошибок нет.
		
	КонецЕсли; 
	
	Если ВидыДокументов.Количество() = 0 Тогда
		Текст = НСтр("ru = 'Укажите виды документов для отбора в отчете.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Неопределено, "ВидыДокументов");
		ЕстьОшибки = Истина;
	КонецЕсли;	
	
	Если ЕстьОшибки Тогда
		//@skip-check form-self-reference
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.ТДОтчет, "НеАктуальность");
		//@skip-check form-self-reference
		ЭтаФорма.Элементы.ТДОтчет.ОтображениеСостояния.Текст = НСтр("ru = 'Ошибка в параметрах отчета.'");
		//@skip-check form-self-reference
		ЭтаФорма.Элементы.ТДОтчет.Доступность = Ложь;
		Возврат;
	КонецЕсли; 
	
	// Формирование отчета. В реквизите СтррКонтекст.СсылкаСписокТТ указан идентификатор проверенного списка торговых точек агента.
	ОтчетСформироватьСервер();
	
	//@skip-check form-self-reference
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ЭтаФорма.Элементы.ТДОтчет, "НеИспользовать");
	Элементы.ТДОтчет.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьПоПартнеру(ТЗн)
	
	Если НЕ флОтветственный И НЕ флСпискиТТ Тогда
		Возврат; //нет отборов
	ИначеЕсли НЕ флОтветственный И флСпискиТТ И СпискиТТ.Количество() < 2 Тогда	
		Возврат; // только отбор по спискам и только по одному списку.	
	КонецЕсли;
	
	ТЗКопия 	= ТЗн.СкопироватьКолонки();
	СтррПоиск 	= Новый Структура("Партнер, Адрес");
	
	Для Каждого стзТЗ ИЗ ТЗн Цикл
		СтррПоиск.Партнер 	= стзТЗ.Партнер;
		СтррПоиск.Адрес 	= стзТЗ.Адрес;
		мПоиск = ТЗКопия.НайтиСтроки(СтррПоиск);
		Если мПоиск.Количество() = 0 Тогда
			стзКопия = ТЗКопия.Добавить();
		Иначе
			стзКопия = мПоиск[0];
		КонецЕсли;
		
		Для Каждого КолонкаТЗ Из ТЗКопия.Колонки Цикл
			ИмяКолонки = КолонкаТЗ.Имя;
			Если ТипЗнч(стзТЗ[ИмяКолонки]) = Тип("Число") Тогда
				Если стзТЗ[ИмяКолонки] > стзКопия[ИмяКолонки] Тогда
			    	стзКопия[ИмяКолонки] = стзТЗ[ИмяКолонки];
				КонецЕсли;
			ИначеЕсли НЕ ЗначениеЗаполнено(стзКопия[ИмяКолонки]) Тогда
				стзКопия[ИмяКолонки] = стзТЗ[ИмяКолонки];	
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	ТЗн = ТЗКопия;
	
КонецПроцедуры    

&НаСервере
Процедура ОтчетСформироватьСервер()

	СтррПараметры = Новый Структура;
	СтррПараметры.Вставить("Агент", Агент);
	СтррПараметры.Вставить("Период", ПериодОтчета);
	
	Если флСпискиТТ Тогда 
		МСсылкаСписокТТ = Новый Массив;
		Для Каждого Элемент Из СпискиТТ Цикл
			МСсылкаСписокТТ.Добавить(Элемент.Значение);	
		КонецЦикла;
		СтррПараметры.Вставить("СсылкаСписокТТ", МСсылкаСписокТТ);
	Иначе	
		СтррПараметры.Вставить("СсылкаСписокТТ", СтррКонтекст.СсылкаСписокТТ);
	КонецЕсли;
	
	Если флОтветственный Тогда 
		СтррПараметры.Вставить("Ответственный", Ответственный);	
	КонецЕсли;
	
	СтррПараметры.Вставить("ТолькоПроведенныеДокументы", ТолькоПроведенныеДокументы);
	СтррПараметры.Вставить("списокВидыДокументов", ВидыДокументов);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТЗн = ТекОбъект.ПолучитьПланФактПосещений(СтррПараметры);
	
	СгруппироватьПоПартнеру(ТЗн);
		
	ДетализацияПланИлиГрафик = СтррКонтекст.ИспользуетсяДляПланированияСписокТТ;
	
	//////////////////////// 
	// Формирование печатной формы
	
	Макет = ТекОбъект.МакетОбработки("ОтчетПланПосещений");
	
	МЦветаФона = Новый Массив();
	//@skip-check new-color
	МЦветаФона.Добавить(Новый Цвет(255,255,255)); // белый - плановая ТТ
	//@skip-check new-color
	МЦветаФона.Добавить(Новый Цвет(240,240,240)); // серый - плановая ТТ
	//@skip-check new-color
	МЦветаФона.Добавить(Новый Цвет(253,241,165)); // светло-желтый - внеплановая ТТ
	//@skip-check new-color
	МЦветаФона.Добавить(Новый Цвет(244,230,170)); // темно-желтый  - внеплановая ТТ
	//мЦветаФона.Добавить(Новый Цвет(204, 255, 204));	// светло-зеленый - выделенный день
	//мЦветаФона.Добавить(Новый Цвет(160, 255, 160));	// темно-зеленый  - выделенный день
	
	//@skip-check structure-consructor-too-many-keys
	СтррОбластьДней = Новый Структура("Лево,Верх,Право,Низ");
	
#Область ВыводШапкиОтчета
	
	Таб = ТДОтчет;
	
	Таб.Очистить();
	
	Область = Макет.ПолучитьОбласть("Заголовок|Номер");
	ПечПараметры = Область.Параметры;	
	ПечПараметры.ПечПериод = Строка(ПериодОтчета);
	ПечПараметры.ПечАгент  = Строка(Агент);
	Таб.Вывести(Область);	
	
	Таб.НачатьГруппуСтрок("Заголовок", Истина);
	
	Область = Макет.ПолучитьОбласть("ЗаголовокДетали|Номер");
	
	ПечПараметры = Область.Параметры;
	ПечПараметры.ПечВидыДокументов 		 = Строка(ВидыДокументов);
	ПечПараметры.ПечПроведенныеДокументы = ?(ТолькоПроведенныеДокументы, НСтр("ru = 'только проведенные'"), НСтр("ru = 'проведенные и не проведенные'"));
	ПечПараметры.ПечСписокТТ 			 = СтррКонтекст.НаименованиеСписокТТ + ?(ДетализацияПланИлиГрафик, "", " " + НСтр("ru = '(без детализации до графика или плана)'"));
	ПечПараметры.СписокТТ 			 	 = "СписокТТ";
	
	Таб.Вывести(Область);
	
	Таб.Присоединить(Макет.ПолучитьОбласть("ЗаголовокДетали|Клиент"));
	Таб.Присоединить(Макет.ПолучитьОбласть("ЗаголовокДетали|Адрес"));
	
	ВсегоДней = СтррПараметры.ВсегоДней;
	
	СтррОбластьДней.Лево  = Таб.ШиринаТаблицы;
	СтррОбластьДней.Право = СтррОбластьДней.Лево + ВсегоДней;
	
	Область = Макет.ПолучитьОбласть("ЗаголовокДетали|День");
	Для НомерДня = 1 По ВсегоДней Цикл
		Таб.Присоединить(Область);
	КонецЦикла;
	Таб.Присоединить(Макет.ПолучитьОбласть("ЗаголовокДетали|Всего"));
	
	Таб.ЗакончитьГруппуСтрок();
	
	ОбластьШапкиНомер = Макет.ПолучитьОбласть("Шапка|Номер");	
	Таб.Вывести(ОбластьШапкиНомер);
	
	ОбластьШапкиКлиент = Макет.ПолучитьОбласть("Шапка|Клиент");	
	Таб.Присоединить(ОбластьШапкиКлиент);
	
	ОбластьШапкиАдрес = Макет.ПолучитьОбласть("Шапка|Адрес");	
	Таб.Присоединить(ОбластьШапкиАдрес);
	
	МДниНедели = СтрРазделить_(НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС'"), ",");
	ТекДата = ПериодОтчета.ДатаНачала;
	
	ФорматДаты = ?(Месяц(ПериодОтчета.ДатаНачала) <> Месяц(ПериодОтчета.ДатаОкончания) 
					Или Год(ПериодОтчета.ДатаНачала) <> Год(ПериодОтчета.ДатаОкончания),
					"ДФ=""дд.ММ""",	"ДФ=""дд""");

	Для НомерДня = 1 По ВсегоДней Цикл
		
		НомерДняНедели = ДеньНедели(ТекДата);
		ДопОбластьШапки = Макет.ПолучитьОбласть("Шапка|" + ?(ВыделитьДень = ТекДата, "ВыделитьДень", ИмяСекцииДняНедели(НомерДняНедели)));
		ДопОбластьШапки.Параметры.ДеньНед = МДниНедели[НомерДняНедели-1];
		ДопОбластьШапки.Параметры.ДеньМес = Формат(ТекДата, ФорматДаты);
		Таб.Присоединить(ДопОбластьШапки);
		ТекДата = ТекДата + 86400;
		
	КонецЦикла;
	
	ВсегоОбластьШапки = Макет.ПолучитьОбласть("Шапка|Всего");
	Таб.Присоединить(ВсегоОбластьШапки);
	
// ВыводШапкиОтчета
#КонецОбласти 

#Область ВыводТЧОтчета

	СтррОбластьДней.Верх = Таб.ВысотаТаблицы;

	//@skip-check new-color
	ЦветКрасный = Новый Цвет(255, 0, 0);
	//@skip-check new-color
	ЦветСиний   = Новый Цвет(0, 0, 255);

	НомерВнеПлана = стррКонтекст.НомерВнеПлана;
	
	Номер = 0; // Номер строки в таблицы в печатной форме
	
	ТЗИтогиДней = Неопределено;
	ОбновитьИтогиДней(ВсегоДней, ТЗИтогиДней);
	
	СтррИтогСтроки = Новый Структура("План,Факт,ВП");
	СтррДельта     = Новый Структура("План,Факт,ВП");
	
	Для Каждого СтрокаТ Из ТЗн Цикл
		
		#Область ВыводГлавныхКолонок
		/////////////////////////////////////////////////////////////////////////////////

		Номер = Номер + 1; // Номер строки таблицы в печатной форме		
		
		ЦветФона = МЦветаФона[?(СтрокаТ.НомерВПлане = НомерВнеПлана, 2, 0) + Номер % 2];
		ОбластьСтр = Макет.ПолучитьОбласть("Строка|Номер");
		ОбластьСтр.Параметры.Номер = Номер; 
		ОбластьСтр.ТекущаяОбласть.ЦветФона = ЦветФона;
		Таб.Вывести(ОбластьСтр);
				
		ОбластьСтр = Макет.ПолучитьОбласть("Строка|Клиент");		
		ТекПартнер = СтрокаТ.Партнер;
		ОбластьСтр.Параметры.ПечКлиент = ТекПартнер;
		ОбластьСтр.Параметры.ПечКлиентРас  = ТекПартнер; // клиент для расшифровки
		ОбластьСтр.ТекущаяОбласть.ЦветФона = ЦветФона;
		Таб.Присоединить(ОбластьСтр);
		
		ОбластьСтр = Макет.ПолучитьОбласть("Строка|Адрес");
		ОбластьСтр.Параметры.ПечАдрес = СтрокаТ.Адрес;
		ОбластьСтр.ТекущаяОбласть.ЦветФона = ЦветФона;
		Таб.Присоединить(ОбластьСтр);
		
		// ВыводГлавныхКолонок
		#КонецОбласти 

		#Область ВыводКолонокДней
		/////////////////////////////////////////////////////////////////////////////////
		
		СтррИтогСтроки.План = 0; СтррИтогСтроки.Факт = 0; СтррИтогСтроки.ВП = 0;
		
		ТекДата = ПериодОтчета.ДатаНачала;	
		Для НомерДня = 1 По ВсегоДней Цикл
			
			НомерДняНедели = ДеньНедели(ТекДата);
			ОбластьСтр = Макет.ПолучитьОбласть("Строка|" + ИмяСекцииДняНедели(НомерДняНедели));
			ОбластьСтр.ТекущаяОбласть.ЦветФона = ЦветФона;
			План = СтрокаТ["П" + НомерДня]; // число - порядок посещения ТТ (если включен порядок)
			Факт = ЗначениеЗаполнено(СтрокаТ["Д" + НомерДня]); // строка времени - факт создания документа для данной ТТ данным агентом
			
			СтррДельта.План = 0; СтррДельта.Факт = 0; СтррДельта.ВП = 0;
			
			Если План <> 0 Тогда
				СтррДельта.План = 1;
				Если Факт Тогда
					ОбластьСтр.Параметры.ПечРабота = "n"; // выполнено посещение по плану
					ОбластьСтр.Параметры.Док = Новый Структура("День,Партнер", ТекДата, ТекПартнер); // расшифровка для отображения документов
					СтррДельта.Факт = 1;
				Иначе
				    ОбластьСтр.Параметры.ПечРабота = "o"; // не выполнено посещение по плану
					ОбластьСтр.ТекущаяОбласть.ЦветТекста = ЦветКрасный; 
				КонецЕсли; 
			ИначеЕсли Факт Тогда 
				Если ДетализацияПланИлиГрафик Тогда
				    ОбластьСтр.Параметры.ПечРабота = "x"; // посещение вне плана
					ОбластьСтр.ТекущаяОбласть.ЦветТекста = ЦветСиний; 
					ОбластьСтр.Параметры.Док = Новый Структура("День,Партнер", ТекДата, ТекПартнер); // расшифровка для отображения документов
					СтррДельта.ВП = 1;
				Иначе // список ТТ без детализации до графика или плана - все факты считаем выполненными по плану
					Если СтрокаТ.НомерВПлане < НомерВнеПлана Тогда
						ОбластьСтр.Параметры.ПечРабота = "n"; // выполнено посещение по плану
						ОбластьСтр.Параметры.Док = Новый Структура("День,Партнер", ТекДата, ТекПартнер); // расшифровка для отображения документов
						СтррДельта.Факт = 1;
					Иначе
					    ОбластьСтр.Параметры.ПечРабота = "x"; // посещение вне плана
						ОбластьСтр.ТекущаяОбласть.ЦветТекста = ЦветСиний; 
						ОбластьСтр.Параметры.Док = Новый Структура("День,Партнер", ТекДата, ТекПартнер); // расшифровка для отображения документов
						СтррДельта.ВП = 1;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			//Если ВыделитьДень = ТекДата Тогда
			//	ОбластьСтр.ТекущаяОбласть.ЦветФона = мЦветаФона[4 + Номер % 2];
			//КонецЕсли; 
			Таб.Присоединить(ОбластьСтр);
			ОбновитьИтогиДней(НомерДня, ТЗИтогиДней, СтррИтогСтроки, СтррДельта);
			ТекДата = ТекДата + 86400;
			
		КонецЦикла; // Для НомерДня = 1 По ВсегоДней Цикл
		
		СтррОбластьДней.Низ = Таб.ВысотаТаблицы;
		
		// ВыводКолонокДней
		#КонецОбласти

		#Область ВыводИтогаСтрок
		/////////////////////////////////////////////////////////////////////////////////
		
		ОбластьСтр = Макет.ПолучитьОбласть("Строка|Всего");
		ЗаполнитьПараметрыОбласти(ОбластьСтр.Параметры, СтррИтогСтроки);
		ОбластьСтр.Области.ОблВсего.ЦветФона = ЦветФона;
		
		Таб.Присоединить(ОбластьСтр);
		
		// ВыводИтогаСтрок		
		#КонецОбласти 
		
	КонецЦикла; // Для Каждого СтрокаТ Из ТЗ Цикл

	#Область ВыводПодвалаСИтогами
	/////////////////////////////////////////////////////////////////////////////////

	Таб.Вывести(Макет.ПолучитьОбласть("Подвал|Номер"));
	Таб.Присоединить(Макет.ПолучитьОбласть("Подвал|Клиент"));	
	Таб.Присоединить(Макет.ПолучитьОбласть("Подвал|Адрес"));
	
	ТекДата = ПериодОтчета.ДатаНачала;	
	Для НомерДня = 1 По ВсегоДней Цикл
		ОбластьСтр = Макет.ПолучитьОбласть("Подвал|" + ИмяСекцииДняНедели(НомерДняНедели)); //?(ВыделитьДень = ТекДата, "ВыделитьДень", ИмяСекцииДняНедели(НомерДняНедели)));		
		ЗаполнитьПараметрыОбласти(ОбластьСтр.Параметры, ТЗИтогиДней[НомерДня]);
		Таб.Присоединить(ОбластьСтр);
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
	ВсегоОбластьИтогов = Макет.ПолучитьОбласть("Подвал|Всего");
	ЗаполнитьПараметрыОбласти(ВсегоОбластьИтогов.Параметры, ПолучитьОбщийИтог(ТЗИтогиДней));
	Таб.Присоединить(ВсегоОбластьИтогов);

	// ВыводПодвалаСИтогами
	#КонецОбласти 
	
// ВыводТЧОтчета
#КонецОбласти 

	Таб.ФиксацияСверху = 6;	
	Таб.ФиксацияСлева  = 2;
	
	СтррКонтекст.ОбластьДней = СтррОбластьДней;

КонецПроцедуры // ОтчетСформироватьСервер()

// Функция обновляет итоги отчета в параметрах ТЗн (итоги по дням) и СтррИтогиСтроки (итог строки).
&НаСервере
Процедура ОбновитьИтогиДней(НомерДня, ТЗн, СтррИтогиСтроки = Неопределено, СтррДельта  = Неопределено)
	
	Если ТЗн = Неопределено Тогда // в этом случае в параметере НомерДня передается максимальный номер дня - инициализируем таблицу итогов
		
		ТипЧисло  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0));
		ТЗн = Новый ТаблицаЗначений;
		ТЗн.Колонки.Добавить("План", ТипЧисло);
		ТЗн.Колонки.Добавить("Факт", ТипЧисло);
		ТЗн.Колонки.Добавить("ВП", ТипЧисло);
		Для Индекс = 0 По НомерДня Цикл
			ТЗн.Добавить();
		КонецЦикла; 
		
	Иначе
		
		СтррИтогиСтроки.План = СтррИтогиСтроки.План + СтррДельта.План;
		СтррИтогиСтроки.Факт = СтррИтогиСтроки.Факт + СтррДельта.Факт;
		СтррИтогиСтроки.ВП   = СтррИтогиСтроки.ВП   + СтррДельта.ВП;
		
		СтрокаТ = ТЗн[НомерДня];
		СтрокаТ.План = СтрокаТ.План + СтррДельта.План;
		СтрокаТ.Факт = СтрокаТ.Факт + СтррДельта.Факт;
		СтрокаТ.ВП   = СтрокаТ.ВП   + СтррДельта.ВП;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьПараметрыОбласти(ПапаметрыОбласти, СтррЗначения)
	
	ЗаполнитьЗначенияСвойств(ПапаметрыОбласти, СтррЗначения);
	ПапаметрыОбласти.Выполнение = ?(СтррЗначения.План = 0, "", Окр(СтррЗначения.Факт * 100 / СтррЗначения.План, 2));
	
КонецПроцедуры

// Функция возвращает общий итог для отчета (выводится в правом-нижнем углу отчета).
// Параметры:
// 		ТЗн - ТаблицаЗначений - таблица итогов по дням, подготовленная процедурой ОбновитьИтогиДней().
// 		
// Возвращаемое значение:
//   Структура   - структура с итоговыми значениями плана
//
&НаСервере 
Функция ПолучитьОбщийИтог(ТЗн)
	
	СтррРезультат = Новый Структура;
	Для Каждого Колонка Из ТЗн.Колонки Цикл
		СтррРезультат.Вставить(Колонка.Имя, ТЗн.Итог(Колонка.Имя));
	КонецЦикла; 
	
	Возврат СтррРезультат;
	
КонецФункции

&НаСервере 
Функция ПолучитьСписокДокументовДляРасшифовки(СтррРасшифровка)
	
	СтррПараметры = Новый Структура;
	СтррПараметры.Вставить("Агент", Агент);
	СтррПараметры.Вставить("Дата", СтррРасшифровка.День);
	СтррПараметры.Вставить("ТолькоПроведенныеДокументы", ТолькоПроведенныеДокументы);
	СтррПараметры.Вставить("списокВидыДокументов", ВидыДокументов);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТЗн = ТекОбъект.ПолучитьФактПосещенийДляОтчета(СтррПараметры);
	
	Партнер = СтррРасшифровка.Партнер;
	
	ЕстьВиртуальныеДокументы = ТЗн.Колонки.Найти("СсылкаВДок") <> Неопределено;
	
	Список = Новый СписокЗначений;
	
	Для Каждого СтрокаТ Из ТЗн Цикл
		Если СтрокаТ.Партнер = Партнер Тогда
			Если ЕстьВиртуальныеДокументы И ЗначениеЗаполнено(СтрокаТ.СсылкаВДок) Тогда // виртуальный документ
				стррДокумент 	= СтрокаТ.СсылкаВДок;
				тзЖурнала 		= ТекОбъект.ВОТЗЗагрузить(стррДокумент.ВидДокумента, Истина); // ТЗ загружается из кэша
				стзЖурнала 		= тзЖурнала.Найти(стррДокумент.ID, "ID");
				Представление 	= ТекОбъект.ВДокПредставление(стррДокумент.ВидДокумента, стзЖурнала);
				Список.Добавить(стррДокумент, Представление);
			Иначе // обычный документ
				Список.Добавить(СтрокаТ.Ссылка);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Список;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСекцииДняНедели(НомерДняНедели)
	Если НомерДняНедели = 6 Тогда
		Возврат "Субб";
	ИначеЕсли НомерДняНедели = 7 Тогда
		Возврат "Воскр";
	Иначе
		Возврат "День";
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВнешнийВызовСформироватьОтчет(СтррПараметры) Экспорт
	
	ПериодОтчета 	= СтррПараметры.Период;
	Агент      		= СтррПараметры.Агент;
	ВидыДокументов 	= СтррПараметры.СписокВидыДокументов.Скопировать();
	ТолькоПроведенныеДокументы = СтррПараметры.ТолькоПроведенныеДокументы;
	ВыделитьДень	= СтррПараметры.ВыделитьДень;
	
	ОтчетСформироватьКлиент();
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ФормированиеОтчета
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ИнтерактивностьОтчета

&НаКлиенте
Процедура ПоказатьМаршрутНаДату(Дата)
	
	//стррРасшифровка = Элементы.ТДОтчет.ТекущаяОбласть.Расшифровка;
	Период = Новый СтандартныйПериод(НачалоДня(Дата), КонецДня(Дата));
	//@skip-check structure-consructor-too-many-keys
	СтррПараметры = Новый Структура("Агент,Период,СписокВидыДокументов,ТолькоПроведенныеДокументы", 
		Агент, Период, ВидыДокументов, ТолькоПроведенныеДокументы);
	Форма = МодульК().ОткрытьФормуОбработки("ОтчетКонтрольПередвиженийАгентов");
	Форма.ВнешнийВызовПоказатьТрек(СтррПараметры)
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПартнеровПоРасшифровке()
	
	ТекОбласть = Элементы.ТДОтчет.ТекущаяОбласть;
	Если ТекОбласть.Верх = ТекОбласть.Низ Тогда // выделена одна ячейка партнера
		МПартнеры = Новый Массив;
		МПартнеры.Добавить(ТекОбласть.Расшифровка);
	Иначе // выделено несколько ячеек с партнерами
		МПартнеры = ПолучитьРасшифрокиОбласти(ТекОбласть.Верх, ТекОбласть.Низ, ТекОбласть.Лево, Тип("СправочникСсылка.Партнеры"));
	КонецЕсли; 
	Форма = МодульК().ОткрытьФормуОбработки("РедакторМеток");
	Форма.ВнешнийВызовДобавитьИПоказатьПартнеров(МПартнеры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифрокиОбласти(НачНомерСтроки, КонНомерСтроки, НомерКолонки, ТипЗначенияРасшифвроки)
	
	МЗначения = Новый Массив;
	Для СтрокаОтчета = НачНомерСтроки По КонНомерСтроки Цикл
		Область = ТДОтчет.ПолучитьОбласть(СтрокаОтчета, НомерКолонки, СтрокаОтчета, НомерКолонки);
		Расшифровка = Область.ТекущаяОбласть.Расшифровка;
		Если ТипЗнч(Расшифровка) = ТипЗначенияРасшифвроки Тогда
			МЗначения.Добавить(Расшифровка);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат МЗначения;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ИнтерактивностьОтчета
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Хранилище

&НаСервере
Процедура ПрочестьСпискиТТ()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	// проверяем - записывались ли вообще списки ТТ
	ТЗСТТ = ТекОбъект.ПрочитатьЗначениеНастройки("СпискиТорговыхТочек");
	Если ТипЗнч(ТЗСТТ) <> Тип("ТаблицаЗначений") Тогда
		Возврат; //Пустой список			
	Иначе
		Для Каждого Элемент Из ТЗСТТ Цикл
			СтррКонтекст.СпискиТТ.Добавить(Элемент.ID, Элемент.Наименование);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Обработчики

&НаКлиенте
Процедура ПользовательВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Пользователи") Тогда
		Агент = Результат;
		ОтчетВыключитьАктуальность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаРасшифровкиИзСписка(Результат, Элемент) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
			СтррДокумент = Результат.Значение;
			МодульК().ВООткрытьФорму(СтррДокумент);
		Иначе	
			ПоказатьЗначение(Неопределено, Результат.Значение);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_Обработчики
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции 

&НаКлиенте
Процедура ОповещениеОтметкиСпискаВидовДокументов(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолучатель = ВидыДокументов;
	СписокПолучатель.Очистить();
	
	Для Каждого Элемент из Список Цикл
		Если Элемент.Пометка Тогда					
			СписокПолучатель.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	ОтчетВыключитьАктуальность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтметкиСпискаСпискиТТ(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолучатель = СпискиТТ;
	СписокПолучатель.Очистить();
	
	Для Каждого Элемент из Список Цикл
		Если Элемент.Пометка Тогда					
			СписокПолучатель.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	ОтчетВыключитьАктуальность();
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти
