#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтррКонтекст = Новый Структура("ЗначениеБезТочности,РегионГеокодера");
	
	СтррКонтекст.ЗначениеБезТочности = 99; // чтобы при интерактивной "сортировке по точности" таблицы координат, координаты без точности были в конце
	СтррКонтекст.РегионГеокодера = "";
	// Константа определения максимально допустимого расстояния между местом создания документа и торговой точкой. Будет инициализирована, как только потребуется
	СтррКонтекст.Вставить("МаксимальноеРасстояниеОтТТ", Неопределено); 

КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//       т.е. для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив Из Строка - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	//@skip-check use-non-recommended-method
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		//@skip-check use-non-recommended-method
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив Из Строка - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//  СокращатьПробелы - Булево - убирать ведущие и финальные пробелы в элементах массива
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
&НаКлиентеНаСервереБезКонтекста
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьПробелы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьПробелы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ПрочестьНастройкиИзХранилища()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	// Константа определения максимально допустимого расстояния между местом создания документа и торговой точкой
	СтррКонтекст.МаксимальноеРасстояниеОтТТ = ТекОбъект.ПрочитатьЗначениеНастройки("МаксимальноеРасстояниеОтТТ"); 
	
КонецПроцедуры
	
// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_КонверсияЗначений

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьСтрокуВУТФ8(Стр)

	Длина = СтрДлина(Стр);
	Результат = "";
	
	Для Н = 1 По Длина Цикл
		Знак = Сред(Стр, Н, 1);
		Код = КодСимвола(Знак);
		Если Код = 32 Тогда
			Результат = Результат + СимволВ16(Знак);
		ИначеЕсли Код < 128 Тогда
			Результат = Результат + Знак;
		Иначе
			Если (Код >= КодСимвола("А")) И (Код <= КодСимвола("п")) Тогда
				Результат = Результат + СимволВ16(Символ(208)) + СимволВ16(Символ(144 + Код - КодСимвола("А")));
			ИначеЕсли (Код >= КодСимвола("р")) И (Код <= КодСимвола("я")) Тогда
				Результат = Результат + СимволВ16(Символ(209)) + СимволВ16(Символ(128 + Код - КодСимвола("р")));
			ИначеЕсли (Знак = "ё") Тогда
				Результат = Результат + СимволВ16(Символ(209)) + СимволВ16(Символ(145));
			ИначеЕсли (Знак = "Ё") Тогда
				Результат = Результат + СимволВ16(Символ(208)) + СимволВ16(Символ(129));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СимволВ16(Символ)
	Возврат "%" + ПереводЧислаВСистемуСчисления16(КодСимвола(Символ));
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПереводЧислаВСистемуСчисления16(Знач Значение)

	Значение = Цел(Значение);
	Результат = "";
	Пока Значение > 0 Цикл
		Результат = Сред("0123456789ABCDEF", Значение % 16 + 1, 1) + Результат;
		Значение = Цел(Значение / 16);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВСтроку(Число) 
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(Число), " ", ""), ",", ".");
	
КонецФункции

// Конвертирует переданные координаты из формата WGS84 в формат NMEA. 
// Параметры:
//   CтрКоординаты - Строка - строка с координатами вида "<Долгота> <Широта>" (в такой последовательности координаты возвращает geocoder Yandex)
//  Возвращаемое значение:
//   Строка - строка из координат, разделенных пробелом в формате "<Широта> <Долгота>"
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьWGS84NMEA(CтрКоординаты)

	Результат = "";
	
	//@skip-check use-non-recommended-method
	Индекс = Найти(CтрКоординаты, " ");
	Если Индекс <> 0 Тогда
		ДолготаWGS84 = Число(Лев(CтрКоординаты, Индекс-1));
		ШиротаWGS84  = Число(Сред(CтрКоординаты, Индекс+1));
		Долгота = КоординатаИзWGS84вNMEA(ДолготаWGS84);
		Широта 	= КоординатаИзWGS84вNMEA(ШиротаWGS84);
		Результат = СтрЗаменить(Строка(Широта), " ", "") + " " + СтрЗаменить(Строка(Долгота), " ", "");		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоординатаИзWGS84вNMEA(Координата)
	
	Возврат Цел(Координата)*100 + (Координата-Цел(Координата)) * 60;
	
КонецФункции

// Конвертирует переданные координаты из формата NMEA  в формат WGS84. 
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

// Возвращает строку-представление координат в читабельном для пользователя виде.
// Координаты передаются в формате NMEA.
&НаКлиентеНаСервереБезКонтекста
Функция NMEAвСтроку(Коор)
	
	Часы = Цел(Коор / 100);
	Минуты = Цел(Коор - 100*Часы);
	Секунды = Окр((Коор - Цел(Коор))*60, 2);
	ЧСтр = Строка(Часы);
	МСтр = Формат(Минуты, "ЧЦ=2;ЧВН=;ЧН=");
	ССтр = Формат(Секунды, "ЧЦ=4;ЧДЦ=2;ЧРД=.;ЧВН=;ЧН=");
	
	Возврат ЧСтр + "°" + МСтр + "'" + ССтр + """";
	
КонецФункции

// Функция конвертирует координаты из NMEA в WGS84 и возвращает их строковое представление.
// Параметры:
// 	 Широта - Число
//   Долгота - Число
// Возвращаемое значение:
//   Строка
&НаКлиенте
Функция ПредставлениеКоординатWGS84(Широта, Долгота) Экспорт
	
	Если Широта = 0 И Долгота = 0 Тогда
		Возврат "Координаты не указаны.";	
	Иначе
		Возврат "Широта: " + NMEAвСтроку(Широта) + "; Долгота: " + NMEAвСтроку(Долгота);	
	КонецЕсли;                     

КонецФункции 

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	СтрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			СтрЧисло = СтрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			СтрЧисло = СтрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(СтрЧисло), 0, Число(СтрЧисло));

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВЧисло(Значение)
	
	Возврат ?(ЗначениеЗаполнено(Значение), СтрокуВЧисло(Значение), 0);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПочтовыйИндекс(ПочтовыйИндекс)
	
	Если Не СтрДлина(ПочтовыйИндекс) = 6 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Цифры = "0123456789";
	Если СтрокаСодержитТолькоДопустимыеСимволы(ПочтовыйИндекс, Цифры) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы)
	
	ВсеДопустимыеСимволы = Новый Соответствие;
	Для Позиция = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		ВсеДопустимыеСимволы[Сред(ДопустимыеСимволы, Позиция, 1)] = Истина;
	КонецЦикла;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Если ВсеДопустимыеСимволы[Сред(Строка, Позиция, 1)] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// СлужебныеПроцедурыИФункции_КонверсияЗначений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Прочие

&НаСервере
Функция ПолучитьТекстМакетаКарты(ИдентификаторКарты)
	
	Результат = "";	
	
	Если ЗначениеЗаполнено(ИдентификаторКарты) Тогда
		Макет = РеквизитФормыВЗначение("Объект").МакетОбработки("Карта" + ИдентификаторКарты);
		Если Макет <> Неопределено Тогда
			Результат = Макет.ПолучитьТекст();
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет значение центра карты в ХранилищеСистемныхНастроек.
&НаСервере
Процедура СохранитьЦентрКарты(СтррЦентр)
	
	РеквизитФормыВЗначение("Объект").СохранитьЗначениеНастройки("КартаЦентр", СтррЦентр);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong)
	//Pi = 3.1415926535897932;

 // Передаваемые широта/долгота в градусах и сотых долях 
 //StartLat: double; // Начальная широта 
 //StartLong: double; // Начальная долгота 
 //EndLat: double; // Конечная широта 
 //EndLong: double; // Конечная долгота 

 //// Переменные, используемые для вычисления смещения и расстояния 
 //fPhimean: Double; // Средняя широта 
 //fdLambda: Double; // Разница между двумя значениями долготы 
 //fdPhi: Double; // Разница между двумя значениями широты 
 //fAlpha: Double; // Смещение 
 //fRho: Double; // Меридианский радиус кривизны 
 //fNu: Double; // Поперечный радиус кривизны 
 //fR: Double; // Радиус сферы Земли 
 //fz: Double; // Угловое расстояние от центра сфероида 
 //fTemp: Double; // Временная переменная, использующаяся в вычислениях 
 //Distance: Double; // Вычисленное расстояния в метрах 
 //Bearing: Double; // Вычисленное от и до смещение 

	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	КонецЕсли;
 
	 // Константы, используемые для вычисления смещения и расстояния 
	 D2R = 0.017453; // Константа для преобразования градусов в радианы 
	 //R2D = 57.295781; // Константа для преобразования радиан в градусы 
	 ValA = 6378137.0; // Основные полуоси 
	 //ValB = 6356752.314245; // Неосновные полуоси 
	 VaLE2 = 0.006739496742337; // Квадрат эксцентричности эллипсоида 
	 //ValF = 0.003352810664747; // Выравнивание эллипсоида 

	 ValFdLambda = (StartLong - EndLong) * D2R; 
	 ValFdPhi = (StartLat - EndLat) * D2R; 
	 ValFPhimean = ((StartLat + EndLat) / 2.0) * D2R; 

	 // Вычисляем меридианные и поперечные радиусы кривизны средней широты 
	 ValFTemp = 1 - VaLE2 * (Pow(Sin(ValFPhimean), 2)); 
	 ValFRho = (ValA * (1 - VaLE2)) / Pow(ValFTemp, 1.5); 
	 ValFNu = ValA / (Sqrt(1 - VaLE2 * (Sin(ValFPhimean) * Sin(ValFPhimean)))); 

	 // Вычисляем угловое расстояние 
	 ValFz = Sqrt(Pow(Sin(ValFdPhi / 2.0), 2) + Cos(EndLat * D2R) * Cos(StartLat * D2R) * Pow(Sin(ValFdLambda / 2.0), 2)); 

	 ValFz = 2 * ASin(ValFz); 

	 // Вычисляем смещение 
	 ValFAlpha = Cos(EndLat * D2R) * Sin(ValFdLambda) * 1 / Sin(ValFz);
	 
	Если ValFAlpha > 1 Тогда
		ValFAlpha = 1;
	ИначеЕсли ValFAlpha < -1 Тогда
		ValFAlpha = -1;
	КонецЕсли;
	
	 ValFAlpha = ASin(ValFAlpha); 

	 // Вычисляем радиус Земли 
	 ValFR = (ValFRho * ValFNu) / ((ValFRho * Pow(Sin(ValFAlpha), 2)) + (ValFNu * Pow(Cos(ValFAlpha), 2))); 

	 // Получаем смещение и расстояние 
	 Distance = (ValFz * ValFR); 
	 
	Возврат Distance;
	
КонецФункции

// Выполняет обращение к сервису геокодирования и разбирает ответ
//
// Параметры:
//  Адрес - Строка - адрес, для которого нужно определить координаты.
//  ВернутьОдинАдрес - Булево - Если Истина, если нужно вернуть только один адрес.
// Возвращаемое значение:
//  Произвольный - Структура или СписокЗначенмй - координаты и адрес, для которого были определены координаты
//  Неопределено - координаты и адрес не определены
//@skip-check export-method-in-command-form-module
&НаСервереБезКонтекста
Функция ПолучитьКоординатыОтВебСервиса(Знач Адрес, ВернутьОдинАдрес) Экспорт
	
	Ответ = ВыполнитьЗапросКВебСервисуOSM(Адрес, ВернутьОдинАдрес);	
	Возврат Ответ;   
	
КонецФункции

// Функция возвращает строку адреса по переданным координатам.
// Параметры:
//   СтррКоординаты - Структура - структура со свойствами Широта и Долгота
// 	 КонвертироватьИзNMEA - Булево - координаты в строктуре переданы в формате NMEA, иначе - в формате WGS84
// 	 ВернутьТочныйАдрес - Булево - Если Истина - возвращать точный адрес, иначе - возвращать только название локации (населенного пункта).
// Возвращаемое значение: 
//   Строка - адрес
&НаКлиенте // НаСервереБезКонтекста
Функция ПолучитьАдресПоКоординатамОтВебСервиса(СтррКоординаты, КонвертироватьИзNMEA = Ложь, ВернутьТочныйАдрес = Ложь) Экспорт

	СтрШирота  = ?(КонвертироватьИзNMEA, ЧислоВСтроку(КонвертироватьNMEAWGS84(СтррКоординаты.Широта)),  ЧислоВСтроку(СтррКоординаты.Широта));
	СтрДолгота = ?(КонвертироватьИзNMEA, ЧислоВСтроку(КонвертироватьNMEAWGS84(СтррКоординаты.Долгота)), ЧислоВСтроку(СтррКоординаты.Долгота));
	
	ВебЗапрос  = "1.x/?geocode=" + СтрДолгота + "," + СтрШирота + ?(ВернутьТочныйАдрес, "", "&kind=locality");
	ОтветСервера = ВыполнитьЗапросКВебСервису(, ВебЗапрос);
		
	Если ОтветСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// для ускорения циклов
	//@skip-check undefined-variable
	//@skip-check unknown-method-property
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	
	//Разбор XML ответа
	//@skip-check type-not-defined
	ЧтениеОтвета = Новый ЧтениеXML;
	//@skip-check unknown-method-property
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);
	
	Результат = Неопределено;
	
	ИскатьЗначение = ?(ВернутьТочныйАдрес, "addressline", "text");

	//Чтение XML строки
	//@skip-check unknown-method-property
	Пока ЧтениеОтвета.Прочитать() Цикл
		ИмяПараметра = ЧтениеОтвета.Имя;
		ТипУзла = ЧтениеОтвета.ТипУзла;
		Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если НРег(ИмяПараметра) = ИскатьЗначение Тогда
			ЧтениеОтвета.Прочитать();
			Результат = СокрЛП(ЧтениеОтвета.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//@skip-check unknown-method-property
	ЧтениеОтвета.Закрыть();
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте // НаКлиентеНаСервереБезКонтекста
Функция РасстояниеМеждуТочкамиNMEA(Широта1, Долгота1, Широта2, Долгота2) Экспорт
	
	Шрт1 = КонвертироватьNMEAWGS84(Широта1);
	Шрт2 = КонвертироватьNMEAWGS84(Широта2);
	Длг1 = КонвертироватьNMEAWGS84(Долгота1);
	Длг2 = КонвертироватьNMEAWGS84(Долгота2);
	
	Возврат РасстояниеМеждуТочками(Шрт1, Длг1, Шрт2, Длг2);
	
КонецФункции

// Возвращает координаты пользователя по данным его IP-адреса.
// Возвращаемое значение:
//   Произвольный - Неопрседелено или Структура:
// 	   * Широта - Число
//     * Долгота - Число
//     * Город - Строка
//     * Регион - Строка
&НаКлиенте
Функция ПолучитьКоординатыПользователя() Экспорт
	
	СтррРезультат = Неопределено;	
	СтррОтвет = ВыполнитьЗапросКВебСервису("api.sypexgeo.net", "", Истина);
	
	Если ТипЗнч(СтррОтвет) = Тип("Структура") И СтррОтвет.Свойство("city") Тогда
		Если ТипЗнч(СтррОтвет.city) = Тип("Структура") И СтррОтвет.city.Свойство("lat") И СтррОтвет.city.Свойство("lon") Тогда
			//@skip-check structure-consructor-too-many-keys
			СтррРезультат = Новый Структура("Широта,Долгота,Город,Регион", 
			  		КоординатаИзWGS84вNMEA(СтррОтвет.city.lat),
					КоординатаИзWGS84вNMEA(СтррОтвет.city.lon)
				);
			СтррОтвет.city.Свойство("name_ru", СтррРезультат.Город);
			Если СтррОтвет.Свойство("region") Тогда
				СтррОтвет.region.Свойство("name_ru", СтррРезультат.Регион);
			КонецЕсли
		КонецЕсли
	КонецЕсли; 
	
	Возврат СтррРезультат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокДоступныхКарт(Список) Экспорт
	Список.Очистить();
	Список.Добавить("OSM", "Open street maps");
	Список.Добавить("YandexMaps", "Yandex-карты");
КонецПроцедуры

// Возвращаемое значение:
//   Строка
&НаКлиентеНаСервереБезКонтекста
Функция ВыполнитьЗапросКВебСервису(Знач Url = Неопределено, ВебЗапрос, ВернутьJSONСтруктуру = Ложь)
	
	Если Url = Неопределено Тогда
		Url = "geocode-maps.yandex.ru";
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(Url, , , , , , Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос(ВебЗапрос);	
	
	Попытка 
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
		
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		//Отказ сервера при определении координат
		Возврат Неопределено;
	КонецЕсли;

	Если Не ВернутьJSONСтруктуру Тогда
		Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
	Иначе
		Возврат ПреобразоватьСтрокуВJSON(HTTPОтвет.ПолучитьТелоКакСтроку());
	КонецЕсли; 

КонецФункции

// Перенос (чтение) данных из строки JSON в структуру.
&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВJSON(Строка)
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	//@skip-check empty-except-statement
	Попытка
		ЧтениеJSON.УстановитьСтроку(Строка);
		ПромРезультат = ПрочитатьJSON(ЧтениеJSON);
		Если ТипЗнч(ПромРезультат) <> Тип("Структура") И ПромРезультат <> Неопределено Тогда
			Результат = Новый Структура("JSON", ПромРезультат);
		Иначе
			Результат = ПромРезультат;
		КонецЕсли;
		ЧтениеJSON.Закрыть();
	Исключение
	КонецПопытки;
	
	Возврат Результат;    
	
КонецФункции

// Возвращает название города и региона пользователя по данным его IP-адреса.
// Возвращаемое значение:
//   Структура:
// 	   * city_ru - Строка - название населённого пункта на русском
// 	   * city_en - Строка - название населённого пункта на английском
// 	   * region_ru - Строка - название региона на русском
// 	   * region_en - Строка - название региона на английском
// 	   * country_ru - Строка - название страны на русском
// 	   * country_en - Строка - название страны на английском
//     * error - Строка - описание ошибки, если не удалось определеить местоположение.
&НаКлиенте
Функция МестоположениеПользователяПолучить() Экспорт
	
	CтррОтвет = ВыполнитьЗапросКВебСервису("api.sypexgeo.net", "", Истина);
	
	СтррРезультат = Новый Структура;	
	
	Если ТипЗнч(CтррОтвет) = Тип("Структура") Тогда
		
		Если CтррОтвет.Свойство("city") И ЗначениеЗаполнено(CтррОтвет.city) Тогда
			СтррРезультат.Вставить("city_ru", CтррОтвет.city.name_ru);
			СтррРезультат.Вставить("city_en", CтррОтвет.city.name_en);
		КонецЕсли; 
		
		Если CтррОтвет.Свойство("country") И ЗначениеЗаполнено(CтррОтвет.country) Тогда
			СтррРезультат.Вставить("country_ru", CтррОтвет.country.name_ru); 
			СтррРезультат.Вставить("country_en", CтррОтвет.country.name_en);
		КонецЕсли; 
		
		Если CтррОтвет.Свойство("region") И ЗначениеЗаполнено(CтррОтвет.region) Тогда
			СтррРезультат.Вставить("region_ru", CтррОтвет.region.name_ru); 
			СтррРезультат.Вставить("region_en", CтррОтвет.region.name_en);
		КонецЕсли; 
		
		Если CтррОтвет.Свойство("error") И ЗначениеЗаполнено(CтррОтвет.error) Тогда
		    СтррРезультат.Вставить("error", CтррОтвет.error); 
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если СтррРезультат.Количество() = 0 Тогда
		СтррРезультат.Вставить("error", "Ошибка определения местоположения."); 
	Иначе
		МестоположениеПользователяСкорректироватьНазвания(СтррРезультат);
	КонецЕсли; 
	
	//@skip-check constructor-function-return-section
	Возврат СтррРезультат;
	
КонецФункции

&НаКлиенте
Процедура МестоположениеПользователяСкорректироватьНазвания(СтррМестоположение) 
	
	Для Каждого Элемент Из СтррМестоположение Цикл
		Ключ = Элемент.Ключ;
		Если Прав(Ключ, 3) = "_ru" Тогда
			Значение = Элемент.Значение;
			//@skip-check use-non-recommended-method
			Если Найти(Значение, "ь") <> 0 Или Найти(Значение, "ъ") <> 0 Или Найти(Значение, "й") <> 0 Тогда
				КлючАнгл = Лев(Ключ, СтрДлина(Ключ) - 3) + "_en";
				Name = СтрЗаменить(СтррМестоположение[КлючАнгл], "'", "");
				СтррМестоположение[КлючАнгл] = Name;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Функция возвращает код страны местоположения пользователя.
// Параметры:
//    СтррМестоположение - Структура
// Возвращаемое значение:
//   Строка - код страны:
//	   "RU" - Россия
//	   "UA" - Украина
&НаКлиенте
Функция КодСтраныМестоположения(Знач СтррМестоположение = Неопределено) Экспорт

	Результат = "RU";	
	
	Если ТипЗнч(СтррМестоположение) <> Тип("Структура") Тогда	
		СтррМестоположение = МестоположениеПользователяПолучить();
	КонецЕсли; 
	
	Если Не СтррМестоположение.Свойство("error") Тогда
		СтранаКод = Лев(СокрЛП(НРег(СтррМестоположение.country_ru)), 3) + Лев(СокрЛП(НРег(СтррМестоположение.country_en)), 3);
		//@skip-check use-non-recommended-method
		Если Найти(СтранаКод, "укр") <> 0 Или Найти(СтранаКод, "ukr") <> 0 Тогда 
			Результат = "UA";
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции


// Функция возвращает город местоположения пользователя.
// Параметры:
//   СтррМестоположение - Произвольный - Структура или Неопределено
// Возвращаемое значение:
//   Строка 
&НаКлиенте
Функция ГородМестоположения(Знач СтррМестоположение = Неопределено) Экспорт

	Результат = "";	
	
	Если ТипЗнч(СтррМестоположение) <> Тип("Структура") Тогда	
		СтррМестоположение = МестоположениеПользователяПолучить();
	КонецЕсли; 
	
	Если ТипЗнч(СтррМестоположение) = Тип("Структура") И Не СтррМестоположение.Свойство("error") Тогда
		Результат = СтррМестоположение.city_ru;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

//  Выполняет запрос к веб сервису геокодирования OSM Nominatim
//
// Параметры:
//  Адрес			 - Строка	 - адрес, для которого нужно определить координаты
//  ВернутьОдинАдрес - Булево	 - признак возврата одного адреса
// 
// Возвращаемое значение:
//  Произвольный - Структура - /СписокЗначенмй - координаты и адрес, для которого были определены координаты
//  Неопределено - координаты и адрес не определены
//
&НаСервереБезКонтекста
Функция ВыполнитьЗапросКВебСервисуOSM(Знач Адрес, ВернутьОдинАдрес)  
	
	Адрес = СтрЗаменить(Адрес, "№", "");
	Адрес = ВРег(Адрес);
	Адрес = СтрЗаменить(Адрес, " ДОМ ", " ");
	
	МАдрес = СтрРазделить_(Адрес, ",");
	Если Не МАдрес.Количество() = 0 И ЭтоПочтовыйИндекс(МАдрес[0]) Тогда
		МАдрес.Удалить(0);
		Адрес = СокрЛП(СтрСоединить_(МАдрес, ","));	
	КонецЕсли;

	СтрВебЗапрос = "/search?q=" + ПреобразоватьСтрокуВУТФ8(Адрес) + "&format=xml";
	Если ВернутьОдинАдрес Тогда 
		СтрВебЗапрос = СтрВебЗапрос + "&limit=1";
	КонецЕсли;

	ОтветСервера = ВыполнитьЗапросКВебСервису("nominatim.openstreetmap.org", СтрВебЗапрос);
	Если ОтветСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗАдреса = Новый ТаблицаЗначений;
	ТЗАдреса.Колонки.Добавить("Адрес",   Новый ОписаниеТипов("Строка"));
	ТЗАдреса.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Строка"));
	ТЗАдреса.Колонки.Добавить("Широта",	 Новый ОписаниеТипов("Строка"));
	
	БезТочности = 99;
		
	// Разбор XML ответа
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ОтветСервера);

	// Для ускорения циклов
	//@skip-check module-unused-local-variable
	ТипУзлаНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
    Пока ЧтениеОтвета.Прочитать() Цикл
        ТипУзла = ЧтениеОтвета.ТипУзла;
		ИмяПараметра = ЧтениеОтвета.Имя;
        Если ТипУзла <> ТипУзлаНачалоЭлемента Тогда
            Продолжить;
		КонецЕсли;
		
		Если ИмяПараметра = "place" Тогда
			Если ВернутьОдинАдрес И ТЗАдреса.Количество() = 1 Тогда
				Прервать;
			КонецЕсли;
			СТЗАдрес = ТЗАдреса.Добавить();
			Пока ЧтениеОтвета.ПрочитатьАтрибут() Цикл
				ИмяПараметра = ЧтениеОтвета.Имя;
				ТипУзла = ЧтениеОтвета.ТипУзла;	
				Если ИмяПараметра = "display_name" Тогда
					СТЗАдрес.Адрес = СокрЛП(ЧтениеОтвета.Значение);
				ИначеЕсли ИмяПараметра = "lat" Тогда
					СТЗАдрес.Широта = ЧтениеОтвета.Значение;
				ИначеЕсли ИмяПараметра = "lon" Тогда
					СТЗАдрес.Долгота = ЧтениеОтвета.Значение;
				КонецЕсли;
			КонецЦикла
		КонецЕсли;
	КонецЦикла;
     
	ЧтениеОтвета.Закрыть();
	
	Если ТЗАдреса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТЗАдреса.Количество() = 1 Тогда
		СтррОтвет = Новый Структура;
		СтррОтвет.Вставить("Адрес", 	 ТЗАдреса[0].Адрес);
		СтррОтвет.Вставить("Координаты", КонвертироватьWGS84NMEA(СокрЛП(ТЗАдреса[0].Долгота + " " + ТЗАдреса[0].Широта)) + " " + БезТочности);				
		Возврат СтррОтвет; 
	Иначе
		СЗАдреса = Новый СписокЗначений;
		Для Каждого СТЗАдрес Из ТЗАдреса Цикл
			стрКоординаты = КонвертироватьWGS84NMEA(СокрЛП(СТЗАдрес.Долгота + " " + СТЗАдрес.Широта)) + " " + БезТочности;
			СЗАдреса.Добавить(стрКоординаты, СТЗАдрес.Адрес);		
		КонецЦикла;
		Возврат СЗАдреса; 
	КонецЕсли;
	
	//Возврат Неопределено;

КонецФункции

// Процедура устаналвивает регион для приоритета геокодирования.
// Параметры:
//  СтррРегион - Структура - свойства структуры:
// 	  Широта, Долгота - Число - координаты центра региона в формате NMEA
// 	  Ширина, Высота  - Число - (не обязательно) - ширина и высота региона в градусах в формате WGS84. Если не указано, то значения 2x2
&НаКлиенте
Процедура УстановитьРегионГеокодера(СтррРегион) Экспорт

	Если СтррРегион = Неопределено Тогда
		СтррКонтекст.РегионГеокодера = "";
	Иначе
		СтрШирота  = ЧислоВСтроку(Окр(КонвертироватьNMEAWGS84(СтррРегион.Широта), 2)); // координаты центра региона
		СтрДолгота = ЧислоВСтроку(Окр(КонвертироватьNMEAWGS84(СтррРегион.Долгота), 2));
		Если СтррРегион.Свойство("Ширина") И СтррРегион.Свойство("Высота") Тогда // ширина и высота региона, значения в градусах WGS84
			СтрРазмер = ЧислоВСтроку(СтррРегион.Ширина) + "," + ЧислоВСтроку(СтррРегион.Высота);
		Иначе
			СтрРазмер = "2,2";
		КонецЕсли; 
		СтррКонтекст.РегионГеокодера = "&ll=" + СтрДолгота + "," + СтрШирота + "&spn=" + СтрРазмер;
	КонецЕсли; 

КонецПроцедуры

// Проверяет координаты двух точек в параметре и возвращает Истина, если расстояние между точками попадает в радиус
// зоны посещения (радиус зоны посещения берется из СтррКонтекст.МаксимальноеРасстояниеОтТТ).
// Параметры:
//   СтррКоординаты - Структура:
//   * Широта - Число
//   * Долгота - Число
//   * Широта2 - Число
//   * Долгота2 - Число
// Возвращаемое значение:
//   Булево
&НаКлиенте
Функция ЭтоОчноеПосещение(СтррКоординаты) Экспорт
	
	Если СтррКонтекст.МаксимальноеРасстояниеОтТТ = Неопределено Тогда
		ПрочестьНастройкиИзХранилища();
	КонецЕсли;
	
	СтррКоординаты.МаксРасстояние =	СтррКонтекст.МаксимальноеРасстояниеОтТТ;
	СтррКоординаты.Расстояние 	  = Неопределено;
	
	// Координаты места создания документа
	ШиротаДок  = ?(СтррКоординаты.Широта2  = "-", "", СтррКоординаты.Широта2);
	ДолготаДок = ?(СтррКоординаты.Долгота2 = "-", "", СтррКоординаты.Долгота2);
	
	Если ЗначениеЗаполнено(СтррКоординаты.Широта) И ЗначениеЗаполнено(СтррКоординаты.Долгота) И ЗначениеЗаполнено(ШиротаДок) И ЗначениеЗаполнено(ДолготаДок) Тогда
		СтррКоординаты.Расстояние = РасстояниеМеждуТочкамиNMEA(ЗначениеВЧисло(СтррКоординаты.Широта), ЗначениеВЧисло(СтррКоординаты.Долгота), 
											ЗначениеВЧисло(ШиротаДок), ЗначениеВЧисло(ДолготаДок));
		Если СтррКоординаты.МаксРасстояние = 0 Тогда
			Возврат Истина;
		Иначе
			Возврат СтррКоординаты.МаксРасстояние >= СтррКоординаты.Расстояние;
		КонецЕсли; 
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции

// Возвращает строкое представление расстояния между двумя координатами.
// Параметры:
//   Широта1 - Число
//   Долгота1 - Число
//   Широта2 - Число
//   Долгота2 - Число
// Возвращаемое значение:
//   Строка
&НаКлиенте
Функция РасстояниеМеждуТочкамиNMEAКлиентПредставление(Широта1, Долгота1, Широта2, Долгота2) Экспорт
	
	Шрт1 = КонвертироватьNMEAWGS84(Широта1);
	Шрт2 = КонвертироватьNMEAWGS84(Широта2);
	Длг1 = КонвертироватьNMEAWGS84(Долгота1);
	Длг2 = КонвертироватьNMEAWGS84(Долгота2);
	
	Расстояние = Окр(РасстояниеМеждуТочками(Шрт1, Длг1, Шрт2, Длг2));
	
	Если Расстояние > 10000 Тогда
		СтрРасстояние = Строка(Окр(Расстояние / 1000, 0)) + " км";
	Иначе
		СтрРасстояние = Строка(Окр(Расстояние, 0)) + " м";
	КонецЕсли; 
	
	Возврат СтрРасстояние;
	
КонецФункции

// Возвращает текст HTML-скрипта работы с картой.
// Параметры:
//   ИдентификаторКарты - Строка - варианты значения: "GoogleMaps", "OSM", "YandexMaps"
// Возвращаемое значение:
//   Строка
&НаКлиенте
Функция ПолучитьСкриптКарты(ИдентификаторКарты) Экспорт
	Возврат ПолучитьТекстМакетаКарты(ИдентификаторКарты);
КонецФункции

// Сохраняет значение центра карты в ХранилищеСистемныхНастроек.
// Параметры:
//   СтррЦентр - Структура
&НаКлиенте
Процедура СохранитьЦентрКартыКлиент(СтррЦентр) Экспорт
	СохранитьЦентрКарты(СтррЦентр);
КонецПроцедуры

// Проверяем версию и тип платформы на Клиенте
// Возвращаемое значение:
//   Булево - Истина, если WebKit
&НаКлиенте
Функция ИспользоватьWebKit() Экспорт 
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы  	= СистемнаяИнформация.ВерсияПриложения;
	ТипПлатформыКлиент 	= СистемнаяИнформация.ТипПлатформы;
	Если ТипПлатформыКлиент = ТипПлатформы.Windows_x86 Или ТипПлатформыКлиент = ТипПлатформы.Windows_x86_64 Тогда
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.14.0") >= 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина; // Mac OS и Linux
	КонецЕсли;	
	
КонецФункции

// Проверяет тип платформы Mac
// Возвращаемое значение:
//   Булево - Истина, если запуск на клиенте с платформой Mac
&НаКлиенте
Функция ПлатформаMac() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ТипПлатформыКлиент 	= СистемнаяИнформация.ТипПлатформы;
	
	Если ТипПлатформыКлиент = ТипПлатформы.MacOS_x86 Или ТипПлатформыКлиент = ТипПлатформы.MacOS_x86_64 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет в скрипте параметры
//
// Параметры:
//	Скрипт 		 - Строка - текст скрипта
//	СтрПараметры - Строка - параметры
//
&НаКлиенте
Процедура ЗаполнитьПараметрыСкрипта(Скрипт, СтрПараметры) Экспорт
	
	Если ПустаяСтрока(СтрПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	СтрПараметрыСтрокаПоиска = "<div id=""CoordinatesСenter"" style=""display:none""></div>";
	СтрПараметрыСтрокаЗамены = "<div id=""CoordinatesСenter"" style=""display:none"">" + СтрПараметры + "</div>";
	Скрипт = СтрЗаменить(Скрипт, СтрПараметрыСтрокаПоиска, СтрПараметрыСтрокаЗамены); 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти 
