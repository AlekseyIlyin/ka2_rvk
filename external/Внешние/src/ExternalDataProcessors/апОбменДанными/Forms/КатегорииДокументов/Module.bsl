#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульК; // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	СтррКонтекст = Новый Структура("СписокВсеВидыДокументов");	
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	СтррКонтекст.СписокВсеВидыДокументов = ТекОбъект.ПолучитьВсеВидыОбъектовДляМУ("Документ");
	
	ВосстановитьНастройкиСервер();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;	
	
	УстановитьМодифицированостьФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКатегорииДокументов

&НаКлиенте
Процедура КатегорииДокументовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(СтрокаТ.Идентификатор) Тогда
			СтрокаТ.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовЦветНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
	Если СтрокаТ <> Неопределено Тогда
		Цвет = ?(Не ПустаяСтрока(СтрокаТ.Цвет), СтрокаТ.Цвет, "0,0,0");	
		СтррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Цвет", Цвет));
		Оповещение = Новый ОписаниеОповещения("КатегорииДокументовЦветВыборЗавершение", ЭтотОбъект);
		//@skip-check form-self-reference
		МодульК().ОткрытьФормуОбработки("ВыборЦвета", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовСписокДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокДляПометки = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 
	Список = СтрокаТ.СписокДокументов;
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> Список.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиЭлементовСписка", ЭтотОбъект, "СписокВидовДокументов");
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите виды документов'"));

КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовПередУдалением(Элемент, Отказ)

	Отказ = Истина;	
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда // выделено несколько строк
		Текст = СтрШаблон_(НСтр("ru = 'Удалить выбранные категории документов (выбрано: %1) ?'"), 
					Элемент.ВыделенныеСтроки.Количество());
	Иначе // выделена одна строка
		Текст = НСтр("ru = 'Удалить категорию документа?'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("КатегорииДокументовПередУдалениемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСохранитьВсе(Команда)

	УстановитьМодифицированостьФормы(Ложь);
	СохранитьНастройкиСервер();
	Оповестить("АПКатегорииДокументовИзменение", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

&НаСервере
Процедура СохранитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьЗначенияНастроекОбработки(НастройкиФормы());

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы());
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкиФормы()

	Возврат "КатегорииДокументов";
	
КонецФункции // НастройкиФормы()

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Режим;
	Элементы.СохранитьВсе.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции 

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаСохранитьВсе(Неопределено);
		Закрыть();
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовЦветВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
		Если СтрокаТ <> Неопределено Тогда
			СтрокаТ.Цвет = Результат.Цвет;
		КонецЕсли;
		УстановитьМодифицированостьФормы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОтметкиЭлементовСписка(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "СписокВидовДокументов" Тогда
		
		СтрокаТ = Элементы.КатегорииДокументов.ТекущиеДанные;
		Если СтрокаТ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СписокПолучатель = СтрокаТ.СписокДокументов;
		СписокПолучатель.Очистить();
		
		Для Каждого Элемент из Список Цикл
			Если Элемент.Пометка Тогда					
				СписокПолучатель.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла; 
		
	КонецЕсли;
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДокументовПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Массив = Новый Массив(); // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Элементы.КатегорииДокументов.ВыделенныеСтроки);

		ОбъектТЧ = Объект.КатегорииДокументов;	
		Для Каждого ИдСтроки Из Массив Цикл
			ОбъектТЧ.Удалить(ОбъектТЧ.Индекс(ОбъектТЧ.НайтиПоИдентификатору(ИдСтроки)));
		КонецЦикла;
		
		УстановитьМодифицированостьФормы(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти