#Область ОписаниеПеременных

&НаКлиенте
Перем МодульМТ;  // Общий клиентский модуль со спецификой мобильной торговли

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры, "ID");
	ТекОбъект.ВОКонтекстФормыДополнить(СтррКонтекст, "_ВидыЗадач", Ложь);	
	//@skip-check unknown-form-parameter-access
	ПрочестьОбъектИзХранилища(Параметры.ID);
	
	ТекОбъект.ВОПриСозданииФормыЭлемента(ЭтотОбъект);
	
	ТипЗадачиСписок = ТекОбъект.ТипыЗадач();
	ТипЗадачиСтрока = Строка(ТипЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Загружаем общий клиентский модуль "МодульОбщийМТ". В параметре "Параметры" важно передавать структуру с заполненным
	// свойством "ВХОбщиеПараметры" - оно используется для предотвращения повторной загрузки текущей обработки.
	//@skip-check use-non-recommended-method
	//@skip-check form-self-reference
	МодульМТ = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщийМТ", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийМТ"); // в СтррКонтекст есть заполненное свойство "ВХОбщиеПараметры"
	
	ЗаполнитьСписокВыбораТиповЗадач();
	
	ВывестиИнформациюТипаЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Истина;
	ВывестиИнформациюТипаЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипызадачОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипЗадачи = Новый УникальныйИдентификатор(ВыбранноеЗначение);
	Информация = ПолучитьСправкуТипаЗадач();
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	
	ОчиститьСообщения();
	
	Наименование = СокрЛП(Наименование); // для исключения совпадений наименований без крайних пробелов
	
	Если ПустаяСтрока(Наименование) Тогда
		ТекстОшибки = НСтр("ru = '* Заполните поле ""Наименование"".'");
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Наименование");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЗадачи) Тогда
		ТекстОшибки = НСтр("ru = 'Заполните поле ""Тип задачи"".'");
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Тип задачи");
	КонецЕсли;
	
	
	
	Если ПустаяСтрока(ТекстОшибки) Тогда 		
		Если Не ЗначениеЗаполнено(ID) Тогда 
			ID = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		СохранитьОбъектВХранилищеКлиент();
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	Иначе
		Информация = ТекстОшибки;
		//@skip-check new-color
		Элементы.Информация.ЦветТекста = Новый Цвет(255, 0, 0); //Красный
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Обработчики

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаОК(Неопределено);
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Обработчики
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Хранилище

// Процедура считывает объект (список торговых точек) из хранилища значений. 
&НаСервере
Процедура ПрочестьОбъектИзХранилища(КлючID) 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ID = КлючID;
	СтррОбъект = ТекОбъект.ВОЭлементЗагрузить(СтррКонтекст.ВО, ID);
	Если СтррОбъект = Неопределено Тогда // создание нового элемента справочника
		Наименование = НСтр("ru = 'Название нового задания'");
	Иначе
		ТекОбъект.ЗаполнитьРеквизитыОбъектаИзСтруктуры(ЭтотОбъект, СтррОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбъектВХранилищеКлиент()
	
	МодульМТ.ВОПередЗаписьюЭлемента(ЭтотОбъект);
	
	СохранитьОбъектВХранилище();
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Ложь;
	Оповестить("АПЭлементСправочникаЗаписан_" + СтррКонтекст.ВО.ВидОбъекта, ID);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОбъектВХранилище()

	//@skip-check structure-consructor-too-many-keys
	СтррОбъект = Новый Структура("Статус, Наименование, ТипЗадачи, Группа, ВопросАнкеты");
	//@skip-check form-self-reference
	ЗаполнитьЗначенияСвойств(СтррОбъект, ЭтаФорма);
	РеквизитФормыВЗначение("Объект").ВОЭлементСохранить(СтррКонтекст.ВО, ID, СтррОбъект);	
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Процедура ЗаполнитьСписокВыбораТиповЗадач()
	
	Для Каждого Элемент Из ТипЗадачиСписок Цикл
		Элементы.ТипЗадачиПредставление.СписокВыбора.Добавить(Строка(Элемент.Значение), Элемент.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюТипаЗадач() 	
	//@skip-check new-color
	Элементы.Информация.ЦветТекста = Новый Цвет(0, 0, 0); // Черный //Новый Цвет(128, 128, 128); серый
	Информация = ПолучитьСправкуТипаЗадач();
Конецпроцедуры

&НаКлиенте
Функция ПолучитьСправкуТипаЗадач() 
	
	Если НЕ ЗначениеЗаполнено(ТипЗадачи) И ТипЗнч(ТипЗадачи) <> Тип("УникальныйИдентификатор") Тогда
		Возврат "";		
	КонецЕсли;
	
	СЗСправка = Новый СписокЗначений;
	СЗСправка.Добавить(Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26"), "Тип задачи предполагает, что пользователь должен внести значение даты в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("19661470-75A6-4EB4-BE94-44924664B3D1"), "Тип задачи предполагает, что пользователь должен ввести числовое значение в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D"), "Тип задачи предполагает, что пользователь должен ввести строковое значение в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E"), "Тип задачи предполагает, что пользователь должен ввести факт исполнения или неисполнения задачи.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("B483E5F9-95E6-4E2D-B6B2-D5954FCC25AE"), "Тип задачи предполагает, что торговый агент должен сделать снимок с помощью фотокамеры МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("061879D3-E400-4CC8-B4F9-999C3399F47C"), "Тип задачи предполагает, что должен быть совершен обмен данными с учетной системой.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("EADED006-5271-4497-9222-79541D23E3FA"), "Тип задачи предполагает, что будет создан документ ""Заказ"" в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("D6176C16-130D-40D8-AD70-13A39C957927"), "Тип задачи предполагает, что будет создан документ ""Реализация"" в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("57EC9BD4-C2EC-47E0-86C1-B06211735F32"), "Тип задачи предполагает, что будет создан документ ""Перемещение"" в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("79E5B0F6-B019-41FE-9214-C7A204E05974"), "Тип задачи предполагает, что будет создан документ ""Поступление"" в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("EC84CE42-A9C3-4936-94FB-595EC1E84AEF"), "Тип задачи предполагает, что будет создан документ ""ВозвратТоваров"" в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("2EC90B5A-56FF-4338-AEAA-2416B8923BF8"), "Тип задачи предполагает, что будет создан документ ""ПКО"" в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("8BED83C4-4428-4206-89D1-A31790130937"), "Тип задачи предполагает, что будет создан документ ""РКО"" в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("544B81FD-49DA-453E-9B9C-EEC549CBEF10"), "Тип задачи предполагает, что будет создан документ ""Мерчендайзинг"" в МУ.");
	СЗСправка.Добавить(Новый УникальныйИдентификатор("2F7826F4-2665-49FA-95E7-E7C8CC6EBF0E"), "Тип задачи предполагает, что будет создан документ ""Посещение"" в МУ.");
	
	Результат = СЗСправка.НайтиПоЗначению(ТипЗадачи);
	Если Результат = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Результат.Представление;		
	КонецЕсли;	

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти
