#Область ОписаниеПеременных

&НаКлиенте
Перем МодульКарты;  // общий клиентский модуль работы с картами 
&НаКлиенте
Перем ГМодульК;  // общий клиентский модуль. 

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтррКонтекст = Новый Структура("Повторно,ИнтерфейсТакси,ИсправитьРазмерыЭлементов,КаталогИконок,КартаЦентр,СписокВсеВидыДокументов,"
		+ "СсылкаСписокТТ,КаталогДанных");
		
		
	СтррКонтекст.Повторно = Ложь;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.КаталогДанных 			 = ТекОбъект.ПрочитатьЗначениеНастройки("КаталогДанных");
	СтррКонтекст.КартаЦентр 			 = ТекОбъект.ПрочитатьЗначениеНастройки("КартаЦентр"); // центр карты, выбранный до этого пользователем 
	
	
	СтррКонтекст.СписокВсеВидыДокументов = ТекОбъект.ПолучитьВсеВидыОбъектовДля1C("Документ", "СоздаваемыеВМУ");
	СтррКонтекст.КаталогИконок 			 = ТекОбъект.ПолучитьВебКаталогИконок();
	
	//@skip-check undefined-function
	СтррКонтекст.ИнтерфейсТакси = ТекОбъект.КонфигурацияРазмерностьЭлементовФормыДляТакси() 
		И ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
		
	//@skip-check undefined-function
	СтррКонтекст.ИсправитьРазмерыЭлементов = ТекОбъект.КонфигурацияРежимСовместимости("<=8.3.6") 
		И ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси;
	
	ТаймингАктуальностиМестоположенияАгента = 15;
	ДопустимаяУдаленностьОтТТ = ТекОбъект.ПрочитатьЗначениеНастройки("МаксимальноеРасстояниеОтТТ");
	
	ЛегендаЗаполнить();

	//@skip-check structure-consructor-too-many-keys
	//@skip-check use-non-recommended-method
	ТаймерОжидания 	  = Новый Структура("Включен, Время, Попытка, ОбработкаДанных", Ложь, ТекущаяДата(), 0, Ложь, Ложь); 
	МакетЗагружен  = Ложь; 																												 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтррКонтекст.ИнтерфейсТакси Тогда
		Элементы.ГруппаЛеваяОбласть.Ширина = 40;
	КонецЕсли; 
	
	Если СтррКонтекст.ИсправитьРазмерыЭлементов Тогда
		Элементы.ГруппаЛеваяОбласть.Ширина = 20;
		Элементы.ДопустимаяУдаленностьОтТТ.Заголовок = НСтр("ru = 'Удаленность'"); // в конфигурациях в режиме совместимости 8.3.6 искажается положение элементов из-за длинного заголовка 
	КонецЕсли; 
	
	//@skip-check use-non-recommended-method
	//@skip-check form-self-reference
	МодульКарты	= ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульКартыКлиент");	
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
	МодульКарты.ЗаполнитьСписокДоступныхКарт(Элементы.ИсточникКарты.СписокВыбора);
	Если Не ЗначениеЗаполнено(ИсточникКарты) ИЛИ  ИсточникКарты = "GoogleMaps" Тогда
		ИсточникКарты = Элементы.ИсточникКарты.СписокВыбора[0].Значение;
	КонецЕсли;
	
	//@skip-check form-self-reference
	ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты;
	
	Элементы.ПланФакт.Отображение = ОтображениеТаблицы.Дерево;		
	
	Если СтррКонтекст.КартаЦентр = Неопределено Тогда
		СтррКонтекст.КартаЦентр = МодульКарты.ПолучитьКоординатыПользователя();
		МодульКарты.СохранитьЦентрКартыКлиент(СтррКонтекст.КартаЦентр);
	КонецЕсли;
	
	Если ВидыДокументов.Количество() = 0 Тогда // если список пустой, заполняем его всеми видами документов
		ВидыДокументов = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 	
	КонецЕсли; 

	Если ДатаОтчета = '00010101'  Тогда
		//@skip-check use-non-recommended-method
		ДатаОтчета = ТекущаяДата();
	КонецЕсли;
	
	Если ДатаОтчетаКонец = '00010101'  Тогда
		ДатаОтчетаКонец = ДатаОтчета;
	КонецЕсли;
	
	Если ТаймингАктуальностиМестоположенияАгента = 0 Тогда
		ТаймингАктуальностиМестоположенияАгента = 15;
	КонецЕсли; 
	
	ЛегендаОбновитьТайминги();
	
	РежимРеальногоВремениПриИзменении(Элементы.РежимРеальногоВремени);
	
	ФормаВидимостьДопИнформации();
	ИспользоватьТочкиТрекаПоВремениПриИзменении("ПриОткрытии");
	ДействиеОбработкаСобытий("КартаОбновитьМакет");
	
	НастроитьВидимостьНадписьПредупреждениеMac();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	СтррКонтекст.Повторно = Истина; // признак, что форма открыта повторно, используется чтобы учитывать загрузку карты в ПолеБраузера	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда 		// второй экземпляр обработки спрашивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте 
Процедура ИспользоватьТочкиТрекаПоВремениПриИзменении(Элемент)

	Элементы.ЗначениеТочкиТрекаПоВремени.Доступность 	= ИспользоватьТочкиТрекаПоВремени;
	Элементы.ТочкиТрекаПоВремени.Видимость			  	= ИспользоватьТочкиТрекаПоВремени;
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		ДействиеОбработкаСобытий("КартаОбновитьКарту");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтчетаПриИзменении(Элемент)
	// ???
КонецПроцедуры

&НаКлиенте
Процедура РежимРеальногоВремениПриИзменении(Элемент)
	
	Элементы.ДатаОтчета.Доступность 	 = Не РежимРеальногоВремени;
	Элементы.ДатаОтчетаКонец.Доступность = Не РежимРеальногоВремени;
	Элементы.ВыборПериода.Доступность	 = Не РежимРеальногоВремени;
	Элементы.ГруппаТаймингАктуальности.Доступность = РежимРеальногоВремени;
	
	Если РежимРеальногоВремени Тогда
		//@skip-check use-non-recommended-method
		ДатаОтчета 		= ТекущаяДата();
		ДатаОтчетаКонец = ДатаОтчета;
		ПодключитьОбработчикОжидания("РежимРеальногоВремениОбработка", 30, Ложь); 	//Циклический
	Иначе
		ОтключитьОбработчикОжидания("РежимРеальногоВремениОбработка");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникКартыПриИзменении(Элемент)
	
	ДействиеОбработкаСобытий("КартаОбновитьМакет");
	НастроитьВидимостьНадписьПредупреждениеMac();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДляПометки = СтррКонтекст.СписокВсеВидыДокументов.Скопировать(); 
	
	Для Каждого ЭлементСписка Из СписокДляПометки Цикл 
		ЭлементСписка.Пометка = (Неопределено <> ВидыДокументов.НайтиПоЗначению(ЭлементСписка.Значение)); 
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОтметкиСпискаВидовДокументов", ЭтотОбъект);
	СписокДляПометки.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите документы, включаемые в отчет'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймингАктуальностиМестоположенияАгентаПриИзменении(Элемент)
	
	Если ТаймингАктуальностиМестоположенияАгента < 1 Тогда
		ТаймингАктуальностиМестоположенияАгента = 1;
	КонецЕсли;
	
	ЛегендаОбновитьТайминги();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаймингАктуальностиМестоположенияАгентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// При нажатии на линию трека отображает окошко информации трека
&НаКлиенте
Процедура ПолеБраузераПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Button = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Источник = ДанныеСобытия.Button;
	
	Если Источник.id = "ClickEvent" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Источник.apObjectType = "polyline" Тогда
			
			Документ = Элемент.Document;
			
			ОкноБраузера = Документ.parentWindow; // IE
		    Если ОкноБраузера = Неопределено Тогда
		        ОкноБраузера = Документ.defaultView; // Прочие браузеры
			КонецЕсли;
			
			Координаты = СтрРазделить_(Источник.apValue);
			
			Широта  = СтрокуВЧисло(Координаты[0]);
			Долгота = СтрокуВЧисло(Координаты[1]);
			СтррЗначения = ТрекПолучитьДанныеДляКоординаты(Источник.apObjectID, КоординатаИзWGS84вNMEA(Широта), КоординатаИзWGS84вNMEA(Долгота));
			Если СтррЗначения.КодОшибки <> Неопределено Тогда
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррЗначения.ТекстОшибки);
				Возврат;
			Иначе
				ОкноБраузера.setBalloon(Широта, Долгота, Строка(СтррЗначения.Агент));
			КонецЕсли; 
			
		Иначе
			
			//...
			
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Событие при нажатии на ссылку в расширенной подсказке "Допустимая удаленность от ТТ"
&НаКлиенте
Процедура ФормаДекорацияУдаленностьРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбщиеНастройки_Основные" Тогда
		СтандартнаяОбработка = Ложь;
		МодульК().КомандаВыполнить("ПоказатьНастройкиМодуля");
		СтррПараметры = Новый Структура("Закладка,Сообщение", "ГруппаОсновные", "МаксимальноеРасстояниеОтТТ");
		Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", СтррПараметры);
	КонецЕсли; 
	
КонецПроцедуры

//В браузер загружен скрипт. Если скрипт загружен не корректно, отсутствует интернет итд, такие ситуация не обрабатывается. 
//Обработка корректности загрузки скрипта обрабатывается в обработке события таймера "КартаПроверкаЗагрузкиМакета".
//
&НаКлиенте
Процедура КартаПолеБраузераДокументСформирован(Элемент)
	
	Таймер_Включить("КартаПроверкаЗагрузкиМакета");
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланФакт

&НаКлиенте
Процедура ПланФактПриИзменении(Элемент)
	
	ДеревоПланФактЗаполнитьРазворачивание();
	ДеревоПланФактСортировать();
	ДеревоПланФактРазвернуть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	СтррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Пользователь,МножественныйВыбор", ПланФактПолучитьТекущегоАгента(), Истина));
	Оповещение = Новый ОписаниеОповещения("ПланФактДобавлениеЗавершение", ЭтотОбъект);
	//@skip-check form-self-reference
	МодульК().ОткрытьФормуОбработки("ВыборАгента", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Агент) Тогда
		МАгенты = Новый Массив;
		МАгенты.Добавить(Элемент.ТекущиеДанные.Агент);
		
		ДействиеОбработкаСобытий("ПланФактУдалить", МАгенты);
		ДействиеОбработкаСобытий("КартаОбновитьКарту");
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПриАктивизацииСтроки(Элемент)
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПланФактИзменениеВыбранногоЦвета(СтрокаД); //Изменение иконки выделенного цвета.
	
	Если ЗначениеЗаполнено(СтрокаД.Документ) Тогда
		//0. УРОВЕНЬ Документ
		Если ОтображатьДокументыНаКарте Тогда
			СтррМаркер = Новый Структура("Широта, Долгота", СтрокаД.Широта, СтрокаД.Долгота);
			ДействиеОбработкаСобытий("КартаПерейтиКМаркеру", СтррМаркер);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаД.Партнер) Тогда
		//1. УРОВЕНЬ Партнеры                                                                                                             
		//1.1 Перейти к Маркеру ТТ
		СтррМаркер = Новый Структура("Широта, Долгота", СтрокаД.Широта, СтрокаД.Долгота);
		ДействиеОбработкаСобытий("КартаПерейтиКМаркеру", СтррМаркер);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаД.ДатаТрека) Тогда 
		//2. УРОВЕНЬ ДатаТрека
		//2.1 Перейти к треку агента.
		СтррПоиск 		= Новый Структура("Агент, ДатаТрека", СтрокаД.Агент, СтрокаД.ДатаТрека);
		МКартаТреки 	= КартаТреки.НайтиСтроки(СтррПоиск);
		ДействиеОбработкаСобытий("КартаОбновитьКарту");
		Если МКартаТреки.Количество() > 0 И МКартаТреки[0].ТрекЕсть = Истина Тогда
			ДействиеОбработкаСобытий("КартаПоказатьРегион", МКартаТреки[0].РегионТрека);
		Иначе
			ДействиеОбработкаСобытий("КартаПоказатьРегион", Неопределено);			
		КонецЕсли;
	
	ИначеЕсли ЗначениеЗаполнено(СтрокаД.Агент) Тогда
		//3. УРОВЕНЬ Агент
		//3.1Перейти к треку агента. Определение региона.
		СтррРегионТрека = Неопределено;
		Если СтрокаД.Иконка = 1  Тогда
			// Статусы иконок агента: 
			//СтрокаД.Иконка = 0 = Режим ОдинАгент
			//СтрокаД.Иконка = 1 = трека нет
		Иначе
			СтррПоиск 		= Новый Структура("Агент", СтрокаД.Агент);
			МКартаТреки 	= КартаТреки.НайтиСтроки(СтррПоиск);
			Для Каждого стзКартаТреки Из МКартаТреки Цикл
				Если стзКартаТреки.ТрекЕсть Тогда
					Если СтррРегионТрека = Неопределено Тогда 
						//@skip-check structure-consructor-too-many-keys
						СтррРегионТрека = Новый Структура("минШирота, минДолгота, максШирота, максДолгота", 9999, 9999, 0, 0);
					КонецЕсли;	   
					
					Если стзКартаТреки.РегионТрека.минШирота > 0 И стзКартаТреки.РегионТрека.минШирота < СтррРегионТрека.минШирота Тогда
						СтррРегионТрека.минШирота = стзКартаТреки.РегионТрека.минШирота;
					КонецЕсли;
					Если стзКартаТреки.РегионТрека.минДолгота > 0 И стзКартаТреки.РегионТрека.минДолгота < СтррРегионТрека.минДолгота Тогда
						СтррРегионТрека.минДолгота = стзКартаТреки.РегионТрека.минДолгота;
					КонецЕсли;
					Если стзКартаТреки.РегионТрека.максШирота > СтррРегионТрека.максШирота Тогда
						СтррРегионТрека.максШирота = стзКартаТреки.РегионТрека.максШирота;
					КонецЕсли;
					Если стзКартаТреки.РегионТрека.максДолгота > СтррРегионТрека.максДолгота Тогда
						СтррРегионТрека.максДолгота = стзКартаТреки.РегионТрека.максДолгота;
					КонецЕсли;
				КонецЕсли;				
			КонецЦикла;
		КонецЕсли;
		
		//3.2 Показать регион всех треков агента.
		ДействиеОбработкаСобытий("КартаОбновитьКарту");
		ДействиеОбработкаСобытий("КартаПоказатьРегион", СтррРегионТрека); //нет треков.
		
	КонецЕсли; 
	
	//4. Добавление точек в таблицу КартаТочкиТрекаПоВремени
	ДействиеОбработкаСобытий("МаркерыПромежутковВремени", Новый Структура("Агент, ДатаТрека", СтрокаД.Агент, СтрокаД.ДатаТрека));
	
КонецПроцедуры   

&НаКлиенте
Процедура ПланФактВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаД = Элемент.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 	
	Если Поле.Имя <> "МаршрутПредставление" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаД.Документ) Тогда
		Если ТипЗнч(СтрокаД.Документ) = Тип("Структура") Тогда 
			// виртуальный документ
			СтррДокумент = СтрокаД.Документ;
			МодульК().ВООткрытьФорму(СтррДокумент);
		Иначе 
			// обычный документ
			ПоказатьЗначение(Неопределено, СтрокаД.Документ);			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаД.Партнер) Тогда
		ПоказатьЗначение(Неопределено, СтрокаД.Партнер);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаД.ДатаТрека) Тогда
		Возврат;	
		
	ИначееСЛИ ЗначениеЗаполнено(СтрокаД.Агент) Тогда
		МодульК().ОткрытьФормуОбработки("НастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("Пользователь", СтрокаД.Агент));
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийДереваПланФакт
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТочкиТрекаПоВремени

&НаКлиенте
Процедура ТочкиТрекаПоВремениПриАктивизацииСтроки(Элемент)
	
	ДействиеОбработкаСобытий("КартаОбновитьКарту");
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиТрекаПоВремениВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СТЗЭлемент = Элемент.ТекущиеДанные;
	Если СТЗЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтррМаркер = Новый Структура("Широта,Долгота", СТЗЭлемент.Широта, СТЗЭлемент.Долгота); 
	ДействиеОбработкаСобытий("КартаПерейтиКМаркеру", СтррМаркер);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьОтчет(Команда)
	
	Если ДатаОтчета > ДатаОтчетаКонец Тогда
		Текст = НСтр("ru = 'Некорректно задан период отчета.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ДатаОтчета");
		Возврат;
	КонецЕсли;
	
	ИспользоватьТочкиТрекаПоВремениПриИзменении("Команда" + Команда);
	ДействиеОбработкаСобытий("ПланФактОбновить");
	ДействиеОбработкаСобытий("КартаОбновитьМакет");

КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьДерево(Команда)
	
	ДействиеОбработкаСобытий("ПланФактОчистить");
	ДействиеОбработкаСобытий("КартаОбновитьКарту");

КонецПроцедуры

&НаКлиенте
Процедура КомандаСортироватьПоФактуПосещения(Команда)
	
	Элементы.ПланФакт.КоманднаяПанель.ПодчиненныеЭлементы.МаршрутГруппаСортировка.ПодчиненныеЭлементы.МаршрутСортироватьПоФактуПосещения.Пометка = НЕ Элементы.ПланФакт.КоманднаяПанель.ПодчиненныеЭлементы.МаршрутГруппаСортировка.ПодчиненныеЭлементы.МаршрутСортироватьПоФактуПосещения.Пометка;
	Элементы.ПланФакт.КоманднаяПанель.ПодчиненныеЭлементы.МаршрутГруппаСортировка.ПодчиненныеЭлементы.МаршрутСортироватьПоПлануПосещения.Пометка = Ложь;
	
	ДеревоПланФактЗаполнитьРазворачивание();
	ДеревоПланФактСортировать();
	ДеревоПланФактРазвернуть();  	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСортироватьПоПлануПосещения(Команда)
	
	Элементы.ПланФакт.КоманднаяПанель.ПодчиненныеЭлементы.МаршрутГруппаСортировка.ПодчиненныеЭлементы.МаршрутСортироватьПоФактуПосещения.Пометка = Ложь;
	Элементы.ПланФакт.КоманднаяПанель.ПодчиненныеЭлементы.МаршрутГруппаСортировка.ПодчиненныеЭлементы.МаршрутСортироватьПоПлануПосещения.Пометка = НЕ Элементы.ПланФакт.КоманднаяПанель.ПодчиненныеЭлементы.МаршрутГруппаСортировка.ПодчиненныеЭлементы.МаршрутСортироватьПоПлануПосещения.Пометка;
	
	ДеревоПланФактЗаполнитьРазворачивание();
	ДеревоПланФактСортировать();
	ДеревоПланФактРазвернуть();  	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежимПодробнойИнформацииВДеревеМаршрута(Команда)
	
	РежимДополнительнойИнфомации = Не РежимДополнительнойИнфомации;
	ФормаВидимостьДопИнформации();
	
	ДействиеОбработкаСобытий("ПланФактОбновить");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьКоординаты(Команда)
	
	МПартнеры = Новый Массив;
	МСтроки = Элементы.ПланФакт.ВыделенныеСтроки;
	Для каждого идСтроки Из МСтроки Цикл
		СтрокаД = ПланФакт.НайтиПоИдентификатору(идСтроки);
		Если ЗначениеЗаполнено(СтрокаД.Партнер) Тогда
			МПартнеры.Добавить(СтрокаД.Партнер);
		КонецЕсли; 
	КонецЦикла; 
	
	Если МПартнеры.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выделите в таблице партнеров для редактирования координат.'"));
	Иначе
		Форма = МодульК().ОткрытьФормуОбработки("РедакторМеток", СтррКонтекст);
		Форма.ВнешнийВызовДобавитьИПоказатьПартнеров(МПартнеры);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетВыполнениеПланаПосещений(Команда)
	
	Если ДатаОтчета = Дата('00010101') Тогда
		Текст = НСтр("ru = 'Укажите дату отчета.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "ДатаОтчета");
		Возврат;
	КонецЕсли;
	
	ВыбранныйАгент = ПланФактПолучитьТекущегоАгента(Истина);
	
	Если ВыбранныйАгент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check structure-consructor-too-many-keys
	СтррПараметры = Новый Структура("Агент,Период,СписокВидыДокументов,ТолькоПроведенныеДокументы,ВыделитьДень");
	СтррПараметры.Агент  = ВыбранныйАгент;
	СтррПараметры.Период = Новый СтандартныйПериод(НачалоМесяца(ДатаОтчета), КонецМесяца(ДатаОтчета));
	СтррПараметры.СписокВидыДокументов 		 = ВидыДокументов;
	СтррПараметры.ТолькоПроведенныеДокументы = ТолькоПроведенныеДокументы;
	СтррПараметры.ВыделитьДень 				 = ДатаОтчета;
	
	Форма = МодульК().ОткрытьФормуОбработки("ОтчетВыполнениеПланаПосещений", СтррКонтекст);
	Форма.ВнешнийВызовСформироватьОтчет(СтррПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыборПериода(Команда)
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	//Диалог.Период.Вариант = //Настройка варианта отображения
	Диалог.Период.ДатаНачала = ДатаОтчета;
	Диалог.Период.ДатаОкончания = ДатаОтчетаКонец;
	ОповещениеВыбораПериода = Новый ОписаниеОповещения ("ЗавершениеВыбораПериода", ЭтотОбъект);
	Диалог.Показать(ОповещениеВыбораПериода);
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//       т.е. для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив Из Строка - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	//@skip-check use-non-recommended-method
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		//@skip-check use-non-recommended-method
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПреобразованиеЗначений

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	СтрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			СтрЧисло = СтрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			СтрЧисло = СтрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(СтрЧисло), 0, Число(СтрЧисло));

КонецФункции

// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//   Число                       - Число  - любое целое число.
//   ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной,
//                                          для двух и для пяти единиц, разделитель - запятая.
//   ДобавлятьЧислоКРезультату   - Булево - Если Истина, то числовое значение выводится перед представлением.
// Возвращаемое значение:
//   Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//   ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//   ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
&НаКлиентеНаСервереБезКонтекста
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ПреобразованиеЗначений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Легенда

&НаСервере
Процедура ЛегендаЗаполнить()
	
	Легенда.Очистить();
	
	СтрокаТ = Легенда.Добавить();
	СтрокаТ.Иконка 	 = 0;
	СтрокаТ.Описание = НСтр("ru = 'Не выполненное посещение по плану'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 1;
	СтрокаТ.Описание = НСтр("ru = 'Выполненное посещение по плану'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 2;
	СтрокаТ.Описание = НСтр("ru = 'Посещение в незапланированный день'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 3;
	СтрокаТ.Описание = НСтр("ru = 'Посещение отсутствующей в плане торговой точки'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 4;
	СтрокаТ.Описание = НСтр("ru = 'Начало трека'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 5;
	СтрокаТ.Описание = НСтр("ru = 'Конец трека'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 6;
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 7;
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 8; 
	
	
	//(( sk_220630 MOD-2058 
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 9;  
	СтрокаТ.Описание = НСтр("ru = 'Отключения GPS модуля'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 10; 
	СтрокаТ.Описание = НСтр("ru = 'Включение GPS модуля'");
	
	СтрокаТ = Легенда.Добавить();	
	СтрокаТ.Иконка 	 = 11;
	СтрокаТ.Описание = НСтр("ru = 'Подмена координат'"); 
	//)) sk_220630 MOD-2058 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЛегендаОписание(ЗначениеВМинутах, Шаг)

	СтрокаШаблон = ?(Шаг <> 3, НСтр("ru = 'Местоположение агента за %1 %2'"), НСтр("ru = 'Местоположение агента более %1 назад'"));
	
	Если ЗначениеВМинутах % 60 = 0 Тогда
		Величина = ЗначениеВМинутах / 60;
		Если Величина = 1 Тогда
			Если Шаг = 3 Тогда
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'часа'"));
			Иначе
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'последний'"), НСтр("ru = 'час'"));
			КонецЕсли; 
		ИначеЕсли Шаг = 3 Тогда
			Результат = СтрШаблон_(строкаШаблон, ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru = 'часа,часов,часов'")));
		Иначе
			Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'последние'"), ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru = 'час,часа,часов'")));
		КонецЕсли; 
	Иначе
		Величина = ЗначениеВМинутах;
		Если Величина = 1 Тогда
			Если Шаг = 3 Тогда
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'минуты'"));
			Иначе
				Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'последнюю'"), НСтр("ru = 'минуту'"));
			КонецЕсли; 
		ИначеЕсли Шаг = 3 Тогда
			Результат = СтрШаблон_(строкаШаблон, ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru = 'минуты,минут,минут'")));
		Иначе
			Результат = СтрШаблон_(строкаШаблон, НСтр("ru = 'последние'"), ЧислоЦифрамиПредметИсчисленияПрописью(Величина, НСтр("ru = 'минуту,минуты,минут'")));
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЛегендаОбновитьТайминги()
	
	СтррПоиск = Новый Структура("Иконка");
	
	СтррПоиск.Иконка = 6;
	Легенда.НайтиСтроки(СтррПоиск)[0].Описание = ЛегендаОписание(ТаймингАктуальностиМестоположенияАгента, 1);
		
	СтррПоиск.Иконка = 7;
	Легенда.НайтиСтроки(СтррПоиск)[0].Описание = ЛегендаОписание(2 * ТаймингАктуальностиМестоположенияАгента, 2);
		
	СтррПоиск.Иконка = 8;
	Легенда.НайтиСтроки(СтррПоиск)[0].Описание = ЛегендаОписание(2 * ТаймингАктуальностиМестоположенияАгента, 3);
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Легенда    
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Карты

// Возвращаемое значение:
//   Булево:
//     Истина  - Загружен без ошибок
//     Ложь    - Загружен с ошибкой: В момент обновления карты диалоговый элемент "ПолеБраузера" сфокусирован.
&НаКлиенте
Функция КартаОбновитьТекущийМакет()
	
	МакетЗагружен = Ложь;
	
	// Важно, чтобы в момент обновления карты диалоговый элемент "ПолеБраузера" не был сфокусирован,
	// иначе происходит ошибка выполнения JavaScript. (Баг работы с COM-объеткми?).
	//@skip-check form-self-reference
	Если ЭтаФорма.ТекущийЭлемент.Имя = "ПолеБраузера" Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ИсточникКарты; // Убираем фокус с "ПолеБраузера"
		Возврат Ложь;
	КонецЕсли;
	
	ТекстМакета	= МодульКарты.ПолучитьСкриптКарты(ИсточникКарты);
	СтрПараметры = КартаСформироватьПараметрРежимРедактора("Report", стррКонтекст.КартаЦентр); // Параметры скрипта
	МодульКарты.ЗаполнитьПараметрыСкрипта(ТекстМакета, СтрПараметры);
	
	Если МодульКарты.ИспользоватьWebKit() Тогда
		ТекстСкрипта = ТекстМакета;
		Таймер_Включить("КартаПроверкаЗагрузкиМакета");
	Иначе	
	
		#Если Не ВебКлиент Тогда
			//@skip-check return-value-different-environment
			Документ = Элементы.ПолеБраузера.Документ;	              
			//Загрузка скрипта в COM обьект
			КартаЗагрузитьМакет(Документ, ТекстМакета);             
			
			ОкноБраузера = Документ.parentWindow; // IE
		    Если ОкноБраузера = Неопределено Тогда
		        ОкноБраузера = Документ.defaultView; // Прочие браузеры
			КонецЕсли;
		#Иначе
			ТекстСкрипта = ТекстМакета; 
		#КонецЕсли
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции   

// Выполняет загрузку скрипта карты из текста макета
//
//  Параметры:
//   Документ 		- Произвольный - COM-объект - поле html-документа
//   ТекстМакета 	- Строка - текст скрипта
//
&НаКлиенте
Процедура КартаЗагрузитьМакет(Документ, ТекстМакета)

	Попытка                                                                            
		Документ.designMode = "On";
		Документ.write(ТекстМакета);	
		Документ.designMode = "Off"; 
	Исключение
		Попытка
			Документ.body.document.designMode = "On";
			Документ.write(ТекстМакета);
			Документ.body.document.designMode = "Off";
		Исключение
			//Ошибка загрузки макета.
			ТекстСкрипта = ТекстМакета; //ТекстСкрипта - реквизит формы поля браузера.
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

// Формирует параметр "Режим редактора" (режим + координаты центра карты - при их наличии)
//
//  Параметры:
//   РежимРедактора - Строка - режим редактора
//   СтррЦентр - Произвольный - Неопределено или Структура:
//    * Широта - Число - широта для позиционирования центра карты
//    * Долгота - Число - долгота для позиционирования центра карты
//     Если СтррЦентр не указан, то центр карты берется из атрибутов КартаСсылка.Широта и КартаСсылка.Долгота.
//
//  Возвращаемое значение:
//   Строка - режим редактора с координатами центра карты (при их наличии)  
//
&НаКлиентеНаСервереБезКонтекста
Функция КартаСформироватьПараметрРежимРедактора(РежимРедактора, СтррЦентр = Неопределено)
	
	Если ТипЗнч(СтррЦентр) = Тип("Структура") И СтррЦентр.Свойство("Широта") Тогда
		ШиротаСтр  = ЧислоВСтроку(КонвертироватьNMEAWGS84(СтррЦентр.Широта));     
		ДолготаСтр = ЧислоВСтроку(КонвертироватьNMEAWGS84(СтррЦентр.Долгота));
	Иначе
		ШиротаСтр  = "0";
		ДолготаСтр = "0";
	КонецЕсли; 
	
	Возврат ШиротаСтр + "@" + ДолготаСтр + "@" + РежимРедактора;	
	
КонецФункции

&НаКлиенте
Процедура КартаОбновитьКарту()
	
	//Очистить Карту
	КартаОчиститьВсе();
	
	//Добавить на карту: Треки и Маркеры (НачалоПути, КонецПути, Фэйковые координаты если есть)
	КартаДобавитьТрекиИМаркерыТрека();
	
	//Добавить на карту маркеры ТТ.     
	КартаДобавитьМаркерыТТ();
	
	//Добавить маркер из КартаТочкиТрекаПоВремени. (маркер точка трека по времени)
	КартаДобавитьМаркерТочкиТрекаПоВремени();
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Карты
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений

// Конвертирует переданные координаты из формата NMEA  в формат WGS84. 
&НаКлиентеНаСервереБезКонтекста
Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КоординатаИзWGS84вNMEA(Координата)
	
	Возврат Цел(Координата)*100 + (Координата-Цел(Координата)) * 60;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВСтроку(Число) 
	
	Возврат СтрЗаменить(СтрЗаменить(Строка(Число), " ", ""), ",", ".");
	
КонецФункции

// СлужебныеПроцедурыИФункции_Карты_КонверсияЗначений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Карта_Контент

&НаКлиенте
Процедура КартаПоказатьРегион(СтррРегион)
				
	Если МакетЗагружен = Ложь ИЛИ СтррРегион = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = Элементы.ПолеБраузера.Document;
	ОкноБраузера = Документ.parentWindow; // IE
	Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	//@skip-check empty-except-statement
	Попытка
		ОкноБраузера.SetBounds(СтррРегион.МинШирота, СтррРегион.МинДолгота, СтррРегион.МаксШирота, СтррРегион.МаксДолгота);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаПерейтиКМаркеру(СтррМаркер)
				
	Если МакетЗагружен = Ложь ИЛИ СтррМаркер = Неопределено ИЛИ СтррМаркер.Широта = 0 ИЛИ СтррМаркер.Долгота = 0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Документ = Элементы.ПолеБраузера.Document;
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;

	//@skip-check empty-except-statement
	Попытка
		ОкноБраузера.GoToMarker(СтррМаркер.Широта, СтррМаркер.Долгота);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаОчиститьВсе()

	Если МакетЗагружен = Ложь Тогда
		Возврат;
	Конецесли;
		        	
	Документ = Элементы.ПолеБраузера.Document;		
	ОкноБраузера 	= Документ.parentWindow; // IE
	Если ОкноБраузера = Неопределено Тогда
		ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	//@skip-check empty-except-statement
	Попытка 
		ОкноБраузера.ClearCollection();
	Исключение
	КонецПопытки;

КонецПроцедуры

// sk_220630 MOD-2058 
//
// Процедура - Добавляет на карту: треки и маркеры трека (НачалоПути, КонецПути, фэйковые координаты)
//
&НаКлиенте
Процедура КартаДобавитьТрекиИМаркерыТрека()
	
	Если МакетЗагружен = Ложь ИЛИ КартаТреки.Количество() = 0 Тогда
		Возврат; 	
	КонецЕсли;
	
	Документ = Элементы.ПолеБраузера.Document;	
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;
	
	ОдинАгент = ?(ПланФакт.ПолучитьЭлементы().Количество() = 1, Истина, Ложь);	
	СтвЦветаТреков = КартаПолучитьЦветаТреков(ОдинАгент);                    	
	Для Каждого СТЗКартаТреки Из КартаТреки Цикл
		Агент = СТЗКартаТреки.Агент;
		ДатаТрека = СТЗКартаТреки.ДатаТрека;
		Трек = СТЗКартаТреки.Трек;
				
		// 1. Пропускаем Агентов у которых нет треков. 
		Если СТЗКартаТреки.ТрекЕсть = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		// Признак выделения линии на карте.
		флВыделять = ?(Элементы.ПланФакт.ТекущиеДанные <> Неопределено И Элементы.ПланФакт.ТекущиеДанные.Агент = Агент И (Элементы.ПланФакт.ТекущиеДанные.ДатаТрека = ДатаТрека ИЛИ Элементы.ПланФакт.ТекущиеДанные.ДатаТрека = '00010101'), Истина, Ложь);
		
		// 1.1. Толщина Линии. Для выделения выбранного трека. По умолчанию толщина = 2
		Если флВыделять Тогда 
			ТолщинаЛинии = 6;
		Иначе
			ТолщинаЛинии = 2;
		КонецЕсли;  
		Прозрачность = 0.8;
		
		// 1.2. Определение цвета маршрута
		Если ОдинАгент Тогда
			// Режим один агент
			ЦветМаршрута = СтвЦветаТреков.Получить(ДатаТрека);
		ИначеЕсли флВыделять И Элементы.ПланФакт.ТекущиеДанные.ДатаТрека = ДатаТрека Тогда
			// Режим несколько агентов. Выделить цветом выбранный трек за день, в ствЦветаТреков нет нужного цвета.
			ЦветМаршрута = КартаПолучитьЦветаЛинии(ИконкиНомерПервоиИконкиТрека() - 1);
		Иначе
			// Режим несколько агентов
			ЦветМаршрута = СтвЦветаТреков.Получить(Агент);
		КонецЕсли;
		Если ЦветМаршрута = Неопределено Тогда
			СТЗКартаТреки.Подготовлен = Ложь;
			СТЗКартаТреки.МаркерыТрека.Очистить(); 
			СТЗКартаТреки.ОтрезкиТрека.Очистить(); 
			Продолжить; // Ошибка
		КонецЕсли;	
			
		// 2. Выводим сохраненные отрезки трека и маркеры (При обновлении треков очищаются ОтрезкиТрека и МаркерыТрека)
		Если СТЗКартаТреки.Подготовлен Тогда 
			Для Каждого стзОтрезок Из СТЗКартаТреки.ОтрезкиТрека Цикл 
				стзОтрезок.стррТрека.Толщина = ТолщинаЛинии;
				стзОтрезок.стррТрека.ЦветМаршрута = ЦветМаршрута;
				КартаДобавитьТрекНаКарту(ОкноБраузера, стзОтрезок.стррТрека);		
			КонецЦикла;	 		
			Для Каждого стзМаркер Из СТЗКартаТреки.МаркерыТрека Цикл
				КартаДобавитьМаркерНаКарту(ОкноБраузера, стзМаркер);		
			КонецЦикла;  
			Продолжить;
		КонецЕсли; 
				
		// 3. Очищаем существующие отрезки треков и маркеры   
		СТЗКартаТреки.ОтрезкиТрека.Очистить();
		СТЗКартаТреки.МаркерыТрека.Очистить();
		
		// 4. Создание отрезков трека и маркеров
		СтррТочкиТрека = ПолучитьСтруктуруТочекТрека();
		
		// gi_20240701 {{
		СтррТочкиТрека.ТочкиШироты	= "";
		СтррТочкиТрека.ТочкиДолготы = "";
		СтррТочкиТрека.ТочкиВремя = "";
		// }}

		СтррТочкаРазрыва = ПолучитьСтруктуруТочкиРазрыва();  
		СтррПредыдущаяТочкаТрека = Новый Структура("Широта, Долгота, Время"); 
		СТЗОтрезокТрека = СТЗКартаТреки.ОтрезкиТрека.Добавить();
		СТЗОтрезокТрека.стррТрека = КартаПолучитьСтруктуруТрека();  
		//КоличествоСтрок = Трек.Количество(); 
		
		Для Каждого стзТрек Из Трек Цикл 
			Если стзТрек.Широта <= 0 И стзТрек.Долгота <= 0 
				И ЗначениеЗаполнено(СтррПредыдущаяТочкаТрека.Широта) И ЗначениеЗаполнено(СтррПредыдущаяТочкаТрека.Долгота) 
				И Не СтррТочкаРазрыва.Есть Тогда
				ЗаполнитьЗначенияСвойств(СтррТочкаРазрыва, СтррПредыдущаяТочкаТрека, "Широта, Долгота, Время");
				СтррТочкаРазрыва.Есть = Истина;
								
				ЗаполнитьСтруктуруТрека(СТЗОтрезокТрека.стррТрека, СтррТочкиТрека, ТолщинаЛинии, ЦветМаршрута, "solid", Прозрачность, Агент); 	 
				СтррТочкиТрека = ПолучитьСтруктуруТочекТрека();	 
				
				СТЗОтрезокТрека = СТЗКартаТреки.ОтрезкиТрека.Добавить();
				СТЗОтрезокТрека.стррТрека = КартаПолучитьСтруктуруТрека(); 
				
				ФлИконкаFake = Ложь;	
				Если (стзТрек.Широта = -200) И (стзТрек.Долгота = -200) Тогда
					ФлИконкаFake = Истина;
				КонецЕсли;
				МаркерFakeОтключениеGPS = СТЗКартаТреки.МаркерыТрека.Добавить();
				МаркерFakeОтключениеGPS.Широта = СтррТочкаРазрыва.Широта;
				МаркерFakeОтключениеGPS.Долгота = СтррТочкаРазрыва.Долгота;
				МаркерFakeОтключениеGPS.КодИконки = ?(ФлИконкаFake, 12, 10); // Fake координаты / Отключение GPS 
				МаркерFakeОтключениеGPS.Заголовок = ?(ФлИконкаFake, НСтр("ru='Подмена координат'"), НСтр("ru='Отключения GPS модуля'"));
				МаркерFakeОтключениеGPS.Описание = Строка(СтррПредыдущаяТочкаТрека.Время);
				МаркерFakeОтключениеGPS.Подвал = "";
				МаркерFakeОтключениеGPS.Подсказка = "";   	
			КонецЕсли;        
			
			Если стзТрек.Широта > 0 И стзТрек.Долгота > 0 
				И СтррТочкаРазрыва.Есть Тогда 
				СтррТочкиТрека.ТочкиШироты = ФорматироватьКоординату(СтррТочкаРазрыва.Широта) + ";" + ФорматироватьКоординату(стзТрек.Широта);
		        СтррТочкиТрека.ТочкиДолготы = ФорматироватьКоординату(СтррТочкаРазрыва.Долгота) + ";" + ФорматироватьКоординату(стзТрек.Долгота); 
				СтррТочкиТрека.ТочкиВремя = Строка(СтррТочкаРазрыва.Время) + ";" + Строка(стзТрек.Время);    
				
				ЗаполнитьСтруктуруТрека(СТЗОтрезокТрека.стррТрека, СтррТочкиТрека, ТолщинаЛинии, ЦветМаршрута, "dot", Прозрачность, Агент);   
				СтррТочкиТрека = ПолучитьСтруктуруТочекТрека();

				СТЗОтрезокТрека = СТЗКартаТреки.ОтрезкиТрека.Добавить();
				СТЗОтрезокТрека.стррТрека = КартаПолучитьСтруктуруТрека();    
				СтррТочкаРазрыва = ПолучитьСтруктуруТочкиРазрыва();
				
				МаркерВключениеGPS = СТЗКартаТреки.МаркерыТрека.Добавить();
				МаркерВключениеGPS.Широта = стзТрек.Широта;
				МаркерВключениеGPS.Долгота = стзТрек.Долгота;
				МаркерВключениеGPS.КодИконки = 11; // Включение GPS 
				МаркерВключениеGPS.Заголовок = НСтр("ru='Включение GPS модуля'");
				МаркерВключениеGPS.Описание = Строка(стзТрек.Время);
				МаркерВключениеGPS.Подвал = НСтр("ru='Широта:'") + " " + стзТрек.Широта + НСтр("ru='; Долгота:'") + " " + стзТрек.Долгота;
				МаркерВключениеGPS.Подсказка = "";      
			КонецЕсли; 
			
			Если стзТрек.Широта <= 0 И стзТрек.Долгота <= 0 Тогда
				Продолжить;
			КонецЕсли;   
			
			СтррПредыдущаяТочкаТрека.Широта = стзТрек.Широта; 
			СтррПредыдущаяТочкаТрека.Долгота = стзТрек.Долгота;    
			СтррПредыдущаяТочкаТрека.Время = стзТрек.Время;

			СтррТочкиТрека.ТочкиШироты	= СтррТочкиТрека.ТочкиШироты  + ФорматироватьКоординату(стзТрек.Широта) + ";";
			СтррТочкиТрека.ТочкиДолготы = СтррТочкиТрека.ТочкиДолготы + ФорматироватьКоординату(стзТрек.Долгота) + ";";
			СтррТочкиТрека.ТочкиВремя = СтррТочкиТрека.ТочкиВремя 	+ стзТрек.Время + ";"; 
		КонецЦикла; 
		
		Если Не СтррТочкиТрека.ТочкиШироты  = "" И Не СтррТочкиТрека.ТочкиДолготы = "" Тогда 	
			ЗаполнитьСтруктуруТрека(СТЗОтрезокТрека.стррТрека, СтррТочкиТрека, ТолщинаЛинии, ЦветМаршрута, "solid", Прозрачность, Агент);
		КонецЕсли;	
		СТЗКартаТреки.Подготовлен = Истина;
		
		МаркерНачалоМаршрута = СТЗКартаТреки.МаркерыТрека.Добавить();
		МаркерНачалоМаршрута.Широта = Трек[0].Широта;
		МаркерНачалоМаршрута.Долгота = Трек[0].Долгота;
		МаркерНачалоМаршрута.КодИконки = 1; // Начало маршрута
		МаркерНачалоМаршрута.Заголовок = Строка(Агент);
		МаркерНачалоМаршрута.Описание = НСтр("ru = 'Начало:'") + " " + Формат(Трек[0].Время, "ДФ=HH:mm:ss yyyy MM dd'");
		МаркерНачалоМаршрута.Подвал = "";
		МаркерНачалоМаршрута.Подсказка = "";
				
		МаркерКонецМаршрута	= СТЗКартаТреки.МаркерыТрека.Добавить();
		МаркерКонецМаршрута.Широта = Трек[Трек.Количество()-1].Широта;
		МаркерКонецМаршрута.Долгота = Трек[Трек.Количество()-1].Долгота;
		МаркерКонецМаршрута.Заголовок = Строка(Агент);
		МаркерКонецМаршрута.Подвал = "";
		МаркерКонецМаршрута.Подсказка = "";
		Если РежимРеальногоВремени Тогда // Внешний вид маркера конца зависит от режима реального времени
			// Иконка
			ВремяКонца = Трек[Трек.Количество()-1].Время;
			ОтладкаДельта = 0; // 900
			//@skip-check use-non-recommended-method
			РазницаВремени = (ТекущаяДата() - ВремяКонца + ОтладкаДельта) / 60;
			Если РазницаВремени > 2 * ТаймингАктуальностиМестоположенияАгента Тогда
				МаркерКонецМаршрута.КодИконки = 5; // Красный агент
			ИначеЕсли РазницаВремени > ТаймингАктуальностиМестоположенияАгента Тогда
				МаркерКонецМаршрута.КодИконки = 4; // Желтый агент
			Иначе
				МаркерКонецМаршрута.КодИконки = 3; // Зеленый агент
			КонецЕсли; 
			// Описание
			МаркерКонецМаршрута.Описание = НСтр("ru = 'Время:'") + " " + Формат(Трек[Трек.Количество()-1].Время, "ДФ=HH:mm:ss yyyy MM dd'");
		Иначе
			// Иконка
			МаркерКонецМаршрута.КодИконки = 2; // Конец маршрута
			// Описание
			МаркерКонецМаршрута.Описание = НСтр("ru = 'Конец:'") + " " + Формат(Трек[Трек.Количество()-1].Время, "ДФ=HH:mm:ss yyyy MM dd'");
		КонецЕсли; 		
	КонецЦикла; 
	
	// 5. Добавление отрезков трека и маркеров на карту  
	Для Каждого СТЗТрек Из КартаТреки Цикл    
		Для Каждого СТЗОтрезокТрека Из СТЗТрек.ОтрезкиТрека Цикл 
			КартаДобавитьТрекНаКарту(ОкноБраузера, СТЗОтрезокТрека.стррТрека);
		КонецЦикла;
		Для Каждого СТЗМаркер Из СТЗТрек.МаркерыТрека Цикл 
			КартаДобавитьМаркерНаКарту(ОкноБраузера, СТЗМаркер);
		КонецЦикла;
	КонецЦикла;  	
		
КонецПроцедуры    

// sk_220630 MOD-2058   
// КартаДобавитьТрекиИМаркерыТрека()
//
// Процедура - Добавляет на карту: треки и маркеры трека (НачалоПути, КонецПути, фэйковые координаты)
//
// Параметры:
//  УстановитьТаймер - Булево  - Если при добавлении на карту возникла ошибка запустить повторно (бесконечно с интервалом в 1 сек, до успешного выполнения). 
//  мАгенты			 - мАгенты - Агенты из ПланФакт, которых требуется добавить на карту. 
//  ОбновлятьДанные	 - Булево  - Если Ложь, то не добавляет треки, которые уже добавлены на карту, привязывается к Треки.ДобавленНаКарту
//
// Параметры линии трека:
//  1 - строка точек широты
//  2 - строка точек долготы
//  3 - цвет маршрута агента
//  4 - толщина линии
//  5 - стиль линии, возможные стили:
//			dash		 	 	Тире 
//			dashdot		 	Длинное тире-короткое тире 
//			dot		 	 	Точки 
//			longdash			Длинные тире 
//			longdashdot	 	Очень длинное тире - точка 
//			longdashdotdot 	Длинное тире-точка-точка 
//			shortdash		 	Короткие тире 
//			Тире-точка 
//			shortdashdotdot	Тире-точка-точка 
//			shortdot		 	Точки через двойной интервал 
//			solid				Сплошная линия
// 6  - прозрачность в %
// 7  - строка с координатами полигона для автоцентирования
// 8  - строка, разбитая на периоды прохождения отрезков маршрута (секунды)
// 9  - строка, разбитая на расстояния прохождения отрезков маршрута (метры)
// 10 - маршрут по плану (будет включена возможность редактирования линии маршрута)
// 11 - признак того, что нужно выводить расшифровку маршрута в легенду
//&НаКлиенте
//Процедура КартаДобавитьТрекиИМаркерыТрека_OLD()
//	
//	Если МакетЗагружен = Ложь ИЛИ КартаТреки.Количество() = 0 Тогда
//		Возврат; 	
//	КонецЕсли;
//	
//	Документ = Элементы.ПолеБраузера.Document;
//	
//	ОкноБраузера = Документ.parentWindow; // IE
//    Если ОкноБраузера = Неопределено Тогда
//        ОкноБраузера = Документ.defaultView; // Прочие браузеры
//	КонецЕсли;
//	
//	ОдинАгент 		= ?(ПланФакт.ПолучитьЭлементы().Количество() = 1, Истина, Ложь);	
//	СтвЦветаТреков 	= КартаПолучитьЦветаТреков(ОдинАгент);                    	
//	МТрекиОтложенные= Новый Массив; //Массив структур треков которые нужно выгружать последним слоем на карте.	
//	
//	Для Каждого стзКартаТреки Из КартаТреки Цикл
//		Агент 		= стзКартаТреки.Агент;
//		ДатаТрека	= стзКартаТреки.ДатаТрека;
//		Трек  		= стзКартаТреки.Трек;
//				
//		//1. Пропускаем Агентов у которых нет треков. 
//		Если стзКартаТреки.ТрекЕсть = Ложь Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		//Признак выделения линии на карте.
//		флВыделять  = ?(Элементы.ПланФакт.ТекущиеДанные <> Неопределено И Элементы.ПланФакт.ТекущиеДанные.Агент = Агент И (Элементы.ПланФакт.ТекущиеДанные.ДатаТрека = ДатаТрека ИЛИ Элементы.ПланФакт.ТекущиеДанные.ДатаТрека = '00010101'), Истина, Ложь);
//		
//		//1.1 Тольщина Линии. Для выделения выбранного трека. По умолчанию толщина = 3 и прозрачность 0.8
//		Если флВыделять Тогда 
//			ТолщинаЛинии = 6;
//			Прозрачность = 0.8;
//		Иначе
//			ТолщинаЛинии = 2;
//			Прозрачность = 0.8;
//		КонецЕсли;
//		
//		//1.2 Определение цвета маршрута
//		Если ОдинАгент Тогда
//			//Режим одинагент
//			ЦветМаршрута = СтвЦветаТреков.Получить(ДатаТрека);
//		ИначеЕсли флВыделять И Элементы.ПланФакт.ТекущиеДанные.ДатаТрека = ДатаТрека Тогда
//			////Режим несколько агентов. Выделить цветом выбранный трек за день, в ствЦветаТреков нет нужного цвета.
//			ЦветМаршрута = КартаПолучитьЦветаЛинии(ИконкиНомерПервоиИконкиТрека() - 1);
//		Иначе
//			//Режим несколько агентов
//			ЦветМаршрута = СтвЦветаТреков.Получить(Агент);
//		КонецЕсли;
//		Если ЦветМаршрута = Неопределено Тогда
//			стзКартаТреки.стррТрека = Неопределено;
//			стзКартаТреки.МаркерыТрека.Очистить();
//			Продолжить; //Ошибка
//		КонецЕсли;	
//			
//		//2. Выводим сохраненный трек, если он сохранен (При обновлении треков стррТрек = Неопределено)
//		Если стзКартаТреки.стррТрека <> Неопределено Тогда
//			//2.1 Выводим сохраненный трек.
//			стзКартаТреки.стррТрека.Толщина 	 = ТолщинаЛинии;
//			стзКартаТреки.стррТрека.ЦветМаршрута = ЦветМаршрута;
//			стзКартаТреки.стррТрека.Прозрачность = Прозрачность;
//			Если флВыделять Тогда
//				МТрекиОтложенные.Добавить(стзКартаТреки.стррТрека)
//			Иначе
//				КартаДобавитьТрекНаКарту(ОкноБраузера, стзКартаТреки.стррТрека);
//			КонецЕсли;
//			//2.2 Выводем сохраненные маркеры.
//			Для Каждого стзМаркерыТрека Из стзКартаТреки.МаркерыТрека Цикл
//				КартаДобавитьМаркерНаКарту(ОкноБраузера, стзМаркерыТрека);				
//			КонецЦикла;
//			Продолжить;
//		КонецЕсли; 
//		
//		
//		//СОЗДАНИЕ Трека и маркеров трека.
//		
//		//3. Очищаем существующие маркеры
//		стзКартаТреки.МаркерыТрека.Очистить();
//		
//		//4. Создание Трека, формирование структуры трека. Получаем в цикле, тк новый обьект сохраняется в ТЗ
//		стзКартаТреки.стррТрека = КартаПолучитьСтруктуруТрека();
//		//4.1 Заполнение трека данными
//		стзКартаТреки.стррТрека.Толщина 				= ТолщинаЛинии;
//		стзКартаТреки.стррТрека.ЦветМаршрута 			= ЦветМаршрута;
//		стзКартаТреки.стррТрека.Стиль   				= "solid";
//		стзКартаТреки.стррТрека.Прозрачность 			= Прозрачность;
//		стзКартаТреки.стррТрека.ЛинияКоординатПолигона	= "";
//		стзКартаТреки.стррТрека.ЛинияВремя				= "";
//		стзКартаТреки.стррТрека.ЛинияРасстояние        	= "";
//		стзКартаТреки.стррТрека.ЛинияНазвание 			= Строка(Агент);
//		стзКартаТреки.стррТрека.ЛинияИД      			= Строка(Агент.УникальныйИдентификатор());
//		//4.2 Формипрвание линии маршрута (ТочкиШироты, ТочкиДолготы, ТочкиВремя)
//		//4.2.1 Обнуляем
//		стрСписокШирота  = "";
//		стрСписокДолгота = "";      
//		стрСписокВремя 	 = "";
//		//4.2.2 Формирование строки
//		Для каждого стзТрек Из Трек Цикл
//			стрСписокШирота	 = стрСписокШирота  + Формат(стзТрек.Широта,  "ЧРД=.; ЧРГ=' '; ЧГ=0") + ";";
//			стрСписокДолгота = стрСписокДолгота + Формат(стзТрек.Долгота, "ЧРД=.; ЧРГ=' '; ЧГ=0") + ";";
//			стрСписокВремя 	 = стрСписокВремя 	+ стзТрек.Время + ";";
//		КонецЦикла; 
//		//4.2.3 Форматирование
//		стрСписокШирота  = Лев(стрСписокШирота, СтрДлина(стрСписокШирота) -1);
//		стрСписокДолгота = Лев(стрСписокДолгота,СтрДлина(стрСписокДолгота)-1);	
//		стрСписокВремя 	 = Лев(стрСписокВремя, 	СтрДлина(стрСписокВремя)  -1);	
//		//4.2.4 Результат
//		стзКартаТреки.стррТрека.ТочкиШироты   = стрСписокШирота;
//		стзКартаТреки.стррТрека.ТочкиДолготы  = стрСписокДолгота;
//		стзКартаТреки.стррТрека.ТочкиВремя    = стрСписокВремя;
//		
//		//5 Добавление трека на карту
//		Если флВыделять Тогда
//			МТрекиОтложенные.Добавить(стзКартаТреки.стррТрека)
//		Иначе
//			КартаДобавитьТрекНаКарту(ОкноБраузера, стзКартаТреки.стррТрека);
//		КонецЕсли;
//		
//		//5. Создание маркера НачалоМаршрута.
//		МаркерНачалоМаршрута = стзКартаТреки.МаркерыТрека.Добавить();
//		//5.1 Заполнение значениями
//		МаркерНачалоМаршрута.Широта  	= Трек[0].Широта;
//		МаркерНачалоМаршрута.Долгота 	= Трек[0].Долгота;
//		МаркерНачалоМаршрута.КодИконки 	= 1; //Начало маршрута
//		МаркерНачалоМаршрута.Заголовок 	= Строка(Агент);
//		МаркерНачалоМаршрута.Описание  	= НСтр("ru = 'Начало:'") + " " + Формат(Трек[0].Время, "ДФ='HH:mm'");
//		МаркерНачалоМаршрута.Подвал 	= "";
//		МаркерНачалоМаршрута.Подсказка 	= "";
//		
//		//6. Добавление маркера НачалоМаршрута на карту.
//		КартаДобавитьМаркерНаКарту(ОкноБраузера, МаркерНачалоМаршрута);
//		
//		//7. Создание маркера КонецМаршрута.
//		МаркерКонецМаршрута	= стзКартаТреки.МаркерыТрека.Добавить();
//		МаркерКонецМаршрута.Широта  	 = Трек[Трек.Количество()-1].Широта;
//		МаркерКонецМаршрута.Долгота 	 = Трек[Трек.Количество()-1].Долгота;
//		МаркерКонецМаршрута.Заголовок = Строка(Агент);
//		МаркерКонецМаршрута.Подвал 	 = "";
//		МаркерКонецМаршрута.Подсказка = "";
//		Если РежимРеальногоВремени Тогда // внешний вид маркера конца зависит от режима реального времени
//			//Иконка
//			ВремяКонца = Трек[Трек.Количество()-1].Время;
//			ОтладкаДельта = 0; //900
//			//@skip-check use-non-recommended-method
//			РазницаВремени = (ТекущаяДата() - ВремяКонца + ОтладкаДельта) / 60;
//			Если РазницаВремени > 2 * ТаймингАктуальностиМестоположенияАгента Тогда
//				МаркерКонецМаршрута.КодИконки = 5;  // красный агент
//			ИначеЕсли РазницаВремени > ТаймингАктуальностиМестоположенияАгента Тогда
//				МаркерКонецМаршрута.КодИконки = 4;  // желтый агент
//			Иначе
//				МаркерКонецМаршрута.КодИконки = 3;  // зеленый агент
//			КонецЕсли; 
//			//Описание
//			МаркерКонецМаршрута.Описание = НСтр("ru = 'Время:'") + " "  + Формат(Трек[Трек.Количество()-1].Время, "ДФ='HH:mm'");
//		Иначе
//			//Иконка
//			МаркерКонецМаршрута.КодИконки = 2; //Конец маршрута
//			//Описание
//			МаркерКонецМаршрута.Описание = НСтр("ru = 'Конец:'") + " " + Формат(Трек[Трек.Количество()-1].Время, "ДФ='HH:mm'");
//		КонецЕсли; 
//
//		//8. Добавление маркера КонецМаршрута на карту.
//		КартаДобавитьМаркерНаКарту(ОкноБраузера, МаркерКонецМаршрута);
//		
//	КонецЦикла;
//	
//	//10. Вывод отложенных треков.
//	Для Каждого Элемент Из МТрекиОтложенные Цикл
//		КартаДобавитьТрекНаКарту(ОкноБраузера, Элемент);
//	КонецЦикла;
//	
//КонецПроцедуры

// sk_220630 MOD-2058 
//
// Возвращает структуру точки разрыва трека
// 
// Возвращаемое значение:
// 	Структура - точка разрыва 
//
&НаКлиенте
Функция ПолучитьСтруктуруТочкиРазрыва()
	
	СтррТочкаРазрыва = Новый Структура;
	СтррТочкаРазрыва.Вставить("Широта",  Неопределено); // gi_240301 -заменено с "" на Неопределено
	СтррТочкаРазрыва.Вставить("Долгота", Неопределено); // ...
	СтррТочкаРазрыва.Вставить("Время",   Неопределено); // ...  
	СтррТочкаРазрыва.Вставить("Есть",   Ложь); 
	
	Возврат СтррТочкаРазрыва;
	
КонецФункции     

// sk_220630 MOD-2058 
//
// Возвращает структуру точек трека
// 
// Возвращаемое значение:
// 	Структура - точки трека 
//
&НаКлиенте
Функция ПолучитьСтруктуруТочекТрека()
	
	СтррТочкиТрека = Новый Структура("ТочкиШироты,ТочкиДолготы,ТочкиВремя"); // gi_240301 
	
	Возврат СтррТочкиТрека;
	
КонецФункции

// sk_220630 MOD-2058 
//
// Форматирует координату
//
// Параметры:
//  Координата	 - Число - Координата
// 
// Возвращаемое значение:
//  Строка - Форматирование координаты
//   
&НаКлиенте
Функция ФорматироватьКоординату(Координата)
	
	Возврат Формат(Координата, "ЧРД=.; ЧРГ=' '; ЧГ=0");
	
КонецФункции     

// sk_220630 MOD-2058 
//
// Убирает при наличии концевой разделитель в переданной строке
//
// Параметры:
//  Строка		- Строка - исходная строка
//  Разделитель - Строка - символ разделителя
// 
// Возвращаемое значение:
//  Строка - строка без разделителя
//
&НаКлиенте
Функция УбратьКонцевойРазделитель(Строка, Разделитель = ";")
	
	Если Прав(Строка, 1) = Разделитель Тогда	
		Возврат Лев(Строка, СтрДлина(Строка) - 1);
	Иначе
		Возврат Строка;
	КонецЕсли;
	
КонецФункции

// sk_220630 MOD-2058 
//
// Заполняет структуру трека по параметрам.
//
// Параметры:
//  СтррТрек		 - Структура - заполняемая структура (результат)
//  СтррТочкиТрека	 - Структура - заполненная структура точек трека (результат)
//  ТолщинаЛинии	 - Число	 - толщина линии
//  ЦветМаршрута	 - Строка	 - цвет маршрута
//  Стиль			 - Строка	 - стиль линии
//  Прозрачность	 - Число	 - прозрачность
//  Агент			 - СправочникСсылка.Пользователи - агент
//
&НаКлиенте
Процедура ЗаполнитьСтруктуруТрека(СтррТрек, СтррТочкиТрека, ТолщинаЛинии, ЦветМаршрута, Стиль, Прозрачность, Агент) 
	
	СтррТочкиТрека.ТочкиШироты = УбратьКонцевойРазделитель(СтррТочкиТрека.ТочкиШироты);
	СтррТочкиТрека.ТочкиДолготы = УбратьКонцевойРазделитель(СтррТочкиТрека.ТочкиДолготы);	
	СтррТочкиТрека.ТочкиВремя = УбратьКонцевойРазделитель(СтррТочкиТрека.ТочкиВремя);	
	ЗаполнитьЗначенияСвойств(СтррТрек, СтррТочкиТрека);
	
	СтррТрек.Толщина 				= ТолщинаЛинии;
	СтррТрек.ЦветМаршрута 			= ЦветМаршрута;
	СтррТрек.Стиль   				= Стиль;
	СтррТрек.Прозрачность 			= Прозрачность;
	СтррТрек.ЛинияКоординатПолигона	= "";
	СтррТрек.ЛинияВремя				= "";
	СтррТрек.ЛинияРасстояние        	= "";
	СтррТрек.ЛинияНазвание 			= Строка(Агент);
	СтррТрек.ЛинияИД      			= Строка(Агент.УникальныйИдентификатор());
		
КонецПроцедуры

&НаКлиенте
Процедура КартаДобавитьМаркерыТТ()
	
	Если МакетЗагружен = Ложь Тогда
		Возврат; 	
	КонецЕсли;
	
	СтррМаркер = КартаПолучитьСтруктуруМаркера();
	
	Документ = Элементы.ПолеБраузера.Document;
	ОкноБраузера = Документ.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = Документ.defaultView; // Прочие браузеры
	КонецЕсли;     
	 
	Для Каждого Элемент Из КартаМаркерыТТ Цикл
		СтррМаркер.Широта  	 = Элемент.Широта;
		СтррМаркер.Долгота 	 = Элемент.Долгота;
		СтррМаркер.КодИконки = Элемент.КодИконки; 
		СтррМаркер.Заголовок = Строка(Элемент.Партнер);
		СтррМаркер.Описание  = Элемент.Описание;
		СтррМаркер.Подвал 	 = "";
		СтррМаркер.Подсказка = "";
		КартаДобавитьМаркерНаКарту(ОкноБраузера, СтррМаркер);
	КонецЦикла;
	
	Для Каждого Элемент Из КартаМаркерыДокументов Цикл
		СтррМаркер.Широта  	 = Элемент.Широта;
		СтррМаркер.Долгота 	 = Элемент.Долгота;
		СтррМаркер.КодИконки = 6; 
		СтррМаркер.Заголовок = Элемент.Заголовок;
		СтррМаркер.Описание  = Элемент.Описание;
		СтррМаркер.Подвал 	 = "";
		СтррМаркер.Подсказка = "";
		КартаДобавитьМаркерНаКарту(ОкноБраузера, СтррМаркер);
	КонецЦикла;	
	
КонецПроцедуры

// Процедура добавляет на карту маркер
//
// Параметры:
//  ОкноБраузера - Произвольный - Значение Элементы.ПолеБраузера.Document.parentWindow	 
//  стррМаркер	 - Структура 
//  
&НаКлиенте
Процедура КартаДобавитьМаркерНаКарту(ОкноБраузера = Неопределено, СтррМаркер)
	
	Если МакетЗагружен = Ложь Тогда
		Возврат; 	
	КонецЕсли;
			
	Если ОкноБраузера = Неопределено Тогда
		Документ = Элементы.ПолеБраузера.Document;
		ОкноБраузера = Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
	КонецЕсли;
	
	//КартаOSM
	//setMarker(lat, lon, icon, Header, Body, Footer, Help)
	//Yandex
	//setMarker(lat, lon, icon, Header, Body, Footer, Help, Order)
	//google
	//setMarker(lat, lon, icon, Header, Body, Footer, Help)
	
	ПутьИконки = МаркерПолучитьИконкуПоКоду(СтррМаркер.КодИконки);     	
	
	//@skip-check empty-except-statement
	Попытка
		Если ИсточникКарты = "YandexMaps" Тогда
			ОкноБраузера.setMarker(	
				СтррМаркер.Широта,
				СтррМаркер.Долгота, 
				ПутьИконки,
				СтррМаркер.Заголовок, 
				СтррМаркер.Описание, 
				СтррМаркер.Подвал, 
				СтррМаркер.Подсказка, 
				Ложь
			  );

		ИначеЕсли ИсточникКарты = "OSM" ИЛИ ИсточникКарты = "GoogleMaps" Тогда
			ОкноБраузера.setMarker(	
				СтррМаркер.Широта,
				СтррМаркер.Долгота, 
				ПутьИконки,
				СтррМаркер.Заголовок, 
				СтррМаркер.Описание, 
				СтррМаркер.Подвал, 
				СтррМаркер.Подсказка 
			  );
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаДобавитьМаркерТочкиТрекаПоВремени()
	
	Если 	МакетЗагружен = Ложь 
		ИЛИ НЕ ИспользоватьТочкиТрекаПоВремени	
		ИЛИ КартаТочкиТрекаПоВремени.Количество() = 0 
		ИЛИ Элементы.ПланФакт.ТекущиеДанные = Неопределено
		ИЛИ Элементы.ТочкиТрекаПоВремени.ТекущиеДанные = Неопределено
	Тогда
		Возврат;
	КонецЕсли;
	
	СтррМаркер = КартаПолучитьСтруктуруМаркера();
	
	//Получаем агента
	Агент = Элементы.ПланФакт.ТекущиеДанные.Агент;
	Если НЕ ЗначениеЗаполнено(Агент) Тогда 
		СтрокаРодитель = ПланФакт.НайтиПоИдентификатору(Элементы.ПланФакт.ТекущаяСтрока).ПолучитьРодителя();
		Если СтрокаРодитель <> неопределено Тогда
			Агент = СтрокаРодитель.Агент;
			Если НЕ ЗначениеЗаполнено(Агент) Тогда
				СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
				Если СтрокаРодитель <> Неопределено Тогда
					Агент = СтрокаРодитель.Агент;
					Если НЕ ЗначениеЗаполнено(Агент) Тогда
						СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
						Если СтрокаРодитель <> Неопределено Тогда
							Агент = СтрокаРодитель.Агент;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если ТипЗнч(Агент) <> Тип("СправочникСсылка.Пользователи") Тогда
		Агент = "";
	Конецесли;
	
 	СтррМаркер.Широта  	 = Элементы.ТочкиТрекаПоВремени.ТекущиеДанные.Широта;
	СтррМаркер.Долгота 	 = Элементы.ТочкиТрекаПоВремени.ТекущиеДанные.Долгота;
	СтррМаркер.КодИконки = 0;
	СтррМаркер.Заголовок = "Время: " + Строка(Формат(Элементы.ТочкиТрекаПоВремени.ТекущиеДанные.Время, "ДЛФ=В"));
	СтррМаркер.Описание  = Строка(Агент);
	СтррМаркер.Подвал 	 = "";
	СтррМаркер.Подсказка = "";
	КартаДобавитьМаркерНаКарту(Неопределено, СтррМаркер);
	
КонецПроцедуры	

&НаКлиенте
Процедура КартаДобавитьТрекНаКарту(ОкноБраузера = Неопределено, СтррТрек)
	
	Если МакетЗагружен = Ложь Тогда
		Возврат;
	КонецЕсли;		
	
	Если ОкноБраузера = Неопределено Тогда
		Документ = Элементы.ПолеБраузера.Document;
		ОкноБраузера = Документ.parentWindow; // IE
	    Если ОкноБраузера = Неопределено Тогда
	        ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
	КонецЕсли;
	
	//@skip-check empty-except-statement
	Попытка
		ОкноБраузера.setPolyline(
			СтррТрек.ТочкиШироты,				// Широта точек
			СтррТрек.ТочкиДолготы,              // Долгота точек
			СтррТрек.ТочкиВремя,                // Время точек
			СтррТрек.ЦветМаршрута,              // Цвет линии
			СтррТрек.Толщина,                   // Толщина линии 
			СтррТрек.Стиль,                     // Стиль линии
			СтррТрек.Прозрачность,              // Прозрачность линии
			СтррТрек.ЛинияКоординатПолигона,    // Не используем
			СтррТрек.ЛинияВремя,                // Не используем
			СтррТрек.ЛинияРасстояние,           // Не Используем
			СтррТрек.ЛинияНазвание,				// Название линии (Агент)
			СтррТрек.ЛинияИД                    // Идентификатор линии (ИДАгента)
			);
	Исключение						
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция КартаПолучитьСтруктуруМаркера()
	
	//@skip-check structure-consructor-too-many-keys
	СтррМаркер = Новый Структура("Широта, Долгота, КодИконки, Заголовок, Описание, Подвал, Подсказка");
	
	Возврат СтррМаркер; 
КонецФункции

&НаКлиенте
Функция КартаПолучитьСтруктуруТрека()
	
	//setPolyline(pointsLat, pointsLon, pointsTimes, strokeColor, strokeWidth, strokeStyle, opacity, 
	//				strPolygone, strDuration, strDistance, strHint, strID)
					
	СтррТрек = Новый Структура("ТочкиШироты, ТочкиДолготы, ТочкиВремя, ЦветМаршрута, Толщина, Стиль, Прозрачность," + 
									"ЛинияКоординатПолигона, ЛинияВремя, ЛинияРасстояние, ЛинияНазвание, ЛинияИД");
	
	Возврат СтррТрек; 
	
КонецФункции              

&НаКлиенте
Функция КартаПолучитьЦветаТреков(ОдинАгент)
		
	//Если в ПланФакт ОдинАгент, то цвета трека определяются через иконку ДатаТрека.
	//Если в ПланФакт несколько агентов, то цвет берется из уровня ДатаТрека.
	//Если В ПланФакт один агент, то иконка у него не указывается Иконка = 0
	
	//Ключ = если один агент в ПланФакт, то Дата. Если много агентов, то Агент
	//Значение Цвет, тип строка.	
	СтвЦвета = Новый Соответствие;
	
	ПланФактУровеньАгенты = ПланФакт.ПолучитьЭлементы();
	Для Каждого сдзПланФактУровеньАгенты Из ПланФактУровеньАгенты Цикл
		//1. Заполнение соответствие, где ключ Агент Режим НЕОдинАгент
		Если НЕ ОдинАгент Тогда
			Если сдзПланФактУровеньАгенты.Иконка >= ИконкиНомерПервоиИконкиТрека() - 1 Тогда
				СтвЦвета.Вставить(сдзПланФактУровеньАгенты.Агент, КартаПолучитьЦветаЛинии(сдзПланФактУровеньАгенты.Иконка));
			КонецЕсли;
			Продолжить;
		КонецЕсли;			
		
		//2. Заполнение структуры, где Ключ ДатаТрека. Режим ОдинАгент
		ПланФактУровеньДатаТрека = сдзПланФактУровеньАгенты.ПолучитьЭлементы();
		Для Каждого сдзПланФактУровеньДатаТрека Из ПланФактУровеньДатаТрека Цикл
			Если сдзПланФактУровеньДатаТрека.Иконка >= ИконкиНомерПервоиИконкиТрека() - 1 Тогда
				СтвЦвета.Вставить(сдзПланФактУровеньДатаТрека.ДатаТрека, КартаПолучитьЦветаЛинии(сдзПланФактУровеньДатаТрека.Иконка));
			КонецЕсли;
		КонецЦикла;
	КонецЦИкла;
	
	Возврат СтвЦвета;	
КОнецФункции

&НаКлиенте
Функция КартаПолучитьЦветаЛинии(Иконка)
	
	Результат = "";
	
	Если Иконка > 26 Тогда
		Результат = "786EC1"; 		//цвет по умолчанию	
	ИначеЕсли Иконка = 12 Тогда 	//Должно соответствовать ИконкиНомерПервоиИконкиТрека() !!!
		Результат = "FF0000"
	ИначеЕсли Иконка = 13 Тогда
		Результат = "000080";
	ИначеЕсли Иконка = 14 Тогда
		Результат = "2D9900";
	ИначеЕсли Иконка = 15 Тогда
		Результат = "B200FF";
	ИначеЕсли Иконка = 16 Тогда
		Результат = "FF7F7F";
	ИначеЕсли Иконка = 17 Тогда
		Результат = "00BAD9";
	ИначеЕсли Иконка = 18 Тогда
		Результат = "B5030C";
	ИначеЕсли Иконка = 19 Тогда
		Результат = "404040";
	ИначеЕсли Иконка = 20 Тогда
		Результат = "007380";
	ИначеЕсли Иконка = 21 Тогда
		Результат = "FF00E6";
	ИначеЕсли Иконка = 22 Тогда
		Результат = "997B00";
	ИначеЕсли Иконка = 23 Тогда
		Результат = "0034FF";
	ИначеЕсли Иконка = 24 Тогда
		Результат = "A85454";
	ИначеЕсли Иконка = 25 Тогда
		Результат = "00D935";
	ИначеЕсли Иконка = 26 Тогда
		Результат = "786EC1"; //цвет по умолчанию для всех иконок выше номера 26.
		
	Иначе
		Результат = "786EC1"; //Ошибка, цвет по умолчанию.
	КонецЕсли;	
	
	Результат = "#" + Результат;
	
	Возврат Результат;	

КонецФункции

&НаКлиенте
Функция ИконкиНомерПервоиИконкиТрека()
	//12 - Красный, цвет выделенного трека.
	Возврат 13;	
КонецФункции

//&НаКлиенте
//Функция ИконкиКоличествоИконок()
//	
//	Возврат 26;	
//КонецФункции

// СлужебныеПроцедурыИФункции_Карта_Контент
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Таймер

//  Процедура включает таймер обработки очереди событий для поля браузера,
//  при этом в стек событий (ТаймерОжидания.Очередь) добавляется новое событие.
//  Процедура обработки событий таймера объявляется в модуле формы и должна называться "Таймер_Обработчик".
//  Также должен быть объявлен реквизит формы ТаймерОжидания.
//  Реквизит формы "ТаймерОжидания" используется для организации очереди передачи команд в поле браузера,
//  т.к. поле браузера работает асинхронно и может запаздывать с реакцией на команды.
//
// Параметры:
//  Событие	 - Строка - Название события которое следует повторить.
//  Параметры - Произвольный - параметры события, зависит от типа события. Возможные значения:
//     Неопределено 
//     Массив Из СправочникСсылка.Пользователи
//     Структура 
//
&НаКлиенте
Процедура Таймер_Включить(Событие, Параметры = Неопределено)
	
	//1. Проверка переданного названия события
	Если	Событие  = "КартаПроверкаЗагрузкиМакета"							// Проверка загрузки макета
		ИЛИ Событие  = "КартаОбновитьМакет"   	   								// Обновить Макет Карты
		ИЛИ Событие  = "КартаОбновитьКарту"          							// Вывести на карту все треки и маркеры
		ИЛИ Событие  = "КартаПерейтиКМаркеру" 	 								// Перейти к маркеру на карте                       
		ИЛИ Событие  = "КартаПоказатьРегион"  									// Показать регион на карте
		ИЛИ (Событие = "ПланФактДобавить"  		И Параметры <> Неопределено)    // Добавить агента в дерево
		ИЛИ (Событие = "ПланФактУдалить"  		И Параметры <> Неопределено)    // Удалить агента из дерева
		ИЛИ (Событие = "ПланФактОбновить")                                    	// Обновить дерево
		ИЛИ (Событие = "ПланФактОчистить")                                     	// Очистить дерево
		ИЛИ Событие  = "МаркерыПромежутковВремени"								// Заполнить таблицу КартаТочкиТрекаПоВремени

	Тогда
	
		Если Событие = "ПланФактДобавить" ИЛИ Событие = "ПланФактУдалить"  Тогда	
			СтррОтбор = Новый Структура("Событие, Параметры", Событие, Параметры);
			МСТЗСобытия = ТаймерОжиданияСобытия.НайтиСтроки(СтррОтбор);
			Если МСТЗСобытия.Количество() = 0 Тогда
				СТЗСобытие = ТаймерОжиданияСобытия.Добавить();
				СТЗСобытие.Событие   = Событие;
				//@skip-check use-non-recommended-method
				СТЗСобытие.Время     = ТекущаяДата();
				
				Если ТипЗнч(Параметры) = Тип("Массив") Тогда
					//Нельзя передать массив в колонку ТЗ, выдает ошибку
					СЗПараметры = Новый СписокЗначений;
					Для Каждого Элемент Из Параметры Цикл
						СЗПараметры.Добавить(Элемент);
					КонецЦикла;
					СТЗСобытие.Параметры = СЗПараметры;
				КонецЕсли;				
				
			Иначе
				//@skip-check use-non-recommended-method
				МСТЗСобытия[0].Время = ТекущаяДата();
			КонецЕсли;
			
		Иначе
			СтррОтбор = Новый Структура("Событие", Событие);
			МСТЗСобытия = ТаймерОжиданияСобытия.НайтиСтроки(СтррОтбор);
			Если МСТЗСобытия.Количество() = 0 Тогда
				СТЗСобытие = ТаймерОжиданияСобытия.Добавить();
				СТЗСобытие.Событие = Событие;
			Иначе
				СТЗСобытие = МСТЗСобытия[0];
			КонецЕсли;
			//@skip-check use-non-recommended-method
			СТЗСобытие.Время     = ТекущаяДата();
			СТЗСобытие.Параметры = Параметры;
		
		КонецЕсли;		
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	Если ТаймерОжидания.Включен = Ложь И ТаймерОжиданияСобытия.Количество() > 0 Тогда
		ТаймерОжидания.Включен = Истина;
		//@skip-check use-non-recommended-method
		ТаймерОжидания.Время   = ТекущаяДата();
		ТаймерОжидания.Попытка = 0;
		ПодключитьОбработчикОжидания("Таймер_Обработчик", 1, Ложь);  //Циклический
	КонецЕсли;
	
КонецПроцедуры                                    

&НаКлиенте
Процедура Таймер_Обработчик()
	                 	
	Если ТаймерОжиданияСобытия.Количество() = 0 Тогда
		Таймер_Выключить();
		Возврат;
	КонецЕсли;    
	
	Если ТаймерОжидания.ОбработкаДанных = Ложь Тогда
		
		ТаймерОжидания.Попытка = ТаймерОжидания.Попытка + 1;
		
		ТаймерОжидания.ОбработкаДанных = Истина; //Разблокировка измениния данных
		
		//Возможно требуется запускать через попытку исключение
		Попытка
			Таймер_ОбработчикПланФакт();
			Таймер_ОбработчикМаркерыПромежутковВремени();
			Таймер_ОбработчикКарта();
			Результат = Истина;
		Исключение
			ВывестиСообщение("Ошибка подключения к модулю карты. Ошибка: " + ОписаниеОшибки());	
			Результат = Ложь;	
		КонецПопытки;
		
		Если ТаймерОжиданияСобытия.Количество() = 0 ИЛИ Результат = Ложь Тогда
			Таймер_Выключить();
		КонецЕсли;

	    ТаймерОжидания.ОбработкаДанных = Ложь; //Блокировка измениния данных
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Таймер_ОбработчикПланФакт()
	
	Если ТаймерОжиданияСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СттрОтбор = Новый Структура("Событие");
	
	//1. ПланФактОчистить
	СттрОтбор.Событие = "ПланФактОчистить";
	МСобытияПланФактОчистить = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	Если МСобытияПланФактОчистить.Количество() > 0 Тогда
		
		СобытиеПланФактОчистить = МСобытияПланФактОчистить[0];
		
		СттрОтбор.Событие = "ПланФактДобавить";
		СТЗПланФакт = СобытиеПланФактОчистить.НайтиСтроки(СттрОтбор);
		Для Каждого Элемент Из СТЗПланФакт Цикл
			Если Элемент.Время < СобытиеПланФактОчистить.Время Тогда
				ТаймерОжиданияСобытия.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;	
		
		СттрОтбор.Событие = "ПланФактУдалить";
		СТЗПланФакт = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
		Для Каждого Элемент Из СТЗПланФакт Цикл
			Если Элемент.Время < СобытиеПланФактОчистить.Время Тогда
				ТаймерОжиданияСобытия.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;	
			
		СттрОтбор.Событие = "ПланФактОбновить";
		СТЗПланФакт = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
		Для Каждого Элемент Из СТЗПланФакт Цикл
			Если Элемент.Время < СобытиеПланФактОчистить.Время Тогда
				ТаймерОжиданияСобытия.Удалить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		ТаймерОжиданияСобытия.Удалить(СобытиеПланФактОчистить);
		
		ПланФактОбновить("ПланФактОчистить");
		
	КонецЕсли;
	

	//2. ПланФактДобавить и ПланФактУдалить
	СтвАгентыДобавить = Новый Соответствие;
	СтвАгентыУдалить  = Новый Соответствие;
	
	СттрОтбор.Событие   = "ПланФактДобавить";
	МСТЗПланФактДобавить = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	Для Каждого Элемент Из МСТЗПланФактДобавить Цикл
		Для каждого ссзАгент Из Элемент.Параметры Цикл
			Агент = ссзАгент.Значение;
			ПоискВремяДобавить = СтвАгентыДобавить.Получить(Агент);
			Если ПоискВремяДобавить = Неопределено Тогда
				СтвАгентыДобавить.Вставить(Агент, Элемент.Время);
			ИначеЕсли ПоискВремяДобавить < Элемент.Время Тогда
				СтвАгентыДобавить[Агент] = Элемент.Время;
			КонецЕсли;			
		КонецЦикла;	
		ТаймерОжиданияСобытия.Удалить(Элемент);	
	КонецЦикла;
	
	СттрОтбор.Событие   = "ПланФактУдалить";
	МСТЗПланФактУдалить  = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	
	Для Каждого Элемент Из МСТЗПланФактУдалить Цикл
		Для каждого ссзАгент Из Элемент.Параметры Цикл
			Агент = ссзАгент.Значение;
			//Удаляем агента из ствАгентыДобавить, если далее он удаляется
			Если СтвАгентыДобавить.Получить(Агент) <> Неопределено И ПоискВремяДобавить < Элемент.Время Тогда 
				СтвАгентыДобавить.Удалить(Агент);
			КонецЕсли;
			//Добавляем в ствАгентыУдалить	
			Если ПоискВремяДобавить = Неопределено ИЛИ ПоискВремяДобавить < Элемент.Время Тогда
				ПоискВремяУдалить = СтвАгентыУдалить.Получить(Агент);
				Если ПоискВремяУдалить = Неопределено Тогда
					СтвАгентыУдалить.Вставить(Агент, Элемент.Время);
				ИначеЕсли ПоискВремяУдалить < Элемент.Время Тогда
					СтвАгентыУдалить[Агент] = Элемент.Время;	
				КонеЦесли;  				
			КонецЕсли;
		КонецЦикла;	
		ТаймерОжиданияСобытия.Удалить(Элемент);	
	КонецЦикла;

	Если СтвАгентыДобавить.Количество() > 0 Тогда
		МАгенты = Новый Массив;
		Для Каждого Элемент Из СтвАгентыДобавить Цикл
			МАгенты.Добавить(Элемент.Ключ);	
		КонецЦикла;
		ПланФактОбновить("ПланФактДобавить", МАгенты);
	КонецЕсли;
	
	Если СтвАгентыУдалить.Количество() > 0 Тогда
		МАгенты = Новый Массив;
		Для Каждого Элемент Из СтвАгентыУдалить Цикл
			МАгенты.Добавить(Элемент.Ключ);	
		КонецЦикла;
		ПланФактОбновить("ПланФактУдалить", МАгенты);
	КонецЕсли;
	
	//3. ПланФактОбновить
	СттрОтбор.Событие = "ПланФактОбновить";
	МСобытияПланФактОбновить = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	Если МСобытияПланФактОбновить.Количество() > 0 Тогда
		ТаймерОжиданияСобытия.Удалить(МСобытияПланФактОбновить[0]);
		ПланФактОбновить("ПланФактУдалить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Таймер_ОбработчикМаркерыПромежутковВремени()
	
	Если ТаймерОжиданияСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СттрОтбор = Новый Структура("Событие");
	
	СттрОтбор.Событие = "МаркерыПромежутковВремени";
	МСобытия = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	Если МСобытия.Количество() > 0 Тогда
		ТаймерОжиданияСобытия.Удалить(МСобытия[0]);
		МаркерыПромежутковВремени(МСобытия[0].Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Таймер_ОбработчикКарта()

	Если ТаймерОжиданияСобытия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СттрОтбор = Новый Структура("Событие");

	 //1. КартаОбновитьМакет
	СттрОтбор.Событие = "КартаОбновитьМакет";
	МСобытия = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	Если МСобытия.Количество() > 0  Тогда
				
		//Удалить проверку КартаПроверкаЗагрузкиМакета, это задание добавится при загрузке контекста.
		СттрОтбор.Событие = "КартаПроверкаЗагрузкиМакета";
		МСобытияПроверкаЗагрузкиМакета = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
		Для Каждого Элемент Из МСобытияПроверкаЗагрузкиМакета Цикл
			ТаймерОжиданияСобытия.Удалить(Элемент);	
		КонецЦикла;	
		
		Результат = КартаОбновитьТекущийМакет();
		Если Результат = Истина тогда
			// Макет удачно загружен, удаляем событие
			ТаймерОжиданияСобытия.Удалить(МСобытия[0]);
		Иначе
			// Макет НЕ загружен, обновляем событие
			ДействиеОбработкаСобытий("КартаОбновитьМакет");	
		КонецЕсли;  			
		
		Возврат; // Карта еще не загружена.
	КонецЕсли;	

	//2. КартаПроверкаЗагрузкиМакета
	СттрОтбор.Событие = "КартаПроверкаЗагрузкиМакета";
	МСобытия = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	Если МСобытия.Количество() > 0  Тогда
		МакетЗагружен = Ложь;
		Документ = Элементы.ПолеБраузера.Document;
		ОкноБраузера = Документ.parentWindow; // IE
		Если ОкноБраузера = Неопределено Тогда
			ОкноБраузера = Документ.defaultView; // Прочие браузеры
		КонецЕсли;
		Если ОкноБраузера.onloadOK = Истина И ОкноБраузера.initializeOK = Ложь Тогда
			//перегрузить карту, скрипт не загрузился
			МакетЗагружен = Ложь;
			Если ТаймерОжидания.Попытка > 1 Тогда
				ДействиеОбработкаСобытий("КартаОбновитьМакет");
				Если ТаймерОжидания.Попытка = 5 Тогда
					ВывестиСообщение("Не удалось загрузить макет карты. Возможно отсутствует соединение с Интернет.");	
					ВывестиСообщение("Ожидание подключения...");	
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОкноБраузера.onloadOK = Истина И ОкноБраузера.initializeOK = Истина Тогда
			//Скрипт загрузился
			МакетЗагружен = Истина;
		Иначе
			//Скрипт еще не загрузился
			МакетЗагружен = Ложь;
		КонецЕсли;
		
		Если МакетЗагружен = Истина Тогда
			ТаймерОжиданияСобытия.Удалить(МСобытия[0]);
			ДействиеОбработкаСобытий("КартаОбновитьКарту"); //Добавление в очередь 
			Если ТаймерОжидания.Попытка > 5 Тогда 
				ВывестиСообщение("Макет карты загружен.");	
			КонецЕсли;					
		КонецЕсли;
	КонецЕсли;
	
	//Проверка.
	Если ТаймерОжиданияСобытия.Количество() = 0 ИЛИ МакетЗагружен = Ложь Тогда
		Возврат;
	КонецЕсли;      
	
	//3. КартаОбновитьКарту
	СттрОтбор.Событие = "КартаОбновитьКарту";
	МСобытия = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	Если МСобытия.Количество() > 0  Тогда
		ТаймерОжиданияСобытия.Удалить(МСобытия[0]);
		КартаОбновитьКарту();
	КонецЕсли;
	
	//4. ПерейтиКМаркеру или ПоказатьРегион. Обрабатываем последнее событие.
	СтррПоследнееСобытие = Новый Структура("Время, Событие, Параметры", Дата(1,1,1), Неопределено, Неопределено);
	СттрОтбор.Событие = "КартаПерейтиКМаркеру";
	СобытиеПерейтиКМаркеру = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	Для Каждого Элемент Из СобытиеПерейтиКМаркеру Цикл
		Если Элемент.Время > СтррПоследнееСобытие.Время Тогда
			СтррПоследнееСобытие.Время 		= Элемент.Время;
			СтррПоследнееСобытие.Событие 	= Элемент.Событие;
			СтррПоследнееСобытие.Параметры 	= Элемент.Параметры;
		КонецЕсли;
		ТаймерОжиданияСобытия.Удалить(Элемент);				
	КонецЦикла;
	СттрОтбор.Событие = "КартаПоказатьРегион";
	СобытиеПоказатьРегион  = ТаймерОжиданияСобытия.НайтиСтроки(СттрОтбор);
	Для Каждого Элемент Из СобытиеПоказатьРегион Цикл
		Если Элемент.Время > СтррПоследнееСобытие.Время Тогда
			СтррПоследнееСобытие.Время 		= Элемент.Время;
			СтррПоследнееСобытие.Событие 	= Элемент.Событие;
			СтррПоследнееСобытие.Параметры 	= Элемент.Параметры;
		КонецЕсли;
		ТаймерОжиданияСобытия.Удалить(Элемент);				
	КонецЦикла;
	Если СтррПоследнееСобытие.Событие = "КартаПерейтиКМаркеру" Тогда
		КартаПерейтиКМаркеру(СтррПоследнееСобытие.Параметры);
	ИначеЕсли СтррПоследнееСобытие.Событие = "КартаПоказатьРегион" Тогда
		КартаПоказатьРегион(СтррПоследнееСобытие.Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Таймер_Выключить()
	
	ТаймерОжидания.Включен = Ложь;
	ТаймерОжиданияСобытия.Очистить();
	ОтключитьОбработчикОжидания("Таймер_Обработчик");
	
КонецПроцедуры
	                      	
&НаКлиенте
Процедура ДействиеОбработкаСобытий(Событие, Параметры = Неопределено)
	
	Если 	(Событие  = "ПланФактДобавить"		И Параметры <> Неопределено)	// Добавить в дерево агентов
		ИЛИ (Событие  = "ПланФактУдалить"  		И Параметры <> Неопределено)    // Удалить из дерева агентов
		ИЛИ (Событие  = "ПланФактОбновить")                                     // Обновить дерево
		ИЛИ (Событие  = "ПланФактОчистить")                                     // Очистить дерево
		ИЛИ	 Событие  = "КартаОбновитьМакет"   	   								// Обновить Макет Карты
		ИЛИ	 Событие  = "КартаОбновитьКарту"          							// Вывести на карту все треки и маркеры
		ИЛИ  Событие  = "КартаПерейтиКМаркеру" 								 	// Перейти к маркеру на карте                       
		ИЛИ  Событие  = "КартаПоказатьРегион"  									// Показать регион на карте
		ИЛИ  Событие  = "МаркерыПромежутковВремени"								// Заполнить таблицу КартаТочкиТрекаПоВремени
	Тогда
		Если ТаймерОжидания.ОбработкаДанных = Истина Тогда
			Таймер_Включить(Событие, Параметры);
		Иначе
			ТаймерОжидания.ОбработкаДанных = Истина;
			
			Если Событие = "ПланФактДобавить" ИЛИ Событие = "ПланФактУдалить" ИЛИ Событие = "ПланФактОбновить" ИЛИ Событие = "ПланФактОчистить" Тогда
				ПланФактОбновить(Событие, Параметры);
				
			ИначеЕсли Событие = "КартаОбновитьМакет" Тогда
				Если КартаОбновитьТекущийМакет() = Ложь Тогда
					Таймер_Включить(Событие);
				КонецЕсли;
				
			ИначеЕсли Событие = "КартаОбновитьКарту" Тогда	
				КартаОбновитьКарту();
				
			ИначеЕсли Событие = "КартаПерейтиКМаркеру" Тогда	
				КартаПерейтиКМаркеру(Параметры);	
				
			ИначеЕсли Событие = "КартаПоказатьРегион" Тогда	
				КартаПоказатьРегион(Параметры);
				
			ИначеЕсли Событие  = "МаркерыПромежутковВремени" Тогда
				МаркерыПромежутковВремени(Параметры);
				
			КонецЕсли;			
			
			ТаймерОжидания.ОбработкаДанных = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Таймер
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ОптимизацияGPSтрека
// Процедуры перенесены из УД ОптимизацияТреков.epf ver 1.0.0.11 2018.08.10(1)

&НаСервере
Процедура ВыполнитьОптимизацию(ТрекВТаблице)
	
	
	//ДлинаХэша (не точно):
	//7 - это 76 м.
	//8 - это 19 м.
	//9 - Это наверно 5 м.
	ДлинаХэша = 7;
	МинимальноеКоличествоТочекСОднимХэшом = 1;
	
	УдалениеОдинаковыхИНулевыхТочек(ТрекВТаблице);
	ОчисткаОтМусораГеоХэшинг(ТрекВТаблице, ДлинаХэша, МинимальноеКоличествоТочекСОднимХэшом); //  Убирает скачки.
	УдалениеОдинаковыхИНулевыхТочек(ТрекВТаблице);
	
КонецПроцедуры

&НаСервере
// Удаляет точки с одинаковыми координатами.
// Удаляет точки с нулевыми координатами.  
//
Процедура УдалениеОдинаковыхИНулевыхТочек(ТрекВТаблице)

	Если ТрекВТаблице.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиБезМусора = Новый Массив;
	СтррКоординатыПредыдущейСтроки = Новый Структура("Широта, Долгота", ТрекВТаблице[0].Широта, ТрекВТаблице[0].Долгота);
			
	Для Каждого Элемент Из ТрекВТаблице Цикл
		//Одинаковые точки
		Если Элемент.Широта = СтррКоординатыПредыдущейСтроки.Широта И Элемент.Долгота = СтррКоординатыПредыдущейСтроки.Долгота Тогда
			Продолжить;
		КонецЕсли;
		//Нулевые кординаты
		
		//(( sk_220630 MOD-2058
		//Если Элемент.Широта < 1000 Или Элемент.Долгота < 1000 Тогда
		//	Продолжить;	
		//КонецЕсли;  
		
		Если Элемент.Широта = 0 Или Элемент.Долгота = 0 Тогда
			Продолжить;	
		КонецЕсли;
		//)) sk_220630
		
		СтррКоординатыПредыдущейСтроки.Широта  = Элемент.Широта;
		СтррКоординатыПредыдущейСтроки.Долгота = Элемент.Долгота;
		СтрокиБезМусора.Добавить(Элемент);
	КонецЦикла;
	
	Если СтрокиБезМусора.Количество() <> ТрекВТаблице.Количество() Тогда
		ТрекВТаблице = ТрекВТаблице.Скопировать(СтрокиБезМусора);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - Очистка от мусора гео хэшинг
// Очищает трек от "мусора" используя алгоритм геохэширования
// 
//Параметры:
//  ТрекВТаблице							 - 	ТаблицаЗначений - трек в таблице значений
//  ДлинаХэша								 - 	Число - длина вычисляемых хэшей для точек
//  МинимальноеКоличествоТочекСОднимХэшом	 - 	Число - количество точек с повторяющимся хэшем, которое указывает, что это была действительно точка, а не "скачок"
&НаСервере
Процедура ОчисткаОтМусораГеоХэшинг(ТрекВТаблице, ДлинаХэша, МинимальноеКоличествоТочекСОднимХэшом)
	
	ТрекВТаблице.Колонки.Добавить("Хэш");
	ТрекВТаблице.Колонки.Добавить("Количество");
	ТрекВТаблице.Колонки.Добавить("ОдинаковыхХэшейПодряд");
	ТрекВТаблице.Индексы.Добавить("Хэш");//Индекс!
	
	
	ХэшПредыдущейСтроки 	= "";
	ОдинаковыхХэшейПодряд 	= 1;
	//НачальнаяТочка 			= Неопределено;
	//КонечнаяТочка 			= Неопределено;
	СтрокиБезМусора 		= Новый Массив;
	ПредыдущаяСтрока 		= Неопределено;
	
	//ПерваяСтрокаСКоординатами 		= Неопределено;
	//ПоследняяСтрокаСКоординатами 	= Неопределено;
	
	Для Каждого Строка из ТрекВТаблице Цикл
		
		ШиротаWGS  = КонвертироватьNMEAWGS84(Строка.Широта);
		ДолготаWGS = КонвертироватьNMEAWGS84(Строка.Долгота);
		
		//Строка.Хэш = КодироватьВГеоХэш(Строка.ШиротаWGS, Строка.ДолготаWGS, ДлинаХэша);
		Строка.Хэш = КодироватьВГеоХэш(ШиротаWGS, ДолготаWGS, ДлинаХэша);
		
		
		Строка.Количество = 1;
		
		Если Строка.Хэш <> ХэшПредыдущейСтроки Тогда
			Если ОдинаковыхХэшейПодряд < МинимальноеКоличествоТочекСОднимХэшом Тогда 
				Если ПредыдущаяСтрока <> Неопределено Тогда
					СтрокиБезМусора.Удалить(СтрокиБезМусора.Количество()-1);
					Если СтрокиБезМусора.Количество() > 0 Тогда //откроем предыдущий отрезок
						
						Если СтрокиБезМусора.Получить(СтрокиБезМусора.Количество()-1).Хэш = Строка.Хэш Тогда
							
							СтрокиБезМусора.Удалить(СтрокиБезМусора.Количество()-1);
							ОдинаковыхХэшейПодряд = СтрокиБезМусора.Получить(СтрокиБезМусора.Количество()-1).ОдинаковыхХэшейПодряд+1;
							ПредыдущаяСтрока = Строка;
							ХэшПредыдущейСтроки = Строка.Хэш;
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			Иначе
				
				Если СтрокиБезМусора.Количество() > 0 Тогда
					СтрокиБезМусора.Получить(СтрокиБезМусора.Количество()-1).ОдинаковыхХэшейПодряд = ОдинаковыхХэшейПодряд;
				КонецЕсли;
				
				Если ПредыдущаяСтрока <> Неопределено Тогда
					СтрокиБезМусора.Добавить(ПредыдущаяСтрока);
				КонецЕсли;
				
			КонецЕсли;
			ХэшПредыдущейСтроки = Строка.Хэш;
			СтрокиБезМусора.Добавить(Строка);
			ОдинаковыхХэшейПодряд = 1;
		Иначе			
			ОдинаковыхХэшейПодряд = ОдинаковыхХэшейПодряд + 1;
		КонецЕсли;
		ПредыдущаяСтрока = Строка;
	КонецЦикла;
	
	Если СтрокиБезМусора.Количество() <> ТрекВТаблице.Количество() Тогда
		
		СтрокиБезМусора[0].Время = ТрекВТаблице[0].Время;
		СтрокиБезМусора[СтрокиБезМусора.Количество()-1].Время = ТрекВТаблице[ТрекВТаблице.Количество()-1].Время;
		
		ТрекВТаблице = ТрекВТаблице.Скопировать(СтрокиБезМусора);
	КонецЕсли;
	
	ТрекВТаблице.Сортировать("Время Возр");

КонецПроцедуры

&НаСервере
// Функция - Кодировать в гео хэш
//			Кодирование координат в геохэш
// Параметры:
//  Широта		 - 	Число - координата широты
//  Долгота		 - 	Число - координата долготы
//  ДлинаХэша	 - 	Число - длина хэша, который необходимо получить
// 
// Возвращаемое значение:
//  Строка - полученный хэш
Функция КодироватьВГеоХэш(Широта, Долгота, ДлинаХэша)
	
	Символы32 = "0123456789bcdefghjkmnpqrstuvwxyz";
	
	Хэш = "";
	ДлинаЧастиХэша = 0;
	
	МинШирота = -90;
	МаксШирота = 90;
	
	МинДолгота = -180;
	МаксДолгота = 180;
	
	ПоДолготе = Истина;
	Бит = 0;
	Индекс = 0;
	
	Пока ДлинаЧастиХэша < ДлинаХэша Цикл
		
		Если ПоДолготе Тогда
			СредняяДолгота = (МинДолгота + МаксДолгота)/2;
			Если Долгота >= СредняяДолгота Тогда
				Индекс = Индекс*2+1;
				МинДолгота = СредняяДолгота;
			Иначе
				Индекс = Индекс*2;
				МаксДолгота = СредняяДолгота;
			КонецЕсли;
		Иначе
			СредняяШирота = (МинШирота + МаксШирота)/2;
			Если Широта >= СредняяШирота Тогда
				Индекс = Индекс*2+1;
				МинШирота = СредняяШирота;
			Иначе
				Индекс = Индекс*2;
				МаксШирота = СредняяШирота;
			КонецЕсли;
		КонецЕсли;
		
		ПоДолготе = НЕ ПоДолготе;
		
		Если Бит < 4 Тогда
			Бит = Бит + 1;
		Иначе
			Хэш = Хэш + Сред(Символы32, Индекс+1, 1); //Индекс+1 - т.к. нумерация с 1 в строке
			Бит = 0;
			Индекс = 0;
			ДлинаЧастиХэша = ДлинаЧастиХэша + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Хэш;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ОптимизацияGPSтрека
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Треки_Маркеры

// Считываем треки Агента из файла и записываем в реквизит формы КартаТреки 
// Изменяет строчку в ПланФакт.
// Действия с План факт: ПланФактДобавить, ПланФактУдалить, ПланФактОбновить, ПланФактОчистить.
//
// Параметры:
//  МАгенты	 - Массив Из СправочникСсылка.Пользователи - Агенты которых требуется добавить или удалить в ПланФакт. Не используется если Действие = ПланФактОчистить или ПланФактОбновить
//  Действие - Строка - Действие события ПланФакт
//
&НаСервере
Процедура ТрекиПрочитатьТрекиАгентов(МАгенты, Действие)
		
	//1.Удаление, добавление, очищение строчек в КартаТреки
	Если Действие = "ПланФактДобавить" И МАгенты.Количество() > 0 Тогда
		//1.1 Добавление
		СтррПоискТрекаАгента = Новый Структура("Агент, ДатаТрека"); 						
		ПланФактУровеньАгенты = Планфакт.ПолучитьЭлементы();
		Для Каждого сдзПланФактУровеньАгенты Из ПланФактУровеньАгенты Цикл
			Если МАгенты.Найти(сдзПланФактУровеньАгенты.Агент) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПланФактУровеньДатаТрека = сдзПланФактУровеньАгенты.ПолучитьЭлементы();
			Для Каждого сдзПланФактУровеньДатаТрека Из ПланФактУровеньДатаТрека Цикл
				СтррПоискТрекаАгента.Агент 	   = сдзПланФактУровеньАгенты.Агент;
				СтррПоискТрекаАгента.ДатаТрека = сдзПланФактУровеньДатаТрека.ДатаТрека; 
				мПоискКартаТреки = КартаТреки.НайтиСтроки(СтррПоискТрекаАгента);
				Если мПоискКартаТреки.Количество() = 0 Тогда
					стзНоваяСтрока = КартаТреки.Добавить();
					стзНоваяСтрока.Агент 	 = СтррПоискТрекаАгента.Агент;
					стзНоваяСтрока.ДатаТрека = СтррПоискТрекаАгента.ДатаТрека; 					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли Действие = "ПланФактУдалить" И МАгенты.Количество() > 0 Тогда
		//1.2 Удаление
		СтррПоискАгента = Новый Структура("Агент");
		Для Каждого Элемент из МАгенты Цикл 
			СтррПоискАгента.Агент = Элемент;
			мПоискКартаТреки = КартаТреки.НайтиСтроки(СтррПоискАгента);
			Для каждого Элемент Из мПоискКартаТреки Цикл
				КартаТреки.Удалить(Элемент);				
			КонецЦикла;
		КонецЦикла;
		Возврат;  
		
	ИначеЕсли Действие = "ПланФактОбновить" Тогда
		//1.3 Заново создаем таблицу КартаТреки
		КартаТреки.Очистить();
		ПланфактУровеньАгенты = Планфакт.ПолучитьЭлементы();
		Для Каждого сдзПланфактУровеньАгенты Из ПланфактУровеньАгенты Цикл
			ПланФактУровеньДатаТрека = сдзПланфактУровеньАгенты.ПолучитьЭлементы();
			Для Каждого сдзПланФактУровеньДатаТрека Из ПланФактУровеньДатаТрека Цикл
				стзНоваяСтрока = КартаТреки.Добавить();
				стзНоваяСтрока.Агент 	 = сдзПланфактУровеньАгенты.Агент;
				стзНоваяСтрока.ДатаТрека = сдзПланФактУровеньДатаТрека.ДатаТрека;	
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли Действие = "ПланФактОчистить" Тогда
		//1.4 Удаляем все записи
		КартаТреки.Очистить();
		Возврат;
		
	Иначе
		//1.5 Ошибка
		Возврат;
		
	КонецЕсли;
	
	//2. ОБНОВИТЬ КартаТреки.Трек и КартаТреки.РегионТрека и КартаТреки.ТрекЕсть
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ОбщийКаталогТреков = ТекОбъект.ПодкаталогДанных("Треки", СтррКонтекст.КаталогДанных);  			// Общ каталог треков
	ТЗНастройкиАгентов = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиАгентов"); 					// НастройкиАгентов
	
	//3. Обновление, заполнение данных.
	Для Каждого стзКартаТреки Из КартаТреки Цикл 	
		//3.1 агент
		Агент = стзКартаТреки.Агент;
				
		//При действии ПланФактДобавить обновляем в тз КартаТреки только добавленные строки. 
		Если Действие = "ПланФактДобавить" Тогда
			мПоиск = МАгенты.Найти(Агент);
			Если мПоиск = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Обнуляем данные
		стзКартаТреки.Трек.Очистить();
		стзКартаТреки.ТрекЕсть			= Ложь;
		стзКартаТреки.РегионТрека		= Неопределено;    
		//(( sk_220630 MOD-2058
		стзКартаТреки.Подготовлен		= Ложь; 
		стзКартаТреки.МаркерыТрека.Очистить();		
		стзКартаТреки.ОтрезкиТрека.Очистить();
		//)) sk_220630
		
		//Каталог треков Агента
		стзПоискНастройкиАгента = ТЗНастройкиАгентов.Найти(Агент, "Пользователь");
		Если стзПоискНастройкиАгента = Неопределено ИЛИ ПустаяСтрока(стзПоискНастройкиАгента.КаталогОбмена) Тогда
			Текст = НСтр("ru = 'У агента ""%1"" не указан каталог обмена данными. Чтение треков невозможно.'");
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Текст, Агент));
			Продолжить;
		Иначе	
			КаталогТрековАгента = ОбщийКаталогТреков + стзПоискНастройкиАгента.КаталогОбмена + "\";
		КонецЕсли;
		
		//Получение Трека Агента из файла
		стррТрекАгента = ТекОбъект.ТрекОткрытьФайл(стзКартаТреки.ДатаТрека, КаталогТрековАгента);
		Если стррТрекАгента.Трек.Количество() = 0 Тогда
			Продолжить;
		КонеЦесли;
		
		// Оптимизация
		Если ИпользоватьОптимизациюGPSтрека Тогда
			ВыполнитьОптимизацию(стррТрекАгента.Трек);
		КонецЕсли;
			
		//Заполняем Треки.Трек
		Для Каждого стзТрека Из стррТрекАгента.Трек Цикл
			Если НЕ ТрекТолькоПоСигналуGPS ИЛИ (ТрекТолькоПоСигналуGPS И стзТрека.ИсточникСигнала = 1) Тогда
				//Треки.Трек 
				стзНоваяСтрока = стзКартаТреки.Трек.Добавить();
				ЗаполнитьЗначенияСвойств(стзНоваяСтрока, стзТрека);
			КонецЕсли;
		КонецЦикла;
		
		//Заполняем Треки.ТрекЕсть
		Если стзКартаТреки.Трек.Количество() = 0 Тогда
			стзКартаТреки.ТрекЕсть = Ложь;
			стзКартаТреки.РегионТрека = Неопределено; 
			Продолжить;
		Иначе
			стзКартаТреки.ТрекЕсть = Истина;
		КонецЕсли;            
		
		//Заполняем Треки.РегионТрека 
		//(( sk_220630 MOD-2058
		//КопияТрек = стзКартаТреки.Трек.Выгрузить( ,"Широта, Долгота");
		//КопияТрек.Сортировать("Широта");
		//стзКартаТреки.РегионТрека = Новый Структура("минШирота, минДолгота, максШирота, максДолгота");
		//стзКартаТреки.РегионТрека.минШирота   = КопияТрек[0].Широта;
		//стзКартаТреки.РегионТрека.максШирота  = КопияТрек[КопияТрек.Количество()-1].Широта;
		//КопияТрек.Сортировать("Долгота");
		//стзКартаТреки.РегионТрека.минДолгота  = КопияТрек[0].Долгота;
		//стзКартаТреки.РегионТрека.максДолгота = КопияТрек[КопияТрек.Количество()-1].Долгота;
		стзКартаТреки.РегионТрека = ПолучитьРегионТрека(стррТрекАгента.Трек);	
		//)) sk_220630
		
	КонецЦикла;
		
КонецПроцедуры     

// sk_220630 MOD-2058
//
// Возвращает регион трека
//
// Параметры:
//  ТЗТрек	 - ТаблицаЗначений 	 - трек
// 
// Возвращаемое значение:
// 	Структура - регион трека 
//
&НаСервере
Функция ПолучитьРегионТрека(ТЗТрек)  
	
	//@skip-check structure-consructor-too-many-keys
	СтррРегионТрека = Новый Структура("минШирота, минДолгота, максШирота, максДолгота", 9999, 9999, 0, 0);
	
	Если ТЗТрек.Количество() = 0 Тогда
		Возврат СтррРегионТрека;
	КонецЕсли;
	
	МСтрокиТрека = Новый Массив;	
	Для Каждого стзСтрока Из ТЗТрек Цикл	
		Если стзСтрока.Широта <= 0 Или стзСтрока.Долгота <= 0 Тогда
			Продолжить;	
		КонецЕсли;  
		МСтрокиТрека.Добавить(стзСтрока);
	КонецЦикла;     
	
	Если МСтрокиТрека.Количество() = 0 Тогда
		Возврат СтррРегионТрека;
	КонецЕсли;
	
	ТЗТрекДляРегиона = ТЗТрек.Скопировать(МСтрокиТрека, "Широта, Долгота");	 
	ТЗТрекДляРегиона.Сортировать("Широта");
	СтррРегионТрека.минШирота   = ТЗТрекДляРегиона[0].Широта;
	СтррРегионТрека.максШирота  = ТЗТрекДляРегиона[ТЗТрекДляРегиона.Количество()-1].Широта;
	ТЗТрекДляРегиона.Сортировать("Долгота");
	СтррРегионТрека.минДолгота  = ТЗТрекДляРегиона[0].Долгота;
	СтррРегионТрека.максДолгота = ТЗТрекДляРегиона[ТЗТрекДляРегиона.Количество()-1].Долгота;

	Возврат СтррРегионТрека; 
	
КонецФункции	

&НаСервере
Функция ТрекПолучитьДанныеДляКоординаты(СтрИдентификаторАгента, Широта, Долгота)

	//@skip-check structure-consructor-too-many-keys
	СтррРезультат = Новый Структура("КодОшибки,ТекстОшибки,Агент,Данные");
	
	Идентификатор = Новый УникальныйИдентификатор(СтрИдентификаторАгента);
	
	Агент = Справочники.Пользователи.ПолучитьСсылку(Идентификатор);
	Если Не ЗначениеЗаполнено(Агент) Тогда
		СтррРезультат.КодОшибки   = "АгентНеНайден";
		СтррРезультат.ТекстОшибки = СтрШаблон_(НСтр("ru = 'Не найден агент с идентификатором ""%1""!'"), СтрИдентификаторАгента);
		Возврат СтррРезультат;
	КонецЕсли; 
	
	СтррПоиск = Новый Структура("Агент", Агент);
	МСтроки = КартаТреки.НайтиСтроки(СтррПоиск);
	Если МСтроки.Количество() = 0 Тогда
		СтррРезультат.КодОшибки   = "ТрекНеНайден";
		СтррРезультат.ТекстОшибки = СтрШаблон_(НСтр("ru = 'Не найден трек для агента ""%1""!'"), Агент);
		Возврат СтррРезультат;
	КонецЕсли; 
	
	СтррРезультат.Агент  = Агент;
    СтррРезультат.Данные = "";
	
	Возврат СтррРезультат;
	
КонецФункции

//Заполняет реквизит формы тз КартаМаркерыТТ
// Действия с План факт: ПланФактДобавить, ПланФактУдалить, ПланФактОбновить, ПланФактОчистить.
//
// Параметры:
//  Действие	 - Строка	 - Действие события ПланФакт
&НаСервере
Процедура МаркерыЗаполнитьКартаМаркерыТТ(Действие)

	КартаМаркерыТТ.Очистить(); //Очистка всех маркеров.
	
	Если Действие = "ПланФактОчистить" Тогда 
		Возврат;
	КонецЕсли;
	
	СтррПоискПартнер = Новый Структура("Партнер");
	ОдинАгент 		 = (ПланФакт.ПолучитьЭлементы().Количество() = 1);
	МаксНомерИконки  = 40;
	
	//1. ЛеревоЗначений ПланФакт уровень Агенты
	ПланФактУровеньАгент = ПланФакт.ПолучитьЭлементы();
	Для каждого сдзПланФактУровеньАгент Из ПланФактУровеньАгент Цикл
		Агент = сдзПланФактУровеньАгент.Агент;

		//2. Добавлен уровень ДатаТрека
		ПланФактУровеньДатаТрека = сдзПланФактУровеньАгент.ПолучитьЭлементы();
		ОдинДень = ?(ПланФактУровеньДатаТрека.Количество() = 1, Истина, Ложь);
		Для каждого сдзПланФактУровеньДатаТрека Из ПланФактУровеньДатаТрека Цикл
			стрДатаТрека = Формат(сдзПланФактУровеньДатаТрека.ДатаТрека, "ДФ=дд/ММ") + " ";
			
			//3. ДеревоЗначений ПланФакт уровень торговые точки (партнеры)
			ПланФактУровеньПартнер = сдзПланФактУровеньДатаТрека.ПолучитьЭлементы(); 
			Для каждого сдзПланФактУровеньПартнер Из ПланФактУровеньПартнер Цикл
				Партнер = сдзПланФактУровеньПартнер.Партнер;
				
				//ИконкаПартнера = 2 - tpnochek  - не выполненное посещение	
				//ИконкаПартнера = 3 - tpcheck   - выполненное посещение по плану
				//ИконкаПартнера = 4 - tpcheknp	 - выполненное посещение вне плана для плановой ТТ
				//ИконкаПартнера = 5 - tpcheknew - выполненное посещение вне плана для внеплановой ТТ
				ИконкаПартнера = сдзПланФактУровеньПартнер.Иконка;
				
				СтррПоискПартнер.Партнер = Партнер;		
				мСтроки = КартаМаркерыТТ.НайтиСтроки(СтррПоискПартнер);
				
				Если мСтроки.Количество() = 0 Тогда 				
					//3.1 Маркер добавляется впервые
					стзМаркеры = КартаМаркерыТТ.Добавить();
					стзМаркеры.Широта 	 = сдзПланФактУровеньПартнер.Широта;
					стзМаркеры.Долгота   = сдзПланФактУровеньПартнер.Долгота;
					стзМаркеры.Партнер	 = Партнер;
					
					//3.1.1
					//КодИконки = 200 - это не выполненное посещение, без нумерации
					//КодИконки = 201 - это не выполненное посещение, с нумерацией
					//КодИконки = 300 - это выполненное посещение по плану, без нумерации
					стзМаркеры.КодИконки = ИконкаПартнера * 100;
					
					//3.1.2 Нумерация иконки. Переназначение кода иконки.
					Если ОдинАгент И ОдинДень Тогда
						Если ИконкаПартнера = 2 Тогда // ИконкаПартнера = 2 это не посещенная ТТ по плану
							// нумерованная иконка плана
						    стзМаркеры.КодИконки = стзМаркеры.КодИконки + ?(сдзПланФактУровеньПартнер.ИндексПлана <= МаксНомерИконки, сдзПланФактУровеньПартнер.ИндексПлана, 0);
						Иначе
							// нумерованная иконка факта
						    стзМаркеры.КодИконки = стзМаркеры.КодИконки + ?(сдзПланФактУровеньПартнер.ИндексФакта <= МаксНомерИконки, сдзПланФактУровеньПартнер.ИндексФакта, 0);
						КонецЕсли;
					КонецЕсли;
					
					//3.1.3 Описание
					Если ИконкаПартнера <> 2 Тогда
						стзМаркеры.Описание = "<br>Посетил:<br>" + стрДатаТрека + ВыделитьИнтервалВремени(сдзПланФактУровеньПартнер.Время) + " " + Строка(Агент);
					КонецЕсли; 
					
				Иначе
					//3.2 Маркер партнера уже есть. Обновление	
					//3.2.1 Маркер
					стзМаркеры = мСтроки[0];
					//3.2.2 Маркер.Иконка
					Если ИконкаПартнера = 2 Тогда 
						//Не выполненное посещение. Иконка остается прежней.
					Иначе
						стзМаркеры.КодИконки = ИконкаПартнера * 100;
					КонецЕсли;
					//3.2.3 Описание	
					Если ИконкаПартнера <> 2 Тогда
						Если ПустаяСтрока(стзМаркеры.Описание) Тогда
							стзМаркеры.Описание = "<br>Посетил:<br>" + стрДатаТрека + ВыделитьИнтервалВремени(сдзПланФактУровеньПартнер.Время) + " " + Строка(Агент);
						Иначе
							стзМаркеры.Описание = стзМаркеры.Описание + "<br>" + стрДатаТрека +ВыделитьИнтервалВремени(сдзПланФактУровеньПартнер.Время) + " " + Строка(Агент);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;	
		КонецЦикла; 
	КонецЦикла;
	 
КонецПроцедуры

&НаСервере
Процедура МаркерыЗаполнитьКартаМаркерыДокументов(Действие, МАгенты)

	Если Действие = "ПланФактОчистить" Тогда 
		КартаМаркерыДокументов.Очистить();
		Возврат;
	ИначеЕсли Действие = "ПланФактУдалить" Тогда
		Для Каждого Агент Из МАгенты Цикл 
			мстзКартаМаркерыДокументов = КартаМаркерыДокументов.НайтиСтроки(Новый Структура("Агент", Агент));
			Для Каждого стзКартаМаркерыДокументов Из мстзКартаМаркерыДокументов Цикл
				КартаМаркерыДокументов.Удалить(стзКартаМаркерыДокументов);	
			КонецЦикла;
		КонецЦикла;
		Возврат;
	ИначеЕсли Действие = "ПланФактОбновить" Тогда
		КартаМаркерыДокументов.Очистить();
	КонецЕсли;
	
	//ТекОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоПланФакт = ДанныеФормыВЗначение(ПланФакт, Тип("ДеревоЗначений"));
	ПланФактАгенты = ДеревоПланФакт.Строки;
	Для Каждого сдзПланФактАгенты Из ПланФактАгенты Цикл
		Если Действие = "ПланФактДобавить" И МАгенты.Найти(сдзПланФактАгенты.Агент) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПланФактДата = сдзПланФактАгенты.Строки;
	    Для Каждого сдзПланФактДата Из ПланФактДата Цикл
			ПланФактПартнер = сдзПланФактДата.Строки;	
		    Для Каждого сдзПланФактПартнер Из ПланФактПартнер Цикл
				ПланФактДокументы = сдзПланФактПартнер.Строки;
				Для Каждого сдзПланФактДокументы Из ПланФактДокументы Цикл
					Если НЕ ЗначениеЗаполнено(сдзПланФактДокументы.Широта) ИЛИ НЕ ЗначениеЗаполнено(сдзПланФактДокументы.Долгота) Тогда
						Продолжить;
					КонецЕсли;
					
					стзКартаМаркерыДокументов = КартаМаркерыДокументов.Добавить();
					стзКартаМаркерыДокументов.Широта 	= сдзПланФактДокументы.Широта;
					стзКартаМаркерыДокументов.Долгота 	= сдзПланФактДокументы.Долгота;
					стзКартаМаркерыДокументов.Документ 	= сдзПланФактДокументы.Документ;
					стзКартаМаркерыДокументов.Агент 	= сдзПланФактДокументы.Агент;
					стзКартаМаркерыДокументов.Заголовок = сдзПланФактДокументы.Представление;
					
					Если НЕ ЗначениеЗаполнено(сдзПланФактПартнер.Широта) ИЛИ НЕ ЗначениеЗаполнено(сдзПланФактПартнер.Долгота) тогда
						стзКартаМаркерыДокументов.Описание = "Не заполнены координаты партнера.";
					ИначеЕсли сдзПланФактДокументы.Расстояние = 0 Тогда
						стзКартаМаркерыДокументов.Описание = "Документ создан в торговой точке.";
					ИначеЕсли ДопустимаяУдаленностьОтТТ > 0 И сдзПланФактДокументы.Расстояние > ДопустимаяУдаленностьОтТТ Тогда
						стзКартаМаркерыДокументов.Описание = "Документ создан за пределами торговой точки.";
						стзКартаМаркерыДокументов.Описание = стзКартаМаркерыДокументов.Описание + Символы.ПС + "Расстояние до торговой точки " + сдзПланФактДокументы.Расстояние + " м.";
					Иначе
						стзКартаМаркерыДокументов.Описание = "Расстояни до торговой точки " + сдзПланФактДокументы.Расстояние + " м.";
					КонецЕсли;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла
	КонецЦикла;
	 
КонецПроцедуры

&НаКлиенте            
Функция МаркерПолучитьИконкуПоКоду(КодИконки)
	
	Результат = "";
	
	Если КодИконки = 0 Тогда
		// Иконка кратного временного промежутка	
	    Результат = "agent4.png";
	
	ИначеЕсли КодИконки = 1 Тогда
		// Начало трека	
	    Результат = "trackstart3.png";
	ИначеЕсли КодИконки = 2 Тогда
		// Конец трека
		Результат = "trackend3.png";
		
	ИначеЕсли КодИконки = 3 Тогда
		// Зеленый агент
		Результат = "agent1.png";
		
	ИначеЕсли КодИконки = 4 Тогда
		// желтый агент
		Результат = "agent2.png";
		
	ИначеЕсли КодИконки = 5 Тогда
		// красный агент
		Результат = "agent3.png";
		
	ИначеЕсли КодИконки = 6 Тогда  
		//Документ
		Результат = "document.png"; 
		
	//(( sk_220630 MOD-2058 	
	ИначеЕсли КодИконки = 10 Тогда
		// Отключение GPS
		Результат = "ikonkaotklyucheniyagpsmodulya.png";
		
	ИначеЕсли КодИконки = 11 Тогда
		// Включение GPS
		Результат = "ikonkavklyucheniyagpsmodulya.png"; 
		
	ИначеЕсли КодИконки = 12 Тогда
		// Включение fake координат
		Результат = "ikonkaotklyucheniyafake.png";  
	//)) sk_220630
	
	ИначеЕсли КодИконки = 200 Тогда
		// КРАСНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, не нумерованная
		Результат = "tpnochek.png";	
		
	ИначеЕсли КодИконки > 200 И КодИконки < 241 Тогда
		// КРАСНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, нумерованная
		Результат = "tpnochek" + Строка(КодИконки - 200) + ".png";
		
	//ИначеЕсли КодИконки > 240 И КодИконки < 300 Тогда
		// КРАСНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, нумерованная, ГАЛОЧКА вместо номера
		// НЕТ ИКОНКИ НА FTP		
		
	ИначеЕсли КодИконки = 300 Тогда
		// ЗЕЛЕНАЯ ИконкаПартнера = 3 - tpcheck - выполненное посещение по плану, не нумерованная
		Результат = "tpcheck.png";	
		
	ИначеЕсли КодИконки > 300 И КодИконки < 321 Тогда
		// ЗЕЛЕНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, нумерованная
		Результат = "tpcheck" + Строка(КодИконки - 300) + ".png";
		
	ИначеЕсли КодИконки > 320 И КодИконки < 400 Тогда
		// ЗЕЛЕНАЯ ИконкаПартнера = 2 - tpnochek  - не выполненное посещение, нумерованная, ГАЛОЧКА вместо номера. 
		Результат = "tpcheck0.png";
		
	ИначеЕсли КодИконки = 400 Тогда
		// ФИОЛЕТОВАЯ ИконкаПартнера = 4 - tpcheknp	 - выполненное посещение вне плана для плановой ТТ, не нумерованная
		Результат = "tpcheknp.png";	
		
	ИначеЕсли КодИконки > 400 И КодИконки < 441 Тогда
		// ФИОЛЕТОВАЯ ИконкаПартнера = 4 - tpcheknp	 - выполненное посещение вне плана для плановой ТТ, нумерованная
		Результат = "tpcheknp" + Строка(КодИконки - 400) + ".png";
		
	ИначеЕсли КодИконки > 440 И КодИконки < 500 Тогда
		// ФИОЛЕТОВАЯ ИконкаПартнера = 4 - tpcheknp	 - выполненное посещение вне плана для плановой ТТ, нумерованная ГАЛОЧКА вместо номера. 
		Результат = "tpchecknew.png"; //некорректно  названа на FTP
		
	ИначеЕсли КодИконки = 500 Тогда 
		// ГОЛУБАЯ ИконкаПартнера = 5 - tpcheknew - выполненное посещение вне плана для внеплановой ТТ, не нумерованная
		Результат = "tpcheknew.png";
		
	ИначеЕсли КодИконки > 500 И КодИконки < 541 Тогда 
		// ГОЛУБАЯ ИконкаПартнера = 5 - tpcheknew - выполненное посещение вне плана для внеплановой ТТ, нумерованная
		Результат = "tpcheknew.png";
		
	ИначеЕсли КодИконки > 540 И КодИконки < 600 Тогда 
		// ГОЛУБАЯ ИконкаПартнера = 5 - tpcheknew - выполненное посещение вне плана для внеплановой ТТ, нумерованная ГАЛОЧКА вместо номера. 
		Результат = "tpcheknew.png";
		
	Иначе
		//Не найден вид иконки
		Результат = "point.png";
		
	КонецЕсли;	
	
	
	Результат = СтррКонтекст.КаталогИконок + Результат;
	
	Возврат Результат;
КонецФункции

// СлужебныеПроцедурыИФункции_Треки_Маркеры
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ДеревоПланФакта

// Изменить дерево ПланФакт. Изменяет только дерево. Нет действий с треками, точками и картой. (не обновляется в ПланФакт АГЕНТЫ/Время АГЕНТЫ/Иконка, определяются позже при считывании треков).
//
// Параметры:
//  МАгенты	 - Массив Из СправочникСсылка.Пользователи - Агенты которых требуется добавить или удалить в ПланФакт. Не используется если Действие = ПланФактОчистить или ПланФактОбновить
//  Действие - Строка - Действие события ПланФакт
//
//Действие с План факт: 
//		ПланФактДобавить
//		ПланФактУдалить
//		ПланФактОбновить
//		ПланФактОчистить
&НаСервере
Процедура ДеревоПланФактИзменить(МАгенты, Действие)
	
	//1. ПланФакт. Редактирование дерева.
	Дерево = ДанныеФормыВЗначение(ПланФакт, Тип("ДеревоЗначений"));
	ДеревоУровеньАгенты = Дерево.Строки;
	Если Действие = "ПланФактДобавить" И МАгенты.Количество() > 0 Тогда
		//1.1 Добавление нового агента в дерево ПланФакт.
		Для Каждого Элемент из МАгенты Цикл 
			сдзНовая = ДеревоУровеньАгенты.Добавить();
			сдзНовая.Агент = Элемент;
			сдзНовая.Иконка = 1; // Трека нет
		КонецЦикла;
		
	ИначеЕсли Действие = "ПланФактУдалить" И МАгенты.Количество() > 0 Тогда
		//1.2 Удаление агента из дерева из ПланФакт.
		Для Каждого Элемент из МАгенты Цикл
			сдзУдаление = ДеревоУровеньАгенты.Найти(Элемент, "Агент");
			Если сдзУдаление <> Неопределено Тогда
				ДеревоУровеньАгенты.Удалить(сдзУдаление);
			КонецЕсли;			
		КонецЦикла;
		ЗначениеВРеквизитФормы(Дерево, "ПланФакт"); //Сохранение ПланФакт
		Возврат;		
		
	ИначеЕсли Действие = "ПланФактОбновить" Тогда
		//1.3 Обновляем данные по всем агентам
		//Изменение дерева план факт на данном этапе не требуется
		
	ИначеЕсли Действие = "ПланФактОчистить" Тогда   
		//1.4 Удаление всех агентов из дерева ПланФакт
		Дерево.Строки.Очистить();
		ЗначениеВРеквизитФормы(Дерево, "ПланФакт"); //Сохранение ПланФакт
		Возврат;
		
	Иначе
		//Ошибка. Если некорректно заполнено "Действие" или "МАгенты.Количество() = 0"
		Возврат;
		
	КонецЕсли;
	
	ТЗРазвернутыеУзлы = Новый ТаблицаЗначений;
	ТЗРазвернутыеУзлы.Колонки.Добавить("Агент",   	Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТЗРазвернутыеУзлы.Колонки.Добавить("ДатаТрека", Новый ОписаниеТипов("Дата"));
	ТЗРазвернутыеУзлы.Колонки.Добавить("Партнер", 	Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Для Каждого сдзДеревоУровеньАгенты Из ДеревоУровеньАгенты Цикл
		Если сдзДеревоУровеньАгенты.УзелРазвернут Тогда
			стзРазвернутыеУзлы = ТЗРазвернутыеУзлы.Добавить();
			стзРазвернутыеУзлы.Агент 	= сдзДеревоУровеньАгенты.Агент;
			стзРазвернутыеУзлы.ДатаТрека= сдзДеревоУровеньАгенты.ДатаТрека;
			стзРазвернутыеУзлы.Партнер 	= сдзДеревоУровеньАгенты.Партнер;
		КонецЕсли;
		ДеревоУровеньДата = сдзДеревоУровеньАгенты.Строки;
		Для Каждого сдзДеревоУровеньДата Из ДеревоУровеньДата Цикл
			Если сдзДеревоУровеньДата.УзелРазвернут Тогда
				стзРазвернутыеУзлы = ТЗРазвернутыеУзлы.Добавить();
				стзРазвернутыеУзлы.Агент 	= сдзДеревоУровеньДата.Агент;
				стзРазвернутыеУзлы.ДатаТрека= сдзДеревоУровеньДата.ДатаТрека;
				стзРазвернутыеУзлы.Партнер 	= сдзДеревоУровеньДата.Партнер;
			КонецЕсли;
			ДеревоУровеньПартнер = сдзДеревоУровеньДата.Строки;
			Для Каждого сдзДеревоУровеньПартнер Из ДеревоУровеньПартнер Цикл
				Если сдзДеревоУровеньПартнер.УзелРазвернут Тогда
					стзРазвернутыеУзлы = ТЗРазвернутыеУзлы.Добавить();
					стзРазвернутыеУзлы.Агент 	= сдзДеревоУровеньПартнер.Агент;
					стзРазвернутыеУзлы.ДатаТрека= сдзДеревоУровеньПартнер.ДатаТрека;
					стзРазвернутыеУзлы.Партнер 	= сдзДеревоУровеньПартнер.Партнер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	СтррПоискУзлов = Новый Структура("Агент, ДатаТрека, Партнер");
	
	//2. Тех данные для получения данных.   
	//2.1 Получение ТекОбъект, для обращения к процедурам бщего модуля объекта обработки.
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	//2.2 Создание структуры для получения тзПланФактПосешений.
	СтррПараметры = Новый Структура("Агент,СсылкаСписокТТ");
	СтррПараметры.Вставить("Период", Новый СтандартныйПериод(ДатаОтчета, ДатаОтчетаКонец));
	СтррПараметры.Вставить("ТолькоПроведенныеДокументы", 	ТолькоПроведенныеДокументы);
	СтррПараметры.Вставить("списокВидыДокументов", 			ВидыДокументов);
	СтррПараметры.Вставить("ДобавитьВремяПосещения", 		Истина);
	СтррПараметры.Вставить("ДобавитьКоординатыПартнеров", 	Истина);
	СтррПараметры.Вставить("ВернутьФактПосещений", 			Истина);
	СтррПараметры.Вставить("ИгнорироватьОтсутствиеПлана", 	Истина);
	СтррПараметры.Вставить("ПронумероватьФактыПосещений", 	Истина);
	СтррПараметры.Вставить("ДопустимаяУдаленностьОтТТ", 	ДопустимаяУдаленностьОтТТ);
	//2.3 ВнеПлана.  Возвращает число 99 999
	ВнеПлана = ТекОбъект.ПланПосещенийНомерПунктаВнеПлана(); 
	//2.4 Для поля дополнительная информация. Получение подразделения агента и структуру с видами документов 
	Если РежимДополнительнойИнфомации Тогда
		//2.4.1 Возвращает строку Подразделение	
		СтрРеквизитПодразделение = ТекОбъект.РеквизитОбъектаИзСписка(Метаданные.Справочники.Пользователи, "Подразделение,ТекущееПодразделение");
		//2.4.2 Структура с видами документов (ВидыДокументов)  и наличием в них реквизитов (СуммаДокумента,Валюта,Комментарий)
		СтррФлагиНаличияРеквизитовДокументов = ПолучитьПризнакиНаличияРеквизитов(ВидыДокументов, "СуммаДокумента,Валюта,Комментарий");
	КонецЕсли;
	//2.5 Структура для поиска документов факта посещений
	СтррПоиск = Новый Структура("Партнер"); 	
	
	//ОБНОВЛЕНИЕ дерева ПланФакт, кроме колонок АГЕНТЫ/Время АГЕНТЫ/Иконка
	
	//3. УРОВЕНЬ АГЕНТЫ
	Для Каждого сдзПланФактУровеньАгент Из ДеревоУровеньАгенты Цикл
		//3.0 Агент
		Агент = сдзПланФактУровеньАгент.Агент;
		
		//3.1 Пропускаем агентов которые уже добавлены
		Если Действие = "ПланФактДобавить" И МАгенты.Найти(Агент) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//3.2 Получение данных для заполнения ПланФакт
		//3.2.1 Определяем список ТТ для агента.
		стррСвойстваСпискаТТ = ТекОбъект.ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент, Ложь);
		Если Действие = "ПланФактДобавить" Тогда
			Если стррСвойстваСпискаТТ.КодОшибки <> Неопределено И стррСвойстваСпискаТТ.КодОшибки <> "ДетализацияСТТБезПланаГрафика" Тогда
				Текст = СтрШаблон_(НСтр("ru = 'Не включен план для агента ""%1"". %2'"), Агент, стррСвойстваСпискаТТ.ТекстОшибки);	
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			КонецЕсли;
		КонецЕсли;
		//3.2.2 Получение таблиц:
		//		тзПланФактПосешений - Для добавления Партнеров  Уровень Партнер
		//  	тзФактПосещений		- Для добавления документов Уровень Документ
		СтррПараметры.Агент 		 = Агент;
		СтррПараметры.СсылкаСписокТТ = стррСвойстваСпискаТТ.СсылкаСписокТТ;
		тзПланФактПосешений  = ТекОбъект.ПолучитьПланФактПосещений(СтррПараметры);
		тзФактПосещений 	 = СтррПараметры.тзФактПосещений; 						// таблица документов посещений
		Если стррСвойстваСпискаТТ.ИспользоватьПорядокСписокТТ Тогда
			тзПланФактПосешений.Сортировать("П1");
		КонецЕсли;
		//3.2.3 Признак наличия виртуальных документов, для получения представления вирт документа.
		ЕстьВиртуальныеДокументы = тзФактПосещений.Колонки.Найти("СсылкаВДок") <> Неопределено;
					
		//3.3 АГЕНТЫ/Представление.
		сдзПланФактУровеньАгент.Представление = Агент;
		
		//3.4 АГЕНТЫ/Информация. Заполняем подразделение агента. 
		Если РежимДополнительнойИнфомации Тогда
			Если СтрРеквизитПодразделение = Неопределено Тогда
				сдзПланФактУровеньАгент.Информация = "";
			ИначеЕсли ЗначениеЗаполнено(Агент[СтрРеквизитПодразделение]) Тогда
				сдзПланФактУровеньАгент.Информация = Агент[СтрРеквизитПодразделение];
			Иначе
				сдзПланФактУровеньАгент.Информация = НСтр("ru = 'Подразделение не указано.'");
			КонецЕсли;
		КонецЕсли;
		
		//3.5 АГЕНТЫ/Время
		сдзПланФактУровеньАгент.Время = "";
						
		//3.6 Удаляем более низкие уровни
		сдзПланФактУровеньАгент.Строки.Очистить();
		
		//4. УРОВЕНЬ ДАТАТРЕКА
		Счетчик = 0;
		ДатаТрека = НачалоДня(ДатаОтчета) - 86400;
		Пока ДатаТрека < НачалоДня(ДатаОтчетаКонец) Цикл
			//4.0 Счетчик для получения названия колонки из тзПланФактПосешений на конкретный день даты, для получения факта посещения на уровне ПАРТНЕРЫ.
			Счетчик 	= Счетчик + 1;
			стрСчетчик 	= Формат(Счетчик, "ЧГ=0");
			ДатаТрека 	= ДатаТрека + 86400; // + 1 день 
			
			//4.1 Добавление строки в дерево
			сдзПланФактУровеньДатаТрека = сдзПланФактУровеньАгент.Строки.Добавить();	
			
			//4.1 ДатаТрека Представление
			сдзПланФактУровеньДатаТрека.Агент   	  = Агент;
			сдзПланФактУровеньДатаТрека.ДатаТрека	  = ДатаТрека;
			сдзПланФактУровеньДатаТрека.Представление = Формат(ДатаТрека, "ДФ=dd.ММ.гг");
			Если РежимДополнительнойИнфомации Тогда
				сдзПланФактУровеньДатаТрека.Информация = ТРег(Формат(ДатаТрека, "ДФ=dddd")); // + Формат(ДатаТрека, "ДФ='"" (""q"" квартал)""'") ;
			КонецЕсли;
			
			//4.2 УзелРазвернут
			СтррПоискУзлов.Агент	= сдзПланФактУровеньДатаТрека.Агент;	
			СтррПоискУзлов.ДатаТрека= сдзПланФактУровеньДатаТрека.ДатаТрека;
			СтррПоискУзлов.Партнер  = сдзПланФактУровеньДатаТрека.Партнер;
			Если ТЗРазвернутыеУзлы.НайтиСтроки(СтррПоискУзлов).Количество() > 0 Тогда
				сдзПланФактУровеньДатаТрека.УзелРазвернут = Истина;
			КонецЕсли;			
			
			//5. УРОВЕНЬ ПАРТНЕРЫ
			СчетчикПартнеров = 1000;
			Для каждого стзПланФактПосешений Из тзПланФактПосешений Цикл
				//5.1 Партнер
				Партнер = стзПланФактПосешений.Партнер;
  				//5.2 порядок в плане посещений. Если 0, то нет в плане. Если 9999, то без номера, но есть в плане. 
				НомерВПлане = стзПланФактПосешений["П" + стрСчетчик];
				//5.3 Наличие посещения ТТ.
				ЕстьПосещение = ЗначениеЗаполнено(стзПланФактПосешений["Д" + стрСчетчик]);
				//5.4 Наличие ТТ в ПП на текущий день.
				ЕстьВПлане = ?(НомерВПлане > 0, Истина, Ложь); 
				
				//5.4 Добавление строчки в ПланФакт.
				Если ЕстьПосещение ИЛИ ЕстьВПлане Тогда
					//Добавление строчки.
					сдзПланФактУровеньПартнер = сдзПланФактУровеньДатаТрека.Строки.Добавить();
				Иначе
					//Добавление Строчки не требуется.
					Продолжить;
				КонецЕсли;
				
				//5.5 Заполнение Агент, ДатаТрека, Партнер.
				сдзПланФактУровеньПартнер.Агент 	= Агент;
				сдзПланФактУровеньПартнер.ДатаТрека = ДатаТрека;
				сдзПланФактУровеньПартнер.Партнер 	= Партнер;
				
				//5.6 Заполнение Иконки.
				Если ЕстьВПлане Тогда
					Если ЕстьПосещение Тогда
						сдзПланФактУровеньПартнер.Иконка = 3; // выполненное посещение по плану
					Иначе
						сдзПланФактУровеньПартнер.Иконка = 2; // не выполненное посещение
					КонецЕсли;  
				ИначеЕсли ЕстьПосещение Тогда
					Если стзПланФактПосешений.НомерВПлане < ВнеПлана Тогда
						сдзПланФактУровеньПартнер.Иконка = 4; // выполненное посещение вне плана для плановой ТТ
					Иначе
						сдзПланФактУровеньПартнер.Иконка = 5; // выполненное посещение вне плана для внеплановой ТТ
					КонецЕсли; 
				Иначе
					Продолжить; //Ошибка.
				КонецЕсли;
			
				//5.7 Заполнение Время и ИндексФакта
				Если стзПланФактПосешений["НФ" + стрСчетчик] <> 0 Тогда // номер факта
					сдзПланФактУровеньПартнер.Время   	= Строка(стзПланФактПосешений["НФ" + стрСчетчик]) + ". " + стзПланФактПосешений["Д" + стрСчетчик]; 
					сдзПланФактУровеньПартнер.ИндексФакта = стзПланФактПосешений["НФ" + стрСчетчик];
				Иначе
					сдзПланФактУровеньПартнер.Время   	= "";
					сдзПланФактУровеньПартнер.ИндексФакта = 99999; // чтобы после сортировки не посещенные ТТ были в конце
				КонецЕсли; 
				
				//5.8 Заполнение Широта
				сдзПланФактУровеньПартнер.Широта  = стзПланФактПосешений.Широта;
				//5.9 Заполнение Долгота
				сдзПланФактУровеньПартнер.Долгота = стзПланФактПосешений.Долгота;
				
				//5.10 Заполнение ИндексПлана
				Если стзПланФактПосешений["П" + стрСчетчик] > 0 И стзПланФактПосешений["П" + стрСчетчик] < 1000 Тогда // порядок по плану для отображения в дереве
					сдзПланФактУровеньПартнер.ИндексПлана = стзПланФактПосешений["П" + стрСчетчик];
					стрПорядок = Строка(стзПланФактПосешений["П" + стрСчетчик]) + ". ";
				Иначе
					СчетчикПартнеров = СчетчикПартнеров + 1;
					сдзПланФактУровеньПартнер.ИндексПлана = СчетчикПартнеров;
					стрПорядок = "";
				КонецЕсли;
				
				//5.11 Заполнение Информация
				Если РежимДополнительнойИнфомации Тогда
					сдзПланФактУровеньПартнер.Информация = стзПланФактПосешений.Адрес;
				КонецЕсли;
					
				//5.11 Заполнение Представление
				Если ПустаяСтрока(стзПланФактПосешений.Адрес) Тогда
					сдзПланФактУровеньПартнер.Представление = стрПорядок + Партнер;
				Иначе
					сдзПланФактУровеньПартнер.Представление = стрПорядок + Партнер + "  -  " + стзПланФактПосешений.Адрес;
				КонецЕсли; 
				
				//5.12 УзелРазвернут
				СтррПоискУзлов.Агент	= сдзПланФактУровеньПартнер.Агент;	
				СтррПоискУзлов.ДатаТрека= сдзПланФактУровеньПартнер.ДатаТрека;
				СтррПоискУзлов.Партнер  = сдзПланФактУровеньПартнер.Партнер;
				Если ТЗРазвернутыеУзлы.НайтиСтроки(СтррПоискУзлов).Количество() > 0 Тогда
					сдзПланФактУровеньПартнер.УзелРазвернут = Истина;
				КонецЕсли;			
				
				//6. УРОВЕНЬ ДОКУМЕНТЫ
				Если ЕстьПосещение Тогда  					
					//6.1 Отбор строк по Партнеру из таблицы документов.
					СтррПоиск.Партнер = стзПланФактПосешений.Партнер;
					мСтроки = тзФактПосещений.НайтиСтроки(СтррПоиск);
				
					Для каждого стзФакт Из мСтроки Цикл
						//6.2 Информация по документу.
						Информация = "";
												
						//6.3 Получение ДатаНач и  
						//стзФакт.ВремяНачала 	 - Дата начала.
						//стзФакт.ВремяОкончания - Дата окончания.
						//стзФакт.Дата 			 - Дата документа.
						//ДатаТрека              - Дата текущего трека дерева значений.
						ДатаТрекаКД = КонецДня(ДатаТрека);
						ДатаНач = Неопределено;
						ДатаКон = Неопределено;
						
						//6.3.1 Проверка И Получение даты начала посещения ТТ.
						Если стзФакт.ВремяНачала > ДатаТрекаКД ИЛИ НЕ ЗначениеЗаполнено(стзФакт.ВремяНачала) Тогда
							Если стзФакт.Дата >= ДатаТрека И стзФакт.Дата <= ДатаТрекаКД Тогда
								ДатаНач = стзФакт.Дата;
								ДатаКон = стзФакт.Дата;
								Если РежимДополнительнойИнфомации Тогда
									Информация = "Дата документа не соответствует датам создания из МУ. ";
									Информация = Информация + ИнформацияПоДатеСоздания(стзФакт.ВремяНачала, стзФакт.ВремяОкончания) + " ";
								КонецЕсли;
							Иначе
								Продолжить; //стзФакт.ВремяНачала и стзФакт.Дата не попадают в период текущего дня.								
							КонецЕсли;
						ИначеЕсли стзФакт.ВремяНачала >= ДатаТрека Тогда
							ДатаНач = стзФакт.ВремяНачала;
						Иначе	
							ДатаНач = ДатаТрека;
							Если РежимДополнительнойИнфомации Тогда
								Информация = ИнформацияПоДатеСоздания(стзФакт.ВремяНачала, стзФакт.ВремяОкончания) + " ";
							КонецЕсли;
						КонецЕсли;
						
						//6.3.2 Проверка И Получение даты окончания посещения ТТ.
						Если ДатаКон = Неопределено Тогда 
							Если стзФакт.ВремяОкончания < ДатаТрека ИЛИ НЕ ЗначениеЗаполнено(стзФакт.ВремяОкончания) Тогда
								Если стзФакт.Дата >= ДатаТрека И стзФакт.Дата <= ДатаТрекаКД Тогда
									ДатаКон = стзФакт.Дата;
									Если РежимДополнительнойИнфомации И ПустаяСтрока(Информация) Тогда
										Информация = "Дата документа не соответствует датам создания из МУ. ";
										Информация = Информация + ИнформацияПоДатеСоздания(стзФакт.ВремяНачала, стзФакт.ВремяОкончания) + " ";
									КонецЕсли;
								Иначе
									Продолжить; //стзФакт.ВремяОкончания и стзФакт.Дата не попадают в период текущего дня.								
								КонецЕсли;
							ИначеЕсли стзФакт.ВремяОкончания <= ДатаТрекаКД Тогда
								ДатаКон = стзФакт.ВремяОкончания;
							Иначе	
								ДатаКон = ДатаТрекаКД;
								Если РежимДополнительнойИнфомации И ПустаяСтрока(Информация) Тогда
	                            	Информация = Информация + ИнформацияПоДатеСоздания(стзФакт.ВремяНачала, стзФакт.ВремяОкончания) + " ";
								КонецЕсли;	
							КонецЕсли;
						КонецЕсли;
						
						//6.4 Добавление строчки в дерево ПланФакт
						сдзПланФактУровеньДокумент = сдзПланФактУровеньПартнер.Строки.Добавить();
						сдзПланФактУровеньДокумент.Агент 	 = Агент;
						сдзПланФактУровеньДокумент.ДатаТрека = ДатаТрека;
						сдзПланФактУровеньДокумент.Партнер 	 = Партнер;
						сдзПланФактУровеньДокумент.Широта	 = стзФакт.Широта;
						сдзПланФактУровеньДокумент.Долгота	 = стзФакт.Долгота;
						
						//6.5 Заполнение Время
						//6.5.1 Знак пусто или "*" для индикации создания документа вне ТТ или в ТТ 
						ЗнакВнеТТ = ?(стзФакт.ЕстьПосещение, "", "*"); //Знак пусто или "*" для индикации создания документа вне ТТ или в ТТ 
					    //6.5.2 Строка времени в дереве ПланФакт на форме
						сдзПланФактУровеньДокумент.Время = Формат(ДатаНач, "ДФ=""HH:mm""") + ЗнакВнеТТ + " - " + Формат(ДатаКон, "ДФ=""HH:mm""") + ЗнакВнеТТ;
						//6.5.3 Если есть замечания то в информация добавляется "(i)".
						Если НЕ ПустаяСтрока(Информация) Тогда
							сдзПланФактУровеньДокумент.Время = сдзПланФактУровеньДокумент.Время + " (i)";	
						КонецЕсли;
						
						//6.6 Заполнение Представление 
						ЭтоВиртуальныйДокумент = ЕстьВиртуальныеДокументы И ЗначениеЗаполнено(стзФакт.СсылкаВДок);
						Если ЭтоВиртуальныйДокумент Тогда
							СсылкаДок = стзФакт.СсылкаВДок;
							тзЖурнала = ТекОбъект.ВОТЗЗагрузить(СсылкаДок.ВидДокумента, Истина); // ТЗ загружается из кэша
							стзЖурнала = тзЖурнала.Найти(СсылкаДок.ID, "ID");
							сдзПланФактУровеньДокумент.Представление = ТекОбъект.ВДокПредставление(СсылкаДок.ВидДокумента, стзЖурнала);
						Иначе
							СсылкаДок = стзФакт.Ссылка;
							сдзПланФактУровеньДокумент.Представление = Строка(СсылкаДок);
						КонецЕсли;
						
						//6.7 Заполнение Документ 
						сдзПланФактУровеньДокумент.Документ   = СсылкаДок;
						
						Если ДопустимаяУдаленностьОтТТ > 0 Тогда
							Если ЗначениеЗаполнено(сдзПланФактУровеньПартнер.Широта) И ЗначениеЗаполнено(сдзПланФактУровеньПартнер.Долгота) Тогда
								Если ЗначениеЗаполнено(сдзПланФактУровеньДокумент.Широта) И ЗначениеЗаполнено(сдзПланФактУровеньДокумент.Долгота) Тогда	
							    	Расстояние = ТекОбъект.РасстояниеМеждуТочкамиNMEA(сдзПланФактУровеньПартнер, сдзПланФактУровеньДокумент);
									сдзПланФактУровеньДокумент.Расстояние = Окр(Расстояние);
						    	КонецЕсли;
							КонецЕсли;
						КонецЕсли;

						//6.8 Заполнение Иконка
						Если сдзПланФактУровеньДокумент.Расстояние > ДопустимаяУдаленностьОтТТ Тогда
							сдзПланФактУровеньДокумент.Иконка = 6; 
						ИначеЕсли СсылкаДок.Проведен Тогда
							сдзПланФактУровеньДокумент.Иконка = 7;
						ИначеЕсли СсылкаДок.ПометкаУдаления Тогда
							сдзПланФактУровеньДокумент.Иконка = 8;
						Иначе
							сдзПланФактУровеньДокумент.Иконка = 9;
						КонецЕсли;
						
						//6.9 Заполнение Информация
						Если РежимДополнительнойИнфомации Тогда
							Если ЭтоВиртуальныйДокумент Тогда
								ОбъектДок = стзЖурнала;
								стррРеквизиты = СтррФлагиНаличияРеквизитовДокументов[СсылкаДок.ВидДокумента];
							Иначе
								ОбъектДок = СсылкаДок.ПолучитьОбъект();
								стррРеквизиты = СтррФлагиНаличияРеквизитовДокументов[СсылкаДок.Метаданные().Имя];
							КонецЕсли;						
							Если стррРеквизиты.Свойство("СуммаДокумента") Тогда
								Информация = Информация + " " + НСтр("ru = 'Сумма:'") + " " + Формат(ОбъектДок.СуммаДокумента, "ЧДЦ=2");
							КонецЕсли; 
							Если стррРеквизиты.Свойство("Валюта") Тогда
								Информация = Информация + " " + ОбъектДок.Валюта;
							КонецЕсли; 
							Если стррРеквизиты.Свойство("Комментарий") И Не ПустаяСтрока(ОбъектДок.Комментарий) Тогда
								Информация = Информация + ?(ПустаяСтрока(Информация), "", "; ") + НСтр("ru = 'Комментарий:'") + " " + ОбъектДок.Комментарий;
							КонецЕсли; 
							сдзПланФактУровеньДокумент.Информация = Информация;
						КонецЕсли;      						
		
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	//ДатаТрека	
	КонецЦикла;	//Агенты	
	
	//Сохранение дерева ПланФакт
	ЗначениеВРеквизитФормы(Дерево, "ПланФакт");	
	
КонецПроцедуры 

&НаСервере
Функция ИнформацияПоДатеСоздания(ДатаНачала, ДатаОкончания)
	Информация = "";
	
	Если ЗначениеЗаполнено(ДатаНачала) ИЛИ ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		Информация =	"Дата создания в МУ: " 
						+ ?(ЗначениеЗаполнено(ДатаНачала), Формат(ДатаНачала, "ДФ=""dd.MM.yyyy HH:mm"""), "") 
						+ " - " 
						+ ?(ЗначениеЗаполнено(ДатаОкончания), Формат(ДатаОкончания, "ДФ=""dd.MM.yyyy HH:mm"""), "");
	КонецЕсли;
					
	Возврат Информация;
КонецФункции

//Заполняет в ПланФакт верхний уровень дерева АГЕНТЫ/Время АГЕНТЫ/Иконка
// Действия с План факт: ПланФактДобавить, ПланФактУдалить, ПланФактОбновить, ПланФактОчистить.
//
// Параметры:
//  МАгенты	 - Массив Из СправочникСсылка.Пользователи - Агенты у которых требуется обновитьв Время в ПланФакт, при Действие = ПланФактДобавить
//  Действие - Строка	 - Действие события ПланФакт
//
//Логика:
//Если в план факт добавлен один агент. Напротив агента нет иконки. Напротив каждого дня иконка цвета трека, если трека нет то nogps. На карте все треки разных цветов в соответствии цветов дат планфакт.
//Если в планфакт добавлено несколько агентов. Напротив агента иконка цвета трека, Если треков нет за все дни, то иконка агент. Напротив каждого дня иконка gps или nogps. На карте  треки красятся в цвет агента. 
&НаКлиенте
Процедура ДеревоПланФактЗаполнитьВремяИконкаАгаента(МАгенты, Действие)
	
	//1. Проверка
	ДеревоУровеньАгенты = ПланФакт.ПолучитьЭлементы(); 	// Коллекция элементов дерева верхнего уровня АГЕНТЫ.
	Если ДеревоУровеньАгенты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//2. Определяем признак один ли агент в дереве, если один, то другая логика.
	ФлОдинАгент = ?(ДеревоУровеньАгенты.Количество() = 1, Истина, Ложь); 
	
	//3. Доп. проверка.
	Если Действие = "ПланФактДобавить" И МАгенты.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли Действие = "ПланФактОчистить" ИЛИ (Действие = "ПланФактУдалить" И НЕ ФлОдинАгент) Тогда 
		Возврат;
	КонецЕсли;
		
	//4. Определение занятых цветов в дереве ПланФакт.
	МЗанятыеЦвета 				 = Новый Массив;
	Если ФлОдинАгент Тогда
		//4.1 Треки на каждый день в разные цвета. 
		//Иконка агента первого цвета. Очищаем цвет иконки и далее в цикле заполняем остальное.
		ДеревоУровеньАгенты.Получить(0).Иконка = 0; //Нет иконки. 
	Иначе
		//4.2 Все агенты в разные цвета, а все треки агента на каждый день в цвет агента
		ИконкиНомерПервоиИконкиТрека = ИконкиНомерПервоиИконкиТрека();
		Для Каждого сдзУровеньАгенты Из ДеревоУровеньАгенты Цикл
			Если сдзУровеньАгенты.Иконка > 1 И сдзУровеньАгенты.Иконка <> ИконкиНомерПервоиИконкиТрека Тогда
				МЗанятыеЦвета.Добавить(сдзУровеньАгенты.Иконка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	//5. Структура для поиска.
	СтррПоискАгент = Новый Структура("Агент, ДатаТрека");
	
	//6. Уровень Анеты, заполнение Иконка и время.
	Для Каждого сдзУровеньАгенты Из ДеревоУровеньАгенты Цикл
		//6.1 Текущий агент		
		Агент = сдзУровеньАгенты.Агент;
		
		//6.2 Флаг наличия трека у агента, хотя бы за один день.
		флЕстьТрекАгента = Ложь;    
		
		//6.3 проверка. При добавдении, возможен вариант, что в дереве ПланФакт был сформирован Агент в режиме флОдинАгент
		//Пропускать агентов котрые не добавляется в ПланФакт, но не с иконкой <> 0.
		//Логика: 
		//	Режим ПланФактДобавить 
		//	В планФакте несколько агентов, если изночально было 0 и добавили одного, то условие не выполняется.
		//	У агента не назначена иконка (в режиме флОдинАгент Иконка всегда равна 0) 
		//	Это не новый добавляемый агент(у вновь добавленых Иконка равна 1)  Если новый то (МАгенты.Найти(Агент) <> Неопределено) = Истина
		Если Действие = "ПланФактДобавить" И НЕ ФлОдинАгент И МАгенты.Найти(Агент) = Неопределено И НЕ сдзУровеньАгенты.Иконка = 0 Тогда
			флЕстьТрекАгента = ?(сдзУровеньАгенты.Иконка > 1, Истина, Ложь);
			Продолжить;
		КонецЕсли;		
		
		//7. Уровень ДатаТрека, заполнение Иконка и время.
		ДеревоУровеньДатаТрека = сдзУровеньАгенты.ПолучитьЭлементы();
		Для Каждого сдзУровеньДатаТрека Из ДеревоУровеньДатаТрека Цикл 
			//7.1 Определяем наличие трека и флЕстьТрекАгента 
			СтррПоискАгент.Агент 	 = Агент;
			СтррПоискАгент.ДатаТрека = сдзУровеньДатаТрека.ДатаТрека;
			мПоискТрека 			 = КартаТреки.НайтиСтроки(СтррПоискАгент);
			Если мПоискТрека.Количество() > 0 Тогда
				КоличесвоСтрокТрека  = мПоискТрека[0].Трек.Количество();
				ТрекЕсть			 = ?(КоличесвоСтрокТрека > 0 И мПоискТрека[0].ТрекЕсть = Истина, Истина, Ложь);
				Если НЕ флЕстьТрекАгента Тогда
					флЕстьТрекАгента = Истина;
				КонецЕсли;
			Иначе
				КоличесвоСтрокТрека  = 0;
				ТрекЕсть			 = Ложь;
			КонецЕсли;				
			
			//7.2 УровеньАгенты. Иконка.
			Если НЕ ФлОдинАгент И ТрекЕсть И сдзУровеньАгенты.Иконка < 2 Тогда
				сдзУровеньАгенты.Иконка = ДеревоПланФактПолучитьСвободныйЦветИконки(МЗанятыеЦвета);
			КонецЕсли;
			
			//7.3 УровеньДатаТрека. Иконка 
			Если ФлОдинАгент И ТрекЕсть Тогда
				сдзУровеньДатаТрека.Иконка = ДеревоПланФактПолучитьСвободныйЦветИконки(МЗанятыеЦвета);
			ИначеЕсли ФлОдинАгент И НЕ ТрекЕсть Тогда
				сдзУровеньДатаТрека.Иконка = 10;	// иконка nogps
			ИначеЕсли ТрекЕсть Тогда
				сдзУровеньДатаТрека.Иконка = 11;	// иконка gps
			Иначе
				сдзУровеньДатаТрека.Иконка 	= 10; 	// иконка nogps
			КонецЕсли;

			//7.4 УровеньДатаТрека. Время
			Если ТрекЕсть Тогда
				сдзУровеньДатаТрека.Время = Формат(мПоискТрека[0].Трек[0].Время, "ДФ='HH:mm'") + " - " + Формат(мПоискТрека[0].Трек[КоличесвоСтрокТрека - 1].Время, "ДФ='HH:mm'");	
			Иначе
				сдзУровеньДатаТрека.Время	= "";	
			КонецЕсли;
			
		КонецЦикла;
		
		//8. УровеньАгенты. Освобождение цвета
		Если НЕ ФлОдинАгент И НЕ флЕстьТрекАгента И сдзУровеньАгенты.Иконка > 1 Тогда
			МЗанятыеЦвета.Удалить(МЗанятыеЦвета.Найти(сдзУровеньАгенты.Иконка));	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДеревоПланФактСортировать()
	
	Если Элементы.ПланФакт.КоманднаяПанель.ПодчиненныеЭлементы.МаршрутГруппаСортировка.ПодчиненныеЭлементы.МаршрутСортироватьПоФактуПосещения.Пометка Тогда		
		ПоляСртировки = "ИндексФакта,ИндексПлана";
	ИначеЕсли Элементы.ПланФакт.КоманднаяПанель.ПодчиненныеЭлементы.МаршрутГруппаСортировка.ПодчиненныеЭлементы.МаршрутСортироватьПоПлануПосещения.Пометка Тогда	
		ПоляСртировки = "ИндексПлана,ИндексФакта";
	Иначе
		Возврат;
	КонецЕсли; 		
	
	Дерево = ДанныеФормыВЗначение(ПланФакт, Тип("ДеревоЗначений"));
	Для каждого сдзДата Из Дерево.Строки Цикл
		Для каждого сдзАгенты Из сдзДата.Строки Цикл
			сдзАгенты.Строки.Сортировать(ПоляСртировки, Ложь);	
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ПланФакт");	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланФактЗаполнитьРазворачивание()
	
	Для Каждого сдзАгенты Из ПланФакт.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = сдзАгенты.ПолучитьИдентификатор();
		сдзАгенты.УзелРазвернут = Элементы.ПланФакт.Развернут(ИдентификаторСтроки);
		Для Каждого сдзДата Из сдзАгенты.ПолучитьЭлементы() Цикл
			ИдентификаторСтроки = сдзДата.ПолучитьИдентификатор();
			сдзДата.УзелРазвернут = Элементы.ПланФакт.Развернут(ИдентификаторСтроки);
			Для Каждого сдзПартнеры Из сдзДата.ПолучитьЭлементы() Цикл
				ИдентификаторСтроки = сдзПартнеры.ПолучитьИдентификатор();
				сдзПартнеры.УзелРазвернут = Элементы.ПланФакт.Развернут(ИдентификаторСтроки);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланФактРазвернуть()
			
	ЭлементДерево = Элементы.ПланФакт;
	Для Каждого сдзАгент Из ПланФакт.ПолучитьЭлементы() Цикл 
		Если сдзАгент.УзелРазвернут Тогда
			ЭлементДерево.Развернуть(сдзАгент.ПолучитьИдентификатор(), Ложь);
		КонецЕсли;
		Для Каждого сдзДата Из сдзАгент.ПолучитьЭлементы() Цикл
			Если сдзДата.УзелРазвернут Тогда 
				ЭлементДерево.Развернуть(сдзДата.ПолучитьИдентификатор(), Ложь);
			КонецЕсли;
			Для Каждого сдзПартнер Из сдзДата.ПолучитьЭлементы() Цикл
				Если сдзПартнер.УзелРазвернут Тогда 
					ЭлементДерево.Развернуть(сдзПартнер.ПолучитьИдентификатор(), Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 	
	
КонецПроцедуры

// Получить свободную иконку для Агента, максимум 24. ограничение задано в Элементы.МаршрутИконка.КартинкаЗначений
&НаКлиенте
Функция ДеревоПланФактПолучитьСвободныйЦветИконки(МЗанятыеЦвета)
	
	Счетчик 		 = ИконкиНомерПервоиИконкиТрека() - 1; 
	КоличествоИконок = 25;
	
	Пока Счетчик < КоличествоИконок Цикл
		Счетчик = Счетчик + 1;
		Если МЗанятыеЦвета.Найти(Счетчик) = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Счетчик = КоличествоИконок Тогда
		Если МЗанятыеЦвета.Найти(Счетчик) = Неопределено Тогда
			МЗанятыеЦвета.Добавить(Счетчик);
		КонецЕсли;
	Иначе
		МЗанятыеЦвета.Добавить(Счетчик);
	КонецЕсли;
	
	Возврат Счетчик;
КонецФункции

//// Функция возвращает структуру с основными свойствами списка ТТ закрепленного за агентом - наименование, ссылку и описание ошибки.
//&НаСервере
//Функция ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент)
//
//	Возврат РеквизитФормыВЗначение("Объект").ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент);
//
//КонецФункции

&НаКлиенте
Функция ПланФактПолучитьТекущегоАгента(ПоказатьПредупреждение = Ложь)
	
	ВыбранныйАгент = Неопределено;
	
	СтрокаД = Элементы.ПланФакт.ТекущиеДанные;
	Пока СтрокаД <> Неопределено Цикл // в цикле поднимаемся вверх по ветке дерева до агента
		Если ЗначениеЗаполнено(СтрокаД.Агент) Тогда
			ВыбранныйАгент = СтрокаД.Агент;
			Прервать;
		Иначе
	        СтрокаД = СтрокаД.ПолучитьРодителя();
		КонецЕсли;
	КонецЦикла; 
	
	Если ВыбранныйАгент = Неопределено И ПоказатьПредупреждение Тогда
		Если ПланФакт.ПолучитьЭлементы().Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Добавьте в таблицу нужного агента.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите в таблице нужного агента.'"));
		КонецЕсли; 	
	КонецЕсли; 
	
	Возврат ВыбранныйАгент;
	
КонецФункции

&НаКлиенте
Процедура ПланФактУстановитьТекущегоАгента(Знач Агент)
	
	Если Не ЗначениеЗаполнено(Агент) Тогда
		ПланфактУровеньАгенты = ПланФакт.ПолучитьЭлементы();
		Если ПланфактУровеньАгенты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Агент = ПланфактУровеньАгенты[0].Агент;
	КонецЕсли;
	
	ПланФактУровеньАгенты = ПланФакт.ПолучитьЭлементы();   
	Если ПланФактУровеньАгенты.Количество() = 1 Тогда
		//Установка текущей строки
		Элементы.ПланФакт.ТекущаяСтрока = ПланФактУровеньАгенты[0].ПолучитьИдентификатор();
		//Переход к треку агента
		ПланФактПриАктивизацииСтроки(Элементы.ПланФакт);
	Иначе
		Для Каждого СтрокаД Из ПланФактУровеньАгенты Цикл
			Если СтрокаД.Агент = Агент Тогда
				Элементы.ПланФакт.ТекущаяСтрока = СтрокаД.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	КонецЕслИ;
	
КонецПроцедуры

// Процедура - Форма обновить отчет. Без Обновления макета. Или Добавить что то на карту.
// Важно!!! Процедура вызывается только через ДействиеОбработкаПланФакт()
// Параметры:
//		Действие- Строка - ПланФактДобавить, ПланФактУдалить, ПланФактОбновить, ПланФактОчистить. Действия с План факт. 
//		МАгенты	 - Массив Из СправочникСсылка.Пользователи - массив агентов, если неопределено то обновить данные по всем Агентам в ПланФакт
//
&НаКлиенте
Процедура ПланФактОбновить(Действие = "ПланФактОбновить", МАгенты = Неопределено)  

	//ПодключитьТаймер = НЕ МакетЗагружен; //Для того чтобы параллельно не было обращения к карте со стороны карты и обработчика.
	
	Если ДатаОтчета = Дата('00010101') ИЛИ ДатаОтчетаКонец = Дата('00010101') ИЛИ ДатаОтчета > ДатаОтчетаКонец Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	СтррТекущиеДанные = Новый Структура("Агент, Дата", ПланФактПолучитьТекущегоАгента(), ?(Элементы.ПланФакт.ТекущиеДанные = Неопределено, '00010101', Элементы.ПланФакт.ТекущиеДанные.ДатаТрека));
	
	//1. Изменить дерево ПланФакт. Изменяет только дерево. Нет действий с треками, маркерами и картой. (не определяется в ПланФакт АГЕНТЫ/Время АГЕНТЫ/Иконка)
	Если Действие = "ПланФактДобавить" Тогда
		//1.1 Проверка
		Если НЕ ТипЗнч(МАгенты) = Тип("Массив") ИЛИ МАгенты.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		//1.2 Получение мАгентыНовые и проверка на уже добавленные. 
		МАгентыНовые = Новый Массив;                			// Новые агенты, которых нет в дереве ПланФакт и их требуется добавит.  
		ДеревоУровеньАгенты 	= ПланФакт.ПолучитьЭлементы(); 	// Коллекция элементов дерева верхнего уровня.
		МДеревоУровеньАгенты	= Новый Массив;                 // Массив элементов дерева верхнего уровня.
		Для Каждого Элемент Из ДеревоУровеньАгенты Цикл
			МДеревоУровеньАгенты.Добавить(Элемент.Агент);	
		КонецЦикла;
		Для Каждого Элемент из МАгенты Цикл 
			сдзПоиск = МДеревоУровеньАгенты.Найти(Элемент);
			Если сдзПоиск = Неопределено Тогда
				МАгентыНовые.Добавить(Элемент);		
			Иначе
				Текст = НСтр("ru = 'Агент ""%1"" уже добавлен в таблицу.'");	
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Текст, Элемент));
			КонецЕсли;
		КонецЦикла;
		//1.3 Добавление новых агентов ПланФакт	
		Если МАгентыНовые.Количество() = 0 Тогда
			Возврат;
		Иначе
			ДеревоПланФактЗаполнитьРазворачивание();
			ДеревоПланФактИзменить(МАгентыНовые, Действие);
		КонецЕсли;
		
	ИначеЕсли Действие = "ПланФактУдалить" Тогда
		ДеревоПланФактЗаполнитьРазворачивание();
		ДеревоПланФактИзменить(МАгенты, Действие);
		
	ИначеЕсли Действие = "ПланФактОбновить"  Тогда
		ДеревоПланФактЗаполнитьРазворачивание();
		ДеревоПланФактИзменить(Неопределено, Действие);
		
	ИначеЕсли  Действие = "ПланФактОчистить" Тогда
		ДеревоПланФактИзменить(Неопределено, Действие);
		        
	Иначе
		Возврат;
		
	КонецЕсли;                                          
	                                                                  
	//2. Заполнить/Изменить тз КартаТреки 
	Если Действие = "ПланФактДобавить" Тогда
		ТрекиПрочитатьТрекиАгентов(МАгентыНовые, Действие);
	ИначеЕсли Действие = "ПланФактУдалить" Тогда
		ТрекиПрочитатьТрекиАгентов(МАгенты, Действие);
	ИначеЕсли Действие = "ПланФактОбновить" ИЛИ Действие = "ПланФактОчистить" Тогда
		ТрекиПрочитатьТрекиАгентов(Неопределено, Действие);
	КонецЕсли;
	
	//3. Заполнить в ПланФакт АГЕНТЫ/Время АГЕНТЫ/Иконка
	Если Действие = "ПланФактОбновить" ИЛИ Действие = "ПланФактУдалить" Тогда        
		ДеревоПланФактЗаполнитьВремяИконкаАгаента(Неопределено, Действие);
	ИначеЕсли Действие = "ПланФактДобавить" Тогда
		ДеревоПланФактЗаполнитьВремяИконкаАгаента(МАгентыНовые, Действие);	
	КонецЕсли;	
	
	//4. Заполнить Маркеры ТТ
	МаркерыЗаполнитьКартаМаркерыТТ(Действие);

	//5. Заполнить Маркеры Документов
	Если НЕ ОтображатьДокументыНаКарте Тогда
		КартаМаркерыДокументов.Очистить();
	ИначеЕсли Действие = "ПланФактДобавить" Тогда
		МаркерыЗаполнитьКартаМаркерыДокументов(Действие, МАгентыНовые);
	ИначеЕсли Действие = "ПланФактУдалить" Тогда
		МаркерыЗаполнитьКартаМаркерыДокументов(Действие, МАгенты);
	Иначе	
		МаркерыЗаполнитьКартаМаркерыДокументов(Действие, Неопределено);
	КонецЕсли;

	//6. Визуализация дерева. Разворачивание дерева. Востановление выбора текущего агента.
	//6.1 Сортировка
	Если Действие = "ПланФактДобавить" ИЛИ Действие = "ПланФактОбновить" Тогда
		ДеревоПланФактСортировать();
		ДеревоПланФактРазвернуть();
	Иначе
		ДеревоПланФактРазвернуть();
	КонецЕсли;
	//6.2 Установка текщего агента
	ПланФактУстановитьТекущегоАгента(СтррТекущиеДанные.Агент);	
	
	//7. Таблица с маркерами промежутков времени
	МаркерыПромежутковВремени(Новый Структура("Агент, ДатаТрека", СтррТекущиеДанные.Агент, СтррТекущиеДанные.Дата));

КонецПроцедуры

&НаКлиенте
Процедура ПланФактДобавлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Массив") ИЛИ Результат.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ДействиеОбработкаСобытий("ПланФактДобавить", Результат);
	ДействиеОбработкаСобытий("КартаОбновитьКарту");

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ДеревоПланФакта
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Обработчики

&НаКлиенте
Процедура ОповещениеОтметкиСпискаВидовДокументов(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолучатель = ВидыДокументов;
	СписокПолучатель.Очистить();
	
	Для Каждого Элемент из Список Цикл
		Если Элемент.Пометка Тогда					
			СписокПолучатель.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораПериода(Параметры, ДопПараметры) Экспорт
	//@skip-check unknown-form-parameter-access
	Если Параметры <> Неопределено И Параметры.ДатаНачала <= Параметры.ДатаОкончания Тогда
		ДатаОтчета 		= Параметры.ДатаНачала;
		ДатаОтчетаКонец = Параметры.ДатаОкончания;
		ДатаОтчетаПриИзменении(Элементы.ДатаОтчета);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактИзменениеВыбранногоЦвета(СтрокаД)

	ПланФактУровеньАгенты = ПланФакт.ПолучитьЭлементы();
	ИконкаПервогоТрека 	   = ИконкиНомерПервоиИконкиТрека(); //13
	ИконкаВыделенногоТрека = ИконкаПервогоТрека - 1;         //12
	ИконкаТекущегоТрека	   = Неопределено;
	ИконкаЕстьТрек		   = 11;							 //11
	
	//1. Уровень Агенты
	Для Каждого сдзПланФактУровеньАгенты Из ПланФактУровеньАгенты Цикл
		ПланФактУровеньДатаТрека = сдзПланФактУровеньАгенты.ПолучитьЭлементы();
		//1.1 Выбранная строка
		Если СтрокаД.Агент = сдзПланФактУровеньАгенты.Агент И СтрокаД.ДатаТрека = '00010101' Тогда
			//1.2 У строки есть трек. И Строка не выделена.
			Если сдзПланФактУровеньАгенты.Иконка >= ИконкаПервогоТрека И сдзПланФактУровеньАгенты.Иконка <> ИконкаВыделенногоТрека Тогда
				//1.3 Сохранение цвета для дальнейшего восстановления.
				ИконкаТекущегоТрека = сдзПланФактУровеньАгенты.Иконка; 
				//1.4 Установка иконки выделенного цвета
				сдзПланФактУровеньАгенты.Иконка = ИконкаВыделенногоТрека;
			КонецЕсли;
		ИначеЕсли сдзПланФактУровеньАгенты.Иконка = ИконкаВыделенногоТрека Тогда
			//1.5 Восстановление цвета
			сдзПланФактУровеньАгенты.Иконка = БуферИконкаДоИзменения;
		КонецЕсли;			
				
		//2. Уровень ДатаТрека
		Для Каждого сдзПланФактУровеньДатаТрека Из ПланФактУровеньДатаТрека Цикл
			//2.1 Выбранная строка
			Если СтрокаД.Агент = сдзПланФактУровеньДатаТрека.Агент И СтрокаД.ДатаТрека = сдзПланФактУровеньДатаТрека.ДатаТрека Тогда
				//2.2 У строки есть трек. И Строка не выделена.
				Если сдзПланФактУровеньДатаТрека.Иконка >= ИконкаПервогоТрека ИЛИ сдзПланФактУровеньДатаТрека.Иконка = ИконкаЕстьТрек И сдзПланФактУровеньДатаТрека.Иконка <> ИконкаВыделенногоТрека Тогда
					//2.3 Сохранение цвета для дальнейшего восстановления.
					ИконкаТекущегоТрека = сдзПланФактУровеньДатаТрека.Иконка; 
					//2.4 Установка иконки выделенного цвета
					сдзПланФактУровеньДатаТрека.Иконка = ИконкаВыделенногоТрека;
				КонецЕсли;	
			ИначеЕсли сдзПланФактУровеньДатаТрека.Иконка = ИконкаВыделенногоТрека Тогда
				//2.5 Восстановление цвета
				сдзПланФактУровеньДатаТрека.Иконка = БуферИконкаДоИзменения;
			КонецЕсли;
			
		КонецЦикла;			
	КонецЦикла;
	
	//3. Сохранение цвета для дальнейшего восстановления.
	Если ИконкаТекущегоТрека <> Неопределено Тогда 
		БуферИконкаДоИзменения = ИконкаТекущегоТрека;
	КонецЕслИ;
	
КонецПроцедуры	

&НаКлиенте
Процедура РежимРеальногоВремениОбработка()
	
	ДействиеОбработкаСобытий("ПланФактОбновить");
	ДействиеОбработкаСобытий("КартаОбновитьКарту");	
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Обработчики
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции 

// Функция возвращает структуру наличия реквизитов у переданных видов документов.
&НаСервере
Функция ПолучитьПризнакиНаличияРеквизитов(СЗВидыДокументов, СтрРеквизиты)
	
	СтррРезультат = Новый Структура;
	МРеквизиты = СтрРазделить_(СтрРеквизиты);

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Для Каждого Элемент Из СЗВидыДокументов Цикл
		Если ТекОбъект.ВДокЭтоВиртуальныйДокумент(Элемент.Значение) Тогда
		    Реквизиты = ТекОбъект.ВДокРеквизитыШапкиМассив(Элемент.Значение);
		Иначе	
			Реквизиты = Метаданные.Документы[Элемент.Значение].Реквизиты;
		КонецЕсли;
		стррРеквизиты = Новый Структура;
		Для Каждого ИмяРеквизита Из МРеквизиты Цикл
			Если Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
				стррРеквизиты.Вставить(ИмяРеквизита);
			КонецЕсли; 
		КонецЦикла; 
		СтррРезультат.Вставить(Элемент.Значение, стррРеквизиты);
	КонецЦикла; 
	
	Возврат СтррРезультат;
	
КонецФункции

&НаКлиенте
Процедура ВывестиСообщение(Знач ТекстСообщения)
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "'", "");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, """", "");
	
	//@skip-check use-non-recommended-method
	Текст = Формат(ТекущаяДата(), "ДЛФ=В") + " " + ТекстСообщения;
	//@skip-check object-deprecated
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "");
	
КонецПроцедуры		

// Функция выделяет из строки вида "N. ЧЧ:ММ - ЧЧ:ММ" строку "ЧЧ:ММ - ЧЧ:ММ"
&НаКлиентеНаСервереБезКонтекста
Функция ВыделитьИнтервалВремени(СтрВремя)

	//@skip-check use-non-recommended-method
	Индекс = Найти(СтрВремя, ".");
	Если Индекс = 0 Тогда
		Возврат СтрВремя;
	Иначе
		Возврат Сред(СтрВремя, Индекс + 1);
	КонецЕсли; 

КонецФункции

&НаКлиенте
Процедура ВнешнийВызовПоказатьТрек(СтррНастройкиФормы) Экспорт
	
	РежимРеальногоВремени = Ложь;
	РежимРеальногоВремениПриИзменении("ПроцедураВнешнийВызовПоказатьТрек");

	Если СтррНастройкиФормы <> Неопределено Тогда
		
		Если СтррНастройкиФормы.Свойство("СписокВидыДокументов") Тогда
			ВидыДокументов = СтррНастройкиФормы.СписокВидыДокументов.Скопировать();
		КонецЕсли;
		
		Если СтррНастройкиФормы.Свойство("ТолькоПроведенныеДокументы") Тогда
			ТолькоПроведенныеДокументы = СтррНастройкиФормы.ТолькоПроведенныеДокументы;
		КонецЕсли;
		
		Если СтррНастройкиФормы.Свойство("Период") Тогда
			ДатаОтчета = СтррНастройкиФормы.Период.ДатаНачала;		
		КонецЕсли;
		
		Если СтррНастройкиФормы.Свойство("Агент") Тогда
			МАгенты = Новый Массив;
			МАгенты.Добавить(СтррНастройкиФормы.Агент);
			ДействиеОбработкаСобытий("ПланФактДобавить", МАгенты);
		КонецЕсли;

		ДействиеОбработкаСобытий("КартаОбновитьКарту");		

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркерыПромежутковВремени(СтррДанные)
	
	Если НЕ ИспользоватьТочкиТрекаПоВремени Тогда
		Возврат;
	ИначеЕсли ЗначениеТочкиТрекаПоВремени < 1 Тогда	
		ЗначениеТочкиТрекаПоВремени = 60;
	КонецЕсли;
	
	КартаТочкиТрекаПоВремени.Очистить();            
	
	Если СтррДанные.Агент = Неопределено ИЛИ СтррДанные.ДатаТрека = '00010101' Тогда
		Возврат;
	КонецЕсли;	
	
	// Получаем Трек агента
	СтррОтбор = Новый Структура ("Агент, ДатаТрека", СтррДанные.Агент, СтррДанные.ДатаТрека);
	МСТЗТреки = КартаТреки.НайтиСтроки(СтррОтбор);
	
	Если МСТЗТреки.Количество() > 0 И МСТЗТреки[0].ТрекЕсть = Истина Тогда
		
		Трек = МСТЗТреки[0].Трек;
		ТрекКоличество = Трек.Количество();
	
		// Получаем координаты маркеров из ТрековАгента и заносим в Таблицу КартаТочкиТрекаПоВремени
		// Добавляем Точку начала
		НоваяСтрока = КартаТочкиТрекаПоВремени.Добавить();
		НоваяСтрока.Широта  = Трек[0].Широта; 
		НоваяСтрока.Долгота = Трек[0].Долгота;
		НоваяСтрока.Время   = Трек[0].Время;
		// Добавляем все промежуточные точки
		ВремяПоиска = Трек[0].Время + (ЗначениеТочкиТрекаПоВремени * 60); //+1 для того чтобы первая точка не попала.
		Для Каждого Элемент Из Трек Цикл  
			//(( sk_220630 MOD-2058
			Если Элемент.Широта <= 0 Или Элемент.Долгота <= 0 Тогда
				Продолжить;	
			КонецЕсли;   
			//)) sk_220630 
			Если Элемент.Время >= ВремяПоиска Тогда
				ВремяПоиска = Элемент.Время + (ЗначениеТочкиТрекаПоВремени * 60);
				НоваяСтрока = КартаТочкиТрекаПоВремени.Добавить();
				НоваяСтрока.Широта  = Элемент.Широта; 
				НоваяСтрока.Долгота = Элемент.Долгота;
				НоваяСтрока.Время   = Элемент.Время;
			КонецЕсли		
		КонецЦикла;
		
		Если КартаТочкиТрекаПоВремени.Количество() > 1 И КартаТочкиТрекаПоВремени[КартаТочкиТрекаПоВремени.Количество() - 1].Время <> Трек[ТрекКоличество - 1].Время Тогда
			// Добавляем последнюю точку
			НоваяСтрока = КартаТочкиТрекаПоВремени.Добавить();
			НоваяСтрока.Широта  = Трек[ТрекКоличество - 1].Широта; 
			НоваяСтрока.Долгота = Трек[ТрекКоличество - 1].Долгота;
			НоваяСтрока.Время   = Трек[ТрекКоличество - 1].Время;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаВидимостьДопИнформации()
	
	Элементы.МаршрутАдресПартнераОтдельнойСтрокой.Пометка 	= РежимДополнительнойИнфомации;
	Элементы.МаршрутГруппаИнформация.Видимость 				= РежимДополнительнойИнфомации;
	Элементы.МаршрутГруппаВерх.Видимость 					= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьНадписьПредупреждениеMac()
	
	Если ИсточникКарты = "YandexMaps" И МодульКарты.ПлатформаMac() Тогда	
		Элементы.ДекорацияКартаПредупреждениеMac.Видимость = Истина;
	Иначе
		Элементы.ДекорацияКартаПредупреждениеMac.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти 