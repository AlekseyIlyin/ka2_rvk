#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульКарты;  // общий клиентский модуль работы с картами
&НаКлиенте
Перем ГСтррЦвета; // цвета для использования в диалоговой форме
&НаКлиенте
Перем ГМодульК; // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтррКонтекст = Новый Структура("ВОВсеСвойства");
	СтррКонтекст.Вставить("СпрТоргТочки"); // KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	// Константа "ПоказыватьАдресКоординат" - признак: при выводе GPS-координат на формах получать из геосервиса адрес координат или нет?
	СтррКонтекст.Вставить("ПоказыватьАдресКоординат", Неопределено); 
	СтррКонтекст.Вставить("ИспользоватьСоглашенияСКлиентами", Константы.ИспользоватьСоглашенияСКлиентами.Получить());
	СтррКонтекст.Вставить("ИспользоватьДоговорыСКлиентами",   Константы.ИспользоватьДоговорыСКлиентами.Получить());
	
	СтррКонтекст.Вставить("СтатусыДокумента", СтрРазделить_("СтатусЗаписать,СтатусПровести,СтатусУдалить", ","));
	
	Настройки = ТекОбъект.ПрочитатьЗначенияНастроек("КаталогДанных");

	ПодкаталогФотграфий = ТекОбъект.ПодкаталогДанных("Фотографии",Настройки.КаталогДанных);		
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//       т.е. для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив Из Строка - массив строк.
&НаКлиентеНаСервереБезКонтекста 
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	//@skip-check use-non-recommended-method
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		//@skip-check use-non-recommended-method
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти


#Область СлужебныеПроцедурыИФункции_ВиртуальныеОбъекты
// Виртуальные объекты (ВО)  - это виртуальные документы и виртуальные справочники

// Процедура обновляет статус документа на форме документа.
// Параметры:
// 		Модуль - Форма - модуль формы документа.
// 		ИмяКоманды - Строка, Неопределено - имя команды документа, в соответствии с которым установить на форме код статуса документа (и обновить иконку статуса документа).
//				Если Неопределено, то на форме просто обновляется иконка статуса документа.
&НаКлиенте
Процедура ВОСтатусОбновитьНаФорме(Модуль, ИмяКоманды = Неопределено) Экспорт
	
	Если Модуль.СтррКонтекст.ВО.КорневойВид <> "Документ" Тогда
		Возврат; // визуализация статусов на форме элемента (записан, удален, проведен) поддерживается только для документов
	КонецЕсли; 
	
	Если ИмяКоманды <> Неопределено Тогда // процедура вызвана для интерактивного изменения статуса документа
		Модуль.УстановитьМодифицированостьФормы();	
	КонецЕсли;
	СтатусДокумента(Модуль.Статус, ИмяКоманды); // если ИмяКоманды = Неопределено, то после вызова процедуры ИмяКоманды установится в соответствующее значение по статусу документа
	МодульЭлементы = Модуль.Элементы;
	МодульЭлементы.ГруппаМенюСтатусовДокумента.Картинка = МодульЭлементы[ИмяКоманды].Картинка;
	Для Каждого ИмяЭлементаМеню Из СтррКонтекст.СтатусыДокумента Цикл // обновляем пометки меню
		МодульЭлементы[ИмяЭлементаМеню].Пометка = (ИмяЭлементаМеню = ИмяКоманды);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВООткрытьФормуИзФормыСписка(Модуль, СозданиеНового = Ложь, Копирование = Ложь) Экспорт
	
	СтатусОбъекта = Неопределено; // статус объекта (помечен на удаление, записан и т.д.)		
	GUID 		  = Неопределено; // идентификатор объекта
	
	Если Не СозданиеНового Или Копирование Тогда // если не создаем новый объект (т.е. открываем существующий) или копируем существующий объект, то надо прочесть свойства текущего объекта
		СтррСвойства = ВОЭлементыСвойстваТекущего(Модуль);
		Если СтррСвойства = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		СтатусОбъекта = СтррСвойства.Статус;
		GUID = СтррСвойства.ID;
	КонецЕсли; 
	
	Ключ = ?(СозданиеНового Или Копирование, Новый УникальныйИдентификатор, GUID); // ключ уникальности формы
	//@skip-check structure-consructor-too-many-keys
	СтррПараметры = Новый Структура("ID,Статус,Копирование,ВызовИзФормыСписка", GUID, СтатусОбъекта, Копирование, Истина);
	Если Модуль.СтррКонтекст.ВО.ВидОбъекта = "_Фотографии" Тогда
		СтррПараметры.Вставить("УИДВладельца", Модуль.УИДВладельца);
	КонецЕсли;
	МодульК().ОткрытьФормуОбработки(Модуль.СтррКонтекст.ВО.ФормаЭлемента, СтррПараметры, Ключ);
	
КонецПроцедуры

// Процедура открывает форму элемента виртуального объекта (справочника, документа).
//  Параметры:
//		Параметр - Структура, Строка - системные свойства виртуального объекта (Структура) или вид виртульного объекта (Строка)
//		GUID 		 - УникальныйИдентификатор - идентификатор виртуального объекта.
&НаКлиенте
Процедура ВООткрытьФорму(Параметр, GUID = Неопределено) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		Если Параметр.Свойство("ВидДокумента") Тогда
			ВидОбъекта = Параметр.ВидДокумента;
		Иначе
			ВидОбъекта = Параметр.ВидОбъекта;
		КонецЕсли; 
		СтррПараметры = Параметр; // должны быть свойства: GUID, Статус (необязательный), Проведен и ПометкаУдаления (необязателеньны)
		Ключ = Параметр.ID;
	Иначе
		ВидОбъекта = Параметр;
		СтррПараметры = Новый Структура("ID,ВызовИзФормыСписка", GUID, Ложь);
		Ключ = GUID;
	КонецЕсли; 
	
	СтррВОВсеСвойства = ВОПолучитьВсеСвойстваКлиент();
	СтррВО = СтррВОВсеСвойства[ВидОбъекта];
	
	МодульК().ОткрытьФормуОбработки(СтррВО.ФормаЭлемента, СтррПараметры, Ключ);
	
КонецПроцедуры

&НаКлиенте
Функция ВОПолучитьВсеСвойстваКлиент()
	
	Если Не ЗначениеЗаполнено(СтррКонтекст.ВОВсеСвойства) Тогда
		СтррКонтекст.ВОВсеСвойства = ВОПолучитьВсеСвойстваСервер();
	КонецЕсли; 
	
	Возврат СтррКонтекст.ВОВсеСвойства;	

КонецФункции

&НаСервере
Функция ВОПолучитьВсеСвойстваСервер()
	
	Возврат РеквизитФормыВЗначение("Объект").ВОПолучитьВсеСвойства();

КонецФункции

// Вызывается при открытии формы списка элементов или формы элемента
// Параметры:
//   Модуль - Форма
&НаКлиенте
Процедура ВОПриОткрытии(Модуль) Экспорт
	
	СтррМКонтекст = Модуль.СтррКонтекст;	
	
	Модуль.Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррМКонтекст.Цвета.ФонРаздела;	
	//@skip-check unknown-method-property
	Модуль.ЭтаФорма.Модифицированность = Ложь;
	
	Если СтррМКонтекст.ЭтоФормаСписка И СтррМКонтекст.ДляВыбора = Истина Тогда
		
		Модуль.Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
		
		МСтроки = Модуль.Объект[СтррМКонтекст.ВО.РеквизитОбработки].НайтиСтроки(Новый Структура("ID", СтррМКонтекст.ID));
		Если МСтроки.Количество() <> 0 Тогда
			Модуль.Элементы.ТПЭлементы.ТекущаяСтрока = МСтроки[0].ПолучитьИдентификатор();
		КонецЕсли; 
		
	ИначеЕсли Не СтррМКонтекст.ЭтоФормаСписка И СтррМКонтекст.ВО.КорневойВид = "Документ" Тогда
		
		ВОИнициализироватьДокумент(Модуль);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВОИнициализироватьДокумент(Модуль)
	
	//@skip-check unknown-method-property
	Модуль.СтррКонтекст.IDNew = Модуль.ЭтаФорма.КлючУникальности; // идентификатор для создания нового документа	
	
	Если Не ЗначениеЗаполнено(Модуль.ID) Тогда // открыт новый документ
		//@skip-check use-non-recommended-method
		Модуль.Дата = ТекущаяДата();
		СтррЗначения = ПолучитьЗначенияПоУмолчанию() ;
		Модуль.Организация  = СтррЗначения.Организация;
		Модуль.Менеджер 	= СтррЗначения.Менеджер;
	КонецЕсли; 
	
	ФормаСведенияИзМТРежимРедактированияОбновить(Модуль);
	ВОСтатусОбновитьНаФорме(Модуль);
	
	ФормаОбновитьАдресПартнера(Модуль);
	
	МодульЭлементы = Модуль.Элементы;
	
	Если МодульЭлементы.Найти("Соглашение") <> Неопределено И Не СтррКонтекст.ИспользоватьСоглашенияСКлиентами Тогда
		МодульЭлементы.Соглашение.Видимость = Ложь;
	КонецЕсли; 
	
	Если МодульЭлементы.Найти("Договор") <> Неопределено И Не СтррКонтекст.ИспользоватьДоговорыСКлиентами Тогда
		МодульЭлементы.Договор.Видимость = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВОПередЗаписьюЭлемента(Модуль, НовыйСтатус = Неопределено) Экспорт
	
	Если НовыйСтатус <> Неопределено Тогда
	    Модуль.Статус = НовыйСтатус;
		ВОСтатусОбновитьНаФорме(Модуль); // обновляем визуальный статус элемента на форме
	КонецЕсли; 
	
	Если Строка(Модуль.ID) = "00000000-0000-0000-0000-000000000000" Тогда // новый объект
		Модуль.ID = ?(ТипЗнч(Модуль.СтррКонтекст.IDNew) = Тип("УникальныйИдентификатор"), Модуль.СтррКонтекст.IDNew, Новый УникальныйИдентификатор());
	КонецЕсли; 
	
	Если Модуль.СтррКонтекст.ВО.КорневойВид = "Справочник" Тогда
		// для сохраняемого элемента справочника всегда назначаем статус - "Записан"
		Модуль.Статус = Модуль.СтррКонтекст.КодыИконок.Записан;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВОЭлементыПередПометкойУдаления(Модуль, Элемент, Отказ) Экспорт
	
	Отказ = Истина;
	
	СтрокаТ = Элемент.ТекущиеДанные;
	Если СтрокаТ = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтррИконки = Модуль.СтррКонтекст.КодыИконок;
	СтатусПомечен = СтррИконки.Помечен; 
	//СтатусЗаписан = СтррИконки.Записан;
	
	ЭлементПомечен = (СтрокаТ.Статус = СтатусПомечен);
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда // выделено несколько строк
		Если ЭлементПомечен Тогда
		    ТекстШ = НСтр("ru = 'Снять пометку на удаление с выбранных элементов (выбрано: %1)?'");
		Иначе
			ТекстШ = НСтр("ru = 'Пометить на удаление выбранные элементы (выбрано: %1)?'");
		КонецЕсли; 
		Текст = СтрШаблон_(ТекстШ, Элемент.ВыделенныеСтроки.Количество());
	Иначе // выделена одна строка
		Если ЭлементПомечен Тогда
		    Текст = НСтр("ru = 'Снять пометку на удаление с выбранного элемента?'");
		Иначе
			Текст = НСтр("ru = 'Пометить на удаление выбранный элемент?'");
		КонецЕсли; 
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВОЭлементыПередПометкойУдаленияЗавершение", ЭтотОбъект, Модуль);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОЭлементыПередПометкойУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Модуль = ДополнительныеПараметры;
		
		Массив = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Модуль.Элементы.ТПЭлементы.ВыделенныеСтроки);
		
		СтррИконки = Модуль.СтррКонтекст.КодыИконок;
		СтатусПомечен = СтррИконки.Помечен; // аналогичный алгоритм используется в других местах - искать тэг #ВДокПометкаУдалениеДокументов#
		СтатусЗаписан = СтррИконки.Записан;

		МИдентификаторы = Новый Массив; // массив помечаемых на удаление идентификаторов документов
		ТЗСтроки = Модуль.Объект[Модуль.СтррКонтекст.ВО.РеквизитОбработки];	
		Для Каждого ИдСтроки Из Массив Цикл
			СтрокаТ = ТЗСтроки.НайтиПоИдентификатору(ИдСтроки);
			Если СтрокаТ <> Неопределено Тогда
				МИдентификаторы.Добавить(СтрокаТ.ID);				
				СтрокаТ.Статус = ?(СтрокаТ.Статус <> СтатусПомечен, СтатусПомечен, СтатусЗаписан);
			КонецЕсли;
		КонецЦикла;
		
		ВОЭлементыУдалить(Модуль.СтррКонтекст.ВО, МИдентификаторы, Ложь);		
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в форме списка перед окончательным удалением элементов табличного поля.
// Параметры:
//   Модуль - Форма 
//   Элемент - ТаблицаФормы
&НаКлиенте
Процедура ВОЭлементыПередУдалением(Модуль, Элемент) Экспорт
	
	Если Модуль.СтррКонтекст.ДляВыбора Тогда
		Возврат;
	КонецЕсли; 
	
	Если Элемент.ВыделенныеСтроки.Количество() > 1 Тогда // выделено несколько строк
		Текст = СтрШаблон_(НСтр("ru = 'Удалить выбранные элементы (выбрано: %1)? Помеченные на удаление элементы будут окончательно удалены из БД без возможности восстановления!'"), 
					Элемент.ВыделенныеСтроки.Количество());
	Иначе // выделена одна строка
		Текст = НСтр("ru = 'Удалить выбранный элемент? Элемент будет окончательно удален из БД без возможности восстановления.'");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВОЭлементыПередУдалениемЗавершение", ЭтотОбъект, Модуль);
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОЭлементыПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда

		Модуль = ДополнительныеПараметры;
		
		Массив = Новый Массив; // предварительно запоминаем выделенные строки в промежуточном массиве
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, Модуль.Элементы.ТПЭлементы.ВыделенныеСтроки);
		
		СтррИконки = Модуль.СтррКонтекст.КодыИконок;
		СтатусПомечен = СтррИконки.Помечен; 
		//СтатусЗаписан = СтррИконки.Записан;

		МИдентификаторы = Новый Массив; // массив удаленных идентификаторов элементов
		ТЗСтроки = Модуль.Объект[Модуль.СтррКонтекст.ВО.РеквизитОбработки];	
		Для Каждого ИдСтроки Из Массив Цикл
			СтрокаТ = ТЗСтроки.НайтиПоИдентификатору(ИдСтроки);
			Если СтрокаТ.Статус = СтатусПомечен Тогда
				МИдентификаторы.Добавить(СтрокаТ.ID);
				ТЗСтроки.Удалить(ТЗСтроки.Индекс(СтрокаТ));
				Если Модуль.СтррКонтекст.ВО.ВидОбъекта = "_Фотографии" Тогда
					
					Если ЗначениеЗаполнено(СтрокаТ.ХранимыйФайл) Тогда
						
						Попытка
							УдалитьФайлы(ПодкаталогФотграфий + СтрокаТ.ХранимыйФайл);
						Исключение
							//@skip-check use-non-recommended-method
							Сообщить("Не удалось удалить файл " + СтрокаТ.ХранимыйФайл + " по причине " + ОписаниеОшибки());
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
		
		Если МИдентификаторы.Количество() = 0 Тогда
			Текст = НСтр("ru = 'Удаляются только помеченные на удаление элементы! Удаление не выполнено!'");
			ПоказатьПредупреждение(Неопределено, Текст);
		Иначе
			ВОЭлементыУдалить(Модуль.СтррКонтекст.ВО, МИдентификаторы, Истина);		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВОЭлементыУдалить(СтррВО, МИдентификаторы, ОкончательноеУдаление)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ОкончательноеУдаление Тогда
		ТекОбъект.ВОЭлементыУдалить(СтррВО, МИдентификаторы, Истина);	
	Иначе
		ТекОбъект.ВОЭлементыПометитьНаУдаление(СтррВО, МИдентификаторы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВОЭлементыВыделить(Модуль, GUID) Экспорт
	
	Если ТипЗнч(GUID) = Тип("УникальныйИдентификатор") Тогда
		МСтроки = Модуль.Объект[Модуль.СтррКонтекст.ВО.РеквизитОбработки].НайтиСтроки(Новый Структура("ID", GUID));   
		Если МСтроки.Количество() <> 0 Тогда
			Модуль.Элементы.ТПЭлементы.ТекущаяСтрока = МСтроки[0].ПолучитьИдентификатор();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Функция возвращает ключевые свойства текущего элемента табличного поля списка.
// Или возвращает Неопределено, если нет текущего элемента (нет текущей строки) в табличном поле.
// Параметры:
//   Модуль - Форма
// Возвращаемое значение:
//   Произвольный - Структура или Неопределено
&НаКлиенте
Функция ВОЭлементыСвойстваТекущего(Модуль) Экспорт
	
	СтрокаТ = Модуль.Элементы.ТПЭлементы.ТекущиеДанные;	
	
	Если СтрокаТ = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура("ID,Статус");	
	    ЗаполнитьЗначенияСвойств(Результат, СтрокаТ);
	КонецЕсли; 

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВОЭлементыВыбор(Модуль) Экспорт

	Если Модуль.СтррКонтекст.ДляВыбора = Истина Тогда
		ВОВыбратьИЗакрыть(Модуль, Модуль.Элементы.ТПЭлементы.ВыделенныеСтроки);
	Иначе
		ВООткрытьФормуИзФормыСписка(Модуль);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВОПолучитьВыбранные(Модуль, МСтроки) Экспорт

	Элемент = Модуль.Элементы.ТПЭлементы;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Значение не выбрано.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТ = Элемент.ТекущиеДанные;
	СтррРезультат = Новый Структура("ID,Наименование", СтрокаТ.ID, СтрокаТ.Наименование);
	
	// учитываем, что может быть выбрано несколько значений
	Если ТипЗнч(МСтроки) = Тип("Массив") Тогда
		МЗначения = Новый Массив;
		ТЗн = Модуль.Объект[Модуль.СтррКонтекст.ВО.РеквизитОбработки];
		Для Каждого ИдСтроки Из МСтроки Цикл
			СтрокаТ = ТЗн.НайтиПоИдентификатору(ИдСтроки);
			МЗначения.Добавить(Новый Структура("ID,Наименование", СтрокаТ.ID, СтрокаТ.Наименование));
		КонецЦикла;
		СтррРезультат.Вставить("мВыбранныеЗначения", МЗначения);
	КонецЕсли; 
	
	Возврат СтррРезультат;

КонецФункции

// Процедура выбирает текущую строку (строки) и закрывает форму. Используется при открытии формы в режиме выбора.
// Параметры:
//   Модуль - Форма
//   Значение - Массив Из СтрокаТаблицыЗначений - перечень виртуальных объектов для выбора и закрытия.
&НаКлиенте
Процедура ВОВыбратьИЗакрыть(Модуль, Значение) Экспорт
	
	СтррРезультат = ВОПолучитьВыбранные(Модуль, Значение);
	//@skip-check unknown-method-property
	Модуль.ЭтаФорма.Закрыть(СтррРезультат);
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ВиртуальныеОбъекты
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФормаДокумента

&НаСервере
Функция ПолучитьЗначенияПоУмолчанию() 
	
	СтррРезультат = Новый Структура("Менеджер,Валюта,Организация");
	
	СтррРезультат.Менеджер    = Пользователи.ТекущийПользователь();
	СтррРезультат.Валюта      = Константы.ВалютаРегламентированногоУчета.Получить(); // Не поддерживается в УТ 11.1: ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	СтррРезультат.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	
	Возврат СтррРезультат;
	
КонецФункции

// Процедура возвращает в одном из параметров: или код статуса документа, или имя команды (соответствующей статусу документа).
// Параметры:
// 		КодСтатуса - Число - код статуса документа, в соответствии с которым вернуть имя команды в параметре ИмяКоманды, соответствующей коду статуса.
// 		ИмяКоманды - Строка, Неопределено - имя команды документа, в соответствии с которым вернуть в параметре КодСтатуса код статуса документа.
//				Если Неопределено, то в параметре ИмяКоманды возвращается имя команды, соответствующей коду статуса документа из параметра КодСтатуса.
&НаКлиенте
Процедура СтатусДокумента(КодСтатуса, ИмяКоманды)
	
	Если ИмяКоманды = Неопределено Тогда // нужно определить имя команды по статусу документа
		Если КодСтатуса > СтррКонтекст.СтатусыДокумента.ВГраница() Тогда
			ВызватьИсключение(СтрШаблон_("Процедура СтатусДокумента(): значание параметра КодСтатуса (%1) превышает лимит (%2)", КодСтатуса, СтррКонтекст.СтатусыДокумента.ВГраница()));
		Иначе
			ИмяКоманды = СтррКонтекст.СтатусыДокумента[КодСтатуса];
		КонецЕсли; 
	Иначе // нужно изменить статус документа по имени команды
		КодСтатуса = СтррКонтекст.СтатусыДокумента.Найти(ИмяКоманды);
		Если КодСтатуса = Неопределено Тогда
			ВызватьИсключение(СтрШаблон_("Процедура СтатусДокумента(): не предусмотренное значание параметра ИмяКоманды = ""%1""!", ИмяКоманды));
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ФормаДокумента
#КонецОбласти 



#Область СлужебныеПроцедурыИФункции_РеквизитыМТНаФорме

&НаКлиенте
Процедура ФормаОбновитьАдресПартнера(Модуль) Экспорт
	
	//@skip-check structure-consructor-too-many-keys
	СтррКоординаты = Новый Структура("Адрес,Широта,Долгота,Широта2,Долгота2,Расстояние,МаксРасстояние", 
		Модуль.АдресОбъекта, Модуль.ШиротаОбъекта, Модуль.ДолготаОбъекта, Модуль.Широта, Модуль.Долгота); // последние 4 свойства используются при расчете расстояния между двумя точками
	ОбновитьАдресПартнераСервер(Модуль.Партнер, СтррКоординаты);
	Модуль.АдресОбъекта  	= СтррКоординаты.Адрес;
	Модуль.ШиротаОбъекта	= СтррКоординаты.Широта;
	Модуль.ДолготаОбъекта	= СтррКоординаты.Долгота;
	
	Если МодульКарты().ЭтоОчноеПосещение(СтррКоординаты) Тогда
		Модуль.Элементы.ДекорацияРасстояние.ЦветТекста = ВернутьЦвет("Авто");
		Модуль.Элементы.ДекорацияВнимание.Видимость = Ложь;
	Иначе
		Модуль.Элементы.ДекорацияРасстояние.ЦветТекста = ВернутьЦвет("Ошибка");
		Модуль.Элементы.ДекорацияВнимание.Видимость = Истина;
	КонецЕсли; 
	
	Расстояние = ?(ЗначениеЗаполнено(СтррКоординаты.Расстояние), Окр(СтррКоординаты.Расстояние, 0), 0);
	ПоказатьРасстояние = ЗначениеЗаполнено(Расстояние);
	Если ПоказатьРасстояние Тогда
		Если Расстояние > 10000 Тогда
			СтрРасстояние = Строка(Окр(Расстояние / 1000, 0)) + " км";
		ИначеЕсли Расстояние > 100 Тогда
			СтрРасстояние = Строка(Окр(Расстояние / 1000, 1)) + " км";
		Иначе
			СтрРасстояние = Строка(Окр(Расстояние, 0)) + " м";
		КонецЕсли; 
	Иначе
		СтрРасстояние = "?";
	КонецЕсли; 
	
	Модуль.Элементы.ДекорацияРасстояние.Заголовок = СтрРасстояние;
	
	Модуль.Элементы.ИнфоМТАдресКлиента.Заголовок  = ?(ЗначениеЗаполнено(Модуль.АдресОбъекта), Модуль.АдресОбъекта, НСтр("ru = 'не задан'"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресПартнераСервер(Партнер, СтррАдрес)
	
	СтррАдрес.Широта  = 0;
	СтррАдрес.Долгота = 0;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		СтррАдрес.Адрес = "";
		Возврат;
	КонецЕсли; 
	
	АдресПартнера = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Партнер, Справочники.ВидыКонтактнойИнформации.АдресПартнера);	
	
	Если РеквизитФормыВЗначение("Объект").ПолучитьКоординатыПартнера(Партнер, СтррАдрес) Тогда
		Если ЗначениеЗаполнено(АдресПартнера) Тогда
			СтррАдрес.Адрес = АдресПартнера;
		Иначе
			СтррАдрес.Адрес = СтрШаблон_(НСтр("ru = '(ш/д: %1; %2)'"), СтррАдрес.Широта, СтррАдрес.Долгота);
		КонецЕсли; 
	Иначе
		СтррАдрес.Адрес = АдресПартнера;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ФормаСведенияИзМТОбновить(Модуль) Экспорт 
	
	ПустаяДата = Дата('00010101');
	Если Модуль.ВремяНачала = ПустаяДата И Модуль.ВремяОкончания = ПустаяДата Тогда
		Модуль.ИнфоВремяСоздания = НСтр("ru = 'Не задано.'");
	Иначе
		ВремяНачала 	= Модуль.ВремяНачала;
		ВремяОкончания	= Модуль.ВремяОкончания;
		Если НачалоДня(ВремяНачала) = НачалоДня(ВремяОкончания) Тогда
			//@skip-check use-non-recommended-method
			Если НачалоДня(ВремяНачала) = НачалоДня(ТекущаяДата()) Тогда
				СтрДата = НСтр("ru = 'Сегодня'");
			Иначе
				СтрДата = Формат(ВремяНачала, "ДФ=dd.MM.yy");
			КонецЕсли; 
			СтрПериод = Формат(ВремяНачала, "ДФ=HH:mm") + " - " + Формат(ВремяОкончания, "ДФ=HH:mm");
			Модуль.ИнфоВремяСоздания = СтрШаблон_("%1 %2", СтрДата, СтрПериод);
		Иначе
			Модуль.ИнфоВремяСоздания = Формат(ВремяНачала, "ДФ='dd.MM.yy HH:mm'") + " - " + Формат(ВремяОкончания, "ДФ='dd.MM.yy HH:mm'");
		КонецЕсли; 
	КонецЕсли;
	
	// Координаты места создания документа
	ШиротаДок  = ?(Модуль.Широта  = "-", "", Модуль.Широта);
	ДолготаДок = ?(Модуль.Долгота = "-", "", Модуль.Долгота);
	
	Если Не ЗначениеЗаполнено(ШиротаДок) И Не ЗначениеЗаполнено(ДолготаДок) Тогда
		Модуль.ИнфоКоординатыМестаСоздания = НСтр("ru = 'Координаты не указаны.'");
	Иначе
		
		Если СтррКонтекст.ПоказыватьАдресКоординат = Неопределено Тогда
			ПрочестьНастройкиИзХранилища();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Модуль.АдресПоГеокодеру) И СтррКонтекст.ПоказыватьАдресКоординат Тогда
			СтррКоординаты = Новый Структура("Широта,Долгота", ШиротаДок, ДолготаДок);
			Модуль.АдресПоГеокодеру = МодульКарты().ПолучитьАдресПоКоординатамОтВебСервиса(СтррКоординаты, Истина, Истина);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Модуль.АдресПоГеокодеру) Тогда
			Модуль.ИнфоКоординатыМестаСоздания = Модуль.АдресПоГеокодеру;
		Иначе
			Модуль.ИнфоКоординатыМестаСоздания = СтрШаблон_(НСтр("ru = '(ш/д: %1; %2)'"), ШиротаДок, ДолготаДок);
		КонецЕсли;
		
	КонецЕсли;
	
	Модуль.Элементы.ИнфоМТМестоСоздания.Заголовок = Модуль.ИнфоКоординатыМестаСоздания;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаСведенияИзМТРежимРедактированияОбновить(Модуль) Экспорт 
	РежимРедактирования = Модуль.СтррКонтекст.Свойство("РедактироватьРеквизитыМТ") И Модуль.СтррКонтекст.РедактироватьРеквизитыМТ = Истина;
	Модуль.Элементы.ИнфоМТВремяСоздания.Гиперссылка  = РежимРедактирования; // отладочный режим - можем изменять время создания документа
КонецПроцедуры

// Процедура показывает на карте два объекта (если это возможно): место создания документа и расположение партнера (торговой точки)
// Параметры:
//   Модуль - Форма
//   ВидОбъекта - Строка
//@skip-check method-already-defined
//@skip-check method-already-defined
&НаКлиенте
Процедура ПоказатьНаКарте(Модуль, ВидОбъекта)
	
	ММаркеры = Новый Массив;
	СтррМаркер1 = ПолучитьМаркер(Модуль, ВидОбъекта);
	Если СтррМаркер1 = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Координаты не заполнены.'"));
		Возврат;
	КонецЕсли;
	
	ММаркеры.Добавить(СтррМаркер1);
	
	СтррМаркер2 = ПолучитьМаркер(Модуль, ?(ВидОбъекта = "Документ", "Партнер", "Документ"));
	Если СтррМаркер2 <> Неопределено Тогда
		ММаркеры.Добавить(СтррМаркер2);
	КонецЕсли; 
	
	СтррПараметры = Новый Структура("ПоказатьТолькоКарту,Маркеры", Истина, ММаркеры);
	Форма = МодульК().ОткрытьФормуОбработки("ПросмотрНаКарте", СтррПараметры, "АППоказатьНаКарте");
	Если Форма.СтррКонтекст.Повторно = Истина Тогда // значит форма карты была до этого открыта
		Форма.ВнешнийВызовДобавитьИПоказатьМаркеры(СтррПараметры);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция РеквизитМТПриНажатииСсылки(Модуль, Элемент, СтандартнаяОбработка = Неопределено) Экспорт 
	
	Результат = Неопределено;
	
	СтандартнаяОбработка = Ложь;
	Период = Новый СтандартныйПериод; 
	Период.ДатаНачала 	 = Модуль.ВремяНачала;
	Период.ДатаОкончания = Модуль.ВремяОкончания;
	
	Если Элемент.Имя = "ИнфоМТВремяСоздания" Тогда // запрашиваем время создания
		
		СтррПараметры = Новый Структура("ДатаНачала,ДатаОкончания", Модуль.ВремяНачала, Модуль.ВремяОкончания);
		Оповещение = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Модуль);
		МодульК().ОткрытьФормуОбработки("ВыборПериода", СтррПараметры,, Оповещение);
		
	ИначеЕсли Элемент.Имя = "ИнфоМТМестоСоздания" Тогда // показываем объект на карте, но если включено еще и редактирование
		
		РежимРедактирования = Модуль.СтррКонтекст.Свойство("РедактироватьРеквизитыМТ") И Модуль.СтррКонтекст.РедактироватьРеквизитыМТ = Истина;
		
		Если РежимРедактирования Тогда // предложить выбор - показать объект на карте или изменить координаты
			
			// нужно вернуть структуру, которая будет задействована в исходном модуле для выбора значения из меню			
			Меню = Новый СписокЗначений;
			Меню.Добавить("ПоказатьНаКарте",   НСтр("ru = 'Показать на карте'"));			
			Меню.Добавить("УказатьКоординаты", НСтр("ru = 'Указать координаты'"));
			Оповещение = Новый ОписаниеОповещения("ВыборВариантаРаботыСКоординатамиЗавершение", ЭтотОбъект, Модуль);
			Результат = Новый Структура("Меню,Оповещение", Меню, Оповещение); 
			
		Иначе // показываем объект на карте
			
			ПоказатьНаКарте(Модуль, "Документ");
			
		КонецЕсли;
		
	ИначеЕсли Элемент.Имя = "ИнфоМТАдресКлиента" Тогда // показываем объект на карте, но если включено еще и редактирование		
		
		ПоказатьНаКарте(Модуль, "Партнер");
		
	Иначе
		Текст = СтрШаблон_("Процедура РеквизитМТПриНажатииСсылки(): передано событие от неизвестного элемента формы (%1).", Элемент.Имя);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыборПериодаЗавершение(СтррРезультат, ДополнительныеПараметры) Экспорт

	Модуль = ДополнительныеПараметры;
	
	Если ТипЗнч(СтррРезультат) = Тип("Структура") И СтррРезультат.КодВозвратаДиалога = КодВозвратаДиалога.ОК Тогда
		Модуль.ВремяНачала 	  = СтррРезультат.ДатаНачала;
		Модуль.ВремяОкончания = СтррРезультат.ДатаОкончания;
		ФормаСведенияИзМТОбновить(Модуль);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаРаботыСКоординатамиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Модуль = ДополнительныеПараметры;
	
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "УказатьКоординаты" Тогда
			
			СтррПараметры = Новый Структура("Широта,Долгота", Модуль.Широта, Модуль.Долгота);
			Оповещение = Новый ОписаниеОповещения("ВыборКоординатЗавершение", ЭтотОбъект, Модуль);
			МодульК().ОткрытьФормуОбработки("ВыборКоординат", Новый Структура("Значения", СтррПараметры),, Оповещение);
			
		ИначеЕсли Результат.Значение = "ПоказатьНаКарте" Тогда
			ПоказатьНаКарте(Модуль, "Документ");
		Иначе
			ВызватьИсключение("Неизвестное значение пункта меню для выбора: " + Результат.Значение);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКоординатЗавершение(СтррРезультат, ДополнительныеПараметры) Экспорт
	
	Модуль = ДополнительныеПараметры;
	
	Если ТипЗнч(СтррРезультат) = Тип("Структура") Тогда
		Модуль.Широта  = СтррРезультат.Широта;
		Модуль.Долгота = СтррРезультат.Долгота;
		Модуль.АдресПоГеокодеру = "";		
		ФормаСведенияИзМТОбновить(Модуль);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНаКартеОбъект(Ссылка, Описание) Экспорт

	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
		
		СтррМаркер = ПолучитьМаркерОбъекта(Ссылка, Описание);
		Если СтррМаркер <> Неопределено Тогда
			ММаркеры = Новый Массив;
			ММаркеры.Добавить(СтррМаркер);
			СтррПараметры = Новый Структура("ПоказатьТолькоКарту,Маркеры", Истина, ММаркеры);
			Форма = МодульК().ОткрытьФормуОбработки("ПросмотрНаКарте", СтррПараметры, "АППоказатьНаКарте");
			Если Форма.СтррКонтекст.Повторно = Истина Тогда // значит форма карты была до этого открыта
				Форма.ВнешнийВызовДобавитьИПоказатьМаркеры(СтррПараметры);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
		
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоординатыПартнераСервер(Партнер, СтррКоординаты)
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьКоординатыПартнера(Партнер, СтррКоординаты);
	
КонецФункции

#Область РеквизитыМТНаФорме_ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Модуль, Элемент) Экспорт
	
	Если Модуль.СтррКонтекст.ИспользоватьДоговоры Тогда
		ПроверитьИОчиститьРеквизиты(Модуль, "Соглашение,Договор", "Организация", Модуль.Организация);
	КонецЕсли;
	Модуль.УстановитьМодифицированостьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Модуль, Элемент) Экспорт
	
	ОбновитьОрганизациюПоРеквизиту(Модуль, "Договор");
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Модуль, Элемент) Экспорт
	
	ОбновитьОрганизациюПоРеквизиту(Модуль, "Соглашение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Модуль, Элемент) Экспорт
	
	ФормаОбновитьАдресПартнера(Модуль);
	
	СтрРеквизиты = "Контрагент";
	Если Модуль.СтррКонтекст.ИспользоватьДоговоры Тогда
		СтрРеквизиты = СтрРеквизиты + ",Соглашение,Договор";
	КонецЕсли; 
	
	ПроверитьИОчиститьРеквизиты(Модуль, СтрРеквизиты, "Партнер", Модуль.Партнер);
	
	Модуль.УстановитьМодифицированостьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Модуль, Элемент) Экспорт
	
	ЗначениеПроверки = ЗначениеРеквизитаОбъекта(Модуль.Контрагент, "Партнер");
	Если ЗначениеПроверки <> Модуль.Партнер Тогда
		Модуль.Партнер 	  = ЗначениеПроверки;
		Если Модуль.СтррКонтекст.ИспользоватьДоговоры Тогда			
			Модуль.Соглашение = Неопределено;
			Модуль.Договор 	  = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
	Модуль.УстановитьМодифицированостьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбораЗавершение(Модуль, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
	
		Модуль.Контрагент = Результат;
		КонтрагентПриИзменении(Модуль, Неопределено);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Модуль, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Модуль.Партнер) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Сначала выберите клиента.'"));
		Возврат;
	КонецЕсли;
		
	СтррПараметры = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	СтррПараметры.Элемент              = Элемент;
	СтррПараметры.Партнер              = Модуль.Партнер;
	СтррПараметры.Документ             = Модуль.Соглашение;
	СтррПараметры.ДатаДокумента        = Модуль.Дата;
	СтррПараметры.ДанныеФормыСтруктура = Модуль.Объект;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(СтррПараметры, СтандартнаяОбработка);
	
КонецПроцедуры

// Функция возвращает Истина, если обработала событие.
// Используется для сокращения кода обработки общих событий для форм модуля обмена.
// Параметры:
//   Модуль - Форма
//   ИмяСобытия - Строка
//   Параметр - Произвольный
//   Источник - Неопределено - (не используется)
// Возвращаемое значение:
//   Булево
&НаКлиенте
Функция ОбработкаОповещенияФормы(Модуль, ИмяСобытия, Параметр, Источник) Экспорт

	Результат = Истина;
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		//@skip-check unknown-method-property
		Модуль.ЭтаФорма.Модифицированность = Ложь;
		//@skip-check unknown-method-property
		Модуль.ЭтаФорма.Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> Модуль.СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// РеквизитыМТНаФорме_ОбработчикиСобытийЭлементовФормы
#КонецОбласти 

// СлужебныеПроцедурыИФункции_РеквизитыМТНаФорме
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ПрочестьНастройкиИзХранилища()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	СтррКонтекст.ПоказыватьАдресКоординат = ТекОбъект.ПрочитатьЗначениеНастройки("ПоказыватьАдресКоординат"); 
	
КонецПроцедуры
	
// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Прочие

&НаСервере
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура КомандаВыполнить(Команда, Модуль) Экспорт
	
	КомандаИмя = Команда.Имя;
	
	Если КомандаИмя = "УдалитьОкончательно" Тогда
		ВОЭлементыПередУдалением(Модуль, Модуль.Элементы.ТПЭлементы);
	ИначеЕсли КомандаИмя = "СтатусЗаписать" Или КомандаИмя = "СтатусПровести" Или КомандаИмя = "СтатусУдалить" Тогда
		ВОСтатусОбновитьНаФорме(Модуль, КомандаИмя);
	Иначе
		МодульК().КомандаВыполнить(Команда, Модуль);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции

// Функция открывает форму обработки. Обязательно открывать формы обработки только этой функцией!
// Параметры:
//   ИмяФормы - Строка
//   СтррПараметры - Структура - для передачи параметров в открываемую форму
//   Уникальность - Произвольный
//   Оповещение - ОписаниеОповещения
// Возвращаемое значение:
//   Форма 		
&НаКлиенте
Функция ОткрытьФормуОбработки(ИмяФормы, СтррПараметры = Неопределено, Уникальность = Неопределено, Оповещение = Неопределено) Экспорт
	Возврат МодульК().ОткрытьФормуОбработки(ИмяФормы, СтррПараметры, Уникальность, Оповещение);
КонецФункции

// Процедура очищает реквизиты в Модуле, если свойство значения реквизита отличается от сверяемого значения.
&НаКлиенте
Процедура ПроверитьИОчиститьРеквизиты(Модуль, СтрРеквизиты, ИмяСвойства, СверяемоеЗначение)
	
	Если ПустаяСтрока(СтрРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	МРеквизиты = СтрРазделить_(СтрРеквизиты, ",");
	Для Каждого ИмяРеквизита Из МРеквизиты Цикл
		Ссылка = Модуль[ИмяРеквизита];
		Если ЗначениеЗаполнено(Ссылка) И ЗначениеРеквизитаОбъекта(Ссылка, ИмяСвойства) <> СверяемоеЗначение Тогда
			Модуль[ИмяРеквизита] = Неопределено;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОрганизациюПоРеквизиту(Модуль, ОсновнойРеквизит)
	
	НоваяОрганизация = ЗначениеРеквизитаОбъекта(Модуль[ОсновнойРеквизит], "Организация");
	Если НоваяОрганизация <> Модуль.Организация Тогда
		Модуль.Организация = НоваяОрганизация;
		Если Модуль.СтррКонтекст.ИспользоватьДоговоры Тогда
			ПроверитьИОчиститьРеквизиты(Модуль, "Соглашение,Договор", "Организация", НоваяОрганизация);
		КонецЕсли;
	КонецЕсли; 
	
	Модуль.УстановитьМодифицированостьФормы();
	
КонецПроцедуры

// Преобразует строку в число без вызова исключений. Стандартная функция преобразования
//   Число() контролирует отсутствие каких либо символов кроме числовых.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокуВЧисло(ИсходнаяСтрока)

	ИсхСтрока = СокрЛП(ИсходнаяСтрока);
	Длина = СтрДлина(ИсхСтрока);
	СтрЧисло = "";
	Для Поз = 1 По Длина Цикл
		Символ = Сред(ИсхСтрока, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Тогда 
			СтрЧисло = СтрЧисло + Символ;
		ИначеЕсли Код = 46 Или Код = 44 Тогда // Символ "." или ","
			СтрЧисло = СтрЧисло + ".";
		КонецЕсли;
	КонецЦикла;

	Возврат ?(ПустаяСтрока(СтрЧисло), 0, Число(СтрЧисло));

КонецФункции

&НаКлиенте
Функция МодульКарты()
	
	Если ГМодульКарты = Неопределено Тогда
		//@skip-check use-non-recommended-method
		//@skip-check form-self-reference
		ГМодульКарты = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульКарты", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульКартыКлиент");	
	КонецЕсли; 
	Возврат ГМодульКарты;
	
КонецФункции

&НаКлиенте
Функция ВернутьЦвет(ИмяЦвета)
	
	Если ГСтррЦвета = Неопределено Тогда
		//@skip-check new-color
		ГСтррЦвета = Новый Структура("Авто,Ошибка", Новый Цвет, Новый Цвет(255,0,0));
	КонецЕсли; 
	Возврат ГСтррЦвета[ИмяЦвета];
	
КонецФункции

// Процедура показывает на карте два объекта (если это возможно): место создания документа и расположение партнера (торговой точки)
// Параметры:
//   Модуль - Форма
//   ВидОбъекта - Строка - варианты значений: "Документ", "Партнер"
&НаКлиенте
Функция ПолучитьМаркер(Модуль, ВидОбъекта)
	
	//@skip-check structure-consructor-too-many-keys
	СтррМаркер = Новый Структура("Широта,Долгота,Заголовок,Описание,ВидМаркера");
	СтррМаркер.ВидМаркера = ВидОбъекта;
	
	Если ВидОбъекта = "Документ" Тогда
		Если ЗначениеЗаполнено(Модуль.Широта) И ЗначениеЗаполнено(Модуль.Долгота) Тогда
			СтррМаркер.Широта  = СтрокуВЧисло(Модуль.Широта);
			СтррМаркер.Долгота = СтрокуВЧисло(Модуль.Долгота);
			СтррМаркер.Заголовок = НСтр("ru = 'Место создания документа'");
			СтррМаркер.Описание  = ?(ЗначениеЗаполнено(Модуль.АдресПоГеокодеру), Модуль.АдресПоГеокодеру, НСтр("ru = 'Адрес неизвестен.'"));
		Иначе		
			Возврат Неопределено;
		КонецЕсли; 
	ИначеЕсли ВидОбъекта = "Партнер" Тогда
		Если ЗначениеЗаполнено(Модуль.ШиротаОбъекта) И ЗначениеЗаполнено(Модуль.ДолготаОбъекта) Тогда
			СтррМаркер.Широта  = СтрокуВЧисло(Модуль.ШиротаОбъекта);
			СтррМаркер.Долгота = СтрокуВЧисло(Модуль.ДолготаОбъекта);
			СтррМаркер.Заголовок = Модуль.Партнер;
			СтррМаркер.Описание  = ?(ЗначениеЗаполнено(Модуль.АдресОбъекта), Модуль.АдресОбъекта, НСтр("ru = 'Адрес неизвестен.'"));
		Иначе		
			Возврат Неопределено;
		КонецЕсли; 
	Иначе
		Текст = СтрШаблон_("Функция ПолучитьМаркер(): неизвестное значение параметра ВидОбъекта (%1).", ВидОбъекта);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	Возврат СтррМаркер;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМаркерОбъекта(Ссылка, Описание)
	
	Результат = Неопределено;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Партнеры") Тогда
		
		//@skip-check structure-consructor-too-many-keys
		СтррМаркер = Новый Структура("Широта,Долгота,Заголовок,Описание,ВидМаркера,Адрес");
		СтррМаркер.ВидМаркера = "Партнер";
		СтррМаркер.Заголовок  = Строка(Ссылка);
		Если ЗначениеЗаполнено(Описание) Тогда
			СтррМаркер.Описание  = Описание;
		КонецЕсли; 
		
		Если ПолучитьКоординатыПартнераСервер(Ссылка, СтррМаркер) Тогда
			Результат = СтррМаркер;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'У партнера не заданы координаты.'"));
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Функция сравнивает идентификатор текущей конфигурации (в глобальной переменной гБазоваяКонфигурация) с проверяемым 
// идентификатором конфигурации (в параметре СтрКонфигурация).
// Возвращает Истина, если идентификатор текущей конфигурации соответствует идентификатору проверяемой конфигурации и 
// и операция сравнения версии (переданная вместе с идентификатором) верна.
// Формат идентификатора конфигурации: "P_V1.V2.V3.V4", где P - префикс конфигурации, V1-V4 - вресия конфигурации.
// Версия может быть неполной. Примеры: "УТ_11.1.15.120", "УТ_11.1"
// Параметры:
//   СтрКонфигурация - Строка - операция сравнеия и идентификатор сравниваемой конфигурации.
// Возвращаемое значение:
//   Булево
// Примечание: есть аналогичная функция в модуле обработки.	
&НаКлиенте
Функция ПоколениеКонфигурации(СтрКонфигурация) Экспорт 
	Возврат МодульК().ПоколениеКонфигурации(СтрКонфигурация);
КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти 
