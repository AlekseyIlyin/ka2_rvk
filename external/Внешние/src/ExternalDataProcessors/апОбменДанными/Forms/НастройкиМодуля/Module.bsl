/////////////////////////////////////////////////////////////////////////////
// Описание модуля работы с формой.
// 
// 
// *** Общая информация.
// Форма предназначена для настроек обмена данными с мобильным приложением (Агент Плюс: Мобильная торговля Базовая 2.0).
// 
// *** Возможность открытия формы с активной закладкой раздела через обработчик событий "ОбработкаОповещения".
// В переменной "ИмяСобытия" - указывается значение "АПНастройкиМодуля_ПоказатьНаФорме" тип Строка.
// В структуре "Параметры":
//		1) свойство "Закладка"  - необходимо указать имя группы элемента формы соответствующей закладки раздела.
//		2) свойство "Сообщение" - указывается значение для оповещения пользователя.
// Также имеется возможность выбрать на форме нужную закладу через сообщение "АПНастройкиМодуля_ПоказатьНаФорме"
// 
/////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульК;  // общий клиентский модуль
&НаКлиенте
Перем МодульЛК; // модуль работы с "Личным кабинетом"

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//@skip-check structure-consructor-too-many-keys
	СтррКонтекст = Новый Структура("СтатусыСправочников,КаталогИзменен,ИспользоватьЗаказы,СбросНастроек,ПроводитьДокументыСписок");
	
	СтррКонтекст.Вставить("Конфигурация"); // KT2000_Alcohol_Trade признаки для получения свойств конфигурации
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.СбросНастроек 	= Ложь;	
	СтррКонтекст.КаталогИзменен = Ложь; // признак, что при записи настроек нужно будет создать подкаталоги
	СтррКонтекст.ИспользоватьЗаказы = Константы.ИспользоватьЗаказыКлиентов.Получить(); // для проверки варианта загрузки заказов
	
	ТекОбъект.ЗаполнитьСпособыОбмена(Элементы.СпособОбмена.СписокВыбора);
	СправочникиПрочитатьИзНастроекГотовностьКОбмену();
	
	ТекОбъект.ЗаполнитьРежимыВыгрузкиКодовНоменклатуры(Элементы.РежимВыгрузкиКодовНоменклатуры.СписокВыбора);
	ТекОбъект.ЗаполнитьВариантыРегистровОстатковНоменклатуры(Элементы.РегистрОстатковТоваров.СписокВыбора);
	ТекОбъект.ЗаполнитьСпособыВыгрузкиДоговоров(Элементы.ИспользоватьДоговорыИлиСоглашения.СписокВыбора);
	ТекОбъект.ЗаполнитьРежимыВыгрузкиВУД(Элементы.РежимВыгрузкиВУД.СписокВыбора);
	ТекОбъект.ЗаполнитьРежимыРасчетаСкидок(Элементы.РежимРасчетаСкидок.СписокВыбора);
	
	ВосстановитьНастройкиСервер();
	
	ИзменитьДоступностьНастроекИспользоватьКонтрагентов();
	ИзменитьДоступностьНастроекИспользоватьДоговорыИлиСоглашения();
	ИзменитьДоступностьНастроекИспользоватьХарактеристики();
	ИзменитьДоступностьНастроекВестиУчетМаркированныхТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;	

	Элементы.СгенерироватьНастройкиАгентПлюсСОД.РасширеннаяПодсказка.ЦветТекста = СтррКонтекст.Цвета.ТекстПояснение;
	
	ОбновитьСтатусГотовности(Ложь);

	ИзменитьДоступностьВыгрузкиПерсональныхЦен();	
	ИзменитьДоступностьНастроекИсторииПродаж();
	ИзменитьДоступностьНастроекВыгрузкиЗаказов();
	ИзменитьДоступностьНастроекМаршрута();
	ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов();
	ИзменитьДоступностьРегистрацииРегламентногоЗадания();
	ИзменитьДоступностьНастроекПоказыватьРентабельность();
	ИзменитьДоступностьВыгрузкиШтрихКодовТоваров();
	ИзменитьДоступностьНастроекЗагружатьВиртуальныеДокументы();
	
	НастройкиВыгрузкиКлиентовПриОткрытииФормы();
	
	ЗаполнитьСпискиВыбора();                                                  
	ОбновитьВидНастроекОбмена();
	ОбновитьВыгрузкаИзображений();
	ОбновитьПредупреждениеДляЭлементов();
	ОбновитьВидимостьСтатусовЗагрузкиЗаказов(); 	
	УстановитьМодифицированостьФормы(Ложь);
	
	Если ПустаяСтрока(Объект.КаталогДанных) Тогда // первым делом просим указать каталог данных
		Элементы.РазделыНастроек.ТекущаяСтраница = Элементы.ГруппаКаталоги;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИнформацияОСбросеНастроек) Тогда
		Элементы.ИнформацияОСбросеНастроек.ЦветТекста = СтррКонтекст.Цвета.ТекстВнимание;	
		Элементы.ИнформацияОСбросеНастроек.Видимость = Истина;
		Элементы.ИнформацияОСбросеНастроек.Подсказка = ИнформацияОСбросеНастроек;
	Иначе
		Элементы.ИнформацияОСбросеНастроек.Видимость = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КаталогОбмена) И Не ПустаяСтрока(Объект.КаталогДанных) Тогда
		ПодключитьОбработчикОжидания("СоздатьКаталогОбменаИнтерактивно", 1, Истина);
	КонецЕсли;
		
	Элементы.ГруппаКаталогДанныхРекомендация.ЦветФона = СтррКонтекст.Цвета.ФонВнимание;
	
	ОбновитьРекомендациюДляКаталогаДанных();
		
	НастроитьПроводитьДокументыСписок = "Настроить";
	
	//dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	Элементы.ГруппаКаспиДанныеОрганизаций.Видимость = Объект.ИспользоватьОплатуКаспи;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиАгентовИзмененияЗаписаны" Тогда
		
		ОбновитьСтатусГотовности(Истина);
		
	ИначеЕсли ИмяСобытия = "АПМобильныеУстройстваИзменениеСпискаМУ" Тогда
		
		ОбновитьСтатусГотовности(Истина);
		
	ИначеЕсли ИмяСобытия = "АПЛКОповещение" Тогда // оповещение от модуля ЛК
		
		Если Параметр.ВидДанных = "ВсеНастройки" Или Параметр.ВидДанных = "КаналыОбмена" Тогда
			Если Параметр.ЕстьОшибки Тогда
				ВывестиСообщения(Параметр, Ложь);
			ИначеЕсли Параметр.ВидДанных = "ВсеНастройки" Тогда
				ЛКЗагрузитьНастройкиПродолжить(Параметр);
			Иначе // Параметр.ВидДанных = "КаналыОбмена"
				ЛКЗагрузитьНастройкиОбменаПродолжить(Параметр.Результат, Источник = "БыстраяНастройка");
			КонецЕсли;
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПЗакрытьФормуОбработки" Тогда
		
		//@skip-check use-non-recommended-method
		Если Параметр = "*" Или Найти(","+Параметр+",", ",НастройкиМодуля,") <> 0 Тогда
			//@skip-check form-self-reference
			Если ЭтаФорма.Открыта() Тогда
				ЭтаФорма.Модифицированность = Ложь;
				ЭтаФорма.Закрыть();
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "АПНастройкиМодуля_ПоказатьНаФорме" Тогда
		
		//@skip-check form-self-reference
		Если Не ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Открыть();
		КонецЕсли; 
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Если Параметр.Свойство("Закладка") Тогда
				Элементы.РазделыНастроек.ТекущаяСтраница = Элементы[Параметр.Закладка];
			КонецЕсли; 
			
			Если Параметр.Свойство("Сообщение") Тогда
				Если Параметр.Сообщение = "ВыбратьВыгружатьМаршруты" Тогда
					Текст = НСтр("ru = 'Выберите флажок ""Интервал выгрузки маршрутов"" и укажите размер интервала.'");
					//@skip-check object-deprecated
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ВыгружатьМаршруты");
				ИначеЕсли Параметр.Сообщение = "МаксимальноеРасстояниеОтТТ" Тогда
					Текст = НСтр("ru = 'Подсказка: в параметре указывается максимально допустимое расстояние (в метрах) от торговой точки при создании документов в мобильном устройстве.'");
					//@skip-check object-deprecated
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.МаксимальноеРасстояниеОтТТ");	
				ИначеЕсли Параметр.Сообщение = "УказатьКаталог" Тогда
					Текст = НСтр("ru = 'Укажите каталог данных.'");
					//@skip-check object-deprecated
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
				ИначеЕсли Параметр.Сообщение = "УказатьВыгружатьХарактеристикиНоменклатуры" Тогда 
					Текст = НСтр("ru = 'Настройка ""Выгружать характеристики номенклатуры"" автоматически выключена, т.к. в конфигурации учетной системы не используются характеристики номенклатуры.'");
					//@skip-check object-deprecated
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				ИначеЕсли Параметр.Сообщение = "УказатьИспользоватьКонтрагентов" Тогда
					Текст = НСтр("ru = 'Настройка ""Использовать контрагентов"" автоматически выключена, т.к. в конфигурации учетной системы отключена функциональная опция ""Независимо вести партнеров и контрагентов"".'");
					//@skip-check object-deprecated
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				ИначеЕсли Параметр.Сообщение = "УказатьИспользоватьДоговорыИлиСоглашения" Тогда
					Текст = НСтр("ru = 'Настройка ""Использовать договоры или соглашения"" автоматически выключена, т.к. в конфигурации учетной системы не используются соглашения (договоры).'");
					//@skip-check object-deprecated
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
				Иначе
					ВызватьИсключение("Неизвестное значение свойства Параметр.Сообщение = " + Параметр.Сообщение);
				КонецЕсли; 
			КонецЕсли; 

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	//@skip-check form-self-reference
	Если Не СтррКонтекст.СбросНастроек И ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьСтатусНажатие(Элемент)
	
	Если Элемент.Имя = "НадписьГотовностьАгентов" Тогда
		МодульК().КомандаВыполнить("ПоказатьНастройкиАгентов");
		Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("ВыделитьПервогоАгентаСОшибкой", Истина));		
	ИначеЕсли Элемент.Имя = "НадписьГотовностьМУ" Тогда
		МодульК().КомандаВыполнить("ПоказатьМобильныеУстройства");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИсториюПродажПриИзменении(Элемент)
	
	ИзменитьДоступностьНастроекИсторииПродаж();
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьПредупреждениеДляЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьЦветомПросроченныеДолгиПриИзменении(Элемент)
	
	ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов();
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветПросроченныхДолговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Цвет,ЦветПоУмолчанию", Объект.ЦветПросроченныхДолгов, "255,0,0"));
	Оповещение = Новый ОписаниеОповещения("ЦветПросроченныхВыборЗавершение", ЭтотОбъект);
	//@skip-check form-self-reference
	МодульК().ОткрытьФормуОбработки("ВыборЦвета", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЦветПросроченныхДолговОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	
	ОбновитьВидНастроекОбмена();
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьКаталог("КаталогДанных", СокрЛП(Элемент.ТекстРедактирования));
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормыПриИзменении(Элемент)
	
	Имя = Элемент.Имя;
	
	ПоляУдаленияПробелов = "FTPАдрес,FTPПользователь,FTPКаталогСервера,СОДАдрес";
	//@skip-check use-non-recommended-method
	Если 0 <> Найти(","+ПоляУдаленияПробелов+",", ","+Имя+",") Тогда
		Объект[Имя] = СокрЛП(Объект[Имя]);
	КонецЕсли;
	 
	Если Имя = "ИспользоватьДоговорыИлиСоглашения" Тогда
		ИзменитьДоступностьВыгрузкиПерсональныхЦен();
	КонецЕсли;
	 
	Если Имя = "ИспользоватьПунктыРазгрузки" ИЛИ 
		 Имя = "ИспользоватьКонтрагентов" ИЛИ 
		 Имя = "ИспользоватьАдресаДоставки" ИЛИ 
		 Имя = "РежимВыгрузкиРекомендуемый"
	Тогда
		НастройкиВыгрузкиКлиентовПриИзменении(Имя);
	КонецЕсли;
	
	Если Имя = "РежимЗагрузкиЗаказов" Тогда 
		ОбновитьВидимостьСтатусовЗагрузкиЗаказов();	
	КонецЕсли;
		
	Если Имя = "МаксКоличествоВиртуальныхДокументов" Тогда
		Если Объект.МаксКоличествоВиртуальныхДокументов < 10 Тогда
			Объект.МаксКоличествоВиртуальныхДокументов = 10; 
			// ^ Нулевое или слишком маленькое значение может вызвать у пользователя впечатление об ошибке - когда после загрузки
			// новых документов из МУ старые сегодняшние документы исчезают в журнале виртуальных документов.
		КонецЕсли; 
	КонецЕсли; 
	
	Если Имя = "ВестиУчетМаркированныхТоваров" Тогда
		ИзменитьЗначениеИДоступностьВыгрузкиШтрихКодовТоваров();
	КонецЕсли;
	
	Если Имя = "ИспользоватьОплатуКаспи" Тогда //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
		Элементы.ГруппаКаспиДанныеОрганизаций.Видимость = Объект.ИспользоватьОплатуКаспи;
	КонецЕсли;
	
	УстановитьМодифицированостьФормы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура РежимВыгрузкиКодовНоменклатурыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормыПриИзмененииСПредупреждением(Элемент)
	
	Если Элемент.Имя = "ВыгружатьИзображенияТоваров" Тогда
		ОбновитьВыгрузкаИзображений();	
	КонецЕсли;
	
	УстановитьМодифицированостьФормы(Истина);
	ОбновитьПредупреждениеДляЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьМаршрутыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ИзменитьДоступностьНастроекМаршрута();
	ОбновитьПредупреждениеДляЭлемента(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)

	//@skip-check use-non-recommended-method
	Если Найти(НРег(НавигационнаяСсылка), ".htm") = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Если НавигационнаяСсылка = "СпискиТорговыхТочек" Или НавигационнаяСсылка = "НастройкиАгентов" Тогда
			МодульК().ОткрытьФормуОбработки(НавигационнаяСсылка);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЗаказыПриИзменении(Элемент)
	УстановитьМодифицированостьФормы(Истина);
	ИзменитьДоступностьНастроекВыгрузкиЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьПеремещенияПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
 
КонецПроцедуры

&НаКлиенте
Процедура FTPПарольОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.FTPПароль.РежимПароля = Не Элементы.FTPПароль.РежимПароля;
	
КонецПроцедуры

&НаКлиенте
Процедура СОДПортПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПустаяСтрока(Объект.КаталогОбмена) Тогда
		ЗапуститьПриложение("explorer.exe """ + Объект.КаталогОбмена + """");
	Иначе
		Текст = НСтр("ru='Не указан ""Каталог обмена"". Каталог обмена назначается автоматически после указания ""Каталога данных"" на закладке ""Каталоги"".'");
		ПоказатьПредупреждение(Неопределено, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветнаяВыгрузкаПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьРегламентноеЗаданиеПриИзменении(Элемент)
	ИзменитьДоступностьРегистрацииРегламентногоЗадания();
	УстановитьМодифицированостьФормы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);	
	ОбновитьПутиПодкаталоговДанных();
	
	Элементы.КаталогДанныхПоУмолчанию.Видимость = ПустаяСтрока(Объект.КаталогДанных);
	
	ОбновитьРекомендациюДляКаталогаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer.exe """ + Объект.КаталогДанных + """");

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтообменПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИнтервалАвтообменаПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ПроверкаМинимальногоЗначенияИнтервалаАвтообмена(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаКаталогДаннныхРекомендацияПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "Windows" Или НавигационнаяСсылка = "Linux" Тогда
		//@skip-check form-self-reference
		МодульК().КомандаСправка(ЭтаФорма.ИмяФормы + "_КаталогДанныхДляСервера_" + НавигационнаяСсылка);
	Иначе
		ВызватьИсключение("Неизвестная навигационная ссылка: " + НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПроводитьДокументыСписокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияВыбораПроводитьДокументыСписок", ЭтотОбъект);
	
	Объект.ПроводитьДокументыСписок.ПоказатьОтметкуЭлементов(Оповещение, НСтр("ru = 'Выберите документы'"));

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьРентабельностьПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ИзменитьДоступностьНастроекПоказыватьРентабельность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьВиртуальныеДокументыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы(Истина);
	ИзменитьДоступностьНастроекЗагружатьВиртуальныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусРеализацияТоваровУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Элемент.СписокВыбора.Очистить();
	
	СЗПеречисленияРеализаций = ПолучитьСтатусыРеализаций();
	
	Для Каждого ссзЭлемент Из СЗПеречисленияРеализаций Цикл
		
		Элемент.СписокВыбора.Добавить(ссзЭлемент.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//(( sk_220331 MOD-2551 
	//Элемент.СписокВыбора.Очистить();
	//
	//ПроверитьИСохранитьСпособыДоставки();
	//
	//ЗначениеНастройки = СпособДоставкиНачалоВыбораНаСервере();
	//
	//Для Каждого СтрокаЗначения Из ЗначениеНастройки Цикл
	//	Элемент.СписокВыбора.Добавить(СтрокаЗначения.Ключ);		
	//КонецЦикла;
	ДанныеВыбора = Новый СписокЗначений;
	ПроверитьИСохранитьСпособыДоставки();
	ЗначениеНастройки = СпособДоставкиНачалоВыбораНаСервере();
	Для Каждого СтрокаЗначения Из ЗначениеНастройки Цикл
		ДанныеВыбора.Добавить(СтрокаЗначения.Ключ);		
	КонецЦикла;
	//)) sk_220331 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКаспиДанныеОрганизаций

&НаКлиенте
Процедура КаспиДаныеОрганизацийПриИзменении(Элемент) //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	УстановитьМодифицированостьФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КаспиДанныеОрганизацийОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	ДобавитьИзменитьОрганизацию(Элемент.Родитель.ТекущиеДанные);
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыКаспиДанныеОрганизаций
#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормы_СОД

&НаКлиенте
Процедура КомандаСгенерироватьНастройкиАгентПлюсСОД(Команда)
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность Тогда
		Текст = НСтр("ru='Перед генерацией настроек АП:СОД требуется сохранить настройки, измененные на этой форме. Сохранить настройки?'");
		Оповещение = Новый ОписаниеОповещения("КомандаСгенерироватьНастройкиАгентПлюсСОДПродолжить", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		СОДСоздатьФайлНастроек();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПанельУправленияАПСОД(Команда)
	
	Каталог = Объект.СОДПутьКПанелиУправления;
	Если Не ПустаяСтрока(Каталог) Тогда
		Файл = Новый Файл(Каталог + ?(Прав(Каталог,1)<>"\", "\", "") + "APlusSrvPanel.exe");
		Если Файл.Существует() Тогда
			СОДОткрытьПанель();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ВыбратьЛокально", НСтр("ru='Выбрать файл локально'"));
	Кнопки.Добавить("Скачать", НСтр("ru='Скачать с www.agentplus.ru'"));
	Кнопки.Добавить("Отмена",  НСтр("ru='Отмена'"));
	
	//@skip-check form-self-reference
	Оповещение = Новый ОписаниеОповещения("КомандаОткрытьПанельУправленияАПСОДПродолжить", ЭтаФорма, Неопределено);
	Текст = НСтр("ru='Не указано расположение файла панели управления ""APlusSrvPanel.exe"". Выберите нужное действие.'");
	ПоказатьВопрос(Оповещение, Текст, Кнопки);

КонецПроцедуры

// ОбработчикиКомандФормы_СОД
#КонецОбласти 

#Область ОбработчикиКомандФормы_Организация

&НаКлиенте
Процедура ДобавитьИзменитьОрганизацию(Команда) //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	СписокВ = ПолучитьСписокВыбораВ();
	
	Если СписокВ = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет организаций для выбора!'"),, НСтр("ru = 'ВНИМАНИЕ!'"));
	Иначе
		СписокНе = ПолучитьСписокВыбораНе();
		
		Если (Не СписокНе = Неопределено) И (СписокВ.Количество() = СписокНе.Количество()) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Все организации уже выбраны!'"),, НСтр("ru = 'ВНИМАНИЕ!'"));
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Команда) = Тип("КомандаФормы") Тогда
			//@skip-check form-self-reference
			Оповещение = Новый ОписаниеОповещения("ЗакончитьДобавлениеИзменениеОрганизации", ЭтаФорма);
		Иначе
			//@skip-check form-self-reference
			Оповещение = Новый ОписаниеОповещения("ЗакончитьДобавлениеИзменениеОрганизации", ЭтаФорма, Команда.Организация);
		КонецЕсли;
		
		//@skip-check form-self-reference
		ФормаВыбора = ОткрытьФорму("Справочник.Организации.Форма.ФормаВыбора",,ЭтаФорма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Если СписокНе = Неопределено Тогда	
			ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = СписокВ;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		Иначе
			ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = СписокВ;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			ЭлементОтбора.ПравоеЗначение = СписокНе;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОрганизации(Команда) //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	Если Объект.КаспиДанныеОрганизаций.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьОрганизацииПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'При заполнении таблица будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе	
		 ЗаполнитьОрганизацииПродолжить(КодВозвратаДиалога.Да, Неопределено);
	 КонецЕсли;
	
КонецПроцедуры

// ОбработчикиКомандФормы_Организация
#КонецОбласти 

&НаКлиенте
Процедура КомандаПроверкаПодключения(Команда)
	
	ПроверитьПодключениекFTP();
	
КонецПроцедуры

//{{gi_240205
&НаКлиенте
Процедура КомандаКаталогПроверитьДоступ(Команда)
	
	Если ПустаяСтрока(Объект.КаталогДанных) Тогда
		ОчиститьСообщения();		
		Текст = НСтр("ru = 'Укажите каталог данных и сохраните изменения.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	// gi_240729 - отключена проверка доступа клиентской машины
	//РезультатКлиент = ПроверитьДоступКлиент(СокрЛП(Объект.КаталогДанных));
	РезультатСервер = ПроверитьДоступСервер(Объект.КаталогДанных);
	
	//@skip-check undefined-function
	Компьютер = ИмяКомпьютера();
	Сервер = ПолучитьИмяСервера();

	//{{gi_240729 - отключена проверка доступа клиентской машины
	//Если РезультатКлиент = 1 Тогда
	//	//@skip-check use-non-recommended-method
	//	Сообщить(СтрШаблон_("Есть доступ клиенского компьютера к каталогу '%1' (компьютер: %2).", Объект.КаталогДанных, Компьютер), СтатусСообщения.Информация)
	//Иначе
	//	//@skip-check use-non-recommended-method
	//	Сообщить(СтрШаблон_("Нет доступа клиенского компьютера к каталогу '%1' (компьютер: %2)!", Объект.КаталогДанных, Компьютер), СтатусСообщения.Внимание)
	//КонецЕсли;
	//}}gi_240729 
	
	Если РезультатСервер = 1 Тогда
		//@skip-check use-non-recommended-method
		Сообщить(СтрШаблон_("Есть доступ сервера к каталогу '%1' (сервер: %2).", Объект.КаталогДанных, Сервер), СтатусСообщения.БезСтатуса)
	Иначе
		//@skip-check use-non-recommended-method
		Сообщить(СтрШаблон_("Нет доступа сервера к каталогу '%1' (сервер: %2)!", Объект.КаталогДанных, Сервер), СтатусСообщения.Внимание)
	КонецЕсли;
	
КонецПроцедуры
//}}gi_240205

&НаКлиенте
Процедура КомандаКаталогДанныхПоУмолчанию(Команда)
	
	Если МодульК().ЭтоLinuxКлиент() Тогда
		КомандаКаталогДанныхПоУмолчаниюПродолжить(КодВозвратаДиалога.Да, Неопределено);
	Иначе
		Сеть = Новый COMObject("wscript.network"); 
		ПользовательОС = Сеть.Username;	
		//@skip-check form-self-reference
		Оповещение = Новый ОписаниеОповещения("КомандаКаталогДанныхПоУмолчаниюПродолжить", ЭтаФорма, Неопределено);
		Текст = НСтр("ru='Внимание будет указан каталог, доступный только для текущего пользователя Windows (пользователь: %1). При работе ""1С:Предприятия"" в офисной сети каталог не будет доступен для других пользователей, это ограничит использование модуля обмена другими пользователями! Продолжить?'");
		Текст = СтрШаблон_(Текст, ПользовательОС);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКаталогЛогов(Команда)
	
	Если ПроверитьГотовностьПодкаталогов() Тогда
		Каталог = МодульК().ИмяПодкаталогаДанных("Логи", Объект.КаталогДанных);
		ЗапуститьПриложение("explorer.exe """ + Каталог + """");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКаталогТреков(Команда)

	Если ПроверитьГотовностьПодкаталогов() Тогда
		Каталог = МодульК().ИмяПодкаталогаДанных("Треки", Объект.КаталогДанных);
		ЗапуститьПриложение("explorer.exe """ + Каталог + """");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьВсе(Команда)
	
	СохранитьНастройкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьНачальныеНастройки(Команда)
	
	//@skip-check form-self-reference
	Оповещение = Новый ОписаниеОповещения("КомандаСброситьНастройкиПродолжить", ЭтаФорма, "СброситьНачальныеНастройки");
	Текст = НСтр("ru='Очистить настройки для инициализации? После обработку нужно перезапустить для новой инициализации настроек.'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьВсеНастройки(Команда)
	
	//@skip-check form-self-reference
	Оповещение = Новый ОписаниеОповещения("КомандаСброситьНастройкиПродолжить", ЭтаФорма, "СброситьВсеНастройки");
	Текст = НСтр("ru='Внимание! Все настройки модуля будут очищены (в т.ч. очищены все служебные справочники: ""Настройки агентов"", ""Мобилные устройства"" и т.д).'")
		+ Символы.ПС + НСтр("ru='Очистить все настройки? После обработку нужно будет перезапустить.'");
	ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);

КонецПроцедуры

#Область ОбработчикиКомандФормы_ВзамодействиеСЛК

&НаКлиенте
Процедура КомандаВыгрузитьНастройкиВФайл(Команда)
	
	СтррРезультат = ЛКВыгрузитьНастройкиВФайлСервер(); // настройки в виде xml-файла сохраняются в хранилище
	ВывестиСообщения(стррРезультат, Истина);
	Если СтррРезультат.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(СтррРезультат.АдресВХ);
	
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В хранилище отсутствует XML-файл настроек.'"));
		
	Иначе // выбираем папку для сохранения файла
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.ПолноеИмяФайла = "apconfig.xml";
		Диалог.Расширение = "xml";
		Диалог.Фильтр = СтрШаблон_(НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Диалог.Расширение);
		
		Если Диалог.Выбрать() Тогда
			//@skip-check unknown-method-property
			Данные.Записать(Диалог.ПолноеИмяФайла);
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Настройки сохранены в файл:'") + " " + Диалог.ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКПолучитьНастройкиОбмена(Команда)
	
	ЛКЗагрузитьДанные("КаналыОбмена");

КонецПроцедуры

&НаКлиенте
Процедура КомандаЛКПолучитьВсеНастройки(Команда)
	
	ЛКЗагрузитьДанные("ВсеНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьЛичныйКабинет(Команда)
	
	Модуль = ЛКЗагрузитьМодуль();
	Модуль.Открыть();

КонецПроцедуры

// ОбработчикиКомандФормы_ВзамодействиеСЛК
#КонецОбласти 

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)

	РазделСправки = "";
	Если Элементы.РазделыНастроек.ТекущаяСтраница <> Неопределено Тогда
		РазделСправки = Элементы.РазделыНастроек.ТекущаяСтраница.Имя;
	КонецЕсли; 
	
	Если РазделСправки = "" Или РазделСправки = "ГруппаОбменДанными" Тогда
		//@skip-check form-self-reference
		РазделСправки = ЭтаФорма.ИмяФормы;
	Иначе
		//@skip-check form-self-reference
		РазделСправки = ЭтаФорма.ИмяФормы + "_" + РазделСправки;
	КонецЕсли;
	
	МодульК().КомандаСправка(РазделСправки);
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

&НаСервере
Процедура ВосстановитьНастройкиСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект));
	
	ТекОбъект.ПроводитьДокументыСписок = ТекОбъект.ПрочитатьЗначениеНастройки("ПроводитьДокументыСписок");
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	ИнформацияОСбросеНастроек = ТекОбъект.ПрочитатьЗначениеНастройки("НастройкиСброшены");
	
	Если ПустаяСтрока(Объект.РегистрОстатковТоваров) Тогда
		Объект.РегистрОстатковТоваров = "СвободныеОстатки";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиИзВХ(АдресФайлаНастроекЛКВХранилище, ТолькоНастройкиОбмена)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ТолькоНастройкиОбмена Тогда
		ИменаНастроек = "СпособОбмена,FTPАдрес,FTPПароль,FTPПользователь,FTPКаталогСервера,FTPПассивныйРежим,ИспользоватьАвтообмен";
	Иначе
		ИменаНастроек = НастройкиФормы(ТекОбъект);
	КонецЕсли;
	
	Результат = ТекОбъект.ЗагрузитьЗначенияНастроекОбработкиИзВХ(ИменаНастроек, АдресФайлаНастроекЛКВХранилище);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиСервер(ИменаНастроек = Неопределено)

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Если ИменаНастроек = Неопределено Тогда
		ИменаНастроек = НастройкиФормы(ТекОбъект);
	КонецЕсли; 
	
	ТекОбъект.СохранитьЗначенияНастроекОбработки(ИменаНастроек);
	ТекОбъект.СохранитьЗначениеНастройки("ПроводитьДокументыСписок", ТекОбъект.ПроводитьДокументыСписок);
	ТекОбъект.СОДСоздатьФайлНастроек();

КонецПроцедуры

&НаКлиенте
Функция СохранитьНастройкиКлиент()
	
	Если СтррКонтекст.КаталогИзменен Или ПустаяСтрока(Объект.КаталогДанных) Тогда // проверяем и создаем все подкаталоги
		СтррРезультат = МодульК().СоздатьПодкаталогиДанных(Объект.КаталогДанных);
		ОчиститьСообщения();
		Если СтррРезультат.ЕстьОшибки Тогда
			Для Каждого СтррСообщение Из СтррРезультат.Сообщения Цикл
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррСообщение.Описание,, СтррСообщение.Путь);
			КонецЦикла;
			Если Не ПустаяСтрока(Объект.КаталогДанных) Тогда
				Текст = НСтр("ru='Проверьте права доступа к каталогу ""%1"" или укажите другой каталог данных.'");
				Текст = СтрШаблон_(Текст, Объект.КаталогДанных);
				//@skip-check object-deprecated
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
			КонецЕсли;
			Возврат Ложь;			
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользоватьАдресаДоставки И Не ЗначениеЗаполнено(Объект.ВидКИАдресДоставки) Тогда
		ОчиститьСообщения();
		Текст = НСтр("ru='Укажите вид контактной информации для выгрузки адресов доставки!'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ВидКИАдресДоставки");
		Возврат Ложь;
	КонецЕсли; 
	
	//{{dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	Если Объект.ИспользоватьОплатуКаспи Тогда
		Результат = ПроверитьЗаполнениеКаспиДанныеОрганизаций();
		Если Не Результат.Заполнено Тогда
			ПоказатьПредупреждение(, Результат.ТекстСообщения,, НСтр("ru = 'ВНИМАНИЕ!'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	//}}dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	УстановитьМодифицированостьФормы(Ложь);
	
	//(( sk_220111 MOD-2992  
	//СтррФайлСОД = СохранитьНастройкиСервер(); // если нужно обновить файл настроек СОД, файл обновляется
	//
	//Если СтррФайлСОД.Свойство("Текст") И СтррФайлСОД.Свойство("Кодировка") И СтррФайлСОД.Свойство("ПолноеИмяФайла") Тогда
	//	СтррФайлСОД.Текст.Записать(СтррФайлСОД.ПолноеИмяФайла, СтррФайлСОД.Кодировка);
	//КонецЕсли;
	СохранитьНастройкиСервер();
	//)) sk_220111
	
	Оповестить("АПНастройкиПараметровОбменаИзмененияЗаписаны");
	
	// { *** Обновление статусов настроек торговых агентов.
	// Если был изменен флажок "Торговля с колес", то в настройках у всех торговых агентов нужно проверить заполнение реквизита МобильныйСклад.
	// Для этого вызываем в модуле "НастройкиАгентов" процедуру ВнешнийВызовОбновитьСтатусыНастройки().
	// Не делаем проверку изменения флажка "Торговля с колес", т.к. на будущее в обработке будут и другие параметры, которые потребует
	// обновления статусов настроек у торговых агентов.
	//@skip-check use-non-recommended-method
	//@skip-check form-self-reference
	МодульНА = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "НастройкиАгентов", СтррКонтекст, ЭтаФорма);
	МодульНА.ВнешнийВызовОбновитьСтатусыНастройки();
	// } ***
	
	ПроверитьИСохранитьСпособыДоставки();
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция НастройкиФормы(ТекОбъект)

	СтрРеквизиты = "";
	Реквизиты = ТекОбъект.Метаданные().Реквизиты;
	//@skip-check form-self-reference
	ЭлементыФормы = ЭтаФорма.Элементы;
	Для Каждого ЭлементМетаданных Из Реквизиты Цикл
		Если ЭлементыФормы.Найти(ЭлементМетаданных.Имя) <> Неопределено Тогда
			СтрРеквизиты = СтрРеквизиты + ЭлементМетаданных.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Лев(СтрРеквизиты, СтрДлина(СтрРеквизиты)-1);
	
КонецФункции 

&НаСервере
Процедура СохранитьНастройкиКаталогов()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.СохранитьЗначенияНастроекОбработки("КаталогДанных,КаталогОбмена");
	ТекОбъект.СОДСоздатьФайлНастроек(); // sk_220111 MOD-2992  ТекОбъект.СОДПопыткаСгенерироватьФайлНастройки();

КонецПроцедуры

&НаСервере
Процедура СправочникиПрочитатьИзНастроекГотовностьКОбмену()
	
	СтррКонтекст.СтатусыСправочников 
		= РеквизитФормыВЗначение("Объект").ГотовностьСправочников("НастройкиАгентов,МобильныеУстройства");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьНастройкиПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		
		СтррРезультат = СброситьНастройкиСервер(ДополнительныеПараметры);
		Если СтррРезультат.ОшибокНет Тогда
			СтррКонтекст.СбросНастроек = Истина;
			Закрыть();
			Оповестить("АПНастройкиСброшены");
		Иначе
			Текст = НСтр("ru='Не удалось сбросить настройки! Описание ошибки:'") + Символы.ПС + СтррРезультат.Описание;
			ПоказатьПредупреждение(Неопределено, Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СброситьНастройкиСервер(Режим)

	СтррРезультат = Новый Структура("ОшибокНет,Описание", Истина);
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Если Режим = "СброситьНачальныеНастройки" Тогда
		ТекОбъект.СохранитьЗначениеНастройки("ВерсияНастроек", "");
	ИначеЕсли Режим = "СброситьВсеНастройки" Тогда
		ТекОбъект.СброситьВсеНастройкиМодуля(СтррРезультат);
	Иначе
		ВызватьИсключение("Функция СброситьНастройкиСервер(), неизвестный параметр Режим = " + Режим);
	КонецЕсли;
	
	Возврат СтррРезультат;

КонецФункции

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Форма

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим)
	
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Режим;
	Элементы.СохранитьВсе.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщения(СтррРезультат, ОчиститьСообщения = Ложь)
	
	Если ОчиститьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Для Каждого Значение Из СтррРезультат.Сообщения Цикл
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Значение.Описание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусГотовности(ПрочитатьИзНастроек)
	
	Если ПрочитатьИзНастроек Тогда
		СправочникиПрочитатьИзНастроекГотовностьКОбмену();
	КонецЕсли;
	
	ЕстьЗамечания = Ложь;	
	
	СтррСтатус = СтррКонтекст.СтатусыСправочников.НастройкиАгентов;
	Если СтррСтатус.Готово Тогда
		Элементы.НадписьГотовностьАгентов.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьАгентов.Видимость = Истина;
		Элементы.НадписьГотовностьАгентов.Заголовок = СтррСтатус.Описание;
	КонецЕсли;
	
	Элементы.КаталогДанныхПредупреждение.Видимость = (СтррСтатус.Количество > 0);	
	
	СтррСтатус = СтррКонтекст.СтатусыСправочников.МобильныеУстройства;
	Если СтррСтатус.Готово Тогда
		Элементы.НадписьГотовностьМУ.Видимость = Ложь;
	Иначе
		ЕстьЗамечания = Истина;
		Элементы.НадписьГотовностьМУ.Видимость = Истина;
		Элементы.НадписьГотовностьМУ.Заголовок = СтррСтатус.Описание;
	КонецЕсли;
	
	КнГенерацияНастроекСОД = Элементы.СгенерироватьНастройкиАгентПлюсСОД;
	КнГенерацияНастроекСОД.РасширеннаяПодсказка.ЦветТекста = СтррКонтекст.Цвета.ТекстПояснение;
	КнГенерацияНастроекСОД.Доступность = Не ЕстьЗамечания;

	Если ЕстьЗамечания Тогда
		КнГенерацияНастроекСОД.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		КнГенерацияНастроекСОД.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Для обновления настроек требуется устранить замечания в настройках.'");
	Иначе
		КнГенерацияНастроекСОД.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		КнГенерацияНастроекСОД.РасширеннаяПодсказка.Заголовок = НСтр("ru = 'Обновление настроек для Службы Обмена Данными (СОД) с мобильными устройствами.'");
	КонецЕсли;
	
	КнГенерацияНастроекСОД.Доступность = СтррСтатус.Готово;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()

	ЗаполнитьСпособыЗагрузкиЗаказов(Элементы.РежимЗагрузкиЗаказов.СписокВыбора);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьСтатусовЗагрузкиЗаказов()
	
	Если НЕ ИспользоватьСтатусы() Тогда   
		Элементы.СтатусЗаказовКлиентов.Видимость = Ложь;
		Элементы.СтатусРеализацияТоваровУслуг.Видимость = Ложь;
		
	ИначеЕсли Объект.РежимЗагрузкиЗаказов = "ЗагружатьКакЗаказ" Тогда
		Элементы.СтатусЗаказовКлиентов.Видимость = Истина;
		
	Иначе
		Элементы.СтатусЗаказовКлиентов.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидНастроекОбмена()

	Если Объект.СпособОбмена = "КаталогОбмена" Тогда
		Элементы.ГруппаПараметрыОбмена.Видимость 	= Ложь;
		Элементы.КаталогОбмена.Видимость 	= Истина;
	Иначе
		Элементы.ГруппаПараметрыОбмена.Видимость = Истина;
		
		СтраницыПараметровОбмена = Элементы.ГруппаПараметрыОбмена.ПодчиненныеЭлементы;
		Если Объект.СпособОбмена = "FTP" Тогда
			Элементы.СтраницаFTP.Видимость   = Истина;
			Элементы.СтраницаСОД.Видимость   = Ложь;
			Элементы.КаталогОбмена.Видимость = Ложь;
			Элементы.ГруппаПараметрыОбмена.ТекущаяСтраница = СтраницыПараметровОбмена.СтраницаFTP;
		Иначе
			Элементы.СтраницаFTP.Видимость   = Ложь;
			Элементы.СтраницаСОД.Видимость   = Истина;
			Элементы.КаталогОбмена.Видимость = Истина;
			Элементы.ГруппаПараметрыОбмена.ТекущаяСтраница = СтраницыПараметровОбмена.СтраницаСОД;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверкаМинимальногоЗначенияИнтервалаАвтообмена(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВыгрузкаИзображений()
	
	Элементы.ВыгружатьИзображенияТоваровОграничиватьВыгрузку.Видимость = Объект.ВыгружатьИзображенияТоваров;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеДляЭлемента(ИмяЭлемента)
	
	СтрИмяГруппыВыделения = "ГруппаВыделить" + ИмяЭлемента;
	Элементы[СтрИмяГруппыВыделения].ЦветФона = ?(Объект[ИмяЭлемента], СтррКонтекст.Цвета.ФонВнимание, СтррКонтекст.Цвета.Авто);
	СтрИмяДекорации = "ДекорацияВыделить" + ИмяЭлемента;
	Элементы[СтрИмяДекорации].Видимость = Объект[ИмяЭлемента];
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредупреждениеДляЭлементов()
	
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьИзображенияПартнеров");
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьИзображенияТоваров");
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьИсториюПродаж");
	ОбновитьПредупреждениеДляЭлемента("ВыгружатьМаршруты");
	ОбновитьПредупреждениеДляЭлемента("ИспользоватьПланыПродажПоТоварнымКатегориям");
	
КонецПроцедуры	

&НаСервере
Функция ИспользоватьСтатусы()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	СтрИмяКонфигурации = ПолучитьИмяКонфигурации();
	Если НЕ ТекОбъект.ПоколениеКонфигурацииСервер("<УТ_11.1.10", СтррКонтекст) ИЛИ СтрИмяКонфигурации = "УТ_UA" Тогда
		Возврат РеквизитФормыВЗначение("Объект").ИспользоватьСтатусы();
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура НастройкиВыгрузкиКлиентовПриОткрытииФормы()
	
	Если СтррКонтекст.Конфигурация = "УТ_АП" Тогда
		Элементы.ИспользоватьПунктыРазгрузки.Видимость 	= Истина;
		НастройкиИспользоватьПунктыРазгрузкиПриИзмененииДляУТАП(Истина);
		Элементы.РежимВыгрузкиРекомендуемый.Доступность = Ложь;
		Элементы.РежимВыгрузкиРекомендуемый.Подсказка = "Данная опция не поддерживается «1С:Предприятие 8. Управление торговлей алкогольной продукцией»";
	Иначе
		Элементы.ИспользоватьПунктыРазгрузки.Видимость 	= Ложь;
		Если Объект.ИспользоватьАдресаДоставки И Не ЗначениеЗаполнено(Объект.ВидКИАдресДоставки) Тогда
			Объект.ВидКИАдресДоставки = ПолучитьВидКИАдресДоставкиПоУмолчанию();
		КонецЕсли;
		Если Объект.ИспользоватьКонтрагентов И Объект.ИспользоватьАдресаДоставки Тогда
			//@skip-check use-non-recommended-method
			Сообщить("Конфликт настроек. Изменены настройки: ""Использовать адреса доставки"" и ""Использовать контрагентов"" ");
			УстановитьМодифицированостьФормы(Истина);
			Объект.ИспользоватьАдресаДоставки = Истина;
			Объект.ИспользоватьКонтрагентов   = Истина;
		Конецесли;
		Элементы.ИспользоватьКонтрагентов.Доступность    = Не Объект.ИспользоватьАдресаДоставки;
		Элементы.ИспользоватьАдресаДоставки.Доступность  = Не Объект.ИспользоватьКонтрагентов;
		Если Объект.РежимВыгрузкиРекомендуемый Тогда
			Элементы.ИспользоватьАдресаДоставки.Доступность = Ложь;
		КонецЕсли;
		Элементы.РежимВыгрузкиРекомендуемый.Доступность  = Не Объект.ИспользоватьАдресаДоставки;
		Элементы.ВидКИАдресДоставки.Доступность 	     = Объект.ИспользоватьАдресаДоставки;
	КонецЕсли;

КонецПроцедуры
	
&НаСервере
Процедура ИзменитьДоступностьНастроекИспользоватьКонтрагентов()
	
	Элементы.ИспользоватьКонтрагентов.Доступность = Константы.ИспользоватьПартнеровИКонтрагентов.Получить();
		
КонецПроцедуры 

&НаСервере
Процедура ИзменитьДоступностьНастроекИспользоватьДоговорыИлиСоглашения()
	
	Элементы.ИспользоватьДоговорыИлиСоглашения.Доступность = 
		Константы.ИспользованиеСоглашенийСКлиентами.Получить() <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать 
		Или Константы.ИспользоватьДоговорыСКлиентами.Получить();
		
КонецПроцедуры 

&НаСервере
Процедура ИзменитьДоступностьНастроекИспользоватьХарактеристики()
	
	Элементы.ИспользоватьХарактеристики.Доступность = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
		
КонецПроцедуры 

// Настраивает доступность 
//
&НаСервере
Процедура ИзменитьДоступностьНастроекВестиУчетМаркированныхТоваров()
	
	Элементы.ВестиУчетМаркированныхТоваров.Доступность = ВестиУчетМаркированныхТоваров();
	
КонецПроцедуры                                                

&НаКлиенте
Процедура ИзменитьДоступностьНастроекИсторииПродаж()
	
	Элементы.НастройкиИстрииПродаж.Видимость = Объект.ВыгружатьИсториюПродаж;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьВыгрузкиПерсональныхЦен()
	Элементы.ВыгружатьПерсональныеЦены.Доступность = 
		Объект.ИспользоватьДоговорыИлиСоглашения = "СОГЛАШЕНИЯ" И Элементы.ИспользоватьДоговорыИлиСоглашения.Доступность;
КонецПроцедуры

// Изменяет доступность и значение настройки ВыгружатьШтрихКодыТоваров
//
&НаКлиенте
Процедура ИзменитьЗначениеИДоступностьВыгрузкиШтрихКодовТоваров()
	
	ИзменитьДоступностьВыгрузкиШтрихКодовТоваров();
	Если Объект.ВестиУчетМаркированныхТоваров Тогда 
		Объект.ВыгружатьШтрихКодыТоваров = Истина;
	КонецЕсли;
КонецПроцедуры

// Настаивает доступность ВыгружатьШтрихКодыТоваров 
//
&НаКлиенте
Процедура ИзменитьДоступностьВыгрузкиШтрихКодовТоваров()
	 
	Элементы.ВыгружатьШтрихКодыТоваров.Доступность = Не Объект.ВестиУчетМаркированныхТоваров;;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ИзменитьДоступностьНастроекВыгрузкиЗаказов()
	Элементы.ИнтервалВыгрузкиЗаказов.Доступность 		  = Объект.ВыгружатьЗаказы;
	Элементы.ВыгружатьЗаказыПоПартнерамАгента.Доступность = Объект.ВыгружатьЗаказы;
КонецПроцедуры
	
&НаКлиенте
Процедура ИзменитьДоступностьНастроекМаршрута()
	Элементы.ИнтервалВыгрузкиМаршрутов.Доступность = Объект.ВыгружатьМаршруты;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов()

	Элементы.ЦветПросроченныхДолгов.Доступность = Объект.ВыделятьЦветомПросроченныеДолги;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьРегистрацииРегламентногоЗадания()
	Элементы.ПоказатьРегистрацияФоновогоЗадания.Доступность = Объект.ПроверятьРегламентноеЗадание;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьНастроекПоказыватьРентабельность()
	
	Элементы.ВидЦеныДляРасчетаРентабельности.Доступность = Объект.ПоказыватьРентабельность;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьНастроекЗагружатьВиртуальныеДокументы()
	
	Элементы.МаксКоличествоВиртуальныхДокументов.Доступность = Объект.ЗагружатьВиртуальныеДокументы;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпособыЗагрузкиЗаказов(Список)
	
	Список.Очистить();
	
	СтррВидыДокументов = ПолучитьПредставленияВидовДокументов();
	
	Если СтррКонтекст.ИспользоватьЗаказы Тогда
		Текст = СтрШаблон_(НСтр("ru='Загружать как документ ""%1""'"), СтррВидыДокументов.ЗаказКлиента);	
		Список.Добавить("ЗагружатьКакЗаказ", Текст);
	КонецЕсли;
	
	Текст = СтрШаблон_(НСтр("ru='Загружать как документ ""%1""'"), СтррВидыДокументов.РеализацияТоваровУслуг);
	Список.Добавить("ЗагружатьКакРеализацию", Текст);
	
	Если СтррКонтекст.ИспользоватьЗаказы = Ложь Тогда
		Элементы.РежимЗагрузкиЗаказов.Подсказка = НСтр("ru='Способ загрузки документов ""Заказ"" из мобильного устройства в УТ. Для загрузки документа как ""Заказ клиента"" дожна быть включена константа учетной системы ""ИспользоватьЗаказыКлиентов""'");
		Элементы.РежимЗагрузкиЗаказов.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
		
	Если СтррКонтекст.ИспользоватьЗаказы = Ложь И Объект.РежимЗагрузкиЗаказов <> "ЗагружатьКакЗаказ" И ЗначениеЗаполнено(Объект.РежимЗагрузкиЗаказов) Тогда
		Элементы.РежимЗагрузкиЗаказов.Доступность = Ложь;
	Иначе
		Элементы.РежимЗагрузкиЗаказов.Доступность = Истина;	
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПолучитьПредставленияВидовДокументов()
	
	СтррВидыДокументов = Новый Структура("ЗаказКлиента,РеализацияТоваровУслуг");
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ПолучитьПредставленияВидовОбъектов(СтррВидыДокументов);
	Возврат СтррВидыДокументов;
	
КонецФункции

//&НаКлиенте
//Процедура ЗаполнитьРежимыВыгрузкиВУД(Список)
//
//	Список.Добавить("НеУчитывать", 					НСтр("ru='Не учитывать просрочку'"));
//	Список.Добавить("ПоДоговору", 					НСтр("ru='По договору'"));
//	Список.Добавить("ПоКоличествуДнейПросрочки", 	НСтр("ru='По заданному количеству дней просрочки'"));
//
//КонецПроцедуры

&НаКлиенте
Процедура ПроверкаМинимальногоЗначенияИнтервалаАвтообмена(Интерактивно)
	
	МинЗначение = 5;
	Если Объект.ИнтервалАвтообмена < МинЗначение Тогда
		Объект.ИнтервалАвтообмена = МинЗначение;
		УстановитьМодифицированостьФормы(Истина);
		Если Интерактивно Тогда
			ОчиститьСообщения();
			Текст = СтрШаблон_(НСтр("ru='Минимально допустмое значение для выбранного способа обмена данными: %1 сек.'"), МинЗначение);
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.ИнтервалАвтообмена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеКаспиДанныеОрганизаций() //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828

	Результат = Новый Структура("Заполнено,ТекстСообщения");
	
	МНеЗаполнено = Новый Массив(); // данные не заполнены полностью
	МЧастично = Новый Массив();	   // данные заполнены частично (только синоним или ИД)
	
	ЕстьЗаполненные = Ложь;
	//{{dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
	ТЗн = Объект.КаспиДанныеОрганизаций.Выгрузить(); 
	МИмена = ПолучитьМассивИмен(ТЗн); 
	Для Каждого СтрокаТЗ Из ТЗн Цикл
		стррДанные = ПолучитьДанныеЗаполнения(СтрокаТЗ, МИмена);
		Если стррДанные.ЗаполненоПолностью Тогда // заполнено полностью 
			ЕстьЗаполненные = Истина;
		ИначеЕсли стррДанные.ЗаполненоЧастично Тогда // частично не заполнено
			стррЭлем = Новый Структура("Организация,Поле");
			стррЭлем.Вставить("Поле", стррДанные.Поля);
			стррЭлем.Вставить("Организация", СтрокаТЗ.Организация);
			МЧастично.Добавить(стррЭлем);
		Иначе // не заполнено полностью
			МНеЗаполнено.Добавить(СтрокаТЗ.Организация);
		КонецЕсли;
	//}}dm_240122 #mt-2838			
	КонецЦикла;
	
	Если ЕстьЗаполненные Тогда // если хотя бы у одной организации заполнены данные, проверяем, есть ли частично заполненные
		Если МЧастично.Количество() = 0 Тогда // нет частично заполненных строк (полностью не заполненные не учитываем, так как дляних может не быть оплаты Каспи)
			Результат.Вставить("Заполнено", Истина);
		Иначе // есть частично заполненные строки
			Один = (МЧастично.Количество() = 1);
			ТекстСообщения = "Не заполнены данные для оплаты с Kaspi.kz " + "у " + ?(Один, "следущей организации:", "следующих организаций:") + Символы.ПС;
			Счетчик = 1;
			Для Каждого стррЭлем Из МЧастично Цикл
				ТекстСообщения = ТекстСообщения + Строка(Счетчик) + ". " + Строка(стррЭлем.Организация) + " (" + Строка(стррЭлем.Поле) + ")." + Символы.ПС;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ТекстСообщения = ТекстСообщения + "Заполните недостающие данные, либо удалите частично заполненные у перечисленных организаций.";
			Результат.Вставить("Заполнено", Ложь);
			Результат.Вставить("ТекстСообщения", ТекстСообщения);
		КонецЕсли;
	Иначе // нет ни одной организации, у которой были бы полностью заполнены данные
		Если МЧастично.Количество() = 0 Тогда // ничего не заполнено
			ТекстСообщения = "Ни у одной организации не заполнены данные для оплаты с Kaspi.kz" + Символы.ПС +
							"Заполните данные, или выключите настройку ""Использовать оплату с Kaspi.kz""";
		Иначе
			Один = ((МЧастично.Количество() + МНеЗаполнено.Количество()) = 1);
			ТекстСообщения = "Не заполнены данные для оплаты с Kaspi.kz " + "у " + ?(Один, "следущей организации:", "следующих организаций:") + Символы.ПС;
			Счетчик = 1;
			Для Каждого стррЭлем Из МЧастично Цикл
				ТекстСообщения = ТекстСообщения + Строка(Счетчик) + ". " + Строка(стррЭлем.Организация) + " (" + Строка(стррЭлем.Поле) + ")." + Символы.ПС;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			Для Каждого Элемент Из МНеЗаполнено Цикл
				ТекстСообщения = ТекстСообщения + Строка(Счетчик) + ". " + Строка(Элемент) + "(полностью)." + Символы.ПС;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ТекстСообщения = ТекстСообщения + "Заполните недостающие данные, либо удалите частично заполненные у перечисленных организаций, либо выключите настройку ""Использовать оплату с Kaspi.kz""";
		КонецЕсли;
		Результат.Вставить("Заполнено", Ложь);
		Результат.Вставить("ТекстСообщения", ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеЗаполнения(СтрокаТЗ, МИмена) //dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
	
	СтррРезультат = Новый Структура("ЗаполненоПолностью,ЗаполненоЧастично,Поля");
	СтвИмена = Новый Соответствие();
	СтвИмена.Вставить("Синоним", "Синоним");
	СтвИмена.Вставить("ИДОрганизации", "Идентификатор");
	СтвИмена.Вставить("ПараметрНомераДокумента", "Параметр номера");
	СтвИмена.Вставить("ПараметрФИОАгента", "Параметр ФИО");
	
	Поля = "";
	ЗаполненоПолностью = Истина;
	//ЗаполненоЧастично = Ложь;
	
	Счетчик = 0;
	Для Каждого ИмяКолонки Из МИмена Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ[ИмяКолонки]) Тогда
			Поля = Поля + СтвИмена.Получить(ИмяКолонки) + ", ";
			ЗаполненоПолностью = Ложь;
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтррРезультат.Вставить("ЗаполненоПолностью", ЗаполненоПолностью);
	СтррРезультат.Вставить("ЗаполненоЧастично", ((Счетчик <> 0) И (Счетчик <> МИмена.Количество())));
	СтррРезультат.Вставить("Поля", Лев(Поля, СтрДлина(Поля) - 2)); // убираем ", " в конце
	
	Возврат СтррРезультат;

КонецФункции

&НаСервере
Функция ПолучитьМассивИмен(ТЗн) //dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
	
	МИмена = Новый Массив();
	
	Для Каждого КолонкаТЗ Из ТЗн.Колонки Цикл
		Если КолонкаТЗ.Имя = "Организация" Тогда
			Продолжить;
		КонецЕсли;
		МИмена.Добавить(КолонкаТЗ.Имя);
	КонецЦикла;
	
	Возврат МИмена;
	
КонецФункции

// СлужебныеПроцедурыИФункции_Форма
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Каталоги

&НаКлиенте
Процедура ВыбратьКаталог(ИмяРеквизита, Каталог)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = ?(ПустаяСтрока(Каталог), Объект[ИмяРеквизита], Каталог);
	//@skip-check form-self-reference
	ДиалогВыбораФайла.Показать(
		Новый ОписаниеОповещения("УстановитьВыбранныйПуть", ЭтаФорма, Новый Структура("ИмяРеквизита", ИмяРеквизита)));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыбранныйПуть(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныеФайлы[0];
		УстановитьМодифицированостьФормы(Истина);
		Если ДополнительныеПараметры.ИмяРеквизита = "КаталогДанных" Тогда
			ОбновитьПутиПодкаталоговДанных();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//функция возвращает путь каталога файла
&НаКлиентеНаСервереБезКонтекста 
Функция ФСВернутьКаталогФайла(Знач ИмяФайла)
	
	Если ПустаяСтрока(ИмяФайла) Тогда
        Возврат "";
	КонецЕсли;
	
	ИмяФайла = СокрЛП(ИмяФайла);
	Если Прав(ИмяФайла,2) = "\\" Тогда
	    Возврат ИмяФайла;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.ЭтоКаталог() Тогда
        Возврат ИмяФайла;
	КонецЕсли;
	
	//убираем имя файла на конце
	ПромИмяФайла = ИмяФайла; 
	ПромПоз = 0;
	//@skip-check use-non-recommended-method
	Поз = Найти(ПромИмяФайла, "\");
	Пока Поз <> 0 Цикл
		ПромПоз = ПромПоз + Поз;
		ПромИмяФайла= Прав(ПромИмяФайла, СтрДлина(ПромИмяФайла) - Поз);
		//@skip-check use-non-recommended-method
		Поз = Найти(ПромИмяФайла, "\");
	КонецЦикла;
	
	Возврат ?(ПромПоз = 0, "", Лев(ИмяФайла, ПромПоз));
	
КонецФункции  

// Процедура устанавливает подкаталоги каталога данных.
&НаКлиенте
Процедура ОбновитьПутиПодкаталоговДанных(Интерактивно = Истина)
	
	Если Интерактивно Тогда
		СтррКонтекст.КаталогИзменен = Истина;		
	КонецЕсли; 

	Объект.КаталогДанных = СокрЛП(Объект.КаталогДанных);
	Объект.КаталогОбмена = МодульК().ИмяПодкаталогаДанных("КаталогОбмена", Объект.КаталогДанных);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьГотовностьПодкаталогов()
	
	Если ПустаяСтрока(Объект.КаталогДанных) Тогда
		ОчиститьСообщения();		
		Текст = НСтр("ru = 'Сначала укажите каталог данных и сохраните изменения.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,, "Объект.КаталогДанных");
		Возврат Ложь;
	ИначеЕсли СтррКонтекст.КаталогИзменен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Сначала сохраните изменения.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СоздатьКаталогОбменаИнтерактивно() Экспорт
	
	Если ПустаяСтрока(Объект.КаталогОбмена) И Не ПустаяСтрока(Объект.КаталогДанных) Тогда
		Текст = НСтр("ru = 'В настройках не указан каталог обмена. Создать каталог автоматически?'")
			+ Символы.ПС + НСтр("ru = '(будет создан каталог: ""%1"")'");
		Текст = СтрШаблон_(Текст, МодульК().ИмяПодкаталогаДанных("КаталогОбмена", Объект.КаталогДанных));
		Оповещение = Новый ОписаниеОповещения("СоздатьКаталогОбменаИнтерактивноПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогОбменаИнтерактивноПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		УстановитьМодифицированостьФормы(Истина);
		ОбновитьПутиПодкаталоговДанных();
	КонецЕсли;
	
КонецПроцедуры

// Процедура прописывает в настройках каталог данных "по умолчанию".
// Процедура может вызываться из других модулей.
// Параметры:
//   Интерактивно - Булево - если Истина, то каталог устанавливается интерактивно на форме.
&НаКлиенте
Процедура УстановитьКаталогДанныхПоУмолчанию(Интерактивно) Экспорт
	
	Объект.КаталогДанных = КаталогДокументов() + "APMT";
	ОбновитьПутиПодкаталоговДанных(Интерактивно);
	Если Интерактивно Тогда
		УстановитьМодифицированостьФормы(Истина);
		ОбновитьРекомендациюДляКаталогаДанных();
	Иначе // нужно записать изменения в хранилище настроек
		СохранитьНастройкиКаталогов();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ПроверитьКаталогДанных()

	СтррРезультат = Новый Структура("ТипСервера,Кластер,Описание");
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Если ТекОбъект.ПоколениеКонфигурацииСервер(">=УТ_11.4.4", СтррКонтекст) Тогда // gi_240218 - было: ">=УТ_11.4.12", но на примере конфигурации УТ для Казахсана "3.4.5.2" была ошибка 
		СтррПараметры = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	Иначе
		//@skip-check unknown-method-property
		СтррПараметры = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	КонецЕсли;
	СтррПараметры.Свойство("Srvr", СтррРезультат.Кластер);
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ИспользуетсяLinuxСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64);	
	
	Если Лев(СокрЛ(Объект.КаталогДанных), 2) = "\\" Или СтррРезультат.Кластер <> Неопределено Тогда
		
		СтррРезультат.ТипСервера = ?(ИспользуетсяLinuxСервер, "Linux", "Windows");
		
		Текст = "";
		Если СтррРезультат.Кластер <> Неопределено Тогда
			Текст = Текст 
				+ СтрШаблон_(НСтр("ru='Для сервера ""%1"" требуется сетевой полный доступ к каталогу данных.'") + " ", СтррРезультат.Кластер);
		Иначе
			Текст = Текст + НСтр("ru='Требуется сетевой полный доступ к каталогу данных.'") + " ";
		КонецЕсли; 

		Текст = Текст + НСтр("ru='Ваша учетная система настроена на работу с %1-сервером. Пожалуйста, учтите рекомендации по'") + " ";
		Текст = СтрШаблон_(Текст, СтррРезультат.ТипСервера);
		
		МСтроки = Новый Массив;		
		МСтроки.Добавить(Текст);
		МСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='этой ссылке'"),,,, СтррРезультат.ТипСервера));
		МСтроки.Добавить(".");
		СтррРезультат.Описание = Новый ФорматированнаяСтрока(МСтроки);
					 
	КонецЕсли; 
	
	Возврат СтррРезультат;

КонецФункции 

&НаКлиенте
Процедура ОбновитьРекомендациюДляКаталогаДанных()
	
	СтррРезультат = ПроверитьКаталогДанных();
	
	Если СтррРезультат.Кластер = Неопределено И СтррРезультат.ТипСервера = Неопределено Тогда
		Элементы.ГруппаКаталогДанныхРекомендация.Видимость = Ложь;
	Иначе
		Элементы.ГруппаКаталогДанныхРекомендация.Видимость = Истина;
		Если СтррРезультат.Кластер <> Неопределено Тогда
			Текст = СтрШаблон_(НСтр("ru='Текущая база данных ""1С:Предприятия"" подключена через кластер серверов ""%1"". Сервер ""%1"" должен иметь полный доступ к указанному каталогу данных.'"), 
				СтррРезультат.Кластер);
		Иначе		
			Текст = СтрШаблон_(НСтр("ru='Требуется полный сетевой доступ к каталогу данных.'"), 
				СтррРезультат.Кластер);
		КонецЕсли; 
		Элементы.ДекорацияКаталогДанныхРекомендация.Заголовок = Текст;
		Элементы.ГруппаКаталогДанныхРекомендацияРасширеннаяПодсказка.Заголовок = СтррРезультат.Описание;
	КонецЕсли; 
	
КонецПроцедуры

//gi_240205
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьСлэшИзПути(Путь)
	Если СтрНайти(Путь, "/") <> 0 Тогда
		Возврат "/";
	ИначеЕсли СтрНайти(Путь, "\") <> 0 Тогда
		Возврат "\";
	Иначе
		Возврат "\"
	КонецЕсли
КонецФункции

//gi_240205
&НаКлиентеНаСервереБезКонтекста
Функция ДополнитьСлэшВПуть(Путь)
	Слэш = ОпределитьСлэшИзПути(Путь);
	Если Прав(Путь, 1) = Слэш Тогда
		Возврат Путь;
	Иначе
		Возврат Путь + Слэш;
	КонецЕсли;
	
КонецФункции

//gi_240205
// Возвращает:
// -1 - ошибка
//  0 - нет доступа
//  1 - есть доступ
&НаКлиенте
Функция ПроверитьДоступКлиент(Каталог)
	
	ПутьИФайл = ДополнитьСлэшВПуть(Каталог) + "test_client.txt";
	
	// Проверка на клиенте (это не обязательно)
	Результат = -1; // Ошибка
	
	//@skip-check empty-except-statement
	Попытка
		//@skip-check type-not-defined
		ЗаписьТекста = Новый ЗаписьТекста(ПутьИФайл);
		//@skip-check unknown-method-property
		ЗаписьТекста.Записать("test");
		//@skip-check unknown-method-property
		ЗаписьТекста.Закрыть();
		Файл = Новый Файл(ПутьИФайл);
		Если Файл.Существует()Тогда
			Результат = 1;
		Иначе
			Результат = 0;
		КонецЕсли;
		//@skip-check module-unused-local-variable
		ФайлСуществует = Файл.Существует();
		УдалитьФайлы(ПутьИФайл);
	Исключение
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//gi_240205
// Возвращает:
// -1 - ошибка
//  0 - нет доступа
//  1 - есть доступ
&НаСервере
Функция ПроверитьДоступСервер(Каталог)
	
	ПутьИФайл = ДополнитьСлэшВПуть(Каталог) + "test_server.txt";
	
	// Проверка на клиенте (это не обязательно)
	Результат = -1; // Ошибка
	
	//@skip-check empty-except-statement
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(ПутьИФайл);
		ЗаписьТекста.Записать("test");
		ЗаписьТекста.Закрыть();
		Файл = Новый Файл(ПутьИФайл);
		Если Файл.Существует()Тогда
			Результат = 1;
		Иначе
			Результат = 0;
		КонецЕсли;
		//@skip-check module-unused-local-variable
		ФайлСуществует = Файл.Существует();
		УдалитьФайлы(ПутьИФайл);
	Исключение
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


// СлужебныеПроцедурыИФункции_Каталоги
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_СОД

&НаСервере
Процедура СОДСоздатьФайлНастроекСервер()
	
	// sk_220111 MOD-2992 Возврат РеквизитФормыВЗначение("Объект").СОДСгенерироватьФайлНастройки();
	РеквизитФормыВЗначение("Объект").СОДСоздатьФайлНастроек(Истина);
	
КонецПроцедуры

// Создание xml-файла настроек АП СОД.
&НаКлиенте
Процедура СОДСоздатьФайлНастроек()
	
	ОчиститьСообщения();	
	
	//(( sk_220111 MOD-2992 
	//ЕстьОшибки = Ложь;
	//
	//Если ПустаяСтрока(Объект.КаталогОбмена) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан каталог в поле ""Каталог обмена""!'"),, "Объект.КаталогОбмена");
	//	ЕстьОшибки = Истина;
	//Иначе
	//	КаталогНаДиске = Новый Файл(Объект.КаталогОбмена);
	//	Если Не КаталогНаДиске.Существует() Тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не существует каталога, указанного в поле ""Каталог обмена""!'"),, "Объект.КаталогОбмена");
	//		ЕстьОшибки = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если Не ЕстьОшибки Тогда
	//	СтррРезультат = СОДСоздатьФайлНастроекСервер();
	//	Возврат;
	//	Если СтррРезультат.Замечания.Количество() > 0 Тогда
	//		Для Каждого Замечание Из СтррРезультат.Замечания Цикл
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Замечание.Описание,, "Объект." + Замечание.Реквизит);
	//		КонецЦикла;
	//		ЕстьОшибки = Истина;
	//	Иначе
	//		СтррРезультат.Текст.Записать(СтррРезультат.ПолноеИмяФайла, СтррРезультат.Кодировка);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Создан файл настроек службы обмена данными:'") + " """ + СтррРезультат.ПолноеИмяФайла + """");
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если ЕстьОшибки Тогда
	//	Текст = НСтр("ru='Настройки для службы обмена ""Агент Плюс: СОД"" не сгенерированы!'");
	//	ПоказатьПредупреждение(Неопределено, Текст);
	//КонецЕсли;
	СОДСоздатьФайлНастроекСервер();
	//)) sk_220111

КонецПроцедуры

&НаКлиенте
Процедура СОДВыборФайлаПанелиУправленияЛокальноПродолжить(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат; // отказ выбора файла
	ИначеЕсли ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Путь = ВыбранныеФайлы[0];
	Иначе		
		ВызватьИсключение("СОДВыборФайлаПанелиУправленияЛокальноПродолжить() - неизвестное значение: ВыбранныеФайлы = " + ВыбранныеФайлы);
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ВыбратьЛокально" Тогда
	
		Каталог = ФСВернутьКаталогФайла(Путь);
		
		ПутьПанельСОД = Каталог + ?(Прав(Каталог,1)<>"\", "\", "") + "APlusSrvPanel.exe";
		ФайлПанелиСОД = Новый Файл(ПутьПанельСОД);
		
		Если Не ФайлПанелиСОД.Существует() Тогда 
			Текст = СтрШаблон_(НСтр("ru='Не найден файл панели управления службы обмена данными ""%1"". Хотите указать другой путь?'"), ПутьПанельСОД);
			//@skip-check form-self-reference
			Оповещение = Новый ОписаниеОповещения("СОДОткрытьПанельУправленияПовторить", ЭтаФорма, Параметры);
			ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			Объект.СОДПутьКПанелиУправления = Каталог;
			УстановитьМодифицированостьФормы(Истина);
			СОДОткрытьПанель();				
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры = "Скачать" Тогда
		
		ФайлАрхива = Путь + ?(Прав(Путь,1)<>"\", "\", "") + "aps_app.zip";	
		
		ОчиститьСообщения();
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru = 'Соединение с %1 ...'"), "www.agentplus.ru"));
		Соединение = Новый HTTPСоединение("www.agentplus.ru");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Скачивание...'"));
		//@skip-check wrong-type-expression
		HTTPОтвет = Соединение.Получить("/download/aps_app.zip", ФайлАрхива);
		Если HTTPОтвет.КодСостояния <> 200 Тогда
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон_(Нстр("ru = 'Ошибка работы с Интернет (%1)'"), HTTPОтвет.КодСостояния));
			Возврат;
		КонецЕсли;
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Распаковка...'"));
		//@skip-check type-not-defined
		Архив = Новый ЧтениеZipФайла(ФайлАрхива);
		//@skip-check unknown-method-property
		Архив.ИзвлечьВсе(Путь);
		//@skip-check unknown-method-property
		Архив.Закрыть();
		
		УдалитьФайлы(Путь, "*.zip");  
		
		Объект.СОДПутьКПанелиУправления = Путь;
		УстановитьМодифицированостьФормы(Истина);
		
		СОДОткрытьПанель();
		
	Иначе
		ВызватьИсключение("СОДВыборФайлаПанелиУправленияЛокальноПродолжить() - неизвестное значение: ДополнительныеПараметры = " + ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры //КомандаОткрытьПанельУправленияАПСОДПродолжить

&НаКлиенте
Процедура СОДОткрытьПанель()
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Запустить", 	НСтр("ru='Запустить'"));
	Кнопки.Добавить("ОткрытьПапку", НСтр("ru='Открыть папку'"));
	Кнопки.Добавить("Отмена", 		НСтр("ru='Отмена'"));
	
	//@skip-check form-self-reference
	Оповещение = Новый ОписаниеОповещения("СОДОткрытьПанельПродолжить", ЭтаФорма, Неопределено);
	Текст = НСтр("ru='Выберите нужное действие для запуска панели управления службы обмена данными (СОД):'") + Символы.ПС;
	
	Текст = Текст + Символы.Таб + СтрШаблон_("[%1]", Кнопки.Получить(0)) + Символы.Таб + " - " 
		+ НСтр("ru='если 1С:Предприятие запущено с правами Администратора системы;'") + Символы.ПС;
	Текст = Текст + Символы.Таб + СтрШаблон_("[%1]", Кнопки.Получить(1)) + Символы.Таб + " - " 		
		+ НСтр("ru='для запуска СОД через контекстное меню с правами Администратора.'");
	ПоказатьВопрос(Оповещение, Текст, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура СОДОткрытьПанельПродолжить(ИмяКнопки, ДополнительныеПараметры) Экспорт
	
	Каталог = Объект.СОДПутьКПанелиУправления;
	
	Если ИмяКнопки = Неопределено Или ИмяКнопки = "Отмена" Тогда
		Возврат;
	ИначеЕсли ИмяКнопки = "Запустить" Тогда
		ПутьПанельСОД = Каталог + ?(Прав(Каталог,1)<>"\", "\", "") + "APlusSrvPanel.exe";
		ЗапуститьПриложение("explorer.exe """ + ПутьПанельСОД + """");
	ИначеЕсли ИмяКнопки = "ОткрытьПапку" Тогда
		ЗапуститьПриложение("explorer.exe """ + Каталог + """");			
	Иначе
		ВызватьИсключение("СОДОткрытьПанельПродолжить() - неизвестное значение: ИмяКнопки = " + ИмяКнопки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СОДОткрытьПанельУправленияПовторить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
        КомандаОткрытьПанельУправленияАПСОД(Неопределено);
    КонецЕсли;
	
КонецПроцедуры 

// СлужебныеПроцедурыИФункции_СОД
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_FTP

&НаКлиенте
Процедура ПроверитьПодключениекFTP()
	
	Если ПустаяСтрока(Объект.FTPАдрес)
		Или ПустаяСтрока(Объект.FTPПользователь) Тогда
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Указаны не все параметры соединения с FTP-сервером! Работа с FTP невозможна!'"));
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Подключение к FTP-серверу...'"));
	
	Попытка
		//@skip-check type-not-defined
		//@skip-check module-unused-local-variable
		ПодключениеFTP = Новый FTPСоединение(Объект.FTPАдрес, , Объект.FTPПользователь, Объект.FTPПароль,, Объект.FTPПассивныйРежим, 60);		
		ТекстСообщения = "ru='Подключение к FTP-серверу выполнено успешно'";
		//@skip-check object-deprecated
		//@skip-check bsl-nstr-string-literal-format
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(ТекстСообщения));
	Исключение
		ТекстСообщения = "ru=""Ошибка подключения. " + СтрЗаменить(ОписаниеОшибки(), "'", """") + """";
		//@skip-check object-deprecated
		//@skip-check bsl-nstr-string-literal-format
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(ТекстСообщения));
	КонецПопытки;

КонецПроцедуры

// СлужебныеПроцедурыИФункции_FTP
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ЛК

// Процедура вызывается из модуля БыстраяНастройка.
&НаКлиенте 
Процедура ВнешнийВызовЛКЗагрузитьКаналыОбмена() Экспорт
	
	ЛКЗагрузитьДанные("КаналыОбмена", Истина); // результат вернется через оповещение "АПЛКОповещение" с источником "БыстраяНастройка"
	
КонецПроцедуры

&НаКлиенте 
Процедура ЛКЗагрузитьДанные(ВидДанных, БыстраяНастройка = Ложь)

	Модуль = ЛКЗагрузитьМодуль();
	Модуль.ВнешнийВызовЗагрузитьДанныеИзЛК(ВидДанных, БыстраяНастройка); // Процедура возвращает результат через оповещение "АПЛКОповещение".
	
КонецПроцедуры

&НаКлиенте 
Процедура ЛКЗагрузитьНастройкиОбменаПродолжить(КаналОбмена, БыстраяНастройка)
	//ОтладкаСохранитьЗначениеКаналовОбмена(КаналыОбмена);

	Если КаналОбмена.ExchangeWay = "FTP" Тогда
		Объект.СпособОбмена = "FTP";
	ИначеЕсли КаналОбмена.ExchangeWay = "SOD" Тогда
		Объект.СпособОбмена = "АПСОД";
	Иначе
		Текст = НСтр("ru='Из ЛК получен неизвестный способ обмена данными (""%1""). Вероятно, используется устарешвая версия обработки обмена данными. Обратитесь в техническую поддержку компании ""Агент Плюс"".'");
		Текст = СтрШаблон_(Текст, КаналОбмена.ExchangeWay);
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Если БыстраяНастройка Тогда
			СтррПараметры = Новый Структура("ЕстьОшибки,Описание", Истина, Текст);
			Оповестить("АПНастройкиПараметровОбмена_БыстраяНастройка", СтррПараметры); // в параметре возвращаем описание ошибки, чтобы закрепить его в ТЗ статуса быстрых настроек
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	Если Объект.СпособОбмена = "FTP" Тогда
		Объект.FTPАдрес 		= КаналОбмена.Host;
		Объект.FTPПользователь  = КаналОбмена.Login;
		Объект.FTPПароль    	= КаналОбмена.Password;
		Объект.FTPПассивныйРежим= КаналОбмена.IsPassiveConnection;
		Объект.FTPКаталогСервера= КаналОбмена.CompanyFTPFolder;
	ИначеЕсли Объект.СпособОбмена = "АПСОД" Тогда
		Объект.СОДАдрес 		= КаналОбмена.Host;
		Объект.СОДПорт 			= КаналОбмена.Port;
	КонецЕсли; 
	
	Если БыстраяНастройка Тогда
		СохранитьНастройкиСервер("СпособОбмена,FTPАдрес,FTPПользователь,FTPПароль,FTPПассивныйРежим,FTPКаталогСервера,СОДАдрес,СОДПорт");
		Оповестить("АПНастройкиПараметровОбмена_БыстраяНастройка", Неопределено);
		//@skip-check form-self-reference
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Модифицированность = Ложь;
			ЭтаФорма.Закрыть();
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	УстановитьМодифицированостьФормы(Истина);	
	ОбновитьВидНастроекОбмена();
	
	ОчиститьСообщения();
	//@skip-check object-deprecated
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Из ЛК успешно получены настройки обмена данными.'"));
	
КонецПроцедуры	

//&НаСервере
//Процедура ОтладкаСохранитьЗначениеКаналовОбмена(КаналыОбмена)
//	ЗначениеВФайл("D:\Bak\Channels.dat", КаналыОбмена);
//КонецПроцедуры	

&НаКлиенте 
Процедура ЛКЗагрузитьНастройкиПродолжить(СтррПараметры)
	
	ТолькоНастройкиОбмена = СтррПараметры.ДополнительныйПараметр;
	
	// Имя скачанного файла настроек в СтррПараметры.ИмяФайлаНастроек
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтррПараметры.ИмяФайлаНастроек));
	СтррРезультат = ЗагрузитьНастройкиИзВХ(Адрес, ТолькоНастройкиОбмена);
	ВывестиСообщения(стррРезультат, Ложь);	
	
	Если СтррРезультат.ЕстьОшибки Тогда
		Текст = НСтр("ru = 'Обнаружены ошибки при чтении значений настроек. Новые настройки не загружены.'");	
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	ИначеЕсли СтррРезультат.ВсегоИзменений = 0 Тогда
		Текст = НСтр("ru = 'Значения загруженных настроек не отличаются от текущих.'");	
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	
	// Сюда попадаем, когда загружены новые настройки 
	
	УстановитьМодифицированостьФормы(Истина);
	
	Если ТолькоНастройкиОбмена Тогда
		ОбновитьВидНастроекОбмена();
	Иначе
		ОбновитьВидНастроекОбмена();
		ИзменитьДоступностьНастройкиЦветаПросроченныхДолгов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЛКВыгрузитьНастройкиВФайлСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ТекОбъект.СохранитьЗначенияНастроекОбработки(НастройкиФормы(ТекОбъект), Истина);

КонецФункции

&НаКлиенте
Функция ЛКЗагрузитьМодуль()
	
	Если МодульЛК = Неопределено Тогда
		//@skip-check use-non-recommended-method
		//@skip-check form-self-reference
		МодульЛК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "ЛичныйКабинет", СтррКонтекст, ЭтаФорма);
	КонецЕсли; 
	
	Возврат МодульЛК;

КонецФункции

&НаСервере
Функция ПолучитьВидКИАдресДоставкиПоУмолчанию()
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки");
	Если Не ЗначениеЗаполнено(ВидКИ) Тогда
		ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
	КонецЕсли; 
	Возврат ВидКИ;
	
КонецФункции

&НаСервере
Функция ПолучитьСтатусыРеализаций(СтрТекстРедактирования = Неопределено)
	
	СЗРезультат = Новый СписокЗначений();
	МенеджерСтатусыРеализацийТоваровУслуг = Перечисления.СтатусыРеализацийТоваровУслуг;
 
    Для Каждого Элемент Из МенеджерСтатусыРеализацийТоваровУслуг Цикл
		СЗРезультат.Добавить(Элемент);
    КонецЦикла;
	
	Возврат СЗРезультат;	
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИСохранитьСпособыДоставки()
	
	//Выбрать доступные значения способов доставки в локументе заказ
	//@skip-check use-non-recommended-method
	ФормаДокументаЗаказ = ПолучитьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента");
	СЗСпособДоставки = ФормаДокументаЗаказ.Элементы.СпособДоставки.СписокВыбора;
	ОбработатьСпособыДоставки(СЗСпособДоставки);
	
КонецПроцедуры

// Обрабатывает и сохраняет значение настройки "GUIDПеречисленийСпособыДоставки"
//
// Параметры:
//  СЗСпособДоставки - СписокЗначений Из Строка - способы доставки
//
&НаСервере
Процедура ОбработатьСпособыДоставки(СЗСпособДоставки)
	
	Если СЗСпособДоставки.Количество() = 0 Тогда
		МПеречисления = Перечисления.СпособыДоставки;
	Иначе
		МПеречисления = Новый Массив;
		Для Каждого Элемент Из СЗСпособДоставки Цикл
			МПеречисления.Добавить(Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
		
	ТекОбъект = РеквизитФормыВЗначение("Объект");	
	ИмяНастройки = ТекОбъект.КлючНастроекиСпособыДоставки();
	ЗначениеНастройки = ТекОбъект.ПрочитатьЗначениеНастройки(ИмяНастройки); 	
	Если ЗначениеНастройки = Неопределено Тогда
		ЗначениеНастройки = Новый Соответствие;
	КонецЕсли;   	
	
	ФЛСохранитьНастойку  = ?(МПеречисления.Количество() <> ЗначениеНастройки.Количество()  ,Истина, Ложь); //Признак сохранения. Условие по количеству для удаления лишних соответствий.
	СтвЗначениеНастройки = Новый Соответствие;
	Для Каждого Элемент Из МПеречисления Цикл
		гуидПеречисления = ЗначениеНастройки.Получить(Элемент);	
		Если гуидПеречисления = Неопределено Тогда
			гуидПеречисления = Новый УникальныйИдентификатор();
			ФЛСохранитьНастойку = Истина;
		КонецЕсли;
		СтвЗначениеНастройки.Вставить(Элемент, гуидПеречисления);
	КонецЦикла;
	
	//Сохранить в хранилище гуиды перечислений, если их нет в хранилище.
	Если ФЛСохранитьНастойку Тогда
		//Проверка на уже сохраненное значение поумолчанию. Для исключения ошибок при сохранении.
		КлючДопЗначение = ТекОбъект.ПрочитатьЗначениеНастройки("СпособДоставки");
		Если КлючДопЗначение <> Неопределено Тогда
			Если СтвЗначениеНастройки.Получить(КлючДопЗначение) = Неопределено Тогда
				ЗнчДопЗначение = ЗначениеНастройки.Получить(КлючДопЗначение);
				Если ЗнчДопЗначение = Неопределено Тогда
					СтвЗначениеНастройки.Вставить(КлючДопЗначение, Новый УникальныйИдентификатор());
				Иначе
					СтвЗначениеНастройки.Вставить(КлючДопЗначение, ЗнчДопЗначение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Проверка на выбранное значение поумолчанию. Для исключения ошибок при сохранении.
		Если Объект.СпособДоставки <> Неопределено И Объект.СпособДоставки <> КлючДопЗначение Тогда
			Если СтвЗначениеНастройки.Получить(Объект.СпособДоставки) = Неопределено Тогда
				ЗнчДопЗначение = ЗначениеНастройки.Получить(Объект.СпособДоставки);
				Если ЗнчДопЗначение = Неопределено Тогда
					СтвЗначениеНастройки.Вставить(Объект.СпособДоставки, Новый УникальныйИдентификатор());
				Иначе
					СтвЗначениеНастройки.Вставить(Объект.СпособДоставки, ЗнчДопЗначение);
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;
		
		//Сохранение
		ТекОбъект.СохранитьЗначениеНастройки(ИмяНастройки, СтвЗначениеНастройки);	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СпособДоставкиНачалоВыбораНаСервере()
	
	ТекОбъект 	      = РеквизитФормыВЗначение("Объект");	
	ИмяНастройки	  = ТекОбъект.КлючНастроекиСпособыДоставки();
	ЗначениеНастройки = ТекОбъект.ПрочитатьЗначениеНастройки(ИмяНастройки); 

	Возврат ЗначениеНастройки;

КонецФункции   

&НаКлиенте
Процедура ЗаполнитьОрганизацииПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ОчиститьЗаполнитьТаблицу();
		Элементы.КаспиДанныеОрганизаций.Обновить();
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗаполнитьТаблицу() //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	Объект.КаспиДанныеОрганизаций.Очистить();
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	Организации.Ссылка КАК Организация
					|ИЗ
					|	Справочник.Организации КАК Организации
					|ГДЕ
					|	НЕ Организации.ПометкаУдаления
					|УПОРЯДОЧИТЬ ПО
					|	Организации.Ссылка.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.КаспиДанныеОрганизаций.Добавить();
	        НоваяСтрока.Организация = Выборка.Организация;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораНе() //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	СЗн = Новый СписокЗначений();
	СЗн.ЗагрузитьЗначения(Объект.КаспиДанныеОрганизаций.Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Если СЗн.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе                                                                                                   
		Возврат СЗн;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокВыбораВ() //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ Организации.Ссылка КАК Организация ИЗ Справочник.Организации КАК Организации ГДЕ НЕ Организации.ПометкаУдаления");
	СЗн = Новый СписокЗначений();
	СЗн.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация"));
	Если СЗн.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе                                                                                                   
		Возврат СЗн;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьДобавлениеИзменениеОрганизации(Результат, ДополнительныеПараметры) Экспорт //dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда //Изменение
			СтррОтбор = Новый Структура();
			СтррОтбор.Вставить("Организация", ДополнительныеПараметры);
			Строки = Объект.КаспиДанныеОрганизаций.НайтиСтроки(СтррОтбор);
			ТекСТрока = Строки[0];
			ТекСтрока.Организация = Результат;
		Иначе                                   //Добавление
			НоваяСтрока = Объект.КаспиДанныеОрганизаций.Добавить();
			НоваяСтрока.Организация = Результат;
		КонецЕсли;
		Элементы.КаспиДанныеОрганизаций.Обновить();
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПараметрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
//	
//	Если ЗначениеЗаполнено(Текст) Тогда
//		Попытка
//			//@skip-check module-unused-local-variable
//			ТестЧисло = Число(Текст);
//		Исключение
//			СтандартнаяОбработка = Ложь;
//			ПоказатьПредупреждение(, "Значение должно содержать только цифры!",, НСтр("ru = 'ВНИМАНИЕ!'"));
//		КонецПопытки;
//	КонецЕсли;
//		
//КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Продолжить

&НаКлиенте
Процедура КомандаСгенерироватьНастройкиАгентПлюсСОДПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьНастройкиКлиент() Тогда
			СОДСоздатьФайлНастроек();
		КонецЕсли;
	Иначе
		ОчиститьСообщения();
		Текст = НСтр("ru='Настройки для службы обмена ""Агент Плюс: СОД"" не сгенерированы!'");
		ПоказатьПредупреждение(Неопределено, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьПанельУправленияАПСОДПродолжить(ИмяКнопки, ДополнительныеПараметры) Экспорт

	Если ИмяКнопки = Неопределено Или ИмяКнопки = "Отмена" Тогда
		Возврат; 
	ИначеЕсли ИмяКнопки = "ВыбратьЛокально" Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Укажите файл управления службой ""APlusSrvPanel.exe"".'");
		ДиалогВыбораФайла.Фильтр = НСтр("ru='Приложение (*.exe)|*.exe'");
		//@skip-check form-self-reference
		ДиалогВыбораФайла.Показать(
			Новый ОписаниеОповещения("СОДВыборФайлаПанелиУправленияЛокальноПродолжить", ЭтаФорма, "ВыбратьЛокально"));
	ИначеЕсли ИмяКнопки = "Скачать" Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Укажите каталог назначения для скачивания службы обмена Агент Плюс: СОД.'");
		//@skip-check form-self-reference
		ДиалогВыбораФайла.Показать(
			Новый ОписаниеОповещения("СОДВыборФайлаПанелиУправленияЛокальноПродолжить", ЭтаФорма, "Скачать"));
	Иначе
		ВызватьИсключение("КомандаОткрытьПанельУправленияАПСОДПродолжить() - неизвестное значение параметра: " + ИмяКнопки);
	КонецЕсли;
	
КонецПроцедуры //КомандаОткрытьПанельУправленияАПСОДПродолжить

&НаКлиенте
Процедура КомандаКаталогДанныхПоУмолчаниюПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт

	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		УстановитьКаталогДанныхПоУмолчанию(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьНастройкиКлиент() Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветПросроченныхВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ЦветПросроченныхДолгов = Результат.Цвет;
		УстановитьМодифицированостьФормы(Истина);
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Продолжить
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

//&НаСервереБезКонтекста
//Функция КонстантыПолучитьЗначение(ИмяКонстанты)
//
//	Возврат Константы[ИмяКонстанты].Получить();	
//	
//КонецФункции

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции

&НаСервере
Функция ПолучитьИмяКонфигурации()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Возврат ТекОбъект.ВерсияКонфигурации().Конфигурация;		
	
КонецФункции

&НаСервере
Функция ПолучитьИмяСервера()
	
	Возврат ИмяКомпьютера();		
	
КонецФункции

// Возвращает признак учета маркированных товаров на дату сеанса
//
// Возвращаемое значение:
//	Булево - признак учета маркированной продукции
//
&НаСервере
Функция ВестиУчетМаркированныхТоваров() 
	
	ТекОбъект  = РеквизитФормыВЗначение("Объект");
	
	Если ТекОбъект.ПоколениеКонфигурацииСервер(">=УТ_11.4.12", СтррКонтекст) Тогда
		МодульИнтеграцияИСМПКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСерверПовтИсп"); 
		Если МодульИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ВестиУчетМаркированныхТоваров() 

// Параметры:
//  ИмяЭлемента	 - Строка	    - имя элимента на форме, которое вызвало событие
//
&НаКлиенте
Процедура НастройкиВыгрузкиКлиентовПриИзменении(ИмяЭлемента = Неопределено)
	
	Если ИмяЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтррКонтекст.Конфигурация = "УТ_АП" Тогда 
		
		Если ИмяЭлемента = "ИспользоватьПунктыРазгрузки" Тогда
			Если Объект.ИспользоватьПунктыРазгрузки Тогда
				Объект.ИспользоватьКонтрагентов = Истина;
			Иначе
				Объект.ИспользоватьКонтрагентов = Ложь;
			Конецесли;
		КонецЕсли;
		
		Если ИмяЭлемента = "ИспользоватьПунктыРазгрузки" ИЛИ ИмяЭлемента = "ИспользоватьКонтрагентов" ИЛИ ИмяЭлемента = "ИспользоватьАдресаДоставки" Тогда
			НастройкиИспользоватьПунктыРазгрузкиПриИзмененииДляУТАП();
		КонецЕсли;
		
	Иначе
	
		Если ИмяЭлемента = "ИспользоватьКонтрагентов" Тогда
			Если Объект.ИспользоватьКонтрагентов Тогда
	        	Объект.ИспользоватьАдресаДоставки = Ложь;
				Элементы.ИспользоватьАдресаДоставки.Доступность = Ложь;
			ИначеЕсли НЕ Объект.РежимВыгрузкиРекомендуемый Тогда
				Элементы.ИспользоватьАдресаДоставки.Доступность = Истина;
			КонецЕсли;				
		КонецЕсли;
		
		Если ИмяЭлемента = "ИспользоватьАдресаДоставки" Тогда
			Если Объект.ИспользоватьАдресаДоставки Тогда
				Объект.ИспользоватьКонтрагентов	  			  = Ложь;
				Элементы.ИспользоватьКонтрагентов.Доступность = Ложь;
				Если Не ЗначениеЗаполнено(Объект.ВидКИАдресДоставки) Тогда
					Объект.ВидКИАдресДоставки = ПолучитьВидКИАдресДоставкиПоУмолчанию();
				КонецЕсли;
			Иначе
				Элементы.ИспользоватьКонтрагентов.Доступность = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Если ИмяЭлемента = "РежимВыгрузкиРекомендуемый" Тогда
			Если Объект.РежимВыгрузкиРекомендуемый Тогда
				Элементы.ИспользоватьАдресаДоставки.Доступность = Ложь;
			ИначеЕсли НЕ Объект.ИспользоватьКонтрагентов Тогда
				Элементы.ИспользоватьАдресаДоставки.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;	

		Элементы.РежимВыгрузкиРекомендуемый.Доступность  = Не Объект.ИспользоватьАдресаДоставки;
 
		Элементы.ВидКИАдресДоставки.Доступность = Объект.ИспользоватьАдресаДоставки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура НастройкиИспользоватьПунктыРазгрузкиПриИзмененииДляУТАП(ПриОткрытииФормы = Ложь)
	
	Если СтррКонтекст.Конфигурация = "УТ_АП" Тогда 
		
		Элементы.ИспользоватьПунктыРазгрузки.Доступность = Истина;
		Элементы.ИспользоватьКонтрагентов.Доступность    = Истина;
		Элементы.ИспользоватьАдресаДоставки.Доступность  = Истина;
		
		Если Объект.ИспользоватьАдресаДоставки Тогда
			Объект.ИспользоватьПунктыРазгрузки = Ложь;
			Объект.ИспользоватьКонтрагентов	   = Ложь;
			Элементы.ИспользоватьПунктыРазгрузки.Доступность = Ложь;
			Элементы.ИспользоватьКонтрагентов.Доступность	 = Ложь;
			
		ИначеЕсли Объект.ИспользоватьПунктыРазгрузки = Ложь И Объект.ИспользоватьКонтрагентов = Истина Тогда
			Объект.ИспользоватьПунктыРазгрузки = Ложь;
			Объект.ИспользоватьАдресаДоставки  = Ложь;
			Элементы.ИспользоватьАдресаДоставки.Доступность  = Ложь;
			Элементы.ИспользоватьПунктыРазгрузки.Доступность = Ложь;
			
		ИначеЕсли Объект.ИспользоватьПунктыРазгрузки = Истина Тогда
			Объект.ИспользоватьАдресаДоставки  = Ложь;
			Элементы.ИспользоватьАдресаДоставки.Доступность  = Ложь;
			
		Иначе
			Объект.ИспользоватьПунктыРазгрузки = Ложь;
			Объект.ИспользоватьКонтрагентов	   = Ложь;
			Объект.ИспользоватьАдресаДоставки  = Ложь;
			Элементы.ИспользоватьПунктыРазгрузки.Доступность = Истина;
			Элементы.ИспользоватьКонтрагентов.Доступность    = Истина;
			Элементы.ИспользоватьАдресаДоставки.Доступность  = Истина;
		КонецЕсли;
		
				
		Если Объект.ИспользоватьПунктыРазгрузки Тогда
			Элементы.ИспользоватьКонтрагентов.Вид 				   = ВидПоляФормы.ПолеВвода;
			Элементы.ИспользоватьКонтрагентов.ФорматРедактирования = "БЛ=Партнера; БИ=Контрагента";
			Элементы.ИспользоватьКонтрагентов.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Лево; 
			Элементы.ИспользоватьКонтрагентов.Заголовок			   = "В качестве ""Клиента"" использовать";
			Элементы.ИспользоватьКонтрагентов.Подсказка 		   = "Пункты разгрузки могут использоватся с контрагентами или партнерами.";
			Элементы.ИспользоватьКонтрагентов.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Иначе
			Если НЕ ПриОткрытииФормы Тогда
				СтррРеквизитыНачальныеЗначения = НастройкиПолучитьНачальныеЗначения();
				Элементы.ИспользоватьКонтрагентов.Заголовок  = СтррРеквизитыНачальныеЗначения.ИспользоватьКонтрагентовСиноним; 
				Элементы.ИспользоватьКонтрагентов.Подсказка  = СтррРеквизитыНачальныеЗначения.ИспользоватьКонтрагентовПодсказка;
				Элементы.ИспользоватьКонтрагентов.Вид 				   = ВидПоляФормы.ПолеФлажка;
				Элементы.ИспользоватьКонтрагентов.ВидФлажка 		   = ВидФлажка.Флажок;
				Элементы.ИспользоватьКонтрагентов.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Право;		
				Элементы.ИспользоватьКонтрагентов.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
			КонецЕсли;
		Конецесли;
		
		Элементы.ВидКИАдресДоставки.Доступность = Объект.ИспользоватьАдресаДоставки;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СтррРеквизиты	 - Структура - 
// 
// Возвращаемое значение:
//  Структура - Возвращает структуру с результатами
//                                     
&НаСервере
Функция НастройкиПолучитьНачальныеЗначения(СтррРеквизиты = Неопределено)
	
	Если СтррРеквизиты = Неопределено Тогда 
		СтррРезультат = Новый Структура("ИспользоватьКонтрагентовСиноним, ИспользоватьКонтрагентовПодсказка");
	Иначе
		СтррРезультат = СтррРеквизиты;
	КонецЕсли;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	//Если стррРезультат.Свойство("ИспользоватьКонтрагентов") Тогда
	//	стррРезультат.ИспользоватьКонтрагентовСиноним   = ТекОбъект.ПрочитатьЗначениеНастройки("ИспользоватьКонтрагентов");
	//КонецЕсли;
	
	Если СтррРезультат.Свойство("ИспользоватьКонтрагентовСиноним") Тогда
		СтррРезультат.ИспользоватьКонтрагентовСиноним   = ТекОбъект.Метаданные().Реквизиты.ИспользоватьКонтрагентов.Синоним;
	КонецЕсли;
	
	Если СтррРезультат.Свойство("ИспользоватьКонтрагентовПодсказка") Тогда
		СтррРезультат.ИспользоватьКонтрагентовПодсказка = ТекОбъект.Метаданные().Реквизиты.ИспользоватьКонтрагентов.Подсказка;
	КонецЕсли;
	
	возврат СтррРезультат;	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещенияВыбораПроводитьДокументыСписок(ЗначениеВыбора, ДопПараметры) Экспорт 
	Если ЗначениеВыбора <> Неопределено Тогда
		ЭлементФормыПриИзменении(Элементы.НастроитьПроводитьДокументыСписок);		
	КонецЕсли;	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти

