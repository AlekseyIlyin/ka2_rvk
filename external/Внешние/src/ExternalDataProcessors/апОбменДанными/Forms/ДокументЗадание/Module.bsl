#Область ОписаниеПеременных

&НаКлиенте
Перем МодульМТ;  // Общий клиентский модуль со спецификой мобильной торговли

&НаКлиенте
Перем ГМодульК;  // общий клиентский модуль. 

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");			
	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры, "ID");	
	ТекОбъект.ВОКонтекстФормыДополнить(СтррКонтекст, "_Задание", Ложь);
	
	СтррКонтекст.Вставить("мФото", Неопределено);
	
	//ТипЗадачиСписок = ТекОбъект.ТипыЗадач(); //Заполнить типы задач
	ЗаполнитьВидЗадачиСписок(ТекОбъект);     //Заполнить виды задач
	
	//@skip-check unknown-form-parameter-access
	ПрочестьОбъектИзХранилища(Параметры.ID, Параметры.Копирование);
	                                
	ТекОбъект.ВОПриСозданииФормыЭлемента(ЭтотОбъект);  
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Загружаем общий клиентский модуль "МодульОбщийМТ". В параметре "Параметры" важно передавать структуру с заполненным
	// свойством "ВХОбщиеПараметры" - оно используется для предотвращения повторной загрузки текущей обработки.
	//@skip-check use-non-recommended-method
	//@skip-check form-self-reference
	МодульМТ = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщийМТ", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийМТ"); // в СтррКонтекст есть заполненное свойство "ВХОбщиеПараметры"
	МодульМТ.ВОПриОткрытии(ЭтотОбъект);
	
	ЗаполнитьСписокВыбораВидовЗадач();
	
	ФормаОбновитьВидимостьЭлементов();
	
	СозданВЦБД = Истина;
	Элементы.СозданВЦБД.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьПродолжить", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	МодульМТ.ПартнерПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	МодульМТ.КонтрагентПриИзменении(ЭтотОбъект, Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("КонтрагентНачалоВыбораЗавершение", ЭтотОбъект);
	СтррПараметры = ?(ЗначениеЗаполнено(Партнер), Новый Структура("Отбор", Новый Структура("Партнер", Партнер)), Неопределено);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", СтррПараметры,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	МодульМТ.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	МодульМТ.ДоговорПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	МодульМТ.СоглашениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Сначала выберите клиента.'"));
		Возврат;
	КонецЕсли;
	
	Если МодульМТ.ПоколениеКонфигурации("<=УТ_11.1") Тогда
		//@skip-check many-actual-parameters
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Партнер, Соглашение, Дата);
		
	ИначеЕсли МодульМТ.ПоколениеКонфигурации("<=УТ_11.2") Тогда
		//@skip-check many-actual-parameters
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Партнер, Соглашение, Дата,,,,Объект);
	
	Иначе
		
		СтррПараметры = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
		
		СтррПараметры.Элемент                     = Элемент;
		СтррПараметры.Партнер                     = Партнер;
		СтррПараметры.Документ                    = Соглашение;
		СтррПараметры.ДатаДокумента               = Дата;
		СтррПараметры.ДанныеФормыСтруктура        = Объект;
		
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(СтррПараметры, СтандартнаяОбработка);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементФормыПриИзменении(Элемент)
	
	УстановитьМодифицированостьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфоМТВремяСозданияНажатие(Элемент, СтандартнаяОбработка)
	
	МодульМТ.РеквизитМТПриНажатииСсылки(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементМТСведенияНажатие(Элемент)
	
	СтррРезультат = МодульМТ.РеквизитМТПриНажатииСсылки(ЭтотОбъект, Элемент);
	Если ТипЗнч(СтррРезультат) = Тип("Структура") Тогда // нужно показать выбор из меню
	  	ПоказатьВыборИзМеню(СтррРезультат.Оповещение, СтррРезультат.Меню, Элемент);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НеИзменятьВМУПриИзменении(Элемент)
	УстановитьМодифицированостьФормы();
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачи

&НаКлиенте
Процедура ЗадачиПриИзменении(Элемент)
	УстановитьМодифицированостьФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗадачиВидЗадачиПредставление" И (ЗначениеЗаполнено(Элемент.ТекущиеДанные.Результат) ИЛИ НЕ ПустаяСтрока(Элемент.ТекущиеДанные.РезультатПредставление)) Тогда 
		ТекстОшибки = НСтр("ru = 'Поле результат заполнено, редактирование поля не доступно.'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПриАктивизацииПоля(Элемент)
	
	Если НЕ Элемент.ТекущийЭлемент.Имя = "ЗадачиВидЗадачиПредставление" Тогда	
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидЗадачиПредставление) Тогда
			Если Элемент.ТекущиеДанные.ВидЗадачиПредставление = Строка(Элемент.ТекущиеДанные.ВидЗадачи) Тогда
				ИдВидЗадачи = Новый УникальныйИдентификатор(Элемент.ТекущиеДанные.ВидЗадачиПредставление);
				Элементы.Задачи.ТекущиеДанные.ВидЗадачи 	= ИдВидЗадачи;
				Элемент.ТекущиеДанные.ВидЗадачиПредставление = ПолучитьПредставление(Новый УникальныйИдентификатор(Элемент.ТекущиеДанные.ВидЗадачиПредставление));
			КонецЕсли;			
		Иначе
			Элемент.ТекущиеДанные.ВидЗадачи				 = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			Элемент.ТекущиеДанные.ВидЗадачиПредставление = "";
		КонецЕсли;		    		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗадачиВидЗадачиПредставление" Тогда
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидЗадачиПредставление) Тогда
			ИдВидЗадачи = Новый УникальныйИдентификатор(Элемент.ТекущиеДанные.ВидЗадачиПредставление);
			Элементы.Задачи.ТекущиеДанные.ВидЗадачи 	= ИдВидЗадачи;
			Элемент.ТекущиеДанные.ВидЗадачиПредставление = ПолучитьПредставление(Новый УникальныйИдентификатор(Элемент.ТекущиеДанные.ВидЗадачиПредставление));
		Иначе
			Элемент.ТекущиеДанные.ВидЗадачи				 = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			Элемент.ТекущиеДанные.ВидЗадачиПредставление = "";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.GUID) Тогда
		Элемент.ТекущиеДанные.GUID = Новый УникальныйИдентификатор();		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗадачиРезультатПредставление" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Результат) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Результат) Тогда
			Возврат;
		КонецЕсли;
		
		ТипРезультат = ТипЗнч(Элемент.ТекущиеДанные.Результат);
		
		//ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(типРезультат);

		Если ТипРезультат = Тип("Строка") ИЛИ ТипРезультат = Тип("Число") ИЛИ ТипРезультат = Тип("Булево") ИЛИ ТипРезультат = Тип("Булево") Тогда	
			ПоискТипЗадачи = ВидыЗадач.НайтиСтроки(Новый Структура("ID", Элемент.ТекущиеДанные.ВидЗадачи));
			Если ПоискТипЗадачи.Количество() <> 0 Тогда
				МФото = Новый Массив;	
				//@skip-check form-self-reference
				Для Каждого стзСписокФото Из ЭтаФорма.СписокФото Цикл
					Если стзСписокФото.ИдЗадачиДокумента = Элемент.ТекущиеДанные.GUID Тогда
						МФото.Добавить(стзСписокФото.GUID); 
					КонецЕсли;					             
				КонецЦикла;
				Если МФото.Количество() > 0 Тогда
					СтррКонтекст.мФото = МФото;
					//@skip-check form-self-reference
					КомандаВыполнить(ЭтаФорма.Команды.Найти("ПрикрепленныеФотографии"));
				КонецЕсли;	
				Возврат;
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ЗадачиВыборПослеЗакрытияОповещения", ЭтотОбъект); 
			ПоказатьПредупреждение(Оповещение, Элемент.ТекущиеДанные.РезультатПредставление,0 , "Результат");
			
		ИначеЕсли ТипРезультат = Тип("УникальныйИдентификатор") Тогда
			
			ПоискТипЗадачи = ВидыЗадач.НайтиСтроки(Новый Структура("ID", Элемент.ТекущиеДанные.ВидЗадачи));
			Если ПоискТипЗадачи.Количество() > 0 Тогда
				ИдТипЗадачи = ПоискТипЗадачи[0].ТипЗадачи;
			Иначе
				ИдТипЗадачи = Неопределено;
			КонецЕсли;
			
			Если ИдТипЗадачи = Новый УникальныйИдентификатор("544B81FD-49DA-453E-9B9C-EEC549CBEF10") Тогда
				//Мерчендайзинг
				МодульК().ВООткрытьФорму("_Мерчендайзинг", Элемент.ТекущиеДанные.Результат);
				
			ИначеЕсли ИдТипЗадачи = Новый УникальныйИдентификатор("2F7826F4-2665-49FA-95E7-E7C8CC6EBF0E") Тогда
				//Посещение			
				МодульК().ВООткрытьФорму("_Посещение", Элемент.ТекущиеДанные.Результат);
			
			ИначеЕсли ИдТипЗадачи = Новый УникальныйИдентификатор("B483E5F9-95E6-4E2D-B6B2-D5954FCC25AE") Тогда 
				//Фото
				Оповещение = Новый ОписаниеОповещения("ЗадачиВыборПослеЗакрытияОповещения", ЭтотОбъект); 
				ПоказатьПредупреждение(Оповещение, "В разработке."); //Этой ситуации не должно быть, фото не реализовано.
				
			Иначе
				Оповещение = Новый ОписаниеОповещения("ЗадачиВыборПослеЗакрытияОповещения", ЭтотОбъект); 
				ПоказатьПредупреждение(Оповещение, "Неизвестный тип документа.");
				
			КонецЕсли;
			
		ИначеЕсли ТипРезультат = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ОткрытьФормуПоСсылке("ЗаказКлиента", Элемент.ТекущиеДанные.Результат)
			
		ИначеЕсли ТипРезультат = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ОткрытьФормуПоСсылке("РеализацияТоваровУслуг", Элемент.ТекущиеДанные.Результат)

		ИначеЕсли ТипРезультат = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ОткрытьФормуПоСсылке("ПеремещениеТоваров", Элемент.ТекущиеДанные.Результат)

		ИначеЕсли ТипРезультат = Тип("ДокументСсылка." + ВидДокументаПоступления()) Тогда
			ОткрытьФормуПоСсылке("ПоступлениеТоваров", Элемент.ТекущиеДанные.Результат)

		ИначеЕсли ТипРезультат = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			ОткрытьФормуПоСсылке("ВозвратТоваровОтКлиента", Элемент.ТекущиеДанные.Результат)

		ИначеЕсли ТипРезультат = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			ОткрытьФормуПоСсылке("ПриходныйКассовыйОрдер", Элемент.ТекущиеДанные.Результат)

		ИначеЕсли ТипРезультат = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ОткрытьФормуПоСсылке("РасходныйКассовыйОрдер", Элемент.ТекущиеДанные.Результат)

		ИначеЕсли ТипРезультат = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ОткрытьФормуПоСсылке("ЗаказКлиента", Элемент.ТекущиеДанные.Результат)
			
		Иначе
			//Нет действий
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВидЗадачиПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элементы.Задачи.ТекущиеДанные.ВидЗадачиПредставление = Строка(Элементы.Задачи.ТекущиеДанные.ВидЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВидЗадачиПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ИдВидЗадачи = Новый УникальныйИдентификатор(ВыбранноеЗначение);
		Элементы.Задачи.ТекущиеДанные.ВидЗадачи 	= ИдВидЗадачи;
		Элементы.Задачи.ТекущиеДанные.ВидЗадачиПредставление = ПолучитьПредставление(ИдВидЗадачи);
	Иначе
		Элементы.Задачи.ТекущиеДанные.ВидЗадачи				 = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		Элементы.Задачи.ТекущиеДанные.ВидЗадачиПредставление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередУдалением(Элемент, Отказ)

	СтррПоиск = Новый Структура("ИдЗадачиДокумента", Элемент.ТекущиеДанные.GUID);
	МСТЗСписокФото = СписокФото.НайтиСтроки(СтррПоиск);
	Для Каждого СТЗСписокФото Из МСТЗСписокФото Цикл
		СписокФото.Удалить(СТЗСписокФото);		
	КонецЦикла;  
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыЗадачи
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	Если Команда.Имя = "ПрикрепленныеФотографии" Тогда
		Если Модифицированность	Или Не ЗначениеЗаполнено(ID) Тогда
			//@skip-check use-non-recommended-method
			Сообщить("Документ нужно записать перед выполнением команды");
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	МодульМТ.КомандаВыполнить(Команда, ЭтотОбъект);
	Если Команда.Имя = "ПрикрепленныеФотографии" Тогда 
		СтррКонтекст.мФото = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранить(Команда)
		
	СохранитьОбъектВХранилищеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
		
	СохранитьОбъектВХранилищеКлиент(1); // признак Проведен
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
		
	СохранитьОбъектВХранилищеКлиент(1); // признак Проведен
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Хранилище

&НаСервере
Процедура ЗаполнитьВидЗадачиСписок(ТекОбъект) 
	СтррВидыЗадач = Новый Структура; // общие значения модуля формы
	ТекОбъект.ВОКонтекстФормыДополнить(СтррВидыЗадач, "_ВидыЗадач", Истина);
	ТЗВидыЗадач = ТекОбъект.ВОТЗЗагрузить(СтррВидыЗадач.ВО);
	Для каждого стзЭлемент Из ТЗВидыЗадач Цикл
		стзНовая = ВидыЗадач.Добавить();		
		ЗаполнитьЗначенияСвойств(стзНовая, стзЭлемент);	
	КонецЦикла;     	
конецпроцедуры

// Процедура считывает объект (документ) из хранилища значений.
&НаСервере
Процедура ПрочестьОбъектИзХранилища(КлючID, Копирование) 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ID = КлючID;
	СтррОбъект = ТекОбъект.ВОЭлементЗагрузить(СтррКонтекст.ВО, ID);
	
	Если СтррОбъект = Неопределено Тогда 
		// создание нового документа, заполняем документ значениями по умолчанию
	Иначе
		Если Копирование И СтррОбъект.Свойство("Задачи") Тогда
			Для каждого стзЗадачи Из СтррОбъект.Задачи Цикл
				стзЗадачи.GUID = Новый УникальныйИдентификатор();			
			КонецЦикла;
		КонецЕсли;
		ТекОбъект.ЗаполнитьРеквизитыОбъектаИзСтруктуры(ЭтотОбъект, СтррОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьОбъектВХранилищеКлиент(НовыйСтатус = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Номер) И (НовыйСтатус = 1 ИЛИ (НовыйСтатус = Неопределено И Статус = 1)) Тогда
		Номер = ПолучитьНовыйНомерДокумента();
		Если НЕ ПроверитьЗаполнениеПолей(Истина) Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если НЕ ПроверитьЗаполнениеПолей() Тогда
			Возврат Ложь;
		КонецЕсли;		
	КонецЕсли;		 	 
	
	МодульМТ.ВОПередЗаписьюЭлемента(ЭтотОбъект, НовыйСтатус);
	
	СохранитьОбъектВХранилище();
	УстановитьМодифицированостьФормы(Ложь);
	Оповестить("АПДокументЗаписан_" + СтррКонтекст.ВО.ВидОбъекта, ID);
	
	Возврат Истина;	
КонецФункции

&НаСервере
Функция ПолучитьНовыйНомерДокумента()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьНовыйНомерДокумента(СтррКонтекст.ВО);		
КонецФункции

// Процедура сохраняет объект (документ) в хранилище значений.
&НаСервере
Процедура СохранитьОбъектВХранилище()
	
	СтрРеквизитыШапкиОсн = "Статус,Дата,Номер,ВремяНачала,ВремяОкончания,Широта,Долгота,АдресПоГеокодеру,Менеджер,Комментарий";
	СтрРеквизитыШапкиДоп = "Партнер,Контрагент,Соглашение,Организация,Договор,Категория,НеИзменятьВМУ,СозданВЦБД,ДатаТочкиТрека";
	СтрРеквизитыТЧ		 = "Задачи,СписокФото";
	СтррОбъект = Новый Структура(СтрРеквизитыШапкиОсн + "," + СтрРеквизитыШапкиДоп + "," + СтрРеквизитыТЧ); // сохраняемые реквизиты объекта
	//@skip-check form-self-reference
	ЗаполнитьЗначенияСвойств(СтррОбъект, ЭтаФорма,, СтрРеквизитыТЧ);
	
	СтррОбъект.Задачи 		= Задачи.Выгрузить();
	СтррОбъект.СписокФото   = СписокФото.Выгрузить();
	
	РеквизитФормыВЗначение("Объект").ВОЭлементСохранить(СтррКонтекст.ВО, ID, СтррОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		Если СохранитьОбъектВХранилищеКлиент() Тогда
			Закрыть();
		КонецЕсли; 
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		УстановитьМодифицированостьФормы(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РаботаСФормой

&НаКлиенте
Процедура ФормаОбновитьВидимостьЭлементов()
	
	МодульМТ.ФормаСведенияИзМТОбновить(ЭтотОбъект);
	ВидимостьДоговорСоглашение();
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьДоговорСоглашение()
	
	Элементы.Договор.Видимость 		= Ложь;
	Элементы.Соглашение.Видимость 	= Ложь;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ИспользоватьДоговорыИлиСоглашения = ТекОбъект.ПрочитатьЗначениеНастройки("ИспользоватьДоговорыИлиСоглашения");
	
	Если ИспользоватьДоговорыИлиСоглашения = "СОГЛАШЕНИЯ" И Константы.ИспользованиеСоглашенийСКлиентами.Получить() <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
		Элементы.Соглашение.Видимость 	= Истина;
	ИначеЕсли ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" И Константы.ИспользоватьДоговорыСКлиентами.Получить() Тогда
		Элементы.Договор.Видимость 		= Истина;
	КонецЕсли;
		
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьМодифицированостьФормы(Режим = Истина) Экспорт
	
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Режим;
	Элементы.Сохранить.ЦветТекста = СтррКонтекст.Цвета[?(Режим, "ТекстВнимание", "Авто")];
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПоСсылке(СтрДокумент, ДокументСсылка)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ДокументСсылка);
	ОткрытьФорму("Документ." + СтрДокумент + ".Форма.ФормаДокумента", ПараметрыФормы);
Конецпроцедуры

// СлужебныеПроцедурыИФункции_РаботаСФормой
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции 

&НаКлиенте
Процедура ЗадачиВыборПослеЗакрытияОповещения(Параметры) Экспорт
	//Процедура для немодального выода результата, без обработки.
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	МодульМТ.КонтрагентНачалоВыбораЗавершение(ЭтотОбъект, Результат, ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Функция ВидДокументаПоступления()
	Возврат РеквизитФормыВЗначение("Объект").ВидДокументаПоступлениеТоваровУслуг()  
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидовЗадач()
	
	Для Каждого Элемент Из ВидыЗадач Цикл
		Элементы.ЗадачиВидЗадачиПредставление.СписокВыбора.Добавить(Строка(Элемент.ID), Элемент.Наименование);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставление(ИдВидаЗадания)
	
	СтррПоиск = Новый Структура("ID", ИдВидаЗадания);
	Результат = ВидыЗадач.НайтиСтроки(СтррПоиск);
	
	Если Результат.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат Результат[0].Наименование; 
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеПолей(ПриПроведении = Ложь)
	
	ОчиститьСообщения();
	
	Результат = Истина;
	
	Если ПриПроведении И НЕ ЗначениеЗаполнено(Номер) Тогда
		Результат = Ложь;
		ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Номер"".'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Номер");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Дата) Тогда 
		Результат = Ложь;
		ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Дата"".'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Дата");
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда 
		Результат = Ложь;
		ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Организация"".'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Организация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Партнер) Тогда 
		Результат = Ложь;
		ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Клиент"".'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Партнер");
	КонецЕсли;
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Задачи.Количество() = 0 Тогда 
		Результат = Ложь;
		ТекстОшибки = НСтр("ru = 'У документа не заполнены ""Задачи"".'");
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Задачи");
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти 
