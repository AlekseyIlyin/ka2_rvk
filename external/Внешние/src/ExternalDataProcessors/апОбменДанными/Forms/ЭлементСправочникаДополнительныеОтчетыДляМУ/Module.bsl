#Область ОписаниеПеременных

&НаКлиенте
Перем МодульМТ;  // Общий клиентский модуль со спецификой мобильной торговли
 
// ГлобальныеПеременные
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТекОбъект = РеквизитФормыВЗначение("Объект");		
	
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры, "ID");
	ТекОбъект.ВОКонтекстФормыДополнить(СтррКонтекст, "_ДополнительныеОтчетыДляМУ", Ложь);	
	//@skip-check unknown-form-parameter-access
	ПрочестьОбъектИзХранилища(Параметры.ID);
	
	ТекОбъект.ВОПриСозданииФормыЭлемента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Загружаем общий клиентский модуль "МодульОбщийМТ". В параметре "Параметры" важно передавать структуру с заполненным
	// свойством "ВХОбщиеПараметры" - оно используется для предотвращения повторной загрузки текущей обработки.
	//@skip-check use-non-recommended-method
	//@skip-check form-self-reference
	МодульМТ = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщийМТ", СтррКонтекст, ЭтаФорма, "АгентПлюсМодульОбщийМТ"); // в СтррКонтекст есть заполненное свойство "ВХОбщиеПараметры"
	
	Если НЕ ЗначениеЗаполнено(ID) Тогда
		//Это новый объект
		ЗаполнитьОтчетЗапросТекстЗапросаПоУмолчанию();
		ЗаполнитьОчетПрограммаТекстПрограммыПоУмолчанию();
		ОтчетСКДМакет = "Отчеты.ИмяОтчета.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"")";
		ПараметрыОтчетаИзменены = Истина;
	КонецЕсли;	
	
	ВидимостьСтраничек();
	
	ЗаполнитьСписокТипПараметра();
	ЗаполнитьСписокВариантОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	//@skip-check form-self-reference
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура ЭлементПриИзменении(Элемент)
	
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Истина;
	
	Если Элемент = Элементы.ТипОтчета Тогда
		ВидимостьСтраничек();
		Если Элементы.ГруппаСтраницаНастройкиСКД.Видимость Тогда
			//@skip-check form-self-reference
			ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаСтраницаНастройкиСКД;
		ИначеЕсли Элементы.ГруппаСтраницаТекстЗапроса.Видимость Тогда
			//@skip-check form-self-reference
			ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаСтраницаТекстЗапроса;
		ИначеЕсли Элементы.ГруппаСтраницаТекстПрограммы.Видимость Тогда
			//@skip-check form-self-reference
			ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаСтраницаТекстПрограммы;
		КонецЕсли;
		
	ИначеЕсли Элемент = Элементы.СКДМакет Тогда
		ЗаполнитьСписокВариантОтчета();
		
	ИначеЕсли Элемент = Элементы.ПараметрыОтчета Тогда
		ПараметрыОтчетаИзменены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы	
#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОтчета

&НаКлиенте
Процедура ПараметрыОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Отказ = истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтчетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда 
		Элемент.ТекущиеДанные.ТипПараметра = Элементы.ПараметрыОтчетаТипПараметра.СписокВыбора[0].Значение;
		Элемент.ТекущиеДанные.ИмяПараметра = "НовыйПараметр";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтчетаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элемент.ТекущиеДанные.ИмяПараметра = СокрЛП(Элемент.ТекущиеДанные.ИмяПараметра);
	Элемент.ТекущиеДанные.ИмяПараметра = СтрЗаменить(Элемент.ТекущиеДанные.ИмяПараметра, " ", "");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтчетаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ПараметрыОтчетаВыражение Тогда
		//При изменении флпга "Выражение" на Истина, тип колонки "Знчение параметра" должен быть строкой или не задан.
		Если Элемент.ТекущиеДанные.Выражение = Ложь Тогда
			Если Элемент.ТекущиеДанные.ЗначениеПараметра = Неопределено Тогда
				//Присваиваем тип строка.
				ПараметрыОтчета[Элемент.ТекущаяСтрока].ЗначениеПараметра = "ТекущаяДата()";
			ИначеЕсли Типзнч(Элемент.ТекущиеДанные.ЗначениеПараметра) <> Тип("Строка") Тогда
				ТекстСообщения = НСтр("ru = 'Для изменении признака ""Выражение"" значение в колонке ""Значение параметра"" должно быть не задано или быть типом ""Строка""'"); 
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Оповещение = Новый ОписаниеОповещения("ПараметрыОтчетаПередНачаломИзмененияЗаглушкаОповещения", ЭтотОбъект);
				ПоказатьПредупреждение(Оповещение, ТекстСообщения, 0, "Изменение параметра настройки значения ""Выражение"""); 			
				
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ПараметрыОтчетаЗначениеПараметра Тогда
		//Тип параметра колонки "Значение параметра" нельзя переопределить если установлен флпг "Выражение".
		Элементы.ПараметрыОтчетаЗначениеПараметра.ВыбиратьТип = НЕ Элемент.ТекущиеДанные.Выражение;
		
	КонецЕсли;
	               
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтчетаТипПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// Вставить содержимое обработчика.
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОтчета
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаСформироватьОтчет(Команда)
	
	Ошибка = ВывестиОтчет(РезультатТабличныйДокумент);
	
	Если Ошибка <> Неопределено Тогда
		Если ТипОтчета = 0 Тогда
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка,,"СКДМакет");	
		ИначеЕсли ТипОтчета = 1 Тогда
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка,,"ОтчетЗапросТекстЗапроса");
		ИначеЕсли ТипОтчета = 2 Тогда
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка,,"ОчетПрограммаТекстПрограммы");
		Иначе
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка,,"ТипОтчета");	
		КонецЕсли;	
	КонецЕсли;
		  
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если ТипОтчета = 0 Тогда
		Если  ПустаяСтрока(ОтчетСКДМакет) Тогда
			ТексОшибки = НСтр("ru = 'Некорректно задан макет схемы компоновки данных'");    
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТексОшибки,,"СКДМакет");
		Иначе
			КомандаЗаполнитьПараметрыСКД();
		КонецЕсли;
		
	ИначеЕсли ТипОтчета = 1 Тогда
		
		СтрокаПараметров = СтрЗаменить(СокрЛП(ОтчетЗапросТекстЗапроса), Символы.ПС, " ");
		СтрокиПараметров = СтрЗаменить(СтрокаПараметров, "&", Символы.ПС);
		КоличествоСтрок = СтрЧислоСтрок(СтрокиПараметров);
		Для Индекс = 2 По КоличествоСтрок Цикл
			
			ИмяПараметра = СтрПолучитьСтроку(СтрокиПараметров, Индекс);
			
			ПоискПараметраСлуж(ИмяПараметра, " ");
			ПоискПараметраСлуж(ИмяПараметра, ">");
			ПоискПараметраСлуж(ИмяПараметра, "<");
			ПоискПараметраСлуж(ИмяПараметра, "=");
			ПоискПараметраСлуж(ИмяПараметра, "(");
			ПоискПараметраСлуж(ИмяПараметра, ")");
			ПоискПараметраСлуж(ИмяПараметра, "{");
			ПоискПараметраСлуж(ИмяПараметра, "}");
			ПоискПараметраСлуж(ИмяПараметра, ",");
			ПоискПараметраСлуж(ИмяПараметра, "-");
			ПоискПараметраСлуж(ИмяПараметра, "+");
			
			ИмяПараметра = СокрЛП(ИмяПараметра);

			Если ПараметрыОтчета.НайтиСтроки(Новый Структура("ИмяПараметра", ИмяПараметра)).Количество() = 0 Тогда
				стзПараметрыОтчета = ПараметрыОтчета.Добавить();
				стзПараметрыОтчета.ИмяПараметра = ИмяПараметра;
				стзПараметрыОтчета.Использовать = Истина;
				стзПараметрыОтчета.ТипПараметра = Элементы.ПараметрыОтчетаТипПараметра.СписокВыбора[0];
				ПараметрыОтчетаИзменены = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Конецесли;

	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	// для исключения совпадений наименований без крайних пробелов
	Наименование = СокрЛП(Наименование); 
	
	// Проверка заполнения
	Если ПустаяСтрока(Наименование) Тогда
		// Не заполнено наименование
		ВывестиОшибкуЗаполнения(Элементы.Наименование);
		Возврат;
			
	КонецЕсли;
	
	Если ПараметрыОтчетаИзменены И ЗначениеЗаполнено(IDМТ) И Выгружать Тогда
		Оповещение = Новый ОписаниеОповещения("КомандаЗаписатьИЗакрытьРезультат", ЭтотОбъект);
		ПоказатьВопрос(Оповещение,
						НСтр("ru = 'Параметры отчета были изменены. Существующие очеты в мобильном устройстве будут не актуальны. Продолжить сохранение ?'"),
						РежимДиалогаВопрос.ДаНет,
						, 
						КодВозвратаДиалога.Да, 
						НСтр("ru = 'Сохранение'")
						); 
	Иначе
		КомандаЗаписатьИЗакрытьСохранение();
	КонецЕсли;  	
		
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Хранилище

// Процедура считывает объект (список торговых точек) из хранилища значений. 
&НаСервере
Процедура ПрочестьОбъектИзХранилища(КлючID) 
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ID = КлючID;
	СтррОбъект = ТекОбъект.ВОЭлементЗагрузить(СтррКонтекст.ВО, ID);
	Если СтррОбъект = Неопределено Тогда // создание нового элемента справочника
		Наименование = НСтр("ru = 'Новое имя'");
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Истина;
	Иначе
		ТекОбъект.ЗаполнитьРеквизитыОбъектаИзСтруктуры(ЭтотОбъект, СтррОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбъектВХранилищеКлиент()
	
	МодульМТ.ВОПередЗаписьюЭлемента(ЭтотОбъект);
	
	СохранитьОбъектВХранилище();
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Ложь;
	Оповестить("АПЭлементСправочникаЗаписан_" + СтррКонтекст.ВО.ВидОбъекта, ID);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОбъектВХранилище()

	СтррОбъект = ПолучитьСтруктуруВО();
	
	Если ПараметрыОтчетаИзменены Тогда  
		СтррОбъект.IDМТ = Новый УникальныйИдентификатор();  // Для актуализации параметров в МТ;
	КонецЕсли;
		
	РеквизитФормыВЗначение("Объект").ВОЭлементСохранить(СтррКонтекст.ВО, ID, СтррОбъект);	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруВО()
	
	//@skip-check structure-consructor-too-many-keys
	СтррОбъект = Новый Структура("	IDМТ,
								|	Статус, 
								|	Наименование,
								|	ВыводитьОтбор,
								|	ВыводитьПараметры,
								|	Выгружать,
								|	Комментарий,
								|	ОтчетСКДМакет,
								|	ОтчетЗапросТекстЗапроса,
								|	ОтчетСКДВариантОтчета,
								|	ОтчетСКДМакет,
								|	ОчетПрограммаТекстПрограммы,
								|	ТипОтчета
								|"); 	
	
	//@skip-check form-self-reference
	ЗаполнитьЗначенияСвойств(СтррОбъект, ЭтаФорма);
	
	//ПараметрыОтчета
	ТЗПараметрыОтчета 	= РеквизитФормыВЗначение("ПараметрыОтчета");
	Если ПараметрыОтчетаИзменены Тогда
		// ПараметрыОтчетаИзменены Используется для актуализации параметров в МТ.
		ТЗТипыПараметров 	= РеквизитФормыВЗначение("Объект").ДопОтчетТипыПараметров();
		Для Каждого стзПараметрыОтчета Из ТЗПараметрыОтчета Цикл
			// АтрибутGUID. 
			стзПараметрыОтчета.АтрибутGUID = Новый УникальныйИдентификатор();
			//ТипПараметраGUID
			стзТипыПараметров = ТЗТипыПараметров.Найти(стзПараметрыОтчета.ТипПараметра, "Представление");
			Если стзТипыПараметров <> Неопределено Тогда
				стзПараметрыОтчета.ТипПараметраGUID = стзТипыПараметров.Идентификатор;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	СтррОбъект.Вставить("ПараметрыОтчета", ТЗПараметрыОтчета);
	
	Возврат СтррОбъект;	
КонецФункции

// СлужебныеПроцедурыИФункции_Хранилище
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Обработчики

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		КомандаЗаписатьИЗакрыть(Неопределено);
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		//@skip-check form-self-reference
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрытьРезультат(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		КомандаЗаписатьИЗакрытьСохранение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОтчетаПередНачаломИзмененияЗаглушкаОповещения(Параметры) Экспорт
	//Звглушка оповещения	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Обработчики
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

&НаСервере
Функция ВывестиОтчет(ТабличныйДокументРезультат)

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	СтррОбъект = ПолучитьСтруктуруВО();                             
	
	Возврат ТекОбъект.ВывестиОтчет(ТабличныйДокументРезультат, СтррОбъект);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтчетЗапросТекстЗапросаПоУмолчанию()
	
	ОтчетЗапросТекстЗапроса = "ВЫБРАТЬ
	                          |	ИмяСправочника.Поле1 КАК Представление1,
	                          |	ИмяСправочника.Поле2 КАК Представление2,
	                          |	ИмяСправочника.Поле3 КАК Представление3,
	                          |	ИмяСправочника.Поле4 КАК Представление4
	                          |ИЗ
	                          |	Справочник.ИмяСправочника КАК ИмяСправочника
	                          |ГДЕ
	                          |	ИмяСправочника.Поле1 = &Параметр1";
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОчетПрограммаТекстПрограммыПоУмолчанию()
	
	ОчетПрограммаТекстПрограммы = "	
	|	//ШАБЛОН ПРОГРАММЫ: 
	|	
	|	//1. Глобальные параметры
	|	//1.1 Параметры
	|	//	сзПараметры					- СписокЗначений	- Список значений из вкладки Параметры
	|	//	сзПараметры.Значение		- Любой				- Значение параметра
	|	//	сзПараметры.Представление   - Строка			- Имя параметра
	|	//	сзПараметры.Пометка         - Булево			- Признак ""Использовать""
	|	//1.2 Результат
	|	//	ТабличныйДокументРезультат  - ТабличныйРезультат - Результат выполнения программы, при выгрузке данные из параметра будут сконвертированы в МУ. 
	|	                                                   
	|	//2. Макет схемы компоновки данных
	|	СхемаКомпоновкиДанных = Отчеты.ЛюбойОтчет.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	|	
	|	//3. ВариантыНастроек 
	|	ВариантыНастроек = СхемаКомпоновкиДанных.НастройкиПоУмолчанию; // Или другой: СхемаКомпоновкиДанных.ВариантыНастроек.Найти(""СвойВариант"");	
	|	
	|	//3. КомпоновщикНастроек
	|	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	|	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	|	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантыНастроек);	
	|	
	|	//4. Установка параметров. сзПараметры - глобальный параметр                                              
	|	Для Каждого Элемент Из сзПараметры Цикл 
	|		ПараметрОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Элемент.Представление));
	|		Если ПараметрОтчета <> Неопределено Тогда
	|			ПараметрОтчета.Использование = Элемент.Пометка;
	|			ПараметрОтчета.Значение 	 = Элемент.Значение;
	|		КонецЕсли;
	|	КонецЦикла;
	|	
	|	//5. Вывод значений параметров в отчет (шапка отчета)
	|	ПараметрВыводитьПараметры = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""ВыводитьПараметрыДанных""));
	|	ПараметрВыводитьПараметры.Использование = Истина;
	|	ПараметрВыводитьПараметры.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить; //Или ТипВыводаТекстаКомпоновкиДанных.НеВыводить
	|	
	|	//6. Вывод значений отбора в отчет (шапка отчета)
	|	ПараметрВыводитьОтбор = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(""ВыводитьОтбор""));
	|	ПараметрВыводитьОтбор.Использование = Истина;
	|	ПараметрВыводитьОтбор.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить; //Или ТипВыводаТекстаКомпоновкиДанных.НеВыводить
	|	
	|	//7. КомпоновщикМакетаКомпоновкиДанных 
	|	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	|	Настройки = КомпоновщикНастроек.Настройки;
	|	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	|	
	|	//8. ПроцессорКомпоновкиДанных
	|	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	|	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,,Истина);
	|	
	|	//9. Результат выполнения. ТабличныйДокументРезультат - глобальный параметр
	|	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	|	ПроцессорВывода.УстановитьДокумент(ТабличныйДокументРезультат); 
	|	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	|	";
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПараметраСлуж(СтрокаПараметр, СимволПоиска)
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);
			
	//@skip-check use-non-recommended-method
	ИндексОкончание = Найти(СтрокаПараметр, СимволПоиска);
	Если ИндексОкончание > 0 Тогда
		СтрокаПараметр = Лев(СтрокаПараметр, (ИндексОкончание - 1));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КомандаЗаполнитьПараметрыСКД()
                                                
	//2. Макет схемы компоновки данных
	Попытка
		УстановитьБезопасныйРежим(Истина);
		СхемаКомпоновкиДанных = Вычислить(ОтчетСКДМакет);
	Исключение
		ТексОшибки = НСтр("ru = 'Ошибка получения макета СКЛ. Описание:'") + " " + ОписаниеОшибки(); 
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТексОшибки,,"СКДМакет");
		Возврат;
	КонецПопытки;
	
	//3. ВариантыНастроек 
	ВариантыНастроек = Неопределено;
	Если ЗначениеЗаполнено(ОтчетСКДВариантОтчета) И ТипЗнч(ОтчетСКДВариантОтчета) = Тип("Строка") Тогда
		ВариантыНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ОтчетСКДВариантОтчета);	
	КонецЕсли;	
	Если ВариантыНастроек = Неопределено Тогда
		ВариантыНастроек = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Иначе
		ВариантыНастроек = ВариантыНастроек.Настройки;
	КонецЕсли;
	
	//3. КомпоновщикНастроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантыНастроек);	
	
	//4. Определение уже добавленных параметров                                             
	МПараметрыУжеДобавленнве = Новый Массив;
	Для Каждого стзПараметрыОтчета Из ПараметрыОтчета Цикл
		МПараметрыУжеДобавленнве.Добавить(Новый ПараметрКомпоновкиДанных(стзПараметрыОтчета.ИмяПараметра));
	КонецЦикла;	
	
	//5. Добавляем новые параметры
	ПараметрОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	Для Каждого Элемент Из ПараметрОтчета Цикл
		Если МПараметрыУжеДобавленнве.Найти(Элемент.Параметр) = Неопределено Тогда
			стзПараметрыОтчета = ПараметрыОтчета.Добавить();
			стзПараметрыОтчета.ИмяПараметра 		= Строка(Элемент.Параметр);
			стзПараметрыОтчета.Использовать 		= Элемент.Использование;
			//стзПараметрыОтчета.ЗначениеПараметра 	= Элемент.Значение;
			стзПараметрыОтчета.ТипПараметра 		= Элементы.ПараметрыОтчетаТипПараметра.СписокВыбора[0];
			ПараметрыОтчетаИзменены = Истина;
		КонецЕсли;		
	КонецЦикла; 	                         	
		
КонецПроцедуры                                   

&НаСервере
Функция ПолучитьИмяРеквизитаЭлемента(ИмяЭлемента)
	
	Возврат Элементы[ИмяЭлемента].ПутьКДанным;
КонецФункции 

&НаСервере
Функция ПолучитьЗаголовокЭлементаИзРеквизита(ИмяЭлемента)
	
	ИмяРеквизита = ПолучитьИмяРеквизитаЭлемента(ИмяЭлемента); 
	//@skip-check form-self-reference
	ВсеРквизмты	 = ЭтаФорма.ПолучитьРеквизиты();
	
	Для Каждого Реквизит Из ВсеРквизмты Цикл
		Если Реквизит.Имя = ИмяЭлемента Тогда
			Возврат Реквизит.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяЭлемента; //Ошибка, заглушка. 
КонецФункции

&НаКлиенте
Функция ПолучитьЗаголовокЭлемента(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Заголовок) Тогда
		Возврат Элемент.Заголовок;
		
	Иначе
		Возврат ПолучитьЗаголовокЭлементаИзРеквизита(Элемент.Имя);	 
		
	КонецЕсли;		
	
КонецФункции

&НаКлиенте
Процедура КомандаЗаписатьИЗакрытьСохранение()
	
	Если Не ЗначениеЗаполнено(ID) Тогда 
		ID = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	СохранитьОбъектВХранилищеКлиент();
	//@skip-check form-self-reference
	ЭтаФорма.Модифицированность = Ложь;
	Закрыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОшибкуЗаполнения(Элемент, ИнфАктивна = Ложь)
	
	Если Элемент = Элементы.ДляВсехАгентов Тогда
		ТекстОшибки = НСтр("ru = 'У команды установлен признак ""Активна"". Для выгрузки необходимо заполнить агентов или отметить поле: ""'") + ПолучитьЗаголовокЭлемента(Элемент);
		//@skip-check object-deprecated
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	ИначеЕсли ИнфАктивна Тогда
		ТекстОшибки = НСтр("ru = 'У команды установлен признак ""Активна"". Для выгрузки необходимо заполнить поле: ""'") + ПолучитьЗаголовокЭлемента(Элемент);
	Иначе
		ТекстОшибки = НСтр("ru = 'Заполните поле'") + " " + ПолучитьЗаголовокЭлемента(Элемент);
	КонецЕсли;	
		
	ИмяРеквизита = ПолучитьИмяРеквизитаЭлемента(Элемент.Имя);
	
	//@skip-check object-deprecated
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьСтраничек()
	
	Элементы.ГруппаСтраницаНастройкиСКД.Видимость 	= ?(ТипОтчета = 0, Истина, Ложь);
	Элементы.ГруппаСтраницаТекстЗапроса.Видимость 	= ?(ТипОтчета = 1, Истина, Ложь);
	Элементы.ГруппаСтраницаТекстПрограммы.Видимость = ?(ТипОтчета = 2, Истина, Ложь);
	Элементы.КомандаЗаполнить.Видимость 			= ?(ТипОтчета < 2, Истина, Ложь);

	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВариантОтчета()
	
	Элементы.СКДВариантОтчета.СписокВыбора.Очистить();
	
	Попытка
		УстановитьБезопасныйРежим(Истина);
		СхемаКомпоновкиДанных = Вычислить(ОтчетСКДМакет);
	Исключение
		Элементы.СКДВариантОтчета.СписокВыбора.Добавить("НастройкиПоУмолчанию", "НастройкиПоУмолчанию");
		ОтчетСКДВариантОтчета = "НастройкиПоУмолчанию";
		Возврат;     
	КонецПопытки;
	
	Для Каждого Эдемент Из СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		Элементы.СКДВариантОтчета.СписокВыбора.Добавить(Эдемент.Имя, Эдемент.Имя);
	КонецЦикла;
	
	Если Элементы.СКДВариантОтчета.СписокВыбора.Количество() = 0 Тогда
		Элементы.СКДВариантОтчета.СписокВыбора.Добавить("НастройкиПоУмолчанию", "НастройкиПоУмолчанию");
	КонецЕсли;
	
	ОтчетСКДВариантОтчета = Элементы.СКДВариантОтчета.СписокВыбора[0].Значение;
	
	Если Элементы.СКДВариантОтчета.СписокВыбора.НайтиПоЗначению("НастройкиПоУмолчанию") = Неопределено Тогда
		Элементы.СКДВариантОтчета.СписокВыбора.Добавить("НастройкиПоУмолчанию", "НастройкиПоУмолчанию");
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСписокТипПараметра()
	
	ТЗТипыПараметров = РеквизитФормыВЗначение("Объект").ДопОтчетТипыПараметров();
	
	Для Каждого стзТипыПараметров Из ТЗТипыПараметров Цикл
		Элементы.ПараметрыОтчетаТипПараметра.СписокВыбора.Добавить(стзТипыПараметров.Представление, стзТипыПараметров.Представление);
	КонецЦикла;	
	
КонецПроцедуры	

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти 
