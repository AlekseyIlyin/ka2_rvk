#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульК;  // общий клиентский модуль

// ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	ВосстановитьНастройкиСервер();
	
	Период.Вариант 		 = ВариантСтандартногоПериода.ПроизвольныйПериод;
	//@skip-check use-non-recommended-method
	Период.ДатаНачала 	 = НачалоДня(ТекущаяДата());
	//@skip-check use-non-recommended-method
	Период.ДатаОкончания = ТекущаяДата();
	
	ОбновитьДеревоЖурнала();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "АПНастройкиСброшены" Тогда
		
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "АППроверкаУникальностиЗапускаОбработкиОбмена" Тогда
		
		Если Параметр <> СтррКонтекст.ВХОбщиеПараметры Тогда // второй экземпляр обработки справшивает - уже открыта обработка или нет
			Оповестить("АПЗакрытьОбработкуОбменДанными", Параметр); // шлем событие закрытия обработки с конкретным ключем сеанса
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВыбАгентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтррПараметры = Новый Структура("ПараметрыВыбора", Новый Структура("Пользователь", Объект.ВыбАгент));
	Оповещение = Новый ОписаниеОповещения("ВыбАгентВыборЗавершение", ЭтотОбъект);
	//@skip-check form-self-reference
	МодульК().ОткрытьФормуОбработки("ВыборАгента", СтррПараметры, ЭтаФорма.КлючУникальности, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВыбАгентПриИзменении(Элемент)
	
	ОбновитьДеревоЖурнала();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ОбновитьДеревоЖурнала();
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЖурнал

&НаКлиенте
Процедура ЖурналПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	СтрокаД = Элементы.Журнал.ТекущиеДанные;
	Если СтрокаД <> Неопределено И ЗначениеЗаполнено(СтрокаД.Документ) И Элемент.ТекущийЭлемент.Имя = "ЖурналДокумент" Тогда 
		ПоказатьЗначение(Неопределено, СтрокаД.Документ); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаД = Элементы.Журнал.ТекущиеДанные;
	Если СтрокаД = Неопределено Тогда
		Возврат;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ЖурналПредставление" Тогда
		Если ЗначениеЗаполнено(СтрокаД.Представление) И ЗначениеЗаполнено(СтрокаД.Пользователь) Тогда
			МодульК().КомандаВыполнить("ПоказатьНастройкиАгентов");
			Оповестить("АПНастройкиАгентов_Оповещение", Новый Структура("Пользователь", СтрокаД.Пользователь));
		КонецЕсли; 
	ИначеЕсли ТипЗнч(СтрокаД.Документ) = Тип("Строка") Тогда // нужно показать виртуальный документ
		Если НЕ ЭтоТиповойДокументКонфигурации(СтрокаД.ВидДокумента) Тогда
			МодульК().ВООткрытьФорму(СтрокаД.ВидДокумента, СтрокаД.СсылкаМУ);
		КонецЕсли;	                                                 				
	Иначе
		ПоказатьЗначение(Неопределено, СтрокаД.Документ);
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьЖурнал(Команда)
	
	ВосстановитьНастройкиСервер();
	ОбновитьДеревоЖурнала();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернуть(Команда)
	
	Для Каждого СтрокаД Из Журнал.ПолучитьЭлементы() Цикл 
		Элементы.Журнал.Развернуть(СтрокаД.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвернуть(Команда)
	
	Для Каждого СтрокаД Из Журнал.ПолучитьЭлементы() Цикл 
		Элементы.Журнал.Свернуть(СтрокаД.ПолучитьИдентификатор());
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_ХранилищеНастроек

// #МУ#
&НаСервере
Процедура ВосстановитьНастройкиСервер(Реквизиты = "")

	Если Реквизиты = "" Тогда
		Реквизиты = "НастройкиАгентов,МобильныеУстройства";
	КонецЕсли;
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ВосстановитьЗначенияНастроекОбработки(Реквизиты);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	Объект.НастройкиАгентов.Сортировать("Пользователь");

КонецПроцедуры

// СлужебныеПроцедурыИФункции_ХранилищеНастроек
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Подтверждения

// Функция возвращает вид документа в МТ (его строковое представление).
// Параметры:
// 		ТекОбъект 	- Произвольный - объект обработки (результат функции РеквизитФормыВЗначение("Объект"))
// 		ИдВидДокументаМТ - УникальныйИдентификатор - идентификатор вида документа в МТ (GUID)
// 		Кэш 		- Соответствие Из Строка - кэш для ускорения получения результата
// Возвращаемое значение:
//  	Строка  -  строковое представление вида документа в МТ.
//  	
&НаСервере
Функция ВидДокументаВМТ(ТекОбъект, ИдВидДокументаМТ, Кэш)

	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Результат = Кэш.Получить(ИдВидДокументаМТ);
	Если Результат = Неопределено Тогда
		Результат = ТекОбъект.ВидОбъектаПоИдентификатору(ИдВидДокументаМТ, Ложь, "Документ");
		Кэш.Вставить(ИдВидДокументаМТ, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
&НаСервере
Процедура ОбновитьДеревоЖурнала()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Дерево = ДанныеФормыВЗначение(Журнал, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	
	КэшВидовДокументов = Неопределено;

	Если ЗначениеЗаполнено(Объект.ВыбАгент) Тогда
		МАгенты = Объект.НастройкиАгентов.НайтиСтроки(Новый Структура("Пользователь", Объект.ВыбАгент));
		Если МАгенты.Количество() <> 0 Тогда
			ВывестиПодтверждения(МАгенты[0], ТекОбъект, Дерево, КэшВидовДокументов);
		КонецЕсли;
	Иначе
		Для Каждого Агент Из Объект.НастройкиАгентов Цикл
			ВывестиПодтверждения(Агент, ТекОбъект, Дерево, КэшВидовДокументов);
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "Журнал");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПустойИдентификатор(GUID)

	Возврат (ПустаяСтрока(GUID) Или СокрЛП(GUID) = "00000000-0000-0000-0000-000000000000");

КонецФункции

&НаСервере
Процедура ВывестиПодтверждения(Агент, ТекОбъект, Дерево, КэшВидовДокументов)
	
	Если ЭтоПустойИдентификатор(Агент.СсылкаМУ) Тогда
		Возврат;
	КонецЕсли;
	
	ММУ = Объект.МобильныеУстройства.НайтиСтроки(Новый Структура("ID", Агент.СсылкаМУ));
	ПредставлениеМУ = ?(ММУ.Количество() = 0, "?", ММУ[0].Наименование);
	
	ДатаНачала 		= Период.ДатаНачала;
	ДатаОкончания 	= Период.ДатаОкончания;
	
	Если ДатаОкончания = '00010101' Тогда
		//@skip-check use-non-recommended-method
		ДатаОкончания = КонецГода(ДобавитьМесяц(ТекущаяДата(), 36));
	КонецЕсли;
	
	ТЗн = ТекОбъект.ПодтвержденияСДОткрыть("Документы", Агент.СсылкаМУ, Истина);
	Если ТЗн.Количество() > 0 Тогда
		
		ТЗн.Сортировать("Дата Убыв, ДатаДокумента Убыв");
		
		ВеткаД = Дерево.Строки.Добавить();
		ВеткаД.Пользователь  = Агент.Пользователь;
		ВеткаД.Представление = ПредставлениеМУ + " (" + Строка(Агент.Пользователь) + ")";
		СтрокиВетки = ВеткаД.Строки;
		
		Для Каждого СтрокаТ Из ТЗн Цикл
			
			Дата = СтрокаТ.Дата;
			Если Дата < ДатаНачала Или Дата > ДатаОкончания Тогда
				Продолжить;
			КонецЕсли;
			
			ВидДокументаВМТ = ВидДокументаВМТ(ТекОбъект, СтрокаТ.ИдВидДокументаМТ, КэшВидовДокументов);
			
			СтрокаД 	 		= СтрокиВетки.Добавить();
			СтрокаД.Дата 		= Дата;
			СтрокаД.СсылкаМУ	= Новый УникальныйИдентификатор(СтрокаТ.Идентификатор);
			СтрокаД.ВидДокумента 			  = СтрокаТ.ВидДокумента;
			СтрокаД.ВидДокументаПредставление = СтрокаТ.ВидДокумента + " (" + ВидДокументаВМТ + ")";
			
			Если ТекОбъект.ВДокЭтоВиртуальныйДокумент(СтрокаТ.ВидДокумента) Тогда      
				Если СтрокаТ.ДатаДокумента <> '00010101' Тогда
					ДатаДокументаВМУ = СтрокаТ.ДатаДокумента;
				Иначе
					ДатаДокументаВМУ = Формат(Дата, "ДЛФ=Д");
				КонецЕсли;
			    СтрокаД.Документ = ВидДокументаВМТ + " от " + ДатаДокументаВМУ;
			Иначе
				СтрокаД.Документ = Документы[СтрокаТ.ВидДокумента].ПолучитьСсылку(СтрокаД.СсылкаМУ);
				Если СтрокаД.Документ.Пустая() ИЛИ СтрокаД.Документ.ПолучитьОбъект() = Неопределено Тогда
					СтрокаД.Документ = "Документ не найден.";
				КонецЕсли;
			КонецЕсли;
			
			СтрокаД.Пользователь = Агент.Пользователь;
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Подтверждения
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции 

&НаСервере
Функция ЭтоТиповойДокументКонфигурации(СтрВидДокумента) 
	
	Возврат Метаданные.Документы.Найти(СтрВидДокумента) <> Неопределено	
	
КонецФункции

&НаКлиенте
Процедура ВыбАгентВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Пользователи") Тогда
		Объект.ВыбАгент = Результат;	
		ОбновитьДеревоЖурнала();
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

// СлужебныеПроцедурыИФункции
#КонецОбласти