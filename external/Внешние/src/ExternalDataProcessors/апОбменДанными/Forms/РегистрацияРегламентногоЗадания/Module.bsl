#Область ОписаниеПеременных

&НаКлиенте
Перем ГМодульК;  // общий клиентский модуль

// ГлобальныеПеременные
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.КонтекстФормыИнициализировать(СтррКонтекст, Параметры);
	
	СтррКонтекст.Вставить("ИмяФайла", ТекОбъект.ИмяФайлаОбработки()); // имя файла обработки для установки отбора
	СтррКонтекст.Вставить("СправочникДополнительныеОтчетыИОбработкиСиноним", Метаданные.Справочники.ДополнительныеОтчетыИОбработки.Синоним);
	СтррКонтекст.Вставить("ИдентификаторЗадания"); // идентификатор регламентного задания, связанного с обработкой, проставляется в процедуре ПроверитьСтатусОбработки()
	
	СтррИконкиСтатуса = Новый Структура("Пусто,ОК,Внимание", 0, 1, 2);
	стррКонтекст.Вставить("ИконкиСтатуса", СтррИконкиСтатуса);
	
	Элементы.СправочникУТДополнительныеОтчетыИОбработки.Заголовок = 
		СтрШаблон_(НСтр("ru = 'Справочник ""%1""'"), СтррКонтекст.СправочникДополнительныеОтчетыИОбработкиСиноним);
	Элементы.ОбработкаУТРегламентныеИФоновыеЗадания.Заголовок = НСтр("ru = 'Регламентное задание'");		
	
	ПроверитьСтатусОбработки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ГруппаКоманднаяПанель.ЦветФона = СтррКонтекст.Цвета.ФонРаздела;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_РегламентныеЗадания" Тогда // оповещение от УТ о записи регламентного задания
		ПроверитьСтатусОбработки();
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СправочникУТДополнительныеОтчетыИОбработкиНажатие(Элемент)
	
	СтррПараметры = Новый Структура("Отбор", Новый Структура("ИмяФайла", СтррКонтекст.ИмяФайла));
	//@skip-check use-non-recommended-method
	Форма = ПолучитьФорму("Справочник.ДополнительныеОтчетыИОбработки.Форма.ФормаСписка", СтррПараметры,, "АПОтбор_ИмяФайла");
	Форма.Автозаголовок = Ложь;
	Форма.Заголовок = СтрШаблон_(НСтр("ru = '%1 (отбор ИмяФайла = ""%2"")'"),
		СтррКонтекст.СправочникДополнительныеОтчетыИОбработкиСиноним, СтррКонтекст.ИмяФайла);
	Форма.Открыть();
	ОчиститьСообщения();		
	//@skip-check use-non-recommended-method
	Сообщить(СтрШаблон_(НСтр("ru = 'Включен отбор по условию: ИмяФайла = ""%1""'"), СтррКонтекст.ИмяФайла));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУТРегламентныеИФоновыеЗаданияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(СтррКонтекст.ИдентификаторЗадания) Тогда
		СтррПараметры = Новый Структура;
		СтррПараметры.Вставить("Идентификатор", СтррКонтекст.ИдентификаторЗадания);
		СтррПараметры.Вставить("Действие",      "Изменить");
		ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", СтррПараметры, ЭтотОбъект);	
	Иначе
		ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма");
	КонецЕсли; 
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьНастройкиМодуля(Команда)
	
	МодульК().КомандаВыполнить(Команда, ЭтотОбъект);
	СтррПараметры = Новый Структура("Закладка", "ГруппаДополнительно");
	Оповестить("АПНастройкиМодуля_ПоказатьНаФорме", СтррПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСтатусы(Команда)

	Попытка
		ПроверитьСтатусОбработки();
	Исключение
		ПоказатьПредупреждение(Неопределено, "Запущен второй экземпляр обработки в фоновом режиме. Закройте текущую обработку или ее фоновый сеанс (отмените регламентное задание).");		
	КонецПопытки;
	Оповестить("АПОбновленыНастройкиФоновогоЗадания");
	
КонецПроцедуры

// ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Прочие

&НаКлиенте
Функция МодульК()

	Если ГМодульК = Неопределено Тогда
	    //@skip-check use-non-recommended-method
	    ГМодульК = ПолучитьФорму(СтррКонтекст.ПутьКФорме + "МодульОбщий", СтррКонтекст);
	КонецЕсли; 
	
	Возврат ГМодульК;

КонецФункции 

// СлужебныеПроцедурыИФункции_Прочие
#КонецОбласти 

&НаСервере
Процедура ПроверитьСтатусОбработки()

	СтррРезультат = РеквизитФормыВЗначение("Объект").ГотовностьФоновогоЗадания();
	
	СтатусДополнительныеОтчетыИОбработки = СтррРезультат.РегистрацияОбработки.Иконка;
	Элементы.НадписьДополнительныеОтчетыИОбработки.Заголовок = СтррРезультат.РегистрацияОбработки.Описание;
	Элементы.НадписьДополнительныеОтчетыИОбработки.ЦветТекста 
		= ?(СтррРезультат.РегистрацияОбработки.Готово, СтррКонтекст.Цвета.ТекстПояснение, СтррКонтекст.Цвета.ТекстВнимание);
	
	СтатусРегламентныеИФоновыеЗадания = СтррРезультат.РегламетноеЗадание.Иконка;
	Элементы.НадписьРегламентныеИФоновыеЗадания.Заголовок = СтррРезультат.РегламетноеЗадание.Описание;
	Элементы.НадписьРегламентныеИФоновыеЗадания.ЦветТекста 
		= ?(СтррРезультат.РегламетноеЗадание.Готово, СтррКонтекст.Цвета.ТекстПояснение, СтррКонтекст.Цвета.ТекстВнимание);
	СтррКонтекст.ИдентификаторЗадания = СтррРезультат.РегламетноеЗадание.ИдентификаторЗадания;
			
КонецПроцедуры

// СлужебныеПроцедурыИФункции
#КонецОбласти
