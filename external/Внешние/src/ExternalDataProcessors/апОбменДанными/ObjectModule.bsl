// Описание модуля объекта (обработки).      
//
// *** Префиксы в именах процедур и функций.                          
//
//	  * ВО... - виртуальные объекты (виртуальные справочники и документы). Виртуальные объекты - это имитация существования в конфигурации
//				справочников и документов, на самом деле отсутствующих в конфигурации. 
//				Примеры виртуальных объектов:
//				- Справочники: "_РезультатыПосещений", "_ШаблоныАнкет";                                  
//				- Документы: "_Мерчендайзинг", "_Посещение".
//	  * ВДок...	- виртуальные документы (см. описание "ВО...")
//	  * ВСпр... - виртуальные справочники (см. описание "ВО...")
//	  * МенеджерВТ... - создание временных таблиц запроса для выгрузки данных в МУ. Используется для отборов выгрузки данных в соответствии
//				с настройками торгового агента.
//	  * СД... - служебные данные - сохранение, чтение. Опционально служебные данные могут сохраняться в файлах или хранилище данных.
//				В служебных данных хранятся объекты в виде структур, например, треки передвижений агентов (это структура с одним из
//				свойств типа ТаблицаЗначений).
//	  * СТЗ... - служебные таблицы значений. Чтение из хранилища, изменение, сохранение. Служебные таблицы используются для 
//				сопоставления элементов справочников между УТ и МТ. В таблицах должны быть обязательные колонки "Идентификатор" (для МТ)
//				и "Ссылка" (ссылка на элемент сопоставляемого справочника в УТ). Применяется, когда требуется сопосавить один общий элемент
//				справочника в УТ с несколькими элементами справочника в МТ. Например, общую характеристику для вида номенклатуры.
//	  * Структура... - дополнительные процедуры и функции для работы с объектом типа "Структура".
//
//
// *** Принцип загрузки фотографий, созданных в МУ. 
//
// 		Из МУ выгружается архив To1C.zip. В архиве содержатся файлы:
// 			- ToCDB.xml - файл данных (созданные в МУ справочники, документы, ссылки на фотографии);
// 			- PhotosToCDB.zip (опционально) - архив фотографий, созданных в МУ. 
// 		Примеры названий файлов фотографий из архива PhotosToCDB.zip:
//			- B13EBE19-67E2-407F-698A-B63563D8341C.jpg
//			- B13EDEFB-B7E2-4AC4-954F-480B8CC29E53.jpg
// 			В качестве имени файла указывается строка формата GUID.
// 			Имя файла фотографии используется для привязки фотографии по ее идентификатору GUID к элементу справочника МТ "*ФотоДокументов" 
// 			(в этом модуле если имя справочника начинается со знака "*" - это означает, что аналогичный справочник есть в МТ, но отсутствует в УТ).
// 		В файле ToCDB.xml одна и та же фотография указывается в двух местах:
// 			- В ветке "CATALOG" выгрузки справочника "*ФотоДокументов" (GUID справочника в МТ - "05ea7926-febb-4d82-97fc-19294dd5dd29") -
//				в атрибуте ветки "A04".
// 			- В ветке "PICTURES" выгрузки описаний картинок (в атрибуте "GUID" - идентификатор фотографии, в атрибуте "FileName" - имя файла
// 				фотографии, как он указан в архиве PhotosToCDB.zip).
// 		
// 		Т.к. при выгрузке данных из УТ в МУ требуется подтверждать загруженные до этого данные, то для фотографий нужно:
// 			- подтверждать загрузку каждого элемента справочника "*ФотоДокументов";
// 			- подтверждать загрузку каждой фотографии из тэга "PICTURES".
// 			
// 		Загрузка в УТ фотографий из файлов ToCDB.xml и PhotosToCDB.zip происходит в 3 этапа:
// 			1. Функция ЗагрузитьФотографиюЭтап1() - 
// 				элементы справочника "*ФотоДокументов" загружаются в таблицу значений (ТЗ) ЗагружаемыеОбъекты.тзФотографии.
// 				На этом этапе в ТЗ хранятся ссылки на фотографии, имя же файла фотографий и описание фотографии - неизвестны.
//			2. Процедура ЗагрузитьФотографииЭтап2() -
// 				имена файлов фотографий и описания фотографий переносятся из узла "PICTURES" в ТЗ ЗагружаемыеОбъекты.тзФотографии.
//			3. Процедура ЗакончитьЗагрузкуФотографий() - 
// 				файлы фотографий из архива PhotosToCDB.zip загружаются в БД УТ и создаются элементы справочников
// 				вида "<ВидДокумента>ПрисоединенныеФайлы", например - "ЗаказКлиентаПрисоединенныеФайлы" - для фотографий,
// 				которые в МУ создавались и закреплялись за документом "ЗаказКлиента".
// 				Данные для генерации элементов справочников и ссылок на фотографии берутся из ТЗ ЗагружаемыеОбъекты.ТЗФотографии.
//
// 		Процедура ПодтвержденияСохранитьВсе() - после 3 этапов загрузки фотографий сохраняются подтверждения фотографий для будущей
//			отправкb подтверждений в МУ при выгрузке данных из УТ в МУ.
//			Подтверждения сохраняются в ТЗ ТЗPictures.
//		    В процедуре учитывается состояние флажка "Подтверждать все фотографии" (в "Общих настройках обмена" модуля, реквизит
//		    обработки ПодтверждатьВсеФотографии):
//			- Если выбран флажок, то подтверждаются все фотографии, которые встретились в тэге "PICTURES" файла ToCDB.xml
//			  (даже если файлы фотографий не загружались в УТ).
//			- Если снят флажок, то подтверждаются только те фотографии, для которых выполнено сразу два условия:
//			  	1. На фотографию ссылается элемент справочника "*ФотоДокументов".
//			  	2. Файл фотографии успешно загружен в БД УТ.


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных 
// глобальные переменные

	Перем ГБазоваяКонфигурация;		// базовая конфигурация 1С для текущей конфигурации, созданной на базе УТ (или сама конфигурация УТ)
	Перем ГКонфигурация;			// текущая конфигурация - краткое название (УТ_АП, УТ_UA, ERP, КА, и т.д.)
	Перем ГНастройкиОбменаЗагружены;// признак, что все настройки обмена загружены из хранилища (используется для загрузки и выгрузки данных в МУ / из МУ)
	Перем ГТаблицыВидовОбъектов;	// структура с таблицами значений идентификаторов видов справочников и документов в МТ и соответствия им в УТ
	Перем ГТаблицыПеречислений;		// структура с таблицами значений перечислений - соответствий перечислений УТ и элементам справочников МТ
	Перем ГСлужебныеДанныеВФайлах; 	// признак сохранения служебных данных модуля в файлах (если значение Истина) или в Хранилище (если Ложь)
	Перем ГКэшЧтенияКонстант; 		// кэш для ускорения чтения констант из БД
	Перем ГКэшСравненияКонфигураций;// используется для ускорения работы функции ПоколениеКонфигурации()
	Перем ГКэшРеквизитыОбъектов;	// используется для ускорения работы функции РеквизитОбъекта()
	Перем ГКэшСпискиОбъектов;		// кэш списков объектов (для выгрузки и отборов, например, массив организаций)
	Перем ГЭтоLinuxСервер; 			// для ускорения работы функции ЭтоLinuxСервер
	Перем ГДанныеОДополнительныхСвойствахДокументаДляМУ; // для ускорения записи дополнительных свойств документов при загрузке документов из МУ
	Перем ГВДокРеквизиты; 			// Соответствие - элементами соответствия являются массивы реквизитов виртуальных документов
	Перем ГВДокКэшТЗЖурналов; 		// кэш таблиц значений, хранящих заголовочную часть виртуальных документов	
	Перем ГВСпрКэшТЗСправочника;	// кэш таблиц значений, хранящих заголовочную часть элементов виртуальных справочников
	Перем ГВОКэшСвойств; 			// кэш системных свойств виртуальных объектов (виртуальных справочников и документов)
	Перем ГКэшСлужебныхТаблиц; 		// структура для служебных таблиц, выгрузка дубликатов характеристик итд. Используется при выгрузке служебных справочных данных в МУ.Автоматически сохраняет/восстанавливает таблицы из хранилища.
	Перем ГВидДокументаПоступлениеТоваровУслуг; // кэш результата функции ВидДокументаПоступлениеТоваровУслуг
	Перем ГИспользоватьНаправленияДеятельности; // кэш результата функции гИспользоватьНаправленияДеятельности
	Перем ГКэшАдресаДоставки;		// кэш адресов доставки
	Перем ГКэшНастроек;				// кэш значений настроек из Хранилища системных настроек
	
// ОписаниеПеременных
#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура заполняет значения структуры в соответствии со свойствами структуры. В качестве свойств структуры
// указываются виды объектов метаданных, например, "ЗаказКлиента".
// Параметры:
//   СтррВидыДокументов - Структура - структура со свойствами, соотетствующими видам объектов, например: 
//       Структура("ЗаказКлиента,РеализацияТоваровУслуг"). 
//   ВидМетаданных - Строка - название корневого вида метаданных, например "Документы".
Процедура ПолучитьПредставленияВидовОбъектов(СтррВидыДокументов, ВидМетаданных = "Документы") Экспорт

	Для Каждого Элемент Из СтррВидыДокументов Цикл
		СтррВидыДокументов[Элемент.Ключ] = Метаданные[ВидМетаданных][Элемент.Ключ].РасширенноеПредставлениеОбъекта;
	КонецЦикла;
	
КонецПроцедуры

// В конце значения передаваемой строки добавляется номер копии в круглых скобках.
// Параметры:
//   ИсхСтрока - Строка - исходная строка, в которую добавляется номер копии.
//      Примеры исходного значения папамеира и результата его преобразования: 
//      ~ "Клиент" -> "Клиент (копия)";
//      ~ "Клиент (копия)" -> "Клиент (копия 1)".
//        
Процедура ДобавитьВСтрокуНомерКопии(ИсхСтрока) Экспорт
	
	ИсхСтрока = СокрП(ИсхСтрока);
	ИндексН = СтрДлина(ИсхСтрока) + 1; // индекс начала
	Символ = Неопределено;
	Пока ИндексН > 0 И Символ <> "(" Цикл
		ИндексН = ИндексН - 1;		
		Символ = Сред(ИсхСтрока, ИндексН, 1);
	КонецЦикла; 
	
	СтрКопия = НСтр("ru = 'копия'");
	
	Если Символ = "(" И Сред(ИсхСтрока, ИндексН + 1, СтрДлина(СтрКопия)) = СтрКопия Тогда // есть в названии слово "(копия"
		СтрНомерКопии = "";
		ИндексК = СтрДлина(ИсхСтрока); // индекс конца
		Для Индекс = ИндексН По ИндексК Цикл
			Символ = Сред(ИсхСтрока, Индекс, 1);
			Код = КодСимвола(Символ);			
			Если Код = 41 Тогда // ")"
				Прервать;
			ИначеЕсли Код > 47 И Код < 58 Тогда
				СтрНомерКопии = СтрНомерКопии + Символ;
			КонецЕсли; 
		КонецЦикла;
		НомерКопии = ?(СтрНомерКопии <> "", Число(СтрНомерКопии), 1) + 1;
		ИсхСтрока = Лев(ИсхСтрока, ИндексН) + СтрКопия + " " + Строка(НомерКопии) + ")";
	Иначе
		ИсхСтрока = ИсхСтрока + " (" + СтрКопия + ")";
	КонецЕсли; 
	
КонецПроцедуры

// Функция возвращает макет обработки по его названию, или Неопределено.
// Параметры:
//   ИмяМакета - Строка
// Возвращаемое значение:
//   ТабличныйДокумент 
//   ТекстовыйДокумент или другой объект, который может быть макетом 	
Функция МакетОбработки(ИмяМакета) Экспорт

	Попытка
		Возврат ПолучитьМакет(ИмяМакета);
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

#Область ПрограммныйИнтерфейс_ОпределениеКонфигурации
// Аналогичные функции объявлены в клиентском модуле МодульОбщий (ПоколениеКонфигурации, СравнитьВерсии, ВерсияКонфигурации).

// Функция сравнивает идентификатор текущей конфигурации (в глобальной переменной ГБазоваяКонфигурация) с проверяемым 
// идентификатором конфигурации (в параметре СтрКонфигурация).
// Возвращает Истина, если идентификатор текущей конфигурации соответствует идентификатору проверяемой конфигурации и 
// операция сравнения версии (переданная вместе с идентификатором) верна.
// Формат идентификатора конфигурации: "P_V1.V2.V3.V4", где P - префикс конфигурации, V1-V4 - вресия конфигурации.
// Версия может быть неполной. Примеры: "УТ_11.1.15.120", "УТ_11.1"
// Параметры:
//   СтрКонфигурация - Строка - операция сравнения и идентификатор сравниваемой конфигурации вида 
//     "{Операция_сравнения}{Конфигурация}", например: ">=УТ_11.1"
//     Возможные значения секции "Операция_сравнения": "<", "=", ">", "<>", "<=", ">=".
//     Если секция пустая, то её значение приравнивается к "=".
// Возвращаемое значение:
// 	 Булево	
// 		
//@skip-check module-structure-method-in-regions
Функция ПоколениеКонфигурации(СтрКонфигурация)  
	
	Если ГКэшСравненияКонфигураций = Неопределено Тогда
		ГКэшСравненияКонфигураций = Новый Соответствие;
	КонецЕсли; 
	
	Значение = ГКэшСравненияКонфигураций.Получить(СтрКонфигурация);
	
	Если Значение = Неопределено Тогда
		
		//@skip-check use-non-recommended-method
		Индекс1 = Найти(ГБазоваяКонфигурация, "_");
		//@skip-check use-non-recommended-method
		Индекс2 = Найти(СтрКонфигурация, "_");
		
		Если Индекс2 = 0 Тогда
			ВызватьИсключение("Функция ПоколениеКонфигурации(): указан параметр без префикса ""_""! Параметр = """ + СтрКонфигурация + """.");
		КонецЕсли; 
		
		Префикс1 = Лев(ГБазоваяКонфигурация, Индекс1);
		Префикс2 = Лев(СтрКонфигурация, Индекс2);
		
		ЗнакСравнения = "";
		Для Индекс = 1 По 2 Цикл
			Символ = Сред(Префикс2, Индекс, 1);
			Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда // знаки "<=>"
				ЗнакСравнения = ЗнакСравнения + Символ;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗнакСравнения = "" Тогда
			ЗнакСравнения = "=";
		Иначе
			Префикс2 = Сред(Префикс2, СтрДлина(ЗнакСравнения) + 1);
		КонецЕсли;
		
		Если Префикс1 <> Префикс2 Тогда // сравниваем префиксы конфигураций
			
			Значение = Ложь;
			
		Иначе
			
			Сравнение = СравнитьВерсии(Сред(ГБазоваяКонфигурация, Индекс1+1), Сред(СтрКонфигурация, Индекс2+1));
			
			Если ЗнакСравнения = ">=" Тогда
				Значение = (Сравнение >= 0);
			ИначеЕсли ЗнакСравнения = "<=" Тогда
				Значение = (Сравнение <= 0);
			ИначеЕсли ЗнакСравнения = "<" Тогда
				Значение = (Сравнение < 0);
			ИначеЕсли ЗнакСравнения = ">" Тогда
				Значение = (Сравнение > 0);
			ИначеЕсли ЗнакСравнения = "=" Тогда
				Значение = (Сравнение = 0);
			Иначе
				ВызватьИсключение("Функция ПоколениеКонфигурации() - неизвестный оператор сравнения: " + ЗнакСравнения);
			КонецЕсли;
			
		КонецЕсли;
		
		ГКэшСравненияКонфигураций.Вставить(СтрКонфигурация, Значение);
		
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

// Функция сравнивает идентификатор текущей конфигурации с проверяемым 
// идентификатором конфигурации (в параметре СтрКонфигурация).
// Подробнее см. описание функции ПоколениеКонфигурации(СтрКонфигурация).
// Параметры:
//   СтрКонфигурация - Строка - операция сравнения и идентификатор сравниваемой конфигурации вида 
//     "{Операция_сравнения}{Конфигурация}", например: ">=УТ_11.1"
//     Возможные значения секции "Операция_сравнения": "<", "=", ">", "<>", "<=", ">=".
//     Если секция пустая, то её значение приравнивается к "=".
//   СтррКонтекст - Структура - структура со свойством "КэшСравненияКонфигураций" для кэширования результата.  
// Возвращаемое значение:
// 	 Булево	
// 
Функция ПоколениеКонфигурацииСервер(СтрКонфигурация, СтррКонтекст) Экспорт
	ГКэшСравненияКонфигураций = СтррКонтекст.КэшСравненияКонфигураций;
	ГБазоваяКонфигурация	  = СтррКонтекст.БазоваяКонфигурация; 
	
	Результат = ПоколениеКонфигурации(СтрКонфигурация);
	СтррКонтекст.КэшСравненияКонфигураций = ГКэшСравненияКонфигураций; //Сохранение в контекст
	
	Возврат Результат;	
КонецФункции

// Сравнивает две строки версий. Если передана не полная версия, то сравнивается только общая начальная часть версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(СтрокаВерсии1, СтрокаВерсии2) Экспорт
	
	МВерсия1 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1), ".");
	МВерсия2 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2), ".");
	
	ВГраница = Мин(МВерсия1.Количество(), МВерсия2.Количество()) - 1;
	
	Результат = 0;
	Для Разряд = 0 По ВГраница Цикл
		Результат = Число(МВерсия1[Разряд]) - Число(МВерсия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает версию конфигурации 1С в виде структуры "Конфигурация,БазоваяКонфигурация".
// Возвращаемое значение:
//   Структура:
//    * Конфигурация - Строка - идентификатор конфигурации (нвпример: "УТ_KZ");
//    * БазоваяКонфигурация - Строка - идентификатор базовой конфигурации (нвпример: "УТ_11.4.6.175").
//        Базовая конфигурация - это конфигурация, ставшая базой для текущей конфигурации 1С.
//
Функция ВерсияКонфигурации() Экспорт
	
	СтррРезультат = Новый Структура("Конфигурация,БазоваяКонфигурация");
	
	Имя    = Метаданные.Имя;
	Версия = Метаданные.Версия;
	
	СтррРезультат.БазоваяКонфигурация = ВерсияКонфигурацииБазоваяКонфигурация(Имя, Версия);
	
	Если    Имя = "УправлениеТорговлей" 
		Или Имя = "УправлениеТорговлейБазовая" 
		Или Имя = "АгентПлюсУправлениеТорговлей" 
	Тогда
		Если Метаданные.Справочники.ЦеновыеГруппы.Реквизиты.Найти("Валюта") <> Неопределено Тогда
			СтррРезультат.Конфигурация = "УТ_GR";
		ИначеЕсли Метаданные.Справочники.Найти("ТорговыеТочки") <> Неопределено Тогда
			СтррРезультат.Конфигурация = "УТ_АКФ";	
		Иначе	
			СтррРезультат.Конфигурация = "УТ";	
		КонецЕсли;		
		
	ИначеЕсли Имя = "УправлениеТорговлей_CRM_2" Тогда
		СтррРезультат.Конфигурация = "УТ_CRM_2";		
		
	ИначеЕсли Имя = "УправлениеТорговлейДляУкраины" Тогда
		СтррРезультат.Конфигурация = "УТ_UA";
		
	ИначеЕсли Имя = "УправлениеТорговлейДляКазахстана" ИЛИ Имя = "УправлениеТорговлейДляКазахстанаБазовая" Тогда
		СтррРезультат.Конфигурация = "УТ_KZ";
			
	ИначеЕсли Имя = "КомплекснаяАвтоматизация" Или Имя = "КомплекснаяАвтоматизацияДляКазахстана" Тогда
		СтррРезультат.Конфигурация = "КА";
		
	ИначеЕсли Имя = "УправлениеПредприятием" Или Имя = "УправлениеХолдингомERP" Тогда // ERP
		СтррРезультат.Конфигурация = "ERP";
		
	ИначеЕсли Имя = "KT2000_Alcohol_Trade" Тогда 
		СтррРезультат.Конфигурация = "УТ_АП";
		
	ИначеЕсли Имя = "УправлениеТорговлейДляБеларуси" Тогда 
		СтррРезультат.Конфигурация = "УТ_BL";	
		
	Иначе
		СтррРезультат.Конфигурация = "УТ";
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат СтррРезультат;
	
КонецФункции      

// Возвращает строку в виде идентификатора базовой конфигурации.
// Параметры:
//   Имя - Строка - название конфигурации (Метаданные.Имя).
//   Версия - Строка - номер версии конфигурации (Метаданные.Версия).
// Возвращаемое значение:
//   Строка
//@skip-check module-structure-method-in-regions
Функция ВерсияКонфигурацииБазоваяКонфигурация(Имя, Версия)
	
	БазоваяКонфигурация = Неопределено;
	
	//1. Новая логика
	Если Метаданные.РегистрыСведений.Найти("ВерсииПодсистем") <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина); 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	РСВерсииПодсистем.Версия КАК Версия
		               |ИЗ
		               |	РегистрСведений.ВерсииПодсистем КАК РСВерсииПодсистем
		               |ГДЕ
		               |	РСВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы";
				
		Запрос.УстановитьПараметр("ИмяПодсистемы", "УправлениеТорговлей"); 
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			БазоваяКонфигурация = "УТ_" + Выборка.Версия;
		КонецЕсли;   
		
		Если БазоваяКонфигурация = Неопределено Тогда
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	РСВерсииПодсистем.Версия КАК Версия
			               |ИЗ
			               |	РегистрСведений.ВерсииПодсистем КАК РСВерсииПодсистем
			               |ГДЕ
			               |	РСВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемыБазовая";
			
			Запрос.УстановитьПараметр("ИмяПодсистемыБазовая", "УправлениеТорговлейБазовая");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				БазоваяКонфигурация = "УТ_" + Выборка.Версия;
			КонецЕсли;  
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	//2. Старая логика. Регистр "ВерсииПодсистем" может быть не заполнен (бывает у базовых версий конфигураций).	
	Если БазоваяКонфигурация <> Неопределено Тогда
		Возврат БазоваяКонфигурация; 
	КонецЕсли;
		
	Если    Имя = "УправлениеТорговлей" 
		ИЛИ Имя = "УправлениеТорговлейБазовая" 
		ИЛИ Имя = "АгентПлюсУправлениеТорговлей"
		ИЛИ Имя = "KT2000_Alcohol_Trade"
	Тогда
		БазоваяКонфигурация = "УТ_" + Версия;

	ИначеЕсли Имя = "УправлениеТорговлей_CRM_2" Тогда
		//Версия продукта (3.0.11.1)  - УТ 11.4.3.172
		//Версия продукта (3.0.14.12) - УТ 11.4.6.188
		Если СравнитьВерсии(Версия, "3.0.14") >= 0 Тогда
			БазоваяКонфигурация = "УТ_11.4.6.188";
		ИначеЕсли СравнитьВерсии(Версия, "3.0.11") >= 0 Тогда
			БазоваяКонфигурация = "УТ_11.4.3.172";
		Иначе
			БазоваяКонфигурация = "УТ_11.2";
		КонецЕсли;
		
	ИначеЕсли Имя = "УправлениеТорговлейДляУкраины" Тогда
		БазоваяКонфигурация = "УТ_11.1.10";
		
	ИначеЕсли Имя = "УправлениеТорговлейДляБеларуси" Тогда

		Если СравнитьВерсии(Версия, "3.4.7") >= 0 Тогда
			БазоваяКонфигурация = "УТ_11.4.7";
		ИначеЕсли СравнитьВерсии(Версия, "3.3.1") >= 0 Тогда 
			БазоваяКонфигурация = "УТ_11.3.1";
		ИначеЕсли СравнитьВерсии(Версия, "3.2.4") >= 0 Тогда
			БазоваяКонфигурация = "УТ_11.2.3";
		Иначе
			БазоваяКонфигурация = "УТ_11.2";
		КонецЕсли;
		
	ИначеЕсли Имя = "УправлениеТорговлейДляКазахстана" ИЛИ Имя = "УправлениеТорговлейДляКазахстанаБазовая" Тогда
		// УТ_KZ 3.1.4.8	- 11.1.10.131
		// УТ_KZ 3.4.4.34	- 11.4.4.136    
		Если СравнитьВерсии(Версия, "3.4.4.34") >= 0 Тогда
			БазоваяКонфигурация = "УТ_11.4.4.136";
		ИначеЕсли СравнитьВерсии(Версия, "3.4") >= 0 Тогда
			БазоваяКонфигурация = "УТ_11.4";
		ИначеЕсли СравнитьВерсии(Версия, "3.2") >= 0 Тогда  
			БазоваяКонфигурация = "УТ_11.2.3";
		ИначеЕсли СравнитьВерсии(Версия, "3.1.4.8") >= 0 Тогда
			БазоваяКонфигурация = "УТ_11.1.10.131";
		Иначе
			БазоваяКонфигурация = "УТ_11.1.10";
		КонецЕсли;
		
	ИначеЕсли Имя = "КомплекснаяАвтоматизация" Или Имя = "КомплекснаяАвтоматизацияДляКазахстана" Тогда
		Если СравнитьВерсии(Версия, "2.4.6.175") >= 0 Тогда
			БазоваяКонфигурация = "УТ_11.4.6.175";
		Иначе
			БазоваяКонфигурация = "УТ_11.2.3";
		КонецЕсли;
		
	ИначеЕсли Имя = "УправлениеПредприятием" Тогда // ERP 2.X
		Если СравнитьВерсии(Версия, "2.4") < 0 Тогда
			БазоваяКонфигурация = "УТ_11.2.3";
		Иначе
			БазоваяКонфигурация = "УТ_11.3";
		КонецЕсли;
		
	Иначе
		БазоваяКонфигурация = "УТ_11.2"; // пока неизвестные конфигурации приравниваем к УТ 11.2
		
	КонецЕсли;

	Возврат БазоваяКонфигурация;			
КонецФункции

// Процедура определает версию текущей конфигурации 1С и заносит результат в глобальные переменные 
// ГБазоваяКонфигурация и ГКонфигурация. 
Процедура ОпределитьВерсиюКонфигурации() Экспорт
	
	Если ГБазоваяКонфигурация <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтррВерсияКонфигурации = ВерсияКонфигурации();
	
	ГБазоваяКонфигурация = СтррВерсияКонфигурации.БазоваяКонфигурация;
	ГКонфигурация  		 = СтррВерсияКонфигурации.Конфигурация;
	
КонецПроцедуры

// ПрограммныйИнтерфейс_ОпределениеКонфигурации
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм

// Процедура используется для инициализации реквизита формы СтррКонтекст (вызывается в обработчике события ПриСозданииНаСервере() в модулях форм).
// Параметры:
//   СтррКонтекст - Структура - структура для инициализации параметров формы.
//   ПараметрыФормы - Структура - ссылка на ПараметрыФормы. 
//   СтрОбязательныеСвойства - Строка, Неопределено - список обязательных свойств.      	
Процедура КонтекстФормыИнициализировать(СтррКонтекст, ПараметрыФормы, СтрОбязательныеСвойства = Неопределено) Экспорт
	
	Если СтррКонтекст = Неопределено Тогда
		СтррКонтекст = Новый Структура;
	КонецЕсли;
	
	СтрНетСвойств = СтруктураОтсутствуютОбязательныеСвойства(ПараметрыФормы, СтрОбязательныеСвойства);
	Если ЗначениеЗаполнено(СтрНетСвойств) Тогда
		//@skip-check use-non-recommended-method
		Если Найти(СтрНетСвойств, ",") = 0 Тогда // отсуствует одно обязательное свойство в ПараметрыФормы
			Текст = СтрШаблон_("Отсутствует обязательное свойство ""Параметры.%1"" для открытия формы!", СтрНетСвойств);
		Иначе // отсуствует несколько обязательных свойств в ПараметрыФормы
			Текст = СтрШаблон_("Отсутствуют обязательные свойства у объекта ""Параметры"" для открытия формы! Ожидаются свойства: %1.", СтрНетСвойств);
		КонецЕсли; 
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	СтррКонтекст.Вставить("ПутьКФорме", Метаданные().ПолноеИмя() + ".Форма.");
	СтррКонтекст.Вставить("Версия", 	ВерсияОбработки());
	СтррКонтекст.Вставить("Цвета", 		ВернутьЦветаОФормления());
	СтррКонтекст.Вставить("ВХОбщиеПараметры", Неопределено);
	Если СтррКонтекст.Свойство("РежимСовместимости") Тогда
		СтррКонтекст.РежимСовместимости = Метаданные.РежимСовместимости;
	КонецЕсли;
	
	Если СтррКонтекст.Свойство("Конфигурация") Тогда // требуется в "Контексте" указать данные о конфигурации 1С
	    СтррВерсия = ВерсияКонфигурации();
		СтррКонтекст.Конфигурация = СтррВерсия.Конфигурация;
		СтррКонтекст.Вставить("БазоваяКонфигурация", СтррВерсия.БазоваяКонфигурация);
		СтррКонтекст.Вставить("КэшСравненияКонфигураций", Неопределено);
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(СтррКонтекст, ПараметрыФормы);	
	
	Если СтррКонтекст.Свойство("СпрТоргТочки") Тогда
		
		ФлИспользоватьПунктыРазгрузки = ПрочитатьЗначениеНастройки("ИспользоватьПунктыРазгрузки");
		
		Если ФлИспользоватьПунктыРазгрузки = Неопределено Тогда
			ИспользоватьПунктыРазгрузки = Ложь;
		Иначе 
			ИспользоватьПунктыРазгрузки = ФлИспользоватьПунктыРазгрузки;
		КонецЕсли;
		
		//@skip-check structure-consructor-too-many-keys
		СтррТТ = Новый Структура("ВидСправочника, Синоним, Представление, тзИмяКолонки, тзИмяЭлемента, Адрес");
			
		Если ИспользоватьПунктыРазгрузки Тогда 
			СтррТТ.ВидСправочника = "алкПунктыРазгрузки"; 			// указывается имя справочника объекта метаданных в конфигурации, который заменяет справочник 'Партнеры'.
			СтррТТ.Синоним 		  = "Пункты разгрузки"; 			// указывается для вывода на форме списка торговых точек.
			СтррТТ.Представление  = "Пункт разгрузки"; 				// указывается для вывода в информационных сообщениях пользователю.
			СтррТТ.тзИмяКолонки	  = "ПунктРазгрузки"; 				// имя колонки в таблице значений 'Состав' в модуле формы 'СписокТорговыхТочек'.
			СтррТТ.тзИмяЭлемента  = "СоставПунктРазгрузки"; 		// имя элемента таблицы значений 'Состав' на форме 'СписокТорговыхТочек'.
			//@skip-check unknown-method-property
			СтррТТ.Адрес 		  = Справочники.ВидыКонтактнойИнформации.АдресПунктаРазгрузки;
		Иначе 
			// используется типовой справочник Партнеры
			СтррТТ.ВидСправочника = "Партнеры";
			СтррТТ.Синоним 		  = "Партнеры";
			СтррТТ.Представление  = "Партнер (Клиент)";
			СтррТТ.тзИмяКолонки	  = "Партнер";
			СтррТТ.тзИмяЭлемента  = "СоставПартнер";
			СтррТТ.Адрес		  = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		КонецЕсли;
		СтррКонтекст.СпрТоргТочки = СтррТТ;		
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает структуру с названиями и значениями цветов темы оформления.
// Возвращаемое значение:
//   Структура  
Функция ВернутьЦветаОФормления() Экспорт
	
	СтррРезультат = Новый Структура;
	СтррРезультат.Вставить("Авто", 	 		 Новый Цвет);
	//@skip-check new-color
	СтррРезультат.Вставить("ТекстПояснение", Новый Цвет(70,130,180));
	//@skip-check new-color
	//@skip-check new-color
	СтррРезультат.Вставить("ТекстВнимание",  Новый Цвет(255,0,0));
	СтррРезультат.Вставить("ТекстОбычный", 	 ЦветаСтиля.ЦветТекстаФормы);
	//@skip-check new-color
	СтррРезультат.Вставить("ФонРаздела", 	 Новый Цвет(225, 222, 255));
	//@skip-check new-color
	СтррРезультат.Вставить("ПолеГлавноеОкно",Новый Цвет(249, 243, 209));
	//@skip-check new-color
	СтррРезультат.Вставить("ФонСостояние", 	 Новый Цвет(255, 250, 217));
	//@skip-check new-color
	СтррРезультат.Вставить("ФонЗеленый", 	 Новый Цвет(128, 255, 128));
	//@skip-check new-color
	//@skip-check new-color
	СтррРезультат.Вставить("ФонВнимание",	 Новый Цвет(255, 255, 128));
	//@skip-check new-color
	СтррРезультат.Вставить("Белый", 	 	 Новый Цвет(255, 255, 255));
	
	//@skip-check constructor-function-return-section
	Возврат СтррРезультат;
	
КонецФункции

// Заполняет список значений идентификаторами и названиями способов обмена.
// Параметры:
//   Список - СписокЗначений Из Строка - список для заполнения.
Процедура ЗаполнитьСпособыОбмена(Список) Экспорт

	Список.Очистить();
	Список.Добавить("КаталогОбмена", НСтр("ru='Каталог обмена'"));
	Список.Добавить("АПСОД",  		 НСтр("ru='Агент Плюс: СОД (служба обмена данными)'"));
	Список.Добавить("FTP", 			 НСтр("ru='FTP-сервер'"));

КонецПроцедуры

// Функция возвращает список закладок журнала документов программы "Агент Плюс: Мобильная торговля".
// Возвращаемое значение:
//   СписокЗначений Из Строка
//  
Функция ПолучитьВсеЗакладкиЖурналаДокументовДляМУ() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("Заказ", 		НСтр("ru='Заказы'"));
	Список.Добавить("Долг", 		НСтр("ru='Долги'"));
	Список.Добавить("Реализация", 	НСтр("ru='Реализация'"));
	Список.Добавить("ПКО", 			НСтр("ru='Касса'"));
	Список.Добавить("Поступление", 	НСтр("ru='Поступления/Возвраты'"));
	Список.Добавить("Перемещение", 	НСтр("ru='Перемещение'")); 
	Список.Добавить("Мерчендайзинг",НСтр("ru='Мерчендайзинг'")); 
	Список.Добавить("Посещение",	НСтр("ru='Посещение'"));
	Список.Добавить("Задание",		НСтр("ru='Задание'"));
	
	Возврат Список;
	
КонецФункции

// Функция возвращает последний элемент строки-списка с разделителями.
// Параметры:
//   СтрВыражение - Строка - представление списка.
//   СимволРазделитель - Строка - символ-разделитель элементов списка в представлении списка.
// Возвращаемое значение:
//   Строка
//
Функция ПоследнийЭлементСтроки(СтрВыражение, СимволРазделитель = ".") Экспорт

	//@skip-check use-non-recommended-method
	Если Найти(СтрВыражение, СимволРазделитель) <> 0 Тогда 
		Результат = "";
		Индекс = СтрДлина(СтрВыражение);
		Символ = Сред(СтрВыражение, Индекс, 1);
		Пока Символ <> СимволРазделитель Цикл // в цикле ищем справа налево первый символ-разделительр
			Результат = Символ + Результат;
			Индекс = Индекс - 1;
			Символ = Сред(СтрВыражение, Индекс, 1);
		КонецЦикла;
	Иначе
		Результат = СтрВыражение;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция возвращает строковое представление расписания трекинга.
// Параметры:
//   СтррРасписание - Структура:
//     * ВремяНачала - Строка - время начала;
//     * ВремяОкончания - Строка - время окончания;
//     * ДниНедели - Строка - порядковые номера дней недели в расписании с разделением через запятую;
//     * ПериодЗаписи - Число - период записи трека в секундах.
// Возвращаемое значение:
//   Строка
//	
Функция ПредставлениеРасписанияТрекинга(СтррРасписание) Экспорт
	
	Если Не СтруктураЕстьСвойства(СтррРасписание, "ВремяНачала,ВремяОкончания,ДниНедели,ПериодЗаписи") Тогда
		Возврат "";
	КонецЕсли;
	
	Дни = СтрЗаменить(СтррРасписание.ДниНедели, ",", "");
	Если Дни = ""  Тогда
		Возврат "";
	КонецЕсли;
	
	Если Дни = "1234567" Тогда
		СтрДни = НСтр("ru='все'");
	Иначе
		ДниНеделиСтр = НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС'");
		Если Лев(Дни, 5) = "12345" Тогда
			СтрДни = НСтр("ru='по будням'");
			Если Число(Прав(Дни, 1)) > 5 Тогда
				СтрДни = СтрДни + ", " + СтрРазделить_(ДниНеделиСтр, ",")[Число(Прав(Дни, 1))-1];
			КонецЕсли;
		Иначе
			МассивДней = СтрРазделить_(ДниНеделиСтр, ",");
			СтрДни = ""; 
			Для Поз = 1 По МассивДней.Количество() Цикл	
				//@skip-check use-non-recommended-method
				Если Найти(Дни, Строка(Поз)) <> 0 Тогда
					СтрДни = СтрДни + ?(СтрДни = "", "", ", ") + МассивДней[Поз-1];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат = НСтр("ru='Дни недели:'") + " " + СтрДни + ". ";
	СтрВремя  = СтрШаблон_(НСтр("ru='Время с %1 по %2'"), СтррРасписание.ВремяНачала, СтррРасписание.ВремяОкончания) + ". ";
	Результат = Результат + СтрВремя;
	СтрИнтервал = НСтр("ru='Интервал: каждые'") + " ";
	Если СтррРасписание.ПериодЗаписи = 0 Или СтррРасписание.ПериодЗаписи % 60 <> 0 Тогда
		СтрИнтервал = СтрИнтервал + Строка(СтррРасписание.ПериодЗаписи) + " " + НСтр("ru='сек'");
	Иначе
		СтрИнтервал = СтрИнтервал + Строка(СтррРасписание.ПериодЗаписи / 60) + " " + НСтр("ru='мин'");
	КонецЕсли;
	Результат = Результат + СтрИнтервал + ".";

	Возврат Результат;

КонецФункции

// ПрограммныйИнтерфейс_ОбщиеПроцедурыИФункцииДляФорм
#КонецОбласти 

#Область ПрограммныйИнтерфейс_СпискиТорговыхТочек

// Функция возвращает параметры детализации списка торговых точек.
// Возвращаемое значение:
//   СписокЗначений Из Строка 	
Функция ПолучитьСписокДетализацииСписковТорговыхТочек() Экспорт

	ИспользоватьДоговорыИлиСоглашения = ПрочитатьЗначениеНастройки("ИспользоватьДоговорыИлиСоглашения"); // реквизит обработки, используется ниже в процедурах ИспользоватьСоглашения() и ИспользоватьДоговоры().
	
	Если ИспользоватьСоглашения() Тогда
	    ПредставлениеДоговор = НСтр("ru = 'Соглашение'");
	ИначеЕсли ИспользоватьДоговоры() Тогда
		ПредставлениеДоговор = НСтр("ru = 'Договор'");
	Иначе
		ПредставлениеДоговор = Неопределено;
	КонецЕсли; 
	
	Список = Новый СписокЗначений;
	Список.Добавить("Организация", 	НСтр("ru = 'Организация'"));
	Список.Добавить("Контрагент", 	НСтр("ru = 'Контрагент'"));
	Если ПредставлениеДоговор <> Неопределено Тогда
		Список.Добавить("Договор", 	ПредставлениеДоговор);
	КонецЕсли; 
	Список.Добавить("График", 		НСтр("ru = 'График'"));	
	Список.Добавить("ПланПосещений",НСтр("ru = 'План посещений'"));	
	
	Возврат Список;

КонецФункции

// Функция возвращает Истина, если список торговых точек используется для планирования посещений.
// В параметрах ИспользуетсяГрафик, ИспользуетсяПП возвращаются признаки - какой вариант планирования посещений
// задействован (через График или через ПланПосещений).
// Параметры:
//   СтррОбъект - Структура
//   ИспользуетсяГрафик - Булево - признак использования графика посещений. Значение параметра изменяется!
//   ИспользуетсяПП - Булево - признак использования плана посешщений. Значение параметра изменяется!
// Возвращаемое значение:
//   Булево 	
Функция СписокТорговыхТочекИспользуетсяДляПланированияПосещений(СтррОбъект, ИспользуетсяГрафик = Неопределено, ИспользуетсяПП  = Неопределено) Экспорт
	
	ИспользуетсяГрафик 	= СтррОбъект.Детализация.НайтиПоЗначению("График") <> Неопределено;
	ИспользуетсяПП 	   	= СтррОбъект.Детализация.НайтиПоЗначению("ПланПосещений") <> Неопределено;
	
	Возврат ИспользуетсяГрафик Или ИспользуетсяПП;
	
КонецФункции

// ПрограммныйИнтерфейс_СпискиТорговыхТочек
#КонецОбласти 

#Область ПрограммныйИнтерфейс_ГруппаПользователей

// Функция возвращает группу пользователей, являющимися торговыми агентами.
// Возвращаемое значение:
//   СправочникСсылка.ГруппыПользователей
Функция ПолучитьГруппуПользователейТорговыеАгенты() Экспорт

	ИмяГруппы = "Торговые агенты (Агент Плюс)";
	
	Результат = Справочники.ГруппыПользователей.НайтиПоНаименованию(ИмяГруппы, Истина); 
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Элемент = Справочники.ГруппыПользователей.СоздатьЭлемент();
		Элемент.Наименование = ИмяГруппы;
		Элемент.Комментарий  = НСтр("ru = 'Группа пользователей, использующих ПО ""Агент Плюс: Управление мобильной торговлей"". Создана автоматически.'");
		Элемент.Записать();
		Результат = Элемент.Ссылка;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// ПрограммныйИнтерфейс_ГруппаПользователей
#КонецОбласти 

// ПрограммныйИнтерфейс
#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5

// Подставляет параметры в строку. Максимально возможное число параметров - 5.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр1 - Строка - подставляемый параметр.
//  Параметр2 - Строка - подставляемый параметр.  
//  Параметр3 - Строка - подставляемый параметр.
//  Параметр4 - Строка - подставляемый параметр.
//  Параметр5 - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
//@skip-check method-too-many-params
Функция СтрШаблон_(СтрокаПодстановки,
	Параметр1, Параметр2 = Неопределено, Параметр3 = Неопределено, Параметр4 = Неопределено, Параметр5 = Неопределено)
	
	Результат = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	Результат = СтрЗаменить(Результат, "%2", Параметр2);
	Результат = СтрЗаменить(Результат, "%3", Параметр3);
	Результат = СтрЗаменить(Результат, "%4", Параметр4);
	Результат = СтрЗаменить(Результат, "%5", Параметр5);
	
	Возврат Результат;
	
КонецФункции
	
// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//       т.е. для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//    Если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив Из Строка - массив строк.
Функция СтрРазделить_(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	//@skip-check use-non-recommended-method
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		//@skip-check use-non-recommended-method
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив Из Строка - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//  СокращатьПробелы - Булево - убирать ведущие и финальные пробелы в элементах массива
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
// 
Функция СтрСоединить_(Массив, Разделитель = ",", СокращатьПробелы = Ложь)

	Результат = "";
	ТекРазделитель = "";
	
	Для Индекс = 0 По Массив.ВГраница() Цикл
		
		Подстрока = Массив[Индекс];
		
		Если СокращатьПробелы Тогда
			Подстрока = СокрЛП(Подстрока);
		КонецЕсли;
		
		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;
		
		Результат = Результат + ТекРазделитель + Подстрока;
		
		Если Индекс = 0 Тогда
			ТекРазделитель = Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// СлужебныеПроцедурыИФункции_СовместимостьСПлатформой_8_3_5 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВнешняяОбработка

Функция СведенияОВнешнейОбработке() Экспорт

	СтррРегистрация = Новый Структура;
	СтррРегистрация.Вставить("Вид", 			"ДополнительнаяОбработка");	
	СтррРегистрация.Вставить("Наименование", 	"Обмен данными с 'Агент Плюс: Мобильной торговлей'");
	СтррРегистрация.Вставить("Версия", 			ВерсияОбработки());
	СтррРегистрация.Вставить("БезопасныйРежим", Ложь);
	СтррРегистрация.Вставить("Информация", 		"Обработка обмена данными с приложением 'Агент Плюс: Управление мобильной торговлей'");
	
	ТЗКоманд = Новый ТаблицаЗначений;
	ТЗКоманд.Колонки.Добавить("Представление", 	Новый ОписаниеТипов("Строка"));
	ТЗКоманд.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("Строка"));
	ТЗКоманд.Колонки.Добавить("Использование", 	Новый ОписаниеТипов("Строка"));
	ТЗКоманд.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	ТЗКоманд.Колонки.Добавить("Модификатор", 	Новый ОписаниеТипов("Строка"));

	СТЗКоманд = ТЗКоманд.Добавить();
	СТЗКоманд.Идентификатор = "ОткрытьОтчет";
	СТЗКоманд.Представление = "Обмен данными с 'Агент Плюс: Мобильной торговлей'";
	СТЗКоманд.Использование = "ОткрытиеФормы";
	СТЗКоманд.ПоказыватьОповещение = Истина;	
	
	СТЗКоманд = ТЗКоманд.Добавить();
	СТЗКоманд.Идентификатор = "Загрузить";
	СТЗКоманд.Представление = "Загрузить данные из 'Агент Плюс: Мобильной торговли'";
	СТЗКоманд.Использование = "ВызовСерверногоМетода";
	СТЗКоманд.ПоказыватьОповещение = Истина;	

	СТЗКоманд = ТЗКоманд.Добавить();
	СТЗКоманд.Идентификатор = "Выгрузить";
	СТЗКоманд.Представление = "Выгрузить данные в 'Агент Плюс: Мобильную торговлю'";
	СТЗКоманд.Использование = "ВызовСерверногоМетода";
	СТЗКоманд.ПоказыватьОповещение = Истина;	
	
	ОпределитьВерсиюКонфигурации();
	Если ГКонфигурация = "УТ_АКФ" Тогда
		СТЗКоманд = ТЗКоманд.Добавить();
		СТЗКоманд.Идентификатор = "АКФ_ОбновитьТТпоТорговымПредставителям";
		СТЗКоманд.Представление = "Обновить торговые точки АКФ";
		СТЗКоманд.Использование = "ВызовСерверногоМетода";
		СТЗКоманд.ПоказыватьОповещение = Истина;	
	КонецЕсли;

	СтррРегистрация.Вставить("Команды", ТЗКоманд);

	Возврат СтррРегистрация;
	
КонецФункции

// Интерфейс для запуска логики обработки для фоновых заданий.
// Параметры:
//   ИмяКоманды - Строка - название внутренней команды обработки ("Загрузить", "Выгрузить", "АКФ_ОбновитьТТпоТорговымПредставителям").
//   ПараметрыВыполнения - Строка
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения = Неопределено) Экспорт

	// Общие действия перед началом выполнения команд.
	УстановитьПривилегированныйРежим(Истина);

	СтрИнформация = ИнициализироватьДанныеВХранилищеДляНовойВерсии(); // попытка обновить настройки в хранилище до более новой версии (если была обновлена версия обработки)
	Если ЗначениеЗаполнено(СтрИнформация) Тогда // обработка обновлена до более новой версии
		ОповеститьОСобытии(СтрИнформация);
	КонецЕсли; 
	
	//Диспетчеризация обработчиков команд.
	Если ИмяКоманды = "Загрузить" Тогда
		ЗагрузитьДанные(Неопределено);
	ИначеЕсли ИмяКоманды = "Выгрузить" Тогда
		ВыгрузитьДанные(Неопределено);
	ИначеЕсли ИмяКоманды = "АКФ_ОбновитьТТпоТорговымПредставителям" Тогда
		АКФ_ДобавитьТорговыеТочкиВСпискиНаСервере(Новый Массив);
	КонецЕсли;

КонецПроцедуры

// Возвращает номер версии обработки. Номер версии обработки указывается в синониме обработки в круглых скобках.
// Возвращаемое значение:
//   Строка
Функция ВерсияОбработки() Экспорт
	
	Комментарий = Метаданные().Комментарий;
	//@skip-check use-non-recommended-method
	ПозНачала = Найти(Комментарий, "(");
	//@skip-check use-non-recommended-method
	ПозКонца  = Найти(Комментарий, ")");
	
	Если ПозНачала = 0 Или ПозКонца = 0 Тогда
		ВызватьИсключение("В Комментарии обработки в метаданных не указана версия обработки! Версия должна указываться в круглых скобках!");
	КонецЕсли;
	
	Результат = ИзвлечьВерсию(Сред(Комментарий, ПозНачала+1, ПозКонца - ПозНачала - 1));
	
	Возврат Результат;
	
КонецФункции

// Функция извлекает номер версии из строки. Строка может состоять из любых символов - извлекаются цифры и точки.
Функция ИзвлечьВерсию(СтрВерсия)
	
	Результат = "";
	МаксИндекс = стрДлина(СтрВерсия);
	
	Для Индекс = 1 По МаксИндекс Цикл
		Символ = Сред(СтрВерсия, Индекс, 1);
		Код = КодСимвола(Символ);
		Если Код > 45 И Код < 58 И Код <> 47  Тогда
			Результат = Результат + Символ;
		КонецЕсли; 
	КонецЦикла;
	
	Пока Лев(СтрВерсия, 1) = "."  Цикл
		Результат = Сред(СтрВерсия, 2);
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ВнешняяОбработка
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ОбновлениеОбработки
// Область используется для обновлений модуля обмена данными до новых версий - инициализации значений новых настроек, 
// конвертации значений настроек из прежнего формата в новый формат.

// Функция возвращает строку с описанием факта обновления (если было выполнено обновление настроек модуля) или возвращает Неопределено.
// Возвращаемое значение:
//   Строка	
Функция ИнициализироватьДанныеВХранилищеДляНовойВерсии() Экспорт
	
	ОпределитьВерсиюКонфигурации();

	СтррВерсии = Новый Структура;
	СтррВерсии.Вставить("НоваяВерсия", ВерсияОбработки()); // версия запущенной обработки
	СтррВерсии.Вставить("ВерсияИзВХ",  ПрочитатьЗначениеНастройки("ВерсияНастроек")); // версия обработки, сохранившей настройки в хранилище
		
	Если СтррВерсии.ВерсияИзВХ = СтррВерсии.НоваяВерсия Тогда
		Возврат Неопределено; // обновление не требуется
	КонецЕсли; 
	
	СтррЗначения 	  = Новый Структура; // измененные значения настроек обработки, их потребуется сохранить в хранилище
	ИзменитьНастройки = Ложь; 		     // признак изменения значений настроек
	
	ЭтоПервыйЗапуск = ПустаяСтрока(СтррВерсии.ВерсияИзВХ);
	
	Если ЭтоПервыйЗапуск Тогда // первый запуск
		
		СоздатьДополнительныеРеквизитыСправочников();
		СоздатьДополнительныеРеквизитыДокументов();
		ПолучитьГруппуПользователейТорговыеАгенты();

		СтррЗначения.Вставить("ВыгружатьТолькоПросроченныеДолги", Ложь);
		СтррЗначения.Вставить("ВыделятьЦветомПросроченныеДолги",  Ложь);
		СтррЗначения.Вставить("ПодтвержденияТолькоДляПроведенных", Истина);
		СтррЗначения.Вставить("ОтветнаяВыгрузка", Истина);
		СтррЗначения.Вставить("ВыгружатьМаршруты", Истина);		
		СтррЗначения.Вставить("ИнтервалВыгрузкиМаршрутов", 7);
		СтррЗначения.Вставить("РегистрОстатковТоваров", "СвободныеОстатки");
		
		РежимЗагрузкиЗаказов = ?(Константы.ИспользоватьЗаказыКлиентов.Получить(), "ЗагружатьКакЗаказ", "ЗагружатьКакРеализацию");
		СтррЗначения.Вставить("РежимЗагрузкиЗаказов", 		     РежимЗагрузкиЗаказов); 
		СтррЗначения.Вставить("СтатусЗаказовКлиентов", 		     Перечисления.СтатусыЗаказовКлиентов.НеСогласован); 
		СтррЗначения.Вставить("СтатусРеализацияТоваровУслуг",    Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
		СтррЗначения.Вставить("ИспользоватьВидыДоставки",	     Ложь);
		СтррЗначения.Вставить("СпособДоставки", 				 Перечисления.СпособыДоставки.Самовывоз);
		СтррЗначения.Вставить("МаксКоличествоВиртуальныхДокументов", 1000);
		СтррЗначения.Вставить("ИспользоватьПланыПродаж", Ложь);
		СтррЗначения.Вставить("ИспользоватьПланыПродажПоТоварнымКатегориям", Ложь);
		СтррЗначения.Вставить("ИспользоватьАвтообмен", Ложь);
		СтррЗначения.Вставить("ИнтервалАвтообмена", 180);
		СтррЗначения.Вставить("ВыгружатьДолгиТолькоПоДокументамАгента", Ложь);
		СтррЗначения.Вставить("ПроводитьДокументыСписок", НастройкаПроводитьДокументыСписокПоУмолчанию());
		СтррЗначения.Вставить("РежимВыгрузкиКодовНоменклатуры", "КОД");
		СтррЗначения.Вставить("ВыгружатьТоварыСНулевымОстатком", Истина);
		СтррЗначения.Вставить("ЗагружатьДокументыТекущейДатой", Ложь);
		СтррЗначения.Вставить("КлиентМетрика", Новый УникальныйИдентификатор());
		СтррЗначения.Вставить("РазрешитьВозвратНаОснованииЗаказа", Ложь);
		СтррЗначения.Вставить("АвтонумераторДокументЗадание", 		0);
		СтррЗначения.Вставить("АвтонумераторДокументПосещение", 	0);
		СтррЗначения.Вставить("АвтонумераторДокументМерчендайзинг", 0);

		
		ЗаполнитьВидыЗадачПоУмолчанию();
		
		Если НЕ ГКонфигурация = "УТ_АП" Тогда
			СтррЗначения.Вставить("РежимВыгрузкиРекомендуемый", Истина); 
		КонецЕсли;
		
		// устанавливаем значение настройки "ИспользоватьДоговорыИлиСоглашения"
		Если Константы.ИспользованиеСоглашенийСКлиентами.Получить() <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
			ЗначениеДоговорыИлиСоглашения = "СОГЛАШЕНИЯ";
		ИначеЕсли Константы.ИспользоватьДоговорыСКлиентами.Получить() Тогда 
			ЗначениеДоговорыИлиСоглашения = "ДОГОВОРЫ";
		Иначе
			ЗначениеДоговорыИлиСоглашения = "";
		КонецЕсли; 
		СтррЗначения.Вставить("ИспользоватьДоговорыИлиСоглашения", ЗначениеДоговорыИлиСоглашения);
		
		Если Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() Тогда
			СтррЗначения.Вставить("ИспользоватьХарактеристики", Истина);
		КонецЕсли;
		
		СтррЗначения.Вставить("РежимРасчетаСкидок", 		   "Рекомендуемый");
		СтррЗначения.Вставить("ЗагружатьВиртуальныеДокументы", Истина);
	
	КонецЕсли;
	
	КлючНастроекОбмена   = КлючНастроекОбмена();
	ПользовательНастроек = ПользовательНастроек();
	
	Если ОбновитьДоВерсии("1.0.0.23", СтррВерсии, ИзменитьНастройки) Тогда
		СтррЗначения.Вставить("ИнтервалАвтообмена", 180);
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.29", СтррВерсии, ИзменитьНастройки) Тогда
		ПодтвержденияУдалить("Документы");
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.31", СтррВерсии, ИзменитьНастройки) Тогда
		ОбновитьВидыДокументовИСправочниковВХранилище(СтррЗначения);
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.32", СтррВерсии, ИзменитьНастройки) Тогда
		// изменен тип значения реквизита "СОДПорт" со "Строка" на "Число"
		СОДПорт = ПрочитатьЗначениеНастройки("СОДПорт");
		Если ТипЗнч(СОДПорт) = Тип("Строка") Тогда
			НовоеЗначение = СтрокуВЧисло(СОДПорт);
		ИначеЕсли ТипЗнч(СОДПорт) = Тип("Число") Тогда
			НовоеЗначение = СОДПорт;
		Иначе
			НовоеЗначение = 0;
		КонецЕсли; 
		Если НовоеЗначение <> СОДПорт Тогда
			СтррЗначения.Вставить("СОДПорт", НовоеЗначение);
		КонецЕсли; 
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.33", СтррВерсии, ИзменитьНастройки) Тогда
		// заменено название реквизита "ЛКИдентификатор" на "ЛКЛогин"
		НовоеЗначение = ПрочитатьЗначениеНастройки("ЛКИдентификатор");
		Если НовоеЗначение <> Неопределено Тогда
			СтррЗначения.Вставить("ЛКЛогин", НовоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.0.34", СтррВерсии, ИзменитьНастройки) Тогда
		// добавлен новый реквизит "ЛКЗапомнитьЛогинИПароль"
		ЛКЛогин = ПрочитатьЗначениеНастройки("ЛКЛогин");
		Если Не ПустаяСтрока(ЛКЛогин) Тогда
			СтррЗначения.Вставить("ЛКЗапомнитьЛогинИПароль", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("1.0.0.54", СтррВерсии) Тогда
		// появился новый доп. реквизит справочника Партнеры - ИмяСвойстваАдресИзСервисаПартнер()
		СоздатьДополнительныеРеквизитыСправочников(); 
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("1.0.1.27", СтррВерсии) Тогда
		// появились новые доп. сведения документов - ИмяСвойстваДокументВремяНачала() и ИмяСвойстваДокументВремяОкончания().
		СоздатьДополнительныеРеквизитыДокументов(); 
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.1.35", СтррВерсии, ИзменитьНастройки) Тогда 
		СтррЗначения.Вставить("ПоказыватьАдресКоординат", Истина);
	КонецЕсли;
	
	Если ОбновитьДоВерсии("1.0.2.1", СтррВерсии) Тогда
		ВидДокумента = "_Мерчендайзинг";
		ТЗн = ВОТЗЗагрузить(ВидДокумента);
		Если ТЗн.Колонки.Найти("Менеджер") = Неопределено Тогда
			ТЗн.Колонки.Добавить("Менеджер",	Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
			ВОТЗСохранить(ВидДокумента, ТЗн)
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОбновитьДоВерсии("1.0.2.4", СтррВерсии) Тогда
		// 1. Переименована колонка ТЗ Журнала документов мерчендайзинга из "ДатаНачала" в "ВремяНачала".
		// 2. Добавлена колонка "СуммаДокумента".
		
		ВидДокумента = "_Мерчендайзинг";
		ТЗн = ВОТЗЗагрузить(ВидДокумента);
		Если ТЗн <> Неопределено Тогда
			
			БылиИзменения = Ложь;
			
			ЗаменитьНазваниеКолонки(ТЗн, "ДатаНачала",    "ВремяНачала",    БылиИзменения);
			ЗаменитьНазваниеКолонки(ТЗн, "ДатаОкончания", "ВремяОкончания", БылиИзменения);
			
			// добавляем колонку "СуммаДокумента"
			Если ТЗн.Колонки.Найти("СуммаДокумента") = Неопределено Тогда
				ОписаниеТипаСумма = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
				ТЗн.Колонки.Добавить("СуммаДокумента", ОписаниеТипаСумма);
				БылиИзменения = Истина;
			КонецЕсли; 
		
			Если БылиИзменения Тогда
				ВОТЗСохранить(ВидДокумента, ТЗн); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ОбновитьДоВерсии("2.0.0.8", СтррВерсии) Тогда
		// Изменены названия колонки "Результат" и "Результат_Представление" в ТЗ виртуального документа "_Посещение".
		ВидДокумента = "_Посещение";		
		ТЗн = ВОТЗЗагрузить(ВидДокумента);
		Если ТЗн <> Неопределено Тогда
			БылиИзменения = Ложь;			
			ЗаменитьНазваниеКолонки(ТЗн, "Результат", "РезультатПосещения", БылиИзменения);
			ЗаменитьНазваниеКолонки(ТЗн, "Результат_Представление", "РезультатПосещения_Представление", БылиИзменения);
			Если БылиИзменения Тогда
				ВОТЗСохранить(ВидДокумента, ТЗн); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОбновитьДоВерсии("2.0.0.11", СтррВерсии) Тогда
		// Изменено название колонки "Характеристика" на "Ссылка" в ТЗ "СпрХарактеристикиНоменклатурыСлужебный"
		Реквизит = "СпрХарактеристикиНоменклатурыСлужебный";
		ТЗн = ПрочитатьЗначениеНастройки(Реквизит);
		Если ТЗн <> Неопределено И ЗаменитьНазваниеКолонки(ТЗн, "Характеристика", "Ссылка") Тогда
			СохранитьЗначениеНастройки(Реквизит, ТЗн); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
		КонецЕсли; 
	КонецЕсли; 
	
	Если ОбновитьДоВерсии("2.0.0.20", СтррВерсии) Тогда
		// Изменено для виртуального документа "_Мерчендайзинг" добавлен реквизит шапки ДокументОснование.
		ВидДокумента = "_Мерчендайзинг";		
		ТЗн = ВОТЗЗагрузить(ВидДокумента);
		Если ТЗн <> Неопределено Тогда
			Если ТЗн.Колонки.Найти("ДокументОснование") = Неопределено Тогда
				ОписаниеТипаВсеДокументы  = Новый ОписаниеТипов(Документы.ТипВсеСсылки());
				ТЗн.Колонки.Добавить("ДокументОснование", ОписаниеТипаВсеДокументы );
				ВОТЗСохранить(ВидДокумента, ТЗн); // ТЗ сразу сохраняем в хранилище, чтобы не держать в памяти
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.0.48", СтррВерсии, ИзменитьНастройки) Тогда
		// Настройка "ИспользоватьСоглашения" заменена (типа Булево) на "ИспользоватьДоговорыИлиСоглашения" (типа Строка).
		// "ИспользоватьДоговорыИлиСоглашения" принимает одно из значений (задаются в процедуре ЗаполнитьСпособыВыгрузкиДоговоров(), интерактивно - на форме "НастройкиМодуля"): 
		// 	- "" - не использовать договоры и соглашения в МУ,
		//  - "ДОГОВОРЫ"   - использовать в МУ Договоры,
		//  - "СОГЛАШЕНИЯ" - использовать в МУ Соглашения.
		Значение = ?(ПрочитатьЗначениеНастройки("ИспользоватьСоглашения") = Истина, "СОГЛАШЕНИЯ", "");
		СтррЗначения.Вставить("ИспользоватьДоговорыИлиСоглашения", Значение);
	КонецЕсли;
	
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.0.70", СтррВерсии) И ГКонфигурация = "УТ_GR" Тогда
		// изменился формат хранения адресов доставки для выгрузки в МТ
		АдресаДоставкиКонвертировать();
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.0.95", СтррВерсии, ИзменитьНастройки) Тогда
		
		// Настройка "ЗагружатьКакРеализацию" удалена, тк не используется.
		// Настройка "РежимЗагрузкиЗаказов"  - Тип(Строка). По умолчанию значение зависит от Константы.ИспользоватьЗаказыКлиентов 
		// 	Значения:
		//  	"ЗагружатьКакЗаказ"     - Строка - Загрузка заказов в 1с из МУ как Заказ.
		//  	"ЗагружатьКакРеализацию"- Строка - Загрузка заказов в 1с из МУ как Реализация.
		//
		// Настройка "СтатусЗаказовКлиентов"  - Тип(Перечисления). По умолчанию значение Перечисления.СтатусыЗаказовКлиентов.НеСогласован 
		// 	Значения: 	Перечисления.СтатусыЗаказовКлиентов	 - Перечисления - При загрузке документа заказ из МУ подставляет в реквизит "Статус" значение заданное в "Общие настройки - Основные - Статус заказов"
		//
		// Настройка "СтатусРеализацияТоваровУслуг"  - Тип(Перечисления). По умолчанию значение Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено
		// 	Значения:  	Перечисления.СтатусыРеализацийТоваровУслуг	- Перечисления - При загрузке документа заказ или реализация из МУ подставляет в реквизит "Статус" значение заданное в "Общие настройки - Основные - Статус реализаций"
		//
		// Настройка "СпособДоставки"  - Тип(Перечисления). По умолчанию значение Перечисления.СпособыДоставки.Самовывоз 
		// 	Значения:  	Перечисления.СпособыДоставки	- Перечисления - При загрузке документа заказ или реализация из МУ подставляет в реквизит "СпособДоставки" значение заданное в "Общие настройки - Основные - способ доставки"

		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();
		
		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "СтатусЗаказовКлиентов",, ПользовательНастроек);
        Если ЗначениеНастройки = Неопределено Тогда
			СтррЗначения.Вставить("СтатусЗаказовКлиентов", Перечисления.СтатусыЗаказовКлиентов.НеСогласован); 	
		КонецЕсли;
		
		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "СтатусРеализацияТоваровУслуг",, ПользовательНастроек);
        Если ЗначениеНастройки = Неопределено Тогда
			СтррЗначения.Вставить("СтатусРеализацияТоваровУслуг", Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено); 	
		КонецЕсли;

		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "СпособДоставки",, ПользовательНастроек);
        Если ЗначениеНастройки = Неопределено Тогда
			СтррЗначения.Вставить("СпособДоставки", Перечисления.СпособыДоставки.Самовывоз);	
		КонецЕсли;
		
		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "РежимЗагрузкиЗаказов",, ПользовательНастроек);
		РежимЗагрузкиЗаказов = ?(Константы.ИспользоватьЗаказыКлиентов.Получить(), "ЗагружатьКакЗаказ", "ЗагружатьКакРеализацию");
		Если ЗначениеНастройки = Неопределено Тогда
			СтррЗначения.Вставить("РежимЗагрузкиЗаказов", РежимЗагрузкиЗаказов);
		ИначеЕсли РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию" И ЗначениеНастройки = "ЗагружатьКакЗаказ" Тогда //Если Константы.ИспользоватьЗаказыКлиентов не включена, то загружаем заказа как реализация.
			СтррЗначения.Вставить("РежимЗагрузкиЗаказов", РежимЗагрузкиЗаказов);
		КонецЕсли;
			
		ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ЗагружатьКакРеализацию",, ПользовательНастроек);
		Если НЕ ЗначениеНастройки = Неопределено Тогда
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена, "ЗагружатьКакРеализацию", ПользовательНастроек);			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.1.1", СтррВерсии, ИзменитьНастройки) Тогда
		// Добавлен новый реквизит обработки - МаксКоличествоВиртуальныхДокументов.
		// В реквизите указывается максимальное количество виртуальных документов одного вида в журнале документов.
		// Значение по умолчанию: 1000. Ранее это значение прописывалось жестко в коде.
		СтррЗначения.Вставить("МаксКоличествоВиртуальныхДокументов", 1000);
	КонецЕсли; 
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.39", СтррВерсии, ИзменитьНастройки) Тогда
		// Добавлен новый реквизит обработки - ИспользоватьПланыПродажПоТоварнымКатегориям.
		СтррЗначения.Вставить("ИспользоватьПланыПродажПоТоварнымКатегориям", Ложь);
	КонецЕсли; 
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.53", СтррВерсии, ИзменитьНастройки) Тогда
		СоздатьДополнительныеРеквизитыДокументов();
	КонецЕсли; 
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.57", СтррВерсии, ИзменитьНастройки) Тогда
		//Добавляем в настройки мобидьного приложения,новую настройку торговлю с колес. Переносим в нее значение старой общей настройки "Торговля с колес"
		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();
		
		Настройка_ТоговляСКолес    = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ТорговляСКолес"  ,, ПользовательНастроек);
		Настройка_НастройкиАгентов = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "НастройкиАгентов",, ПользовательНастроек);
				
		Если Настройка_НастройкиАгентов <> Неопределено Тогда
			СтррТорговляСКолес = Новый Структура("Значение, Идентификатор", ?(Настройка_ТоговляСКолес = Неопределено, Ложь, Настройка_ТоговляСКолес), "72889bff-cc95-4c2e-9c4e-0d28e2efbf7c");
			Для Каждого стзНастройкиАгентов Из Настройка_НастройкиАгентов Цикл
				СтррНастройкиМобильногоПриложения = стзНастройкиАгентов.НастройкиМобильногоПриложения;
				Если СтррНастройкиМобильногоПриложения <> Неопределено И НЕ СтррНастройкиМобильногоПриложения.Свойство("ТорговляCКолес") Тогда
					СтррНастройкиМобильногоПриложения.Вставить("ТорговляCКолес", СтррТорговляСКолес); 
				КонецЕсли;
			КонецЦикла;			
			СтррЗначения.Вставить("НастройкиАгентов", Настройка_НастройкиАгентов); 	
		КонецЕсли;

		//Удаляем старую настройку торговля с колес.
		Если Настройка_ТоговляСКолес <> Неопределено Тогда
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена, "ТорговляСКолес", ПользовательНастроек);				
		КонецЕсли;
	КонецЕсли; 
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.65", СтррВерсии, ИзменитьНастройки) Тогда
		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();

		Настройка_СпособРасчетаПросроченныхДолгов    = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "СпособРасчетаПросроченныхДолгов"  ,, ПользовательНастроек);	
		Если Настройка_СпособРасчетаПросроченныхДолгов <> Неопределено Тогда
			Если Настройка_СпособРасчетаПросроченныхДолгов = "НеУчитывать" Тогда
				СтррЗначения.Вставить("ВыгружатьТолькоПросроченныеДолги", Ложь);
				СтррЗначения.Вставить("ВыделятьЦветомПросроченныеДолги", Ложь);
			КонецЕсли;
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена, "СпособРасчетаПросроченныхДолгов", ПользовательНастроек);	
		КонецЕсли;
		Если НЕ СтррЗначения.Свойство("ВыгружатьТолькоПросроченныеДолги") И ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ВыгружатьТолькоПросроченныеДолги"  ,, ПользовательНастроек) = Неопределено Тогда
			СтррЗначения.Вставить("ВыгружатьТолькоПросроченныеДолги", Ложь);	
		КонецЕсли;
		Если НЕ СтррЗначения.Свойство("ВыделятьЦветомПросроченныеДолги") И ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ВыделятьЦветомПросроченныеДолги"  ,, ПользовательНастроек) = Неопределено Тогда
			СтррЗначения.Вставить("ВыделятьЦветомПросроченныеДолги", Ложь);	
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.67", СтррВерсии, ИзменитьНастройки) Тогда
		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();
		
		Настройка_ИспользоватьАвтообмен = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ИспользоватьАвтообмен"  ,, ПользовательНастроек);	
		Если Настройка_ИспользоватьАвтообмен = Неопределено Тогда
			СтррЗначения.Вставить("ИспользоватьАвтообмен", Ложь);
		КонецЕсли;
		
		Настройка_ИнтервалАвтообмена    = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ИнтервалАвтообмена"  ,, ПользовательНастроек);	
		Если Настройка_ИнтервалАвтообмена = Неопределено ИЛИ Настройка_ИнтервалАвтообмена <= 5 Тогда
			СтррЗначения.Вставить("ИнтервалАвтообмена", 180);
		КонецЕсли;
	КонецЕсли;
	
	//Новая настройка ВыгружатьДолгиТолькоПоДокументамАгента И ПроводитьДокументыСписок
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.72", СтррВерсии, ИзменитьНастройки) Тогда
		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();
		
		Настройка = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ВыгружатьДолгиТолькоПоДокументамАгента"  ,, ПользовательНастроек);	
		Если Настройка = Неопределено Тогда
			СтррЗначения.Вставить("ВыгружатьДолгиТолькоПоДокументамАгента", Ложь);
		КонецЕсли;
		
		Настройка = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ПроводитьДокументыСписок"  ,, ПользовательНастроек);	
		Если Настройка = Неопределено Тогда
			СтррЗначения.Вставить("ПроводитьДокументыСписок", НастройкаПроводитьДокументыСписокПоУмолчанию());   
		КонецЕсли; 		
	КонецЕсли;
	                                      
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.74", СтррВерсии, ИзменитьНастройки) Тогда
		ЗаполнитьВидыЗадачПоУмолчанию();		
	КонецЕсли;	
	                                               
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.84", СтррВерсии, ИзменитьНастройки) Тогда
		Настройка_РежимВыгрузкиКодовНоменклатуры = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "РежимВыгрузкиКодовНоменклатуры"  ,, ПользовательНастроек);
		Если Настройка_РежимВыгрузкиКодовНоменклатуры = Неопределено ИЛИ Настройка_РежимВыгрузкиКодовНоменклатуры <> "АРТИКУЛ" Тогда
			СтррЗначения.Вставить("РежимВыгрузкиКодовНоменклатуры", "КОД");
		КонецЕсли;
		
		Настройка_ВыгружатьТоварыСНулевымОстатком = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ВыгружатьТоварыСНулевымОстатком"  ,, ПользовательНастроек);
		Если Настройка_ВыгружатьТоварыСНулевымОстатком = Неопределено Тогда
			СтррЗначения.Вставить("ВыгружатьТоварыСНулевымОстатком", Истина);
		КонецЕсли;
		
		Настройка_ЗагружатьДокументыТекущейДатой = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ЗагружатьДокументыТекущейДатой"  ,, ПользовательНастроек);
		Если Настройка_ЗагружатьДокументыТекущейДатой = Неопределено Тогда
			СтррЗначения.Вставить("ЗагружатьДокументыТекущейДатой", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.89", СтррВерсии, ИзменитьНастройки) Тогда
		МЗадачи = Новый Массив;
		МЗадачи.Добавить(Новый УникальныйИдентификатор("C5EC15E7-2861-47B5-AE87-4F145BF6CBF6")); // сделать фото
		ЗаполнитьВидыЗадачПоУмолчанию(МЗадачи);
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.93", СтррВерсии, ИзменитьНастройки) Тогда
		КлючНастроекОбмена   = КлючНастроекОбмена();
		ПользовательНастроек = ПользовательНастроек();
		Настройка_НастройкиАгентов = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "НастройкиАгентов",, ПользовательНастроек);
		Если Настройка_НастройкиАгентов <> Неопределено И Настройка_НастройкиАгентов.Колонки.Найти("Касса") = Неопределено Тогда
			Настройка_НастройкиАгентов.Колонки.Добавить("Касса", Новый ОписаниеТипов("СправочникСсылка.Кассы"));
			СтррЗначения.Вставить("НастройкиАгентов", Настройка_НастройкиАгентов);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.97", СтррВерсии, ИзменитьНастройки) Тогда
		Настройка_РежимВыгрузкиКодовНоменклатуры = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "КлиентМетрика", , ПользовательНастроек);
		Если Настройка_РежимВыгрузкиКодовНоменклатуры = Неопределено  Тогда
			СтррЗначения.Вставить("КлиентМетрика", Новый УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;

	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.108", СтррВерсии, ИзменитьНастройки) Тогда
		Настройка_РежимВыгрузкиКодовНоменклатуры = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "РазрешитьВозвратНаОснованииЗаказа", , ПользовательНастроек);
		Если Настройка_РежимВыгрузкиКодовНоменклатуры = Неопределено  Тогда
			СтррЗначения.Вставить("РазрешитьВозвратНаОснованииЗаказа", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.2.113", СтррВерсии, ИзменитьНастройки) Тогда
		Настройка_АвтонумераторДокументЗадание = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "АвтонумераторДокументЗадание", , ПользовательНастроек);
		Если Настройка_АвтонумераторДокументЗадание = Неопределено  Тогда
			СтррЗначения.Вставить("АвтонумераторДокументЗадание", 0);
		КонецЕсли;
		Настройка_АвтонумераторДокументПосещение = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "АвтонумераторДокументПосещение", , ПользовательНастроек);
		Если Настройка_АвтонумераторДокументПосещение = Неопределено  Тогда
			СтррЗначения.Вставить("АвтонумераторДокументПосещение", 0);
		КонецЕсли;
		Настройка_АвтонумераторДокументМерчендайзинг = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "АвтонумераторДокументМерчендайзинг", , ПользовательНастроек);
		Если Настройка_АвтонумераторДокументМерчендайзинг = Неопределено  Тогда
			СтррЗначения.Вставить("АвтонумераторДокументМерчендайзинг", 0);
		КонецЕсли;
	КонецЕсли;    
	   
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.3.2", СтррВерсии, ИзменитьНастройки) Тогда
		Настройка_СпискиТорговыхТочек = ПрочитатьЗначениеНастройки("СпискиТорговыхТочек");
		Если Настройка_СпискиТорговыхТочек <> Неопределено И Настройка_СпискиТорговыхТочек.Колонки.Найти("Ответственный") = Неопределено Тогда
			Настройка_СпискиТорговыхТочек.Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
			СохранитьЗначениеНастройки("СпискиТорговыхТочек", Настройка_СпискиТорговыхТочек);
		КонецЕсли;			
	КонецЕсли;
	  
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.3.4", СтррВерсии, ИзменитьНастройки) Тогда
		Настройка_СпискиТорговыхТочек = ПрочитатьЗначениеНастройки("СпискиТорговыхТочек");
		Если Настройка_СпискиТорговыхТочек <> Неопределено И Настройка_СпискиТорговыхТочек.Колонки.Найти("ДатаНачала") = Неопределено Тогда
			Настройка_СпискиТорговыхТочек.Колонки.Добавить("ДатаНачала", 			Новый ОписаниеТипов("Дата"));
			Настройка_СпискиТорговыхТочек.Колонки.Добавить("ДатаОкончания", 		Новый ОписаниеТипов("Дата"));
			Настройка_СпискиТорговыхТочек.Колонки.Добавить("ПериодГрафикаПлана",	Новый ОписаниеТипов("Число"));			
			Для Каждого стзНастройка_СпискиТорговыхТочек Из Настройка_СпискиТорговыхТочек Цикл
				СтррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", стзНастройка_СпискиТорговыхТочек.ID);
				Если СтррОбъект.Свойство("ДатаНачала") Тогда
					стзНастройка_СпискиТорговыхТочек.ДатаНачала = СтррОбъект.ДатаНачала;
				КонецЕсли;
				Если СтррОбъект.Свойство("ДатаОкончания") Тогда
					стзНастройка_СпискиТорговыхТочек.ДатаОкончания = СтррОбъект.ДатаОкончания;
				КонецЕсли;
				Если СтррОбъект.Свойство("ПериодГрафикаПлана") Тогда
					стзНастройка_СпискиТорговыхТочек.ПериодГрафикаПлана = СтррОбъект.ПериодГрафикаПлана;
				КонецЕсли;				
			КонецЦикла;
			СохранитьЗначениеНастройки("СпискиТорговыхТочек", Настройка_СпискиТорговыхТочек);
		КонецЕсли;			
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.3.5", СтррВерсии, ИзменитьНастройки) Тогда
		СтррВО = ВОСвойстваОбъекта("_ДополнительныеОтчетыДляМУ"); 
		Настройка_ДополнительныеОтчетыДляМУ = ПрочитатьЗначениеНастройки(СтррВО.РеквизитОбработки);
		Если Настройка_ДополнительныеОтчетыДляМУ <> Неопределено И Настройка_ДополнительныеОтчетыДляМУ.Колонки.Найти("IDМТ") = Неопределено Тогда
			Настройка_ДополнительныеОтчетыДляМУ.Колонки.Добавить("IDМТ",	Новый ОписаниеТипов("УникальныйИдентификатор"));
			Для Каждого стзНастройка_ДополнительныеОтчетыДляМУ Из Настройка_ДополнительныеОтчетыДляМУ Цикл
				стзНастройка_ДополнительныеОтчетыДляМУ.IDМТ = Новый УникальныйИдентификатор();	
			КонецЦикла;
			СохранитьЗначениеНастройки(СтррВО.РеквизитОбработки, Настройка_СпискиТорговыхТочек);
		КонецЕсли;			
	КонецЕсли;	
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.3.44", СтррВерсии, ИзменитьНастройки) Тогда
		Настройка_ВестиУчетМаркированныхТоваров = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена, "ВестиУчетМаркированныхТоваров"  ,, ПользовательНастроек);
		Если Не Настройка_ВестиУчетМаркированныхТоваров = Неопределено И Настройка_ВестиУчетМаркированныхТоваров Тогда
			СтррЗначения.Вставить("ВыгружатьШтрихКодыТоваров", "Истина");
		КонецЕсли;	
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.3.66", СтррВерсии, ИзменитьНастройки) Тогда
		СтррЗначения.Вставить("РежимРасчетаСкидок", "Рекомендуемый");
	КонецЕсли;
	
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.3.68", СтррВерсии, ИзменитьНастройки) Тогда
		СтррЗначения.Вставить("ЗагружатьВиртуальныеДокументы", Истина);
	КонецЕсли;
	
	//dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
	Если Не ЭтоПервыйЗапуск И ОбновитьДоВерсии("2.0.3.141", СтррВерсии, ИзменитьНастройки) Тогда
		СтррЗначения.Вставить("КаспиДанныеОрганизаций", ПолучитьТЗКаспиДанныеОрганизаций());
		СтррЗначения.Вставить("ИспользоватьОплатуКаспи", Ложь);
	КонецЕсли;
	
	//СОХРАНЕНИЕ	
	Если ИзменитьНастройки Или СтррВерсии.ВерсияИзВХ <> СтррВерсии.НоваяВерсия Тогда
		СтррЗначения.Вставить("ВерсияНастроек", СтррВерсии.НоваяВерсия); // обязательно записываем новую версию в настройки
		СохранитьЗначенияНастроекИзСтруктуры(СтррЗначения);
		Результат = СтрШаблон_(НСтр("ru = 'Обновлены настройки с версии %1 до версии %2.'"), СтррВерсии.ВерсияИзВХ, СтррВерсии.НоваяВерсия);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;	
КонецФункции   

// Процедура удаляет из значений атрибутов обработки СписокОчищаемыхДокументов и СписокОчищаемыхСправочников
// несуществующие виды документов и справочников, которые могли остаться от прежних версий обработки.
// Параметры:
//   СтррЗначения - Структура - после выполнения процедуры в структуре возвращается результат изменений.
//@skip-check module-unused-method
Процедура ОбновитьВидыДокументовИСправочниковВХранилище(СтррЗначения)
	
	СтррСписки = ПрочитатьЗначенияНастроек("СписокОчищаемыхДокументов,СписокОчищаемыхСправочников");
	
	Для Каждого ЭлементСтруктуры Из СтррСписки Цикл
		
		Если ЭлементСтруктуры.Значение = Неопределено Тогда // значение может отсутствовать в хранилище
			Продолжить;
		КонецЕсли;
		
		СписокВсех = ПолучитьВсеВидыОбъектовДляМУ(?(ЭлементСтруктуры.Ключ = "СписокОчищаемыхДокументов", "Документ", "Справочник"));
		МУдаляемыеЭлементы = Новый Массив;
		СписокПроверки = ЭлементСтруктуры.Значение;
		Для Каждого Элемент Из СписокПроверки Цикл
			Если СписокВсех.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				МУдаляемыеЭлементы.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из МУдаляемыеЭлементы Цикл
			СписокПроверки.Удалить(Элемент);
		КонецЦикла;
		
		Если МУдаляемыеЭлементы.Количество() <> 0 Тогда
			СтррЗначения.Вставить(ЭлементСтруктуры.Ключ, СписокПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина, если требуется обновить настройки обработки до новой версии обработки.
Функция ОбновитьДоВерсии(ВерсияОбновления, СтррВерсии, ИзменитьНастройки = Неопределено)
	
	Если СравнитьВерсии(ВерсияОбновления, СтррВерсии.НоваяВерсия) > 0 Тогда
		Возврат Ложь; // требуется обновиться до более новой версии, о которой обработка не знает (не знает как обновляться)
	ИначеЕсли СравнитьВерсии(ВерсияОбновления, СтррВерсии.ВерсияИзВХ) < 0 Тогда
		Возврат Ложь; // сохранены настройки от более новой версии обработки, чем версия обновления
	Иначе
		ИзменитьНастройки = Истина;
		Возврат Истина; // требуется обновить настройки до более новой версии
	КонецЕсли;
		
КонецФункции

// Функция заменяет название колонки в таблице значений.
// Возвращает Истина, если название колонки было заменено.
Функция ЗаменитьНазваниеКолонки(ТЗн, Название, НовоеНазвание, БылиИзменения = Неопределено)
	
	Если БылиИзменения = Неопределено Тогда
		БылиИзменения = Ложь;
	КонецЕсли; 
	
	Колонка = ТЗн.Колонки.Найти(Название);
	Если Колонка <> Неопределено Тогда
		Колонка.Имя = НовоеНазвание;
		БылиИзменения = Истина;
	КонецЕсли; 
	
	Возврат БылиИзменения;

КонецФункции

Функция НастройкаПроводитьДокументыСписокПоУмолчанию()
	
	СЗДокументы = ПолучитьВсеВидыОбъектовДля1C("Документ", "СоздаваемыеВМУ");
	
	Для Каждого Элемент Из СЗДокументы Цикл
		Элемент.Пометка = Истина;
	КонецЦикла;
	
	Возврат СЗДокументы;
	
КонецФункции

Процедура ЗаполнитьВидыЗадачПоУмолчанию(МЗадачи = Неопределено)
	
	Если НЕ (МЗадачи = Неопределено ИЛИ (ТипЗнч(МЗадачи) = Тип("Массив") И МЗадачи.Количество() > 0)) Тогда
		Возврат;
	КонецЕсли;
	
	//СтруктураВО
	СтррВО = ВОСвойстваОбъекта("_ВидыЗадач");
	
	//Получение ТЗ 	
	//ТЗВидыЗадач = ВОТЗЗагрузить(СтррВО);
	
	//Сохранение
	//@skip-check structure-consructor-too-many-keys
	СтррОбъект = Новый Структура("Статус, Наименование, ТипЗадачи, Группа, ВопросАнкеты"); //Группа, ВопросАнкеты - пока не используется на форме 
	СтррОбъект.Статус		= 3;
	СтррОбъект.Группа 		= Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	СтррОбъект.ВопросАнкеты = "";
	
	//Строка
	УИд = Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D");
	Если (МЗадачи = Неопределено ИЛИ МЗадачи.Найти(УИд) <> Неопределено) И ВОЭлементЗагрузить(СтррВО, УИд) = Неопределено Тогда
		СтррОбъект.Наименование = "Адрес доставки";
		СтррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D");
		ВОЭлементСохранить(СтррВО, УИд, СтррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;

	//Создать Заказ
	УИд = Новый УникальныйИдентификатор("EADED006-5271-4497-9222-79541D23E3FA");
	Если (МЗадачи = Неопределено ИЛИ МЗадачи.Найти(УИд) <> Неопределено) И ВОЭлементЗагрузить(СтррВО, УИд) = Неопределено Тогда
		СтррОбъект.Наименование = "Взять заказ";
		СтррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("EADED006-5271-4497-9222-79541D23E3FA");
		ВОЭлементСохранить(СтррВО, УИд, СтррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;
	
	//Дата
	УИд = Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26");
	Если (МЗадачи = Неопределено ИЛИ МЗадачи.Найти(УИд) <> Неопределено) И ВОЭлементЗагрузить(СтррВО, УИд) = Неопределено Тогда
		СтррОбъект.Наименование = "Желаемое время посещения";
		СтррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26");
		ВОЭлементСохранить(СтррВО, УИд, СтррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;
	
	//Строка
	УИд = Новый УникальныйИдентификатор("A7F5D83C-E157-4337-9170-6310931AB209");
	Если (МЗадачи = Неопределено ИЛИ МЗадачи.Найти(УИд) <> Неопределено) И ВОЭлементЗагрузить(СтррВО, УИд) = Неопределено Тогда
		СтррОбъект.Наименование = "Контактная информация";
		СтррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D");
		ВОЭлементСохранить(СтррВО, УИд, СтррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;
	
	//Булево
	УИд = Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E");
	Если (МЗадачи = Неопределено ИЛИ МЗадачи.Найти(УИд) <> Неопределено) И ВОЭлементЗагрузить(СтррВО, УИд) = Неопределено Тогда
		СтррОбъект.Наименование = "Отдать акт сверки";
		СтррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E");
		ВОЭлементСохранить(СтррВО, УИд, СтррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;
	
	//Булево
	УИд = Новый УникальныйИдентификатор("6A97D7C8-4177-4BD5-8F46-E71F4D914343");
	Если (МЗадачи = Неопределено ИЛИ МЗадачи.Найти(УИд) <> Неопределено) И ВОЭлементЗагрузить(СтррВО, УИд) = Неопределено Тогда
		СтррОбъект.Наименование = "Отдать печатный прайс";
		СтррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E");
		ВОЭлементСохранить(СтррВО, УИд, СтррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;
	
	//Сделать фото
	УИд = Новый УникальныйИдентификатор("C5EC15E7-2861-47B5-AE87-4F145BF6CBF6");
	Если (МЗадачи = Неопределено ИЛИ МЗадачи.Найти(УИд) <> Неопределено) И ВОЭлементЗагрузить(СтррВО, УИд) = Неопределено Тогда
		СтррОбъект.Наименование = "Контактная информация";
		СтррОбъект.ТипЗадачи	= Новый УникальныйИдентификатор("B483E5F9-95E6-4E2D-B6B2-D5954FCC25AE");
		ВОЭлементСохранить(СтррВО, УИд, СтррОбъект); //Сохраняет Элемент и его ТЗ
	КонецЕсли;	 	

Конецпроцедуры	

//dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
Функция ПолучитьТЗКаспиДанныеОрганизаций()
	
	СтррКолонкиКаспи = ПолучитьСтруктуруКолонок("КаспиДанныеОрганизаций");
	
	ТЗн = Новый ТаблицаЗначений;
	
	Для Каждого Элемент Из СтррКолонкиКаспи Цикл
		ТЗн.Колонки.Добавить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Возврат ТЗн;
	
КонецФункции

//dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
Функция ПолучитьСтруктуруКолонок(ИмяТаблицы)
	
	СтвКолонкиТаблиц = Новый Соответствие;
	
	СтррКолонкиКаспи = Новый Структура;
	СтррКолонкиКаспи.Вставить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СтррКолонкиКаспи.Вставить("Синоним", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	СтррКолонкиКаспи.Вставить("ИДОрганизации", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	СтррКолонкиКаспи.Вставить("ПараметрНомераДокумента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(5)));
	СтррКолонкиКаспи.Вставить("ПараметрФИОАгента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(5)));
	
	СтвКолонкиТаблиц.Вставить("КаспиДанныеОрганизаций", СтррКолонкиКаспи);
	
	Возврат СтвКолонкиТаблиц.Получить(ИмяТаблицы);
КонецФункции

// СлужебныеПроцедурыИФункции_ОбновлениеОбработки
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РасширениеСтруктуры

// Функция возвращает представление структуры в виде строки.
// Параметры:
//   Структура - Структура
//   ОграничениеДлиныПредставления - Число - максимальное число символов в результирующей строке.
// Возвращаемое значение:
//   Строка
Функция СтруктураПредставление(Структура, ОграничениеДлиныПредставления = 100) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(Структура) = Тип("Структура") Тогда
		
		Для Каждого Элемент Из Структура Цикл

			Тип = ТипЗнч(Элемент.Значение);
			Если Тип = Тип("Строка") Тогда
				ЗначениеСтр = "'" + СокрЛП(Элемент.Значение) + "'";
			ИначеЕсли Тип = Тип("СписокЗначений") Тогда
				ЗначениеСтр = "<Список N=" + Строка(Элемент.Значение.Количество()) + ">";
			ИначеЕсли Тип = Тип("Массив") Или Тип = Тип("ФиксированныйМассив") Тогда
				ЗначениеСтр = "<Массив N=" + Строка(Элемент.Значение.Количество()) + ">";
			Иначе
				ЗначениеСтр = Строка(Элемент.Значение);
			КонецЕсли;
			
			Если Результат <> "" Тогда
				Результат = Результат + "; ";
			КонецЕсли; 
			Результат = Результат + Элемент.Ключ + ": " + ЗначениеСтр;
			Если СтрДлина(Результат) >= ОграничениеДлиныПредставления Тогда
				Результат = Лев(Результат, ОграничениеДлиныПредставления - 3) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;		
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает список отсутствующих обязательных свойств.
Функция СтруктураОтсутствуютОбязательныеСвойства(Структура, СтрОбязательныеСвойства)
	
	СтрРезультат = "";
	
	Если ЗначениеЗаполнено(СтрОбязательныеСвойства) Тогда
		МассивСвойств = СтрРазделить_(СтрОбязательныеСвойства, ",");
		Для Каждого стрСвойство Из МассивСвойств Цикл
			Если Не Структура.Свойство(стрСвойство) Тогда
				СтрРезультат = СтрРезультат + ?(ПустаяСтрока(СтрРезультат), "", ",") + стрСвойство;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат СтрРезультат;
	
КонецФункции

// Функция проверяет наличие всех свойств структуры, названия свойств передаются в виде строки с разделителем ",".
// Параметры:
//   Структура - Структура
//   СтрСвойства - Строка - список названий проверяемых свойств.
// Возвращаемое значение:
//   Булево
Функция СтруктураЕстьСвойства(Структура, СтрСвойства) Экспорт
	
	Результат = Истина;
	
	Если ТипЗнч(Структура) <> Тип("Структура") Тогда
		Результат = Ложь;
	Иначе
		МассивСвойств = СтрРазделить_(СтрСвойства, ",");
		Для Каждого Элемент Из МассивСвойств Цикл
			Если Не Структура.Свойство(Элемент) Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураЗначениеСвойства(Структура, СтрСвойство)
	
	Перем Результат;
	Структура.Свойство(СтрСвойство, Результат);
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_РасширениеСтруктуры
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_РасширениеТаблицыЗначений

// Функция сокращает количество строк в ТЗн до заданного количества строк.
// Если удалялись лишние строки, то возвращается Истина.
Функция ТЗСократитьДоКоличестваСтрок(ТЗн, КоличествоСтрок)

	УдалитьСтрок = ТЗн.Количество() - КоличествоСтрок;
	Если УдалитьСтрок > 0 Тогда
		Для Поз = 1 По УдалитьСтрок Цикл
			ТЗн.Удалить(ТЗн.Получить(0));
		КонецЦикла;
	КонецЕсли;
	
	Возврат (УдалитьСтрок > 0);

КонецФункции

// Функция проверяет наличие колонок в таблице значений. Названия колонок передаются в виде строки с разделителем ",".
Функция ТЗЕстьКолонки(ТЗн, СтрКолонки)
	
	Результат = Истина;
	
	Если ТипЗнч(ТЗн) <> Тип("ТаблицаЗначений") Тогда
		Результат = Ложь;
	Иначе
		МКолонки = СтрРазделить_(СтрКолонки, ",");
		Для Каждого ИмяКолонки Из МКолонки Цикл
			Если ТЗн.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
// СлужебныеПроцедурыИФункции_РасширениеТаблицыЗначений
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ЧтениеЗаписьНастроекОбработки

// Функция возвращает строку-идентификатор пользователя для обращения к объекту ХранилищеСистемныхНастроек.
//@skip-check module-structure-method-in-regions
Функция ПользовательНастроек()

	Возврат "АгентПлюсОбменДанными";
	
КонецФункции 

// Функция возвращает строку-ключ настроек для обращения к объекту ХранилищеСистемныхНастроек.
//@skip-check module-structure-method-in-regions
Функция КлючНастроекОбмена()

	Возврат "АгентПлюсОбменДанными";
	
КонецФункции 

// Процедура сохраняет значения настроек обработки в ХранилищеСистемныхНастроек. 
// Параметры:
//		СтррНастройки - Структура - структура, где Ключ и Значение используются как:
//			Ключ 	 - название настройки обработки,
//			Значение - значение настройки обработки.
Процедура СохранитьЗначенияНастроекИзСтруктуры(СтррНастройки) Экспорт

	КлючНастроекОбмена   = КлючНастроекОбмена();
	ПользовательНастроек = ПользовательНастроек();
	
	Для Каждого Элемент Из СтррНастройки Цикл
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена, Элемент.Ключ, Элемент.Значение,, ПользовательНастроек);
	КонецЦикла;

КонецПроцедуры

// Функция сохраняет настройки в ХранилищеСистемныхНастроек или XML-файле с последующей записью во ВременноеХранилище.
// В качестве параметра передается строка с именами настроек через запятую.
// Параметры:
//   ИменаНастроек - Строка - названия настроек черех запятую.
//   СохранитьВВХ - Булево - если передано Истина, то соханить в ХранилищеСистемныхНастроек инача во ВременноеХранилище.
// Возвращаемое значение:
//   Булево - при записи в ХранилищеСистемныхНастроек.
//   Структура "ЕстьОшибки,Сообщения,АдресВХ" - при записи во ВременноеХранилище.    
Функция СохранитьЗначенияНастроекОбработки(ИменаНастроек, СохранитьВВХ = Ложь) Экспорт

	Результат = Истина;
	
	МассивИмен = СтрРазделить_(ИменаНастроек, ",", Ложь);
	
	Если Не СохранитьВВХ Тогда // запись в ХранилищеСистемныхНастроек
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), ИмяНастройки, ЭтотОбъект[ИмяНастройки], , ПользовательНастроек());
		КонецЦикла;
		
	Иначе // запись в XML-файл с последующей записью во ВременноеХранилище
		
		СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения,АдресВХ", Ложь, Новый Массив);
		
		ИмяФайла = КаталогВременныхФайлов() + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "") + ".xml";
		
		ДокXML = Новый ЗаписьXML();
		
		Попытка
			ДокXML.ОткрытьФайл(ИмяФайла);
			ДокXML.ЗаписатьОбъявлениеXML();	
			ДокXML.ЗаписатьНачалоЭлемента("Settings");

			ДокXML.ЗаписатьАтрибут("Generator", 		"Module1C");
			
			ДокXML.ЗаписатьАтрибут("ModuleVersion", 	ВерсияОбработки());
			ДокXML.ЗаписатьАтрибут("ModuleName", 		"APMTBase");
			
			ДокXML.ЗаписатьАтрибут("ProductName", 		Метаданные.Имя);
			ДокXML.ЗаписатьАтрибут("ProductVer", 	 	Метаданные.Версия); 
			ДокXML.ЗаписатьАтрибут("Compatibility", 	Строка(Метаданные.РежимСовместимости));
			ДокXML.ЗаписатьАтрибут("UICompatibility",	Строка(Метаданные.РежимСовместимостиИнтерфейса));
			//ДокXML.ЗаписатьАтрибут("PlatformVersion",	СистемнаяИнформация.ВерсияПриложения);
			//ДокXML.ЗаписатьАтрибут("OSVersion",		СистемнаяИнформация.ВерсияОС);
			//ДокXML.ЗаписатьАтрибут("OSType",			СистемнаяИнформация.ТипПлатформы);
			
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Ошибка создания файла настроек ""%1"". Причина: %2'"), ИмяФайла, ОписаниеОшибки());
			ВывестиСообщение(СтррРезультат, Текст, Истина);
			Возврат СтррРезультат;
		КонецПопытки;
		
		ДокXML.ЗаписатьНачалоЭлемента("Root");
		ДокXML.ЗаписатьНачалоЭлемента("Attributes");
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ДокXML.ЗаписатьНачалоЭлемента("Item");
			ДобавитьПоле(ДокXML, "Name",  ИмяНастройки);
			ДобавитьПоле(ДокXML, "Value", ЗначениеВСтрокуДляXML(ЭтотОбъект[ИмяНастройки]));
			ДокXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ДокXML.ЗаписатьКонецЭлемента(); // "Attributes"
		ДокXML.ЗаписатьКонецЭлемента(); // "Root"
		ДокXML.ЗаписатьКонецЭлемента(); // "Settings"
		
		ДокXML.Закрыть();
		
		СтррРезультат.АдресВХ = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
		УдалитьФайлы(ИмяФайла);
		
		Результат = СтррРезультат;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Процедура загружает реквизиты обработки значениями из хранилища системных настроек.
// 
// Параметры:
//	 ИменаНастроек - Строка - строка с именами настроек через запятую.
//	 ПеренестиТаблицыВоВременныеТаблицы - Булево - если Истина, то загружать таблицы значений в структуру ВременныеТаблицы (реквизит обработки).
//
Процедура ВосстановитьЗначенияНастроекОбработки(ИменаНастроек, ПеренестиТаблицыВоВременныеТаблицы = Ложь) Экспорт

	Если Не ЗначениеЗаполнено(ИменаНастроек) Тогда
		Возврат;
	КонецЕсли; 
	
	Имена = СтрЗаменить(ИменаНастроек, ",ВременныеТаблицы", "");
	
	СтррНастройки = ПрочитатьЗначенияНастроек(Имена);
	
	ТипТЗ = Тип("ТаблицаЗначений");	
	
	ВременныеТаблицы = Новый Структура;		

	Для Каждого Элемент Из СтррНастройки Цикл
		Ключ = Элемент.Ключ;
		Значение = Элемент.Значение;
		Если ТипЗнч(Значение) = ТипТЗ Тогда
			Если ПеренестиТаблицыВоВременныеТаблицы Тогда
				ВременныеТаблицы.Вставить(Ключ, Значение);
			Иначе
				ЭтотОбъект[Ключ] = Значение.Скопировать();
			КонецЕсли;
		Иначе
			ЭтотОбъект[Ключ] = Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Функция загружает реквизиты обработки значениями из XML-файла из временного хранилища.
// 
// Параметры:
//	 ИменаНастроек - Строка - строка с именами настроек через запятую.
//	 АдресВХ 	  - Строка - адрес XML-файла настроек во временном хранилище.
// Возвращаемое значение:
//   Структура:
//     * ЕстьОшибки - Булево - Истиина, если были ошибки чтения.
//     * Сообщения - Массив Из Строка - сообщения
//     * ВсегоИзменений - Число - количество изменений
//
Функция ЗагрузитьЗначенияНастроекОбработкиИзВХ(ИменаНастроек, АдресВХ) Экспорт

	Имена = "," + ВРег(ИменаНастроек) + ",";
	
	СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения,ВсегоИзменений", Ложь, Новый Массив, 0);
	
	Данные = ПолучитьИзВременногоХранилища(АдресВХ);
	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'В хранилище отсутствует XML-файл настроек.'"), Истина);
		Возврат СтррРезультат;
	КонецЕсли;
	
	ФайлНастроек = КаталогВременныхФайлов() + "apconfig.xml";
	Данные.Записать(ФайлНастроек);
	
	ДокXML = Новый ЧтениеXML;
    ДокXML.ОткрытьФайл(ФайлНастроек);
	
	ФайлКорректный 			 = Ложь;
	ЕстьТэгSettings 		 = Ложь;
	ВыведенЗаголовокЗагрузки = Ложь;		
 
    Пока ДокXML.Прочитать() Цикл
 
        Если ДокXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
		 	ИмяУзла = ВРег(ДокXML.Name);
			
			Если ИмяУзла = "SETTINGS" Тогда
				
				ЕстьТэгSettings = Истина;
				
				ЦелевойМодуль = ДокXML.ЗначениеАтрибута("ModuleName");
				ЦелеваяВерсия = ДокXML.ЗначениеАтрибута("ModuleVersion");					
				
				Если ЦелевойМодуль = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Отсутствувет атрибут %1 узла ""Settings""!'"), "ModuleName");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
				КонецЕсли;
				
				Если ЦелеваяВерсия = Неопределено Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Отсутствувет атрибут %1 узла ""Settings""!'"), "ModuleVersion");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
				КонецЕсли;
				
				Если ЦелевойМодуль = Неопределено Или ЦелеваяВерсия = Неопределено Тогда 
					ДокXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ВРег(ЦелевойМодуль) <> "APMTBASE" Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Настройки предназначены для другого модуля (ModuleName = %1, ожидаемое значение: %2)!'"), 
						ЦелевойМодуль, "APMTBase");
					ВывестиСообщение(СтррРезультат, Текст, Истина);
					ДокXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Сравнение = СравнитьВерсии(ВерсияОбработки(), ЦелеваяВерсия);
				Если Сравнение <> 0 Тогда
					Разница = ?(Сравнение < 0, НСтр("ru = 'более новой'"), НСтр("ru = 'более старой'"));
					Текст = СтрШаблон_(НСтр("ru = 'Получены настройки для обработки %1 версии (%2)!'"), Разница, ЦелеваяВерсия);
					ВывестиСообщение(СтррРезультат, Текст);
				КонецЕсли;
				
				ФайлКорректный = Истина;
				
			ИначеЕсли ИмяУзла = "ITEM" И ФайлКорректный Тогда
				
				Если Не ВыведенЗаголовокЗагрузки Тогда
					ВывестиСообщение(СтррРезультат,  НСтр("ru = 'Чтение значений настроек...'"));
					ВыведенЗаголовокЗагрузки = Истина;
				КонецЕсли;
				
				Имя = ДокXML.ЗначениеАтрибута("Name");
				//@skip-check use-non-recommended-method
				Если 0 = Найти(Имена, "," + ВРег(Имя) + ",") Тогда
					// загружаем только реквизиты, указанные в параметре Имена
				ИначеЕсли Не ЕстьРеквизитОбъекта(Имя, ЭтотОбъект) Тогда
					Текст = СтрШаблон_(НСтр("ru = 'Пропущен параметр (отсутствует в обработке): ""%1"".'"), Имя);
					ВывестиСообщение(СтррРезультат, Текст);
				Иначе
					Значение = ЗначениеИзСтрокиXML(ДокXML.ЗначениеАтрибута("Value"), ТипЗнч(ЭтотОбъект[Имя]));
					Если ЭтотОбъект[Имя] <> Значение Тогда // изменилось значение реквизита, загружаем новое значение
						ЭтотОбъект[Имя] = Значение;
						Если СтррРезультат.ВсегоИзменений = 0 Тогда
							ВывестиСообщение(СтррРезультат, НСтр("ru = 'Получены новые значения параметров настройки:'"));
						КонецЕсли;
						СтррРезультат.ВсегоИзменений = СтррРезультат.ВсегоИзменений + 1;
						Текст = СтрШаблон_(НСтр("ru = '%1. ""%2""'"), СтррРезультат.ВсегоИзменений, Имя);
						ВывестиСообщение(СтррРезультат, Текст);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;					
 
        КонецЕсли;
 
    КонецЦикла; 
 
    ДокXML.Закрыть();
	
	Если Не ЕстьТэгSettings Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Файл не является файлом настроек - ожидается тэг ""Settings"".'"), Истина);
	КонецЕсли;
	
	Возврат СтррРезультат;

КонецФункции

// Функция возвращает структуру с прочитанными настройками из хранилища системных настроек.
// Параметры:
//	 СтрИменаНастроек - Строка - строка имен настроек, перечисленных через запятую.
//	 ЗначениеПоУмолчанию - Произвольный - возвращаемое значение настройки, если исходное значение настройки оказалось равным Неопределено.
//
// Возвращаемое значение:
//  Структура - значения прочитанных настроек.
//
Функция ПрочитатьЗначенияНастроек(СтрИменаНастроек, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	МассивИмен = СтрРазделить_(СтрИменаНастроек, ",", Ложь);
	
	СтррРезультат = Новый Структура(СтрИменаНастроек);
	Ключ 		 = КлючНастроекОбмена();
	Пользователь = ПользовательНастроек();
	
	Если ЗначениеПоУмолчанию = Неопределено Тогда // не проверяем прочитанные значения на Неопределено
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(Ключ, ИмяНастройки,, Пользователь);
			СтррРезультат.Вставить(ИмяНастройки, ЗначениеНастройки);
		КонецЦикла;
		
	Иначе // проверяем прочитанные значение на Неопределено и заменяем такие значения на ЗначениеПоУмолчанию	
		
		Для Каждого ИмяНастройки Из МассивИмен Цикл
			ЗначениеНастройки = ХранилищеСистемныхНастроек.Загрузить(Ключ, ИмяНастройки,, Пользователь);
			Если ЗначениеНастройки <> Неопределено Тогда
				СтррРезультат.Вставить(ИмяНастройки, ЗначениеНастройки);
			Иначе
				СтррРезультат.Вставить(ИмяНастройки, ЗначениеПоУмолчанию);			
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат СтррРезультат;

КонецФункции

// Удаляет настройки из хранилища.
// В качестве параметра передается строка с именами настроек через запятую или массив имен настроек.
//@skip-check module-structure-method-in-regions
Процедура УдалитьЗначенияНастроек(ИменаНастроек)
	
	ТипПараметра = ТипЗнч(ИменаНастроек);
	Если ТипПараметра = Тип("Строка") Тогда
		МассивИмен = СтрРазделить_(ИменаНастроек, ",", Ложь);
	ИначеЕсли ТипПараметра = Тип("Массив") Тогда
		МассивИмен = ИменаНастроек;
	Иначе
		ВызватьИсключение("Процедура УдалитьЗначенияНастроек() - неизвестный тип папаметра ИменаНастроек - " + Строка(ТипПараметра));
	КонецЕсли;
	
	Для Каждого ИмяНастройки Из МассивИмен Цикл
		Попытка
			ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), ИмяНастройки, ПользовательНастроек());
		Исключение
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось удалить системную настройку: " + ИмяНастройки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение настройки, прочитанной из ХранилищеСистемныхНастроек.
// В параметре передается имя настройки.
// Параметры:
//   ИмяНастройки - Строка - название настройки.
//   ИспользоватьКэш - Булево - признак откуда читать настройки - из кэша или из ХранилищеСистемныхНастроек.
// Возвращаемое значение:
//   Произвольный - значение прочитанной настройки.
Функция ПрочитатьЗначениеНастройки(ИмяНастройки, ИспользоватьКэш = Ложь) Экспорт
	
	Если Не ИспользоватьКэш Тогда
		Возврат ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена(), ИмяНастройки, , ПользовательНастроек());
	Иначе
		Если ГКэшНастроек = Неопределено Тогда
			ГКэшНастроек = Новый Соответствие;
		КонецЕсли; 
		Значение = ГКэшНастроек.Получить(ИмяНастройки);
		Если Значение = Неопределено Тогда
			Значение = ХранилищеСистемныхНастроек.Загрузить(КлючНастроекОбмена(), ИмяНастройки, , ПользовательНастроек());
			ГКэшНастроек.Вставить(ИмяНастройки, Значение);
		КонецЕсли; 
		Возврат Значение;
	КонецЕсли; 

КонецФункции

//@skip-check module-structure-method-in-regions
Функция ПрочитатьЗначениеНастройкиПоУмолчанию(ИмяНастройки, ЗначениеПоУмолчанию)
	
	Значение = ПрочитатьЗначениеНастройки(ИмяНастройки, Истина);
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли; 
	
КонецФункции

// Сохраняет значение настройки в ХранилищеСистемныхНастроек.
// Параметры:
//   ИмяНастройки - Строка - название настройки.
//   Значение - Произвольный - значение настройки.
Процедура СохранитьЗначениеНастройки(ИмяНастройки, Значение) Экспорт

	ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), ИмяНастройки, Значение, , ПользовательНастроек());
		
КонецПроцедуры

// Процедура удаляет значение настройки из хранилища.
// Параметры:
//   ИмяНастройки - Строка - название настройки.
//@skip-check module-structure-method-in-regions
//@skip-check module-unused-method
Процедура УдалитьЗначениеНастройки(ИмяНастройки)
	
	ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), ИмяНастройки, ПользовательНастроек());
	
КонецПроцедуры	

// Функция возвращает заполненную структуру объекта, прочитанного из хранилища.
// В структуре проставлены значения свойств в соответствии с данными в хранилище БД, найденными по ключу UUID.
// Параметры:
//   Префикс - Строка - префикс, используемый в качестве имени значения из хранилища.
//   UUID - УникальныйИдентификатор - идентификатор объекта.
// Возвращаемое значение:
//   Произвольный - значение прочитанной настройки (точнее, значение типа Стрруктура).
Функция ПолучитьОбъектИзХранилища(Префикс, UUID) Экспорт

	Если UUID = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПрочитатьЗначениеНастройки(Префикс + Строка(UUID));
	КонецЕсли; 

КонецФункции 

// Процедура сохраняет заполненную структуру объекта в хранилище.
// Параметры:
//   Префикс - Строка - префикс, используемый в качестве имени значения из хранилища.
//   UUID - УникальныйИдентификатор - идентификатор объекта.
//   СтррОбъект - Структура - сохраняемый объект в виде структуры.   	
Процедура СохранитьОбъектВХранилище(Префикс, UUID, СтррОбъект) Экспорт

	СохранитьЗначениеНастройки(Префикс + Строка(UUID), СтррОбъект);

КонецПроцедуры

// Процедура удаляет объект из хранилища.
// Параметры:
//   Префикс - Строка - префикс, используемый в качестве имени значения из хранилища.
//   UUID - УникальныйИдентификатор - идентификатор объекта.
Процедура УдалитьОбъектИзХранилища(Префикс, UUID) Экспорт
	
	УдалитьЗначениеНастройки(Префикс + Строка(UUID));
	
КонецПроцедуры

// Процедура удаляет объекты из хранилища.
// Параметры:
//   Префикс - Строка - префикс, используемый в качестве имени значения из хранилища.
//   МИдентификаторы - Массив Из УникальныйИдентификатор - идентификаторы удаляемый объектов.   	
Процедура УдалитьОбъектыИзХранилища(Префикс, МИдентификаторы) Экспорт
	
	Для Каждого UUID Из МИдентификаторы Цикл
		УдалитьОбъектИзХранилища(Префикс, UUID)
	КонецЦикла; 
	
КонецПроцедуры

// Процедура полностью удаляет все настройки модуля.
// Параметры:
// 	СтррРезультат - Структура - структура для возвращения результата. Свойства:
// 		ОшибокНет - Булево - Истина, если ошибок нет и Ложь, если есть ошибки удаления (сбросить настройки не удалось).
// 		Описание  - Строка - описание ошибки.
// 	
Процедура СброситьВсеНастройкиМодуля(СтррРезультат) Экспорт
	
	СтррРезультат.ОшибокНет = Ложь;
	СтррРезультат.Описание  = "Неизвестная ошибка.";
	
	Попытка
		ХранилищеСистемныхНастроек.Удалить(КлючНастроекОбмена(), , ПользовательНастроек());
		//@skip-check undefined-variable
		//@skip-check use-non-recommended-method
		Текст = СтрШаблон_("Настройки сброшены %1." + Символы.ПС + "Пользователь: %2.", ТекущаяДата(), Пользователи.ТекущийПользователь());
		ХранилищеСистемныхНастроек.Сохранить(КлючНастроекОбмена(), "НастройкиСброшены", Текст, , ПользовательНастроек());
		СтррРезультат.ОшибокНет = Истина;
	Исключение
		СтррРезультат.Описание = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

// Процедура загружает реквизиты объекта (модуля) с правильной обработкой значений типа ТаблицаЗначений.
// Параметры:
//   Модуль - Неопределено - модуль объекта.
//   СтррОбъект - Структура - свойства объекта
//	
Процедура ЗаполнитьРеквизитыОбъектаИзСтруктуры(Модуль, СтррОбъект) Экспорт
	
	ТипТЗ = Тип("ТаблицаЗначений");
	СтрРеквизитыТЗ = Неопределено;
	МРеквизитыТЗ = Новый Массив;
	Для Каждого Элемент Из СтррОбъект Цикл
		Если ТипЗнч(Элемент.Значение) = ТипТЗ Тогда
			СтрРеквизитыТЗ = ?(СтрРеквизитыТЗ = Неопределено, "", СтрРеквизитыТЗ + ",") + Элемент.Ключ;
			МРеквизитыТЗ.Добавить(Элемент.Ключ);
		КонецЕсли; 
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(Модуль, СтррОбъект, ,СтрРеквизитыТЗ);
	//ЗаполнитьЗначенияСвойств(Модуль, СтррОбъект, ,);
	
	Стр1С = "";
	Для Каждого ИмяРеквизита Из МРеквизитыТЗ Цикл
		Стр1С = Стр1С + СтрЗаменить("Модуль.%1.Загрузить(СтррОбъект.%1); ", "%1", ИмяРеквизита);
	КонецЦикла;
	
	Если Стр1С <> "" Тогда
		УстановитьБезопасныйРежим(Истина); // gi_240223 - добавлено по требованию EDT 
		Выполнить(Стр1С);
	КонецЕсли; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ЧтениеЗаписьНастроекОбработки
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ВерсииКонфигурации

// Возвращает Истина, если диалоговые элементы конфигурации в стиле Такси.
// Возвращаемое значение:
//   Булево
Функция КонфигурацияРазмерностьЭлементовФормыДляТакси() Экспорт
	
	Возврат КонфигурацияРежимСовместимости(">=8.3.7");
	
КонецФункции

// Сравнивает версию режима совместимости платформы 1С по результату вычисления сранения в переданном параметре.
// Параметры:
//   СтрокаСравненияВерсии - Строка - строка сравнения версии вида "{Операция_сравнения}{Версия}", например: ">=8.3.7"
//      Возхможные значения секции "Операция_сравнения": "<", "=", ">", "<>", "<=", ">=".
//      Если секция пустая, то её значение приравнивается к "=".
// Возвращаемое значение:
//   Булево
Функция КонфигурацияРежимСовместимости(СтрокаСравненияВерсии) Экспорт
	
	ТекущийРежим = Метаданные.РежимСовместимости;

	Если ТекущийРежим = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать Тогда
		СисИнфо = Новый СистемнаяИнформация;
		СтрВерсияПлатформы = СисИнфо.ВерсияПриложения;
	Иначе
		СтрВерсияПлатформы = ПолучитьВерисиюИзСтроки(СтрЗаменить(Строка(ТекущийРежим), "_", "."));
	КонецЕсли; 
	
	СтрокаСравнения = СтрЗаменить(СтрокаСравненияВерсии, " ", "");
	// Длина = стрДлина(СтрокаСравнения);
	ЗнакСравнения = "";
	Для Индекс = 1 По 2 Цикл
		Символ = Сред(СтрокаСравнения, Индекс, 1);
		Если КодСимвола(Символ) >= 60 И КодСимвола(Символ) <= 62 Тогда
			ЗнакСравнения = ЗнакСравнения + Символ;
		КонецЕсли; 
	КонецЦикла;
	
	Если ЗнакСравнения = "" Тогда
		ЗнакСравнения = "=";
	Иначе
		СтрОперации = ",<,=,>,<>,<=,>=,";
		//@skip-check use-non-recommended-method
		Если Найти(СтрОперации, "," + ЗнакСравнения + ",") = 0 Тогда
			Текст = "Функция КонфигурацияСравнитьРежимСовместимости(): неверное значение параметра ""строкаСравненияВерсии"" = ""%1""!" + Символы.ПС
				+ "Значение должно начинаться с операции сравнения (<, =, >, <>, <= или >=)!";
			ВызватьИсключение(СтрШаблон_(Текст, СтрокаСравненияВерсии));
		КонецЕсли;
	КонецЕсли;
	
	Сравнение = СравнитьВерсии(СтрВерсияПлатформы, Сред(СтрокаСравнения, СтрДлина(ЗнакСравнения)+1));
	
	Если ЗнакСравнения = ">=" Тогда
		Значение = (Сравнение >= 0);
	ИначеЕсли ЗнакСравнения = "<=" Тогда
		Значение = (Сравнение <= 0);
	ИначеЕсли ЗнакСравнения = "<" Тогда
		Значение = (Сравнение < 0);
	ИначеЕсли ЗнакСравнения = ">" Тогда
		Значение = (Сравнение > 0);
	ИначеЕсли ЗнакСравнения = "=" Тогда
		Значение = (Сравнение = 0);
	ИначеЕсли ЗнакСравнения = "<>" Тогда
		Значение = (Сравнение <> 0);
	Иначе
		ВызватьИсключение("Функция КонфигурацияСравнитьРежимСовместимости() - неизвестный оператор сравнения: " + ЗнакСравнения);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Функция извлекает из строки значение номера версии.
// Возвращаемое значение:
//   Строка
Функция ПолучитьВерисиюИзСтроки(Знач СтрРежим) 
	
	СтрВерсия = "";
	СтрРежим = СтрЗаменить(СтрРежим, "_", ".");
	Длина = СтрДлина(СтрРежим);
	Для Индекс = 1 По Длина Цикл
		Символ = Сред(СтрРежим, Индекс, 1);
		Код = КодСимвола(Символ);
		Если Код = 46 Или (Код >= 48 И Код <= 57) Тогда
		    СтрВерсия = СтрВерсия + Символ;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат СтрВерсия;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ВерсииКонфигурации
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РеквизитыОбъекта

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект) Экспорт
	
	ПроверкаРеквизита = Новый Структура(ИмяРеквизита, "2B8C0DC0-38EE-4B6A-883D-F432FCC0C5E1");
	ЗаполнитьЗначенияСвойств(ПроверкаРеквизита, Объект);
	Возврат ПроверкаРеквизита[ИмяРеквизита] <> "2B8C0DC0-38EE-4B6A-883D-F432FCC0C5E1";
	
КонецФункции

// Функция возвращает название реквизита, найденного среди реквизитов метаданных объекта.
// Ищутся названия реквизитов, указанных в параметре СтрРеквизиты.
// Если ни один из реквизитов не найден, возвращается Неопределено.
// Параметры:
//   МетаданныеОбъекта - ОбъектМетаданных - метаданные объекта.
//   СтрРеквизиты - Строка - список реквизитов через щапятую.
// Возвращаемое значение:
//   Строка
Функция РеквизитОбъектаИзСписка(МетаданныеОбъекта, СтрРеквизиты) Экспорт
	
	Результат = Неопределено;
	
	МРеквизиты = СтрРазделить_(СтрРеквизиты);
	МтдРеквизиты = МетаданныеОбъекта.Реквизиты;
	Для Каждого стрРеквизит Из МРеквизиты Цикл
		Если МтдРеквизиты.Найти(стрРеквизит) <> Неопределено Тогда
			Результат = стрРеквизит;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Функция возвращает значение реквизита объекта с учетом конфигурации (например, когда
// в разных версиях конфигураций реквизит называется по-разному).
Функция РеквизитОбъекта(ИмяРеквизита)
	
	Значение = ГКэшРеквизитыОбъектов.Получить(ИмяРеквизита);
	
	Если Значение = Неопределено Тогда
		
		Если ИмяРеквизита = "Спр_Пользователи_Подразделение" Тогда
			Реквизиты = Метаданные.Справочники.Пользователи.Реквизиты;
			Если Реквизиты.Найти("ТекущееПодразделение") <> Неопределено Тогда
				Значение = "ТекущееПодразделение";
			ИначеЕсли Реквизиты.Найти("Подразделение") <> Неопределено Тогда
				Значение = "Подразделение";
			Иначе
				ВызватьИсключение("Не удалось найти реквизит для объекта: " + ИмяРеквизита);
			КонецЕсли;
		Иначе
			ВызватьИсключение("Функция РеквизитОбъекта(), неизвестный параметр = " + ИмяРеквизита);
			
		КонецЕсли;
		
		ГКэшРеквизитыОбъектов.Вставить(ИмяРеквизита, Значение);		
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПроверитьНаличиеРеквизита(Ссылка, Реквизиит)
	
	СтррПроверки = Новый Структура(Реквизиит, null);
	ЗаполнитьЗначенияСвойств(СтррПроверки, Ссылка);
	
	Если СтррПроверки[Реквизиит] = null Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
		
КонецФункции

// СлужебныеПроцедурыИФункции_РеквизитыОбъекта
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ПреобразованияЦветСтрока

Функция ЦветВСтроку(Цвет)
	
	Возврат СтрЗаменить(Строка(Цвет), " ", "");
	
КонецФункции

Функция ЦветИзСтроки(Знач СтрЦвет)
	
	Если СтрЧислоВхождений(СтрЦвет, ",") <> 2 Тогда // неверный формат значения в СтрЦвет
		СтрЦвет = "0,0,0";
	КонецЕсли;
	
	МЦвета = СтрРазделить_(СтрЦвет, ",");
	
	Красный = СтрокуВЧислоЦвета(МЦвета[0]);
	Зеленый = СтрокуВЧислоЦвета(МЦвета[1]);
	Синий   = СтрокуВЧислоЦвета(МЦвета[2]);
	
	//@skip-check new-color
	Возврат Новый Цвет(Красный, Зеленый, Синий);
	
КонецФункции

Функция СтрокуВЧислоЦвета(Строка)
	
	СтрРезультат = "";
	
	Для Поз = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Поз, 1);
		Если КодСимвола(Символ) >= 48 И КодСимвола(Символ) <= 57 Тогда
			СтрРезультат = СтрРезультат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(СтрДлина(СтрРезультат) = 0, 0, Число(СтрРезультат) % 256);
	
КонецФункции

// СлужебныеПроцедурыИФункции_ПреобразованияЦветСтрока
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ФайловаяСистема

Функция КаталогСуществует(ПутьККаталогу)
	
	//{{gi_240730 обернуто в Попытка / Исключение 
	Попытка 
		ОбъектКаталог = Новый Файл(ПутьККаталогу);
		Возврат ОбъектКаталог.Существует() И ОбъектКаталог.ЭтоКаталог();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	//}}gi_240730
	
КонецФункции

Функция ФайлСуществует(ПутьКФайлу)
	
	//{{gi_240730 обернуто в Попытка / Исключение
	Попытка 
		ФайлОбъект = Новый Файл(ПутьКФайлу);
		Возврат ФайлОбъект.Существует();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	//}}gi_240730

КонецФункции

Функция ФайлИзвлечьИмя(ПутьИИмяФайла)
	
	Результат = "";
	
	Слеш = ?(ЭтоLinuxСервер(), "/", "\");

	Длина = СтрДлина(ПутьИИмяФайла);
	Для Индекс = 1 По Длина Цикл
		Символ = Сред(ПутьИИмяФайла, Длина - Индекс + 1, 1);
		Если Символ = Слеш Тогда
			Прервать;
		Иначе
			Результат = Символ + Результат;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции 

// Проверяет существование каталога, если он не существует, то создается новый.
Функция ПроверитьИСоздатьКаталог(ПутьККаталогу, ПроверитьПослеСоздания = Ложь)

	Если Не КаталогСуществует(ПутьККаталогу) Тогда
		Попытка
			СоздатьКаталог(ПутьККаталогу);
			Если ПроверитьПослеСоздания Тогда
				Возврат КаталогСуществует(ПутьККаталогу);
			КонецЕсли;
		Исключение
			Текст = СтрШаблон_("Не удалось создать папку по пути: ""%1"".", ПутьККаталогу)
				+ Символы.ПС + "Проверьте права доступа к папке и всем подпапкам на %1-сервере.";
			Если ЭтоLinuxСервер() Тогда
				Текст = СтрШаблон_(Текст, "Linux");
			Иначе
				Текст = СтрШаблон_(Текст, "Windows");
			КонецЕсли; 
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Применяется только для сервера.
// Параметры:
//   Каталог - Строка - путь к каталогу
//   Слеш - Строка, Неопределено - символ слеша (символ-разделитель в пути к файлам)
// Возвращаемое значение:
//   Строка
Функция ДополнитьСлешВПуть(Каталог, Слеш = Неопределено) Экспорт

	Если Слеш = Неопределено Тогда
		Слеш = ?(ЭтоLinuxСервер(), "/", "\");
	КонецЕсли; 
	
	Если Прав(Каталог, 1) <> Слеш Тогда
		Возврат Каталог + Слеш;
	Иначе
		Возврат Каталог;		
	КонецЕсли;

КонецФункции 

// Функция возвращает имя файла обработки.
// Возвращаемое значение:
//   Строка
Функция ИмяФайлаОбработки() Экспорт

	Возврат Метаданные().Имя + ".epf";

КонецФункции 

// СлужебныеПроцедурыИФункции_ФайловаяСистема
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КаталогиМодуля

Функция КаталогВременныхФайловАгента()

	Результат = КаталогВременныхФайлов() + "AP20TMP";
	ПроверитьИСоздатьКаталог(Результат);
	
	Результат = ДополнитьСлешВПуть(Результат) + ВыбНастройкиАгента.КаталогОбмена;
	ПроверитьИСоздатьКаталог(Результат);
	
	Возврат ДополнитьСлешВПуть(Результат);
	
КонецФункции

Функция КаталогВременныхФайловДляТранспорта(Подкаталог = "") Экспорт
	
	Каталог = КаталогВременныхФайлов() + "APtmp";
	Результат = ПроверитьИСоздатьКаталог(Каталог, Истина);
	Если Не Результат Тогда
		ВызватьИсключение("Не удалось создать временный каталог для обмена данными: " + Каталог);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Подкаталог) Тогда
		Каталог = ДополнитьСлешВПуть(Каталог) + Подкаталог;
		Результат = ПроверитьИСоздатьКаталог(Каталог, Истина);
		Если Не Результат Тогда
			ВызватьИсключение("Не удалось создать временный подкаталог для обмена данными: " + Каталог);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнитьСлешВПуть(Каталог);
	
КонецФункции

Функция КаталогФайловТрековАгента()

	КаталогТреков = ПодкаталогДанных("Треки",, Истина);
	
	КаталогТрековАгента = ДополнитьСлешВПуть(КаталогТреков) + ВыбНастройкиАгента.КаталогОбмена;
	Если Не ПроверитьИСоздатьКаталог(КаталогТрековАгента, Истина) Тогда
		Текст = "Не удалось создать каталог хранения треков для агента ""%1"", каталог - ""%2""!";
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь, КаталогТрековАгента);
		ВызватьИсключение(Текст);
	КонецЕсли;
	
	Возврат ДополнитьСлешВПуть(КаталогТрековАгента);
	
КонецФункции // КаталогФайловТрекинга()

Функция ПодкаталогиДанных() Экспорт

	//@skip-check structure-consructor-too-many-keys
	Возврат Новый Структура("КаталогОбмена,Логи,Треки,Входящие,Исходящие,АПДиск,Фотографии", // назначения подкаталогов
							"Exchange", "Logs", "Tracks", "In", "Out", "APDisk", "Photoes"); // подкаталоги    
	
КонецФункции

// Функция возвращает подкаталог данных в папке, указанной в реквизите "КаталогДанных" обработки.
//
// Параметры:
//  Назначение			 - Строка - назначение подкаталога каталога, одно (см. функцию ПодкаталогиДанных()).
//  НачальныйПуть		 - Строка, Неопределено - 
//  ПроверитьИСоздать	 - Булево - Если истина, то проверить наличие каталога и создать каталог, если его нет.
// 
// Возвращаемое значение:
//   - Строка - полный путь к подкаталогу, включая финальный слэш.
//
Функция ПодкаталогДанных(Назначение, НачальныйПуть = Неопределено, ПроверитьИСоздать = Ложь) Экспорт
	
	ИмяПодкаталога	= Неопределено;	
	СтррПодкаталоги = ПодкаталогиДанных();
	
	Если Не СтррПодкаталоги.Свойство(Назначение, ИмяПодкаталога) Тогда
		ВызватьИсключение("Функция ПодкаталогДанных(): неизвестный параметр ИмяСвойства = " + Назначение);
	КонецЕсли;
	
	Путь = ?(НачальныйПуть <> Неопределено, НачальныйПуть, КаталогДанных); // КаталогДанных - реквизит обработки
	Если ЭтоLinuxСервер() Тогда
		Путь = СтрЗаменить(Путь, "\", "/");
	КонецЕсли; 
	
	Результат = ДополнитьСлешВПуть(Путь) + ИмяПодкаталога;
	Если ПроверитьИСоздать Тогда 
		Если Не ПроверитьИСоздатьКаталог(Результат, Истина) Тогда
			Текст = СтрШаблон_("Функция ПодкаталогДанных(): не удалось создать каталог ""%1""!", Результат);
		    ВызватьИсключение(Текст);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат ДополнитьСлешВПуть(Результат);
	
КонецФункции

// СлужебныеПроцедурыИФункции_КаталогиМодуля
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ПроверкаГотовностиНастроек

// Функция проверяет готовность справочника торговых агентов к обмену данными.
//
// Параметры:
//  ТЗн - ТаблицаЗначений - таблица виртуального справочника "НастройкиАгентов".
//
// Возвращаемое значение:
//   Структура - структура со свойствами статуса готовности справочника.
//
Функция СправочникАгентовПроверитьГотовность(ТЗн)

	//@skip-check structure-consructor-too-many-keys
	СтррРезультат = Новый Структура("Готово,КодСостояния,Описание,Количество");
	
	Если ТипЗнч(ТЗн) <> Тип("ТаблицаЗначений") Или ТЗн.Количество() = 0 Тогда
		
		СтррРезультат.Готово 		= Ложь;		
		СтррРезультат.Описание 		= НСтр("ru = 'Не заполнены настройки агентов.'");
		СтррРезультат.КодСостояния 	= "СправочникПустой";
		СтррРезультат.Количество 	= 0;
		
	Иначе
		
		СтррРезультат.Количество = ТЗн.Количество(); // общее количество агентов (готовых и не готовых)
		
		ГотовыеАгенты 		 = 0;
		КритичныеЗамечания 	 = 0;
		НеКритичныеЗамечания = 0;
		
		Для Каждого СтрокаТ Из ТЗн Цикл
			Если СтрокаТ.СтатусНастроек = 1 Тогда // зеленая галка статуса агента
				ГотовыеАгенты = ГотовыеАгенты + 1;
			ИначеЕсли СтрокаТ.СтатусНастроек = 2 Тогда
				КритичныеЗамечания = КритичныеЗамечания + 1;
			ИначеЕсли СтрокаТ.СтатусНастроек = 3 Тогда
				НеКритичныеЗамечания = НеКритичныеЗамечания + 1;
			Иначе // неизвестный статус!
				НеКритичныеЗамечания = НеКритичныеЗамечания + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КритичныеЗамечания > 0 Тогда
			ЧислоАгентов = ЧислоЦифрамиПредметИсчисленияПрописью(КритичныеЗамечания, НСтр("ru = 'агента, агентов, агентов'"));
			СтррРезультат.Готово = Ложь;			
			СтррРезультат.Описание = СтрШаблон_(НСтр("ru = 'Не заполнены настройки у %1.'"), ЧислоАгентов);
			СтррРезультат.КодСостояния = "НеУВсехЗаполненыНастройки";
		ИначеЕсли ГотовыеАгенты > 0 Тогда
			СтррРезультат.Готово = Истина;
			СтррРезультат.Описание = "";
			СтррРезультат.КодСостояния = ?(НеКритичныеЗамечания > 0, "НеКритичныеЗамечания", "ЕстьГотовыеАгенты");
		Иначе
			СтррРезультат.Готово = Ложь;
			СтррРезультат.Описание = НСтр("ru = 'Нет торговых агентов готовых к обмену данными.'");
			СтррРезультат.КодСостояния = "НетГотовыхАгентов";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтррРезультат;
	
КонецФункции

// Функция проверяет готовность справочника МУ к обмену данными.
//
// Параметры:
//  ТЗн - ТаблицаЗначений - таблица виртуального справочника "МобильныеУстройства".
//
// Возвращаемое значение:
//   Структура - структура со свойствами статуса готовности справочника.
//
Функция СправочникМобильныхУстройствПроверитьГотовность(ТЗн)
	
	СтррРезультат = Новый Структура("Готово,КодСостояния,Описание", Истина, "", "");
	
	Если ТипЗнч(ТЗн) <> Тип("ТаблицаЗначений") Или ТЗн.Количество() = 0 Тогда
		
		СтррРезультат.Описание 	   = НСтр("ru = 'Не заполнен справочник мобильных устройств.'");
		СтррРезультат.КодСостояния = "СправочникПустой";
		СтррРезультат.Готово 	   = Ложь;
		
	КонецЕсли;
	
	Возврат СтррРезультат;
	
КонецФункции

// Функция проверяет готовность некоторых виртуальных справочников к обмену данными.
//
// Параметры:
//  ИменаСправочников - Строка - список названий виртуальных справочников через запятую.
//
// Возвращаемое значение:
//   Структура - структура статусов в соответствии с переданным списком названий виртуальных справочников.
//   Если передано единственное название справочника, то возвращается структура статуса справочнкиа только для данного справочника.
//
Функция ГотовностьСправочников(ИменаСправочников) Экспорт

	СтррРезультат = Новый Структура(ИменаСправочников);
	СтррЗначения  = ПрочитатьЗначенияНастроек(ИменаСправочников);
	
	Для Каждого Элемент Из СтррЗначения Цикл
		ВидСправочника = Элемент.Ключ;
		Если ВидСправочника = "НастройкиАгентов" Тогда
			СтррРезультат[ВидСправочника] = СправочникАгентовПроверитьГотовность(Элемент.Значение);
		ИначеЕсли ВидСправочника = "МобильныеУстройства" Тогда
			СтррРезультат[ВидСправочника] = СправочникМобильныхУстройствПроверитьГотовность(Элемент.Значение);
		Иначе
			ВызватьИсключение("Передан неизвестный вид справочника для чтения из системных настроек: " + ВидСправочника);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(СтррРезультат.Количество() = 1, СтррРезультат[ВидСправочника], СтррРезультат);
	
КонецФункции

// Проверяет готовность настроек обмена. 
//
// Возвращаемое значение:
// 	Структура - Описание:
// * Готово - Булево
// * КодСостояния - Строка
// * Описание - Строка
//
Функция ГотовностьНастроекОбмена() Экспорт

	СтррРезультат = Новый Структура("Готово,КодСостояния,Описание", Истина, "", "");
	СтррЗначения  = ПрочитатьЗначенияНастроек("КаталогДанных,КаталогОбмена,СпособОбмена,СОДАдрес,СОДПорт,FTPАдрес,FTPПароль,FTPПользователь");
	
	Если Не ЗначениеЗаполнено(СтррЗначения.КаталогДанных) Тогда
		
		СтррРезультат.Описание = НСтр("ru = 'Не указан каталог данных.'");
		СтррРезультат.КодСостояния = "НеУказанКаталогДанных";
		
	ИначеЕсли Не ПроверитьИСоздатьКаталог(СтррЗначения.КаталогДанных, Истина) Тогда // sk_220623 MOD-1214 ИначеЕсли Не КаталогСуществует(СтррЗначения.КаталогДанных) Тогда
		
		СтррРезультат.Описание = СтрШаблон_(НСтр("ru = 'Каталог данных не существует (%1).'"), СтррЗначения.КаталогДанных);
		СтррРезультат.КодСостояния = "НеСуществуетКаталогДанных";
		
	ИначеЕсли Не ЗначениеЗаполнено(СтррЗначения.КаталогОбмена) Тогда
		
		СтррРезультат.Описание = НСтр("ru = 'Не указан каталог обмена.'");
		СтррРезультат.КодСостояния = "НеУказанКаталогОбмена";
		
	ИначеЕсли Не ПроверитьИСоздатьКаталог(СтррЗначения.КаталогОбмена, Истина) Тогда // sk_220623 MOD-1214 ИначеЕсли Не КаталогСуществует(СтррЗначения.КаталогОбмена) Тогда
		
		СтррРезультат.Описание = СтрШаблон_(НСтр("ru = 'Каталог обмена не существует (%1).'"), СтррЗначения.КаталогОбмена);
		СтррРезультат.КодСостояния = "НеСуществуетКаталогОбмена";
		
	ИначеЕсли Не ЗначениеЗаполнено(СтррЗначения.СпособОбмена) Тогда
		
		СтррРезультат.Описание = НСтр("ru = 'Не указан способ обмена.'");
		СтррРезультат.КодСостояния = "НеВыбранСпособ";
		
	Иначе
		
		НазванияРеквизитов = "";		
		
		Если СтррЗначения.СпособОбмена = "КаталогОбмена" Тогда // ничего не проверяем
		
		ИначеЕсли СтррЗначения.СпособОбмена = "АПСОД" Тогда 
			
			Если Не ЗначениеЗаполнено(СтррЗначения.СОДАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Адрес СОД'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтррЗначения.СОДПорт) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Порт СОД'") + """";
			КонецЕсли;
			
		ИначеЕсли СтррЗначения.СпособОбмена = "FTP" Тогда 
			
			Если Не ЗначениеЗаполнено(СтррЗначения.FTPПользователь) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Пользователь FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтррЗначения.FTPАдрес) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Адрес FTP'") + """";
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтррЗначения.FTPПароль) Тогда
				НазванияРеквизитов = НазванияРеквизитов + ", """ + НСтр("ru = 'Пароль FTP'") + """";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НазванияРеквизитов <> "" Тогда
			
			СтррРезультат.Описание = НСтр("ru = 'В настройках обмена не заполнены реквизиты:'") + " "
				+ Прав(НазванияРеквизитов, СтрДлина(НазванияРеквизитов) - 2) + ".";
			СтррРезультат.КодСостояния = "НеЗаполненыРеквизиты";
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтррРезультат.Готово = ПустаяСтрока(СтррРезультат.Описание); // если нет описания, то ошибок нет
	
	Возврат СтррРезультат;
	
КонецФункции

// Функция проверяет регистрацию обработки в 1С:Предприятии как регламентного задания.
// Возвращаемое значение:
//   Структура:
//     * РегистрацияОбработки - Структура
//     * РегламетноеЗадание - Структура	
Функция ГотовностьФоновогоЗадания() Экспорт

	СтррРезультат = Новый Структура;
	СтррРезультат.Вставить("РегистрацияОбработки", 	СтатусГовоностиРегистрацииОбработки());
	СтррРезультат.Вставить("РегламетноеЗадание", 	СтатусГовоностиРегламетногоЗадания());
	
	//@skip-check constructor-function-return-section
	Возврат СтррРезультат;

КонецФункции 

Функция СтатусГовоностиРегистрацииОбработки()

	//@skip-check structure-consructor-too-many-keys
	СтррРезультат = Новый Структура("Готово,КодСостояния,Описание,Иконка", Ложь);
	СтррИконки = Новый Структура("Пусто,ОК,Внимание", 0, 1, 2);
	
	ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеОтчетыИОбработки.Ссылка,
		|	ДополнительныеОтчетыИОбработки.ИмяФайла,
        |	ДополнительныеОтчетыИОбработки.Версия
        |ИЗ
        |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
        |ГДЕ
        |	ДополнительныеОтчетыИОбработки.ИмяФайла = &ИмяФайла
        |	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления
		|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайлаОбработки());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		СтррРезультат.КодСостояния = "ТребуетсяРегистрация";
		СтррРезультат.Описание = НСтр("ru = 'Требуется регистрация текущей обработки для ее выполнения как регламентного задания.'");
		СтррРезультат.Иконка   = СтррИконки.Внимание;
	Иначе
		Выборка.Следующий();
		Если СравнитьВерсии(ВерсияОбработки(), Выборка.Версия) <= 0 Тогда // версия актуальная или зарегистрирована более новая версия обработки
			// перебираем строки в ТЧ "Команды" - ищем хотя бы одну команду, связанную с регламентным заданием
			ЕстьРегламентноеЗаданиеДляКоманды = Ложь;
			Для каждого СтрокаТ Из Выборка.Ссылка.Команды Цикл
				Если ЗначениеЗаполнено(СтрокаТ.РегламентноеЗаданиеGUID) Тогда
					ЕстьРегламентноеЗаданиеДляКоманды = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			Если ЕстьРегламентноеЗаданиеДляКоманды Тогда
				СтррРезультат.КодСостояния = "ОК";
				СтррРезультат.Описание = НСтр("ru = 'Обработка зарегистрирована в справонике и задано расписание. Замечаний нет.'");
				СтррРезультат.Иконка   = СтррИконки.ОК;
				СтррРезультат.Готово   = Истина;
			Иначе
				СтррРезультат.КодСостояния = "НетРегламентногоЗадания";
				СтррРезультат.Описание = НСтр("ru = 'Не указано расписание выполнения хотя бы для одной из команд обработки.'");
				СтррРезультат.Иконка   = СтррИконки.Внимание;
			КонецЕсли; 
			
		Иначе
			СтррРезультат.КодСостояния = "ЗарегистрированаСтараяВерсия"; // зарегистрирована устаревшая версия обработки
			Текст = НСтр("ru = 'Зарегистрирована устаревшая версия обработки (открыта версия - %1, зарегистрирована версия - %2).'");
			СтррРезультат.Описание = СтрШаблон_(Текст, ВерсияОбработки(), Выборка.Версия);
			СтррРезультат.Иконка   = СтррИконки.Внимание;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат СтррРезультат;
			
КонецФункции

Функция СтатусГовоностиРегламетногоЗадания()

	//@skip-check structure-consructor-too-many-keys
	СтррРезультат = Новый Структура("Готово,КодСостояния,Описание,Иконка,ИдентификаторЗадания", Ложь);
	СтррИконки = Новый Структура("Пусто,ОК,Внимание", 0, 1, 2);

	СтррОтбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
	МТекущиеЗадания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтррОтбор);
	
	ИмяФайла = ИмяФайлаОбработки();
	НайденноеЗадание = Неопределено;
	
	// ищем зарегистрированную обработку "апОбменДанными.epf" среди регламентных заданий
	Для каждого Задание Из МТекущиеЗадания Цикл
		Параметр0 = Задание.Параметры[0]; // первый параметр задания должен ссылаться на элемент справочника "ДополнительныеОтчетыИОбработки"
		Если ТипЗнч(Параметр0) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
			Продолжить;
		КонецЕсли; 
		Если Параметр0.ИмяФайла = ИмяФайла Тогда
			Если НайденноеЗадание = Неопределено Тогда
				НайденноеЗадание = Задание;
				Если Задание.Использование Тогда // если задание не используется, продолжаем поиск
					Прервать; // нашли используемое задание, связанное с обработкой
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденноеЗадание <> Неопределено Тогда
		СтррРезультат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли; 
	
	Если НайденноеЗадание = Неопределено Тогда // нет регламентного задания, связанного с обработкой
		СтррРезультат.КодСостояния = "НетЗадания";
		Текст = НСтр("ru = 'Не найдено регламентного задания, связанного с текущей обработкой (""%1"").'");
		СтррРезультат.Описание = СтрШаблон_(Текст, ИмяФайла);
		СтррРезультат.Иконка = СтррИконки.Внимание;
	ИначеЕсли Не НайденноеЗадание.Использование Тогда // нет регламентного задания, связанного с обработкой
		СтррРезультат.КодСостояния = "ЗаданиеВыключено";
		СтррРезультат.Описание = НСтр("ru = 'Регламентное задание выключено.'");
		СтррРезультат.Иконка = СтррИконки.Внимание;
	ИначеЕсли Не ЗначениеЗаполнено(НайденноеЗадание.ИмяПользователя) Тогда // не указан пользователь для регламентного задания
		СтррРезультат.КодСостояния = "НеУказанПользователь";
		СтррРезультат.Описание = НСтр("ru = 'Не указан пользователь, от имени которого запускать регламентное задание.'");
		СтррРезультат.Иконка = СтррИконки.Внимание;		
	Иначе // замечаний нет
		СтррРезультат.КодСостояния = "ОК";
		СтррРезультат.Описание = НСтр("ru = 'Обработка указана в регламентном задании. Замечаний нет.'");
		СтррРезультат.Иконка = СтррИконки.ОК;		
		СтррРезультат.Готово = Истина;
	КонецЕсли; 

	Возврат СтррРезультат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ПроверкаГотовностиНастроек
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ОбменДанными

#Область СлужебныеПроцедурыИФункции_НастройкиТорговогоАгента
// Возвращает настройки агента.
Функция ПолучитьНастройкиАгента(Агент)

	ТЗн = ВременныеТаблицы.НастройкиАгентов;
	СТЗ = ТЗн.Найти(Агент, "Пользователь");
	Если СТЗ = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		Результат = Новый Структура;		
		Для Каждого Колонка Из ТЗн.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СТЗ[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;

	// Получаем основные настройки отбора на основе пользовательских настроек
	ТекНастройкиОтбора = ПолучитьНастройкиОтбораАгентаПоПользовательскойНастройке(Результат.ВыгружаемыеОбъекты);
	Результат.ВыгружаемыеОбъекты = ТекНастройкиОтбора;

	Возврат Результат;
	
КонецФункции

// Функция возвращает настройки агента. В отличии от функции ПолучитьНастройкиАгента() читает данные сразу
// из временного хранилища.
// Параметры:
//   Агент - СправочникСсылка.Пользователи
//   СтрРеквизиты - Строка - список названий реквизитов настроек, которые нужно вернуть.
// Возвращаемое значение:
//   Структура, Неопределено - структура с перечнем свойств, указанным в параметре СтрРеквизиты. 
Функция ПолучитьНастройкиАгентаИзВХ(Агент, СтрРеквизиты = Неопределено) Экспорт

	Результат = Неопределено;
	
	ТЗн = ПрочитатьЗначениеНастройки("НастройкиАгентов");
	Если ТипЗнч(ТЗн) = Тип("ТаблицаЗначений") Тогда
		СтрокаТ = ТЗн.Найти(Агент, "Пользователь");
		Если СтрокаТ <> Неопределено Тогда
			Если СтрРеквизиты = Неопределено Тогда
				Результат = Новый Структура;
				Для Каждого Колонка Из ТЗн.Колонки Цикл
					Результат.Вставить(Колонка.Имя, СтрокаТ[Колонка.Имя]);
				КонецЦикла;
			Иначе
				Результат = Новый Структура(СтрРеквизиты);
				Для Каждого ЭлементСтруктуры Из Результат Цикл
					Результат[ЭлементСтруктуры.Ключ] = СтрокаТ[ЭлементСтруктуры.Ключ];
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция НастройкиДляТекущегоАгента() Экспорт
	
	ЗагрузитьНастройкиДляРаботыОбмена();
	ВыбНастройкиАгента = ПолучитьНастройкиАгента(ВыбАгент);
	СтррРезультат = Новый Структура("ВыбНастройкиАгента,Организации", ВыбНастройкиАгента, ОрганизацииВыгрузки(Неопределено));
	Возврат СтррРезультат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_НастройкиТорговогоАгента
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ДополнительныеРеквизиты

Функция ИмяСвойстваДокументШирота()
	Возврат "АгентПлюсДокументШирота";
КонецФункции 

Функция ИмяСвойстваДокументДолгота() 
	Возврат "АгентПлюсДокументДолгота";
КонецФункции 

Функция ИмяСвойстваДокументВремяНачала() Экспорт
	Возврат "АгентПлюсДокументВремяНачала";
КонецФункции 

Функция ИмяСвойстваДокументВремяОкончания()
	Возврат "АгентПлюсДокументВремяОкончания";
КонецФункции 

Функция ИмяСвойстваШиротаПартнер() Экспорт
	Возврат "АгентПлюсШиротаПартнер";
КонецФункции 

Функция ИмяСвойстваДолготаПартнер() Экспорт
	Возврат "АгентПлюсДолготаПартнер";
КонецФункции 

Функция ИмяСвойстваАдресИзСервисаПартнер() Экспорт
	Возврат "АгентПлюсАдресИзСервиса";
КонецФункции 

Функция ДополнительноеСвойствоПоНаименованию(ИмяСвойства) Экспорт

	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяСвойства, Истина);
	Возврат Свойство;
	
КонецФункции 

Функция ТипСвойстваКоординатыGPS()
	Возврат Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
КонецФункции 

Функция ПроверитьДополнительныеРеквизитыСправочникаПартнеры() Экспорт

	СтвРеквизиты = Новый Соответствие;
	СтвРеквизиты.Вставить(ИмяСвойстваШиротаПартнер(), 0);
	СтвРеквизиты.Вставить(ИмяСвойстваДолготаПартнер(), 0);
	СтвРеквизиты.Вставить(ИмяСвойстваАдресИзСервисаПартнер(), 0);
	
	//НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие; в УТ общие наборы хранятся с пустым значением реквизита "НаборСвойств"

	Выборка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.НаборСвойств) Тогда
			Наименование = Выборка.Наименование;
			Значение = СтвРеквизиты.Получить(Наименование);
			Если Значение <> Неопределено Тогда
				СтвРеквизиты[Наименование] = Значение + 1;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	СтрДубли  = "";	
	СтрПустые = "";

	Для каждого Элемент Из СтвРеквизиты Цикл
		Если Элемент.Значение > 1 Или Элемент.Значение = 0 Тогда
			Если Элемент.Значение > 1 Тогда
				СтрДубли  = СтрДубли  + ?(СтрДубли  = "", "", ", ") + Элемент.Ключ + " (" + Строка(Элемент.Значение) + ")";
			Иначе
				СтрПустые = СтрПустые + ?(СтрПустые = "", "", ", ") + Элемент.Ключ;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	
	МСообщения = Новый Массив;
	
	Если Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить() = Ложь Тогда
		Текст = "Выключен режим ""Использовать дополнительные реквизиты и сведения"" - координаты партнеров не сохранятся. Перейдите в ""Общие настройки"" 1С:Предприятия и выберите флажок ""Использовать дополнительные реквизиты и сведения"".";
		МСообщения.Добавить(Текст);
	КонецЕсли;
	
	Если СтрДубли <> "" Тогда
		Текст = "В объекте ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" указаны дубли названий реквизитов:";
		Текст = Текст + ?(СтрДлина(СтрДубли) > 30, Символы.ПС, " ") + СтрДубли + "." + Символы.ПС + "Удалите лишние реквизиты!";
		МСообщения.Добавить(Текст);
	КонецЕсли;
	
	Если СтрПустые <> "" Тогда
		Текст = "В объекте ""ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения"" не указаны реквизиты:";
		Текст = Текст + ?(СтрДлина(СтрПустые) > 30, Символы.ПС, " ") + СтрПустые + "." + Символы.ПС + "Создайте недостающие реквизиты!";
		МСообщения.Добавить(Текст);
	КонецЕсли;
	
	Возврат Новый Структура("ЕстьОшибки,Сообщения", МСообщения.Количество() <> 0, МСообщения);

КонецФункции

Процедура СоздатьДополнительныеРеквизитыДокументов() Экспорт

	ОпределитьВерсиюКонфигурации();
	
	//Описание типов	
	ТипСвойстваКоординатыGPS = ТипСвойстваКоординатыGPS();
	ТипСвойстваДата 		 = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	//Широта.
	ИмяСвойства = ИмяСвойстваДокументШирота();
	//1.Проверяем и создаем, если еще не создан ПланыВидовХарактеристикпвх.ДополнительныеРеквизитыИСведения
	ПВХСвойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(ПВХСвойство) Тогда
		ПредставлениеСвойства = "МУ: Широта"; 
		Подсказка			  = НСтр("ru = 'Географическая широта места создания документа'");	
		ПВХСвойство = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ТипСвойстваКоординатыGPS, Истина, Подсказка);	
	КонецЕсли;
	//2.Проверяем и создаем, если еще не созданы Справочники.НаборыДополнительныхРеквизитовИСведений
	СоздатьДополнительноеСведениеДляДокументов(ПВХСвойство);
		
	//Долгота
	ИмяСвойства = ИмяСвойстваДокументДолгота();
	//1.Проверяем и создаем, если еще не создан ПланыВидовХарактеристикпвх.ДополнительныеРеквизитыИСведения
	ПВХСвойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(ПВХСвойство) Тогда
		ПредставлениеСвойства = "МУ: Долгота"; 
		Подсказка			  = НСтр("ru = 'Географическая долгота места создания документа'");	
		ПВХСвойство = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ТипСвойстваКоординатыGPS, Истина, Подсказка);	
	КонецЕсли;
	//2.Проверяем и создаем, если не созданы Справочники.НаборыДополнительныхРеквизитовИСведений
	СоздатьДополнительноеСведениеДляДокументов(ПВХСвойство);
			
	//Время начала
	ИмяСвойства = ИмяСвойстваДокументВремяНачала();
	//1.Проверяем и создаем, если еще не создан ПланыВидовХарактеристикпвх.ДополнительныеРеквизитыИСведения
	ПВХСвойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(ПВХСвойство) Тогда
		ПредставлениеСвойства = "МУ: Время начала"; 
		Подсказка			  = НСтр("ru = 'Время начала работы с документом в МУ'");	
		ПВХСвойство = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ТипСвойстваДата, Истина, Подсказка);	
	КонецЕсли;
	//2.Проверяем и создаем, если еще не созданы Справочники.НаборыДополнительныхРеквизитовИСведений
	СоздатьДополнительноеСведениеДляДокументов(ПВХСвойство);
	
	//Время окончания
	ИмяСвойства = ИмяСвойстваДокументВремяОкончания();
	//1.Проверяем и создаем, если он не создан ПланыВидовХарактеристикпвх.ДополнительныеРеквизитыИСведения
	ПВХСвойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(ПВХСвойство) Тогда
		ПредставлениеСвойства = "МУ: Время окончания"; 
		Подсказка			  = НСтр("ru = 'Время окончания работы с документом в МУ'");	
		ПВХСвойство = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ТипСвойстваДата, Истина, Подсказка);	
	КонецЕсли;
	//2.Проверяем и создаем, если еще не созданы Справочники.НаборыДополнительныхРеквизитовИСведений
	СоздатьДополнительноеСведениеДляДокументов(ПВХСвойство);
	
КонецПроцедуры

Процедура СоздатьДополнительныеРеквизитыСправочников() Экспорт

	ОпределитьВерсиюКонфигурации();
	
	ИмяСвойства = ИмяСвойстваШиротаПартнер();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Подсказка = НСтр("ru = 'Географическая широта местоположения (в формате NMEA)'");
		СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, "Широта", ТипСвойстваКоординатыGPS(), Подсказка);
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДолготаПартнер();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		Подсказка = НСтр("ru = 'Географическая долгота местоположения (в формате NMEA)'");
		СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, "Долгота", ТипСвойстваКоординатыGPS(), Подсказка);
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваАдресИзСервисаПартнер();
	Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойства);
	Если Не ЗначениеЗаполнено(Свойство) Тогда
		ТипСвойства = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(128));
		Подсказка = НСтр("ru = 'Адрес, полученный из веб-сервиса определения координат'");
		СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, "Адрес из веб-сервиса", ТипСвойства, Подсказка);
	КонецЕсли;

КонецПроцедуры  

Процедура СоздатьДополнительноеСведениеДляДокументов(ПвхСвойство)
	
	Если ПоколениеКонфигурации(">=УТ_11.5.7") Тогда
		СоздатьДополнительноеСведениеДляДокументов_11_5_7(ПвхСвойство);
	Иначе
		СоздатьДополнительноеСведениеДляДокументов_11_4(ПвхСвойство);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьДополнительныйРеквизитПартнера(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Подсказка)

	НовыйЭлемент = НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, Ложь, Подсказка);
	НаборСсылка = НаборСвойствПоИмени("Справочник_Партнеры_Общие");	
	ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, НовыйЭлемент)

КонецПроцедуры     

Процедура ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, Элемент)

	НаборОбъект = НаборСсылка.ПолучитьОбъект();
	
	Если Элемент.ЭтоДополнительноеСведение Тогда
		
		НовоеСвойство = НаборОбъект.ДополнительныеСведения.Добавить();
		НовоеСвойство.Свойство = Элемент;
		СтароеКоличество = СтрЗаменить(НаборОбъект.КоличествоСведений, Символы.НПП, "");
		Если СтароеКоличество = "" Тогда
			СтароеКоличество = "0";
		КонецЕсли;
		НаборОбъект.КоличествоСведений = Число(СтароеКоличество) + 1;
		
	Иначе	
		
		НовыйРеквизит = НаборОбъект.ДополнительныеРеквизиты.Добавить();
		НовыйРеквизит.Свойство = Элемент;
		СтароеКоличество = СтрЗаменить(НаборОбъект.КоличествоРеквизитов, Символы.НПП, "");
		Если СтароеКоличество = "" Тогда
			СтароеКоличество = "0";
		КонецЕсли;
		НаборОбъект.КоличествоРеквизитов = Число(СтароеКоличество) + 1;
		
	КонецЕсли; 
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		НаборОбъект.Используется = Истина;	
	КонецЕсли; 
	
	НаборОбъект.Записать();

КонецПроцедуры

Функция ДанныеОДополнительныхСвойствахДокументаДляМУ()

	Если ГДанныеОДополнительныхСвойствахДокументаДляМУ = Неопределено Тогда
	
		//@skip-check structure-consructor-too-many-keys
		СтррДанные = Новый Структура("тзРеквизиты,стзШирота,стзДолгота,стзВремяНачала,стзВремяОкончания");
		
		ТЗРеквизиты = Новый ТаблицаЗначений;
		ТЗРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		ТЗРеквизиты.Колонки.Добавить("Значение");
		
		СтррДанные.тзРеквизиты = ТЗРеквизиты;
		
		СтрокаТ = ТЗРеквизиты.Добавить();	
		СтрокаТ.Свойство  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументШирота());
		СтррДанные.стзШирота = СтрокаТ;
		
		СтрокаТ = ТЗРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументДолгота());
		СтррДанные.стзДолгота = СтрокаТ;
		
		СтрокаТ = ТЗРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяНачала());
		СтррДанные.стзВремяНачала = СтрокаТ;
		
		СтрокаТ = ТЗРеквизиты.Добавить();
		СтрокаТ.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяОкончания());
		СтррДанные.стзВремяОкончания = СтрокаТ;
		
		ГДанныеОДополнительныхСвойствахДокументаДляМУ = СтррДанные;
		
	КонецЕсли; 
	
	Возврат ГДанныеОДополнительныхСвойствахДокументаДляМУ;

КонецФункции  

// Запись дополнительных свойств документа.
Процедура ЗаписатьДополнительныеСвойстваДокумента(ДокументСсылка, СтррЗначения)

	СтррДанные = ДанныеОДополнительныхСвойствахДокументаДляМУ();
	
	СтррДанные.стзШирота.Значение  			= СтррЗначения.Широта;
	СтррДанные.стзДолгота.Значение 			= СтррЗначения.Долгота;
	СтррДанные.стзВремяНачала.Значение 		= СтррЗначения.ВремяНачала;
	СтррДанные.стзВремяОкончания.Значение 	= СтррЗначения.ВремяОкончания;
	
	//@skip-check undefined-variable
	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(ДокументСсылка, СтррДанные.тзРеквизиты);	

КонецПроцедуры
	
Процедура СоздатьДополнительноеСведениеДляДокументов_11_5_7(ПвхСвойство)
		
	//Масив документов с дополнительными сведениями.
   	//@skip-check undefined-variable
   	МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
	МНаборы = Новый Массив;  	
	МНаборы.Добавить(МодульУправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаказКлиента"));
	МНаборы.Добавить(МодульУправлениеСвойствами.НаборСвойствПоИмени("Документ_РеализацияТоваровУслуг"));
	МНаборы.Добавить(МодульУправлениеСвойствами.НаборСвойствПоИмени("Документ_ПриходныйКассовыйОрдер"));
	МНаборы.Добавить(МодульУправлениеСвойствами.НаборСвойствПоИмени("Документ_РасходныйКассовыйОрдер"));
	МНаборы.Добавить(МодульУправлениеСвойствами.НаборСвойствПоИмени("Документ_ПоступлениеТоваров"));
	МНаборы.Добавить(МодульУправлениеСвойствами.НаборСвойствПоИмени("Документ_ВозвратТоваровОтКлиента"));
	МНаборы.Добавить(МодульУправлениеСвойствами.НаборСвойствПоИмени("Документ_ЗаявкаНаВозвратТоваровОтКлиента"));
	МНаборы.Добавить(МодульУправлениеСвойствами.НаборСвойствПоИмени("Документ_ПеремещениеТоваров"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Набор
	                |ПОМЕСТИТЬ ВТ_НаборыДополнительныхРеквизитовИСведений
	                |ИЗ
	                |	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	                |ГДЕ
	                |	НаборыДополнительныхРеквизитовИСведений.Ссылка В(&мНаборы)
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	НаборыДополнительныхРеквизитовИСведений.Ссылка
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_НаборыДополнительныхРеквизитовИСведений.Набор КАК Набор
	                |ПОМЕСТИТЬ ВТ_НаборыДополнительныхРеквизитовИСведенийТекущие
	                |ИЗ
	                |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НаборыДополнительныхРеквизитовИСведений КАК ВТ_НаборыДополнительныхРеквизитовИСведений
	                |		ПО ДополнительныеСведения.Ссылка = ВТ_НаборыДополнительныхРеквизитовИСведений.Набор
	                |ГДЕ
	                |	ДополнительныеСведения.Свойство = &Свойство
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_НаборыДополнительныхРеквизитовИСведений.Набор КАК Набор
	                |ИЗ
	                |	ВТ_НаборыДополнительныхРеквизитовИСведений КАК ВТ_НаборыДополнительныхРеквизитовИСведений
	                |ГДЕ
	                |	НЕ ВТ_НаборыДополнительныхРеквизитовИСведений.Набор В
	                |				(ВЫБРАТЬ
	                |					ВТ_НаборыДополнительныхРеквизитовИСведенийТекущие.Набор
	                |				ИЗ
	                |					ВТ_НаборыДополнительныхРеквизитовИСведенийТекущие)";
	
	Запрос.УстановитьПараметр("мНаборы",  МНаборы);   
	Запрос.УстановитьПараметр("Свойство", ПвхСвойство);
	
	РезультатЗапроса = Запрос.Выполнить();    	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл  
		ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(Выборка.Набор, ПвхСвойство);		
	КонецЦикла; 
	
КонецПроцедуры		

Процедура СоздатьДополнительноеСведениеДляДокументов_11_4(ПВХСвойство)
		
	//Масив документов с дополнительными сведениями.
	МНаборы = Новый Массив;
	МНаборы.Добавить("Документ_ЗаказКлиента");
	МНаборы.Добавить("Документ_РеализацияТоваровУслуг");
	МНаборы.Добавить("Документ_ПриходныйКассовыйОрдер");
	МНаборы.Добавить("Документ_РасходныйКассовыйОрдер");
	МНаборы.Добавить("Документ_ПоступлениеТоваров");
	МНаборы.Добавить("Документ_ВозвратТоваровОтКлиента");
	МНаборы.Добавить("Документ_ЗаявкаНаВозвратТоваровОтКлиента");
	МНаборы.Добавить("Документ_ПеремещениеТоваров");
	
	//ТЗн для проверки создано ли доп сведение.
		
	//Платформа 8.3.12 и 8.3.13 не позволяет делать отбор в запросах по полю ИмяПредопределенныхДанных. Возникает исключение, если поля не существует. Функция ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент() также выдает мсключение.
	//Поэтому сначала проверим существование полей ИмяПредопределенныхДанных. 
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
	                |	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	                |ИЗ
	                |	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	                |ГДЕ
	                |	НаборыДополнительныхРеквизитовИСведений.Предопределенный = ИСТИНА";
	
	ВыборкаНаборы = Запрос.Выполнить().Выгрузить();

	ТЗНаборы = ВыборкаНаборы.СкопироватьКолонки();
	
	Счетчик = МНаборы.Количество() - 1;	
	Пока Счетчик >= 0 Цикл
		СТЗВыборкаРезультат = ВыборкаНаборы.Найти(МНаборы[Счетчик], "ИмяПредопределенныхДанных");	
		Если СТЗВыборкаРезультат = Неопределено Тогда
			МНаборы.Удалить(Счетчик);		
		Иначе
			СТЗНаборы = ТЗНаборы.Добавить();
			СТЗНаборы.Ссылка = СТЗВыборкаРезультат.Ссылка;
			СТЗНаборы.ИмяПредопределенныхДанных = СТЗВыборкаРезультат.ИмяПредопределенныхДанных;
		КонецЕсли;			
		Счетчик = Счетчик - 1;
	КонецЦикла;	
	
	//ТЗн для проверки создано ли доп сведение.
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка,
	                |	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	                |ПОМЕСТИТЬ ВТ_НаборыДополнительныхРеквизитовИСведений
	                |ИЗ
	                |	&тзНаборы КАК НаборыДополнительныхРеквизитовИСведений
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Ссылка
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВТ_НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	                |	ДополнительныеСведения.Свойство КАК Свойство
	                |ИЗ
	                |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК ДополнительныеСведения
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НаборыДополнительныхРеквизитовИСведений КАК ВТ_НаборыДополнительныхРеквизитовИСведений
	                |		ПО ДополнительныеСведения.Ссылка = ВТ_НаборыДополнительныхРеквизитовИСведений.Ссылка";
	Запрос.УстановитьПараметр("тзНаборы", ТЗНаборы);	
	
	ТЗРезультат = Запрос.Выполнить().Выгрузить();
	СтррОтбор   = Новый Структура("ИмяПредопределенныхДанных,Свойство", "", ПВХСвойство);
	
	Для Каждого Элемент Из МНаборы Цикл
		СтррОтбор.ИмяПредопределенныхДанных = Элемент;
		Если ТЗРезультат.НайтиСтроки(СтррОтбор).Количество() = 0 Тогда 
			НаборСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений[Элемент];
			ДобавитьНовыйДополнительныйРеквизитИлиСведениеВНабор(НаборСсылка, ПВХСвойство);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НаборСвойствПоИмени(ИмяНабора)
	
	Если ПоколениеКонфигурации(">=УТ_11.5.7") Тогда
		//@skip-check undefined-variable
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		Возврат МодульУправлениеСвойствами.НаборСвойствПоИмени("Справочник_Партнеры_Общие")	
	Иначе
		Возврат Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяНабора] 	
	КонецЕсли;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ДополнительныеРеквизиты
#КонецОбласти

Функция КонстантыПолучитьЗначение(ИмяКонстанты) 

	Перем Значение;
	
	Если ГКэшЧтенияКонстант = Неопределено  Тогда
		ГКэшЧтенияКонстант = Новый Структура;
	КонецЕсли; 
	
	Если Не ГКэшЧтенияКонстант.Свойство(ИмяКонстанты, Значение) Тогда
		Значение = Константы[ИмяКонстанты].Получить();
		ГКэшЧтенияКонстант.Вставить(ИмяКонстанты, Значение);
	КонецЕсли;
	
	Возврат Значение;	
	
КонецФункции

Функция НужноПропуститьТекущегоАгента()
	
	Если ВыбНастройкиАгента.СтатусНастроек = 2 Тогда // для агента все настроено
		Текст = НСтр("ru='Пропущен агент по причине не заполненных настроек.'");
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Результат = Истина;
	ИначеЕсли ВыбНастройкиАгента.СтатусНастроек <> 1 Тогда // нет статуса готовности
		Результат = Истина;
	ИначеЕсли ВыбНастройкиАгента.ВыгружаемыеОбъекты = Неопределено Тогда
		Текст = НСтр("ru = 'Пропущен агент: ""%1"", не заполнены ""Выгружаемые данные""! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь);
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выгрузка данных по переданному агенту или по всем агентам.
// Параметры:
//   Агент - СправочникСсылка.Пользователи
Процедура ВыгрузитьДанные(Агент) Экспорт

	ЗагрузитьНастройкиДляРаботыОбмена();
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда // значит настройки агентов еще не создавались
		ОповеститьОСобытии(НСтр("ru='Настройки агентов не заданы! Данные не выгружены.'"), "ОшибкаНастройки");
		Возврат;
	КонецЕсли;  

	//Обновление регистра накоплений "Расчеты с клиентами по документам"
	ОбновлениеРегистрРасчетыСКлиентамиПоДокументам();
	
	Если ЗначениеЗаполнено(Агент) Тогда // выгрузка данных для одного агента
		
		ВыгрузитьДанныеДляАгента(Агент);
		
	Иначе // выгрузка данных для всех агентов
		
		ТЗн = ВременныеТаблицы.НастройкиАгентов;	
		Для Каждого СтрокаТ Из ТЗн Цикл
			ВыгрузитьДанныеДляАгента(СтрокаТ.Пользователь);
		КонецЦикла;
		
		ВыбАгент = Справочники.Пользователи.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры

// Формирование файла выгрузки для переданного агента.
// Параметры:
//   Агент - СправочникСсылка.Пользователи
//   ОтветныеДанные - Булево - если истина, то делается выгрузка ответных данных.
Процедура ВыгрузитьДанныеДляАгента(Агент, ОтветныеДанные = Ложь) Экспорт
	
	Если ГКэшСравненияКонфигураций = Неопределено Тогда // используем переменную гКэшСравненияКонфигураций как признак, что нужно загрузить настройки обмена из хранилища
		ЗагрузитьНастройкиДляРаботыОбмена();
	КонецЕсли;
	
	ГКэшСпискиОбъектов = Новый Соответствие;
	ГКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", Неопределено);
	
	ВыбАгент 			= Агент;
	ВыбНастройкиАгента  = ПолучитьНастройкиАгента(Агент);
	ТЗКартинки 			= Неопределено;
	
	Если НужноПропуститьТекущегоАгента() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтветныеДанные = Истина ИЛИ ТипЗнч(ОтветныеДанные) = Тип("Структура") Тогда 
	    ОповеститьОСобытии("Выгрузка ответных данных для агента: " + СокрЛП(Агент));
	Иначе
		ОповеститьОСобытии("Выгрузка для агента: " + СокрЛП(Агент));
	КонецЕсли;
	
	АктуализироватьОграничениеВыгрузкФотографийТоваров();
	
	ИмяФайлаВыгрузки = КаталогВременныхФайловАгента() + "FromCDB.xml";
	ДокОбмена 		 = СоздатьФайлВыгрузкиДанных(ИмяФайлаВыгрузки);
	
	Если НЕ (ТипЗнч(ОтветныеДанные) = Тип("Структура") И ОтветныеДанные.СтррКонстанты.Свойство("ИдентификаторДопОтчетаДляОбновления")) Тогда
		МенеджерВТ = МенеджерВТПолучить();
		Если ТипЗнч(МенеджерВТ) = Тип("Строка") Тогда
			ОповеститьОСобытии("Данные не выгружены, описание: " + МенеджерВТ + СокрЛП(Агент));
			Возврат;
		КонецЕсли;
		
		ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", Неопределено); // вызов, чтобы проинициализировать структуру гТаблицыПеречислений с ее таблицами
				
		ВыгрузитьКонстанты(ДокОбмена, МенеджерВТ);
		
		ВыгрузитьСправочники(ДокОбмена, МенеджерВТ, ТЗКартинки);
		
		ВыгрузитьДокументы(ДокОбмена, МенеджерВТ);
		
		ВыгрузитьИзображения(ДокОбмена, ТЗКартинки);
		
		ВыгрузитьПодтверждения(ДокОбмена);
		
	КонецЕсли;

	ЗакрытьФайлВыгрузки(ДокОбмена);
		
	ИмяФайлаОтчетов = ВыгрузитьОтчет(ОтветныеДанные);
	
	ИмяФайлаАрхиваКартинок = СформироватьАрхивСКартинками(ТЗКартинки);
	
	ФайлОтправки = УпаковатьФайл(ИмяФайлаВыгрузки, ИмяФайлаАрхиваКартинок, ИмяФайлаОтчетов);
	
	ОтправитьФайлПоСпособуОбмена(ФайлОтправки);
	
	КэшСлужебныхТаблицСохранить("Все");

КонецПроцедуры

// Загрузка данных по переданному агенту или по всем агентам.
// Функция возвращает количество агентов, по которым загружены данные.
// Параметры:
//   Агент - СправочникСсылка.Пользователи
// Возвращаемое значение:
// 	 Число - количество обработанных агентов (пользователей).
Функция ЗагрузитьДанные(Агент) Экспорт
	
	Количество = 0;
	
	ЗагрузитьНастройкиДляРаботыОбмена();
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда // значит настройки агентов еще не создавались
		ОповеститьОСобытии(НСтр("ru='Настройки агентов не заданы! Данные не выгружены.'"), "ОшибкаНастройки");
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Агент) Тогда // загрузка данных для одного агента
		
		Если ЗагрузитьДанныеДляАгента(Агент) Тогда
			Количество = Количество + 1
		КонецЕсли;
		
	Иначе // загрузка данных для всех агентов
		
		ТЗн = ВременныеТаблицы.НастройкиАгентов;	
		Для Каждого СтрокаТ Из ТЗн Цикл
			Если ЗагрузитьДанныеДляАгента(СтрокаТ.Пользователь) Тогда
				Количество = Количество + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Количество;

КонецФункции

// Функция возвращает Истина, если данные от агента были успешно загружены.
Функция ЗагрузитьДанныеДляАгента(Агент)

	ВыбНастройкиАгента = ПолучитьНастройкиАгента(Агент);
	
	Если НужноПропуститьТекущегоАгента() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьАвтообмен Или СпособОбмена = "АПСОД" Тогда
		ОповеститьОСобытии("Загрузка для агента: " + СокрЛП(Агент));
	КонецЕсли;
	
	СтррСведения = Новый Структура; // структура для возврата дополнительных данных по содержимому архива файла обмена
	Каталог = ЗагрузитьИРаспаковатьФайлПоСпособуОбмена(СтррСведения); 
	Если Каталог = Неопределено Тогда // была ошибка копирования/скачивания
		Возврат Ложь;
	КонецЕсли;
	
	ЗагружаемыеОбъекты 	= ЗагруженныеОбъектыИзФайла(СтррСведения);
	ФайлОбмена 			= ФайлОбменаРаспакованный(Каталог);
	Если ФайлОбмена = Неопределено Тогда
		ОповеститьОСобытии("В zip-архиве не найден файл загрузки.");
	Иначе
		ЗагружаемыеОбъекты = ЗагруженныеОбъектыИзФайла(СтррСведения);
		Результат = ЗагрузитьДанныеИзФайлаОбмена(Агент, ФайлОбмена, ЗагружаемыеОбъекты);
		УдалитьФайлы(ФайлОбмена.ПолноеИмя);
		Если Не Результат Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Если ЗагружаемыеОбъекты.СтррКонстанты.Свойство("ИдентификаторДопОтчетаДляОбновления") Тогда
		//Запрос на доп отчет.
		ВыгрузитьДанныеДляАгента(Агент, ЗагружаемыеОбъекты);
	Иначе
		ЗагрузитьGPSФайлы(Каталог);
		Если ОтветнаяВыгрузка Тогда
			ВыгрузитьДанныеДляАгента(Агент, Истина);
		КонецЕсли;
		
	КонецЕсли;	      		
	
	Возврат Истина;
КонецФункции

// Возвращает папку, куда скопирован и распакован файл обмена,
// или Неопределено, если произошла ошибка.
// В параметре СтррСведения возвращаются дополнительные данные о содержимом архива.
Функция ЗагрузитьИРаспаковатьФайлПоСпособуОбмена(СтррСведения)

	Если СпособОбмена = "АПСОД" Тогда
		ФайлАрхив = СОДЗагрузитьФайл();
	ИначеЕсли СпособОбмена = "FTP" Тогда	
		ФайлАрхив = ФТПЗагрузитьФайл();
	ИначеЕсли СпособОбмена = "КаталогОбмена" Тогда
		ФайлАрхив = КОЗагрузитьФайл();		
	Иначе
		ВызватьИсключение("Неизвестный способ обмена: " + СпособОбмена);
	КонецЕсли;
	
	Если ФайлАрхив <> Неопределено Тогда
		СохранитьФайлДляУД(ФайлАрхив.ПолноеИмя, Истина);
		Каталог = КаталогВременныхФайловАгента();	
		Если РаспаковатьФайлОбменаВПапку(ФайлАрхив, Каталог, СтррСведения) Тогда
			Возврат Каталог;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции

// Процедура загружает все файлы с треками из Каталога.
Процедура ЗагрузитьGPSФайлы (Каталог, Знач ИмяФайла = Неопределено)
	
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = "gps*.txt";
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(Каталог, ИмяФайла);
		
	Для Каждого ФайлТрека Из НайденныеФайлы Цикл 
		ЗагрузитьТрек(ФайлТрека, ВыбНастройкиАгента.СсылкаМУ);
		УдалитьФайлы(ФайлТрека.ПолноеИмя);
	КонецЦикла;
	
Конецпроцедуры

// Возвращает подкаталог фотографий относительно исходного каталога
Функция ПодкаталогФотографийВременный(Каталог)
	
	Возврат ДополнитьСлешВПуть(Каталог) + "Photos";

КонецФункции 

// Функция возвращает Истина, если успешно распакован архив.
// В структуре Сведения возвращается дополнительная информация по содержимому распакованного архива.
Функция РаспаковатьФайлОбменаВПапку(ФайлАрхив, КаталогНазначения, СтррСведения)
	
	КаталогФотографийВременный = ПодкаталогФотографийВременный(КаталогНазначения);
	
	//@skip-check empty-except-statement
	Попытка
		УдалитьФайлы(КаталогНазначения, "To*.*");
		УдалитьФайлы(КаталогНазначения, "gpstrack.txt");
		УдалитьФайлы(КаталогНазначения, "PhotosToCDB.zip"); 
		УдалитьФайлы(КаталогФотографийВременный, "*.*"); 
	Исключение
	КонецПопытки;
	
	Если ФайлАрхив <> Неопределено Тогда
		
		ПарольАрхива = СокрЛП(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ПарольНастроек.Значение);
		Попытка
			АрхивОбмена = Новый ЧтениеZipФайла(ФайлАрхив.ПолноеИмя, ПарольАрхива);
		Исключение
		    ОповеститьОСобытии("Ошибка чтения архива! " + ОписаниеОшибки(), "ОшибкаОбмен",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки; 
		АрхивОбмена.ИзвлечьВсе(КаталогНазначения);
		АрхивОбмена.Закрыть();
		Попытка
			УдалитьФайлы(ФайлАрхив.ПолноеИмя);
		Исключение
			Текст = "Не удалось удалить файл загрузки: " + ФайлАрхив.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки;
		
		ФайлАрхиваФотографий = ДополнитьСлешВПуть(КаталогНазначения) +  "PhotosToCDB.zip";
		Если ФайлСуществует(ФайлАрхиваФотографий) Тогда
			ПроверитьИСоздатьКаталог(КаталогФотографийВременный);
			АрхивФото = Новый ЧтениеZipФайла(ФайлАрхиваФотографий);
			АрхивФото.ИзвлечьВсе(КаталогФотографийВременный);
			АрхивФото.Закрыть();
		КонецЕсли;
		СтррСведения.Вставить("КаталогФото", КаталогФотографийВременный);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура ОтправитьФайлПоСпособуОбмена(ФайлОтправки)

	ИмяФайлаНаСервере = "From1C.zip";
	КаталогАгента = Неопределено;
	
	Если СпособОбмена = "АПСОД" Тогда
		КаталогОбменаАгентаПолучитьИПроверить(КаталогАгента);
		Если ЗначениеЗаполнено(КаталогАгента) Тогда
			ИмяФайлаАПС = КаталогАгента + ИмяФайлаНаСервере;
			Попытка
				//@skip-check object-deprecated
				КопироватьФайл(ФайлОтправки, ИмяФайлаАПС);
				Текст = СтрШаблон_("Данные для агента выгружены в файл ""%1"".", ИмяФайлаАПС);
				ОповеститьОСобытии(Текст,,, "ТекущийАгент");
				Результат = Истина;
			Исключение
				Текст = "Данные для агента не отправлены! Ошибка: " + ОписаниеОшибки(); 				
				ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгентСообщить");
				Результат = Ложь;
			КонецПопытки;
		КонецЕсли; 
		
	ИначеЕсли СпособОбмена = "FTP" Тогда
		Результат = ФТПВыгрузитьФайл(ФайлОтправки, ИмяФайлаНаСервере);
		
	ИначеЕсли СпособОбмена = "КаталогОбмена" Тогда
		КаталогОбменаАгентаПолучитьИПроверить(КаталогАгента);
		Если ЗначениеЗаполнено(КаталогАгента) Тогда
			ИмяФайлаКО = КаталогАгента + ИмяФайлаНаСервере;
			//@skip-check object-deprecated
			КопироватьФайл(ФайлОтправки, ИмяФайлаКО);
			Текст = СтрШаблон_("Данные для агента выгружены в файл ""%1"".", ИмяФайлаКО);
			ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		КонецЕсли;
	Иначе
		
		ВызватьИсключение("Неизвестный способ обмена: " + СпособОбмена);
		
	КонецЕсли;

	СохранитьФайлДляУД(ФайлОтправки, Ложь);
	
	//@skip-check empty-except-statement
	Попытка
		УдалитьФайлы(ФайлОтправки);
	Исключение
	КонецПопытки;

	Если Результат = Истина Тогда
		ДобавитьЗаписьОграничениеВыгрузкиФотографийТоваров();
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьФайлДляУД(ПутьИИмяФайла, ФайлПолученИзМУ)
	
	//@skip-check use-non-recommended-method
	Если Не ЗначениеЗаполнено(РежимВыгрузкиВУД) Тогда
		Возврат;
	ИначеЕсли ФайлПолученИзМУ Тогда // попытка выгрузить в УД, файл полученный из МУ 
		//@skip-check use-non-recommended-method
		Если 0 = Найти(РежимВыгрузкиВУД, "МУ") Тогда // не включен режим выгрузки в УД файлов, полученных из МУ
			Возврат;
		КонецЕсли;
	ИначеЕсли 0 = Найти(РежимВыгрузкиВУД, "УС") Тогда // попытка выгрузить в УД, файл отправляемый в МУ 
		Возврат; // не включен режим выгрузки в УД файлов, отправляемых в МУ
	КонецЕсли;
	
	КаталогАПДиск = ПодкаталогДанных("АПДиск",, Истина);
	ИмяФайла 	  = ФайлИзвлечьИмя(ПутьИИмяФайла);
		
	ИДАгента 		= XMLСтрока(ВыбНастройкиАгента.Пользователь);
	КаталогАгента 	= КаталогАпДиск + ИДАгента;
	ПроверитьИСоздатьКаталог(КаталогАгента, Истина);
	//@skip-check use-non-recommended-method
	ТаймСтэмп = Формат(Число(ТекущаяДата() - Дата("19700101")), "ЧН=0; ЧГ=0");
	ФайлПриемникДляУД = КаталогАгента + "\" + СокрЛП(ТаймСтэмп) + "_" + ИДАгента + "_" + ИмяФайла;
	//@skip-check object-deprecated
	КопироватьФайл(ПутьИИмяФайла, ФайлПриемникДляУД);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_ОбменДанными_ФТП

Функция ФТПСоздатьПодключение()
	
	Если ПустаяСтрока(FTPАдрес) Или ПустаяСтрока(FTPПользователь) Тогда
		Текст = "В настройках обмена заданы не все параметры соединения с FTP-сервером. Работа с FTP невозможна!";
		ОповеститьОСобытии(Текст, "ОшибкаНастройки");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ПодключениеКФТП = Новый FTPСоединение(FTPАдрес,, FTPПользователь, FTPПароль,, FTPПассивныйРежим, 0);		
	Исключение
		ОповеститьОСобытии("Ошибка подключения. Причина: " + ОписаниеОшибки(), "ОшибкаОбмен");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ПодключениеКФТП;
	
КонецФункции //Функция СоздатьПодключениеКФТП()

Функция ФТПВыгрузитьФайл(ФайлОтправки, ИмяФайлаНаСервере)

	ПодключениеFTP = ФТПСоздатьПодключение();
	Если ПодключениеFTP = Неопределено Тогда
		Текст = "Данные для агента не отправлены! Не удалось установить FTP соединение"; 				
		ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгентСообщить");
		Возврат Ложь;
	КонецЕсли;
	
	ФТППапка = СтрЗаменить(ВыбНастройкиАгента.КаталогОбмена, "\", "/");
	
	ФТППапкаСервера = СтрЗаменить(FTPКаталогСервера, "\", "/");
	Если Не ПустаяСтрока(ФТППапкаСервера) И Лев(ФТППапка, 1) <> "\" Тогда // указан начальный каталог сервера и указана относительная папка агента
		Если ПодключениеFTP.НайтиФайлы(ФТППапкаСервера).Количество() = 0 Тогда
			ПодключениеFTP.СоздатьКаталог(ФТППапкаСервера);
		КонецЕсли;
		ПодключениеFTP.УстановитьТекущийКаталог(ФТППапкаСервера);
	КонецЕсли;
	
	Если ПодключениеFTP.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
		ПодключениеFTP.СоздатьКаталог(ФТППапка);
	КонецЕсли;
	
	ИмяФайлаFTP = ФТППапка + "/" + ИмяФайлаНаСервере;
	
	Попытка
		ПодключениеFTP.Записать(ФайлОтправки, ИмяФайлаFTP);
		Текст = "Данные для агента успешно выгружены на FTP-сервер.";
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
	Исключение	
		Текст = "Данные для агента не отправлены! Причина: ";
		Если ПодключениеFTP.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
			Текст = Текст + "не существует папка на FTP-сервере " + ФТППапка;
		Иначе
			Текст = Текст + ОписаниеОшибки();				
		КонецЕсли;
		ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгентСообщить");
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
КонецФункции

// При наличии не архивированного файла gpstrack.txt в папке агента, загружает его как фоновую передачу GPS координат.  
// Возвращает объект "Файл", полученный из FTP-сервера.
// 
Функция ФТПЗагрузитьФайл()
	
	ПодключениеКФТП = ФТПСоздатьПодключение();	
	Если ПодключениеКФТП = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяФайла = "To1C.zip";
	
	ФТППапка = ВыбНастройкиАгента.КаталогОбмена;
	Если ПустаяСтрока(ФТППапка) Тогда
		Текст = "В ""Настройках агентов"" у агента не указана папка обмена!";
		ОповеститьОСобытии(Текст, "ОшибкаНастройки",, "ТекущийАгент");
		Возврат Неопределено;
	КонецЕсли;
	
	ФТППапка = ДополнитьСлешВПуть(ФТППапка, "/");
	
	ФТППапкаСервера = СтрЗаменить(FTPКаталогСервера, "\", "/");
	Если Не ПустаяСтрока(ФТППапкаСервера) И Лев(ФТППапка, 1) <> "\" Тогда // указан начальный каталог сервера и указана относительная папка агента
		ПодключениеКФТП.УстановитьТекущийКаталог(ФТППапкаСервера);
	КонецЕсли; 
	
	КаталогТ = КаталогВременныхФайловДляТранспорта(ВыбНастройкиАгента.КаталогОбмена);
	
	//{{ ЗАГРУЗКА фоновых GPS треков
	
	КаталогЛокальный = КаталогВременныхФайловАгента();
	
	ЗагрузитьGPSФайлы(КаталогЛокальный);  //Загружаем файлы с треками ,если таковые есть.
	
	Если ПодключениеКФТП.НайтиФайлы(ФТППапка).Количество() = 0 Тогда
		ПодключениеКФТП.СоздатьКаталог(ФТППапка);
		Текст = "На  FTP-сервере создана папка агента: " + ФТППапка;
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
	КонецЕсли;
	
	НайденныеФайлы = ПодключениеКФТП.НайтиФайлы(ФТППапка, "gps*.txt");
		
	Для Каждого ФайлТрек Из НайденныеФайлы Цикл
		//КОПИРОВАТЬ
		Попытка
			ПодключениеКФТП.Получить(ФайлТрек.ПолноеИмя, КаталогЛокальный + ФайлТрек.Имя);
		Исключение
			Текст = "Ошибка при скачивании файла трека от СОД. Возможная причина: отсутсвует папка агента (%1). Трек от агента не загружен!";
			ОповеститьОСобытии(СтрШаблон_(Текст, ВыбНастройкиАгента.КаталогОбмена), "ОшибкаОбмен",, "ТекущийАгент");
			Продолжить;
		КонецПопытки;
		//ЗАГРУЗКА
		Попытка
			ЗагрузитьGPSФайлы(КаталогЛокальный, ФайлТрек.Имя);  
		Исключение
			Текст = "Не удалось Загрузить файл трека: " + ФайлТрек.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
			Продолжить;
		КонецПопытки;
		//УДАЛЕНИЕ файла "gpstrack.txt" на ФТП-сервере
		Попытка
			ПодключениеКФТП.Удалить(ФайлТрек.ПолноеИмя);
		Исключение
			Текст = "Не удалось удалить файл ""gpstrack.txt"" на FTP-сервере. Причина: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки;
	КонецЦикла;
	
	//}} ЗАГРУЗКА фоновых GPS треков

	// КОПИРОВАНИЕ файла "To1C.*" с данными с ФТП в каталоги временных файлов
	Попытка    		
		Если ПодключениеКФТП.НайтиФайлы(ФТППапка, "To1C.*").Количество() = 0 Тогда
			Если НайденныеФайлы.Количество() > 0 Тогда
				ОповеститьОСобытии("Загружены только данные по фоновой передачи GPS трека. Файл обмена данными отсутствует.",,, "ТекущийАгентСообщить");
			Иначе
				ОповеститьОСобытии("Нет данных на FTP-сервере.",,, "ТекущийАгентСообщить");
			КонецЕсли;
			Результат = Неопределено; 
		Иначе
			Если НайденныеФайлы.Количество() > 0 Тогда
				ОповеститьОСобытии("Загружены данные по фоновой передачи GPS трека.",,, "ТекущийАгентСообщить");
			КонецЕсли;
			ИмяФайлаФТП   = ФТППапка + ИмяФайла;
			ФайлЛокальный = КаталогТ + ИмяФайла;
			ПодключениеКФТП.Получить(ИмяФайлаФТП, ФайлЛокальный);
			Результат = Новый Файл(ФайлЛокальный); 
		КонецЕсли;  
	Исключение             
		Текст = "Ошибка при скачивании файла с FTP-сервера. Возможная причина: отсутсвует папка агента (%1) на FTP-сервере. Данные от агента не загружены!";
		ОповеститьОСобытии(СтрШаблон_(Текст, ВыбНастройкиАгента.КаталогОбмена), "ОшибкаОбмен",, "ТекущийАгент");
		Текст = "Папка на FTP-сервере будет создана автоматически при выгрузке данных из 1С:Предприятия на FTP-сервер.";
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		Результат = Неопределено;			
	КонецПопытки;   	
	
	//УДАЛЕНИЕ файла "To1C.*" на ФТП-сервере
	Попытка
		Если Результат <> Неопределено Тогда
			ПодключениеКФТП.Удалить(ФТППапка, "To1C.*");
		КонецЕсли;
	Исключение
		Текст = "Не удалось удалить файл ""To1C.zip"" на FTP-сервере. Причина: " + ОписаниеОшибки();
		ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// СлужебныеПроцедурыИФункции_ОбменДанными_ФТП
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции_ОбменДанными_СОД

// Функция возвращает файл (объект "Файл") для загрузки в УТ. Способ обмена - "СОД".
// 
//@skip-check module-structure-method-in-regions
Функция СОДЗагрузитьФайл()

	КаталогОбменаАгента = КаталогОбменаАгента(Ложь);    // Каталог СОД.
	
	Если КаталогОбменаАгента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	//{{ЗАГРУЗКА фоновых GPS треков
	
	КаталогОбменаАгентаПолучитьИПроверить(КаталогОбменаАгента);

	НайденныеФайлы = НайтиФайлы(КаталогОбменаАгента, "gps*.txt");
	
	Для Каждого ФайлТрек Из НайденныеФайлы Цикл
		//ЗАГРУЗИТЬ
		Попытка
			ЗагрузитьGPSФайлы(КаталогОбменаАгента, ФайлТрек.Имя);  
		Исключение
			Текст = "Не удалось Загрузить файл трека: " + ФайлТрек.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
			Продолжить;
		КонецПопытки;
		//УДАЛИТЬ ИЗ СОД
		Попытка
			УдалитьФайлы(ФайлТрек.ПолноеИмя);   				
		Исключение
			Текст = "Не удалось Удалить файл трека: " + ФайлТрек.ПолноеИмя + " по причине: " + ОписаниеОшибки();
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки; 
		 
		стрПутьКВремФайлТрека = ФайлТрек.ПолноеИмя + ".clt"; 
		Попытка
			УдалитьФайлы(стрПутьКВремФайлТрека);
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось удалить временный файл трека: ""%1"" по причине: %2'"), стрПутьКВремФайлТрека, ОписаниеОшибки());
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
		КонецПопытки;
	КонецЦикла;
	
	//}}ЗАГРУЗКА фоновых GPS треков

	ФайлАрхив = НайтиФайлОбменаВКаталоге(КаталогОбменаАгента);
	
	Если ФайлАрхив = Неопределено И НайденныеФайлы.Количество() > 0 Тогда
		ОповеститьОСобытии("Загружены только данные по фоновой передачи GPS трека. Файл обмена данными отсутствует.",,, "ТекущийАгентСообщить");
	ИначеЕсли НайденныеФайлы.Количество() > 0 Тогда
		ОповеститьОСобытии("Загружены данные по фоновой передачи GPS трека.",,, "ТекущийАгентСообщить");
	КонецЕсли;
	
	Возврат ФайлАрхив;

КонецФункции

// Функция возвращает файл (объект "Файл") для загрузки в УТ. Способ обмена - "Каталог обмена".
//
Функция КОЗагрузитьФайл()
	
	// Каталог = КаталогВременныхФайловАгента(); // функция всегда возвращает корректный результат
	
	КаталогОбменаАгента = КаталогОбменаАгента(Ложь);
	
	Если КаталогОбменаАгента = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлАрхив = НайтиФайлОбменаВКаталоге(КаталогОбменаАгента);
	
	Возврат ФайлАрхив;
	
КонецФункции

// Функция возвращает путь к каталогу обмена для агента, указанного в реквизите обработки ВыбНастройкиАгента.
// Если настройки не заданы или если не удалось создать каталог, возращает Неопределено.
// 
// Параметры:
//	СоздаватьКаталог - Булево - Если Истина, то каталог будет создан (если его нет), иначе каталог будет только проверен на существование.
//
Функция КаталогОбменаАгента(СоздаватьКаталог)

	Если ПустаяСтрока(КаталогОбмена) Тогда
		
		ОповеститьОСобытии("Не указан каталог обмена в ""Настройках обмена"".", "ОшибкаНастройки");
		Результат = Неопределено;
		
	ИначеЕсли ПустаяСтрока(ВыбНастройкиАгента.КаталогОбмена) Тогда
		
		Текст = "Не указан каталог обмена для агента в ""Настройках агентов"", агент: " + Строка(ВыбНастройкиАгента.Пользователь);
		ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгент");
		Результат = Неопределено;
		
	ИначеЕсли Не СоздаватьКаталог Тогда // проверяем каталог на существование
		
		КаталогАгента = ДополнитьСлешВПуть(КаталогОбмена) + ВыбНастройкиАгента.КаталогОбмена;
		Если КаталогСуществует(КаталогАгента) Тогда
			Результат = ДополнитьСлешВПуть(КаталогАгента);
		Иначе
			Текст = "Не существует каталог """ + КаталогАгента + """, указанный в настройках агента. ";
			Если СпособОбмена = "АПСОД" Тогда
				Текст = Текст + "Обновите файл настроек службы СОД в ""Настройках обмена""."; 
			КонецЕсли;
			ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгентСообщить");
			Результат = Неопределено;			
		КонецЕсли;
		
	Иначе // пытаемся создать каталог, если его нет.
		
		ПроверитьИСоздатьКаталог(КаталогОбмена);
		КаталогАгента = ДополнитьСлешВПуть(КаталогОбмена) + ВыбНастройкиАгента.КаталогОбмена;
		ПроверитьИСоздатьКаталог(КаталогАгента);
		Если КаталогСуществует(КаталогАгента) Тогда
			Результат = ДополнитьСлешВПуть(КаталогАгента);
		Иначе
			Текст = "Не удалось создать каталог обмена для агента, каталог: " + КаталогАгента; 
			ОповеститьОСобытии(Текст, "ОшибкаНастройки", , "ТекущийАгент");
			Результат = Неопределено;
		КонецЕсли;			
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Процедура пытается получить каталог обмена данными для агента.
// Если попытка неудачная, то выводистя сообщение.
// Каталог вовзращается в параметре Каталог.
Процедура КаталогОбменаАгентаПолучитьИПроверить(Каталог)
	
	Каталог = КаталогОбменаАгента(Истина);
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		Текст = "Данные для агента не выгружены - не задан каталог обмена агента.";
		ОповеститьОСобытии(Текст,,, "ТекущийАгентСообщить");
	КонецЕсли; 
	
КонецПроцедуры

// Загружает данные из файла обмена по данным из внешнего события.
// Параметры:
//   МПараметры - Массив Из Строка.
// 		Содержимое массива МПараметры:
//		0-й - идентификатор МУ
//		1-й - псевдоним торгвого агента (владельца КПК)
//		2-й - директория обмена данными 
//		3-й - имя полученного с КПК файла с директорией
//		4-й - время сеанса
//		5-й - контрольная сумма полученного файла
//  ЗагрузитьВсеНастройки - Булево
// Возвращаемое значение:
//   Структура:
//   * ЕстьОшибки - Булево - признак наличия ошибок
//   * Сообщения - Массив Из Структура - сообшения
Функция СОДЗагрузитьДанныеПоВнешнемуСобытию(МПараметры, ЗагрузитьВсеНастройки = Ложь) Экспорт
	
	СтрИдМУ 	= МПараметры[0];
	Псевдоним 	= МПараметры[1];
	
	СтррРезультат = Новый Структура("ЕстьОшибки,Сообщения", Ложь, Новый Массив);
	
	Если ЗагрузитьВсеНастройки Тогда
		ЗагрузитьНастройкиДляРаботыОбмена();
	КонецЕсли;
	
#Область ПроверкаСправочников

	Если Не ВременныеТаблицы.Свойство("МобильныеУстройства") Тогда
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Не заполнен справочник мобильных устройств.'"), Истина);
	КонецЕсли;
	
	Если Не ВременныеТаблицы.Свойство("НастройкиАгентов") Тогда 
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Не заполнены настройки торговых агентов.'"), Истина);
	КонецЕсли;
	
	Если СтррРезультат.ЕстьОшибки Тогда
		Возврат СтррРезультат;
	КонецЕсли;
	
	ИдМУ = Новый УникальныйИдентификатор(СтрИдМУ);
	ЭлементМУ = ВременныеТаблицы.МобильныеУстройства.Найти(ИдМУ, "ИдентификаторМУ");
	Если ЭлементМУ = Неопределено Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Не найдено мобильное устройство с идентификатором ""%1"".'"), СтрИдМУ);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Проверьте настройки агентов и обновите файл настроек обмена СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;
	
	ЭлементАгент = ВременныеТаблицы.НастройкиАгентов.Найти(ЭлементМУ.ID, "СсылкаМУ");
	Если ЭлементАгент = Неопределено Тогда
		Текст = СтрШаблон_(НСтр("ru = 'Не найден агент для мобильного устройства с идентификатором ""%1"" (%2).'"), СтрИдМУ, ЭлементМУ.Наименование);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Проверьте настройки агентов и обновите файл настроек обмена СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;
	
	КаталогОбменаИзСпрАгентов = СокрЛП(ЭлементАгент.КаталогОбмена);
	КаталогОбменаИзСОД = СокрЛП(МПараметры[2]);
	Если НРег(КаталогОбменаИзСпрАгентов) <> НРег(КаталогОбменаИзСОД) Тогда
		Текст = СтрШаблон_(НСтр("ru = 'По сведениям из настроек СОД поступили данные от агента ""%1"", папка: ""%2"".'"), Псевдоним, КаталогОбменаИзСОД);
		ВывестиСообщение(СтррРезультат, Текст, Истина);
		Текст = СтрШаблон_(НСтр("ru = 'По сведениям из настроек агентов указаны другие данные (агент ""%1"", папка: ""%2"")!'"), ЭлементАгент.Пользователь, КаталогОбменаИзСпрАгентов);
		ВывестиСообщение(СтррРезультат, Текст);
		ВывестиСообщение(СтррРезультат, НСтр("ru = 'Папки обмена отличаются! Проверьте настройки агентов и обновите файл настроек обмена СОД.'"));
		Возврат СтррРезультат;
	КонецЕсли;

// ПроверкаСправочников
#КонецОбласти 

	ЗагрузитьДанныеДляАгента(ЭлементАгент.Пользователь);
	
	Возврат СтррРезультат;
	
КонецФункции

// sk_220111 MOD-2992
// Генерирует текст файла настройки СОД
//
// Параметры:
//  ВыводитьСообщения	 - Булево	 - признак вывода сообщения при создании файла настроек
//
Процедура СОДСоздатьФайлНастроек(ВыводитьСообщения = Ложь) Экспорт
	
	СпособОбмена = ПрочитатьЗначениеНастройки("СпособОбмена");
	Если Не СпособОбмена = "АПСОД" Тогда
		Возврат;
	КонецЕсли;
	
	СтррРезультат = СОДСгенерироватьФайлНастройки();
	Если СтррРезультат.Свойство("Замечания") И Не СтррРезультат.Замечания.Количество() = 0 Тогда
		Для Каждого Замечание Из СтррРезультат.Замечания Цикл
			//@skip-check object-deprecated
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Замечание.Описание,, "Объект." + Замечание.Реквизит)
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если СтррРезультат.Свойство("Текст") И СтррРезультат.Свойство("Кодировка") И СтррРезультат.Свойство("ПолноеИмяФайла") Тогда
		Попытка
			СтррРезультат.Текст.Записать(СтррРезультат.ПолноеИмяФайла, СтррРезультат.Кодировка);
			Если ВыводитьСообщения Тогда 
				Текст = НСтр("ru='Создан файл настроек службы обмена данными:'") + " """ + СтррРезультат.ПолноеИмяФайла + """";
				ОповеститьОСобытии(Текст);
			КонецЕсли;
		Исключение
			Текст = НСтр("ru='Файл настроек службы обмена данными не создан!'");
			ОповеститьОСобытии(Текст, "ОшибкаНастройки");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет сообщение в массив сообщений для будущего вывода на Клиенте.
Процедура ДобавитьЗамечание(МЗамечания, Описание, Реквизит)
	СтррЗамечание = Новый Структура("Описание,Реквизит", Описание, Реквизит);
	МЗамечания.Добавить(СтррЗамечание);
КонецПроцедуры

// Функция генерирует и возвращает текст файла настройки СОД.
// Предварительно проверяет зависимые настройки СОД.
//
Функция СОДСгенерироватьФайлНастройки()
	
	СтррРезультат = Новый Структура;
	
	СтррЗначения = ПрочитатьЗначенияНастроек("НастройкиАгентов,МобильныеУстройства,СОДПорт,КаталогОбмена");
	
	ТЗНастройкиАгентов = СтррЗначения.НастройкиАгентов;
	ТЗМУ 			   = СтррЗначения.МобильныеУстройства;
	
#Область ПроверкаРеквизитовИСправочников
	// Проверяем значения настроек СОД и зависимых настроек
	МЗамечания = Новый Массив;
	
	Если ПустаяСтрока(СтррЗначения.КаталогОбмена) Тогда
		ДобавитьЗамечание(МЗамечания, НСтр("ru='Не указано значение настройки ""Каталог обмена""!'"), "КаталогОбмена");
	КонецЕсли;
	
	Если Не ПроверитьИСоздатьКаталог(СтррЗначения.КаталогОбмена, Истина) Тогда
		ДобавитьЗамечание(МЗамечания, НСтр("ru='Не существует каталога, указанного в настройке ""Каталог обмена""!'"), "КаталогОбмена");
	КонецЕсли;
		
	Если СтррЗначения.СОДПорт = 0 Тогда
		ДобавитьЗамечание(МЗамечания, НСтр("ru='Не указан порт службы Агент Плюс СОД'"), "СОДПорт");
	КонецЕсли;
	
	СтррСтатус = СправочникАгентовПроверитьГотовность(ТЗНастройкиАгентов);
	Если Не СтррСтатус.Готово Тогда
		ДобавитьЗамечание(МЗамечания, СтррСтатус.Описание, "НастройкиАгентов");
	КонецЕсли;
	
	СтррСтатус = СправочникМобильныхУстройствПроверитьГотовность(ТЗМУ);
	Если Не СтррСтатус.Готово Тогда
		ДобавитьЗамечание(МЗамечания, СтррСтатус.Описание, "МобильныеУстройства");
	КонецЕсли;
	
	СтррРезультат.Вставить("Замечания", МЗамечания);
	
	Если МЗамечания.Количество() > 0 Тогда
		Возврат СтррРезультат;
	КонецЕсли;
	
// ПроверкаРеквизитовИСправочников
#КонецОбласти 
	
	ИдКонфигурации = ВРег(Строка(Новый УникальныйИдентификатор));
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("<?xml version=""1.0"" encoding=""UTF-16""?>");
	Текст.ДобавитьСтроку("<APlusServer VERSION=""2.5"">");
	Текст.ДобавитьСтроку("<ServerConfig PortExternal=""" + Формат(СтррЗначения.СОДПорт, "ЧГ=0'") 
		+ """ ConfigID=""" + ИдКонфигурации + """ />");
	Текст.ДобавитьСтроку("<!-- PortExternal - номер порта для запросов от мобильного устройства -->");
	Текст.ДобавитьСтроку("<!-- Образец описания настроек для мобильного устройства: -->");
	Текст.ДобавитьСтроку("<!-- PPC DEVICE_ID=""00000000-0000-0000-0000-000000000000"" PSEUDONIM=""Agent1"" DIRECTORY=""PPC1"" -->");
	
	КоличествоАгентов  = 0;
	
	Для Каждого НастройкаАгента Из ТЗНастройкиАгентов Цикл
		
		Если НастройкаАгента.СтатусНастроек <> 1 Тогда // включаем только для агентов с зелеными галками - для неработающих агентов МУ от обмена отключаем
			Продолжить;
		КонецЕсли;
		
		СсылкаМУ = НастройкаАгента.СсылкаМУ;
		МУ = ТЗМУ.Найти(СсылкаМУ, "ID");
		
		Если МУ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИдМУ 		= ВРег(Строка(МУ.ИдентификаторМУ));
		Псевдоним 	= СокрЛП(Строка(НастройкаАгента.Пользователь)) + " (" + СокрЛП(МУ.Наименование) + ")";
		Каталог		= НастройкаАгента.КаталогОбмена;
		
		Текст.ДобавитьСтроку("<PPC DEVICE_ID=""" + ИдМУ + """ PSEUDONIM=""" + Лев(Псевдоним, 60) + """ DIRECTORY=""" + Каталог + """ />");
		КоличествоАгентов = КоличествоАгентов + 1;
		
	КонецЦикла;
	
	Текст.ДобавитьСтроку("</APlusServer>");
	
	ПолноеИмяФайла = ДополнитьСлешВПуть(СтррЗначения.КаталогОбмена) + "config.xml";
	
	СтррРезультат.Вставить("Текст", 			Текст);
	СтррРезультат.Вставить("Кодировка", 		КодировкаТекста.UTF16);
	СтррРезультат.Вставить("ПолноеИмяФайла", 	ПолноеИмяФайла);
	СтррРезультат.Вставить("КоличествоАгентов", КоличествоАгентов);
	
	Возврат СтррРезультат;
	
КонецФункции // СгенерироватьФайлНастройкиСОД

// СлужебныеПроцедурыИФункции_ОбменДанными_СОД
#КонецОбласти

// Преобразует исходную строку в транслит.
// Параметры:
//   Строка - Строка - исходная строка.
// Возвращаемое значение:
//   Строка
Функция СтрокаЛатиницей(Знач Строка) Экспорт
	
	Результат = "";
	
	Буквы = "аa,бb,вv,гg,дd,еe,ёe,жzh,зz,иi,йy,кk,лl,мm,нn,оo,пp,рr,сs,тt,уu,фf,хkh,цts,чch,шsh,щshch,ъ,ыy,ь,эe,юyu,яya,";
	
	//ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		Если КодСимвола(Символ) < 128 Тогда
			СимволЛатиницей = Символ;
		Иначе
			//@skip-check use-non-recommended-method
			ПозНачала = Найти(Буквы, НРег(Символ)); // Поиск соответствия без учета регистра.			
			Если ПозНачала = 0 Тогда
				// Другие символы остаются "как есть".
				СимволЛатиницей = Символ;
			Иначе
				ПозНачала = ПозНачала + 1;
				ПозКонца = ПозНачала;
				Пока Сред(Буквы, ПозКонца, 1) <> "," Цикл
					ПозКонца = ПозКонца + 1;
				КонецЦикла;
				СимволЛатиницей = Сред(Буквы, ПозНачала, ПозКонца - ПозНачала);
				Если Символ = ВРег(Символ) Тогда
					СимволЛатиницей = ВРег(СимволЛатиницей); // восстанавливаем регистр
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		//ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокуВЧисло(Строка)
	
	СтрРезультат = "";
	
	БылаТочка = Ложь;
	Для Поз = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Поз, 1);
		Код = КодСимвола(Символ);
		Если Код >= 48 И Код <= 57 Или Код = 46 Тогда
			СтрРезультат = СтрРезультат + Символ;
		ИначеЕсли Не БылаТочка И Код = 46 Тогда
			СтрРезультат = СтрРезультат + Символ;
			БылаТочка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылаТочка Тогда
		СтрРезультат = "0" + СтрРезультат + "0"; // чтобы корректно обработалось число вида ".x" или "x."
	КонецЕсли; 
	
	Возврат ?(СтрДлина(СтрРезультат) = 0, 0, Число(СтрРезультат));
	
КонецФункции

Функция ЗначениеВЧисло(Значение)
	
	Строка = СтрЗаменить(Значение, ",", ".");
	
	Возврат ?(ЗначениеЗаполнено(Строка), СтрокуВЧисло(Строка), 0);
	
КонецФункции

// Функция сокращает слово до N символов. Слово передается латиницей.
Функция СократитьСлово(Слово, МаксДлина)
	
	Длина = СтрДлина(Слово);
	Если Длина <= МаксДлина Тогда
		Возврат Слово;
	КонецЕсли;
	
	Результат = Лев(Слово, МаксДлина - 1); // пытаемся последним символом добавить согласную букву
	Для Поз = МаксДлина По Длина Цикл
		Символ = Сред(Слово, Поз, 1);
		//@skip-check use-non-recommended-method
		Если 0 = Найти("aeiou", Символ) Тогда // согласная буква
			Результат = Результат + Символ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Результат) <> МаксДлина Тогда
		Результат = Лев(Слово, МаксДлина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает уникальное название для имени файла на основе переданного имени.
// Если в переданном имени есть несколько слов, то функция стремится первые три слова включить в название по правилу:
// первые 4 символа - от первого слова + по одному символу от второго и третьего слова (т.е. сокращение от фамилии и инициалов).
// 
// Параметры:
//	Название - Строка - исходная строка, на основании которой генерировать название.
//	МЗапретныеНазвания - Массив Из Строка - массив названий для проверки на уникальность.
//	
// Возвращаемое значение:
//   Строка
//
Функция ПреобразоватьВНазваниеКаталога(Знач Название, МЗапретныеНазвания)
	
	Название = НРег(СтрокаЛатиницей(СокрЛП(Название)));
	
	ИсключаемыеСимволы = ",;:?!-+\/=<>~'""@#$%^&*()[]{}|&"; // запрещенные символы в названии имен файлов
	ВсегоИсключать = СтрДлина(ИсключаемыеСимволы);
	Для Поз = 1 По ВсегоИсключать Цикл // цикл исключения запрещенных символов
		ИсключитьСимвол = Сред(ИсключаемыеСимволы, Поз, 1);
		Название = СтрЗаменить(Название, ИсключитьСимвол, "");
	КонецЦикла;
	
	Название = СокрЛП(СтрЗаменить(Название, ".", " ")); // заменяем точки на пробелы
	
	// исключаем идущие подряд пробелы
	ПрежнееНазвание = Неопределено;
	Пока Название <> ПрежнееНазвание Цикл
		ПрежнееНазвание = Название;
		Название = СтрЗаменить(Название, "  ", " ");
	КонецЦикла;
	
	Если ПустаяСтрока(Название) Тогда
		Название = "folder";
	ИначеЕсли СтрДлина(Название) < 6 Тогда
		Название = Лев(Название + "_fldr", 6);
	Иначе
		МСлова = СтрРазделить_(Название, " ");
		Если МСлова.Количество() > 1 Тогда // название из 2 и более слов
			Название = СократитьСлово(МСлова[0], 4) + Лев(МСлова[1], 1) + ?(МСлова.Количество() > 2, Лев(МСлова[2], 1), "") + "_fldr";
		КонецЕсли;
		Название = Лев(Название, 6);		
	КонецЕсли;
	
	ПрежнееНазвание = Название;
	Номер = 1;
	Пока МЗапретныеНазвания.Найти(Название) <> Неопределено Цикл
		Название = ПрежнееНазвание + Строка(Номер);
		Номер = Номер + 1;
	КонецЦикла;
	
	Возврат Название;
	
КонецФункции

// Функция генерирует имя папки 
Функция ПреобразоватьВНазваниеКаталогаИзИдентификатораМУ(СсылкаМУ, ТЗМУ)
	
	Результат = "";	
	Идентификатор = Неопределено;

	СТЗМУ = ТЗМУ.Найти(СсылкаМУ, "ID");
	Если СТЗМУ = Неопределено Тогда // ошибка - МУ с идентификатором СсылкаМУ не найдено
	ИначеЕсли ЗначениеЗаполнено(СТЗМУ.ИдентификаторМУ) Тогда
		Идентификатор = СТЗМУ.ИдентификаторМУ;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Результат = НРег(СтрЗаменить(Строка(Идентификатор), "-" ,""));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Название каталога, которое интерпретируется как автоматически генерируемое.
// Возвращаемое значение:
//   Строка
Функция НазваниеАвтоКаталога() Экспорт
	
	Возврат НСтр("ru = 'Авто'");
	
КонецФункции

// Процедура заполняет названия каталогов агентов уникальными значениями.
Процедура ЗаполнитьНазванияКаталоговАгентов() Экспорт

	МНазванияКаталогов = НастройкиАгентов.ВыгрузитьКолонку("КаталогОбмена");
	АвтоКаталог = НРег(НазваниеАвтоКаталога());
	ИменаПодкаталоговНаОсновеФИО = ПрочитатьЗначениеНастройки("ИменаПодкаталоговОбменаНаОсновеФИО");
	Если ИменаПодкаталоговНаОсновеФИО = Неопределено Тогда
		ИменаПодкаталоговНаОсновеФИО = Ложь;
	КонецЕсли; 
	
	Если Не ИменаПодкаталоговНаОсновеФИО Тогда
	    ТЗМУ = ПрочитатьЗначениеНастройки("МобильныеУстройства");
		Если ТипЗнч(ТЗМУ) <> Тип("ТаблицаЗначений") Тогда // МУ еще нет в БД, задать каталоги не можем
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Для Каждого СтрокаТ Из НастройкиАгентов Цикл
		Если ПустаяСтрока(СтрокаТ.КаталогОбмена) Или СокрЛП(НРег(СтрокаТ.КаталогОбмена)) = АвтоКаталог Тогда
			Если ИменаПодкаталоговНаОсновеФИО Тогда // название каталога на основе ФИО
				СтрокаТ.КаталогОбмена = ПреобразоватьВНазваниеКаталога(СтрокаТ.Пользователь.Наименование, МНазванияКаталогов);
			Иначе // 
			    СтрокаТ.КаталогОбмена = ПреобразоватьВНазваниеКаталогаИзИдентификатораМУ(СтрокаТ.СсылкаМУ, ТЗМУ);
			КонецЕсли; 
			МНазванияКаталогов.Добавить(СтрокаТ.КаталогОбмена);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Сравнивает две строки версий МТ формате 0.0.0.0.0. Если передана не полная версия, то сравнивается только общая начальная часть версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате 0.0.0.0.0.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсииМТ(СтрокаВерсии1, СтрокаВерсии2)
	
	МВерсия1 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0.0", СтрокаВерсии1), ".");
	МВерсия2 = СтрРазделить_(?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0.0", СтрокаВерсии2), ".");
	
	ВГраница = Мин(МВерсия1.Количество(), МВерсия2.Количество()) - 1;
	
	Результат = 0;
	Для Разряд = 0 По ВГраница Цикл
		Результат = Число(МВерсия1[Разряд]) - Число(МВерсия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Если МВерсия1.Количество() = МВерсия2.Количество() Тогда
		Возврат 0;
	ИначеЕсли МВерсия1.Количество() > МВерсия2.Количество() Тогда
		Возврат 1;
	Иначе
		Возврат -1;
	КонецЕсли;
		
КонецФункции // СравнитьВерсииМТ()

// Проверяет и обновляет версию приложения
//
// Параметры:
//	ВерсияКонфигурации - Строка - версия конфигурации МУ
//
Процедура ПроверитьОбновитьВерсиюПриложенияАгента(ВерсияКонфигурации)
	
	Если Не ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("ВерсияМобильногоПриложения")
		И ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ВерсияМобильногоПриложения.Значение) Тогда
		Если СравнитьВерсииМТ(ВерсияКонфигурации, ВыбНастройкиАгента.НастройкиМобильногоПриложения.ВерсияМобильногоПриложения.Значение) = 0 Тогда
			Возврат;
		КонецЕсли;		
	КонецЕсли;
				
	// Получаем настройки агентов из Хранилище,
	//	 на случай, если в них внесли изменение
	ТЗНастройкиАгентов = ПрочитатьЗначениеНастройки("НастройкиАгентов");
	Если ТипЗнч(ТЗНастройкиАгентов) = Тип("ТаблицаЗначений") Тогда
		СТЗ = ТЗНастройкиАгентов.Найти(ВыбАгент, "Пользователь");
		Если СТЗ <> Неопределено Тогда
			СтррВерсияМУ = Новый Структура("Значение, Идентификатор");
			Если Не СТЗ.НастройкиМобильногоПриложения.Свойство("ВерсияМобильногоПриложения") Тогда
				СТЗ.НастройкиМобильногоПриложения.Вставить("ВерсияМобильногоПриложения", СтррВерсияМУ); 
			КонецЕсли;
			// Обновляем информацию о версии МУ в сохраняемых настройках агента
			СТЗ.НастройкиМобильногоПриложения.ВерсияМобильногоПриложения.Значение = ВерсияКонфигурации; 
			Если Не ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("ВерсияМобильногоПриложения") Тогда
				ВыбНастройкиАгента.НастройкиМобильногоПриложения.Вставить("ВерсияМобильногоПриложения", СтррВерсияМУ); 
			КонецЕсли;
			// Сохраняем настройку агентов
			СохранитьЗначениеНастройки("НастройкиАгентов", ТЗНастройкиАгентов); 	
			// Обновляем информацию о версии МУ во временных таблицах 
			ВыбНастройкиАгента.НастройкиМобильногоПриложения.ВерсияМобильногоПриложения.Значение = ВерсияКонфигурации;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет версию приложения агента с версией для проверки
//
// Параметры:
//  ВерсияДляПроверки  - Строка - версия для проверки
//
// Возвращаемое значение:
//	 Булево - Истина, если версия приложения агента больше версии проверки
//
//Функция ПроверитьВерсиюПриложенияАгента(ВерсияДляПроверки)
//	
//	Если ТипЗнч(ВерсияДляПроверки) <> Тип("Строка") Тогда
//		ВызватьИсключение("Функция ПроверитьВерсиюПриложенияАгента(), неизвестный параметр ВерсияДляПроверки = " + Строка(ВерсияДляПроверки));
//	КонецЕсли;
//	
//	Если Не ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("ВерсияМобильногоПриложения") 
//		Или Не ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ВерсияМобильногоПриложения.Значение) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	Если СравнитьВерсииМТ(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ВерсияМобильногоПриложения.Значение, ВерсияДляПроверки) >= 0 Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//	
//КонецФункции // ПроверитьВерсиюПриложенияАгента()

// СлужебныеПроцедурыИФункции_ОбменДанными
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПланПосещений


#Область СлужебныеПроцедурыИФункции_КартыСервер

// Функция возвращает координаты партнера в структуре.
// Если у партнера были заданы координаты, то возвращает Истина, иначе возвращает Ложь.  
// Параметры:
//   Партнер - СправочникСсылка.Партнеры
//   СтррКоординаты - Структура:
//   * Широта - Число
//   * Долгота - Число
// Возвращаемое значение:
//   Булево  	
Функция ПолучитьКоординатыПартнера(Партнер, СтррКоординаты) Экспорт
	
	МПартнеры = Новый Массив;
	МПартнеры.Добавить(Партнер);
	ТЗн = ПолучитьТЗКоординатПартнеров(МПартнеры);
	Если ТЗн.Количество() = 0 Тогда
		СтррКоординаты.Широта  = 0;
		СтррКоординаты.Долгота = 0;
		Возврат Ложь;
	Иначе
		СтрокаТ = ТЗн[0];
		СтррКоординаты.Широта  = СтрокаТ.Широта;
		СтррКоординаты.Долгота = СтрокаТ.Долгота;
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции

// Функция возвращает таблицу значений с координатами партнёров.
// Параметры:
//    МПартнеры - Массив Из СправочникСсылка.Партнеры
// Возвращаемое значение:
//   ТаблицаЗначений	
Функция ПолучитьТЗКоординатПартнеров(МПартнеры) Экспорт
	
	Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Партнеры.Ссылка,
		|	СвойстваДолготы.Долгота,
		|	СвойстваШироты.Широта,
		|	СвойстваАдреса.Адрес
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер,
		|		ПартнерыДополнительныеРеквизиты.Значение КАК Широта
		|	ИЗ
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|	ГДЕ
		|		ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоШирота) КАК СвойстваШироты
		|	ПО (СвойстваШироты.Партнер = Партнеры.Ссылка)
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер,
		|		ПартнерыДополнительныеРеквизиты.Значение КАК Долгота
		|	ИЗ
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|	ГДЕ
		|		ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоДолгота) КАК СвойстваДолготы
		|	ПО (СвойстваДолготы.Партнер = Партнеры.Ссылка)
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|		ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер,
		|		ПартнерыДополнительныеРеквизиты.Значение КАК Адрес
		|	ИЗ
		|		Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|	ГДЕ
		|		ПартнерыДополнительныеРеквизиты.Свойство = &СвойствоАдрес) КАК СвойстваАдреса
		|	ПО (СвойстваАдреса.Партнер = Партнеры.Ссылка)
		|ГДЕ 
		|	Партнеры.Ссылка В (&мПартнеры)";
		
	СвойствоШирота  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваШиротаПартнер());	
	СвойствоДолгота = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДолготаПартнер());
	СвойствоАдрес   = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваАдресИзСервисаПартнер());
	
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("СвойствоШирота",  СвойствоШирота);
	Запрос.УстановитьПараметр("СвойствоДолгота", СвойствоДолгота);
	Запрос.УстановитьПараметр("СвойствоАдрес",   СвойствоАдрес);
	Запрос.УстановитьПараметр("мПартнеры", 		 МПартнеры);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Функция возвращает URL-адрес каталога с иконками для отображения иконок на карте в веб-форме.
// Возвращаемое значение:
//   Строка
Функция ПолучитьВебКаталогИконок() Экспорт

	Возврат "https://www.agentplus.ru/tmp/configs/map/"; //"http://www.agentplus.ru/download/1CModules/8/8.2/11/icons/";

КонецФункции
 
// СлужебныеПроцедурыИФункции_КартыСервер
#КонецОбласти 

// Возвращает признак ддя внепланового пункта плана посещений.
// Возвращаемое значение:
//   Число
// 
Функция ПланПосещенийНомерПунктаВнеПлана() Экспорт
	Возврат 99999;
КонецФункции

// Функция возвращает таблицу плана посещений, сгенерированную из "Cписка торговых точек", переданного в параметре.
// 
// Параметры: 
//	СтррПараметры - Структура 
//  	Период 			- СтандартныйПериод 				 			- Период отчета
//  	СсылкаСписокТТ  - Строка или УникальныйИдентификатор или Массив - Идентификатор списка торговых точек или несколько списков.
//		Ответственный 	- Ссылка на пользователя. Свойство может не быть, если нет отбра по отвественному.
//
// В структуру СтррПараметры добавляем свойство "ВсегоДней" !!! - сколько дней в таблице плана посещений.
//  
// Возвращаемое значение:
//   ТаблицаЗначений - Создаётся ТЗ с колонками
//		Партнер 		- Партнер	-
//		Адрес			- Строка	-
//		НомерВПлане     - Число		- Номер строки в ТЗ "Состав" списка ТТ
//		Д1-Д...			- Строка	- факт посещения                            - Не заполняется. Создаются только колонки.
//      П1-П...			- Число		- Порядковые номера посещения. 				- От 1 до 99998 если задан порядок. 99999 - если не задан порядок. 0 - Не нужно посещение
//  
Функция ПолучитьПланПосещенийДляОтчета(СтррПараметры) Экспорт

	Перем ИспользуетсяГрафик;
	ИспользуетсяГрафик 	= Неопределено;
	ИспользуетсяПП 	   	= Неопределено;
	НомерВнеПлана 		= ПланПосещенийНомерПунктаВнеПлана();
	ВсегоДней 			= (НачалоДня(СтррПараметры.Период.ДатаОкончания) - НачалоДня(СтррПараметры.Период.ДатаНачала)) / 86400 + 1;			
	
	
	СтррПараметры.Вставить("ВсегоДней", ВсегоДней);
		
	ТипЧисло  	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0));
	ТипСтрока 	= Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("Партнер", 	Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗРезультат.Колонки.Добавить("Адрес", 		ТипСтрока);
	ТЗРезультат.Колонки.Добавить("НомерВПлане",	ТипЧисло); 
			
	Для День = 1 По ВсегоДней Цикл
		стрДень = Формат(День, "ЧГ=0");
		ТЗРезультат.Колонки.Добавить("Д" + стрДень, ТипСтрока);  // Факт посещения
		ТЗРезультат.Колонки.Добавить("П" + стрДень, ТипЧисло);   // План посещения (порядковые номера посещения, если заданы)
	КонецЦикла;
	
	// Добавлен обход списков ТТ через массив, раньше только одна ТТ.  
	Если ТипЗнч(СтррПараметры.СсылкаСписокТТ) = Тип("Массив") Тогда
		МСпискиТТ = СтррПараметры.СсылкаСписокТТ;
	Иначе
		МСпискиТТ = Новый Массив;
		МСпискиТТ.Добавить(СтррПараметры.СсылкаСписокТТ);
	КонецЕсли;
	
	// Добавлен обход списков ТТ через массив, раньше только одна ТТ.
	Если СтррПараметры.Свойство("Ответственный") И ЗначениеЗаполнено(СтррПараметры.Ответственный) Тогда
		МСпискиТТ 	= Новый Массив;
		ТЗСписокТТ 	= ПрочитатьЗначениеНастройки("СпискиТорговыхТочек");

		Если ТипЗнч(СтррПараметры.СсылкаСписокТТ) = Тип("Массив") Тогда
			//Отбор по спискам задан, добавляем фильтр по ответственному.
			Для Каждого Элемент Из СтррПараметры.СсылкаСписокТТ Цикл
				СтзСписокТТ = ТЗСписокТТ.Найти(Элемент, "ID");
				Если СтзСписокТТ.Ответственный = СтррПараметры.Ответственный Тогда
					МСпискиТТ.Добавить(Элемент);		
				КонецЕсли;				
			КонецЦикла;
		
		Иначе
			//Отбор по спискам не задан, получаем спискиТТ по ответственному.
			Для Каждого СтзСписокТТ ИЗ ТЗСписокТТ Цикл
				Если СтзСписокТТ.Ответственный = СтррПараметры.Ответственный Тогда
					МСпискиТТ.Добавить(СтзСписокТТ.ID);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		  
	ИначеЕсли ТипЗнч(СтррПараметры.СсылкаСписокТТ) = Тип("Массив") Тогда
		// отбор по полю спискиТТ
		МСпискиТТ = СтррПараметры.СсылкаСписокТТ;
		
	Иначе
		// отбор по одному списку
		МСпискиТТ = Новый Массив;
		МСпискиТТ.Добавить(СтррПараметры.СсылкаСписокТТ);
		
	КонецЕсли;
	
	Для Каждого СсылкаСписокТТ Из МСпискиТТ Цикл
	
		СтррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", СсылкаСписокТТ);
	
		Если СтррОбъект = Неопределено Тогда
			Если Не СтррПараметры.Свойство("ИгнорироватьОтсутствиеПлана") Или СтррПараметры.ИгнорироватьОтсутствиеПлана = Ложь Тогда
			    ВызватьИсключение("Не найден список торговых точек с идентификатором: " + СтррПараметры.СсылкаСписокТТ);
			КонецЕсли; 
			ТЗРезультат.Очистить();
			Возврат ТЗРезультат;
		КонецЕсли; 
		
		ПериодПлана 		= СтррОбъект.ПериодГрафикаПлана;
		РазницаДней 		= (СтррПараметры.Период.ДатаНачала - СтррОбъект.ДатаНачала) / 86400;
		
		ИспользуетсяГрафик 	= (СтррОбъект.Детализация.НайтиПоЗначению("График") <> Неопределено);
		ИспользуетсяПП 	   	= (СтррОбъект.Детализация.НайтиПоЗначению("ПланПосещений") <> Неопределено);
		
		ТЗСостав = СтррОбъект.Состав;	

		Если ИспользуетсяПП Тогда // Детализация списка ТТ по плану посещения
			СмещениеОтНачалаПлана	= РазницаДней % ПериодПлана; // количество дней от начала плана для вывода первого дня в отчете		
			
			ТЗПланПосещений 		= СтррОбъект.ПланПосещений;
			//@skip-check query-in-loop
			ПолучитьПланПосещенийДляОтчетаСортировка(ТЗПланПосещений);
			
			ТекПартнер = Неопределено;
			Для каждого СтрокаТ Из ТЗПланПосещений Цикл
				
				//1. ??? 
				Если СтрокаТ.День > ПериодПлана Тогда 
					// Такое возможно, если в списке ранее был создан план с бОльшим периодом, а потом был период изменен
					// на меньший - пункты от бОльшего периода в списке на всякий случай сохраняются.
					Продолжить; 					  
				КонецЕсли;
				
				//2. Добавляем строчку в результирующую таблицу. Строчки в ТЗРезультат уникальны только по двум полям : Партнер и номер в плане).
				Если СтрокаТ.Партнер <> ТекПартнер Тогда
					ТекПартнер = СтрокаТ.Партнер;				
					СтзРезультат = ТЗРезультат.Добавить();
					СтзРезультат.Партнер = ТекПартнер;
					СтзСостав = ТЗСостав.Найти(ТекПартнер, "Партнер");
					СтзРезультат.НомерВПлане = ?(СтзСостав = Неопределено, НомерВнеПлана, ТЗСостав.Индекс(СтзСостав));
				КонецЕсли;
				
				//3. Заполняем колонки П1 П2 итд в текущей строчке
				НомерДня = СтрокаТ.День - СмещениеОтНачалаПлана;
				НормироватьПоМодулю(НомерДня, ПериодПлана);
				Пока НомерДня <= ВсегоДней Цикл // цикл занесения дней в план с учетом, что период отчета может быть больше циклического периода плана
					Если ЗначениеЗаполнено(СтррОбъект.ДатаНачала) И СтррОбъект.ДатаНачала > (СтррПараметры.Период.ДатаНачала + (НомерДня * 86400) - 86400) Тогда
						//3.1 Дата начала больше текущего дня колонки.
						СтзРезультат["П" + Формат(НомерДня, "ЧГ=0")] = 0; // 0 - нет в плане.
						
					ИначеЕсли СтррОбъект.Свойство("ДатаОкончания") И ЗначениеЗаполнено(СтррОбъект.ДатаОкончания) И СтррОбъект.ДатаОкончания < (СтррПараметры.Период.ДатаНачала + (НомерДня * 86400) - 86400) Тогда
						//3.2 Дата окончания меньше текущего дня колонки.
						СтзРезультат["П" + Формат(НомерДня, "ЧГ=0")] = 0; // 0 - нет в плане.
						
					Иначе
						//3.3 Порядок по плану.
						СтзРезультат["П" + Формат(НомерДня, "ЧГ=0")] = СтрокаТ.Порядок;		
						
					КонецЕсли;
					НомерДня = НомерДня + ПериодПлана;
				КонецЦикла;
				
			КонецЦикла;
			
			ТЗРезультат.Сортировать("НомерВПлане,Партнер");
			
		ИначеЕсли ИспользуетсяГрафик Тогда // Детализация списка ТТ по графику посещения
			// Графики указаны в таблице тзСостав
			Пункт = Неопределено;
			Для каждого СтзСостав Из ТЗСостав Цикл
				СтррГрафик = СтзСостав.График;
				Если СтррГрафик = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				СтррПункты = СтррГрафик.Пункты;
				Если СтррПункты = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ПериодГрафика = СтррГрафик.ПериодГрафика;
				СмещениеОтНачалаГрафика = РазницаДней % ПериодГрафика; // количество дней от начала графика для вывода первого дня в отчете					
				СтзРезультат = ТЗРезультат.Добавить();
				СтзРезультат.Партнер = СтзСостав.Партнер;
				СтзРезультат.НомерВПлане = ТЗСостав.Индекс(СтзСостав);
				Для НомерДня = 1 По ВсегоДней Цикл
					ДеньГрафика = НомерДня + СмещениеОтНачалаГрафика;
					НормироватьПоМодулю(ДеньГрафика, ПериодГрафика);
					Если СтррПункты.Свойство("П"+Строка(ДеньГрафика-1), Пункт) И Пункт.Выбран Тогда // пункты в графике нумеруются с 0
						
						СтзРезультат["П" + НомерДня] = 1000; // признак включения дня в план посещений
						
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла
			
		Иначе // список ТТ без плана и графика, просто переносим партнеров
			Для каждого СтзСостав Из ТЗСостав Цикл
				СтзРезультат = ТЗРезультат.Добавить();
				СтзРезультат.Партнер = СтзСостав.Партнер;
			КонецЦикла
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТЗРезультат;
	
КонецФункции

Процедура ПолучитьПланПосещенийДляОтчетаСортировка(ТЗПланПосещений)
	
	Индекс = 1;  
	ТекстПолей = "ТЗПланПосещений." + ТЗПланПосещений.Колонки[0].Имя; 
	Пока Индекс < ТЗПланПосещений.Колонки.Количество() Цикл
		ТекстПолей 	= ТекстПолей + ", тзПланПосещений." + ТЗПланПосещений.Колонки[Индекс].Имя;	
		Индекс 		= Индекс + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	[ТекстПолей]
	               |ПОМЕСТИТЬ ВТ_тзПланПосещений
	               |ИЗ
	               |	&тзПланПосещений КАК тзПланПосещений
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	тзПланПосещений.Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	[ТекстПолей]
	               |ИЗ
	               |	ВТ_тзПланПосещений КАК тзПланПосещений
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	тзПланПосещений.Партнер";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ТекстПолей]", ТекстПолей);
	Запрос.УстановитьПараметр("тзПланПосещений", ТЗПланПосещений);

	ТЗПланПосещений = Запрос.Выполнить().Выгрузить();
			
КонецПроцедуры

// Функция возвращает факты посещений (т.е. документы, созданные при посещении ТТ) в виде таблицы значений.
// 
// Параметры:
// 
//	СтррПараметры - Структура - структура со свойствами:
//  	Агент 						- СправочникСсылка.Пользователи - агент, документы которого считать фактами посещений.
//  	Период 						- СтандартныйПериод 			- период отчета
//		День 						- ДатаВремя 					- дата формирования отчета (указывается, если нет свойства "Период").
//		ТолькоПроведенныеДокументы 	- Булево 						- признак включать / не включать проведенные документы в таблицу.
//		списокВидыДокументов 		- СписокЗначений 				- список видов документов для получения фактов.
//		ДопустимаяУдаленностьОтТТ 	- Число 						- максимально допустимое расстоение от ТТ места создания документа для установки факта посещения.
//																		 Если установлено значение 0 или свойство отсутствует, то расстояние не учиывается.
//  
// Возвращаемое значение:
//  ТаблицаЗначений:
//		Агент 			- Пользователь		-
//		ВремяНачала 	- Дата				-
//		ВремяОкончания	- Дата				-
//		Дата 			- Дата				- Дата документа.
//		Долгота			- 					-
//		Партнер			- Партнеры			-
//		Ссылка 			- 					- Ссылка типового документа.
//		СсылкаВДок		- Пользователь		- Ссылка документов ВО.
//		СуммаДокумента	- Число				-
//		Широта			- 					-
//  
Функция ПолучитьФактПосещенийДляОтчета(СтррПараметры) Экспорт
	
	 	Запрос = Новый Запрос();
	
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект
		|ПОМЕСТИТЬ ДокументыСоСведениями
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &СвойствоВремяНачала
		|	И ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК ДАТА) МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Агент КАК Агент,
		|	ВложенныйЗапрос.Партнер КАК Партнер,
		|	ВложенныйЗапрос.Ссылка КАК Ссылка,     
		|	ВложенныйЗапрос.МоментВремени КАК МоментВремени,
		|	ВложенныйЗапрос.Дата КАК Дата,
		|	ВложенныйЗапрос.СуммаДокумента КАК СуммаДокумента
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПриходныйКассовыйОрдер.Кассир КАК Агент,
		|		ПриходныйКассовыйОрдер.Контрагент.Партнер КАК Партнер,
		|		ПриходныйКассовыйОрдер.Ссылка КАК Ссылка,  
		|		ПриходныйКассовыйОрдер.МоментВремени КАК МоментВремени,
		|		ПриходныйКассовыйОрдер.Дата КАК Дата,
		|		ПриходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ПриходныйКассовыйОрдер.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		//(( sk_230127 MOD-3332
		//|		&ПриходныйКассовыйОрдер И ПриходныйКассовыйОрдер.Кассир = &Агент
		|		&ПриходныйКассовыйОрдер И ПриходныйКассовыйОрдер.Кассир = &Кассир
		//)) sk_230127 MOD-333
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ПриходныйКассовыйОрдер.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ПриходныйКассовыйОрдер.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасходныйКассовыйОрдер.Кассир,
		|		РасходныйКассовыйОрдер.Контрагент.Партнер,
		|		РасходныйКассовыйОрдер.Ссылка,    
		|		РасходныйКассовыйОрдер.МоментВремени КАК МоментВремени,
		|		РасходныйКассовыйОрдер.Дата,
		|		РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО РасходныйКассовыйОрдер.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		//(( sk_230127 MOD-3332
		//|		&РасходныйКассовыйОрдер И РасходныйКассовыйОрдер.Кассир = &Агент
		|		&РасходныйКассовыйОрдер И РасходныйКассовыйОрдер.Кассир = &Кассир
		//)) sk_230127 
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА РасходныйКассовыйОрдер.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Менеджер,
		|		РеализацияТоваровУслуг.Партнер,
		|		РеализацияТоваровУслуг.Ссылка,
		|		РеализацияТоваровУслуг.МоментВремени КАК МоментВремени,
		|		РеализацияТоваровУслуг.Дата,
		|		РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг,
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО РеализацияТоваровУслуг.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&РеализацияТоваровУслуг И РеализацияТоваровУслуг.Менеджер = &Агент
		|		И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА РеализацияТоваровУслуг.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВозвратТоваровОтКлиента.Менеджер,
		|		ВозвратТоваровОтКлиента.Партнер,
		|		ВозвратТоваровОтКлиента.Ссылка,   
		|		ВозвратТоваровОтКлиента.МоментВремени КАК МоментВремени,
		|		ВозвратТоваровОтКлиента.Дата,
		|		ВозвратТоваровОтКлиента.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ВозвратТоваровОтКлиента.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ВозвратТоваровОтКлиента И ВозвратТоваровОтКлиента.Менеджер = &Агент 
		//|		ВозвратТоваровОтКлиента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ВозвратТоваровОтКлиента.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказКлиента.Менеджер КАК Агент,
		|		ЗаказКлиента.Партнер,
		|		ЗаказКлиента.Ссылка,   
		|		ЗаказКлиента.МоментВремени КАК МоментВремени,
		|		ЗаказКлиента.Дата,
		|		ЗаказКлиента.СуммаДокумента КАК СуммаДокумента
		|	ИЗ
		|		Документ.ЗаказКлиента КАК ЗаказКлиента,
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСоСведениями КАК ДокументыСоСведениями
		|		ПО ЗаказКлиента.Ссылка = ДокументыСоСведениями.Объект
		|	ГДЕ
		|		&ЗаказКлиента И ЗаказКлиента.Менеджер = &Агент 
		//|		ЗаказКлиента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|		И ВЫБОР
		|				КОГДА &ТолькоПроведенныеДокументы
		|					ТОГДА ЗаказКлиента.Проведен
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И НЕ ЗаказКлиента.ПометкаУдаления
		|	) КАК ВложенныйЗапрос
		|; 
		|	
		|///////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Агент,
		|	Документы.Партнер,
		|	Документы.Дата,
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.СуммаДокумента КАК СуммаДокумента,
		|	естьNULL(СведенияШирота.Значение, 0) КАК Широта,
		|	естьNULL(СведенияДолгота.Значение, 0) КАК Долгота,
		|	естьNULL(СведенияВремяНачала.Значение, датавремя(1,1,1)) КАК ВремяНачала,
		|	естьNULL(СведенияВремяОкончания.Значение, датавремя(1,1,1)) КАК ВремяОкончания
		|ИЗ
		|	Документы КАК Документы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияШирота
		|		ПО Документы.Ссылка = СведенияШирота.Объект	И СведенияШирота.Свойство = &СвойствоШирота
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияДолгота
		|		ПО Документы.Ссылка = СведенияДолгота.Объект И СведенияДолгота.Свойство = &СвойствоДолгота
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияВремяНачала
		|		ПО Документы.Ссылка = СведенияВремяНачала.Объект И СведенияВремяНачала.Свойство = &СвойствоВремяНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК СведенияВремяОкончания
		|		ПО Документы.Ссылка = СведенияВремяОкончания.Объект И СведенияВремяОкончания.Свойство = &СвойствоВремяОкончания
		|УПОРЯДОЧИТЬ ПО
		|	Документы.Партнер,
		|	Документы.МоментВремени";
		
	Если СтррПараметры.Свойство("ДобавитьВремяПосещения") И СтррПараметры.ДобавитьВремяПосещения = Истина Тогда
		// gi_240226: была ошибка? до этого код был такой:
		// Текст = Запрос.Текст + ", СведенияВремяНачала.Значение";
		Запрос.Текст = Запрос.Текст + ", СведенияВремяНачала.Значение";
	КонецЕсли; 
		   
    ОпределитьВерсиюКонфигурации(); // sk_230127 MOD-3332
	
	Запрос.УстановитьПараметр("Агент", 					 	СтррПараметры.Агент); 
	Запрос.УстановитьПараметр("Кассир", 					ПолучитьКассира(, СтррПараметры.Агент)); // sk_230127 MOD-3332
	Запрос.УстановитьПараметр("ТолькоПроведенныеДокументы", СтррПараметры.ТолькоПроведенныеДокументы);
	Если СтррПараметры.Свойство("Период") Тогда
		Запрос.УстановитьПараметр("НачалоПериода", 	СтррПараметры.Период.ДатаНачала);
		Запрос.УстановитьПараметр("КонецПериода",  	СтррПараметры.Период.ДатаОкончания);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", 	НачалоДня(СтррПараметры.Дата));
		Запрос.УстановитьПараметр("КонецПериода",  	КонецДня(СтррПараметры.Дата));
	КонецЕсли; 
	
	СвойствоШирота  		= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументШирота());	
	СвойствоДолгота 		= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументДолгота());
	СвойствоВремяНачала    	= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяНачала());
	СвойствоВремяОкончания	= ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДокументВремяОкончания());
	
	Запрос.УстановитьПараметр("СвойствоШирота",  		СвойствоШирота);
	Запрос.УстановитьПараметр("СвойствоДолгота",  		СвойствоДолгота);
	Запрос.УстановитьПараметр("СвойствоВремяНачала", 	СвойствоВремяНачала);
	Запрос.УстановитьПараметр("СвойствоВремяОкончания", СвойствоВремяОкончания);
	
	МВидыДокументов = СтрРазделить_("ПриходныйКассовыйОрдер,РасходныйКассовыйОрдер,РеализацияТоваровУслуг,ВозвратТоваровОтКлиента,ЗаказКлиента");
	СписокВидыДокументов = СтррПараметры.СписокВидыДокументов;
	Для Каждого ВидДокумента Из МВидыДокументов Цикл
		Запрос.УстановитьПараметр(ВидДокумента, СписокВидыДокументов.НайтиПоЗначению(ВидДокумента) <> Неопределено);
	КонецЦикла;

	ТЗФакт = Запрос.Выполнить().Выгрузить();
	
	// проверяем - нужно ли учесть факты посещений по виртуальным документам?
	ПолучитьФактПоВиртуальнымДокументам = Ложь;
	Для каждого Элемент Из СписокВидыДокументов Цикл
		Если ВДокЭтоВиртуальныйДокумент(Элемент.Значение) Тогда
			ПолучитьФактПоВиртуальнымДокументам = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПолучитьФактПоВиртуальнымДокументам Тогда
		ПолучитьФактПосещенийДляОтчетаПоВиртуальнымДокументам(ТЗФакт, СтррПараметры);
	КонецЕсли; 
	
	Возврат ТЗФакт;
		   
КонецФункции

Процедура ПолучитьФактПосещенийДляОтчетаПоВиртуальнымДокументам(ТЗФакт, СтррПараметры)
	
	ТЗФакт.Колонки.Добавить("СсылкаВДок"); // ссылка на виртуальный документ
	СтррПоиск = Новый Структура;
	СтррПоиск.Вставить("Менеджер", СтррПараметры.Агент);
	Если СтррПараметры.ТолькоПроведенныеДокументы Тогда
		СтррПоиск.Вставить("Статус", 1); // у проведенных документов значение статуса = 1
	КонецЕсли; 
	
	Если СтррПараметры.Свойство("Период") Тогда
		ДатаНачала    = СтррПараметры.Период.ДатаНачала;
		ДатаОкончания = СтррПараметры.Период.ДатаОкончания;
	Иначе
		ДатаНачала    = НачалоДня(СтррПараметры.Дата);
		ДатаОкончания = КонецДня(СтррПараметры.Дата);
	КонецЕсли; 
	
	СписокВидыДокументов = СтррПараметры.СписокВидыДокументов;
	Для каждого Элемент Из СписокВидыДокументов Цикл
		ВидДокумента = Элемент.Значение;
		Если ВДокЭтоВиртуальныйДокумент(ВидДокумента) Тогда
			ТЗЖурнала = ВОТЗЗагрузить(ВидДокумента, Истина);
			МСтроки = ТЗЖурнала.НайтиСтроки(СтррПоиск);
			Для каждого СтрокаТ Из МСтроки Цикл
				Если СтрокаТ.ВремяНачала >= ДатаНачала И СтрокаТ.ВремяНачала <= ДатаОкончания Тогда
					СтзФакт = ТЗФакт.Добавить();
					ЗаполнитьЗначенияСвойств(СтзФакт, СтрокаТ);
					//@skip-check structure-consructor-too-many-keys
					СтзФакт.СсылкаВДок = Новый Структура("ID,ВидДокумента,Проведен,ПометкаУдаления", 
						СтрокаТ.ID, ВидДокумента, СтрокаТ.Статус = 1, СтрокаТ.Статус = 2);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Функция возвращает таблицу значений плана-факта посещений.
//	
//	Параметры:
//	
//	СтррПараметры - Структура - структура со свойствами:
//  	Агент						-	 
//		Ответственный 				- Ссылка на пользователя. Свойство может не быть, если нет отбра по отвественному.
//		Период						- 
//		СсылкаСписокТТ				- Строка или УникальныйИдентификатор - идентификатор списка торговых точек
//		ТолькоПроведенныеДокументы	-
//		списокВидыДокументов		-
//		ПронумероватьФактыПосещений	-
//		ДопустимаяУдаленностьОтТТ	-
//		Описание свойств см. в комментариях к функциям ПолучитьПланПосещенийДляОтчета() и ПолучитьФактПосещенийДляОтчета().
// Возвращаемое значение:
//   ТаблицаЗначений		
Функция ПолучитьПланФактПосещений(СтррПараметры) Экспорт
	
	// тзПланПосешений.Партнер 			- Партнер	-
	// тзПланПосешений.Адрес			- Строка	-
	// тзПланПосешений.НомерВПлане      - Число		- Номер строки в ТЗ "Состав" списка ТТ
	// тзПланПосешений.Д1-Д...			- Строка	- факт посещения                            - Не заполняется. Создаются только колонки.
	// тзПланПосешений.П1-П...			- Число		- Порядковые номера посещения. 				- От 1 до 99998 если задан порядок. 99999 - если не задан порядок. 0 - Не нужно посещение
	ТЗПланПосешений = ПолучитьПланПосещенийДляОтчета(СтррПараметры); // используются свойства: Период, СсылкаСписокТТ, создается свойство ВсегоДней 
	
	// тзФактПосещений.Агент 			- Пользователь		-
	// тзФактПосещений.ВремяНачала 		- Дата				-
	// тзФактПосещений.ВремяОкончания	- Дата				-
	// тзФактПосещений.Дата 			- Дата				- Дата документа.
	// тзФактПосещений.Долгота			- 					-
	// тзФактПосещений.Партнер			- Партнеры			-
	// тзФактПосещений.Ссылка 			- 					- Ссылка типового документа.
	// тзФактПосещений.СсылкаВДок		- Пользователь		- Ссылка документов ВО.
	// тзФактПосещений.СуммаДокумента	- Число				-
	// тзФактПосещений.Широта			- 	
	ТЗФактПосещений = ПолучитьФактПосещенийДляОтчета(СтррПараметры); // используются свойства: Период, Агент, ТолькоПроведенныеДокументы, списокВидыДокументов 
	
	НомерВнеПлана = ПланПосещенийНомерПунктаВнеПлана();
	
	ДопустимаяУдаленностьОтТТ = Неопределено;
	СтррПараметры.Свойство("ДопустимаяУдаленностьОтТТ", ДопустимаяУдаленностьОтТТ);
	Если Не ЗначениеЗаполнено(ДопустимаяУдаленностьОтТТ) Тогда
		ДопустимаяУдаленностьОтТТ = 0;
	КонецЕсли;
	
	Если ДопустимаяУдаленностьОтТТ <> 0 Тогда // нужно проверять расстояние от места создания до торговой точки
		МПартнеры = ТЗПланПосешений.ВыгрузитьКолонку("Партнер");
		ТекПартнер = Неопределено;
		Для каждого стзФакт Из ТЗФактПосещений Цикл
			Если МПартнеры.Найти(стзФакт.Партнер) = Неопределено Тогда
				МПартнеры.Добавить(стзФакт.Партнер);
			КонецЕсли; 
		КонецЦикла; 
		ТЗКоординатыПартнеров = ПолучитьТЗКоординатПартнеров(МПартнеры);
	КонецЕсли; 
	
	ТЗФактПосещений.Колонки.Добавить("ЕстьПосещение", Новый ОписаниеТипов("Булево")); // признак - посещение сделано в ТТ или вне ТТ	
	
	МУдаленияФакт 	= Новый Массив;
	ТекПартнер 		= Неопределено;
	
	Для каждого СтзФакт Из ТЗФактПосещений Цикл
		
		ТекПартнер = СтзФакт.Партнер;		
		ТТПосещена = Истина; // признак, что торговая точка посещена
		Если ДопустимаяУдаленностьОтТТ <> 0 Тогда // проверяем расстояние от места создания до торговой точки
			Если ЗначениеЗаполнено(СтзФакт.Широта) И ЗначениеЗаполнено(СтзФакт.Долгота) И СокрЛП(СтзФакт.Широта) <> "-" Тогда // известны координаты места создания документа
				стзКоординаты = ТЗКоординатыПартнеров.Найти(ТекПартнер, "Ссылка");
				Если стзКоординаты <> Неопределено Тогда // известны координаты ТТ
					Расстояние = РасстояниеМеждуТочкамиNMEA(стзКоординаты, СтзФакт);
					Если Расстояние > ДопустимаяУдаленностьОтТТ Тогда
						ТТПосещена = Ложь;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		
		//1. стрДатаНачала и стрДатаОкончания
		ФактДатаНачала 	  = СтзФакт.ВремяНачала;
		ФактДатаОкончания = СтзФакт.ВремяОкончания;
		Если ЗначениеЗаполнено(ФактДатаНачала) И ЗначениеЗаполнено(ФактДатаОкончания) Тогда
			//Корректное заполнение
		ИначеЕсли ЗначениеЗаполнено(ФактДатаНачала) И НЕ ЗначениеЗаполнено(ФактДатаОкончания) Тогда
			ФактДатаОкончания = ФактДатаНачала;
		ИначеЕсли НЕ ЗначениеЗаполнено(ФактДатаНачала) И ЗначениеЗаполнено(ФактДатаОкончания) Тогда
			ФактДатаНачала = ФактДатаОкончания;
		ИначеЕсли НЕ ЗначениеЗаполнено(ФактДатаНачала) И НЕ ЗначениеЗаполнено(ФактДатаОкончания) И ЗначениеЗаполнено(СтзФакт.Дата) Тогда	
			ФактДатаНачала    = СтзФакт.Дата;
			ФактДатаОкончания = СтзФакт.Дата;
		Иначе 
			//Ощибка
			МУдаленияФакт.Добавить(СтзФакт);
			Продолжить;
		КонецЕсли;	
		
		//2. стрВремяНачала стрВремяОкончания
		//Даты периода отчета
		ПериодНачало	= СтррПараметры.Период.ДатаНачала;
		ПериодОкончания	= СтррПараметры.Период.ДатаОкончания;
		
		//2.1 Проверка
		Если ФактДатаНачала > ФактДатаОкончания Тогда
			//Дата начала и дата окончания некорректно заполнены.
			Если ФактДатаНачала >= ПериодНачало И ФактДатаНачала <= ПериодОкончания Тогда
				//Подставляем одну дату Начала.
				ФактДатаНачала    = ФактДатаНачала;
				ФактДатаОкончания = ФактДатаНачала;
			ИначеЕсли ФактДатаОкончания >= ПериодНачало И ФактДатаОкончания <= ПериодОкончания тогда
				//Подставляем одну дату Окончания.
				ФактДатаНачала    = ФактДатаОкончания;
				ФактДатаОкончания = ФактДатаОкончания;			
			ИначеЕсли ЗначениеЗаполнено(СтзФакт.Дата) Тогда
				//Поставляем дату документа
				ФактДатаНачала    = СтзФакт.Дата;
				ФактДатаОкончания = СтзФакт.Дата;
			Иначе
				//Ощибка
				МУдаленияФакт.Добавить(СтзФакт);
				Продолжить;
			КонецЕсли;	
		Конецесли;	
		
		//2.2 стрВремяНачала
		Если ФактДатаНачала >= ПериодНачало И ФактДатаНачала <= ПериодОкончания Тогда 
			//Корректное заполнение
			стрВремяНачала = Формат(ФактДатаНачала, "ДФ=""HH:mm""");
		ИначеЕсли ФактДатаНачала <= ПериодНачало Тогда
			//Посещение начато до начала периода
			стрВремяНачала = Формат(ПериодНачало, "ДФ=""HH:mm""");
		Иначе
			//Посещение начато после оконяания периода
			МУдаленияФакт.Добавить(СтзФакт);
			Продолжить;
		КонецЕсли;
		
		//2.3 стрВремяОкончания
		Если ФактДатаОкончания <= ПериодОкончания И ФактДатаОкончания >= ПериодНачало Тогда
			//Корректное заполнение
			стрВремяОкончания = Формат(ФактДатаОкончания, "ДФ=""HH:mm""");
		ИначеЕсли ФактДатаОкончания > ПериодОкончания Тогда
			//Посещение окончено после окончания периода
			стрВремяОкончания = Формат(ПериодОкончания, "ДФ=""HH:mm""");
		Иначе
			//Посещение окончено до начала периода
			МУдаленияФакт.Добавить(СтзФакт);
			Продолжить;
		КонецЕсли;

		//3. НомерДня
		Если ФактДатаНачала >= ПериодНачало Тогда 
			НомерДня = (НачалоДня(ФактДатаНачала) - НачалоДня(ПериодНачало)) / 86400 + 1;
		Иначе
			НомерДня = 1;
		КонецЕсли;
				
		//4. Проверка
		Если ТЗПланПосешений.Колонки.Найти("Д" + НомерДня) <> Неопределено Тогда
			//Корректное заполнение
		Иначе
			// Ошибка.
			МУдаленияФакт.Добавить(СтзФакт);
			Продолжить;
		КонецЕсли;
		
		//5. Добавляем партнера, если нет.
		стзПлан = ТЗПланПосешений.Найти(ТекПартнер, "Партнер");
		Если стзПлан = Неопределено Тогда
			стзПлан = ТЗПланПосешений.Добавить();
			стзПлан.Партнер 	= ТекПартнер;
			стзПлан.НомерВПлане = НомерВнеПлана;
		КонецЕсли;
			
		//6. стрТекИнтервал - строка интервала из плана.
		стрТекИнтервал 	= стзПлан["Д" + НомерДня];			
		
		// В строке времени пребывания в ТТ (переменная стрТекИнтервал) указывается время в виде "ЧЧ:ММ - ЧЧ:ММ" для документов, созданных в ТТ,
		// и указывается время в виде "ЧЧ:ММ* - ЧЧ:ММ*" для документов, созданных вне ТТ.
		Если ТТПосещена Тогда 
			//1. документ создан в ТТ
			//@skip-check use-non-recommended-method
			Если Найти(стрТекИнтервал, "*") <> 0 Тогда // в строке интервала есть время из документа, созданного вне ТТ
				стрТекИнтервал = "";
			КонецЕсли; 
			Если ЗначениеЗаполнено(стрТекИнтервал) Тогда
				стрТекВремяНачала    = Лев(стрТекИнтервал, 5);
				стрТекВремяОкончания = Прав(стрТекИнтервал, 5);
				стзПлан["Д" + НомерДня] = ?(стрВремяНачала < стрТекВремяНачала, стрВремяНачала, стрТекВремяНачала) + " - " + 
										  ?(стрВремяОкончания > стрТекВремяОкончания, стрВремяОкончания, стрТекВремяОкончания);
			Иначе
				стзПлан["Д" + НомерДня] = стрВремяНачала + " - " + стрВремяОкончания;
			КонецЕсли;
		Иначе
			//2.  документ создан вне ТТ
			//@skip-check use-non-recommended-method
			Если Не ЗначениеЗаполнено(стрТекИнтервал) Или Найти(стрТекИнтервал, "*") <> 0 Тогда // в строке интервала можно укзаать время из документа, созданного вне ТТ
				Если ЗначениеЗаполнено(стрТекИнтервал) Тогда
					стрТекВремяНачала    = Лев(стрТекИнтервал, 5);
					стрТекВремяОкончания = Сред(стрТекИнтервал, СтрДлина(стрТекИнтервал) - 5, 5);
					стзПлан["Д" + НомерДня] = ?(стрВремяНачала < стрТекВремяНачала, стрВремяНачала, стрТекВремяНачала) + "* - " +
											  ?(стрВремяОкончания > стрТекВремяОкончания, стрВремяОкончания, стрТекВремяОкончания) + "*";
				Иначе
					стзПлан["Д" + НомерДня] = стрВремяНачала + "* - " + стрВремяОкончания + "*";
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		СтзФакт.ЕстьПосещение = ТТПосещена;
		
	КонецЦикла;
	
	Для Каждого стзФактПосещений Из МУдаленияФакт Цикл
		ТЗФактПосещений.Удалить(стзФактПосещений);	
	КонецЦикла;	
	
	Если СтррПараметры.Свойство("ПронумероватьФактыПосещений") И СтррПараметры.ПронумероватьФактыПосещений = Истина Тогда
		ДобавитьНомераФактовПосещений(ТЗПланПосешений, СтррПараметры.ВсегоДней);
	КонецЕсли;
	
	ТЗПланПосешений.Сортировать("НомерВПлане,Партнер");
	
	ДобавитьАдресаПартнеров(ТЗПланПосешений);
	
	Если СтррПараметры.Свойство("ДобавитьКоординатыПартнеров") И СтррПараметры.ДобавитьКоординатыПартнеров = Истина Тогда
		ДобавитьКоординатыПартнеров(ТЗПланПосешений);
	КонецЕсли; 
	
	Если СтррПараметры.Свойство("ВернутьФактПосещений") И СтррПараметры.ВернутьФактПосещений = Истина Тогда
		СтррПараметры.Вставить("тзФактПосещений", ТЗФактПосещений);
	КонецЕсли; 

	Возврат ТЗПланПосешений;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_ПланПосещений_РасчетРасстояний

// Фукнция возвращает расстояние между точками в метрах.
// Параметры:
//   StartLat - Число
//   StartLong - Число
//   EndLat - Число
//   EndLong - Число
// Возвращаемое значение:
//   Число
//@skip-check module-unused-method
Функция РасстояниеМеждуТочками(StartLat, StartLong, EndLat, EndLong)
	//Pi = 3.1415926535897932;

 // Передаваемые широта/долгота в градусах и сотых долях 
 //StartLat: double; // Начальная широта 
 //StartLong: double; // Начальная долгота 
 //EndLat: double; // Конечная широта 
 //EndLong: double; // Конечная долгота 

 //// Переменные, используемые для вычисления смещения и расстояния 
 //fPhimean: Double; // Средняя широта 
 //fdLambda: Double; // Разница между двумя значениями долготы 
 //fdPhi: Double; // Разница между двумя значениями широты 
 //fAlpha: Double; // Смещение 
 //fRho: Double; // Меридианский радиус кривизны 
 //fNu: Double; // Поперечный радиус кривизны 
 //fR: Double; // Радиус сферы Земли 
 //fz: Double; // Угловое расстояние от центра сфероида 
 //fTemp: Double; // Временная переменная, использующаяся в вычислениях 
 //Distance: Double; // Вычисленное расстояния в метрах 
 //Bearing: Double; // Вычисленное от и до смещение 

	Если StartLat = EndLat И StartLong = EndLong Тогда
		Возврат 0;
	КонецЕсли;
 
	 // Константы, используемые для вычисления смещения и расстояния 
	 D2R = 0.017453; // Константа для преобразования градусов в радианы 
	 //R2D = 57.295781; // Константа для преобразования радиан в градусы 
	 ValA = 6378137.0; // Основные полуоси 
	 //ValB = 6356752.314245; // Неосновные полуоси 
	 E2_ = 0.006739496742337; // Квадрат эксцентричности эллипсоида 
	 //ValF = 0.003352810664747; // Выравнивание эллипсоида 

	 FdLambda = (StartLong - EndLong) * D2R; 
	 FdPhi = (StartLat - EndLat) * D2R; 
	 FPhimean = ((StartLat + EndLat) / 2.0) * D2R; 

	 // Вычисляем меридианные и поперечные радиусы кривизны средней широты 
	 FTemp = 1 - E2_ * (Pow(Sin(FPhimean), 2)); 
	 FRho = (ValA * (1 - E2_)) / Pow(FTemp, 1.5); 
	 FNu = ValA / (Sqrt(1 - E2_ * (Sin(FPhimean) * Sin(FPhimean)))); 

	 // Вычисляем угловое расстояние 
	 Fz_ = Sqrt(Pow(Sin(FdPhi / 2.0), 2) + Cos(EndLat * D2R) * Cos(StartLat * D2R) * Pow(Sin(FdLambda / 2.0), 2)); 

	 Fz_ = 2 * ASin(Fz_); 

	 // Вычисляем смещение 
	 FAlpha = Cos(EndLat * D2R) * Sin(FdLambda) * 1 / Sin(Fz_);
	 
	Если FAlpha > 1 Тогда
		FAlpha = 1;
	ИначеЕсли FAlpha < -1 Тогда
		FAlpha = -1;
	КонецЕсли;
	
	 FAlpha = ASin(FAlpha); 

	 // Вычисляем радиус Земли 
	 FR_ = (FRho * FNu) / ((FRho * Pow(Sin(FAlpha), 2)) + (FNu * Pow(Cos(FAlpha), 2))); 

	 // Получаем смещение и расстояние 
	 Distance = (Fz_ * FR_); 
	 
	Возврат Distance;
	
КонецФункции

Функция РасстояниеМеждуТочкамиNMEA(Точка1, Точка2) Экспорт
	
	Шрт1 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка1.Широта));
	Шрт2 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка2.Широта));
	Длг1 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка1.Долгота));
	Длг2 = КонвертироватьNMEAWGS84(ЗначениеВЧисло(Точка2.Долгота));
	
	Возврат РасстояниеМеждуТочками(Шрт1, Длг1, Шрт2, Длг2);
	
КонецФункции

Функция КонвертироватьNMEAWGS84(Значение)
	
	Пром =  Значение / 100.0;  
	Часы = Пром - (Пром % 1); 
	Минуты = Значение - 100.0 * Часы;
	Результат = Часы + Минуты / 60.0;
	
	Возврат Окр(Результат, 6);
	
КонецФункции

// СлужебныеПроцедурыИФункции_ПланПосещений_РасчетРасстояний
#КонецОбласти 

// Функция циклически приводит число Значение в число в диапазоне [1; Модуль]
Процедура НормироватьПоМодулю(Значение, Модуль)
	Если Значение < 1 Тогда
		Значение = Значение + Модуль * Цел((Модуль - Значение) / Модуль);
	ИначеЕсли Значение > Модуль Тогда
		Значение = Значение % Модуль;
		Если Значение = 0 Тогда
			Значение = Модуль;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

// Функция возвращает структуру с основными свойствами списка торговых точек, закрепленного за агентом.
// В свойстве ТекстОшибки возвращается описание ошибки (если возникла ошибка).
// Параметры:
//   Агент - СправочникСсылка.Пользователи
//   ДляПоляВыбора - Булево - если запрашиваются данные для поля выбора, то значение параметра Истина.
// Возвращаемое значение:
//   Структура
Функция ПрочитатьИПроверитьСписокТорговыхТочекАгента(Агент, ДляПоляВыбора = Истина) Экспорт 

	//@skip-check structure-consructor-too-many-keys
	СтррРезультат = Новый Структура("ТекстОшибки,КодОшибки,НаименованиеСписокТТ,СсылкаСписокТТ,ИспользуетсяДляПланированияСписокТТ,ИспользоватьПорядокСписокТТ");
	
	СтррРезультат.НаименованиеСписокТТ = "";
	СтррРезультат.ИспользоватьПорядокСписокТТ = Ложь;
	
	СтррРеквизиты = ПолучитьНастройкиАгентаИзВХ(Агент, "СсылкаСписокТТ");
	Если СтррРеквизиты = Неопределено Тогда
		
		СтррРезультат.КодОшибки = "НетНастроекАгента";		
		Текст = НСтр("ru = 'Не найдено настроек для торгового агента. Проверьте настройки агента [подсказка].'");
		
	ИначеЕсли Не ЗначениеЗаполнено(СтррРеквизиты.СсылкаСписокТТ) Тогда
		
		СтррРезультат.КодОшибки = "НеУказанСТТ";		
		Текст = НСтр("ru = 'У торгового агента не указан ""Список торговых точек"". Задайте список торговых точек для агента [подсказка].'");
		
	Иначе
		СтррРезультат.СсылкаСписокТТ = СтррРеквизиты.СсылкаСписокТТ;
		СтррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", СтррРеквизиты.СсылкаСписокТТ);
		Если СтррОбъект = Неопределено Тогда
			
			СтррРезультат.КодОшибки = "ОшибкаСсылкиСТТ";			
			Текст = НСтр("ru = 'У торгового агента указан несуществующий ""Список торговых точек"". Задайте список торговых точек для агента [подсказка].'");
			
		Иначе
			СтррРезультат.НаименованиеСписокТТ = СтррОбъект.Наименование;
			Если СтррОбъект.Состав.Количество() = 0 Тогда
				
				СтррРезультат.КодОшибки = "УказанПустойСТТ";				
				Текст = НСтр("ru = 'У торгового агента указан пустой ""Список торговых точек"". Укажите заполненный список торговых точек для агента [подсказка].'");
				
			Иначе
				СтррРезультат.ИспользуетсяДляПланированияСписокТТ = СписокТорговыхТочекИспользуетсяДляПланированияПосещений(СтррОбъект);
				Если СтррРезультат.ИспользуетсяДляПланированияСписокТТ Тогда
					
					СтррРезультат.ИспользоватьПорядокСписокТТ = СтррОбъект.ИспользоватьПорядок;
					
				Иначе
					
					СтррРезультат.КодОшибки = "ДетализацияСТТБезПланаГрафика";
					Текст = НСтр("ru = 'У торгового агента указан ""Список торговых точек"" без детализации по ""Графику"" или ""Плану посещений"". Укажите для агента список торговых точек с одним из указанных вариантов детализации [подсказка].'");
					
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	Если Текст <> "" Тогда
		Если ДляПоляВыбора Тогда
			СтррРезультат.ТекстОшибки = СтрЗаменить(Текст, "[подсказка]", НСтр("ru = '(для этого нажмите кнопку ""Открыть"" справа от агента)'"));
		Иначе
			СтррРезультат.ТекстОшибки = СтрЗаменить(Текст, " [подсказка]", "");
		КонецЕсли; 
	КонецЕсли; 
	 
	//@skip-check constructor-function-return-section
	Возврат СтррРезультат;

КонецФункции

Процедура ДобавитьАдресаПартнеров(ТЗн)
	
	МПартнеры = ТЗн.ВыгрузитьКолонку("Партнер");
	Если МПартнеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 

	МВидыКИ = Новый Массив;
	МВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	
	//@skip-check undefined-variable
	//@skip-check unknown-method-property
	ТЗАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МПартнеры,, МВидыКИ, ТекущаяДатаСеанса());
	
	Для каждого СтрокаТ Из ТЗн Цикл
		
		СтзАдреса = ТЗАдреса.Найти(СтрокаТ.Партнер, "Объект");
		Если СтзАдреса <> Неопределено Тогда
			СтрокаТ.Адрес = СтзАдреса.Представление;
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет номер факта посещений. Сортировка ТЗн меняется!
// В таблицу добавляются колонки вида НФ<N>, где N - номер дня в плане. В колонках указываются порядковые номера посещений ТТ.
//@skip-check module-unused-method
Процедура ДобавитьНомераФактовПосещений(ТЗн, ВсегоДней)
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(5, 0);
	ТипЧисло = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	
	Для Индекс = 1 По ВсегоДней Цикл
		ТЗн.Колонки.Добавить("НФ" + Формат(Индекс, "ЧГ=0"), ТипЧисло);
	КонецЦикла; 		

	Для Индекс = 1 По ВсегоДней Цикл
		//СтрИндекс = Строка(Индекс);
		КолонкаФакта = "Д"  + Формат(Индекс, "ЧГ=0");
		КолонкаНФ 	 = "НФ" + Формат(Индекс, "ЧГ=0");
		НомерФакта = 0;
		ТЗн.Сортировать(КолонкаФакта);
		Для каждого СтрокаТ Из ТЗн Цикл
			Если Не ПустаяСтрока(СтрокаТ[КолонкаФакта]) Тогда
				НомерФакта = НомерФакта + 1;
				СтрокаТ[КолонкаНФ] = НомерФакта;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьКоординатыПартнеров(ТЗн)
	
	МПартнеры = ТЗн.ВыгрузитьКолонку("Партнер");
	ТЗКоординаты = ПолучитьТЗКоординатПартнеров(МПартнеры);
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(10, 4);
	ТипЧисло  = Новый ОписаниеТипов("Число", КвалификаторЧисла);
	ТЗн.Колонки.Добавить("Широта", ТипЧисло);
	ТЗн.Колонки.Добавить("Долгота", ТипЧисло);
	Для Каждого СтрокаТ Из ТЗКоординаты Цикл
		СТЗ = ТЗн.Найти(СтрокаТ.Ссылка, "Партнер");
		Если СТЗ <> Неопределено Тогда
			СТЗ.Широта  = СтрокаТ.Широта;
			СТЗ.Долгота = СтрокаТ.Долгота;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// СлужебныеПроцедурыИФункции_ПланПосещений
#КонецОбласти 


// Возвращает текстовое представление числа с единицей измерения в правильном склонении и числе.
//
// Параметры:
//  Число                       - Число  - любое целое число.
//  ПараметрыПредметаИсчисления - Строка - варианты написания единицы измерения в родительном падеже для одной;
//                                         для двух и для пяти единиц, разделитель - запятая;
//  ДобавлятьЧислоКРезультату   - Булево - выводить переданное число в результате функции вместе с единицей измерения.
//
// Возвращаемое значение:
//  Строка - текстовое представление количества единиц, число записывается цифрами.
//
// Примеры:
//  ЧислоЦифрамиПредметИсчисленияПрописью(23,  "минуту,минуты,минут") = "23 минуты";
//  ЧислоЦифрамиПредметИсчисленияПрописью(15,  "минуту,минуты,минут") = "15 минут".
Функция ЧислоЦифрамиПредметИсчисленияПрописью(Знач Число, Знач ПараметрыПредметаИсчисления,
	Знач ДобавлятьЧислоКРезультату = Истина)
	
	Результат = ?(ДобавлятьЧислоКРезультату, Формат(Число, "ЧН=0") + " ", "");
	ПредставленияПредмета = Новый Массив;
	
	ПараметрыПредметаИсчисления = СтрРазделить_(ПараметрыПредметаИсчисления, ",");
	Для Каждого Параметр Из ПараметрыПредметаИсчисления Цикл
		ПредставленияПредмета.Добавить(СокрЛП(Параметр));
	КонецЦикла;
	
	Число = Число % 100;
	Если Число > 20 Тогда
		Число = Число % 10;
	КонецЕсли;
	
	Индекс = ?(Число = 1, 0, ?(Число > 1 И Число < 5, 1, 2));
	Результат = Результат + ПредставленияПредмета[Индекс];
	
	Возврат Результат;
	
КонецФункции

Функция НайтиПоЗначению(Коллекция, Значение)

	Результат = Неопределено;
	
	Для Каждого Элемент Из Коллекция Цикл
		Если Элемент.Значение = Значение Тогда
			Результат = Элемент;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ЭтоLinuxСервер() Экспорт
	
	Если ГЭтоLinuxСервер = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ГЭтоLinuxСервер = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		             Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	КонецЕсли; 
				 
	Возврат ГЭтоLinuxСервер;
	
КонецФункции

Функция ЭтоСсылкаНаНайденныйОбъект(Ссылка)
	
	Если Ссылка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Стр = НРег(Строка(Ссылка));
		//@skip-check use-non-recommended-method
		Если Лев(Стр, 1) = "<" И 0 <> Найти(Стр, ">") И 0 <> Найти(Стр, "объект") Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ТипСсылки(Ссылка)
	
	Если Ссылка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
		Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			Возврат "Документ";
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		    Возврат "Справочник";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторСсылки(ОбъектСсылка)

	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат Строка(ОбъектСсылка.Ссылка.УникальныйИдентификатор());
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции 

#Область ОтборыВыгрузкиСправочниковПоСКД

Функция КомпоновщикНастроекАгента(СхемаКомпоновки) Экспорт

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);

	// Добавим выбранные поля
	Для Каждого Элемент из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ Элемент.Папка Тогда
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;

	// Добавим группировку
	ГруппировкаНастроек = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаНастроек.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

	Возврат КомпоновщикНастроек.Настройки;
	
КонецФункции

Функция ЭлементОтбораПоЛевомуЗначению(СтрЛевоеЗначение, СтрНазванияДополнительныхЭлементов = Неопределено, МенеджерВТ = Неопределено)

	ЭлементОтбора = Неопределено;                                     
	ОтборыАгента = ВыбНастройкиАгента.ВыгружаемыеОбъекты;
	
	Если ТипЗнч(ОтборыАгента) <> Тип("ОтборКомпоновкиДанных") Тогда
		Текст = НСтр("ru = 'Агент: ""%1"", не заполнены ""Выгружаемые данные""! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь);
		ВызватьИсключение(Текст);
	КонецЕсли;
	
	Для Каждого Элемент Из ОтборыАгента.Элементы Цикл
		Если Строка(Элемент.ЛевоеЗначение) = СтрЛевоеЗначение Тогда
			ЭлементОтбора = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда // не найден элемент отбора с представлением ПредставлениеОтбора
		Текст = НСтр("ru = 'Агент: ""%1"", не найдено поле СКД ""%2""! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь, СтрЛевоеЗначение);
		ВызватьИсключение(Текст);
	КонецЕсли; 
	
	// проверяем существование ссылки в правом значении отбора
	Если ЭлементОтбора.Использование И Не ЭтоСсылкаНаНайденныйОбъект(ЭлементОтбора.ПравоеЗначение) Тогда
		Текст = НСтр("ru = 'Агент: ""%1"", параметр отбора: %2. Найдена ссылка на несуществующий объект: %3! Проверьте ""Выгружаемые данные"" в настройках агента.'");
		Текст = СтрШаблон_(Текст, ВыбНастройкиАгента.Пользователь, СтрЛевоеЗначение, ЭлементОтбора.ПравоеЗначение);
		ВызватьИсключение(Текст);
	КонецЕсли;
	
	Если СтрНазванияДополнительныхЭлементов <> Неопределено Тогда 
		
		ДопЭлементОтбора = ПолучитьОтборДляДополнительныхЭлементов(СтрЛевоеЗначение, ОтборыАгента, СтрНазванияДополнительныхЭлементов, МенеджерВТ);
		Если ДопЭлементОтбора <> Неопределено И ЭлементОтбора <> Неопределено Тогда
			МОтборы = Новый Массив;
			МОтборы.Добавить(ЭлементОтбора);
			МОтборы.Добавить(ДопЭлементОтбора);
			Возврат МОтборы;
		ИначеЕсли ДопЭлементОтбора <> Неопределено И ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = ДопЭлементОтбора;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ЭлементОтбора;		
	
КонецФункции

Функция ПолучитьОтборДляДополнительныхЭлементов(НазваниеПоляКомпоновки, ОтборыАгента, НазванияДополнительныхЭлементов, МенеджерВТ)

	//@skip-check structure-consructor-too-many-keys
	СтррПараметры = Новый Структура("Условие,Запрос,ЭлементОтбора,ВидСправочника", "");
	Если НазваниеПоляКомпоновки = "Номенклатура" Или НазваниеПоляКомпоновки = "Партнеры" Или НазваниеПоляКомпоновки = "ВидыЦен" Тогда
		СтррПараметры.ВидСправочника = НазваниеПоляКомпоновки;
	Иначе
		ВызватьИсключение("Функция ПолучитьОтборыДляДополнительныхЭлементов() - неизвестное значение НазваниеПоляКомпоновки = " + НазваниеПоляКомпоновки);
	КонецЕсли; 
	
	МНазвания = СтрРазделить_(НазванияДополнительныхЭлементов);
	МВыбранныеНазванияОтборов = Новый Массив; // Массив названий выбранных отборов, массив используется 
	// для проверки взаимосвязанных значений отборов. Пример связанных отборов - "ТолькоПартнерыИзСпискаТТ" и "СсылкаСписокТТ".
	// Если не задействован отбор "ТолькоПартнерыИзСпискаТТ", то при выгрузке партнеров не учитываем отбор "СсылкаСписокТТ".
	
	Для Каждого Название Из МНазвания Цикл
		
		ВРегНазвание = ВРег(Название);
		СтррПараметры.ЭлементОтбора = Неопределено;
		Для Каждого Элемент Из ОтборыАгента.Элементы Цикл // ищем элемент отбора среди элементов отбора в СКД по названию
			Если ВРег(Элемент.ЛевоеЗначение) = ВРегНазвание Тогда
				СтррПараметры.ЭлементОтбора = Элемент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтррПараметры.ЭлементОтбора = Неопределено Тогда // Не найдено элемента отбора в СКД,
			Если ВыбНастройкиАгента.Свойство(Название) Тогда // но такой реквизит есть в настройках агента.
				СтррПараметры.ЭлементОтбора = Название; // тип значения "Строка" - признак, что значение элемента отбора брать из настроек агента
			КонецЕсли; 
		КонецЕсли; 
		
		//@skip-check query-in-loop
		ОбработатьДополнительныйЭлементОтбора(СтррПараметры, МВыбранныеНазванияОтборов, МенеджерВТ);
	
	КонецЦикла;
	
	Если СтррПараметры.Запрос = Неопределено Тогда // не выбрано ни одного параметра, запрос для отбора не требуется
		Возврат Неопределено;
	КонецЕсли; 
	
	Если МенеджерВТ <> Неопределено Тогда
		СтррПараметры.Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	КонецЕсли; 
		
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	[ВидСправочника].Ссылка
		|ИЗ
		|	Справочник.[ВидСправочника] КАК [ВидСправочника]
		|ГДЕ 
		|	[ВидСправочника].ПометкаУдаления = ЛОЖЬ
		|	[Условие]";
	
	СтррЛитералы = Новый Структура("ВидСправочника,Условие");
	ЗаполнитьЗначенияСвойств(СтррЛитералы, СтррПараметры);
	ЗаменитьЛитералы(ТекстЗапроса, СтррЛитералы);
	
	
	СтррПараметры.Запрос.Текст = ТекстЗапроса;
	МЗначения = СтррПараметры.Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); // получили массив отборанных элементов справочника "ВидСправочника"
	
	ЭлементОтбора = ОтборыАгента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); // всегда создаем новый элемент отбора, т.к. используем новое стрЛевоеЗначение
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НазваниеПоляКомпоновки);
	ЭлементОтбора.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
	ЭлементОтбора.ПравоеЗначение = МЗначения;
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование  = Истина;
	
	Возврат ЭлементОтбора;
	
КонецФункции

Функция ВыражениеУсловияДляЗапроса(ВидСравнения, ИмяПараметра, ПредставлениеПустогоЗначения)
	
	СтрРезультат = Неопределено;
	
	Если ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		СтрРезультат = " = " + ИмяПараметра;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		СтрРезультат = " <> " + ИмяПараметра;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		СтрРезультат = " В (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		СтрРезультат = " НЕ В (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		СтрРезультат = " В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		СтрРезультат = " НЕ В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		СтрРезультат = " В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		СтрРезультат = " НЕ В ИЕРАРХИИ (" + ИмяПараметра + ")";
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		СтрРезультат = " <> " + ПредставлениеПустогоЗначения;
	ИначеЕсли ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		СтрРезультат = " = " + ПредставлениеПустогоЗначения;
	КонецЕсли;
	
	Возврат СтрРезультат;
	
КонецФункции	

// Функция генерирует строку условий для запроса на основании значения отбора. 
// Дополнительно создает сам запрос (если он еще не создан) и устанавливает для него параметры.
// Результат возвращается в свойстве "Условие" переданной структуры.
// 
// Параметры:
//	СтррПараметры - Структура - структура со свойствами:
//    * ЭлементОтбора -
//			- ЭлементОтбораКомпоновкиДанных - элемент поля отбора в СКД в "Выгружаемых данных" агента;
//    		- Строка - название свойства агента для отбора партнеров.
//    * ВидСправочника 	- Строка - вид справочника, для которого вызывается запрос.
//    * Условие 		- Строка - строка условий (возвращаемое значение).
//  МВыбранныеНазванияОтборов - Массив Из Строка - названия выбранных ранее отборов
//  МенеджерВТ 			- МенеджерВременныхТаблиц, Неопределено - менеджер ВТ, если требуется из ВТ отобрать промежуточные данные для отбора
//  
Процедура ОбработатьДополнительныйЭлементОтбора(СтррПараметры, МВыбранныеНазванияОтборов, МенеджерВТ)
	
	ТиповоеУсловие = Истина; // признак, что условие запроса типовое (отбор по значению поля таблицы)	
	ЭлементОтбора = СтррПараметры.ЭлементОтбора;
	
	Если ТипЗнч(ЭлементОтбора) = Тип("Строка") Тогда // правое значение отбора нужно брать из настроек торгового агента (из свойства структуры ВыбНастройкиАгента)
		Название = ЭлементОтбора;
	ИначеЕсли ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		Возврат;
	Иначе
		Название = Строка(ЭлементОтбора.ЛевоеЗначение);   // название элемента отбора
		ЗначениеПараметра = ЭлементОтбора.ПравоеЗначение; // значение параметра отбора
		ИмяПараметра      = Название;                     // название параметра в запросе
	КонецЕсли;
	
	ВключенОтбор = Ложь;
	
	// Отборы для партнеров /////////////////////////////////////////////////////////////////////////////////////////////
	Если Название = "ТолькоПартнерыИзСпискаТТ" Тогда // логический признак - использовать или нет для отбора список торговых точек
		Если (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.ПравоеЗначение = Истина)
			Или (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно И ЭлементОтбора.ПравоеЗначение = Ложь)
		Тогда
			ВключенОтбор = Истина;
		КонецЕсли; 
		
	ИначеЕсли Название = "СсылкаСписокТТ" Тогда // отбор партнеров по списку торговых точек
		// Задействуем только если элемент отбора "элементТолькоПартнерыИзСпискаТТ" установлен равным "Истина" (или неравным "Ложь")
		Если МВыбранныеНазванияОтборов.Найти("ТолькоПартнерыИзСпискаТТ") <> Неопределено Тогда // значит задействован элемент отбора "элементТолькоПартнерыИзСпискаТТ"
			CтррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", ВыбНастройкиАгента.СсылкаСписокТТ); // список ТТ читаем из хранилища
			Если CтррОбъект <> Неопределено Тогда
				CтрУсловие   = "Партнеры.Ссылка В (&СписокТТ)";			
				ИмяПараметра = "СписокТТ";
				ЗначениеПараметра = CтррОбъект.Состав.ВыгрузитьКолонку("Партнер");
				ТиповоеУсловие = Ложь;
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли Название = "СегментыПартнеров" Тогда // отбор партнеров из регистра ПартнерыСегмента		
		Условие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&мСегмент", "ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)");
		МенеджерВТСегментыПартнеров(МенеджерВТ, Условие, ЗначениеПараметра);
		МВыборка = МенеджерВТ.Таблицы.Найти("ВТ_СегментыПартнеров").ПолучитьДанные().Выгрузить().ВыгрузитьКолонку("Партнер");
		ИмяПараметра 		= "мПартнерыИзСегментыПартнеров";
		ЗначениеПараметра 	= МВыборка;
		CтрУсловие 			= "Партнеры.Ссылка В (&" + ИмяПараметра + ")";
		ТиповоеУсловие 		= Ложь;	
		
	ИначеЕсли Название = "ТолькоПартнерыОсновногоМенеджера" Тогда // булево значение - признак отбора партнеров по атрибуту ОсновнойМенеджер = Агент.Пользователь
		Если (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.ПравоеЗначение = Истина)
			Или (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно И ЭлементОтбора.ПравоеЗначение = Ложь)
		Тогда
			CтрУсловие = "Партнеры.ОсновнойМенеджер = &Пользователь";
			ИмяПараметра = "Пользователь";
			ЗначениеПараметра = ВыбНастройкиАгента.Пользователь;
			ТиповоеУсловие = Ложь;
		КонецЕсли; 
		
	ИначеЕсли Название = "ТипПартнера" Тогда // отбор партнеров по выбранному типу: "Клиент", "Поставщик" или "Конкурент"		
		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда // тут значение параметра отбора (правое значение) - это список значений
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				CтрУсловие = УсловиеВключенияПартнераПоТипуПартнера(ЗначениеПараметра, "=", "ИЛИ");
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				CтрУсловие = УсловиеВключенияПартнераПоТипуПартнера(ЗначениеПараметра, "<>", "И");
			КонецЕсли;
			ИмяПараметра = Неопределено; // для условия по типу партнера параметр запроса не используется
			ТиповоеУсловие = Ложь;
		КонецЕсли; 
		
	ИначеЕсли Название = "ОсновнойМенеджер" Или Название = "РегиональныйМенеджер" Тогда // отбор партнеров по основному менеджеру
		CтрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)");
		
	ИначеЕсли Название = "БизнесРегион" Тогда // отбор партнеров по основному менеджеру
		CтрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)");
		
	// Отборы для номенклатуры /////////////////////////////////////////////////////////////////////////////////////////////
	ИначеЕсли Название = "ВидНоменклатуры" Тогда // отбор номенклатуры по виду
		CтрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)");
		
	ИначеЕсли Название = "ГруппаДоступа" Тогда // отбор номенклатуры по группе доступа
		CтрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ГруппыДоступаНоменклатуры.ПустаяСсылка)");
		
	ИначеЕсли Название = "ЦеноваяГруппа" Тогда // отбор номенклатуры по ценовой группе
		CтрУсловие = ВыражениеУсловияДляЗапроса(ЭлементОтбора.ВидСравнения, "&" + Название, "ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)");
		
	ИначеЕсли Название = "ТолькоВидыЦенИзСоглашений" Тогда 
		Если ИспользоватьСоглашения() Тогда
			Если (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.ПравоеЗначение = Истина)
				Или (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно И ЭлементОтбора.ПравоеЗначение = Ложь)
			Тогда
				ВключенОтбор = Истина;
				CтрУсловие = "ВидыЦен.Ссылка В (ВЫБРАТЬ ВТ_Соглашения.ВидЦен ИЗ ВТ_Соглашения)";
				ИмяПараметра = Неопределено; // для условия по типу партнера параметр запроса не используется
				ТиповоеУсловие = Ложь;
				МенеджерВТСоглашения(МенеджерВТ); // проверка на существование и создание временной таблица "ВТ_Соглашения" в МенеджерВТ
			КонецЕсли;
		КонецЕсли;
		
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Иначе
		ВызватьИсключение("Процедура ПодготовитьДополнительныйЭлементОтбора() - Неизвестное значение ЭлементОтбора.ЛевоеЗначение = """ 
			+ Название + """");
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(CтрУсловие) Тогда
		МВыбранныеНазванияОтборов.Добавить(Название);
		
		Если ТиповоеУсловие Тогда
			СтррПараметры.Условие = СтррПараметры.Условие + Символы.ПС + " И " + СтррПараметры.ВидСправочника + "." + Название + " " + CтрУсловие;		
		Иначе
			СтррПараметры.Условие = СтррПараметры.Условие + Символы.ПС + " И " + CтрУсловие;				
		КонецЕсли; 
		
		Если СтррПараметры.Запрос = Неопределено Тогда
			СтррПараметры.Запрос = Новый Запрос;
		КонецЕсли; 			
		
		Если ЗначениеЗаполнено(ИмяПараметра) Тогда
			СтррПараметры.Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);		
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(CтрУсловие) Или ВключенОтбор Тогда
		МВыбранныеНазванияОтборов.Добавить(Название);
	КонецЕсли; 

КонецПроцедуры

// Функция возвращает строку условия для запроса отбора партнеров по типу партнера (элемент отбора "ТипПартнера" в макете СКДВыгружаемыеДанные)
// по логическим реквизитам: Клиент, Поставщик, Конкурент справочника Партнеры.
// Итоговая строка условия может состоять из нескольких сравнений, соединенными операциями "И" или "ИЛИ".
// 
// Параметры:
//	  ПравоеЗначение - СписокЗначений Из Строка, Строка - значения сравнения (список из значений: "Клиент", "Поставщик", "Конкурент" или одно из значений (Строка)).
//    ОперацияСравнения  - Строка - строка сравнения "==" или "<>"
//    ОперацияСоединения - Строка - строка соединения условий "И" или "ИЛИ"
//  
// Возвращаемое значение:
//  Строка - строка условия для запроса отбора партнеров.
//
Функция УсловиеВключенияПартнераПоТипуПартнера(ПравоеЗначение, ОперацияСравнения, ОперацияСоединения)
	
	СтрУсловие = "";
	
	МРеквизиты = СтрРазделить_("Клиент,Поставщик,Конкурент");

	КоличествоУсловий = 0;
	ЭтоСписокЗначений = (ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений"));
	Для Каждого ИмяРеквизита Из МРеквизиты Цикл
		Если (ЭтоСписокЗначений И ПравоеЗначение.НайтиПоЗначению(ИмяРеквизита) <> Неопределено) Или ИмяРеквизита = ПравоеЗначение Тогда
			СтрУсловие = СтрУсловие + ?(ПустаяСтрока(СтрУсловие), "", " " + ОперацияСоединения + " ")
				+ "Партнеры." + ИмяРеквизита + " " + ОперацияСравнения + " ИСТИНА ";
				КоличествоУсловий = КоличествоУсловий + 1;
		КонецЕсли; 
	КонецЦикла; 
	
	Если КоличествоУсловий > 1 Тогда // заключаем условия в скобки
		СтрУсловие = "(" + СокрЛП(СтрУсловие) + ")";	
	КонецЕсли;
	
	Возврат СтрУсловие;
	
КонецФункции

Функция СхемаКомпоновкиДанныхДляОбъекта(ТекстЗапроса) Экспорт

	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();

	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "Local";

	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Запрос = ТекстЗапроса;

	Возврат СхемаКомпоновки;
	
КонецФункции

// Возвращает компоновщик настроек агента с заполненными основными настройками
//
Функция ПолучитьКомпоновщикНастроекАгентаДляВыгрузки()
		
	Если КомпоновщикНастроекКД.Настройки.Отбор.Элементы.Количество() <> 0 Тогда
		Возврат КомпоновщикНастроекКД;
	КонецЕсли;
	
	// Получаем схему компоновки
	СтрИмяМакета = "СКДВыгружаемыеДанные";
	ТекСхемаКомпоновки = МакетОбработки(СтрИмяМакета);
	Если ТекСхемаКомпоновки = Неопределено Тогда
		//@skip-check bsl-nstr-string-literal-format
		ВызватьИсключение(НСтр("ru = 'Функция ПолучитьКомпоновщикНастроекАгентаДляВыгрузки() - не удалось получить имя макета ='; ua = 'Функція ПолучитьКомпоновщикНастроекАгентаДляВыгрузки() - не вдалося отримати імя макета ='") + СтрИмяМакета);
	КонецЕсли;
	
	// Выполняем инициализацию компоновщика КД
	ТекИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ТекСхемаКомпоновки);
	КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроекКД.Инициализировать(ТекИсточникНастроек);
	КомпоновщикНастроекКД.ЗагрузитьНастройки(ТекСхемаКомпоновки.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроекКД; 
	
КонецФункции // ПолучитьКомпоновщикНастроекАгентаДляВыгрузки() 
  
// Возвращает настройки отбора агента 
//
// Параметры:
//	ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных - пользовательские настройки СКД 	
//
Функция ПолучитьНастройкиОтбораАгентаПоПользовательскойНастройке(ПользовательскиеНастройки)

	КомпоновщикНастроекКД = ПолучитьКомпоновщикНастроекАгентаДляВыгрузки();
	
	Если ПользовательскиеНастройки <> Неопределено Тогда
		КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	Иначе
		КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(Новый ПользовательскиеНастройкиКомпоновкиДанных);
	КонецЕсли;
	ТекНастройкиАгента = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	Возврат ТекНастройкиАгента.Отбор; 
	
КонецФункции // ПолучитьНастройкиОтбораАгентаПоПользовательскойНастройке()

// ОтборыВыгрузкиСправочниковПоСКД
#КонецОбласти 

// Функция возвращает массив элементов справочника в соответствии с текстом запроса.
// 
// Параметры:
//	ТекстЗапроса - Строка - текст запроса выборки из справочника;
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - элемент (условия) отбора.
//  
// Возвращаемое значение:
//  Массив Из СправочникСсылка - элементы справочника.
//
Функция ВыборкаИзСправочника(ТекстЗапроса, ЭлементОтбора = Неопределено)
	Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда // задействован ЭлементОтбораКомпоновкиДанных
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ЭлементОтбора, ТекстЗапроса);
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
		ТаблицаРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		Возврат ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
	Иначе // условие без отбора данных
		Запрос = Новый Запрос(ТекстЗапроса);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Возврат РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
КонецФункции


//Функция РезультатЗапросаВВидеТЗ(ТекстЗапроса, ОтборыСКД = Неопределено)
//	
//	Если ОтборыСКД <> Неопределено И ОтборыСКД.Использование Тогда
//		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ОтборыСКД, ТекстЗапроса);
//		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
//		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
//		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
//		Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновки);
//	Иначе
//		Запрос = Новый Запрос(ТекстЗапроса);
//		Возврат Запрос.Выполнить().Выгрузить();
//	КонецЕсли;
//	
//КонецФункции

// Функция упаковывает файл выгрузки в архив.
// Возвращает полный путь к архиву, 
// или Неопределено, если архив не удалось создать.
//@skip-check module-region-empty
Функция УпаковатьФайл(ИмяФайлаВыгрузки, ИмяАрхиваСКартинками, ИмяФайлаОтчетов)

	ПарольАрхива  = ""; // СокрЛП(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ПарольНастроек.Значение);
	ПутьИмяАрхива = Лев(ИмяФайлаВыгрузки, СтрДлина(ИмяФайлаВыгрузки) - 3) + "zip";

	Архив = Новый ЗаписьZipФайла(ПутьИмяАрхива, ПарольАрхива,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	Архив.Добавить(ИмяФайлаВыгрузки);

	Если ЗначениеЗаполнено(ИмяАрхиваСКартинками) Тогда
		Архив.Добавить(ИмяАрхиваСКартинками);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФайлаОтчетов) Тогда
		КаталогОтчета = ДополнитьСлешВПуть(ИмяФайлаОтчетов) + "*";
		Архив.Добавить(КаталогОтчета, РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	КонецЕсли;

	
#Область ПокаУбрано	

	//Если Не ПустаяСтрока(ПапкаСОтчетом) Тогда
	//	Архив.Добавить(ПапкаСОтчетом, РежимСохраненияПутейZIP.СохранятьОтносительныеПути);
	//	ЭтоВыгрузкаОтчетаПоЗапросу = Истина;
	//Иначе
	//	ЭтоВыгрузкаОтчетаПоЗапросу = Ложь;
	//КонецЕсли;

	//СписокБазДанных = Новый СписокЗначений;

	//// Сформируем файл-манифест
	//ДопНастройкиАгента = ВыбАгент.апНастройкиПриложения.Настройки.Получить();
	//
	//Если (Не ЭтоВыгрузкаОтчетаПоЗапросу) И (Не ДопНастройкиАгента = Неопределено) Тогда
	//	
	//	Для Каждого ВеткаДерева Из ДопНастройкиАгента.Строки Цикл 
	//		//Идентификатор     = ВеткаДерева.Идентификатор;
	//		//ЗначениеКонстанты = ВеткаДерева.Значение;
	//		Ключ			  = ВеткаДерева.Ключ;
	//		
	//		Если Ключ = "Общие" Тогда
	//			Для Каждого ВеткаДерева Из ВеткаДерева.Строки Цикл
	//				ЗначениеКонстанты = ВеткаДерева.Значение;
	//				Ключ			  = ВеткаДерева.Ключ;
	//				
	//				Если Ключ = "СписокБазДанных" Тогда
	//					МассивПодстрок = РазложитьСтрокуНаМассивПодстрок(ЗначениеКонстанты, ";");
	//					Для Сч = 0 По МассивПодстрок.Количество()-1 Цикл
	//						СписокБазДанных.Добавить(МассивПодстрок[Сч]);	
	//					КонецЦикла;
	//				КонецЕсли; //Если Ключ = "СписокБазДанных" Тогда					
	//			КонецЦикла; //Для Каждого ВеткаДерева Из ВеткаДерева.Строки Цикл				
	//		КонецЕсли; //Если Ключ = "Общие" Тогда			
	//	КонецЦикла; //Для Каждого ВеткаДерева Из ДопНастройкиАгента Цикл
	//	
	//КонецЕсли; //Если ДопНастройкиАгента <> Неопределено Тогда

	//Если (Не ЭтоВыгрузкаОтчетаПоЗапросу) И (СписокБазДанных.Количество() > 1) Тогда
	//	
	//	ПутьКФайлуМанифест = ВернутьКаталогВременныхФайлов(ПараметрыОбмена) + "manifest";
	//	
	//	Текст = Новый ЗаписьТекста(ПутьКФайлуМанифест, КодировкаТекста.ANSI);
	//	
	//	Текст.ЗаписатьСтроку("<manifest version=""1"">");
	//	
	//	Для Каждого ТекСтрока Из СписокБазДанных Цикл				
	//		Текст.ЗаписатьСтроку("<import db=" + """" + ТекСтрока + """" + " file=" + """" + "FromCDB.xml""" + " />");				
	//	КонецЦикла;
	//	
	//	Текст.ЗаписатьСтроку("</manifest>");
	//	
	//	Текст.Закрыть();
	//	
	//	Архив.Добавить(ПутьКФайлуМанифест);
	//	
	//КонецЕсли;
	
// ПокаУбрано
#КонецОбласти
	
	Архив.Записать();
	
	Если ФайлСуществует(ПутьИмяАрхива) Тогда
		Результат = ПутьИмяАрхива;
		//@skip-check empty-except-statement
		Попытка
			Если ЗначениеЗаполнено(ИмяАрхиваСКартинками) Тогда
				УдалитьФайлы(ИмяАрхиваСКартинками);
			КонецЕсли; 
			УдалитьФайлы(ИмяФайлаВыгрузки);
		Исключение
		КонецПопытки; 
	Иначе
		Результат = Неопределено;
		ОповеститьОСобытии("Ошибка создания архива: " + ПутьИмяАрхива, "ОшибкаОбмен",, "ТекущийАгент");
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#Область ВыводСообщений

Процедура ВывестиИнформацию(СтррИнформация)

	// Заносим в журнал только ошибки
	//@skip-check use-non-recommended-method
	Если Найти(СтррИнформация.ТипСобытия, "Ошибка") <> 0 Тогда
		Текст = ?(ЗначениеЗаполнено(СтррИнформация.Агент), СокрЛП(СтррИнформация.Агент) + ": ", "") + СтррИнформация.ТекстСообщения;
		ЗаписьЖурналаРегистрации(СтррИнформация.ТипСобытия, УровеньЖурналаРегистрации.Ошибка, Неопределено, СтррИнформация.СсылкаНаОбъект, Текст);
	КонецЕсли;
	
	//@skip-check object-deprecated
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтррИнформация.ТекстСообщения);

КонецПроцедуры 

Процедура ОповеститьОСобытии(Текст, ТипСобытия = "АПИнформация", СсылкаНаОбъект = Неопределено, Агент = Неопределено)
	
	ТекстСообщения = Текст;
	Если Агент = "ТекущийАгент" Тогда
		Агент = ВыбНастройкиАгента.Пользователь;
	ИначеЕсли Агент = "ТекущийАгентСообщить" Тогда
		Агент = ВыбНастройкиАгента.Пользователь;
		ТекстСообщения = "Агент " + Строка(Агент) + ": " + Текст;
	ИначеЕсли ТипЗнч(Агент) = Тип("Строка") Тогда
		ВызватьИсключение("Функция ОповеститьОСобытии() - неизвестное значение параметра Агент = " + Агент);
	КонецЕсли;
	
	//@skip-check structure-consructor-too-many-keys
	СтррИнформация = Новый Структура("ТекстСообщения,ТипСобытия,СсылкаНаОбъект,Агент", ТекстСообщения, ТипСобытия, СсылкаНаОбъект, Агент);
	ВывестиИнформацию(СтррИнформация);

КонецПроцедуры 

// Выводит в переданную структуру сообщения.
// Параметры:
//   СтррРезультат - Структура:
//     * Сообщения - Массив ИЗ Структура - массив сообщений
//     * ЕстьОшибки - Булево, Неопределено - признак наличия ошибок
//   Текст - Строка - текст сообщения
//   ЕстьОшибки - Булево, Неопределено - признак наличия ошибок
//
//@skip-check module-unused-method
Процедура ВывестиСообщение(СтррРезультат, Текст, ЕстьОшибки = Неопределено)
	
	СтррСообщение = Новый Структура("Описание", Текст);
	СтррРезультат.Сообщения.Добавить(СтррСообщение);
	Если ЕстьОшибки <> Неопределено Тогда
		СтррРезультат.ЕстьОшибки = ЕстьОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура БотОтправитьСообщение(ТекстСообщения) Экспорт
	
//	Бот 	= "apinfo_bot";	// имя бота
//	Токен 	= "547075615:AAGeG1hWj2OfZAEsI9URT9gQXH6jiRjG2dc";
//	Сервер  = "api.telegram.org";
//	//chat_id = "183657029";
//	Информация = ТекстСообщения; //" Тестовое информационное сообщение";
//	Ресурс = "bot" + Токен + "/getUpdates"; //запустить разово, чтобы получить chat_id.
//	//Ресурс = "bot" + Токен + "/sendMessage?chat_id=" + СтрЗаменить(Формат(chat_id, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text= " + Информация;
//	Соединение  =  Новый HTTPСоединение(Сервер, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
//	Запрос = Новый HTTPЗапрос(Ресурс);
//	Ответ = Соединение.Получить(Запрос);
//	ДвоичныеДанныеОтвета = Ответ.ПолучитьТелоКакДвоичныеДанные();
	
КонецПроцедуры

//Процедура ОтправитьСообщениеТелеграм(Сообщение)
//	
//	Сервер = "api.telegram.org";
//	Ресурс = "bot" + ТокенБота + "/sendMessage?chat_id=" + СтрЗаменить(Формат(ИдентификаторЧата, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text= " + Сообщение;
//    Соединение  =  Новый HTTPСоединение(Сервер, 443, , , , , Новый ЗащищенноеСоединениеOpenSSL());
//    Запрос = Новый HTTPЗапрос(Ресурс);
//    Ответ = Соединение.Получить(Запрос);
//    ДвоичныеДанныеОтвета = Ответ.ПолучитьТелоКакДвоичныеДанные();
//	
//КонецПроцедуры


// ВыводСообщений
#КонецОбласти 


#Область ИдентификаторыПеречислений

Функция ПолучитьЗначениеПеречисленияПоИдентификатору(ВидПеречисления, Идентификатор)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда 
		Возврат Неопределено;
	КонецЕсли; 										

	ПопыткаСоздатьТаблицыПеречислений();
	
	СтрокаТ = ГТаблицыПеречислений[ВидПеречисления].Найти(ВРег(Идентификатор), "Идентификатор");
	Если СтрокаТ = Неопределено Тогда
		Возврат Неопределено; // sk_230619 ВызватьИсключение("Функция ПолучитьЗначениеПеречисленияПоИдентификатору(), неизвестный Идентификатор = " + Идентификатор);
	КонецЕсли;
	
	Возврат СтрокаТ.Значение;
	
КонецФункции

Функция ПолучитьИдентификаторПеречисленияПоЗначению(ВидПеречисления, Значение)

	ПопыткаСоздатьТаблицыПеречислений();
	
	СтрокаТ = ГТаблицыПеречислений[ВидПеречисления].Найти(Значение, "Значение");
	Если СтрокаТ = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрокаТ.Идентификатор;
	КонецЕсли;
	
КонецФункции

Процедура ПопыткаСоздатьТаблицыПеречислений()
	
	Если ГТаблицыПеречислений <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ГТаблицыПеречислений = Новый Структура("ТипыКонтактнойИнформации,ФормыОплаты");
	
	ГТаблицыПеречислений.Вставить("СпособыДоставки");
	
	Если ИспользоватьМаркировки() Тогда
		ГТаблицыПеречислений.Вставить("ВидыМаркированногоТовара");
	КонецЕсли;
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	
	Для Каждого Элемент Из ГТаблицыПеречислений Цикл
		ТЗн = Новый ТаблицаЗначений;
		ТЗн.Колонки.Добавить("Идентификатор", ОписаниеТипаСтрока); //идентификатор значения перечисления в МТ
		ТЗн.Колонки.Добавить("Значение"); 						  //значение перечисления в УТ
		ГТаблицыПеречислений[Элемент.Ключ] = ТЗн;
	КонецЦикла;
	
	ТЗн = ГТаблицыПеречислений.ТипыКонтактнойИнформации;
	ДобавитьЗначениеПеречисления(ТЗн, "a4d0f540-64ed-4f3e-b2bb-818da38f5ab2", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ДобавитьЗначениеПеречисления(ТЗн, "52477200-af54-405b-9888-14b8bded0e19", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ДобавитьЗначениеПеречисления(ТЗн, "2c2cfc86-e2a0-414d-a116-5acadac53437", Перечисления.ТипыКонтактнойИнформации.ВебСтраница);
	ДобавитьЗначениеПеречисления(ТЗн, "e45419b3-0cfd-47ce-8b24-7037a1e86aed", Перечисления.ТипыКонтактнойИнформации.Другое);
	ДобавитьЗначениеПеречисления(ТЗн, "8fc8f351-14f0-48eb-952a-38bb313b28d5", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	// Для видов оплаты использованы случайные идентификаторы, т.к. в мобильном приложении это справочник.
	// Это же соответствие используется при выгрузке видов оплат в мобильное приложение в процедуре "Выгрузка дополнительной информации"
	ТЗн = ГТаблицыПеречислений.ФормыОплаты;
	ДобавитьЗначениеПеречисления(ТЗн, "4a73372b-48e3-4874-8b87-b964d5782e25", Перечисления.ФормыОплаты.Наличная);
	ДобавитьЗначениеПеречисления(ТЗн, "7e6a8955-0b5b-4a3d-9446-acce667ed741", Перечисления.ФормыОплаты.Безналичная);
	ДобавитьЗначениеПеречисления(ТЗн, "f2cf11e4-d6cc-4986-a5a2-0a440301876c", Перечисления.ФормыОплаты.Взаимозачет);
	ДобавитьЗначениеПеречисления(ТЗн, "bd9e3958-1e52-4d37-9685-6083e249702f", Перечисления.ФормыОплаты.ПлатежнаяКарта);
	ДобавитьЗначениеПеречисления(ТЗн, "ef11cdb0-57e7-4c0f-ecc2-49174e487d7d", Перечисления.ФормыОплаты.Безналичная); // вид оплаты для Kaspi.kz
	
	// Значение сохраняются в хранилище в форме НастройкиМодуля.
	ТЗн = ГТаблицыПеречислений.СпособыДоставки;	
	ИмяНастройки	  = КлючНастроекиСпособыДоставки();
	ЗначениеНастройки = ПрочитатьЗначениеНастройки(ИмяНастройки);
	Если ЗначениеНастройки <> Неопределено Тогда
		Для Каждого Элемент Из ЗначениеНастройки Цикл
			ДобавитьЗначениеПеречисления(ТЗн, Элемент.Значение, Элемент.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьМаркировки() Тогда 
		ТЗн = ГТаблицыПеречислений.ВидыМаркированногоТовара;		
		ДобавитьЗначениеПеречисления(ТЗн, "af3d0520-8529-4173-bbc3-aa5dc7b5df32", Перечисления.ВидыПродукцииИС.Табак);
		Если ПоколениеКонфигурации(">=УТ_11.4.13.71") Тогда
			ДобавитьЗначениеПеречисления(ТЗн, "0e5f3b90-fbbd-4c36-b8a8-729d7294fd63", Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
			ДобавитьЗначениеПеречисления(ТЗн, "fd7acc78-37df-4c14-86df-cc0995ea9dfd", Перечисления.ВидыПродукцииИС.УпакованнаяВода); // sk_220412 MOD-3102 
		КонецЕсли;    
		//(( sk_220412 MOD-3101  
		Если (ПоколениеКонфигурации("=УТ_11.4") И ПоколениеКонфигурации(">=УТ_11.4.14.164")) 
			Или (ПоколениеКонфигурации("=УТ_11.5") И ПоколениеКонфигурации(">=УТ_11.5.7.367")) Тогда
			ДобавитьЗначениеПеречисления(ТЗн, "66592913-ccf8-49c5-bef1-08ef89ca260c", Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция);
		КонецЕсли;  
		//)) sk_220412 
		ДобавитьЗначениеПеречисления(ТЗн, "584f5937-08ab-45ba-88b7-e0cc1465c990", Перечисления.ВидыПродукцииИС.Обувь);
		ДобавитьЗначениеПеречисления(ТЗн, "fcd63137-aa16-4b69-ad1b-e3505b0bdaf4", Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность);
		Если ПоколениеКонфигурации(">=УТ_11.4.13.99") Тогда 
			ДобавитьЗначениеПеречисления(ТЗн, "b439de27-93fd-4d79-a44e-ba512f2f2af3", Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС);
			ДобавитьЗначениеПеречисления(ТЗн, "a9577b95-3b0b-4ad7-95f6-fb201423e318", Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС);		
		Иначе	
			//@skip-check unknown-method-property
			ДобавитьЗначениеПеречисления(ТЗн, "b439de27-93fd-4d79-a44e-ba512f2f2af3", Перечисления.ВидыПродукцииИС.МолочнаяПродукция);
		КонецЕсли;
		ДобавитьЗначениеПеречисления(ТЗн, "8356dbe6-411e-4097-b3d6-c3bfd7fd917f", Перечисления.ВидыПродукцииИС.Шины);
		ДобавитьЗначениеПеречисления(ТЗн, "8fa47b32-f1bd-4ae0-8543-ba132c284e5c", Перечисления.ВидыПродукцииИС.Фотоаппараты);
		ДобавитьЗначениеПеречисления(ТЗн, "730fe8b3-1ed1-465a-804a-7390346656a7", Перечисления.ВидыПродукцииИС.Велосипеды);
		ДобавитьЗначениеПеречисления(ТЗн, "d455c4f5-6a4a-4b68-bd41-a735e7dc5f96", Перечисления.ВидыПродукцииИС.КреслаКоляски);
		ДобавитьЗначениеПеречисления(ТЗн, "ac24173b-1d6b-4b7c-84ac-b4f2599120af", Перечисления.ВидыПродукцииИС.Духи);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьЗначениеПеречисления(ТЗн, Идентификатор, Значение)
	
	СтрокаТ = ТЗн.Добавить();
	СтрокаТ.Идентификатор = ВРег(Идентификатор);
	СтрокаТ.Значение 	  = Значение;
	
КонецПроцедуры

Функция КлючНастроекиСпособыДоставки() Экспорт
	
	Возврат "GUIDПеречисленийСпособыДоставки";  
	
КонецФункции

// ИдентификаторыПеречислений
#КонецОбласти 

#Область ИдентификаторыВидовСправочниковИДокументов

// Процедура создает таблицы соответствия видов документов и справочников между МТ и УТ.
// Таблицы соответствий используются в процедурах ПолучитьВсеВидыОбъектовДляМУ(), ПолучитьВсеВидыОбъектовДля1С(), ВидОбъектаПоИдентификатору()...
// Важно правильно соблюдать регистры в названиях видов объектов!
Процедура ПопыткаСоздатьТаблицыВидовОбъектов()

	Если ГТаблицыВидовОбъектов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтррТаблицы = Новый Структура("Документ,Справочник");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
		
	Для Каждого Элемент Из СтррТаблицы Цикл
		ТЗн = Новый ТаблицаЗначений;
		ТЗн.Колонки.Добавить("ВидДляМТ",  	 ОписаниеТипаСтрока); //вид документа/справочника в МТ	
		ТЗн.Колонки.Добавить("Представление", ОписаниеТипаСтрока); //представление вида документа/справочника в МТ		
		ТЗн.Колонки.Добавить("Вид",  		 ОписаниеТипаСтрока); //вид документа/справочника в УТ
		ТЗн.Колонки.Добавить("ИдентификаторВида", 	ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("ИнтерактивноОчищать", 	ОписаниеТипаБулево); //признак интерактивного выбора флага "Очищать перед загрузкой"
		СтррТаблицы[Элемент.Ключ] = ТЗн;
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////
	// виды документов в МТ      
	ТЗн = СтррТаблицы.Документ; 
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Заказ",, 			"ЗаказКлиента", 		   		"e01e1f5c-d6e4-46e8-b923-3758b0d79bde");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ПКО",, 			"ПриходныйКассовыйОрдер",  		"749be2e0-9b00-4d7b-9d4d-88ca53327511");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "РКО",, 			"РасходныйКассовыйОрдер",  		"3890d435-96ba-4481-abc0-23782e15b32f");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Реализация",,		"РеализацияТоваровУслуг",  		"7ffb418c-73c9-4883-91c5-827fa5145a3a");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Перемещение",,		"ПеремещениеТоваров",	   		"77525c87-cb2f-405e-a92e-6f373edeece7");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ВозвратТоваров", 	"Возврат товаров", "ВозвратТоваровОтКлиента", "4971b041-beab-4fa6-b1e8-10138f04fe44");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Посещение",, 		"_",  			   				"9f147c59-5ee8-4550-8289-12ecfe5d0617"); 				// знак "_" - признак виртуального документа (аналогичный вид документа в 1С отсутствует)
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Мерчендайзинг",, 	"_",  		  					"61dee5fe-d0a8-4842-a6af-a8d33f298845"); 				// знак "_" - признак виртуального документа ...
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Долг",, 			"_Взаиморасчеты",		   		"a93aadfa-2a35-40fe-b88a-3768825cdd31", Ложь); 			// знак "_" - признак виртуального документа ... // ??? - это не виртуальные документы, разобраться
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Маршрут",, 		"_Маршрут",		   		   		"43920fa1-745d-4499-84af-7000672ceeff", Ложь); 			// знак "_" - признак виртуального документа ... // ???
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ВнеплановыйМаршрут",,"_ВнеплановыйМаршрут",   		"27205d6e-e956-4c06-aa21-9b573f5d752f", Ложь); 			// знак "_" - признак виртуального документа ...
	ДобавитьСвойстваВидаОбъекта(ТЗн, "СчетФактура","Счет-фактура","СчетФактураВыданный", "d7d70de1-4f98-4153-82f1-12c84ebf81a5", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Поступление",,	ВидДокументаПоступлениеТоваровУслуг(), "c9850d61-bc15-445a-8b1a-e328cc45ddae", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Задание",, 		"_",  			   				"b49074d6-3c0c-4361-b71d-bbf446ab02b6");
	
	
	/////////////////////////////////////////////////////////////////////////
	// виды справочников в МТ  
	ТЗн = СтррТаблицы.Справочник; 
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Организации",,,									"0e3cbaea-5467-45cd-8c86-fb1777da435b");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ТипыЦен","Типы цен","ВидыЦен", 					"00f1ffe7-e16e-4ff4-9ef1-b8d0c54bdf59");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ВидыОплат","Виды оплат","*",						"04977681-ebaf-4589-b6e7-93e883333db7", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Склады",,, 										"2516ffce-f46f-4326-be00-438ef0871d30");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Договоры",,ВидСправочника1СДляВыгрузкиДоговоров(),	"735a9ce5-dcc1-4d1a-8f8d-643a50a6befc");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Сегменты",,"*",									"b08784c4-5b74-4685-88b5-a17ea105ae48", Ложь); // связи сегментов партнеров и соглашений в УТ, пока не используется (03.12.17)
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Номенклатура",,, 									"d6d52ada-0f38-4112-af3c-2f1e425a43d1");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ХарактеристикиНоменклатуры", "Характеристики номенклатуры",, 	"cc552c31-f7de-4259-a6e3-66ef765d3b43");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ЕдиницыИзмерения","Единицы измерения",,			"80452c60-b442-4da9-a048-42f63270ca14");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ПерсональныеЦены","Персональные цены","*",			"12215e0a-385d-441a-8e98-1b6e0206143f");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ПерсональныеСкидки","Персональные скидки","*",		"12cf8990-d7d7-4cfa-9ccd-ad4ccb5ee9e6");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "КатегорииДокументов","Категории документов", "*", 	"f997f837-8721-4896-8fe8-3497c6c38206");       // знак "*" в параметре Вид - признак отсутствующего аналогичного справочника в УТ
	ДобавитьСвойстваВидаОбъекта(ТЗн, "СтатусыКонтрагентов","Статусы контрагентов", "*", 	"74046d94-b25d-4f3a-b553-27b7fdd3c60c"); 
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Запросы",,"*", 									"cc458719-5078-4dc8-9a0c-fa19e3904f39"); 
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ИсторияПродаж","История продаж","*", 				"af9faa26-9638-41c5-bfce-9514e670ef2e", Ложь); 
	ДобавитьСвойстваВидаОбъекта(ТЗн, "КонтактныеЛица","Контактные лица","КонтактныеЛицаПартнеров", 				"cf387a58-4655-41b5-a460-85884d1f20d0");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "КонтактнаяИнформация", "Контактная информация","ВидыКонтактнойИнформации",	"85b62882-0156-4881-85ba-b8fef05c867b");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ВидыКонтактнойИнформации", "Виды контактной информации",, 					"564e0eca-c498-4d28-83d7-4bdeaec558e2");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ФотоСправочников","Фото справочников","*",			"e01cf3a3-6765-4fd3-801c-ccdbf85c78fc");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ФотоДокументов","Фото документов","*",				"05ea7926-febb-4d82-97fc-19294dd5dd29");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ПечатныеФормыДокументов",,"*",						"17b09c65-5b6c-40d1-8616-3a655b99da8d", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ПечатныеФормыОрганизаций",,"*",					"c7b2883c-d872-4d19-8b32-e7cefaaceaca", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "НастройкиОбмена",,"*",								"b20a258f-ffb6-49b4-b0fd-9853760cf70c", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Штрихкоды","Штрих-коды","*",						"c156cc98-8b92-444e-b8c2-e3de51106b66", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Маркировка","Маркировка","*",						"a6162356-75c9-49a9-bc6a-4e8fb4cd6386");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "РезультатыПосещений",,"_",							"ffd68f37-4bdd-4692-8ab2-a22964f602b1", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ШаблоныАнкет",,"_",								"29eea217-9f75-4994-941e-cab18f53a860", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ВидыДоставки", "Виды доставки","СпособыДоставки",	"E4623B4E-2F19-47AB-B158-EE0E021D3911", Ложь);
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Соответствия",,,									"AFE27FC7-B90E-4F33-A4C6-3759314657A7");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ПланыПродаж", "Планы продаж",,						"41598C02-F788-48A7-A039-645EF74BD57F");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "СоставПланаПродаж", "Состав плана продаж",,		"6B5D547E-B683-4990-89CD-61D0F8497A9C");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ВидыЗадач", "Виды задач",,							"A00B7107-5700-4E02-97F6-C577E707E21F");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "КомандыДляМУ", "Команды для мобильных устройств",,	"1941E3E0-EEEF-43D2-A986-4A97000079B0");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ДополнительныеОтчетыДляМУ", "Доп. отчеты для МУ",, "B3DFD675-23F8-45ED-86C2-8981F549FDB7");
	
	СтрТорговыеТочки = ?(РежимВыгрузкиРекомендуемый , "Партнеры", "Контрагенты");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "ТорговыеТочки","Торговые точки", СтрТорговыеТочки,	"d3dbb02e-681e-4fc2-ad0e-8ef1234e9f48");
	СтрКонтрагенты = ?(РежимВыгрузкиРекомендуемый , "Контрагенты", "Партнеры");
	ДобавитьСвойстваВидаОбъекта(ТЗн, "Контрагенты",,СтрКонтрагенты,						"9450980f-fb59-47e3-bae2-aa3c58441b1a");

	ГТаблицыВидовОбъектов = СтррТаблицы;
	
КонецПроцедуры

// Фунция возвращает вид объекта в УТ 11 в соответствии с идентификатором вида объекта в МТ.
//
// Параметры:
//	ИдентификаторВида - УникальныйИдентификатор - (GUID) идентификатор вида документа в МТ.
//	Для1С		  	- Булево - Указывается для какой системы необходимо определить вид объекта, если значение Ложь то будет возвращен вид объекта для МТ.
//	КорневойВид   	- Строка - К какому типу метаданных принадлежит идентификатор вида объекта в МТ, "Справочник" или "Документ".
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений 	
// 
Функция ВидОбъектаПоИдентификатору(ИдентификаторВида, Для1С = Истина, КорневойВид = "Справочник") Экспорт
	
	СвойстваВида = СвойстваВидаОбъекта(ИдентификаторВида, "ИдентификаторВида", КорневойВид);
	Если СвойстваВида <> Неопределено Тогда
		СвойстваВида = ?(Для1С, СвойстваВида.Вид, СвойстваВида.ВидДляМТ);
	КонецЕсли;
	
	Возврат СвойстваВида;
	
КонецФункции

// Функция вовзращает представдение вида Документа или Справочника для указания в комментарии в файле выгрузки
//
// Параметры:
//	КорневойВид - Строка - значения "Документ" или "Справочник".
//	СвойстваВида - СтрокаТаблицыЗначений - строка ТЗ объекта гТаблицыВидовОбъектов.Документ или гТаблицыВидовОбъектов.Справочник.
//
Функция ПредставлениеВида(КорневойВид, СвойстваВида)
	
	Результат = КорневойВид + "." + СвойстваВида.ВидДляМТ;
	Если СвойстваВида.ВидДляМТ <> СвойстваВида.Вид Тогда
		Результат = Результат + " (" + СвойстваВида.Вид + ")";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает строку ТЗ гТаблицыВидовОбъектов.Документ или гТаблицыВидовОбъектов.Справочник, 
// найдя ее по заданным значению и имени колонки.
//
// Параметры:
//	Значение - Строка, УникальныйИдентификатор - искомое значение.
//	Имя - Строка - название свойства (колонки) таблицы для поиска значения.
//	КорневойВид - Строка - значения Неопределено, или "Документ", или "Справочник". 
//						   Если указано Неопределено, то в параметре возвращается строка "Документ" или "Справочник".
//	
Функция СвойстваВидаОбъекта(Значение, Имя, КорневойВид = Неопределено)
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Если КорневойВид = Неопределено Тогда // Значит в параметре Значение передана строка вида "Документ.X" или "Справочник.X"
		//@skip-check use-non-recommended-method
		Поз = Найти(Значение, ".");
		Если Поз <> 0 Тогда
			КорневойВид 	= Лев(Значение, Поз-1);
			ИскатьЗначение 	= Сред(Значение, Поз+1);
		КонецЕсли;
	Иначе 							// Значит в параметре КорневойВид передана строка "Документ" или "Справочник",
		ИскатьЗначение = Значение; 	// а в параметре Значение - название вида документа или справочника.
	КонецЕсли;
		
	Если КорневойВид <> "Справочник" И КорневойВид <> "Документ" Тогда
		ВызватьИсключение("Процедура СвойстваВидаОбъекта() - неверный параметр Значение = " + Значение + " - "
			+ Символы.ПС + "Значение должно начинаться с ""Документ."" или ""Справочник.""!");
	КонецЕсли;
	
	Если Имя = "ИдентификаторВида" Тогда
		ИскатьЗначение = ?(ТипЗнч(Значение) = Тип("Строка"), Новый УникальныйИдентификатор(Значение), Значение);
	КонецЕсли;
	
	СтрокаТ = ГТаблицыВидовОбъектов[КорневойВид].Найти(ИскатьЗначение, Имя); // результат может быть равен Неопределено
	
	Возврат СтрокаТ;	
	
КонецФункции

// Процедура добавляет свойства в таблицу соответствия видов документов и справочников между МТ и УТ.
//
// Параметры:
//	ТЗн 				- ТаблицаЗначений 	- таблица соответствий для документов или справочников.
//	ВидДляМТ			- Строка			- вид справочника/документа в МТ. Важно правильно соблюдать регистр в названии!
//	ПредставлениеДляМТ  - Строка			- представление справочника/документа в МТ.
//	Вид					- Строка			- вид справочника/документа в УТ. Возможные значения:
//												~ ""  - вид справочника/документа в УТ такой же, как и в МТ;
//												~ "*" - аналогичный справочник/документ в УТ отсутствует (значение преобразуется в строку вида: "*" + ВидДляМТ);
//												~ "_" - аналогичный справочник/документ в УТ отсутствует, но виртуализируется средствами модуля (значение преобразуется в строку вида: "_" + ВидДляМТ);
//												~ другие значения - вид справочника/документа в УТ.
//	ИдентификаторВида   - Строка			- уникальный идентификатор справочника/документа в МТ.
//	ИнтерактивноОчищать	- Булево			- признак интерактивного выбора флага "Очищать перед загрузкой". 
//
Процедура ДобавитьСвойстваВидаОбъекта(ТЗн, ВидДляМТ, ПредставлениеДляМТ = "", Вид = "", ИдентификаторВида, ИнтерактивноОчищать = Истина)
	
	СтрокаТ = ТЗн.Добавить();
	СтрокаТ.ВидДляМТ 	  = ВидДляМТ;
	СтрокаТ.Представление = ?(ПредставлениеДляМТ = "", ВидДляМТ, ПредставлениеДляМТ);
	Если Вид = "" Тогда
		СтрокаТ.Вид = ВидДляМТ;
	ИначеЕсли Вид = "*" Или Вид = "_" Тогда
		СтрокаТ.Вид = Вид + ВидДляМТ;
	Иначе
		СтрокаТ.Вид = Вид;
	КонецЕсли;
	СтрокаТ.ИдентификаторВида 	= Новый УникальныйИдентификатор(ИдентификаторВида);
	СтрокаТ.ИнтерактивноОчищать = ИнтерактивноОчищать;
	
КонецПроцедуры

Функция ПолучитьВсеВидыОбъектовДляМУ(КорневойВид, ИнтерактивноОчищать = Неопределено) Экспорт
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Список = Новый СписокЗначений;	
	ТЗн = ГТаблицыВидовОбъектов[КорневойВид];
	Для Каждого СтрокаТ Из ТЗн Цикл
		Если ИнтерактивноОчищать = Неопределено Или ИнтерактивноОчищать = СтрокаТ.ИнтерактивноОчищать Тогда
			Список.Добавить(СтрокаТ.ВидДляМТ, СтрокаТ.Представление);
		КонецЕсли; 
	КонецЦикла;

	Возврат Список;
	
КонецФункции

Функция ПолучитьВсеВидыОбъектовДля1C(КорневойВид, Режим = Неопределено) Экспорт
	
	ПопыткаСоздатьТаблицыВидовОбъектов();
	
	Список = Новый СписокЗначений;	
	ТЗн = ГТаблицыВидовОбъектов[КорневойВид];
	Если Режим = Неопределено Тогда
		Для Каждого СтрокаТ Из ТЗн Цикл		
			Если Лев(СтрокаТ.Вид, 1) <> "_" Тогда
				Список.Добавить(СтрокаТ.Вид, СтрокаТ.Представление);
			КонецЕсли;
		КонецЦикла;	
		
	ИначеЕсли Режим = "СоздаваемыеВМУ" И КорневойВид = "Документ" Тогда
		Для Каждого СтрокаТ Из ТЗн Цикл		
			Если Лев(СтрокаТ.Вид, 1) <> "_" Или СтрокаТ.Вид = "_Мерчендайзинг" Или СтрокаТ.Вид = "_Посещение" Тогда
				Список.Добавить(СтрокаТ.Вид, СтрокаТ.Представление);
			КонецЕсли;
		КонецЦикла;	
		
	Иначе
		Текст = СтрШаблон_("ПолучитьВсеВидыОбъектовДля1C(): недопустимая комбинация параметров КорневойВид = ""%1"", Режим = ""%2"".", КорневойВид, Режим);
		ВызватьИсключение(Текст);
		
	КонецЕсли; 
	
	Если Метаданные.Документы.Найти("СчетФактураВыданный") = Неопределено Тогда
		//Удалить Счет-фактура для украинской УТ
		ЭлементСчетФактура = Список.НайтиПоЗначению("СчетФактураВыданный");
		Если ЭлементСчетФактура <> Неопределено Тогда
			Список.Удалить(ЭлементСчетФактура);	
		Конецесли;
	КонецЕсли;

	Возврат Список;
	
КонецФункции

// Возвращает название вида документа конфигурации, отвечающего за поступление товаров.
// Возвращаемое значение:
//   Строка 	
Функция ВидДокументаПоступлениеТоваровУслуг() Экспорт

	Если ГВидДокументаПоступлениеТоваровУслуг = Неопределено Тогда
		Если Метаданные.Документы.Найти("ПоступлениеТоваровУслуг") <> Неопределено Тогда
		    ГВидДокументаПоступлениеТоваровУслуг = "ПоступлениеТоваровУслуг";
		ИначеЕсли Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") <> Неопределено Тогда
			ГВидДокументаПоступлениеТоваровУслуг = "ПриобретениеТоваровУслуг";
		Иначе
			Текст = СтрШаблон_("Для текущей конфигурации ""%1"" не удалось определить вид документа ""ПоступлениеТоваровУслуг"".", Метаданные.Синоним);
			ВызватьИсключение(Текст);
		КонецЕсли; 
	КонецЕсли; 

	Возврат ГВидДокументаПоступлениеТоваровУслуг;

КонецФункции 

// Функция определяет какой справочник в 1С ассоциировать со справочником "Договоры" в МТ - "СоглашенияСКлиентами" или "ДоговорыКонтрагентов".
Функция ВидСправочника1СДляВыгрузкиДоговоров()

	Если ИспользоватьДоговорыИлиСоглашения = Неопределено Тогда
		ИспользоватьДоговорыИлиСоглашения = ПрочитатьЗначениеНастройки("ИспользоватьДоговорыИлиСоглашения");
	КонецЕсли; 
	
	Если ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" Тогда
		Возврат "ДоговорыКонтрагентов";
	Иначе
		Возврат "СоглашенияСКлиентами"; // даже если значение ИспользоватьДоговорыИлиСоглашения пустое, считаем ассоциирование с "СоглашенияСКлиентами"
	КонецЕсли; 

КонецФункции

// ИдентификаторыВидовСправочниковИДокументов
#КонецОбласти

#Область СоответствияКонстант_МТ_УД

Функция КонстантыМТПолучитьСоответствие()

	СтвРезультат = Новый Соответствие; // GUID считываемых констант и их названия
	СтвРезультат.Вставить("79c698db-3c55-465e-acfe-4741acdd5655", "АгентЗагрузки");
	СтвРезультат.Вставить("cf41ba05-a4ee-4492-9a2c-c96394c4864a", "КодЗапроса");
	СтвРезультат.Вставить("a369d2ca-9192-4ca3-9ffb-14f5a0a4cead", "ИдентификаторДопОтчетаДляОбновления");
						   
	Возврат СтвРезультат;
КонецФункции 

Функция КонстантыМТПолучитьGUID(ИмяКонстанты)

	СтвКонстанты = КонстантыМТПолучитьСоответствие();
	Элемент = НайтиПоЗначению(СтвКонстанты, "АгентЗагрузки");
	Если Элемент = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Элемент.Ключ;
	КонецЕсли; 

КонецФункции 

// СоответствияКонстант_МТ_УД
#КонецОбласти

#Область ВиртуальныеОбъекты
// Виртуальные объекты (ВО)  - это виртуальные документы и виртуалные справочники.

#Область ВиртуальныеОбъекты_Надстройка
// Функции в области - надстройка над виртуальными документами и виртуальными справочниками - класс-обертка.
// Любая функция/процедура модуля применима и к виртуальному документу и к виртуальному справочнику.

#Область ВиртуальныеОбъекты_Надстройка_Форма

// Процедура дополняет контекст формы виртуального объекта (формы списка и формы элемента - справочника, документа).
// Параметры:
// 		СтррКонтекст - Структура - структура СтррКонтекст - реквизит формы.
// 		ВидОбъекта - Строка - вид виртуального объекта.
// 		ДляФормыСписка - Булево - контекст для формы списка (Истина) или для формы элемента (Ложь).
//
Процедура ВОКонтекстФормыДополнить(СтррКонтекст, ВидОбъекта, ДляФормыСписка) Экспорт
	
	СтррВО = ВОСвойстваОбъекта(ВидОбъекта);
	
	СтррКонтекст.Вставить("ВО", СтррВО); 							// ссылка на системные свойства виртуального объекта
	СтррКонтекст.Вставить("КодыИконок", ВОТЗИконкиСтатуса(СтррВО));
	СтррКонтекст.Вставить("ЭтоФормаСписка", ДляФормыСписка);
	
	СтррКонтекст.Вставить("СпрТоргТочки"); 							// KT2000_Alcohol_Trade признаки для получения свойств конфигурации и торговых точек	
	
	Если СтррВО.КорневойВид = "Документ" Тогда
		ВДокКонтекстФормыДополнить(СтррКонтекст);
	ИначеЕсли СтррВО.КорневойВид = "Справочник" Тогда
		ВСпрКонтекстФормыДополнить(СтррКонтекст);
	Иначе
		ВызватьИсключение("Процедура ВОКонтекстФормыДополнить() - неизвестное значение свойства КорневойВид = " + СтррВО.КорневойВид);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при создании формы элемента виртуального объекта.
// Должна вызываться после вызова ПрочестьОбъектИзХранилища() и ВОКонтекстФормыДополнить().
// Параметры:
//   Модуль - Неопределено - модуль (форма) отображения виртуального объекта. 
Процедура ВОПриСозданииФормыЭлемента(Модуль) Экспорт
	
	Параметры    = Модуль.Параметры;
	СтррКонтекст = Модуль.СтррКонтекст;
	
	Если Параметры.Свойство("Статус") Тогда
		Модуль.Статус = Параметры.Статус;
	ИначеЕсли Параметры.Свойство("Проведен") И Параметры.Свойство("ПометкаУдаления") Тогда
		Если Параметры.Проведен Тогда
			Модуль.Статус = СтррКонтекст.КодыИконок.Проведен;
		ИначеЕсли Параметры.ПометкаУдаления Тогда
			Модуль.Статус = СтррКонтекст.КодыИконок.Помечен;
		Иначе
			Модуль.Статус = СтррКонтекст.КодыИконок.Записан;
		КонецЕсли; 
	Иначе // нужно прочитать статус элемента из ТЗ элементов
		СтрокаТ = ВОТЗПолучитьСтроку(СтррКонтекст.ВО, Модуль.ID);
		Модуль.Статус = ?(СтрокаТ <> Неопределено, СтрокаТ.Статус, СтррКонтекст.КодыИконок.Записан);
	КонецЕсли; 
	
	Если Параметры.Свойство("Копирование") И Параметры.Копирование Тогда // форма открыта для копирования существующего документа, очищаем его идентификатор
		Модуль.ID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		Структура = Новый Структура("Комментарий", NULL);
		ЗаполнитьЗначенияСвойств(Структура, Модуль);
		Если Структура.Комментарий <> NULL Тогда
			ДобавитьВСтрокуНомерКопии(Модуль.Комментарий);	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при создании формы элемента виртуального объекта.
// Должна вызываться после ПрочестьОбъектИзХранилища() и ВОКонтекстФормыДополнить().
// Параметры:
//   Модуль - Неопределено - модуль (форма) отображения виртуального объекта. 
Процедура ВОПриСозданииФормыСписка(Модуль) Экспорт
	
	Параметры    = Модуль.Параметры;
	СтррКонтекст = Модуль.СтррКонтекст;
	
	СтррКонтекст.Вставить("ДляВыбора", Параметры.Свойство("ДляВыбора") И (Параметры.ДляВыбора = Истина));
	
	Если СтррКонтекст.ДляВыбора Тогда
		Модуль.Элементы.ТПЭлементы.РежимВыбора 		  = Истина;
		Модуль.Элементы.ТПЭлементы.МножественныйВыбор = Истина;
		Модуль.Элементы.ТПЭлементы.ТолькоПросмотр 	  = Истина;
		Модуль.ЭтаФорма.РежимОткрытияОкна 			  = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;	
		СтррКонтекст.Вставить("ID", Параметры.ID);
	КонецЕсли; 

КонецПроцедуры

// ВиртуальныеОбъекты_Надстройка_Форма
#КонецОбласти

#Область ВиртуальныеОбъекты_Надстройка_СистемныеСвойства

// Функция вовзвращает структуру с системными свойствами для всех виртуальных объектов.
// Возвращаемое значение:
//   Структура:
//   * _РезультатыПосещений - Неопределено - пока нет описания
//   * _ШаблоныАнкет   - Неопределено - пока нет описания
//   * _Мерчендайзинг  - Неопределено - пока нет описания
//   * _Посещение  - Неопределено - пока нет описания
Функция ВОПолучитьВсеСвойства() Экспорт

	//@skip-check structure-consructor-too-many-keys
	СтррРезультат = Новый Структура("_РезультатыПосещений,_ШаблоныАнкет,_Мерчендайзинг,_Посещение");
	Для каждого Элемент Из СтррРезультат Цикл
		СтррРезультат[Элемент.Ключ] = ВОСвойстваОбъекта(Элемент.Ключ);
	КонецЦикла; 
	
	//@skip-check constructor-function-return-section
	Возврат СтррРезультат;
	
КонецФункции

// Функция возвращает системные свойства виртуального объекта (документа, справочника).
// Для ускорения - результат кэшируется.
// Параметры: 
// 	 ВидОбъекта - Строка - вид виртуального объекта (документа или справочника).
// 	 
// Возвращаемое значение:
//   Структура  - системные свойства виртуального объекта.
// 	 
Функция ВОСвойстваОбъекта(ВидОбъекта)

	Если ГВОКэшСвойств = Неопределено Тогда // кэш сисиемных свойств виртуальных объектов
		ГВОКэшСвойств = Новый Соответствие;
	КонецЕсли;
	
	СтррРезультат = ГВОКэшСвойств.Получить(ВидОбъекта);
	Если СтррРезультат <> Неопределено Тогда
		Возврат СтррРезультат;
	КонецЕсли; 
	
	//@skip-check structure-consructor-too-many-keys
	СтррРезультат = Новый Структура("ВидОбъекта,КорневойВид,РеквизитОбработки,Префикс,МаксКоличество,ФормаЭлемента");

	Если ВидОбъекта = "_Фотографии" Тогда
		СтррРезультат.Вставить("СтррОбъекта");
		СтррРезультат.Вставить("СтррСписка");
	КонецЕсли;
		
	СтррРезультат.ВидОбъекта = ВидОбъекта;
	
	// виртуальные справочники
	Если ВидОбъекта = "_РезультатыПосещений" Тогда
		СтррРезультат.КорневойВид 		= "Справочник";
		СтррРезультат.РеквизитОбработки = "СправочникРезультатыПосещений";
		СтррРезультат.Префикс			= "СпрРезП"; // префикс для сохранения элементов справочника в процедурах СД... 
		СтррРезультат.ФормаЭлемента		= "ЭлементСправочникаРезультатыПосещений";
		
	ИначеЕсли ВидОбъекта = "_Фотографии" Тогда		
		СтррРезультат.КорневойВид 		= "Справочник";
		СтррРезультат.РеквизитОбработки = "СправочникФотографии";
		СтррРезультат.Префикс			= "СпрФото"; // префикс для сохранения элементов справочника в процедурах СД... 
		СтррРезультат.ФормаЭлемента		= "ПрикрепленнаяФотография";
		//@skip-check structure-consructor-too-many-keys
		СтррРезультат.СтррОбъекта = Новый Структура ("Статус,Наименование,ВладелецФайла,ДатаМодификацииУниверсальная,ДатаСоздания,ИмяФайла,Размер,Расширение,Описание,ХранимыйФайл");
	
	ИначеЕсли ВидОбъекта = "_ВидыЗадач" Тогда		
		СтррРезультат.КорневойВид 		= "Справочник";
		СтррРезультат.РеквизитОбработки = "СправочникВидыЗадач";
		СтррРезультат.Префикс			= "СпрЗдч"; // префикс для сохранения элементов справочника в процедурах СД... 
		СтррРезультат.ФормаЭлемента		= "ЭлементСправочникаВидыЗадач";
	
	ИначеЕсли ВидОбъекта = "_КомандыДляМУ" Тогда		
		СтррРезультат.КорневойВид 		= "Справочник";
		СтррРезультат.РеквизитОбработки = "СправочникКомандыДляМУ";
		СтррРезультат.Префикс			= "СпрКДМУ"; // префикс для сохранения элементов справочника в процедурах СД... 
		СтррРезультат.ФормаЭлемента		= "ЭлементСправочникаКомандыДляМУ";
	
	ИначеЕсли ВидОбъекта = "_ДополнительныеОтчетыДляМУ" Тогда		
		СтррРезультат.КорневойВид 		= "Справочник";
		СтррРезультат.РеквизитОбработки = "СправочникДополнительныеОтчетыДляМУ";
		СтррРезультат.Префикс			= "СпрДОДМУ"; // префикс для сохранения элементов справочника в процедурах СД... 
		СтррРезультат.ФормаЭлемента		= "ЭлементСправочникаДополнительныеОтчетыДляМУ";
	
	ИначеЕсли ВидОбъекта = "_ШаблоныАнкет" Тогда		
		СтррРезультат.КорневойВид 		= "Справочник";
		СтррРезультат.РеквизитОбработки = "СправочникШаблоныАнкет";
		СтррРезультат.Префикс			= "СпрШблА"; // префикс для сохранения элементов справочника в процедурах СД... 
		СтррРезультат.ФормаЭлемента		= "ЭлементСправочникаШаблоныАнкет";
		
		// виртуальные документы
	ИначеЕсли ВидОбъекта = "_Мерчендайзинг" Тогда
		СтррРезультат.КорневойВид 		= "Документ";
		СтррРезультат.РеквизитОбработки = "ДокументыМерчендайзинга";
		СтррРезультат.Префикс			= "ДокМерч";
		СтррРезультат.ФормаЭлемента		= "ДокументМерчендайзинг";
		// максимально допустимое количество документов в ТЗ списка документов:
		СтррРезультат.МаксКоличество	= ПрочитатьЗначениеНастройкиПоУмолчанию("МаксКоличествоВиртуальныхДокументов", 1000); 
		
	ИначеЕсли ВидОбъекта = "_Посещение" Тогда
		СтррРезультат.КорневойВид 		= "Документ";		
		СтррРезультат.РеквизитОбработки = "ДокументыПосещений";
		СтррРезультат.Префикс			= "ДокПсщ";
		СтррРезультат.ФормаЭлемента		= "ДокументПосещение";
		// максимально допустимое количество документов в ТЗ списка документов:
		СтррРезультат.МаксКоличество	= ПрочитатьЗначениеНастройкиПоУмолчанию("МаксКоличествоВиртуальныхДокументов", 1000); 
			
	ИначеЕсли ВидОбъекта = "_Задание" Тогда
		СтррРезультат.КорневойВид 		= "Документ";		
		СтррРезультат.РеквизитОбработки = "ДокументыЗаданий";
		СтррРезультат.Префикс			= "ДокЗдн";
		СтррРезультат.ФормаЭлемента		= "ДокументЗадание";
		// максимально допустимое количество документов в ТЗ списка документов:
		СтррРезультат.МаксКоличество	= ПрочитатьЗначениеНастройкиПоУмолчанию("МаксКоличествоВиртуальныхДокументов", 1000); 			
		
	Иначе
		ВызватьИсключение("Функция ВОСвойстваОбъекта(): неизвестное значение параметра ВидОбъекта - " + ВидОбъекта);
	КонецЕсли; 
	
	ГВОКэшСвойств.Вставить(ВидОбъекта, СтррРезультат);
	
	Возврат СтррРезультат;

КонецФункции 

// ВиртуальныеОбъекты_Надстройка_СистемныеСвойства
#КонецОбласти

#Область ВиртуальныеОбъекты_Надстройка_ТЗ_Списка_Объектов

// Функция загружает таблицу значений виртуальных объектов из хранилища (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 Параметр - Строка, Структура - вид объекта (строка) или его системные свойства (Струкутра).
// 	 ИспользоватьКэш - Булево - использовать кэш для прочитанных ранее результатов вызова функции.
// 	 
// Возвращаемое значение:
//   Произвольный - Неопределено или ТаблицаЗначений - таблица виртуальных объектов.
//
Функция ВОТЗЗагрузить(Параметр, ИспользоватьКэш = Ложь) Экспорт
	
	СтррВО = ?(ТипЗнч(Параметр) = Тип("Структура"), Параметр, ВОСвойстваОбъекта(Параметр)); // системные свойства виртуального объекта
	
	ТЗн = Неопределено;     
	
	Если ИспользоватьКэш Тогда
		Если СтррВО.КорневойВид = "Документ" Тогда
			Если ГВДокКэшТЗЖурналов = Неопределено Тогда
				ГВДокКэшТЗЖурналов = Новый Соответствие;
			КонецЕсли; 
			СтвКэш = ГВДокКэшТЗЖурналов;
		ИначеЕсли СтррВО.КорневойВид = "Справочник" Тогда
			Если ГВСпрКэшТЗСправочника = Неопределено Тогда
				ГВСпрКэшТЗСправочника = Новый Соответствие;
			КонецЕсли; 
			СтвКэш = ГВСпрКэшТЗСправочника;
		Иначе
			ВызватьИсключение("Функция ВОТЗЗагрузить() - неизвестное значение свойства КорневойВид = " + СтррВО.КорневойВид);
		КонецЕсли;
		ТЗн = СтвКэш.Получить(СтррВО.ВидОбъекта);
	КонецЕсли; 
	
	Если ТЗн = Неопределено Тогда
		ТЗн = ПрочитатьЗначениеНастройки(СтррВО.РеквизитОбработки);
		Если ТипЗнч(ТЗн) <> Тип("ТаблицаЗначений") Тогда
			ТЗн = ВОТЗСоздать(СтррВО);
			ВОТЗСохранить(СтррВО, ТЗн);
		КонецЕсли;
		Если ИспользоватьКэш Тогда
			СтвКэш.Вставить(СтррВО.ВидОбъекта, ТЗн);	
		КонецЕсли; 
	КонецЕсли; 
	
	ВОТЗСократить(СтррВО, ТЗн);
	
	Возврат ТЗн;
	
КонецФункции

// Функция создает пустую таблицу значений виртуальных объектов (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 СтррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - созданная таблица виртуальных объектов (объектов одного вида).
//
Функция ВОТЗСоздать(СтррВО)
	
	Если СтррВО.КорневойВид = "Документ" Тогда
		Возврат ВДокТЗСоздать(СтррВО.ВидОбъекта);
	ИначеЕсли СтррВО.КорневойВид = "Справочник" Тогда
		Возврат ВСпрТЗСоздать(СтррВО.ВидОбъекта);
	Иначе
		ВызватьИсключение("Функция ВОСоздатьТЗ() - неизвестное значение свойства КорневойВид = " + СтррВО.КорневойВид);
	КонецЕсли;

КонецФункции

// Процедура сохраняет таблицу значений виртуальных объектов в хранилище.
// Параметры: 
// 	 Параметр - Строка, Структура - вид объекта (строка) или его системные свойства (Струкутра).
// 	 ТЗн - ТаблицаЗначений - таблица виртуальных объектов (объектов одного вида).
//
Процедура ВОТЗСохранить(Параметр, ТЗн) Экспорт
	
	РеквизитОбработки = ?(ТипЗнч(Параметр) = Тип("Структура"), Параметр.РеквизитОбработки, ВОСвойстваОбъекта(Параметр).РеквизитОбработки);
	СохранитьЗначениеНастройки(РеквизитОбработки, ТЗн);
	
КонецПроцедуры

// Процедура удаляет из хранилища лишние (устаревшие) элементы. 
// Параметры: 
// 	 СтррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 ТЗн 	- ТаблицаЗначений - таблица элементов.
//
Процедура ВОТЗСократить(СтррВО, ТЗн)
	
	Если Не ЗначениеЗаполнено(СтррВО.МаксКоличество) Тогда 
		Возврат;
	ИначеЕсли ТЗн.Количество() <= СтррВО.МаксКоличество Тогда 
		Возврат;
	КонецЕсли; 
	
	// нужно удалить устаревшие элементы
	Если СтррВО.КорневойВид = "Документ" Тогда
		ВДокТЗСократить(СтррВО, ТЗн);
	Иначе // для справочников пока не предусмотрено удаление устаревших элементов
	КонецЕсли; 

КонецПроцедуры

// Функция находит строку в таблице элементов по идентификатору. 
// Параметры: 
// 	 СтррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 GUID 	- УникальныйИдентификатор - идентификатор объекта.
// Возвращаемое значение: 
//   СтрокаТаблицыЗначений  - найденная по идентификатору строка таблицы значений.
// 
Функция ВОТЗПолучитьСтроку(СтррВО, GUID)
	
	ТЗн = ВОТЗЗагрузить(СтррВО, Истина);
	Возврат ТЗн.Найти(GUID, "ID");
	
КонецФункции

// Функция возращает значение реквизита виртуального объекта с заданным идентификатором GUID. 
// Параметры: 
// 	 ВидОбъекта - Строка - название вида объекта.
// 	 GUID - УникальныйИдентификатор - идентификатор объекта.
//   ИмяРеквизита - Строка - название реквизита (колонки таблицы значений)
// Возвращаемое значение: 
//   Произвольный - значение реквизита (колонки таблицы значений) если объект найден или Неопределено, если объект не найден.
// 
Функция ВОТЗПолучитьЗначениеРеквизита(ВидОбъекта, GUID, ИмяРеквизита)
	
	ТЗн = ВОТЗЗагрузить(ВидОбъекта, Истина);
	СтрокаТ = ТЗн.Найти(GUID, "ID");
	Если СтрокаТ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтрокаТ[ИмяРеквизита];
	КонецЕсли; 
	
КонецФункции

// Функция возвращает коды иконок статуса элемента (виртуального объекта) для отображения на форме списка в первой колонке.
// Параметры: 
// 	 СтррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 
// Возвращаемое значение:
//   Число  - код иконки статуса элемента.
// 	 
Функция ВОТЗИконкиСтатуса(СтррВО)

	Если СтррВО.КорневойВид = "Справочник" Тогда
		СтррРезультат = Новый Структура("Записан,Помечен", 3, 4);
	ИначеЕсли СтррВО.КорневойВид = "Документ" Тогда
		СтррРезультат = Новый Структура("Записан,Проведен,Помечен", 0, 1, 2);	
	Иначе
		ВызватьИсключение("Функция ВОИконкиСтатуса() - неизсвестное значение свойства КорневойВид = " + СтррВО.КорневойВид);
	КонецЕсли; 
	
	Возврат СтррРезультат;

КонецФункции 

// ВиртуальныеОбъекты_Надстройка_ТЗ_Списка_Объектов
#КонецОбласти 

#Область ВиртуальныеОбъекты_Надстройка_Элементы
// Элементы виртуальных объектов (для справочников - элементы справочника, для документов - документы)

// Сохранение виртуального объекта в хранилище значений (и самого объекта и обновление таблицы виртуальных объектов данного вида). 
// Параметры: 
// 	 СтррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 GUID 	- УникальныйИдентификатор - идентификатор объекта.
// 	 СтррОбъект - Структура - сохраняемый виртуальный объект.
//
Процедура ВОЭлементСохранить(СтррВО, GUID, СтррОбъект) Экспорт

	// Этап 1. Сохранение самого элемента в хранилище.	
	СохранитьОбъектВХранилище(СтррВО.Префикс, GUID, СтррОбъект);
	
	// Этап 2. Обновление в хранилище ТЗ списка элементов
	ТЗн = ВОТЗЗагрузить(СтррВО, Истина);
	
	СтрокаТ = ТЗн.Найти(GUID, "ID");
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = ТЗн.Добавить();
		СтрокаТ.ID = GUID;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТ, СтррОбъект);
	
	ВОТЗСохранить(СтррВО, ТЗн);

КонецПроцедуры

// Функция загружает виртуальный объект из хранилища.
// Параметры: 
// 	 СтррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 GUID 	- УникальныйИдентификатор - идентификатор объекта.
// 	 
// Возвращаемое значение:
//   Произвольный - Структура или Неопределено  - виртуальный объект.
//
Функция ВОЭлементЗагрузить(СтррВО, GUID) Экспорт
	
	Возврат ПолучитьОбъектИзХранилища(СтррВО.Префикс, GUID);
	
КонецФункции 	

// Процедура удаляет виртуальные объекты из хранилища. Удаляются сами элементы 
// и обновляется таблица значений, ссылающиеся на элементы.
// Параметры: 
// 	 СтррВО 		 - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 МИдентификаторы - Массив Из Строка - массив значений типа УникальныйИдентификатор - идентификаторы удаляемых объектов.
// 	 ВключаяТЗ  	 - Булево    - удалять данные в т.ч. и в таблице значений.
//
Процедура ВОЭлементыУдалить(СтррВО, МИдентификаторы, ВключаяТЗ = Истина) Экспорт
	
	УдалитьОбъектыИзХранилища(СтррВО.Префикс, МИдентификаторы);
	
	Если ВключаяТЗ Тогда // нужно удалить записи из ТЗ списка элементов
		
		ТЗн = ВОТЗЗагрузить(СтррВО);
		Если ТипЗнч(ТЗн) <> Тип("ТаблицаЗначений") Тогда
			Возврат;
		КонецЕсли; 
		
		Для каждого ИдОбъекта Из МИдентификаторы Цикл
			СтрокаТ = ТЗн.Найти(ИдОбъекта, "ID");
			Если СтрокаТ <> Неопределено Тогда
				ТЗн.Удалить(СтрокаТ);
			КонецЕсли;
		КонецЦикла; 
		
		ВОТЗСохранить(СтррВО, ТЗн); // записываем измененную таблицу
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура помечает на удаление виртуальные объекты в хранилище. 
// Параметры: 
// 	 СтррВО 		 - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 МИдентификаторы - Массив Из Строка - массив значений типа УникальныйИдентификатор - идентификаторы помечаемых на удаление объектов.
//
Процедура ВОЭлементыПометитьНаУдаление(СтррВО, МИдентификаторы) Экспорт
	
	ТЗн = ВОТЗЗагрузить(СтррВО);
	Если ТипЗнч(ТЗн) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли; 
	
	СтррИконки = ВОТЗИконкиСтатуса(СтррВО);
	СтатусПомечен = СтррИконки.Помечен;
	СтатусЗаписан = СтррИконки.Записан;
	
	Для каждого ИдОбъекта Из МИдентификаторы Цикл
		СтрокаТ = ТЗн.Найти(ИдОбъекта, "ID");
		Если СтрокаТ <> Неопределено Тогда
			СтрокаТ.Статус = ?(СтрокаТ.Статус <> СтатусПомечен, СтатусПомечен, СтатусЗаписан);
		КонецЕсли;
	КонецЦикла; 
		
	// записываем измененную таблицу
	ВОТЗСохранить(СтррВО, ТЗн);
	
КонецПроцедуры

// ВиртуальныеОбъекты_Надстройка_Элементы
#КонецОбласти

// ВиртуальныеОбъекты_Надстройка
#КонецОбласти 

#Область ВиртуальныеОбъекты_Документы

// Функция возвращает представление виртуального документа в виде строки.
// Параметры:
//   ВидДокумента - Строка - название вида виртуального документа.
//   СтзЖурнала - СтрокаТаблицыЗначений - ссылка на строку таблицы значепний с данными доукмента.
// Возвращаемое значение:
//   Строка
Функция ВДокПредставление(ВидДокумента, СтзЖурнала) Экспорт
	
	Возврат СвойстваВидаОбъекта(ВидДокумента, "Вид", "Документ").Представление 
		+ ?(ЗначениеЗаполнено(СтзЖурнала.Номер), " " + СокрЛП(СтзЖурнала.Номер), "") + " от " + СтзЖурнала.Дата;
	
КонецФункции 

Функция ВДокЭтоВиртуальныйДокумент(ВидДокумента) Экспорт
	
	Возврат Лев(ВидДокумента, 1) = "_"; // названия вида виртуальных документов начинаются с "_"
		
КонецФункции

// Процедура дополняет контекст формы виртуального документа (формы списка и формы документа).
// Параметры:
// 		СтррКонтекст - Структура - структура СтррКонтекст - реквизит формы.
// 		ДляФормыСписка - Булево - контекст для формы списка (Истина) или для формы элемента (Ложь).
//
Процедура ВДокКонтекстФормыДополнить(СтррКонтекст)

	Если СтррКонтекст.ЭтоФормаСписка Тогда // процедура вызвана для формы списка документов
		//СтррКонтекст.Вставить("РедактироватьРеквизитыМТ", Истина); // признак разрешения редактирования координат		
		СтррКонтекст.Вставить("ДляВыбора", Ложь);
	Иначе // процедура вызвана для формы документа
		СтррКонтекст.Вставить("IDNew");
		СтррКонтекст.Вставить("ИспользоватьДоговоры", ВДокИспользоватьДоговоры(СтррКонтекст.ВО.ВидОбъекта));
	КонецЕсли; 
	
КонецПроцедуры

#Область ВиртуальныеОбъекты_Документы_Реквизиты

// Функция возвращает в виде строки список реквизтов шапки виртуального документа.
Функция ВДокРеквизитыШапки(ВидДокумента)

	Если ВидДокумента = "_Мерчендайзинг" Тогда
		Результат = "ID,Дата,Номер,Статус,Партнер,Контрагент,Организация,Менеджер,Комментарий,СуммаДокумента,ДокументОснование,ВремяНачала,ВремяОкончания,Широта,Долгота";
	ИначеЕсли ВидДокумента = "_Посещение" Тогда
		Результат = "ID,Дата,Номер,Статус,Партнер,Контрагент,Организация,Менеджер,Комментарий,РезультатПосещения,РезультатПосещения_Представление,ВремяНачала,ВремяОкончания,Широта,Долгота";
	ИначеЕсли ВидДокумента = "_Задание" Тогда
		Результат = "ID,Дата,Номер,Статус,Партнер,Контрагент,Организация,Менеджер,Комментарий,ВремяНачала,ВремяОкончания,Широта,Долгота,ДатаТочкиТрека,НеИзменятьВМУ,СозданВЦБД";
	Иначе
		ВызватьИсключение("Функция ВДокРеквизитыШапки(): неизвестное значение параметра ВидДокумента = """ + ВидДокумента + """!");
	КонецЕсли; 	
	
	Возврат Результат;

КонецФункции

// Функция возвращает массив реквизитов шапки виртуального документа.
// Параметры:
//  ВидДокумента - Строка
// Возвращаемое значение:
//  Массив Из Строка 	
Функция ВДокРеквизитыШапкиМассив(ВидДокумента) Экспорт
	
	Возврат СтрРазделить_(ВДокРеквизитыШапки(ВидДокумента));
	
КонецФункции

// Процедура добавляет в виртуальный документ табличную часть.
Процедура ВДокРеквизитыТЧДобавить(ВидДокумента, СтррДокумент)

	Если ВидДокумента = "_Мерчендайзинг" Тогда
		ТЗн = Новый ТаблицаЗначений;
		
		ОписаниеТипаКоличество  	= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3));
		ОписаниеТипаСумма 			= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
		ОписаниеТипаЧислоЦелое		= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 0));

		ТЗн.Колонки.Добавить("Номенклатура",			Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТЗн.Колонки.Добавить("Характеристика",		Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
		Если ПоколениеКонфигурации("<УТ_11.2") ИЛИ ГКонфигурация = "УТ_UA"  Тогда
			//@skip-check wrong-string-literal-content
			ТЗн.Колонки.Добавить("Упаковка",	Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
		Иначе
			ТЗн.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));	
		КонецЕсли;
		
		ТЗн.Колонки.Добавить("КоличествоУпаковок",	ОписаниеТипаКоличество);     
		ТЗн.Колонки.Добавить("Количество", 			ОписаниеТипаКоличество);
		ТЗн.Колонки.Добавить("Цена",					ОписаниеТипаСумма);
		ТЗн.Колонки.Добавить("Сумма",				ОписаниеТипаСумма);
		ТЗн.Колонки.Добавить("ДоляПолки",			ОписаниеТипаСумма); 	// доля занимаемой полки товара на витрине в процентах
		ТЗн.Колонки.Добавить("КоличествоФейсов",		ОписаниеТипаЧислоЦелое);// количество фейсов товара на витрине
		
		СтррДокумент.Вставить("Товары", ТЗн);
		
	ИначеЕсли ВидДокумента = "_Задание" Тогда
			
		ОписаниеТипаИдентификатор 	= Новый ОписаниеТипов("УникальныйИдентификатор");
		ОписаниеТипаСтрока			= Новый ОписаниеТипов("Строка");
		ОписаниеТипаБулево			= Новый ОписаниеТипов("Булево");
		
		ТЗн = Новый ТаблицаЗначений;
		ТЗн.Колонки.Добавить("GUID",						ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("ВидЗадачи",				ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("ВидЗадачиПредставление",	ОписаниеТипаСтрока);
		ТЗн.Колонки.Добавить("Комментарий",				ОписаниеТипаСтрока);
		ТЗн.Колонки.Добавить("Обязательная",				ОписаниеТипаБулево);
		ТЗн.Колонки.Добавить("Результат");               //Произвольный
		ТЗн.Колонки.Добавить("РезультатПредставление",	ОписаниеТипаСтрока);
		СтррДокумент.Вставить("Задачи", ТЗн);
		
		ТЗн = Новый ТаблицаЗначений;
		ТЗн.Колонки.Добавить("GUID",						ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("ИдЗадачиДокумента",		ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("ФотоЗадачи",				ОписаниеТипаИдентификатор);
		СтррДокумент.Вставить("СписокФото", ТЗн);
		
	КонецЕсли; 

КонецПроцедуры

// Функция возвращает признак - используются в виртуальном документе договоры/соглашения или нет.
Функция ВДокИспользоватьДоговоры(ВидДокумента) 
	
	Если ВидДокумента = "_Мерчендайзинг" Тогда
		Возврат Истина;	
		
	ИначеЕсли ВидДокумента = "_Посещение" Тогда
		Возврат Ложь;
		
	ИначеЕсли ВидДокумента = "_Задание" Тогда
		Возврат Ложь;
		
	Иначе
		ВызватьИсключение("Функция ВДокИспользоватьДоговоры(): неизвеcтное значение параметра ВидДокумента - " + ВидДокумента);
		
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьНовыйНомерДокумента(СтррВО) Экспорт
	
	Если СтррВО.ВидОбъекта = "_Посещение" Тогда
		ИмяНастройки = "АвтонумераторДокументПосещение";
		
	ИначеЕсли СтррВО.ВидОбъекта = "_Мерчендайзинг" Тогда
		ИмяНастройки = "АвтонумераторДокументМерчендайзинг";
		
	ИначеЕсли СтррВО.ВидОбъекта = "_Задание" Тогда
		ИмяНастройки = "АвтонумераторДокументЗадание";
		
	Иначе
		Возврат Неопределено;		
	КонецЕсли;
	
	ТекущийНумератор = ПрочитатьЗначениеНастройки(ИмяНастройки);
	Если ТекущийНумератор = 99999999 Тогда
		Возврат ТекущийНумератор; //Ошибка
	КонецЕсли;
	
	ТЗДокументы = ВОТЗЗагрузить(СтррВО);
	
	Пока Истина Цикл
		ТекущийНумератор = ТекущийНумератор + 1;
		НовыйНомер = Формат(ТекущийНумератор,"ЧЦ=8; ЧВН=; ЧГ=0");
		Если ТЗДокументы.Найти(НовыйНомер, "Номер") = Неопределено Тогда
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	СохранитьЗначениеНастройки(ИмяНастройки, ТекущийНумератор);
	
	Возврат НовыйНомер;          						
КонецФункции

// ВиртуальныеОбъекты_Документы_Реквизиты
#КонецОбласти 

// Процедура удаляет из таблицы значений устаревшие документы. Обновленную таблицу записывает в хранилище. 
// Параметры: 
// 	 СтррВО - Структура - системные свойства виртуального объекта (результат вызова функции ВОСвойстваОбъекта()).
// 	 ТЗн 	- ТаблицаЗначений - таблица документов.
//
//@skip-check module-unused-method
Процедура ВДокТЗСократить(СтррВО, ТЗн)
	
	Если ЗначениеЗаполнено(СтррВО.МаксКоличество) И ТЗн.Количество() > СтррВО.МаксКоличество Тогда // нужно удалить устаревшие документы
		
		КоличествоУдаляемых = ТЗн.Количество() - СтррВО.МаксКоличество;
		МИдентификаторы = Новый Массив;
		Для Шаг = 1 По КоличествоУдаляемых Цикл
			CтрокаТ = ТЗн[0];
			Если Шаг = 1 Тогда
				ВремяНачала = CтрокаТ.Дата;
			ИначеЕсли Шаг = КоличествоУдаляемых Тогда
				ВремяОкончания = CтрокаТ.Дата;		
			КонецЕсли; 
			МИдентификаторы.Добавить(ТЗн[0].ID);
			ТЗн.Удалить(0);
		КонецЦикла;
		
		// записываем урезанную таблицу
		ВОТЗСохранить(СтррВО, ТЗн);

		// удаляем сами документы - по их идентификаторам
		ВОЭлементыУдалить(СтррВО, МИдентификаторы, Ложь);
		
		Если КоличествоУдаляемых = 1 Тогда
			Текст = СтрШаблон_(НСтр("ru = 'Удален один устаревший документ от %1 для оптимизации журнала документов.'"), ВремяНачала);
		Иначе			
			СтрУдалено = ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоУдаляемых, НСтр("ru = 'документ, документа, документов'"));
			Текст = СтрШаблон_(НСтр("ru = 'Удалено %1 (с %2 по %3) для оптимизации журнала документов.'"), СтрУдалено, ВремяНачала, ВремяОкончания);
		КонецЕсли; 
		
		Текст = Текст + " " + СтрШаблон_(НСтр("ru = 'Максимально допустимое количество документов в журнале: %1.'"), СтррВО.МаксКоличество);
		ОповеститьОСобытии(Текст)
		//Сообщить(Текст);
		
	КонецЕсли; 
	
КонецПроцедуры

// Функция создает пустую таблицу значений виртуальных объектов (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 ВидДокумента - Строка - вид виртуального документа.
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - созданная таблица виртуальных объектов (элементов виртуального документа).
//   
Функция ВДокТЗСоздать(ВидДокумента)

	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаДатаВремя     = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТипаСтрока  	  = Новый ОписаниеТипов("Строка");
	ОписаниеТипаБулево  	  = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтатус  	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0));
	ОписаниеТипаКоордината 	  = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20));
	ОписаниеТипаСумма 		  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2));
	ОписаниеТипаВсеДокументы  = Новый ОписаниеТипов(Документы.ТипВсеСсылки());
	
	ТЗн = Новый ТаблицаЗначений;
	ТЗн.Колонки.Добавить("ID",  	 		ОписаниеТипаИдентификатор); // идентификатор документа
	ТЗн.Колонки.Добавить("Дата",  	 		ОписаниеТипаДатаВремя);
	ТЗн.Колонки.Добавить("Номер",			ОписаниеТипаСтрока);
	ТЗн.Колонки.Добавить("Статус",			ОписаниеТипаСтатус);
	ТЗн.Колонки.Добавить("Комментарий",		ОписаниеТипаСтрока);
	
	Если ВидДокумента = "_Мерчендайзинг" Тогда
		ТЗн.Колонки.Добавить("СуммаДокумента",		ОписаниеТипаСумма);	
		ТЗн.Колонки.Добавить("ДокументОснование", 	ОписаниеТипаВсеДокументы);
		
	ИначеЕсли ВидДокумента = "_Посещение" Тогда
		ТЗн.Колонки.Добавить("РезультатПосещения",				ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("РезультатПосещения_Представление",	ОписаниеТипаСтрока);
		
	ИначеЕсли ВидДокумента = "_Задание" Тогда
		ТЗн.Колонки.Добавить("Категория",		ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("НеИзменятьВМУ",	ОписаниеТипаБулево);
		ТЗн.Колонки.Добавить("СозданВЦБД",		ОписаниеТипаБулево);
		ТЗн.Колонки.Добавить("Договор",			Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТЗн.Колонки.Добавить("Соглашение",		Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
		ТЗн.Колонки.Добавить("ДатаТочкиТрека",	ОписаниеТипаДатаВремя);		
		
	Иначе
		ВызватьИсключение("Функция ВДокСоздатьТЗЖурнала(ВидДокумента): неизвестное значение параметра: " + ВидДокумента);
	КонецЕсли; 
	
	ТЗн.Колонки.Добавить("ВремяНачала",		ОписаниеТипаДатаВремя);
	ТЗн.Колонки.Добавить("ВремяОкончания",	ОписаниеТипаДатаВремя);
	ТЗн.Колонки.Добавить("Широта",			ОписаниеТипаКоордината);
	ТЗн.Колонки.Добавить("Долгота",			ОписаниеТипаКоордината);
	
	ТЗн.Колонки.Добавить("Организация",		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТЗн.Колонки.Добавить("Партнер",			Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗн.Колонки.Добавить("Контрагент",		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗн.Колонки.Добавить("Менеджер",			Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Возврат ТЗн;

КонецФункции

// ВиртуальныеОбъекты_Документы
#КонецОбласти

#Область ВиртуальныеОбъекты_Справочники

// Процедура дополняет контекст формы виртуального сроавочника (формы списка и формы документа).
// Параметры:
// 		СтррКонтекст - Структура - структура СтррКонтекст - реквизит формы.
// 		ВидСправочника - Строка - вид виртуального справочника.
// 		ДляФормыСписка - Булево - контекст для формы списка (Истина) или для формы элемента (Ложь).
//
Процедура ВСпрКонтекстФормыДополнить(СтррКонтекст)

	Если СтррКонтекст.ЭтоФормаСписка Тогда 
		СтррКонтекст.Вставить("ДляВыбора", Ложь);
	Иначе // процедура вызвана для формы элемента
		СтррКонтекст.Вставить("IDNew");	
	КонецЕсли; 
	
КонецПроцедуры

// Функция создает пустую таблицу значений виртуальных объектов (аналог - список объектов, отображаемый в форме списка справочников или документов).
// Параметры: 
// 	 ВидСправочника - Строка - вид виртуального справочника.
// 	 
// Возвращаемое значение:
//   ТаблицаЗначений - созданная таблица виртуальных объектов (элементов виртуального справочника).
//
Функция ВСпрТЗСоздать(ВидСправочника)
	
	ОписаниеТипаИдентификатор 	= Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаСтатус  		= Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0));
	ОписаниеТипаСтрока  		= Новый ОписаниеТипов("Строка");
	ОписаниеТипаДата 			= Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТипаБулево			= Новый ОписаниеТипов("Булево");

	ТЗн = Новый ТаблицаЗначений;
	
	Если ВидСправочника = "_РезультатыПосещений" Тогда
		ТЗн.Колонки.Добавить("ID",  	 		ОписаниеТипаИдентификатор); // идентификатор элемента
		ТЗн.Колонки.Добавить("Статус",			ОписаниеТипаСтатус);		
		ТЗн.Колонки.Добавить("Наименование",  	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
		ТЗн.Колонки.Добавить("ШаблонАнкеты",	ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("ШаблонАнкеты_Представление",	ОписаниеТипаСтрока);
		ТЗн.Колонки.Добавить("Комментарий",		ОписаниеТипаСтрока);
		
	ИначеЕсли ВидСправочника = "_ШаблоныАнкет" Тогда		
		ТЗн.Колонки.Добавить("ID",  	 		ОписаниеТипаИдентификатор); // идентификатор элемента
		ТЗн.Колонки.Добавить("Статус",			ОписаниеТипаСтатус);		
		ТЗн.Колонки.Добавить("Наименование",  	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
		ТЗн.Колонки.Добавить("Комментарий",		ОписаниеТипаСтрока);
			
	ИначеЕсли ВидСправочника = "_ВидыЗадач" Тогда		
		ТЗн.Колонки.Добавить("ID",  	 				ОписаниеТипаИдентификатор); // идентификатор элемента
		ТЗн.Колонки.Добавить("Статус",					ОписаниеТипаСтатус);
		ТЗн.Колонки.Добавить("Наименование",  			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
		ТЗн.Колонки.Добавить("ТипЗадачи",        		ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("ТипЗадачиПредставление",  ОписаниеТипаСтрока);
		ТЗн.Колонки.Добавить("ВопросАнкеты",			ОписаниеТипаСтрока);
		ТЗн.Колонки.Добавить("Группа",     				ОписаниеТипаИдентификатор);
	
	ИначеЕсли ВидСправочника = "_КомандыДляМУ" Тогда		
		ТЗн.Колонки.Добавить("ID",  	 		 		ОписаниеТипаИдентификатор); 	// идентификатор элемента
		ТЗн.Колонки.Добавить("Статус",					ОписаниеТипаСтатус);
		ТЗн.Колонки.Добавить("Активна",					ОписаниеТипаБулево);
		ТЗн.Колонки.Добавить("Наименование",  			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
		ТЗн.Колонки.Добавить("ВидКоманды",        		ОписаниеТипаИдентификатор);
		ТЗн.Колонки.Добавить("ВидКомандыПредставление",	ОписаниеТипаСтрока);
		ТЗн.Колонки.Добавить("ПараметрКоманды",			ОписаниеТипаСтрока);
		ТЗн.Колонки.Добавить("ДляВсехАгентов",			ОписаниеТипаБулево);
		ТЗн.Колонки.Добавить("Агенты",					Новый ОписаниеТипов("СписокЗначений"));
		ТЗн.Колонки.Добавить("ВидыДокумент",			Неопределено); 					// Список значений типов документов (тип строка) ИЛИ тоже СЗ но тодбко с одно строкой (тип ссылка документа или Структура).
		ТЗн.Колонки.Добавить("ВариантУдаления",			Неопределено); 					// Число или Дата, Если Число - вариант удаления "созданные дней назад", если дата то "по дату"
	
	ИначеЕсли ВидСправочника = "_ДополнительныеОтчетыДляМУ" Тогда		
		ТЗн.Колонки.Добавить("ID",  	 		 			ОписаниеТипаИдентификатор); 	// идентификатор элемента
		ТЗн.Колонки.Добавить("IDМТ",  	 		 		ОписаниеТипаИдентификатор); 	// идентификатор элемента в мобильном приложении
		ТЗн.Колонки.Добавить("Статус",					ОписаниеТипаСтатус);
		ТЗн.Колонки.Добавить("Выгружать",				ОписаниеТипаБулево);
		ТЗн.Колонки.Добавить("Наименование",  			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
		ТЗн.Колонки.Добавить("Комментарий",             ОписаниеТипаСтрока);
			
	ИначеЕсли ВидСправочника = "_Фотографии" Тогда		
		ТЗн.Колонки.Добавить("ID", 							ОписаниеТипаИдентификатор); // идентификатор элемента
		ТЗн.Колонки.Добавить("ВладелецФайла",				ОписаниеТипаИдентификатор); // пока что документ "Мерчендайзинг	
		ТЗн.Колонки.Добавить("ДатаМодификацииУниверсальная", ОписаниеТипаДата); 
		ТЗн.Колонки.Добавить("ДатаСоздания", 				ОписаниеТипаДата); 
		ТЗн.Колонки.Добавить("Описание", 					ОписаниеТипаСтрока); 
		ТЗн.Колонки.Добавить("Наименование", 				ОписаниеТипаСтрока); 
		ТЗн.Колонки.Добавить("Расширение", 					ОписаниеТипаСтрока); 
		ТЗн.Колонки.Добавить("Размер", 						ОписаниеТипаСтатус);
		ТЗн.Колонки.Добавить("ХранимыйФайл", 				ОписаниеТипаСтрока); 		//Адрес картинки в каталоге
		ТЗн.Колонки.Добавить("Статус",						ОписаниеТипаСтатус);			
		
	Иначе
		
		ВызватьИсключение("Функция ВСпрИмяТЗЭлементов(): неизвестное значение параметра ВидСправочника - " + ВидСправочника);
		
	КонецЕсли; 
	
	Возврат ТЗн;
	
КонецФункции

// ВиртуальныеОбъекты_Справочники
#КонецОбласти

// ВиртуальныеОбъекты
#КонецОбласти

#Область СлужебныеДанные

// Функция возвращает признак - хранить служебные данные в файлах (Истина) или в хранилище (Ложь)
Функция СДХранитьВФайлах()
	
	Если ГСлужебныеДанныеВФайлах = Неопределено Тогда	
		ГСлужебныеДанныеВФайлах = Ложь; // хранение в Хранилище подтверждений для загруженных: документов, справочников, треков. 
	КонецЕсли;
	
	Возврат ГСлужебныеДанныеВФайлах;
	
КонецФункции

Функция СДИмяФайлаДляМУ(СсылкаМУ)
	
	Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_data.txt";
	
КонецФункции

// Чтение служебных данных
Функция СДПрочитать(Имя, СоздатьЕслиНетДанных = Ложь)
	
	Если СДХранитьВФайлах() Тогда
		СтррДанные = СДОткрытьФайл(ПодкаталогДанных("Входящие") + Имя);
	Иначе
		СтррДанные = ПрочитатьЗначениеНастройки(Имя);
	КонецЕсли;
	
	Если ТипЗнч(СтррДанные) <> Тип("Структура") И СоздатьЕслиНетДанных Тогда
		СтррДанные = Новый Структура;
	КонецЕсли; 
	
	Возврат СтррДанные;
	
КонецФункции

// Сохранение служебных данных
Функция СДЗаписать(Имя, Данные)
	
	Если СДХранитьВФайлах() Тогда
		ИмяФайла = ПодкаталогДанных("Входящие") + Имя;
		Попытка
			ЗначениеВФайл(ИмяФайла, Данные);
		Исключение
			Текст = "Не удалось сохранить служебные данные в файл. Проверьте права доступа. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЗаписи",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СохранитьЗначениеНастройки(Имя, Данные);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает прочитанные служебные данные.
Функция СДОткрытьФайл(ИмяФайла)
	
	Результат = Неопределено;	
	
	Если ФайлСуществует(ИмяФайла) Тогда
		
		Попытка
		    Данные = ЗначениеИзФайла(ИмяФайла);
		Исключение
			Текст = "Ошибка чтения файла служебных данных. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецПопытки;
		
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Результат = Данные;			
		Иначе
			Текст = "Файл служебных данных поврежден. Будет создан новый файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СДИдентификаторВИмяФайла(Идентификатор)
	
	Возврат СтрЗаменить(НРег(Строка(Идентификатор)), "-", "");
	
КонецФункции

// СлужебныеДанные
#КонецОбласти 

#Область СлужебныеТаблицыЗначений

// Функция загружает служебную таблицу из хранилища в память.
//
// Параметры:
//  СтрИмяТаблицы	 - Строка - имя служебной таблицы
//  Принудительно	 - Булево - если Истина, то загружать ТЗ в память без проверки настроек использования служебной таблицы.
// 
// Возвращаемое значение:
//   - Булево - Истина, если таблица успешно загружена (или создана, если не была создана ранее).
//
Функция КэшСлужебныхТаблицЗагрузить(СтрИмяТаблицы)
	
	Если ГКэшСлужебныхТаблиц = Неопределено Тогда
		ГКэшСлужебныхТаблиц = Новый Структура;
	КонецЕсли; 
	 
	ТЗн = ПрочитатьЗначениеНастройки(СтрИмяТаблицы);
	Если ТЗн = Неопределено Тогда
		
		ОписаниеТипаИдентификатор 	 = Новый ОписаниеТипов("УникальныйИдентификатор");	
		// СтрОписаниеТипаИдентификатор = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36));	
		
		ТЗн = Новый ТаблицаЗначений;
		
	    Если СтрИмяТаблицы = "СпрХарактеристикиНоменклатурыСлужебный" Тогда // соответствие характеристик номенклатуры в 1С и МТ
			
			ТЗн.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор);
			ТЗн.Колонки.Добавить("Ссылка", 			Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры")); // соответствующий элемент справочника в 1С			
			ТЗн.Колонки.Добавить("Номенклатура",   	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			
		ИначеЕсли СтрИмяТаблицы = "СпрОграничениеВыгрузкФотографийТоваров" Тогда
			ТЗн.Колонки.Добавить("Пользователь", 	Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
			ТЗн.Колонки.Добавить("ДатаВыгрузки", 	Новый ОписаниеТипов("Дата"));
			ТЗн.Колонки.Добавить("ЗагруженВМУ", 	Новый ОписаниеТипов("Булево"));
			
		ИначеЕсли СтрИмяТаблицы = "..." Тогда // добавить другие служебные таблицы сюда
			
			// ...
			
		Иначе
			ВызватьИсключение("Функция СТЗЗагрузить() - неизвестное значение параметра стрИмяТаблицы = " + СтрИмяТаблицы);
		КонецЕсли; 
		
	КонецЕсли;
	
	ГКэшСлужебныхТаблиц.Вставить(СтрИмяТаблицы, ТЗн);
	ГКэшСлужебныхТаблиц.Вставить(СтрИмяТаблицы + "_Изменен", Ложь); // признак, что ТЗ была изменена
	
	Возврат Истина;

КонецФункции

// Процедура сохраняет все измененные служебные таблицы в хранилище значений.
Процедура КэшСлужебныхТаблицСохранить(ИмяТаблицы)
	
	Если ГКэшСлужебныхТаблиц = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТаблицы = "Все" Тогда // сохранение всех таблиц
		Для каждого Элемент из ГКэшСлужебныхТаблиц Цикл
			//@skip-check use-non-recommended-method
			Если Найти(Элемент.Ключ, "_Изменен") <> 0 И ГКэшСлужебныхТаблиц[Элемент.Ключ] = Истина Тогда // в свойстве установлен признак изменения служебной таблице
				ИмяТЗ = СтрЗаменить(Элемент.Ключ, "_Изменен", "");
				СохранитьЗначениеНастройки(ИмяТЗ, ГКэшСлужебныхТаблиц[ИмяТЗ]);
				ГКэшСлужебныхТаблиц[Элемент.Ключ] = Ложь;
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли ГКэшСлужебныхТаблиц[ИмяТаблицы + "_Изменен"] = Истина Тогда // сохранение конкретной таблицы
		СохранитьЗначениеНастройки(ИмяТаблицы, ГКэшСлужебныхТаблиц[ИмяТаблицы]);
		ГКэшСлужебныхТаблиц[ИмяТаблицы + "_Изменен"] = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Функция КэшСлужебныхТаблицСсылкаНаЭлементБД1С(Идентификатор, ИмяТЗ)
 
	СтрокаТ = ГКэшСлужебныхТаблиц[ИмяТЗ].Найти(Идентификатор, "Идентификатор");
	
	Если СтрокаТ <> Неопределено Тогда
		Возврат СтрокаТ.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Функция КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоиск, ИмяТЗ)
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(СтррПоиск.Ссылка) Тогда
		
		ТЗн = ГКэшСлужебныхТаблиц[ИмяТЗ];
		МСтроки = ТЗн.НайтиСтроки(СтррПоиск);
		Если МСтроки.Количество() <> 0 Тогда
			Результат = МСтроки[0].Идентификатор;
		Иначе
			СтрокаТ = ТЗн.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТ, СтррПоиск);
			Результат = Новый УникальныйИдентификатор;			
			СтрокаТ.Идентификатор   = Результат;
			ГКэшСлужебныхТаблиц[ИмяТЗ + "_Изменен"] = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Результат;		
	
КонецФункции

// СлужебныеТаблицыЗначений
#КонецОбласти 

Функция ТипыЗадач() Экспорт
	
	СЗРезультат = Новый СписокЗначений;
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26"), "Ввести дату");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("19661470-75A6-4EB4-BE94-44924664B3D1"), "Ввести число");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("A429FB60-A01B-4282-BA56-85721E24257D"), "Ввести строку");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("B65C3F4C-6CBE-4675-9685-9F3C62BE199E"), "Выбрать ""Да"" или ""Нет""");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("B483E5F9-95E6-4E2D-B6B2-D5954FCC25AE"), "Сделать фото");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("061879D3-E400-4CC8-B4F9-999C3399F47C"), "Совершить обмен");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("EADED006-5271-4497-9222-79541D23E3FA"), "Создать документ ""Заказ""");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("D6176C16-130D-40D8-AD70-13A39C957927"), "Создать документ ""Реализация""");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("57EC9BD4-C2EC-47E0-86C1-B06211735F32"), "Создать документ ""Перемещение""");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("79E5B0F6-B019-41FE-9214-C7A204E05974"), "Создать документ ""Поступление""");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("EC84CE42-A9C3-4936-94FB-595EC1E84AEF"), "Создать документ ""Возврат товаров""");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("2EC90B5A-56FF-4338-AEAA-2416B8923BF8"), "Создать документ ""ПКО""");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("8BED83C4-4428-4206-89D1-A31790130937"), "Создать документ ""РКО""");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("544B81FD-49DA-453E-9B9C-EEC549CBEF10"), "Создать документ ""Мерчендайзинг""");
	СЗРезультат.Добавить(Новый УникальныйИдентификатор("2F7826F4-2665-49FA-95E7-E7C8CC6EBF0E"), "Создать документ ""Посещение""");
	//сзРезультат.Добавить(Новый УникальныйИдентификатор("FDDC6586-FC43-4DE2-9F8A-0F1EFDCE4B31"), "ВыбратьЗначениеИзСписка"); //Не реализовано
	
	Возврат СЗРезультат;
КонецФункции

// Возвращает варианты видов команд для МТ.
// Возвращаемое значение:
//   Соответствие Из УникальныйИдентификатор
Функция ВидыКомандДляМУ() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить(Новый УникальныйИдентификатор("3DD4A962-C1FA-44C3-88AB-D93AA8AB0763"), "Удалить документы (только подтвержденные)");
	Результат.Вставить(Новый УникальныйИдентификатор("ECE307BC-245E-4474-8838-3523F8F42EC2"), "Удалить документы (только неподтвержденные)");
	Результат.Вставить(Новый УникальныйИдентификатор("D7D9DDD8-50C1-484C-9BE1-49BA8B119141"), "Удалить документы (все)");
	Результат.Вставить(Новый УникальныйИдентификатор("A21840F9-8CA4-43A0-92A0-8F45350AD6B1"), "Удалить документ");
	Результат.Вставить(Новый УникальныйИдентификатор("19F912FF-34BB-4792-A07A-8754C56B3BFF"), "Удалить фотографии (только подтвержденные)");
	Результат.Вставить(Новый УникальныйИдентификатор("B029EBDD-0B8F-48D5-BE91-F01E403878E4"), "Удалить фотографии (все)");
	//Результат.Добавить(Новый УникальныйИдентификатор("CAC729B9-919B-4C41-9333-0337C768BA94"), "Удалить все сообщения");
	//Результат.Добавить(Новый УникальныйИдентификатор("B6EBEFD2-E1F9-4D43-8CD8-903F6115B77E"), "Удалить сообщение");
	
	Возврат Результат;
КонецФункции

//@skip-check module-unused-method
Функция ТипыКомандДляМУ()
	
	Результат = Новый Соответствие;
	Результат.Вставить(Новый УникальныйИдентификатор("3DD4A962-C1FA-44C3-88AB-D93AA8AB0763"), 11);
	Результат.Вставить(Новый УникальныйИдентификатор("ECE307BC-245E-4474-8838-3523F8F42EC2"), 14);
	Результат.Вставить(Новый УникальныйИдентификатор("D7D9DDD8-50C1-484C-9BE1-49BA8B119141"), 12);
	Результат.Вставить(Новый УникальныйИдентификатор("A21840F9-8CA4-43A0-92A0-8F45350AD6B1"), 13);
	Результат.Вставить(Новый УникальныйИдентификатор("19F912FF-34BB-4792-A07A-8754C56B3BFF"), 21);
	Результат.Вставить(Новый УникальныйИдентификатор("B029EBDD-0B8F-48D5-BE91-F01E403878E4"), 22);
	//Результат.Вставить(Новый УникальныйИдентификатор("CAC729B9-919B-4C41-9333-0337C768BA94"), 12);
	//Результат.Вставить(Новый УникальныйИдентификатор("B6EBEFD2-E1F9-4D43-8CD8-903F6115B77E"), 13);
	
	Возврат Результат;
КонецФункции

#Область ХарактеристикиНоменклатуры

Функция ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики)
	
	Если ИспользоватьХарактеристики Тогда
		
		Если ИдХарактеристики = Неопределено Или ЭтоПустойИдентификатор(ИдХарактеристики) Тогда
			Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе
			Результат = КэшСлужебныхТаблицСсылкаНаЭлементБД1С(Новый УникальныйИдентификатор(ИдХарактеристики), "СпрХарактеристикиНоменклатурыСлужебный");
			Если Результат = Неопределено Тогда
				Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		
	Иначе 
		Результат = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// ХарактеристикиНоменклатуры
#КонецОбласти 

#Область ПодтвержденияДанных
// Процедуры и функции чтения и сохранения данных подтверждений.

// Функция возвращает таблицу значений с подтверждениями.
// Если параметр ДляЧтения = Истина и если файл подтверждений не существует или недоступен, то возвращается Неопределено.
// Если параметр ДляЧтения = Ложь и если файл подтверждений не существует или недоступен, то возвращается пустая таблица значений.
Функция ПодтвержденияОткрытьФайл(ИмяФайла, ДляЧтения)
	
	ТЗн = Неопределено;	
	
	Если ФайлСуществует(ИмяФайла) Тогда
		
		Попытка
		    ТЗн = ЗначениеИзФайла(ИмяФайла);
		Исключение
			Текст = "Ошибка чтения файла подтверждений. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		КонецПопытки;
		
		ТекстСоздание = ?(ДляЧтения, "", "Будет создан новый файл.") + " Файл: ";
		
		Если ТипЗнч(ТЗн) <> Тип("ТаблицаЗначений") Тогда
			Текст = "Файл подтверждений поврежден. " + ТекстСоздание + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
		Иначе
			Колонки = "Дата,Идентификатор";
			Если Не ТЗЕстьКолонки(ТЗн, Колонки) Тогда
				Текст = "Таблица в файле подтверждений не содержит колонок: " + Колонки + ". " + ТекстСоздание + ИмяФайла;
				ОповеститьОСобытии(Текст, "ОшибкаЧтения",, "ТекущийАгент");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТЗн;
	
КонецФункции

// Функция сокращает количество записей в ТЗ подтверждений до заданного.
// Если удалялись лишние строки, то возвращается Истина.
Функция ПодтвержденияСократить(ТЗн, МаксКоличествоСтрок)
	
	ТЗн.Сортировать("Дата");  // сначала будут идти самые ранние строки по хронологии загрузки/обновления, их и будем удалять из подтверждений.
	Возврат ТЗСократитьДоКоличестваСтрок(ТЗн, МаксКоличествоСтрок);
	
КонецФункции

// Сохранение всех подтверждений (для документов, справочников, фотографий) в хранилище на основе данных в структуре ЗагружаемыеОбъекты.
Процедура ПодтвержденияСохранитьВсе(СсылкаМУ, ЗагружаемыеОбъекты)
	
	МаксКоличествоСтрок = 200; // максимальное количество документов в буфере перед добавлением новых документов.
	
	ТЗн = ПодтвержденияСДОткрыть("Документы", СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	ПодтвержденияСократить(ТЗн, МаксКоличествоСтрок);
	
	//@skip-check use-non-recommended-method
	ТекДата = ТекущаяДата();
	
	ТЗДокументы = ЗагружаемыеОбъекты.ТЗЗагруженныеДокументы;
	
	Для Каждого стзДокументы Из ТЗДокументы Цикл
		ИдДокумента = стзДокументы.Идентификатор;
		СтрокаТ = ТЗн.Найти(ИдДокумента, "Идентификатор");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = ТЗн.Добавить();
			СтрокаТ.Идентификатор 	 = ИдДокумента;
			СтрокаТ.ВидДокумента  	 = стзДокументы.ВидДокумента;
			СтрокаТ.ИдВидДокументаМТ = стзДокументы.ИдВидДокументаМТ;
		КонецЕсли;
		СтрокаТ.Дата 		  = ТекДата;	// Если документ выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
		СтрокаТ.ДатаДокумента = стзДокументы.ДатаДокумента;
	КонецЦикла;
	
	ПодтвержденияСДСохранить("Документы", СсылкаМУ, ТЗн);
	
	ТЗн = ПодтвержденияСДОткрыть("Справочники", СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	ПодтвержденияСократить(ТЗн, МаксКоличествоСтрок);
	
	ТЗСправочники = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники;
	
	Для Каждого стзСправочники Из ТЗСправочники Цикл
		ИдЭлементаСправочника = стзСправочники.Идентификатор;
		СтрокаТ = ТЗн.Найти(ИдЭлементаСправочника, "Идентификатор");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = ТЗн.Добавить();
			СтрокаТ.Идентификатор 	 	= ИдЭлементаСправочника;
			СтрокаТ.ИдВидСправочникаМТ 	= сТЗСправочники.ИдВидСправочникаМТ;
		КонецЕсли;
		СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
	КонецЦикла;
	
	//(( Дополнительно добавляем подтверждения для справочника МТ "ФотоДокументов" и подтверждения для тэга PICTURES
	// строки добавляются в объекты ТЗн и тзPictures	
	ТЗPictures = ПодтвержденияСДОткрыть("Фото", СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
	ИзмененаТЗPictures  = ПодтвержденияСократить(ТЗPictures, МаксКоличествоСтрок);

	ТЗФотографии = ЗагружаемыеОбъекты.тзФотографии;
	// СчетчикФотографий = 0; // количество загруженных фотографий для подтверждения
	
	ИдВидСправочникаМТ_ФотоДокументов = СвойстваВидаОбъекта("Справочник.ФотоДокументов", "ВидДляМТ").ИдентификаторВида; 
	Для Каждого стзФотографии Из ТЗФотографии Цикл
		Если стзФотографии.Загружено Тогда // подтверждения будут только для фото с загруженными изображениями
			
			// добавление в ТЗн (подтверждения для справочников)
			ИдЭлементаСправочника = Новый УникальныйИдентификатор(стзФотографии.GUID);
			СтрокаТ = ТЗн.Найти(ИдЭлементаСправочника, "Идентификатор");
			Если СтрокаТ = Неопределено Тогда
				СтрокаТ = ТЗн.Добавить();
				СтрокаТ.Идентификатор 	 	= ИдЭлементаСправочника;
				СтрокаТ.ИдВидСправочникаМТ 	= ИдВидСправочникаМТ_ФотоДокументов;
			КонецЕсли;
			СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
			
			Если Не ПодтверждатьВсеФотографии Тогда // при подтверждении всех фотографий данные в тзPictures уже актуализированы в процедуре ЗагрузитьФотографииЭтап2()
			
				// добавление в тзPictures (подтверждения для картинок)
				ИдФото = Новый УникальныйИдентификатор(стзФотографии.ИдФото);
				СтрокаТ = ТЗPictures.Найти(ИдФото, "Идентификатор");
				Если СтрокаТ = Неопределено Тогда
					СтрокаТ = ТЗPictures.Добавить();
					СтрокаТ.Идентификатор = ИдФото;
				КонецЕсли;
				СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
				ИзмененаТЗPictures = Истина;				
			
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЦикла; 
	
	Если ИзмененаТЗPictures Тогда
		ПодтвержденияСДСохранить("Фото", СсылкаМУ, ТЗPictures);
	КонецЕсли; 
		
	ПодтвержденияСДСохранить("Справочники", СсылкаМУ, ТЗн);
	
КонецПроцедуры

// Функция вовзращает название имени файла для хранения подтверждений при обмене данных.
// Параметры:
//   ВидДанных - Строка -  название вида подтверждаемых данных: "Документы", "Справочники" или "Фото".
//   СсылкаМУ - УникальныйИдентификатор - уникальный идентификатор мобильного устройства.
// Возвращаемое значение:
//   Строка
Функция ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ)
	
	Если ВидДанных = "Документы" Тогда
		Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_doc.txt";
	ИначеЕсли ВидДанных = "Справочники" Тогда		
		Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_cat.txt";
	ИначеЕсли ВидДанных = "Фото" Тогда
		Возврат СДИдентификаторВИмяФайла(СсылкаМУ) + "_pict.txt";
	Иначе
		ВызватьИсключение("Функция ИмяФайлаПодтверждений(): неизвестное значение параметра ВидДанных = """ + ВидДанных + """");
	КонецЕсли; 
	
КонецФункции

// Сохранение подтверждений в служебных данных (СД)
Функция ПодтвержденияСДСохранить(ВидДанных, СсылкаМУ, ТЗн)
	
	ИмяФайла = ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ);
	
	Если СДХранитьВФайлах() Тогда
		Попытка
			ЗначениеВФайл(ПодкаталогДанных("Входящие") + ИмяФайла, ТЗн);
		Исключение
			Текст = "Не удалось сохранить файл подтверждений. Проверьте права доступа. Файл: " + ИмяФайла;
			ОповеститьОСобытии(Текст, "ОшибкаЗаписи",, "ТекущийАгент");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		СохранитьЗначениеНастройки(ИмяФайла, ТЗн);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Открытие подтверждений из служебных данных (СД).
// Параметры:
//   ВидДанных - Строка - название вида подтверждаемых данных: "Документы", "Справочники" или "Фото".
//   СсылкаМУ - УникальныйИдентификатор - уникальный идентификатор мобильного устройства.
//   ДляЧтения - Булево - читать подтверждения для чтения или для записи.
// Возвращаемое значение:
//   Произвольный - Неопределено или ТаблицаЗначений
Функция ПодтвержденияСДОткрыть(ВидДанных, СсылкаМУ, ДляЧтения) Экспорт 
	
	ИмяФайла = ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ);
	
	Если СДХранитьВФайлах() Тогда
		ТЗн = ПодтвержденияОткрытьФайл(ПодкаталогДанных("Входящие") + ИмяФайла, ДляЧтения);
	Иначе
		ТЗн = ПрочитатьЗначениеНастройки(ИмяФайла);
	КонецЕсли;
	
	Если ТЗн = Неопределено Тогда // создаем пустую ТЗ
		
		ОписаниеТипаДата   			= Новый ОписаниеТипов("Дата",, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		ОписаниеТипаИдентификатор 	= Новый ОписаниеТипов("УникальныйИдентификатор");
		ОписаниеТипаСтрока 			= Новый ОписаниеТипов("Строка");
		
		ТЗн = Новый ТаблицаЗначений;
		
		Если ВидДанных = "Документы" Тогда
			
			ТЗн.Колонки.Добавить("Дата", 			ОписаниеТипаДата);					
			ТЗн.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор); // GUID подтверждаемого документа
			ТЗн.Колонки.Добавить("ВидДокумента",  	ОписаниеТипаСтрока);
			ТЗн.Колонки.Добавить("ИдВидДокументаМТ", ОписаниеТипаИдентификатор); // идентификатор (GUID) вида документа в МТ
			ТЗн.Колонки.Добавить("ДатаДокумента", 	ОписаниеТипаДата); 			// фиксирование даты создания документа в МУ для более удобного отображения "Журнала обмена данными" для пользователя.
			
		ИначеЕсли ВидДанных = "Справочники" Тогда
			
			ТЗн.Колонки.Добавить("Дата", 				ОписаниеТипаДата);
			ТЗн.Колонки.Добавить("Идентификатор", 		ОписаниеТипаИдентификатор); // GUID подтверждаемого элемента справочника
			ТЗн.Колонки.Добавить("ИдВидСправочникаМТ",	ОписаниеТипаИдентификатор); // идентификатор (GUID) справочника в МТ
			
		ИначеЕсли ВидДанных = "Фото" Тогда
			
			ТЗн.Колонки.Добавить("Дата", 			ОписаниеТипаДата);
			ТЗн.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор); // GUID подтверждаемого изображения

		Иначе
			ВызватьИсключение("Функция ПодтвержденияСДОткрыть(): неизвестное значение параметра ВидДанных = """ + ВидДанных + """");
		КонецЕсли; 

	КонецЕсли;
	
	Если ВидДанных = "Документы" Тогда
	
		Если ТЗн.Колонки.Найти("ДатаДокумента") = Неопределено Тогда 
			ОписаниеТипаДата   = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
			ТЗн.Колонки.Добавить("ДатаДокумента", ОписаниеТипаДата); // дата создания документа в МУ
			Если Не ДляЧтения Тогда
				ПодтвержденияСДСохранить(ВидДанных, СсылкаМУ, ТЗн);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТЗн;
	
КонецФункции

Процедура ПодтвержденияУдалить(ВидДанных, МСсылкиМУ = Неопределено) 
	
	Если МСсылкиМУ = Неопределено Тогда
		ТЗн = ПрочитатьЗначениеНастройки("МобильныеУстройства");
		Если ТЗн = Неопределено Тогда
			Возврат;
		Иначе
			МСсылкиМУ = ТЗн.ВыгрузитьКолонку("ID");
		КонецЕсли;
	КонецЕсли;
	
	МИмена = Новый Массив;	
	
	Для Каждого СсылкаМУ Из МСсылкиМУ Цикл
		МИмена.Добавить(ПодтвержденияИмяФайла(ВидДанных, СсылкаМУ));
	КонецЦикла;
	
	Если СДХранитьВФайлах() Тогда
		
		Каталог = ПодкаталогДанных("Входящие");
		Для Каждого ИмяФайла Из МИмена Цикл
			ПолныйПуть = Каталог + ИмяФайла;
			//@skip-check empty-except-statement
			Попытка
				УдалитьФайлы(ПолныйПуть);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		
		УдалитьЗначенияНастроек(МИмена);	
		
	КонецЕсли;
	
КонецПроцедуры

// ПодтвержденияДанных
#КонецОбласти 

#Область ВыгрузкаДанных

Функция СоздатьФайлВыгрузкиДанных(ИмяФайлаВыгрузки)

	ДокОбмена = Новый ЗаписьXML();
	Попытка
		ДокОбмена.ОткрытьФайл(ИмяФайлаВыгрузки);
		ДокОбмена.ЗаписатьОбъявлениеXML();	
		ДокОбмена.ЗаписатьНачалоЭлемента("DATA");

		ДокОбмена.ЗаписатьАтрибут("DBVERSION", "1977");
		
		ДокОбмена.ЗаписатьАтрибут("DATASOURCENAME", "МобильнаяТорговля");
		ДокОбмена.ЗаписатьАтрибут("DATASOURCEVERSION", "1.0.1"); // Ратмир

		ДокОбмена.ЗаписатьАтрибут("CONFIG1CNAME", СокрЛП(Метаданные.Имя));
		ДокОбмена.ЗаписатьАтрибут("CONFIG1CVERSION", СокрЛП(Метаданные.Версия));

		Возврат ДокОбмена;
	Исключение
		Текст = НСтр("ru = 'Ошибка создания файла выгрузки по причине:'") + " " + ОписаниеОшибки();
		ОповеститьОСобытии(Текст, "ОшибкаОбмен", , "ТекущийАгент");
		Возврат Неопределено;
	КонецПопытки;

КонецФункции 

Процедура ЗакрытьФайлВыгрузки(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.Закрыть();

КонецПроцедуры

Процедура ВыгрузитьКонстанты(ДокОбмена, МенеджерВТ)     

	ДокОбмена.ЗаписатьНачалоЭлемента("CONSTANTS");
	ДобавитьПоле(ДокОбмена, "Comment", "Константы");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Агент = ВыбНастройкиАгента.Пользователь;

	// НаименованиеАгента
	ДобавитьКонстанту(ДокОбмена, "a2e1cc68-0624-45a6-8057-efd35259b9fe", СокрЛП(Агент)); 
	
	// ИдентификаторАгента
	ДобавитьКонстанту(ДокОбмена, "79c698db-3c55-465e-acfe-4741acdd5655", Агент.УникальныйИдентификатор());
	
	// Дата последней выгрузки данных из ЦБД
	//@skip-check use-non-recommended-method
	ДобавитьКонстанту(ДокОбмена, "d0604fdf-b2a5-44b7-b84d-db2a9a691918", Формат(ТекущаяДата(), "ДФ=гггг-ММ-дд'T'ЧЧ:мм:сс"));

	// Константа измененной нумерации - только для УТ 8, ред. 11
	ДобавитьКонстанту(ДокОбмена, "c186c395-658c-4b42-b007-f50da543a9d8", "1");
		
	// Основная организация
	ДобавитьКонстанту(ДокОбмена, "13faf2a0-3d1e-469e-bc53-cdada6ac1375", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнаяОрганизация)); 
	
	// Основной склад
	ДобавитьКонстанту(ДокОбмена, "86ba5dad-16d0-46b8-9d8d-3eab2cf08685", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнойСклад));
	
	// Мобильный склад
	ДобавитьКонстанту(ДокОбмена, "448b6fab-5e21-479c-9a9a-63e8eced59b9", 
			//?(ТорговляСКолес И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), ИдентификаторСсылки(ВыбНастройкиАгента.МобильныйСклад), ""));
			?(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ТорговляCКолес.Значение И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), ИдентификаторСсылки(ВыбНастройкиАгента.МобильныйСклад), ""));
	
	// Основной тип цены
	ДобавитьКонстанту(ДокОбмена, "7bc85296-f536-411e-aaa9-74ad5c7adea2", ИдентификаторСсылки(ВыбНастройкиАгента.ОсновнойТипЦены)); 

	ВалютаУчета = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	Если ВалютаУчета.Пустая() Тогда
		ВалютаУчета = КонстантыПолучитьЗначение("ВалютаУправленческогоУчета");
	КонецЕсли;
	ДобавитьКонстанту(ДокОбмена, "d2b5508c-7453-4a52-b803-a846992a485d", ВалютаУчета.Наименование);
	
	СтрПредставлениеВалюты = "Валюта: наименование, код " + СокрЛП(ВалютаУчета.НаименованиеПолное) + ", " + СокрЛП(ВалютаУчета.Код);
	ДобавитьКонстанту(ДокОбмена, "adb99df4-739b-4e6f-aea9-e751b55cb18a", СтрПредставлениеВалюты);
	
	// Значение надписи поля "Код" в МУ
	ДобавитьКонстанту(ДокОбмена, "7268af8a-6532-4ad0-bc63-3832f3c0d96f", ?(РежимВыгрузкиКодовНоменклатуры = "АРТИКУЛ", "Артикул", "Код"));
	
	// 	Константа ЕдиницаИзмеренияВеса
	ДобавитьКонстанту(ДокОбмена, "13af34a5-664d-4aad-a29c-eefc04fefca9", КонстантыПолучитьЗначение("ЕдиницаИзмеренияВеса").Наименование);
	
	// Константа ИспользоватьХарактеристикиНоменклатуры
	ДобавитьКонстанту(ДокОбмена, "6e9470db-c618-4bf8-b510-d1e39e2217f6", 
			ЗначениеВСтрокуДляXML(КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики));
	
	// Пересчет в базовые единицы 
	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
		ДобавитьКонстанту(ДокОбмена, "0d0b118f-a77d-4a90-adfb-c79e5eb08cdb", "0");
	КонецЕсли;
	
	// Точность цены, количества и скидки
	ДобавитьКонстанту(ДокОбмена, "27952ab3-1365-4b56-a0ef-34ec0133e5d3", "2");
	ДобавитьКонстанту(ДокОбмена, "5d54ed85-fdea-4027-8ecd-129c27bdbf64", "2");
	ДобавитьКонстанту(ДокОбмена, "a978f039-3f17-4705-b7f6-16c580c9ac5f", "2");
	
	// Минимальный вид цены
	ДобавитьКонстанту(ДокОбмена, "0a253e8b-9043-414b-8026-0c9369f781ad", МинимальныйВидЦены());
	
	ДобавитьКонстанту(ДокОбмена, "b201164e-e265-4c1d-b3d0-0579bcd1fda6", ИспользоватьСоглашения() Или ИспользоватьДоговоры());
	
	// Использовать торговые точки
	ДобавитьКонстанту(ДокОбмена, "8c52bbbf-8bbb-447d-b18b-06860d372818",РежимВыгрузкиРекомендуемый ИЛИ ИспользоватьПунктыРазгрузки Или ИспользоватьКонтрагентов Или ИспользоватьАдресаДоставки);	// В МТ - это константа "ИспользоватьТорговыеТочки"
	
	// Режим выгрузки в МУ
	ДобавитьКонстанту(ДокОбмена, "42daa32f-568b-4c20-9813-73caf7c0a764", РежимВыгрузкиРекомендуемый);
	
	// Использовать контрагентов для рекомендуемого режима выгрузки
	Если РежимВыгрузкиРекомендуемый Тогда 
		ДобавитьКонстанту(ДокОбмена, "325a12e0-9aa1-4899-a4e9-bb9896ff5795", ИспользоватьКонтрагентов);	
	КонецЕсли;

	// Фактический адрес
	ДобавитьКонстанту(ДокОбмена, "1b3d41b2-eb00-4f25-a476-6a668c5e69f0", ЗначениеВСтрокуДляXML(Справочники.ВидыКонтактнойИнформации.АдресПартнера));
	ДобавитьКонстанту(ДокОбмена, "0270b3d5-4213-419b-9e3a-48cba4caec04", ВыгружатьИсториюПродаж);

	Если ВыделятьЦветомПросроченныеДолги Тогда
		СтрЦвет = ЦветВСтроку(ЦветПросроченныхДолгов);
		Если СтрЦвет = "0,0,0" Тогда // Если не указан для агента определенный цвет, то по умолчанию выделяем красным
			СтрЦвет = "255,0,0";
		КонецЕсли;
		// Цвет выделения просроченных долгов
		ДобавитьКонстанту(ДокОбмена, "9c60a778-7db0-4b3a-89d5-ebe6b56b1d7f", СтрЦвет); // цвета передаем в виде строки R,G,B
	КонецЕсли;

	Если ИспользоватьПунктыРазгрузки Тогда 
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = "Пункт разгрузки";
		НадписьТорговыеТочки = "Пункты разгрузки";
		ДобавитьКонстанту(ДокОбмена, "f2e1afa7-292c-42d4-950d-7da550d2fda4", ?(ИспользоватьКонтрагентов, "Контрагент", "Партнер")); 
	ИначеЕсли ИспользоватьАдресаДоставки Тогда
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = "Адрес доставки";
		НадписьТорговыеТочки = "Адреса доставки";
	Иначе		
		// Значения надписи поля "Контрагент" в МУ
		НадписьКонтрагент  = ?(РежимВыгрузкиРекомендуемый, "Контрагент", "Партнер");
		НадписьКонтрагенты = ?(РежимВыгрузкиРекомендуемый, "Контрагенты", "Партнеры");
		
		ДобавитьКонстанту(ДокОбмена, "f2e1afa7-292c-42d4-950d-7da550d2fda4", НадписьКонтрагент);
		ДобавитьКонстанту(ДокОбмена, "cb188c72-9fbd-4b08-a321-440ab389e177", НадписьКонтрагенты);
			
		// Значения надписи поля "Торговая точка" в МУ
		НадписьТорговаяТочка = ?(РежимВыгрузкиРекомендуемый, "Партнер", "Контрагент");
		НадписьТорговыеТочки = ?(РежимВыгрузкиРекомендуемый, "Партнеры", "Контрагенты");
			
	КонецЕсли;
	
	ДобавитьКонстанту(ДокОбмена, "5728ed47-0dbc-48a9-b37c-e7808766c48c", НадписьТорговаяТочка);
	ДобавитьКонстанту(ДокОбмена, "bcca6cef-853c-42f4-9b10-2ca02b1a5556", НадписьТорговыеТочки);
	
	Если ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" Тогда
		НадписьДоговор  = "Договор";
		НадписьДоговоры = "Договоры";
	Иначе 
		НадписьДоговор  = "Соглашение";
		НадписьДоговоры = "Соглашения";
	КонецЕсли;
	ДобавитьКонстанту(ДокОбмена, "57f7ae38-8fed-4ab4-aa22-6374403ac0ac", НадписьДоговор);
	ДобавитьКонстанту(ДокОбмена, "9102cd20-6414-42ba-86d1-ea32410e8d42", НадписьДоговоры);
	
	Если ИспользоватьПланыПродаж ИЛИ ИспользоватьПланыПродажПоТоварнымКатегориям Тогда 
		ОсновнойПланПродаж = ПолучитьОсновнойПланПродаж(МенеджерВТ);
		Если ОсновнойПланПродаж = Неопределено Тогда
			// Использование планов продаж по Номенклатуре
			ДобавитьКонстанту(ДокОбмена, "c26639d8-f729-4c9f-abb4-7154ae9c632b", 0);
			// Использование планов продаж по товарной категории
			ДобавитьКонстанту(ДокОбмена, "a053bb15-75bd-410c-894d-d11ab3499d35", 0);
		Иначе
			// Использование планов продаж по Номенклатуре
			ДобавитьКонстанту(ДокОбмена, "c26639d8-f729-4c9f-abb4-7154ae9c632b", ?(ИспользоватьПланыПродаж, 1, 0));
			// Использование планов продаж по товарной категории
			ДобавитьКонстанту(ДокОбмена, "a053bb15-75bd-410c-894d-d11ab3499d35", ?(ИспользоватьПланыПродажПоТоварнымКатегориям, 1, 0));
			// Основной план продаж
			ДобавитьКонстанту(ДокОбмена, "50f284e8-bcd6-47d4-8dd1-181d9592cb20", Строка(ОсновнойПланПродаж.УникальныйИдентификатор()));
		КонецЕсли;
	Иначе
		// Использование планов продаж по Номенклатуре
		ДобавитьКонстанту(ДокОбмена, "c26639d8-f729-4c9f-abb4-7154ae9c632b", 0);
		// Использование планов продаж по товарной категории
		ДобавитьКонстанту(ДокОбмена, "a053bb15-75bd-410c-894d-d11ab3499d35", 0);
	КонецЕсли;	
	
	// Служебные данные для МУ - в них хранится дата и время конца загруженного трека
	СтррЗначения = СДПрочитать(СДИмяФайлаДляМУ(ВыбНастройкиАгента.СсылкаМУ), Истина); // служебные данные для МУ
	Если ТипЗнч(СтррЗначения) = Тип("Структура") И СтррЗначения.Свойство("ПоследнееВремяТрека") Тогда
		ДобавитьКонстанту(ДокОбмена, "df297ad7-e2ce-478a-974e-fb399239e23e", СтррЗначения.ПоследнееВремяТрека);
	КонецЕсли;
	
	// ВидыДоставки
	Если ИспользоватьВидыДоставки Тогда
		ДобавитьКонстанту(ДокОбмена, "ea614964-30b8-4065-bd65-940e38db1f31", 1);	
	КонецЕсли;
	
	// ЗапретитьПродажиБезУказанияЦены, см. макет "Версии"
	ДобавитьКонстанту(ДокОбмена, "b7f84ce4-5991-4393-8897-fec2c8d7fc69", ЗапретитьПродажиБезУказанияЦены);	

	// РазрешитьСоздаватьЗаявкуНаВозврат
	ДобавитьКонстанту(ДокОбмена, "432faa73-f1cf-4bfe-bb26-83d5da949202", РазрешитьСоздаватьЗаявкуНаВозврат);	
	
	// СозданиеЗаданий
	ДобавитьКонстанту(ДокОбмена, "4280ae75-b17c-48c2-9140-4fc09853a4ad", 0);	
	
	// РедактироватьЗаданияПослеЗавершения
	ДобавитьКонстанту(ДокОбмена, "bd5b958e-d8fe-4155-8975-f9f42f701175", 0);	
	
	// УчитыватьПорядокВыполненияЗадач
	ДобавитьКонстанту(ДокОбмена, "4ec26a86-9edb-432c-9e3e-3ffd8096c165", 0);
	
	ДобавитьКонстанту(ДокОбмена, "7063885f-28d6-4694-8223-031f881c019d", РазрешитьВозвратНаОснованииЗаказа);
	
	ВыгрузитьПерсональныеНастройкиАгента(ДокОбмена);
	
	Если ПоказыватьРентабельность И ЗначениеЗаполнено(ВидЦеныДляРасчетаРентабельности) Тогда
		ДобавитьКонстанту(ДокОбмена, "623ac2fa-7b3a-47ad-b735-0693094f5dfa", ВидЦеныДляРасчетаРентабельности);
	КонецЕсли;
	
	//{{dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	ДобавитьКонстанту(ДокОбмена, "264e611b-5a65-44a8-9d48-7940828aeb43", ИспользоватьОплатуКаспи);
	
	СтрВидОплатыКаспи = ?(ИспользоватьОплатуКаспи, "EF11CDB0-57E7-4C0F-ECC2-49174E487D7D", "");
	
	ДобавитьКонстанту(ДокОбмена, "40f59eb1-4ba1-4951-943f-85eaa193015a", СтрВидОплатыКаспи);
	//}}dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CONSTANTS

КонецПроцедуры

Процедура ВыгрузитьПерсональныеНастройкиАгента(ДокОбмена)

	Если Не ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения) Тогда
		
		ОповеститьОСобытии("Не указаны настройки мобильного приложения.");
		
	Иначе
		
		Для Каждого ЭлементНастройки Из ВыбНастройкиАгента.НастройкиМобильногоПриложения Цикл
			
			Настройка = ЭлементНастройки.Значение;
			Если ПустаяСтрока(Настройка.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			//{{dm_231031 #mt-2774 https://dev.agentplus.online/browse/MT-2774	
			Если ЭлементНастройки.Ключ = "СозданиеКлиентов"
				Или ЭлементНастройки.Ключ = "РедактированиеКлиентов"
				Или ЭлементНастройки.Ключ = "СозданиеКонтрагентов"
				Или ЭлементНастройки.Ключ = "РедактированиеКонтрагентов" Тогда
				Продолжить;
			КонецЕсли;
			//}}dm_231031 #mt-2774
			
			Если ЭлементНастройки.Ключ = "ПоведениеДокументаБезКоординат" Тогда
				Если Настройка.Значение = "ЗапросПовторнойПопытки" Тогда
					Значение = "0"; 
				ИначеЕсли Настройка.Значение = "ПроводитьБезКоординат" Тогда
					Значение = "1";					
				ИначеЕсли Настройка.Значение = "ЗапрещатьПроводить" Тогда
					Значение = "2";					
				ИначеЕсли Настройка.Значение = "ЗапрещатьПроводитьИСохранять" Тогда
					Значение = "3";
				Иначе
					Текст = "Неизвестное значение у настройки ""ПоведениеДокументаБезКоординат"" = ""%1""!";
					ВызватьИсключение(СтрШаблон_(Текст, Настройка.Значение));
				КонецЕсли;
			ИначеЕсли ЭлементНастройки.Ключ = "ИспОграничениеСкидки" Тогда
				Значение = ?(Настройка.Значение = 0, 0, 1);
			ИначеЕсли ЭлементНастройки.Ключ = "СписокЗакладокЖурнала" Тогда
				Значение = Новый СписокЗначений;
				Для Каждого Элемент Из Настройка.Значение Цикл
					Значение.Добавить(Элемент.Значение);		
				КонецЦикла;
			//{{dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
			ИначеЕсли ЭлементНастройки.Ключ = "ИспользоватьВидОплаты" Тогда
				Если ИспользоватьОплатуКаспи И Настройка.Значение = Ложь Тогда
					Значение = Истина;
					ОповеститьОСобытии("Настройка ""Использовать виды оплаты"" выгружена со значением ""Истина"", так как используется оплата с Kaspi.kz");
				Иначе
					Значение = Настройка.Значение;
				КонецЕсли;
			//}}dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
			Иначе
				Значение = Настройка.Значение;
			КонецЕсли;
			
			ДобавитьКонстанту(ДокОбмена, Настройка.Идентификатор, ЗначениеВСтрокуДляXML(Значение)); //dm_231031 #mt-2774 https://dev.agentplus.online/browse/MT-2774  Настройка.Идентификатор -> Идентификатор
			
		КонецЦикла;

	КонецЕсли;
	
	ДобавитьКонстанту(ДокОбмена, "c21ed754-43d4-423d-bdb6-8d2f36b9f8d1", ВыбНастройкиАгента.Префикс);
	ВыгрузитьНастройкиФоновойПередачиТрека(ДокОбмена);
	ВыгрузитьНастройкиСозданияРедактированияКлиентов(ДокОбмена); //dm_231031 #mt-2774 https://dev.agentplus.online/browse/MT-2774 

КонецПроцедуры
	
Функция ПолучитьСоответствиеИдентификаторов() //dm_231031 #mt-2774 https://dev.agentplus.online/browse/MT-2774

	СтвРезультат = Новый Соответствие();
	СтвРезультат.Вставить("73355324-f463-428a-91d2-2868dd35a168", "b69ec9a6-565f-4e3e-844f-0060c5975fed"); //(МТ)СоздаватьКонтрагентов -> (МТ)СоздаватьТорговыеТочки
	СтвРезультат.Вставить("5616d1e9-bfa3-40fc-baba-852d16b5e774", "f52e3c06-48d6-4809-ae16-13c61e78eabd"); //(МТ)РедактироватьКонтрагентов -> (МТ)РедактироватьТорговыеТочки
	СтвРезультат.Вставить("b69ec9a6-565f-4e3e-844f-0060c5975fed", "73355324-f463-428a-91d2-2868dd35a168"); //(МТ)СоздаватьТорговыеТочки(МТ) -> СоздаватьКонтрагентов
	СтвРезультат.Вставить("f52e3c06-48d6-4809-ae16-13c61e78eabd", "5616d1e9-bfa3-40fc-baba-852d16b5e774"); //(МТ)РедактироватьТорговыеТочки(МТ) -> РедактироватьКонтрагентов
	
	Возврат СтвРезультат;
	
КонецФункции

Функция ПолучитьМассивКлючейНастроекСозданияРедактированияКлиентов() //dm_231031 #mt-2774 https://dev.agentplus.online/browse/MT-2774
	
	МРезультат = Новый Массив();
	МРезультат.Добавить("СозданиеКлиентов");
	МРезультат.Добавить("РедактированиеКлиентов");
	МРезультат.Добавить("СозданиеКонтрагентов");
	МРезультат.Добавить("РедактированиеКонтрагентов");
	
	Возврат МРезультат;
	
КонецФункции

Процедура ВыгрузитьНастройкиФоновойПередачиТрека(ДокОбмена)

	Если ЗначениеЗаполнено(ВыбНастройкиАгента.НастройкиМобильногоПриложения) И 
		ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("РасписаниеВеденияТрека") Тогда 
		Расписание = ВыбНастройкиАгента.НастройкиМобильногоПриложения.РасписаниеВеденияТрека.Значение;
		Если СтруктураЕстьСвойства(Расписание, "ВремяНачала,ВремяОкончания,ДниНедели,ПериодЗаписи") Тогда
			РабочееВремя = Расписание.ВремяНачала + "-" + Расписание.ВремяОкончания;
			ДобавитьКонстанту(ДокОбмена, "1de1dae1-a088-4c5b-a68e-4d233b49683a", РабочееВремя);
			ДобавитьКонстанту(ДокОбмена, "428f867c-0bf1-45b2-b812-ef1d284d3e3f", Расписание.ДниНедели);
			ДобавитьКонстанту(ДокОбмена, "e38fe34e-f36a-44c9-9dbd-a29f7c925940", Расписание.ПериодЗаписи);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВыгрузитьНастройкиСозданияРедактированияКлиентов(ДокОбмена) //dm_231031 #mt-2774 https://dev.agentplus.online/browse/MT-2774
	
	СтвНастройкиКлиент = ПолучитьСоответствиеИдентификаторов();
	
	МКлючиНастроек = ПолучитьМассивКлючейНастроекСозданияРедактированияКлиентов();
	
	Для Каждого Ключ Из МКлючиНастроек Цикл 
	
		СтррНастройка = ВыбНастройкиАгента.НастройкиМобильногоПриложения[Ключ];
		Идентификатор = ?(РежимВыгрузкиРекомендуемый, СтвНастройкиКлиент.Получить(СтррНастройка.Идентификатор), СтррНастройка.Идентификатор);  
		ДобавитьКонстанту(ДокОбмена, Идентификатор, ЗначениеВСтрокуДляXML(СтррНастройка.Значение));
		
	КонецЦикла;

КонецПроцедуры

Функция ЗапросыОбновления()

	Если Не ВременныеТаблицы.Свойство("ЗапросыМобильныхУстройств") Тогда // значит статусы партнеров не задавались
		Возврат Новый ТаблицаЗначений;
	Иначе
		Возврат ВременныеТаблицы.ЗапросыМобильныхУстройств;
	КонецЕсли;
	
КонецФункции  

// Возвращает документ-снование по объекту и расчетному документу.  
//
// Параметры:
//	ОбъектРасчетов - ДокументСсылка 
//  РасчетныйДокумент - ДокументСсылка - документв рачетов
//
// Возвращаемое значение: 
//	ДокументСсылка - документ основание
//
Функция ПолучитьДокументОснование(ОбъектРасчетов, РасчетныйДокумент)
	
	ДокументОснование = ?(ЗначениеЗаполнено(ОбъектРасчетов), ОбъектРасчетов, РасчетныйДокумент);
	
	Если ПоколениеКонфигурации(">=УТ_11.5") И ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ОбъектыРасчетов") Тогда
       СтррДокументОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Объект");    
	   СтррДокументОснование.Свойство("Объект", ДокументОснование);
   	КонецЕсли; 
   
	Возврат ДокументОснование;     
	
КонецФункции // ПолучитьДокументОснование() 

// Возвращает кассира по ордеру
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации	 - организация
//  Пользователь - СправочникСсылка.Пользователи - пользователь
// 
// Возвращаемое значение:
//  Произвольный - СправочникСсылка.Пользователи, Справочники.ОтветственныеЛицаОрганизаций - кассир
//
Функция ПолучитьКассира(Организация = Неопределено, Пользователь)

	Если ПоколениеКонфигурации(">=УТ_11.5.6") Тогда
		Возврат ПолучитьКассира_11_5_6(Организация, Пользователь);
	Иначе
		Возврат ПолучитьКассира_11_4(Пользователь);
	КонецЕсли;

КонецФункции    

// Возвращает кассира по ордеру для версии УТ 11.5.6 и выше
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - кассир
//
Функция ПолучитьКассира_11_4(Пользователь)

    Возврат Пользователь;
	
КонецФункции

// Возвращает кассира по ордеру для версии УТ 11.5.6 и выше
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации	 - организация
//  Пользователь - СправочникСсылка.Пользователи - пользователь
// 
// Возвращаемое значение:
//  СправочникСсылка.ОтветственныеЛицаОрганизаций - кассир
//
//@skip-check module-unused-method
Функция ПолучитьКассира_11_5_6(Организация, Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	СпрОтветственныеЛицаОрганизаций.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ОтветственныеЛицаОрганизаций КАК СпрОтветственныеЛицаОрганизаций
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ОтборПоОрганизации
	               |				ТОГДА СпрОтветственныеЛицаОрганизаций.Владелец = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И СпрОтветственныеЛицаОрганизаций.ФизическоеЛицо = &ФизическоеЛицо
	               |	И СпрОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицо
	               |	И НЕ СпрОтветственныеЛицаОрганизаций.ПометкаУдаления
	               |	И (СпрОтветственныеЛицаОрганизаций.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ СпрОтветственныеЛицаОрганизаций.ДатаНачала <= &ОтборПоДате)
	               |	И (СпрОтветственныеЛицаОрганизаций.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ СпрОтветственныеЛицаОрганизаций.ДатаОкончания >= &ОтборПоДате)"; 
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(Организация));
	//@skip-check wrong-string-literal-content
	Запрос.УстановитьПараметр("ФизическоеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизическоеЛицо")); 
	Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);  
	Запрос.УстановитьПараметр("ОтборПоДате", НачалоДня(ТекущаяДатаСеанса()));
	
    Результат = Запрос.Выполнить(); 
	Если Результат.Пустой() Тогда
		Возврат Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат  Выборка.Ссылка;

КонецФункции

#Область ВыгрузкаПодтверждений

Процедура ВыгрузитьПодтверждения(ДокОбмена) 
	
	ВыгрузитьПодтвержденияСправочников(ДокОбмена);
	ВыгрузитьПодтвержденияДокументов(ДокОбмена);
	ВыгрузитьПодтвержденияФотографий(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияСправочников(ДокОбмена)
	
	ТЗн = ПодтвержденияСДОткрыть("Справочники", ВыбНастройкиАгента.СсылкаМУ, Истина);
	
	Если ТЗн = Неопределено Тогда
		Возврат; // файл подтверждений или отсутствует или заблокирован, соответствующее предупреждение уже выведено
	КонецЕсли;      
	
	ТЗн.Сортировать("ИдВидСправочникаМТ");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	
	ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения справочников");
		
		СтррЗапись = Новый Структура("GUID");
		
		ИдВидСправочникаМТ = Неопределено;
		
		Для Каждого СтрокаТ Из ТЗн Цикл
			
			Если СтрокаТ.ИдВидСправочникаМТ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда 
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТ.ИдВидСправочникаМТ <> ИдВидСправочникаМТ Тогда
												
				Если ИдВидСправочникаМТ <> Неопределено Тогда
					ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
					ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
				КонецЕсли;
								
				ИдВидСправочникаМТ = СтрокаТ.ИдВидСправочникаМТ;
				
				ДокОбмена.ЗаписатьНачалоЭлемента("CATALOG");
				ДобавитьПоле(ДокОбмена, "GUID", ВРег(ИдВидСправочникаМТ));
				ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения справочника " + ВидОбъектаПоИдентификатору(ИдВидСправочникаМТ, Ложь, "Справочник"));
				ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
				    
			КонецЕсли;
			
			СтррЗапись.GUID = СтрокаТ.Идентификатор;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррЗапись);
			
		КонецЦикла;
		
		Если ИдВидСправочникаМТ <> Неопределено Тогда // закрываем открытые ранее теги
			ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
			ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
		КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияДокументов(ДокОбмена)
	
	ТЗн = ПодтвержденияСДОткрыть("Документы", ВыбНастройкиАгента.СсылкаМУ, Истина);

	СтррТаблицыЖурналовВДок = Новый Структура; // кэш для таблиц журнала виртуальных документов - по этим таблицам проверяем наличие виртуального документа в БД.
	
	ТЗн.Сортировать("ВидДокумента,Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	
		ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения документов");
		
		СтррЗапись 	 	 = Новый Структура("GUID"); // структура полей для подтверждения документов	
		ИдВидДокументаМТ = Неопределено;
		
		Для Каждого СтрокаТ Из ТЗн Цикл
			
			Если СтрокаТ.ИдВидДокументаМТ <> ИдВидДокументаМТ Тогда
				
				Если ИдВидДокументаМТ <> Неопределено Тогда
					ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
					ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENT
				КонецЕсли;
				ИдВидДокументаМТ = СтрокаТ.ИдВидДокументаМТ;
				ВидДокументаМТ 	 = ВидОбъектаПоИдентификатору(ИдВидДокументаМТ, Ложь, "Документ");
				ЭтоСчетФактура   = (ВидДокументаМТ = "СчетФактура");
				ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENT");
				ДобавитьПоле(ДокОбмена, "GUID", ВРег(ИдВидДокументаМТ));
				ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения документов " + ВидДокументаМТ);
				ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
				ДокМенеджер = ?(ВДокЭтоВиртуальныйДокумент(СтрокаТ.ВидДокумента), Неопределено, Документы[СтрокаТ.ВидДокумента]);
				// ^ Если ДокМенеджер = Неопределено, это значит, что нужно проверить наличие в БД виртуального документа.
				
			КонецЕсли;
			
			Если ПодтвержденияТолькоДляПроведенных 	// Нужно проверить - проведен документ или нет, если не проведен, то не включаем в выгрузку. 
				И Не ЭтоСчетФактура Тогда 			// Исключение для счетов-фактур, т.к. по счетам-фактурам важно передавать в МУ номера счетов-фактур
													// вне зависимости - проведен счет-фактура в УС или нет.
													
				Если ДокМенеджер = Неопределено Тогда // это виртуальный документ
					Если СтррТаблицыЖурналовВДок.Свойство(СтрокаТ.ВидДокумента) Тогда
						тзЖурнала = СтррТаблицыЖурналовВДок[СтрокаТ.ВидДокумента];
					Иначе
						тзЖурнала = ВОТЗЗагрузить(СтрокаТ.ВидДокумента, Истина);
						СтррТаблицыЖурналовВДок.Вставить(СтрокаТ.ВидДокумента, тзЖурнала);
					КонецЕсли; 
					стзЖурнала = тзЖурнала.Найти(СтрокаТ.Идентификатор, "ID");
					Если стзЖурнала = Неопределено Тогда
					    Продолжить; // не выгружаем, документ отсуствтует в БД
					ИначеЕсли стзЖурнала.Статус <> 1 Тогда // документ не проведен (у проведенного документа статус = 1)
						Продолжить;
					КонецЕсли; 
				Иначе // это обычный документ
					СсылкаДок = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.Идентификатор));
					Если Не ЭтоСсылкаНаНайденныйОбъект(СсылкаДок) Тогда 
						Продолжить; // не выгружаем, документ удален в ЦБД
					ИначеЕсли Не СсылкаДок.Проведен Тогда
						Продолжить; // не выгружаем, документ не проведен
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтррЗапись.GUID = СтрокаТ.Идентификатор;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррЗапись);
			
		КонецЦикла;
		
		Если ИдВидДокументаМТ <> Неопределено Тогда // закрываем открытые ранее теги
			ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
			ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENT
		КонецЕсли;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS
	
КонецПроцедуры

Процедура ВыгрузитьПодтвержденияФотографий(ДокОбмена)
	
	ТЗн = ПодтвержденияСДОткрыть("Фото", ВыбНастройкиАгента.СсылкаМУ, Истина);
	
	Если ТЗн = Неопределено Тогда
		Возврат; // файл подтверждений или отсутствует или заблокирован, соответствующее предупреждение уже выведено
	КонецЕсли;
	
	ТЗн.Сортировать("Дата Убыв");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	ДобавитьПоле(ДокОбмена, "Comment", "Подтверждения фотографий");
	ДокОбмена.ЗаписатьНачалоЭлемента("CONFIRMATIONS");
	
	СтррЗапись = Новый Структура("GUID");
	
	Для Каждого СтрокаТ Из ТЗн Цикл
		
		СтррЗапись.GUID = СтрокаТ.Идентификатор;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррЗапись);
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CONFIRMATIONS
	ДокОбмена.ЗаписатьКонецЭлемента(); //PICTURES
	
КонецПроцедуры

// ВыгрузкаПодтверждений
#КонецОбласти

#Область ВыгрузкаСправочников

// В параметре ТЗКартинки из процедуры возвращается ТЗ свойств картинок, 
// которые нужно выгрузить в МУ.
Процедура ВыгрузитьСправочники(ДокОбмена, МенеджерВТ, ТЗКартинки)

	ДокОбмена.ЗаписатьНачалоЭлемента("CATALOGS");
	ДобавитьПоле(ДокОбмена, "Comment", "Справочники");

	ВыгрузитьОрганизации(ДокОбмена, МенеджерВТ);
	ВыгрузитьВидыКонтактнойИнформации(ДокОбмена);
	ВыгрузитьВидыЦен(ДокОбмена, МенеджерВТ);
	ВыгрузитьСклады(ДокОбмена, МенеджерВТ);
	ВыгрузитьКатегорииДокументов(ДокОбмена);
	ВыгрузитьСтатусыПартнеров(ДокОбмена);                                                             
	ВыгрузитьЗапросыОбновления(ДокОбмена);
	ВыгрузитьМтКонтрагенты(ДокОбмена, МенеджерВТ);   
	ВыгрузитьМтТорговыеТочки(ДокОбмена, МенеджерВТ); 	
	ВыгрузитьСоответствияКонтрагентыПартнеры(ДокОбмена, МенеджерВТ);
	ВыгрузитьКонтактныхЛицПартнеров(ДокОбмена, МенеджерВТ);
	ВыгрузитьКонтактнуюИнформацию(ДокОбмена, МенеджерВТ);
	ВыгрузитьМТДоговоры(ДокОбмена, МенеджерВТ);
	ВыгрузитьСегментыСоглашений(ДокОбмена, МенеджерВТ);
		
	ВыгрузитьНоменклатуру(ДокОбмена, МенеджерВТ);
	ВыгрузитьЕдиницыИзмерения(ДокОбмена, МенеджерВТ);
	ВыгрузитьХарактеристики(ДокОбмена, МенеджерВТ);
	ВыгрузитьПерсональныеЦены(ДокОбмена, МенеджерВТ);
	ВыгрузитьПерсональныеСкидки(ДокОбмена, МенеджерВТ);
	ВыгрузитьШтрихКоды(ДокОбмена, МенеджерВТ);
	ВыгрузитьРезультатыПосещений(ДокОбмена);
	ВыгрузитьПечатныеФормы(ДокОбмена);
	ВыгрузитьВидыОплат(ДокОбмена);
	ВыгрузитьВидыДоставки(ДокОбмена);
	ВыгрузитьмтПланыПродаж(ДокОбмена, МенеджерВТ);
	ВыгрузитьВидыЗадач(ДокОбмена);
	ВыгрузитьКомандыДляМобильныхУстройств(ДокОбмена);
	ВыгрузитьДополнительныеОтчетыДляМУ(ДокОбмена);
	
	ТЗКартинки = ВыгрузитьСправочникИзображений(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьИсториюПродаж(ДокОбмена, МенеджерВТ);

	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOGS

КонецПроцедуры

Процедура ВыгрузитьОрганизации(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Организации");
	
	//dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828 A020,A021
	//dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838 A022,A023
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A02,A03,A04,A05,A06,A07,A09,A010,A011,A012,A013,A016,A017,A018,A020,A021,A022,A023");
			
	Запрос = Новый Запрос(ТекстЗапросаВыгрузкиОрганизаций());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	//{{dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	Каспи = Ложь;
	Если ИспользоватьОплатуКаспи И ВременныеТаблицы.Свойство("КаспиДанныеОрганизаций") Тогда
		ТЗн = ВременныеТаблицы.КаспиДанныеОрганизаций;
		Запрос.УстановитьПараметр("тзКаспи", ТЗн);
		Каспи = Истина;
	КонецЕсли;
	//}}dm_231226 #mt-2828
		
	Результат = Запрос.Выполнить(); 
	
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Ссылка = Выборка.Ссылка; // Организация
		
		КонтактнаяИнформация = КонтактнаяИнформацияОрганизации(Ссылка);
		
		Если ГКонфигурация = "УТ_UA" Тогда
			//@skip-check unknown-method-property
			//@skip-check use-non-recommended-method
			ИспользоватьНДС = Справочники.Организации.ПлательщикНДС(Ссылка, ТекущаяДата());	
		Иначе
			Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
				МодульУчетНДСУП = ОбщегоНазначения.ОбщийМодуль("УчетНДСУП");
				СтррПараметрыУчетаПоОрганизации = МодульУчетНДСУП.ПараметрыУчетаПоОрганизации(
														Ссылка,
														ТекущаяДатаСеанса());
						
				НалогообложениеНДС = СтррПараметрыУчетаПоОрганизации.ОсновноеНалогообложениеНДСПродажи;
			Иначе
				//@skip-check unknown-method-property
				НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Ссылка,, ТекущаяДатаСеанса());	
			КонецЕсли;
			ИспользоватьНДС    = (НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		КонецЕсли;	
		
		СтррПоля.GUID 	= Ссылка.УникальныйИдентификатор();
		СтррПоля.Name 	= Ссылка.Наименование;
		СтррПоля.A02 	= ИспользоватьНДС; // проставляем реквизит "ИспользоватьНДС"
		СтррПоля.A03	= КонтактнаяИнформация.ЮрАдрес;
		СтррПоля.A04	= КонтактнаяИнформация.Телефон;
		СтррПоля.A05	= Выборка.ИНН;
		СтррПоля.A06	= Выборка.КПП;
		СтррПоля.A07	= Выборка.ОГРН;
		СтррПоля.A09	= КонтактнаяИнформация.ФактАдрес;
		СтррПоля.A010	= ПрефиксОрганизацииИБ(Выборка.Префикс);
		//(( sk_230703 MOD-3451
		СтррПоля.A011	= СокрЛП(Выборка.БанкНаименование);
		СтррПоля.A012	= СокрЛП(Выборка.НомерСчета);
		СтррПоля.A013	= СокрЛП(Выборка.КоррСчет);
		СтррПоля.A016	= СокрЛП(Выборка.БИК);
		//)) sk_230703 
		СтррПоля.A017	= СокрЛП(Выборка.НаименованиеПолное);
		СтррПоля.A018	= ИспользоватьНДС; // признак "использовать счета-фактуры" - приравниваем к использованию НДС
		//{{dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
		СтррПоля.A020	= ?(Каспи, Выборка.Синоним, "");
		СтррПоля.A021	= ?(Каспи, Выборка.ИДОрганизации, "");
		//}}dm_231226 #mt-2828
		//{{dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
		СтррПоля.A022	= ?(Каспи, Выборка.ПараметрНомераДокумента, "");
		СтррПоля.A023	= ?(Каспи, Выборка.ПараметрФИОАгента, "");
		//}}dm_240122 #mt-2838
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьВидыКонтактнойИнформации(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыКонтактнойИнформации", Истина);

	ТипыКИ 			 = ТипыКонтактнойИнформации();
	ВидыКИ 			 = ВидыКонтактнойИнформацииВыгрузки();
	СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации;
	//@skip-check structure-consructor-too-many-keys
	СтррПоля 		 = Новый Структура("GUID,Name,A02,A03");
	
	Для Каждого Элемент Из ВидыКИ Цикл
		СтррПоля.GUID 	= Элемент.Ссылка.УникальныйИдентификатор();
		СтррПоля.Name 	= Элемент.Наименование;
		СтррПоля.A02	= ТипыКИ.Получить(Элемент.Тип);
		//@skip-check unknown-method-property
		Если Элемент.Родитель = СправочникВидыКИ.СправочникПартнеры И Не ИспользоватьПунктыРазгрузки Тогда
			СтррПоля.A03 = "Контрагенты";
		ИначеЕсли Элемент.Родитель = СправочникВидыКИ.СправочникКонтактныеЛицаПартнеров Тогда
			СтррПоля.A03 = "КонтактныеЛица";
		ИначеЕсли Элемент.Родитель = СправочникВидыКИ.СправочникКонтрагенты Тогда 
			СтррПоля.A03 =  ?(ИспользоватьПунктыРазгрузки, "Контрагенты", "ТорговыеТочки");
		ИначеЕсли ИспользоватьПунктыРазгрузки И Элемент.Родитель = СправочникВидыКИ.СправочникАлкПунктыРазгрузки Тогда
			СтррПоля.A03 = "ТорговыеТочки";
		Иначе
			Продолжить;
		КонецЕсли;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьВидыЦен(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТипыЦен");
    //@skip-check structure-consructor-too-many-keys
    СтррПоля = Новый Структура("GUID,Name,Code,A02");
	
	Счетчик = 0;
	ВыборкаРезультат = ВидыЦенВыгрузки(МенеджерВТ);
	
	Пока ВыборкаРезультат.Следующий() Цикл
		СтррПоля.GUID = ВыборкаРезультат.Ссылка.УникальныйИдентификатор();
		СтррПоля.Name = ВыборкаРезультат.Наименование;
		СтррПоля.Code = Счетчик;
		СтррПоля.A02  = ВыборкаРезультат.ЦенаВключаетНДС;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьСклады(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Склады");

	СтррПоля = Новый Структура("GUID,Code,Name");	
	
	Выборка = СкладыВыгрузки(МенеджерВТ);
	Счетчик = 0;
	Пока Выборка.Следующий() Цикл
		СтррПоля.GUID = Выборка.Ссылка.УникальныйИдентификатор();
		СтррПоля.Code = Счетчик;
		СтррПоля.Name = Выборка.Наименование;		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
		Счетчик = Счетчик + 1;
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьКатегорииДокументов(ДокОбмена)
	
	Если Не ВременныеТаблицы.Свойство("КатегорииДокументов") Тогда // значит категории документов не задавались
		Возврат;
	КонецЕсли;
	
	Категории = ВременныеТаблицы.КатегорииДокументов;

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КатегорииДокументов");
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A02,A03");

	Для Каждого ЭлементКатегории Из Категории Цикл
		СтррПоля.GUID = ЭлементКатегории.Идентификатор;
		СтррПоля.Name = ЭлементКатегории.Наименование;
		СтррПоля.A02  = ЦветВСтроку(ЭлементКатегории.Цвет);
		СтррПоля.A03  = СтрСоединить_(ЭлементКатегории.СписокДокументов.ВыгрузитьЗначения(), ",");
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьСтатусыПартнеров(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.СтатусыКонтрагентов");
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A02,A03");

	ВыгружаемыеСтатусы = СтатусыПартнеровВыгрузки();
	Для Каждого ЭлементСтатуса Из ВыгружаемыеСтатусы Цикл
		СтррПоля.GUID = ВРег(ЭлементСтатуса.Идентификатор);
		СтррПоля.Name = ЭлементСтатуса.Наименование;
		СтррПоля.A02  = ЭлементСтатуса.Предупреждение;
		СтррПоля.A03  = ЦветВСтроку(ЭлементСтатуса.Цвет);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьЗапросыОбновления(ДокОбмена)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Запросы");
	СтррПоля = Новый Структура("GUID,Name");

	ВыгружаемыеЗапросы = ЗапросыОбновления();
	Для Каждого ЭлементЗапроса Из ВыгружаемыеЗапросы Цикл
		СтррПоля.GUID = ЭлементЗапроса.Идентификатор;
		СтррПоля.Name = ЭлементЗапроса.Наименование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Процедура ВыгрузитьМтКонтрагенты(ДокОбмена, МенеджерВТ)
	
	//Для Алк прод режим выгрузки пока не доступен !!!
	
	Если ГКонфигурация = "УТ_АП" И НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов Тогда 
		ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ);
		
	ИначеЕсли ГКонфигурация = "УТ_АП" И НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов Тогда
		ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ);
		
	ИначеЕсли НЕ РежимВыгрузкиРекомендуемый Тогда
		ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ);
		
	ИначеЕсли РежимВыгрузкиРекомендуемый И ИспользоватьКонтрагентов Тогда
		ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ);
		
	Иначе
		//Ничего не выгружаем
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыгрузитьМтТорговыеТочки(ДокОбмена, МенеджерВТ)

	Если НЕ РежимВыгрузкиРекомендуемый И ГКонфигурация = "УТ_АП" И ИспользоватьПунктыРазгрузки Тогда 
		ВыгрузитьПунктыРазгрузки_УТАП(ДокОбмена, МенеджерВТ);                           				// Для алк продукции режим выгрузки рекомендуемый не доступен.
		
	ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ИспользоватьАдресаДоставки Тогда 
		ВыгрузитьАдресаДоставки(ДокОбмена, МенеджерВТ);  												// При использовании адресов доставки, режим выгрузки рекомендуемый не доступен.
		
	ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ИспользоватьКонтрагентов Тогда
		ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ);													// Выгружаем Контрагентов в справочник МТ Торговые точки
		
	ИначеЕсли РежимВыгрузкиРекомендуемый Тогда
		ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ); 														// Выгружаем Партнеров    в справочник МТ Торговые точки

	Иначе
		//Этой ситуации не должно быть.
		
	КонецЕсли;          	

КонецПроцедуры

// Выгружает партнеров в справочник МТ: ТорговыеТочки или Контрагенты, зависит от режима выгрузки "РежимВыгрузкиРекомендуемый". 
Процедура ВыгрузитьПартнеров(ДокОбмена, МенеджерВТ)   
	
	Если РежимВыгрузкиРекомендуемый Тогда
		//Партнеры выгружаются в МТ "Торговые точки".
		ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки"); 
		//@skip-check structure-consructor-too-many-keys
		СтррПоля   = Новый Структура("GUID, Name, GrpId0, A07, A09, A010, A011, A020");
		СтррТЧ	   = Новый Структура("GUID, Comment", "34112818-d105-4a9c-adcd-40c19ba97951", "Сегменты");	
		СтррПоляТЧ = Новый Структура("GUID, CtlgId, A01");
	Иначе
		//Партнеры выгружаются в МТ "Контрагенты"
		ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Контрагенты"); 
		//@skip-check structure-consructor-too-many-keys
		СтррПоля   = Новый Структура("GUID, Name, GrpId0, A06, A012, A016, A017, A018, A023");
		СтррТЧ	   = Новый Структура("GUID, Comment", "321b0abd-951f-4c01-a77e-331d2dc91620", "Сегменты");	
		СтррПоляТЧ = Новый Структура("GUID, CtlgId, A01");
	КонецЕсли;
	
	ВыгружатьСегменты = ИспользоватьСоглашения(); // Если выгружаем соглашения, то выгружаем и сегменты партнеров. Сегменты партнеров выгружаются справочнике "Контрагенты" в ТЧ "Сегменты" МТ.
	
	РезультатЗапроса = ДанныеПоПартнерамДляВыгрузки(МенеджерВТ);
	
	Если ВыгружатьСегменты Тогда 
		ТЗСоглашения = ПолучитьСоглашенияПоУмолчанию(МенеджерВТ, Истина);
		СтррПоля.Вставить(?(РежимВыгрузкиРекомендуемый, "A023", "A08"));
	КонецЕсли;	
	
	Выборка = ?(ВыгружатьСегменты, РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), РезультатЗапроса.Выбрать());
	
	Если Не ВыгружатьСегменты Тогда // выгрузка без ТЧ "Сегменты"
		
		Пока Выборка.Следующий() Цикл
			ВыгрузитьПартнера(ДокОбмена, СтррПоля, Выборка, Истина); 
		КонецЦикла;			
	
	Иначе // выгрузка с ТЧ "Сегемнты"
		
		ТекПартнер = Неопределено;
		ОткрытТэгТаблицы = Ложь;
		ИдПустойСегментПартнера = ИдПустойСегментПартнера();
		
		Пока Выборка.Следующий() Цикл
			
			ВыборкаСсылка = Выборка.Ссылка;
			
			Если ВыборкаСсылка <> ТекПартнер Тогда
				
				Если ОткрытТэгТаблицы Тогда
					ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
					ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие TABLES >
					ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие ITEM >
					ОткрытТэгТаблицы = Ложь;
				КонецЕсли; 
				ТекПартнер = ВыборкаСсылка;
				
				Если РежимВыгрузкиРекомендуемый Тогда
					СтррПоля.A023 = ПолучитьСоглашениеПоУмолчанию(ТЗСоглашения, Выборка.Ссылка);
				Иначе
					СтррПоля.A08  = ПолучитьСоглашениеПоУмолчанию(ТЗСоглашения, Выборка.Ссылка); 				
				КонецЕсли;
				
				ВыгрузитьПартнера(ДокОбмена, СтррПоля, Выборка, Ложь); // Узел ITEM остается открытым

				ДокОбмена.ЗаписатьНачалоЭлемента("TABLES"); // открытие TABLES
				ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррТЧ); // выгружаем ТЧ для каждого партнера, т.к. если у него нет сегмента, выгружаем ссылку на пустой сегмент
				ОткрытТэгТаблицы = Истина;
				СтррПоляТЧ.CtlgId = ВыборкаСсылка;				
				
			КонецЕсли;
			
			СтррПоляТЧ.GUID   = Новый УникальныйИдентификатор();
			СтррПоляТЧ.A01	  = ?(ЗначениеЗаполнено(Выборка.Сегмент), Выборка.Сегмент, ИдПустойСегментПартнера);
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧ);
			
		КонецЦикла;
		
		Если ОткрытТэгТаблицы Тогда
			ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие TABLES >
			ДокОбмена.ЗаписатьКонецЭлемента(); // заркытие ITEM >
		КонецЕсли;
	
	КонецЕсли; 

	ДокОбмена.ЗаписатьКонецЭлемента(); 
	
	ВыгрузитьГруппировкиПартнеров(ДокОбмена, МенеджерВТ);
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

// Возвращает ТЗн индивидуальные соглашения для партнеров, по наиболее поздней дате(Справочники.СоглащенияСКлиентами.Дата)
// Если Соглашения не выгружается, то возвращает Неопределено.
// Параметры:
//   МенеджерВТ	 - МенеджерВременныхТаблиц - ссылка на менеджер временных таблиц. 
//   ФлПартнер	 - Булево - Если истина то формируем ТЗн для партнеров, иначе для контрагентов.
// 
// Возвращаемое значение:
//   Произвольный - ТаблицаЗначений или Неопределено 
//
Функция ПолучитьСоглашенияПоУмолчанию(МенеджерВТ, ФлПартнер)
	
	ТЗСоглашения = Неопределено;
	
	ВТ_Соглашения = МенеджерВТ.Таблицы.Найти("ВТ_Соглашения");
	Если ВТ_Соглашения <> Неопределено Тогда
		Запрос = Новый Запрос;
		//Партнер в индивидуальных соглашениях всегда заполнен.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_Соглашения.Ссылка КАК Соглашение,
		               |	ВТ_Соглашения.[ПартнерКонтрагент] КАК ПартнерКонтрагент,
		               |	ВТ_Соглашения.Дата КАК ДатаСоглашения
		               |ПОМЕСТИТЬ ВТ_СоглашенияИндивидуальные
		               |ИЗ
		               |	ВТ_Соглашения КАК ВТ_Соглашения
		               |ГДЕ
		               |	ВТ_Соглашения.Типовое = ЛОЖЬ [УсловиеПустыхКонтрагентов]
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент КАК ПартнерКонтрагент,
		               |	МАКСИМУМ(ВТ_СоглашенияИндивидуальные.ДатаСоглашения) КАК ДатаСоглашения
		               |ПОМЕСТИТЬ ВТ_МаксДата
		               |ИЗ
		               |	ВТ_СоглашенияИндивидуальные КАК ВТ_СоглашенияИндивидуальные
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	МИНИМУМ(ВТ_СоглашенияИндивидуальные.Соглашение) КАК Соглашение,
		               |	ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент КАК ПартнерКонтрагент
		               |ИЗ
		               |	ВТ_СоглашенияИндивидуальные КАК ВТ_СоглашенияИндивидуальные
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксДата КАК ВТ_МаксДата
		               |		ПО ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент = ВТ_МаксДата.ПартнерКонтрагент
		               |			И ВТ_СоглашенияИндивидуальные.ДатаСоглашения = ВТ_МаксДата.ДатаСоглашения
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_СоглашенияИндивидуальные.ПартнерКонтрагент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_СоглашенияИндивидуальные
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_МаксДата";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ПартнерКонтрагент]", ?(ФлПартнер, "Партнер", "Контрагент"));		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеПустыхКонтрагентов]", ?(ФлПартнер, "", "И НЕ ВТ_Соглашения.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка)"));
		
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ; 
		ТЗСоглашения = Запрос.Выполнить().Выгрузить();
	КонецЕсли;		
	
	Возврат ТЗСоглашения;
КонецФункции

// Функция - Получить соглашение по умолчанию
//
// Параметры:
//  ТЗСоглашения - ТаблицаЗначений		 - 2 колонки (Соглашение, Партнер)
//  ПартнерКонтрагент - СправочникСсылка - Партнер или Контрагент
// 
// Возвращаемое значение:
//   Произвольный - УникальныйИдентификатор или Неопределено - идентификатор соглашения. Если индивидуальное соглашение не найдена,для партнера, то возвращается пустая строка. 
//
Функция ПолучитьСоглашениеПоУмолчанию(ТЗСоглашения, ПартнерКонтрагент)
	
	Соглашение = "";
	Если ТЗСоглашения <> Неопределено Тогда
		СТЗРезультат = ТЗСоглашения.Найти(ПартнерКонтрагент, "ПартнерКонтрагент");
		Если СТЗРезультат <> Неопределено Тогда
			Соглашение = СТЗРезультат.Соглашение.УникальныйИдентификатор();
			ТЗСоглашения.Удалить(СТЗРезультат); //Удаляем найденную строчку для ускорения поиска других партнеров
		КонецЕсли;
	КонецЕсли;
	
	Возврат Соглашение;	
КонецФункции

// Выгружает данные партнера
//
// Параметры:
//	ДокОбмена		 	 - ЗаписьXML 		   		  - XML-документ выгрузки
//	СтррПоля   		  	 - Структура 		  		  - структура выгружаемых полей
//	Выборка    		  	 - ВыборкаИзРезультатаЗапроса - выборка
//	ЗакрытьУзел 	  	 - Булево 			  		  - признак закрытия узла
//
Процедура ВыгрузитьПартнера(ДокОбмена, СтррПоля, Выборка, ЗакрытьУзел)
	
	ВыборкаСсылка = Выборка.Ссылка;
	СтррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
	СтррПоля.Name = ВыборкаСсылка.Наименование;
	//(( sk_231110 MOD-3323
	//СтррПоля.GrpId0 = ВыборкаСсылка.ГруппаДоступа;
	Если ВыборкаСсылка.ГруппаДоступа.ПометкаУдаления Тогда
		СтррПоля.GrpId0 = Неопределено; 
	Иначе
		СтррПоля.GrpId0 = ВыборкаСсылка.ГруппаДоступа;
	КонецЕсли;	
	//)) sk_231110
	СтрНевыгружаемыеПоля = Неопределено;
	Если РежимВыгрузкиРекомендуемый Тогда
		СтррПоля.A07  = ВыборкаСсылка.Комментарий;
		СтррПоля.A011 = Выборка.ИспользоватьПерсональныеЦены;
		СтррПоля.A020 = ВРег(Выборка.Статус);
		Если ЗначениеЗаполнено(Выборка.Долгота) И ЗначениеЗаполнено(Выборка.Широта) Тогда  
			СтррПоля.A09  = КоординатаКонвертироватьИз1СВМТ(Выборка.Долгота); 
			СтррПоля.A010 = КоординатаКонвертироватьИз1СВМТ(Выборка.Широта);	
		Иначе
			СтрНевыгружаемыеПоля = "A09, A010"; 
		КонецЕсли;
	Иначе
		СтррПоля.A06  = ВРег(Выборка.Статус);
		СтррПоля.A012 = СокрЛП(ВыборкаСсылка.НаименованиеПолное);
		СтррПоля.A018 = Выборка.ИспользоватьПерсональныеЦены;
		СтррПоля.A023 = ВыборкаСсылка.Комментарий;
		Если ЗначениеЗаполнено(Выборка.Долгота) И ЗначениеЗаполнено(Выборка.Широта) Тогда
			СтррПоля.A016 = КоординатаКонвертироватьИз1СВМТ(Выборка.Долгота);
			СтррПоля.A017 = КоординатаКонвертироватьИз1СВМТ(Выборка.Широта);
		Иначе
			СтрНевыгружаемыеПоля = "A016, A017"; 
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, ЗакрытьУзел, СтрНевыгружаемыеПоля); 

КонецПроцедуры

Процедура ВыгрузитьКонтактныхЛицПартнеров(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактныеЛица");

	Если РежимВыгрузкиРекомендуемый Тогда
		//@skip-check structure-consructor-too-many-keys
		СтррПоля = Новый Структура("GUID,Name,A02,A04,A05");
	Иначе
		//@skip-check structure-consructor-too-many-keys
		СтррПоля = Новый Структура("GUID,Name,A02,A03,A05");
	КонецЕсли;
	
	РезультатЗапроса = ДанныеПоКонтактнымЛицамПартнеровВыгрузки(МенеджерВТ);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыборкаСсылка = Выборка.Ссылка;
		СтррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
		СтррПоля.Name = ВыборкаСсылка.Наименование;
		СтррПоля.A02  = Выборка.ДатаРождения;
		Если РежимВыгрузкиРекомендуемый Тогда
			СтррПоля.A04  = Выборка.Партнер;
		Иначе
			СтррПоля.A03  = Выборка.Партнер;
		КонецЕсли;
		СтррПоля.A05  = Выборка.Комментарий;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Функция ИдПустойСегментПартнера() Экспорт
	
	Возврат "108E834B-33F5-4F8F-90C4-555E4199F974";
	
КонецФункции

Процедура ВыгрузитьСегментыСоглашений(ДокОбмена, МенеджерВТ)
	
	Если Не ИспользоватьСоглашения() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Сегменты");
	СтррПоля   = Новый Структура("GUID, Name");
	СтррТЧ	   = Новый Структура("GUID, Comment", "eebd884a-ed7c-49ca-8be9-0dd769fd13af", "Договоры");
	СтррПоляТЧ = Новый Структура("GUID, CtlgId, A01");
	ВыборкаСегмент = ДанныеПоСегментамСоглашений(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСегмент.Следующий() Цикл
		ВыгрузитьСегментСоглашения(ДокОбмена, СтррПоля, ВыборкаСегмент); // Открытие ITEM	
		ВыборкаСегментДетализация = ВыборкаСегмент.Выбрать();
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES"); 	 			     // Открытие TABLES
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррТЧ);			     // Открытие TABLE
		Пока ВыборкаСегментДетализация.Следующий() Цикл
			СтррПоляТЧ.CtlgId = ВыборкаСегментДетализация.Сегмент;
			СтррПоляТЧ.GUID   = Новый УникальныйИдентификатор();
			СтррПоляТЧ.A01	  = ВыборкаСегментДетализация.Соглашение;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧ);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена); 				     // Закрытие TABLE 
		ДокОбмена.ЗаписатьКонецЭлемента(); 							     // Закрытие TABLES >
		ДокОбмена.ЗаписатьКонецЭлемента(); 							     // Закрытие ITEM >
	КонецЦикла;
		
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьСегментСоглашения(ДокОбмена, СтррПоля, Выборка)
	
	Если ЗначениеЗаполнено(Выборка.Сегмент) Тогда 
		СтррПоля.GUID = Выборка.Сегмент;
		СтррПоля.Name = Выборка.Сегмент.Наименование;
	Иначе 
		СтррПоля.GUID = ИдПустойСегментПартнера();
		СтррПоля.Name = "<Не указано>";
	КонецЕсли;
	
	ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь); // остается открытым узел ITEM	

КонецПроцедуры

Процедура ВыгрузитьКонтрагентов(ДокОбмена, МенеджерВТ)
	
	//1. Определяем в какой справочник МТ записывать данные Контрагенты или ТорговыеТочки
	Если (ГКонфигурация = "УТ_АП" И НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов) Тогда
		ФлКонтрагенты = Истина;
	//(( sk_220523 MOD-3161
	//ИначеЕсли гКонфигурация = "УТ_АП" Тогда
	//	Возврат; 		
	ИначеЕсли ГКонфигурация = "УТ_АП" И НЕ РежимВыгрузкиРекомендуемый И ИспользоватьКонтрагентов Тогда
		ФлКонтрагенты = Ложь; // Для алк продукции режим выгрузки рекомендуемый не доступен.
	//)) sk_220523 	
	ИначеЕсли РежимВыгрузкиРекомендуемый И ИспользоватьКонтрагентов Тогда
		ФлКонтрагенты = Истина;
	ИначеЕсли НЕ РежимВыгрузкиРекомендуемый Тогда
		ФлКонтрагенты = Ложь;
	Иначе
		Возврат; 																					//Не выгружаем Контрагентов
	КонецЕсли;
	
	//2. Персональные цены 																			
	ИспользоватьПерсональныеЦены = ВыгружатьПерсональныеЦены(); 									//Признак использования персональных цен, требуется тестирование.
	Если ИспользоватьПерсональныеЦены Тогда
		ТЗСоглашения = ПолучитьСоглашенияПоУмолчанию(МенеджерВТ, Ложь);
	КонецЕсли;

	//3. Определяем стркутуру данных
	Если ФлКонтрагенты Тогда
		ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Контрагенты");    
		//@skip-check structure-consructor-too-many-keys
		СтррПоля = Новый Структура("GUID,Name,A012,A013,A014,A018,A022,A023,A026");
		Если ИспользоватьПерсональныеЦены Тогда
			СтррПоля.Вставить("A08");
		КонецЕсли;
		
	Иначе
		ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки");
		//@skip-check structure-consructor-too-many-keys
		СтррПоля = Новый Структура("GUID,Name,A02,A07,A011");
		Если ИспользоватьПерсональныеЦены Тогда
			СтррПоля.Вставить("A023");
		КонецЕсли;

	КонецЕсли;
	
	//4. Выборка 
	Выборка = ДанныеПоКонтрагентамДляВыгрузки(МенеджерВТ);

	//5. Заполнение
	Пока Выборка.Следующий() Цикл
		СтррПоля.GUID 	= Выборка.Ссылка.УникальныйИдентификатор();
		СтррПоля.Name 	= Выборка.Наименование;
		
		Если ФлКонтрагенты Тогда
			СтррПоля.A012	= Выборка.НаименованиеПолное;
			СтррПоля.A013	= Выборка.ИНН + ?(ПустаяСтрока(Выборка.ИНН), "", "/") + Выборка.КПП; 
			СтррПоля.A014	= СокрЛП(Выборка.НомерСчета); // sk_230703 MOD-3451
			СтррПоля.A018	= ИспользоватьПерсональныеЦены;
			СтррПоля.A022	= Выборка.КодПоОКПО;
			СтррПоля.A023	= Выборка.ДополнительнаяИнформация;
			СтррПоля.A026	= Выборка.ГоловнойКонтрагент;
			Если ИспользоватьПерсональныеЦены Тогда
				СтррПоля.A08 = ПолучитьСоглашениеПоУмолчанию(ТЗСоглашения, Выборка.Ссылка);
			КонецЕсли;
		Иначе
			СтррПоля.A02	= Выборка.Партнер;
			СтррПоля.A07	= Выборка.ДополнительнаяИнформация;
			СтррПоля.A011	= ИспользоватьПерсональныеЦены;
			Если ИспользоватьПерсональныеЦены Тогда
				СтррПоля.A023 = ПолучитьСоглашениеПоУмолчанию(ТЗСоглашения, Выборка.Ссылка);
			КонецЕсли;
		Конецесли;	
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);	
	
КонецПроцедуры
	
// Справочник нужен для режима "Рекомендуемый".
Процедура ВыгрузитьСоответствияКонтрагентыПартнеры(ДокОбмена, МенеджерВТ)
	
	Если НЕ РежимВыгрузкиРекомендуемый  Тогда
		//Возможно нужно добавить условия, что выгружать соответствие если стоит признак использовать контрагентов, адреса доставки итд, н в ПРОФ этого нет, 
		//	выгружаются всегда, когда стоит режим рекомендуемый.
		Возврат; //Для режима "Совместимый" выгрузка этого справочника не требуется, требуется только для режима "Рекомендуемый"
	Конецесли;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Соответствия", Истина); 
	СтррПоля = Новый Структура("GUID,A01,A02");
	
	Выборка = МенеджерВТ.Таблицы.Найти("ВТ_Соответствия").ПолучитьДанные().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтррПоля.GUID 	= Новый УникальныйИдентификатор();
		СтррПоля.A01 	= Выборка.Контрагент;
		СтррПоля.A02 	= Выборка.Партнер;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);	
КонецПроцедуры

Процедура ВыгрузитьКонтактнуюИнформацию(ДокОбмена, МенеджерВТ)
	
	Если ГКонфигурация = "УТ_АП" И ИспользоватьПунктыРазгрузки Тогда 
		ВыгрузитьКонтактнуюИнформацию_УТ_АП(ДокОбмена, МенеджерВТ);
	Иначе 
		ВыгрузитьКонтактнуюИнформацию_УТ(ДокОбмена, МенеджерВТ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьКонтактнуюИнформацию_УТ(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактнаяИнформация", Истина);

	СтвТипыКИ = ТипыКонтактнойИнформации();
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,A01,A02,A03,A04,A05,A06");
	
	РезультатЗапроса = ДанныеПоКонтактамПартнеровИКонтактныхЛицВыгрузки(МенеджерВТ);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтррПоля.GUID = Новый УникальныйИдентификатор();
		Если РежимВыгрузкиРекомендуемый Тогда
			СтррПоля.A01 = ?(ИспользоватьКонтрагентов, Выборка.Контрагент, "");
			СтррПоля.A02 = Выборка.Партнер;
		Иначе
			СтррПоля.A01 = Выборка.Партнер;
			СтррПоля.A02 = ?(ИспользоватьКонтрагентов, Выборка.Контрагент, "");
		КонецЕсли;
		СтррПоля.A03 = Выборка.КонтактноеЛицо;
		СтррПоля.A04 = СтвТипыКИ[Выборка.Тип];
		СтррПоля.A05 = Выборка.Вид;
		СтррПоля.A06 = Выборка.Представление;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

// Выгружает Договоры или соглашения в справочник МТ Договоры.
//
// Параметры:
//   ДокОбмена - ЗаписьXML - XML-документ.
//   МенеджерВТ - МенеджерВременныхТаблиц - ссылка на Менеджер временных таблиц.
//   ВыгружатьДоговоры - Булево - Если Истина, то в справочник МТ Договоры выгружаются договоры, если Ложь то 
//   в справочник МТ Договоры выгружаются соглашения. 
//
//@skip-check module-unused-method
Процедура ВыгрузитьМТДоговоры(ДокОбмена, МенеджерВТ, Знач ВыгружатьДоговоры = Неопределено)
	
	Если ВыгружатьДоговоры = Неопределено Тогда
		Если ИспользоватьДоговоры() Тогда
			ВыгружатьДоговоры = Истина;  //Выгружать договоры
		ИначеЕсли ИспользоватьСоглашения() Тогда
			ВыгружатьДоговоры = Ложь;    //Выгружать соглашения
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;		
		
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Договоры");
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A02,A03,A04,A05,A06,A07,A010"); 
	//(( sk_231113 MOD-3531
	Если Не ВыгружатьДоговоры Тогда
		СтррПоля.Вставить("A09");
	КонецЕсли;
	//)) sk_231113
	
	Если ВыгружатьДоговоры Тогда
		//Договоры
		МенеджерВТКонтрагенты(МенеджерВТ);
		МенеджерВТДоговоры(МенеджерВТ);
		РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_Договоры").ПолучитьДанные();
	Иначе
		//Соглашения
		МенеджерВТСоглашения(МенеджерВТ);
		РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_Соглашения").ПолучитьДанные();
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтррПоля.GUID = Выборка.Ссылка;
		СтррПоля.Name = Выборка.Наименование;
		
		Если РежимВыгрузкиРекомендуемый И (ВыгружатьДоговоры ИЛИ ИспользоватьКонтрагентов ИЛИ ИспользоватьПунктыРазгрузки) Тогда
			СтррПоля.A02 = Выборка.мтТорговаяТочка;
		Иначе
			СтррПоля.A02 = Выборка.мтКлиент; 
		КонецЕсли;	
			
		СтррПоля.A03 = Выборка.Дата;
		СтррПоля.A04 = Выборка.ДатаОкончанияДействия;
		СтррПоля.A05 = Выборка.Организация;
		СтррПоля.A06 = ?(ВыгружатьДоговоры, "", Выборка.ВидЦен); // ВидЦен отсутствует в справочнике ДоговорыКонтрагентов
		СтррПоля.A07 = Выборка.ИспользоватьНДС; 
		
		//(( sk_231113 MOD-3531
		Если Не ВыгружатьДоговоры Тогда
			СтррПоля.A09 = ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", Выборка.ФормаОплаты);	
		КонецЕсли;
		//)) sk_231113

		Если РежимВыгрузкиРекомендуемый Тогда
			СтррПоля.A010 = Выборка.мтКлиент;	
		ИначеЕсли ИспользоватьКонтрагентов ИЛИ ИспользоватьПунктыРазгрузки Тогда
			СтррПоля.A010 = Выборка.мтТорговаяТочка;
		КонецЕсли;	
			
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьНоменклатуру(ДокОбмена, МенеджерВТ)
	
	ВключатьКодВНаименование 	= ВключатьКодыНоменклатурыВНаименование И ЗначениеЗаполнено(РежимВыгрузкиКодовНоменклатуры);
	
	// Структуры ТЧ Свойства: КоличествоОбщ, КоличествоТЧ, КоличествоАтрибутов, Выборка, СтррТЧ, СтррТЧПоследняя
	СтррПараметрыТЧОстатки = ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, "Остатки"); 
	СтррПараметрыТЧЦены    = ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, "Цены");
	
	// Выгружать ТЧ
	ВыгружатьТабличныеЧасти = ?(СтррПараметрыТЧОстатки.КоличествоТЧ > 0 Или СтррПараметрыТЧЦены.КоличествоТЧ > 0, Истина, Ложь);
	
	//++ СтррПоля - создание, заполнение 	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,Code,GrpId0,GrpId1,A03,A04,A06,A08,A011,A013,A014,A015,A035,A037,A041,A042,A043,A044,A045,A046,A048,A050,A053,A054,A056");
	// Товарная категория (для группировки по товарным категориям)
	Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		СтррПоля.Вставить("GrpId2", "");
	КонецЕсли;
	Если РежимВыгрузкиКодовНоменклатуры = "КОД" Тогда
		ФлВыгрузкаКода = Истина;
	ИначеЕсли РежимВыгрузкиКодовНоменклатуры = "АРТИКУЛ" Тогда
		ФлВыгрузкаКода = Ложь;
	КонецЕсли;
	// Остатки
	Для Счетчик = 0 По СтррПараметрыТЧОстатки.КоличествоОбщ Цикл
		СтррПоля.Вставить("A03" + Счетчик);
		Если Счетчик = СтррПараметрыТЧОстатки.КоличествоАтрибутов - 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	 	
	// Цены
	Для Счетчик = 0 По СтррПараметрыТЧЦены.КоличествоОбщ Цикл
		СтррПоля.Вставить("A02" + Счетчик);
		Если Счетчик = СтррПараметрыТЧЦены.КоличествоАтрибутов - 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	 
	// Ограничение скидки. 
	Если ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("ИспОграничениеСкидки") Тогда
		СтррНастройка = ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспОграничениеСкидки;
		Если НЕ ПустаяСтрока(СтррНастройка.Идентификатор) И СтррНастройка.Значение > 0 Тогда
			СтррПоля.Вставить("A036", СтррНастройка.Значение);	
		КонецЕсли;
	КонецЕсли;
	// Минимальная цена 
	МинимальныйВидЦеныАгента = МинимальныйВидЦены();
	ВыгружатьМинимальныйВидЦены = ЗначениеЗаполнено(МинимальныйВидЦеныАгента);
	Если ВыгружатьМинимальныйВидЦены Тогда
		СтррПоля.Вставить("A040");
		СтррПоискМинЦены = Новый Структура("ВидЦены", МинимальныйВидЦеныАгента); // Сруктура для поиска минимальной цены товара
	КонецЕсли;
	// Мобильный Склад
	ВыгружатьМобильныйСклад = ?(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ТорговляCКолес.Значение И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), Истина, Ложь);
	Если ВыгружатьМобильныйСклад Тогда
		СтррПоискМобильныйСклад = Новый Структура("Склад", ВыбНастройкиАгента.МобильныйСклад);	
	Иначе 
		СтррПоля.A041 = 0;
	КонецЕсли;
	
	ФлИспользоватьМаркировки = ИспользоватьМаркировки();
	//-- СтррПоля
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Номенклатура");
	
	//Групировки номенклатуры
	МГруппыНоменклатуры = Новый Массив; 
	МВидыНоменклатуры   = Новый Массив; 
	МТоварнаяКатегория  = Новый Массив; 
	
	МенеджерВТНоменклатура(МенеджерВТ); 	// Создает ВТ_Номенклатура
	МенеджерВТЦеныНоменклатуры(МенеджерВТ); // Создает ВТ_Цены

	ВыборкаНоменклатура = ДанныеПоНоменклатуре(МенеджерВТ).Выбрать();
	ВыборкаОстатки		= ДанныеПоОстаткамНоменклатуры(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаЦены			= ДанныеПоЦенамНоменклатуры(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	                                                
	СчетчикНоменклатуры = 0;                        
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		// Обход в том же цикле остатков и цен по выгружаемой номенклатуре
		ВыборкаОстатки.Следующий(); 	
		ВыборкаЦены.Следующий();
		
		// Групппировки
		ГруппировкиНоменклатурыМассивы(СтррПоля, ВыборкаНоменклатура, МГруппыНоменклатуры, МВидыНоменклатуры, МТоварнаяКатегория);
				
		СтррПоля.GUID = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
		Если ВключатьКодВНаименование Тогда
			СтррПоля.Name = ВыборкаНоменклатура.Наименование + " " + СокрЛ(?(ФлВыгрузкаКода, ВыборкаНоменклатура.Код, ВыборкаНоменклатура.Артикул));
		Иначе
			СтррПоля.Name = ВыборкаНоменклатура.Наименование;
		КонецЕсли; 
		
		Если ФлВыгрузкаКода Тогда
			СтррПоля.Code = ВыборкаНоменклатура.Код;
		Иначе
			СтррПоля.Code = ВыборкаНоменклатура.Артикул;
		КонецЕсли;
		
		Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
			СтррПоля.A04 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаНоменклатура.СтавкаНДС);
		Иначе
			СтррПоля.A04 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаНоменклатура.СтавкаНДС) * 100;
		КонецЕсли;	

		СтррПоля.A06  = ВыборкаНоменклатура.БазоваяЕдиница;
		СтррПоля.A08  = ВыборкаНоменклатура.УчетПоХарактеристикам;
		СтррПоля.A013 = ВыборкаНоменклатура.БазоваяЕдиница; 									// Единица измерения, в которой отображаются остатки товаров в форме подбора в мобильном устройств
		СтррПоля.A014 = ВыборкаНоменклатура.Весовой;
		СтррПоля.A015 = ВыборкаНоменклатура.ЭтоУслуга;
		СтррПоля.A035 = ВыборкаНоменклатура.НаименованиеПолное;
		СтррПоля.A042 = СокрЛП(ВыборкаНоменклатура.Описание);
		СтррПоля.A043 = ВыборкаНоменклатура.ФайлКартинки;
		
		СчетчикНоменклатуры = СчетчикНоменклатуры + 1; 											// Для A044
		СтррПоля.A044 = СчетчикНоменклатуры;
		
		СтррПоля.A045 = ""; //алкоголь
		СтррПоля.A046 = ""; //дата розлива
		СтррПоля.A048 = ВыборкаНоменклатура.ЦеноваяГруппа;
		СтррПоля.A050 = ВыборкаНоменклатура.БазоваяЕдиница; 									// Единица цены, в которой отображается цена на товар в окне подбора товаров. В реквизите A050 передаем единицу цены. В эту единицу пересчитывается цена товара (относительно базовой) в форме подбора в МУ. Если ее не выгружать в файл обмена, то цены будут пересчитываться в базовые единицы 
		СтррПоля.A053 = ВыборкаНоменклатура.НаборУпаковок;
		
		Если ФлИспользоватьМаркировки И ЗначениеЗаполнено(ВыборкаНоменклатура.ВидПродукцииИС) Тогда
			СтррПоля.A054 = ПолучитьИдентификаторПеречисленияПоЗначению("ВидыМаркированногоТовара", ВыборкаНоменклатура.ВидПродукцииИС);
		Иначе
			СтррПоля.A054 = "";
		КонецЕсли; 
		СтррПоля.A056 = ВыборкаНоменклатура.ПодакцизныйТовар; // sk_230626 MOD-3506 
		
		// ОСТАТКИ
		ВыборкаОстаткиДетальныеЗаписи = ВыборкаОстатки.Выбрать();
		СтррПоля.A011 = ВыборкаОстатки.Остаток; 												// Общий остаток
		СтррПоля.A037 = ВыборкаОстатки.Остаток > 0;                 							// Есть остатки
		Если ВыгружатьМобильныйСклад Тогда
			Если ВыборкаОстаткиДетальныеЗаписи.НайтиСледующий(СтррПоискМобильныйСклад) Тогда
				СтррПоля.A041 =	ВыборкаОстаткиДетальныеЗаписи.Остаток;							// Остаток Моб. склада
			КонецЕсли;
			ВыборкаОстаткиДетальныеЗаписи.Сбросить(); 					//Сброс указателя на начало группировки.	
		КонецЕсли;	

		// A030 - A034 
		Счетчик = 0;
		Пока ВыборкаОстаткиДетальныеЗаписи.Следующий() Цикл
			СтррПоля["A03" + Счетчик] = ВыборкаОстаткиДетальныеЗаписи.Остаток;	// Остаток по складу	
			Если Счетчик = 4 Тогда
				Прервать;
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		СтррПараметрыТЧОстатки.ВыборкаДетальныеЗаписи = ВыборкаОстаткиДетальныеЗаписи;
		
		// ЦЕНЫ
		ВыборкаЦеныДетальныеЗаписи = ВыборкаЦены.Выбрать();
		// Минимальный вид цены
		Если ВыгружатьМинимальныйВидЦены Тогда
			Если ВыборкаЦеныДетальныеЗаписи.НайтиСледующий(СтррПоискМинЦены) Тогда
				СтррПоля.A040 =	ВыборкаЦеныДетальныеЗаписи.Цена;
			Иначе
				СтррПоля.A040 = 0;	
			КонецЕсли;
			ВыборкаЦеныДетальныеЗаписи.Сбросить(); //Сброс указателя на начало группировки.
		КонецЕсли;

		// A020 - A029 
		Счетчик = 0;
		Пока ВыборкаЦеныДетальныеЗаписи.Следующий() Цикл
			СтррПоля["A02" + Счетчик] = ВыборкаЦеныДетальныеЗаписи.Цена;	// Остаток по складу	
			Если Счетчик = 9 Тогда
				Прервать;
			Иначе
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
		СтррПараметрыТЧЦены.ВыборкаДетальныеЗаписи = ВыборкаЦеныДетальныеЗаписи;

		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		//ТЧ
		Если ВыгружатьТабличныеЧасти Тогда 
			// Открытие тэга
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");     
			// CtlgID
			CtlgID = ВыборкаНоменклатура.Номенклатура.УникальныйИдентификатор();
			// Остатки
			ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, СтррПараметрыТЧОстатки, "Остаток", CtlgID);
			// Цены
			ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, СтррПараметрыТЧЦены, "Цена", CtlgID);
			// Закрытие тэга
			ДокОбмена.ЗаписатьКонецЭлемента(); 				//TABLES
		КонецЕсли;
		
		ДокОбмена.ЗаписатьКонецЭлемента();					//ELEMENT
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); 						//ELEMENTS
	
	ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ, МГруппыНоменклатуры, МВидыНоменклатуры, МТоварнаяКатегория); 
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена); 				// CATALOG
	
КонецПроцедуры

Процедура ВыгрузитьХарактеристики(ДокОбмена, МенеджерВТ)

	Если Не ВыгружатьХарактеристикиНоменклатуры() Тогда
		Возврат;
	КонецЕсли; 
	
	// Структуры ТЧ Свойства: КоличествоОбщ, КоличествоТЧ, КоличествоАтрибутов, ВыборкаДетальныеЗаписи, СтррТЧ, СтррТЧПоследняя, СтррТЧШапка
	СтррПараметрыТЧОстатки = ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, "ОстаткиХарактеристика"); 
	СтррПараметрыТЧЦены    = ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, "ЦеныХарактеристика");
	
	// Выгружать ТЧ
	ВыгружатьТабличныеЧасти = ?(СтррПараметрыТЧОстатки.КоличествоТЧ > 0 Или СтррПараметрыТЧЦены.КоличествоТЧ > 0, Истина, Ложь);
		
	//++ СтррПоля
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A02,A04,A037,A039");
	// Остатки
	Для Счетчик = 0 По СтррПараметрыТЧОстатки.КоличествоОбщ Цикл
		СтррПоля.Вставить("A03" + Счетчик);
		Если Счетчик = СтррПараметрыТЧОстатки.КоличествоАтрибутов - 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	 	
	// Цены
	Для Счетчик = 0 По СтррПараметрыТЧЦены.КоличествоОбщ Цикл
		СтррПоля.Вставить("A02" + Счетчик);
		Если Счетчик = СтррПараметрыТЧЦены.КоличествоАтрибутов - 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	 
	// Ограничение скидки. 
	Если ВыбНастройкиАгента.НастройкиМобильногоПриложения.Свойство("ИспОграничениеСкидки") Тогда
		СтррНастройка = ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспОграничениеСкидки;
		Если НЕ ПустаяСтрока(СтррНастройка.Идентификатор) И СтррНастройка.Значение > 0 Тогда
			СтррПоля.Вставить("A036", СтррНастройка.Значение);	
		КонецЕсли;
	КонецЕсли;
	// Мобильный Склад
	ВыгружатьМобильныйСклад = ?(ВыбНастройкиАгента.НастройкиМобильногоПриложения.ТорговляCКолес.Значение И ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад), Истина, Ложь);
	Если ВыгружатьМобильныйСклад Тогда
		СтррПоискМобильныйСклад = Новый Структура("Склад", ВыбНастройкиАгента.МобильныйСклад);	
	Иначе 
		СтррПоля.A039 = 0;
	КонецЕсли;
	//-- СтррПоля
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ХарактеристикиНоменклатуры");
	
	СтррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
	
	ГрНоменклатураХарактеристика = ДанныеПоХарактеристикам(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ГрноменклатураОстатки		 = ДанныеПоОстаткамХарактеристикНоменклатуры(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ГрНоменклатураЦены		  	 = ДанныеПоЦенамХарактеристик(МенеджерВТ).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	//Уровень характеристика
	Пока ГрНоменклатураХарактеристика.Следующий() Цикл
		ГрноменклатураОстатки.Следующий();
		ГрНоменклатураЦены.Следующий();
		ГрХарактеристикаХарактеристика 	= ГрНоменклатураХарактеристика.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ГрХарактеристикаОстатки 		= ГрноменклатураОстатки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ГрХарактеристикаЦены 			= ГрНоменклатураЦены.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		//Уровень Номенклатура
		Пока ГрХарактеристикаХарактеристика.Следующий() Цикл
			ГрХарактеристикаОстатки.Следующий();
			ГрХарактеристикаЦены.Следующий();
			
			//Детальные Записи
			ВыборкаХарактеристика = ГрХарактеристикаХарактеристика.Выбрать();
			ВыборкаОстатки		  = ГрХарактеристикаОстатки.Выбрать();
			ВыборкаЦены	  		  = ГрХарактеристикаЦены.Выбрать();
			
			//Детальные Записи характеристики
			Пока ВыборкаХарактеристика.Следующий() Цикл
				
				СтррПоискХарактеристики.Номенклатура = ВыборкаХарактеристика.Номенклатура;
				СтррПоискХарактеристики.Ссылка  	 = ВыборкаХарактеристика.Характеристика;
				ИдХарактеристики = КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");

				СтррПоля.GUID = ИдХарактеристики;
				СтррПоля.Name = ВыборкаХарактеристика.Наименование;
				СтррПоля.A02  = ВыборкаХарактеристика.Номенклатура.УникальныйИдентификатор(); 
				
				// ОСТАТКИ
				СтррПоля.A04  = ГрХарактеристикаОстатки.Остаток; 												// Общий остаток
				СтррПоля.A037 = ГрХарактеристикаОстатки.Остаток > 0;                 							// Есть остатки
				// Остаток Моб. склада
				Если ВыгружатьМобильныйСклад Тогда
					Если ВыборкаОстатки.НайтиСледующий(СтррПоискМобильныйСклад) Тогда
						СтррПоля.A039 =	ВыборкаОстатки.Остаток;							
					КонецЕсли;
					ВыборкаОстатки.Сбросить(); //Сброс указателя на начало группировки.	
				КонецЕсли;	
				// A030 - A034 
				Счетчик = 0;
				Пока ВыборкаОстатки.Следующий() Цикл
					СтррПоля["A03" + Счетчик] = ВыборкаОстатки.Остаток;		
					Если Счетчик = 4 Тогда
						Прервать;
					Иначе
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЦикла;
				СтррПараметрыТЧОстатки.ВыборкаДетальныеЗаписи = ВыборкаОстатки;
				
				// ЦЕНЫ
				// A020 - A029 
				Счетчик = 0;
				Пока ВыборкаЦены.Следующий() Цикл
					СтррПоля["A02" + Счетчик] = ВыборкаЦены.Цена;		
					Если Счетчик = 9 Тогда
						Прервать;
					Иначе
						Счетчик = Счетчик + 1;
					КонецЕсли;
				КонецЦикла;
				СтррПараметрыТЧЦены.ВыборкаДетальныеЗаписи = ВыборкаЦены;

				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
				
				//ТЧ
				Если ВыгружатьТабличныеЧасти Тогда 
					// Открытие тэга
					ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");     
					// CtlgID
					CtlgID = ВыборкаХарактеристика.Номенклатура.УникальныйИдентификатор();
					// Остатки
					ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, СтррПараметрыТЧОстатки, "Остаток", CtlgID);
					// Цены
					ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, СтррПараметрыТЧЦены, "Цена", CtlgID);
					// Закрытие тэга
					ДокОбмена.ЗаписатьКонецЭлемента(); 				//TABLES
				КонецЕсли;
				
				ДокОбмена.ЗаписатьКонецЭлемента();					//ELEMENT
		
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена); 				// CATALOG
	
КонецПроцедуры

// СтррПараметрыТЧОстатки 	-Структура 
//		КоличествоОбщ 			- Число 	- Количество складов или видов цен, включая те которые выгружаются в блоке элемент
//		КоличествоТЧ        	- Число 	- Количество Табличных частей
//		КоличествоАтрибутов 	- Число 	- Количество атрибутов выгружаемых в ТЧ для Остаков = 5, для цен = 10
//  	ВыборкаДетальныеЗаписи  - Выборка 	- Выборка, указатель смещен на нужную позицию, в выгрузке блока элемента
//		СтррТЧ              	- Структура	- Структура ТЧ 
//  	СтррТЧПоследняя     	- Структура - Структура ТЧ, последней ТЧ (количество элементов может отличатся от КоличествоАтрибутов)
//		СтррТЧШапка				- Структура - Структура Шапки ТЧ
//
Процедура ВыгрузитьТабличнуюЧастьНоменклатуры(ДокОбмена, СтррПараметрыТЧ, КолонкаВыборки, CtlgID)
	
	Если СтррПараметрыТЧ.КоличествоТЧ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметрыТЧ.СтррТЧШапка); // TABLE
	
	ВыборкаДетальныеЗаписи = СтррПараметрыТЧ.ВыборкаДетальныеЗаписи;
	
	СчетчикКонечный = СтррПараметрыТЧ.КоличествоОбщ - (СтррПараметрыТЧ.КоличествоТЧ * СтррПараметрыТЧ.КоличествоАтрибутов); 
	ТекущаяТЧ 		= 1;
	Счетчик 		= 1;
		
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// 1. Начало ТЧ
		Если Счетчик = 1 Тогда
			//Выбор структуры
			Если ТекущаяТЧ = СтррПараметрыТЧ.КоличествоТЧ Тогда
				СтррПоля = СтррПараметрыТЧ.СтррТЧПоследняя;	
			Иначе                                                       
				СтррПоля = СтррПараметрыТЧ.СтррТЧ;
			КонецЕсли;
			//Заполение Основных атрибутов
			СтррПоля.GUID 	= Новый УникальныйИдентификатор();
			СтррПоля.CtlgID = CtlgID;
			СтррПоля["A0" + (СтррПараметрыТЧ.КоличествоАтрибутов + 1)] = ТекущаяТЧ; //A06 или A011
		КонецЕсли;
		
		// 2. Заполнение Структуры
		СтррПоля["A0" + Счетчик] = ВыборкаДетальныеЗаписи[КолонкаВыборки];
		
		// 3. Окончание ТЧ
		Если Счетчик = СтррПараметрыТЧ.КоличествоАтрибутов ИЛИ (ТекущаяТЧ = СтррПараметрыТЧ.КоличествоТЧ И Счетчик = СчетчикКонечный) Тогда
			ТекущаяТЧ = ТекущаяТЧ + 1;
			Счетчик   = 0;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
		КонецЕсли;
		
		// Счетчик
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена); // TABLE
	
КонецПроцедуры

Процедура ГруппировкиНоменклатурыМассивы(СтррПоля, ВыборкаНоменклатура, МГруппыНоменклатуры, МВидыНоменклатуры, МТоварнаяКатегория)

	//1. Группа
	Если ЗначениеЗаполнено(ВыборкаНоменклатура.Родитель) Тогда
		СтррПоля.GrpId0 = ВыборкаНоменклатура.Родитель;
		Если МГруппыНоменклатуры.Найти(ВыборкаНоменклатура.Родитель) = Неопределено Тогда
			МГруппыНоменклатуры.Добавить(ВыборкаНоменклатура.Родитель);
		КонецЕсли;
	Иначе
		СтррПоля.GrpId0 = "";	
	КонецЕсли;
	
    //2. Вид
	Если ЗначениеЗаполнено(ВыборкаНоменклатура.ВидНоменклатуры) Тогда
		СтррПоля.GrpId1 = ВыборкаНоменклатура.ВидНоменклатуры;
		Если МВидыНоменклатуры.Найти(ВыборкаНоменклатура.ВидНоменклатуры) = Неопределено Тогда
			МВидыНоменклатуры.Добавить(ВыборкаНоменклатура.ВидНоменклатуры);
		КонецЕсли;
	Иначе
		СтррПоля.GrpId1 = "";	
	КонецЕсли;
	
	//3. Категория
	Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.ТоварнаяКатегория) Тогда
			СтррПоля.GrpId2 = ВыборкаНоменклатура.ТоварнаяКатегория;
			Если МТоварнаяКатегория.Найти(ВыборкаНоменклатура.ТоварнаяКатегория) = Неопределено Тогда
				МТоварнаяКатегория.Добавить(ВыборкаНоменклатура.ТоварнаяКатегория);
			КонецЕсли;
		Иначе
			СтррПоля.GrpId2 = "";	
		КонецЕсли;
	КонецЕсли; 		
	
КонецПроцедуры

Процедура ВыгрузитьШтрихКоды(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьШтрихКодыТоваров Тогда
		Возврат;
	КонецЕсли; 
	
	ВыгружатьХарактеристики = ВыгружатьХарактеристикиНоменклатуры();
	
	Запрос = Новый Запрос;   
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Если Не ВыгружатьХарактеристики Тогда 
		//Все номенклатуры, могут быть дубли по характеристике
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		               |	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		               |	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка) КАК Характеристика,
		               |	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		               |ПОМЕСТИТЬ ВТ_ШтрихКоды
		               |ИЗ
		               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
		               |		ПО ШтрихкодыНоменклатуры.Номенклатура = ВТ_Ассортимент.ссылка
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура";
		
	Иначе 
		//Выгружаем штрихкоды номенклатур, которые не используют характеристики.
		//Выгружаем штрихкоды номенклатур с характеристиками.
		//Не выгружаем штрихкоды номенклатур использующие характеристики, для которых не выгружены характеристики. 
		
		//(( sk_220304 MOD-3046 
		Если ИспользоватьМаркировки() Тогда  
			Запрос.Текст ="ВЫБРАТЬ
			              |	ВТ_Ассортимент.Ссылка КАК Номенклатура
			              |ПОМЕСТИТЬ ВТ_АссортиментМаркировки
			              |ИЗ
			              |	ВТ_Ассортимент КАК ВТ_Ассортимент
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			              |		ПО ВТ_Ассортимент.Ссылка = СпрНоменклатура.Ссылка
			              |ГДЕ
			              |	СпрНоменклатура.ОсобенностьУчета В(&ОсобенностьУчета)
			              |	И НЕ СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
			              |
			              |ИНДЕКСИРОВАТЬ ПО
			              |	Номенклатура";  
			
			МОсобенностьУчета = Новый Массив;   
			Если ПоколениеКонфигурации(">=УТ_11.4.13.99") Тогда
				МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС);
				МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС);
			Иначе	
				//@skip-check unknown-method-property
				МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)	
			КонецЕсли;

			Если ПоколениеКонфигурации(">=УТ_11.4.13.71") Тогда  
				МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак);    
				МОсобенностьУчета.Добавить(Перечисления.ВидыПродукцииИС.УпакованнаяВода);
			КонецЕсли;     
			
			Если (ПоколениеКонфигурации("=УТ_11.4") И ПоколениеКонфигурации(">=УТ_11.4.14.164")) 
			Или (ПоколениеКонфигурации("=УТ_11.5") И ПоколениеКонфигурации(">=УТ_11.5.7.367")) Тогда
				МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция); 
			КонецЕсли;  

			МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция);
			МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция);
			МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность);
			МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины);
			МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты);
			МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды);
			МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски);
			МОсобенностьУчета.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи);

			Запрос.УстановитьПараметр("ОсобенностьУчета", МОсобенностьУчета);
			Запрос.Выполнить();   
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
			               |	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
			               |	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
			               |ПОМЕСТИТЬ ВТ_ШтрихКодыМаркировкиАссортимент
			               |ИЗ
			               |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АссортиментМаркировки КАК ВТ_АссортиментМаркировки
			               |		ПО ШтрихкодыНоменклатуры.Номенклатура = ВТ_АссортиментМаркировки.Номенклатура
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Номенклатура
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_ШтрихКодыМаркировкиАссортимент.Штрихкод КАК Штрихкод,
			               |	ВТ_ШтрихКодыМаркировкиАссортимент.Номенклатура КАК Номенклатура,
			               |	ВТ_ХарактеристикиНоменклатуры.Характеристика КАК Характеристика,
			               |	ВТ_ШтрихКодыМаркировкиАссортимент.Упаковка КАК Упаковка
			               |ПОМЕСТИТЬ ВТ_ШтрихКодыМаркировкиХарактеристика
			               |ИЗ
			               |	ВТ_ШтрихКодыМаркировкиАссортимент КАК ВТ_ШтрихКодыМаркировкиАссортимент
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры
			               |		ПО ВТ_ШтрихКодыМаркировкиАссортимент.Номенклатура = ВТ_ХарактеристикиНоменклатуры.Номенклатура"; 	
			
			Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_АссортиментМаркировки";	
			Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ШтрихКодыМаркировкиАссортимент";	
			Запрос.Выполнить(); 
		КонецЕсли;
		//)) sk_220304 
		
		Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		              |	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		              |	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		              |	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		              |	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		              |ПОМЕСТИТЬ ВТ_ШтрихКоды
		              |ИЗ
		              |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
		              |		ПО ШтрихкодыНоменклатуры.Номенклатура = ВТ_Ассортимент.Ссылка
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		              |		ПО (ВТ_Ассортимент.Ссылка = СпрНоменклатура.Ссылка)
		              |ГДЕ
		              |	ШтрихкодыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
		              |	И СпрНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		              |
		              |ОБЪЕДИНИТЬ
		              |
		              |ВЫБРАТЬ
		              |	ШтрихкодыНоменклатуры.Штрихкод,
		              |	ШтрихкодыНоменклатуры.Номенклатура,
		              |	ШтрихкодыНоменклатуры.Характеристика,
		              |	ШтрихкодыНоменклатуры.Упаковка
		              |ИЗ
		              |	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры
		              |		ПО ШтрихкодыНоменклатуры.Номенклатура = ВТ_ХарактеристикиНоменклатуры.Номенклатура
		              |			И ШтрихкодыНоменклатуры.Характеристика = ВТ_ХарактеристикиНоменклатуры.Характеристика";
 
		Если ИспользоватьМаркировки() Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + "
				   |ОБЪЕДИНИТЬ 
				   |
				   |ВЫБРАТЬ
	               |	ВТ_ШтрихКодыМаркировкиХарактеристика.Штрихкод,
	               |	ВТ_ШтрихКодыМаркировкиХарактеристика.Номенклатура,
	               |	ВТ_ШтрихКодыМаркировкиХарактеристика.Характеристика,
	               |	ВТ_ШтрихКодыМаркировкиХарактеристика.Упаковка
	               |ИЗ
	               |	ВТ_ШтрихКодыМаркировкиХарактеристика КАК ВТ_ШтрихКодыМаркировкиХарактеристика"; 
			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "
					|ИНДЕКСИРОВАТЬ ПО
		            |	Номенклатура";    
		
		Если ИспользоватьМаркировки() Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ШтрихКодыМаркировкиХарактеристика";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ХарактеристикиНоменклатуры";		
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_ШтрихКоды.Штрихкод КАК Штрихкод,
	               |	ВТ_ШтрихКоды.Номенклатура КАК Номенклатура,
	               |	ВТ_ШтрихКоды.Характеристика КАК Характеристика,
	               |	ВЫБОР
	               |		КОГДА ВТ_ШтрихКоды.Упаковка = &ПустаяУпаковка
	               |			ТОГДА ВЫБОР
	               |					КОГДА &КонстантаИспользоватьУпаковкиНоменклатуры
	               |						ТОГДА ВЫБОР
	               |								КОГДА СпрНоменклатура.ИспользоватьУпаковки = ЛОЖЬ
	               |										ИЛИ СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	               |									ТОГДА СпрНоменклатура.Ссылка
	               |								ИНАЧЕ НаборыУпаковок.ЕдиницаИзмерения
	               |							КОНЕЦ
	               |					ИНАЧЕ СпрНоменклатура.Ссылка
	               |				КОНЕЦ
	               |		ИНАЧЕ ВТ_ШтрихКоды.Упаковка
	               |	КОНЕЦ КАК ЕдиницаИзмерения
	               |ИЗ
	               |	ВТ_ШтрихКоды КАК ВТ_ШтрихКоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ВТ_ШтрихКоды.Номенклатура = СпрНоменклатура.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
	               |		ПО (СпрНоменклатура.НаборУпаковок = НаборыУпаковок.Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	Штрихкод";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ШтрихКоды";			   
				   				  
	Запрос.УстановитьПараметр("КонстантаИспользоватьУпаковкиНоменклатуры", КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры"));
	Если ПоколениеКонфигурации("<УТ_11.2") ИЛИ ГКонфигурация = "УТ_UA"  Тогда
		//@skip-check unknown-method-property
		Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ПустаяУпаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;

	СтррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.Штрихкоды", Истина); 

	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A01,A02");
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтррПоля.GUID 	 = Новый УникальныйИдентификатор();
		СтррПоля.Name 	 = ШтрихкодEANИзGTIN(Выборка.Штрихкод);  // sk_220822 MOD-3240 СтррПоля.Name 	 = Выборка.Штрихкод;
		
		Если ВыгружатьХарактеристики И ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			//1. номенклатура с характеристикой
			СтррПоискХарактеристики.Номенклатура = Выборка.Номенклатура;
			СтррПоискХарактеристики.Ссылка  	 = Выборка.Характеристика;
			ИдХарактеристики = КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
			СтррПоля.A01 	 = ИдХарактеристики;
		Иначе
			СтррПоля.A01 = Выборка.Номенклатура.УникальныйИдентификатор();
		КонецЕсли;	
		СтррПоля.A02 = Выборка.ЕдиницаИзмерения;

		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры   

// sk_220822 MOD-3240
//  
//  Вычисляет штрихкод EAN из GTIN.
//
// Параметры:
//  Штрихкод - Строка	 - GTIN.
// 
// Возвращаемое значение:
//  Строка - Вычисленное значение EAN.
//
Функция ШтрихкодEANИзGTIN(Знач Штрихкод)
	
	Если Лев(Штрихкод, 1) = "0" Тогда
		Штрихкод = Сред(Штрихкод, 2); //EAN13
		Если Лев(Штрихкод, 5) = "00000" Тогда
			Штрихкод = Сред(Штрихкод, 6); //EAN8
		КонецЕсли;
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

Процедура ВыгрузитьГруппировкиПартнеров(ДокОбмена, МенеджерВТ)
	
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");

	// Элементы группировки по иерархии
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	
	Если РежимВыгрузкиРекомендуемый Тогда	
		ДобавитьПоле(ДокОбмена, "GUID", "CB26860D-E169-487E-A963-E7BAA5B61CB0"); // Для справочника МТ Партнеры
	Иначе
		ДобавитьПоле(ДокОбмена, "GUID", "1E18C8DB-08F6-47DA-874B-100D6E109AB8"); // Для справочника МТ Контрагенты
	КонецЕсли;	
	
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по группе доступа");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	СтррПоля = Новый Структура("GUID,Name");
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиГруппПартнеров());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ВыборкаГрупп = Запрос.Выполнить().Выбрать();
	Пока ВыборкаГрупп.Следующий() Цикл 
		СтррПоля.GUID = ВыборкаГрупп.Ссылка.УникальныйИдентификатор();
		СтррПоля.Name = ВыборкаГрупп.Наименование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ВыгрузитьГруппировкиНоменклатуры(ДокОбмена, МенеджерВТ, МГруппыНоменклатуры, МВидыНоменклатуры, МТоварнаяКатегория)

	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");

	// Элементы группировки по иерархии
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "8E502A85-8DD4-41CF-A7A4-17AB50872D36");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по иерархии");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");

	ГруппировкиНоменклатурыЗаписать(ДокОбмена, "Номенклатура", МГруппыНоменклатуры);
	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();

	// Объявление группировки по видам номенклатуры
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "E42DA5B9-E29B-43E1-B7E3-9B500879D6B7");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по видам номенклатуры");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");

	ГруппировкиНоменклатурыЗаписать(ДокОбмена, "ВидыНоменклатуры", МВидыНоменклатуры);

	ДокОбмена.ЗаписатьКонецЭлемента();
	ДокОбмена.ЗаписатьКонецЭлемента();  
	
	// Объявление группировки по товарным категориям
	Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
		ДобавитьПоле(ДокОбмена, "GUID", "8F2247D5-66E3-4564-8231-87D7CCD87F71");
		ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по товарным категориям");
		ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
		ГруппировкиНоменклатурыЗаписать(ДокОбмена, "ТоварныеКатегории", МТоварнаяКатегория);
		ДокОбмена.ЗаписатьКонецЭлемента();
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЕсли;	

КонецПроцедуры

Процедура ГруппировкиНоменклатурыЗаписать(ДокОбмена, Справочник, Знач МОтбор)
	
	Если НЕ (ТипЗнч(МОтбор) = Тип("Массив") И МОтбор.Количество() > 0) Тогда
		Возврат;
	КонецЕсли;
	
	ТЗГруппы = Новый ТаблицаЗначений;
	ТЗГруппы.Колонки.Добавить("Ссылка");
	ТЗГруппы.Колонки.Добавить("Наименование");
	ТЗГруппы.Колонки.Добавить("Родитель"); 
	
	ГруппировкиНоменклатурыРекурсивноПолучить(Справочник, МОтбор, ТЗГруппы);
	
	//Запись элементов
	СтррПоля = Новый Структура("GUID, Name, ParId");
	ТЗГруппы.Сортировать("Наименование");
	Для Каждого Элемент Из ТЗГруппы Цикл
		СтррПоля.GUID = Элемент.Ссылка.УникальныйИдентификатор();
		СтррПоля.Name = Элемент.Наименование;
		СтррПоля.ParId = ?(ЗначениеЗаполнено(Элемент.Родитель), Элемент.Родитель.УникальныйИдентификатор(), "");
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ГруппировкиНоменклатурыРекурсивноПолучить(Справочник, МОтбор, ТЗГруппы)
	
	Если МОтбор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиНоменклатурыПолучитьРодителей(Справочник, МОтбор, ТЗГруппы);
	ГруппировкиНоменклатурыРекурсивноПолучить(Справочник, МОтбор, ТЗГруппы);	
	
КонецПроцедуры

Процедура ГруппировкиНоменклатурыПолучитьРодителей(Справочник, МОтбор, ТЗГруппы)
	
	
	//СтррПоля 	= Новый Структура("GUID, Name, ParId");

	//1. Получить элемент без иерархии родителей.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СправочникГруппировки.Ссылка КАК Ссылка,
	                      |	СправочникГруппировки.Наименование КАК Наименование,
	                      |	СправочникГруппировки.Родитель.Ссылка КАК Родитель
	                      |ИЗ
	                      |	Справочник.[СправочникГруппировки] КАК СправочникГруппировки
	                      |ГДЕ
	                      |	СправочникГруппировки.Ссылка В(&МОтбор)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "[СправочникГруппировки]", Справочник);
	
	Запрос.УстановитьПараметр("мОтбор", МОтбор);
	ВыбркаЭлементов = Запрос.Выполнить().Выгрузить();
	
	//2. Очищаем массив родителей и далее его заполняем новыми значениями.
	МОтбор.Очистить();
	
	//4. перебор элементов
	Для каждого Элемент Из ВыбркаЭлементов Цикл
		//4.1 Добавляем запись в ТЗГруппы
		Если ТЗГруппы.Найти(Элемент.Ссылка, "Ссылка") = Неопределено Тогда
			НоваяСтрока = ТЗГруппы.Добавить();
			НоваяСтрока.Ссылка		 = Элемент.Ссылка;
			НоваяСтрока.Наименование = Элемент.Наименование;
			НоваяСтрока.Родитель     = Элемент.Родитель; 
		КонецЕсли;
		
		// 4.2 Добавляем элемент в массив родителей.
		Если ЗначениеЗаполнено(Элемент.Родитель) И МОтбор.Найти(Элемент.Родитель) = Неопределено И ТЗГруппы.Найти(Элемент.Родитель, "Ссылка") = Неопределено	Тогда
			МОтбор.Добавить(Элемент.Родитель);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьЕдиницыИзмерения(ДокОбмена, МенеджерВТ)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ЕдиницыИзмерения");

	Результат = ДанныеПоЕдиницамИзмеренияВыгрузки(МенеджерВТ);
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,Code,A02,A03,A04,A05,A06,A07");
	
	Выборка = Результат.Выбрать();	
	Пока Выборка.Следующий() Цикл
		// для номенклатуры без упаковок вместо ссылки единицы измерения подставляем ссылку номенклатуры
		// чтобы GUID'ы единиц измерения не пересекались и была возможность передавать вес в единицу измерения 
		Если Выборка.ЭтоЕдиницаНоменклатуры Тогда
			СтррПоля.GUID = Выборка.Номенклатура.УникальныйИдентификатор();
		Иначе
			СтррПоля.GUID = Выборка.Ссылка.УникальныйИдентификатор();
		КонецЕсли; 
		СтррПоля.Name = Выборка.Наименование;
		СтррПоля.Code = Выборка.КодОКЕИ;
		СтррПоля.A02 = 	Выборка.Коэффициент;
		СтррПоля.A03 = 	Выборка.Номенклатура;
		СтррПоля.A04 = 	Выборка.Вес;
		СтррПоля.A05 = 	Выборка.ЭтоНаборУпаковок;
		СтррПоля.A06 = 	Выборка.ВладелецНаборУпаковок;
		СтррПоля.A07 = 	Выборка.Классификатор;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

Функция ТекстЗапросаВыгрузкиПерсональныхЦен()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВТ_ПерсональныеЦеныТоваров.Соглашение КАК Соглашение,
	               |	ВТ_ПерсональныеЦеныТоваров.Номенклатура КАК НоменклатураЦеноваяГруппа,
	               |	ВТ_ПерсональныеЦеныТоваров.Характеристика КАК Характеристика,
	               |	ВТ_ПерсональныеЦеныТоваров.ВидЦены КАК ВидЦены,
				   //(( sk_230825 MOD-3522
				   //|	ВЫРАЗИТЬ(ВТ_ПерсональныеЦеныТоваров.Цена * ВЫБОР
	               //|			КОГДА &Валюта <> ВТ_ПерсональныеЦеныТоваров.Валюта
	               //|				ТОГДА ВТ_КурсыВалют.КурсКратный * &КурсКратный
	               //|			ИНАЧЕ 1
	               //|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
				   |	ВТ_ПерсональныеЦеныТоваров.Цена КАК Цена
				   //)) sk_230825 MOD-3522
	               |	
	               |ИЗ
	               |	ВТ_ПерсональныеЦеныТоваров КАК ВТ_ПерсональныеЦеныТоваров
				   //(( sk_230825 MOD-3522
				   //|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК ВТ_КурсыВалют
	               //|		ПО ВТ_ПерсональныеЦеныТоваров.Валюта = ВТ_КурсыВалют.Валюта
				   //)) sk_230825 MOD-3522
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_ПерсональныеЦеныЦеновыхГрупп.Соглашение,
	               |	ВТ_ПерсональныеЦеныЦеновыхГрупп.ЦеноваяГруппа,
	               |	NULL,
	               |	ВТ_ПерсональныеЦеныЦеновыхГрупп.ВидЦен,
	               |	0
	               |	
				   |ИЗ
	               |	ВТ_ПерсональныеЦеныЦеновыхГрупп КАК ВТ_ПерсональныеЦеныЦеновыхГрупп";
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ПерсональныеЦеныТоваров";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ПерсональныеЦеныЦеновыхГрупп";
		
	Возврат ТекстЗапроса;

КонецФункции

Процедура ВыгрузитьПерсональныеЦены(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьПерсональныеЦены() Тогда
		Возврат;
	КонецЕсли;
	
	ФлВыгружатьХарактеристики = ВыгружатьХарактеристикиНоменклатуры();
	
	МенеджерВТКурсыВалют(МенеджерВТ);
	МенеджерВТПерсональныеЦеныТоваров(МенеджерВТ);
	МенеджерВТПерсональныеЦеныЦеновыеГруппы(МенеджерВТ);
	
	ВалютаУчета 	= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	КурсВалюты 		= 1;
	КратностьВалюты = 1;
	
	Запрос = Новый Запрос(ТекстЗапросаВыгрузкиПерсональныхЦен());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Валюта", ВалютаУчета);
	Запрос.УстановитьПараметр("КурсКратный", КурсВалюты / КратностьВалюты);
	Запрос.УстановитьПараметр("Организации", ОрганизацииВыгрузки(МенеджерВТ));
	РезультатЗапроса = Запрос.Выполнить();
	
	СтррПоискХарактеристики	= Новый Структура("Ссылка, Номенклатура");
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПерсональныеЦены", Истина);
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID, A01, A02, A03, A04");
	Выборка = РезультатЗапроса.Выбрать();				
	Пока Выборка.Следующий() Цикл
		СтррПоля.GUID = ВРег(ЗначениеВСтрокуДляXML(Новый УникальныйИдентификатор));
		СтррПоля.A01  = ЗначениеВСтрокуДляXML(Выборка.Соглашение);
		Если ФлВыгружатьХарактеристики И ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			СтррПоискХарактеристики.Номенклатура = Выборка.НоменклатураЦеноваяГруппа;
			СтррПоискХарактеристики.Ссылка  	 = Выборка.Характеристика;
			СтррПоля.A02 = ЗначениеВСтрокуДляXML(КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный")); // ХарактеристикаНоменклатуры 
		Иначе
			СтррПоля.A02 = ЗначениеВСтрокуДляXML(Выборка.НоменклатураЦеноваяГруппа); // Номенклатура/ЦеноваяГруппа
		КонецЕсли;
		СтррПоля.A03 = ЗначениеВСтрокуДляXML(Выборка.ВидЦены); // ТипЦены
		СтррПоля.A04 = ЗначениеВСтрокуДляXML(Выборка.Цена);	   // Цена
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
		
КонецПроцедуры

// Выгружает персональные скидки
//
// Параметры:
//	ДокОбмена  - ЗаписьXML - XML-документ выгрузки
//  МенеджерВТ - МенеджерВременныхТаблиц - менеджер ВТ
//
Процедура ВыгрузитьПерсональныеСкидки(ДокОбмена, МенеджерВТ)

	Если Не ВыгружатьПерсональныеЦены() ИЛИ НЕ ИспользоватьСоглашения() Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВТСоглашения(МенеджерВТ);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;        
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка,
	               |	ДействиеСкидокНаценокСрезПоследних.Источник КАК Соглашение
	               |ПОМЕСТИТЬ ВТ_СкидкиНаценки
	               |ИЗ
	               |	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	               |			&ТекущаяДата,
	               |			СкидкаНаценка.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент)
	               |				И Источник В
	               |					(ВЫБРАТЬ
	               |						ВТ_Соглашения.Ссылка
	               |					ИЗ
	               |						ВТ_Соглашения)) КАК ДействиеСкидокНаценокСрезПоследних
	               |ГДЕ
	               |	ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	СкидкаНаценка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_СкидкиНаценки.Соглашение КАК Соглашение,
	               |	СкидкиНаценкиЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
	               |	СкидкиНаценкиЦеновыеГруппы.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	               |ПОМЕСТИТЬ ВТ_СкидкиНаценкиПоЦеновойГруппеБезГруппировки
	               |ИЗ
	               |	Справочник.СкидкиНаценки.ЦеновыеГруппы КАК СкидкиНаценкиЦеновыеГруппы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиНаценки КАК ВТ_СкидкиНаценки
	               |		ПО (ВТ_СкидкиНаценки.СкидкаНаценка = СкидкиНаценкиЦеновыеГруппы.Ссылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СкидкиНаценкиПоЦеновойГруппеБезГруппировки.Соглашение КАК Соглашение,
	               |	ВТ_СкидкиНаценкиПоЦеновойГруппеБезГруппировки.ЦеноваяГруппа КАК ЦеноваяГруппа,
	               |	МАКСИМУМ(ВТ_СкидкиНаценкиПоЦеновойГруппеБезГруппировки.ЗначениеСкидкиНаценки) КАК ЗначениеСкидкиНаценки
	               |ПОМЕСТИТЬ ВТ_СкидкиНаценкиПоЦеновойГруппе
	               |ИЗ
	               |	ВТ_СкидкиНаценкиПоЦеновойГруппеБезГруппировки КАК ВТ_СкидкиНаценкиПоЦеновойГруппеБезГруппировки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СкидкиНаценкиПоЦеновойГруппеБезГруппировки.Соглашение,
	               |	ВТ_СкидкиНаценкиПоЦеновойГруппеБезГруппировки.ЦеноваяГруппа";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Выполнить();
	
	Если Не ГКонфигурация = "УТ_UA" Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ВТ_СкидкиНаценки.Соглашение КАК Соглашение,
		               |	ДействиеСкидокНаценокПоНоменклатуреСрезПоследних.Номенклатура КАК Номенклатура,
		               |	ДействиеСкидокНаценокПоНоменклатуреСрезПоследних.Характеристика КАК Характеристика,
		               |	СпрСкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
		               |ПОМЕСТИТЬ ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки
		               |ИЗ
		               |	РегистрСведений.ДействиеСкидокНаценокПоНоменклатуре.СрезПоследних(
		               |			&ТекущаяДата,
		               |			Источник В
		               |					(ВЫБРАТЬ
		               |						ВТ_СкидкиНаценки.СкидкаНаценка
		               |					ИЗ
		               |						ВТ_СкидкиНаценки)
		               |				И Номенклатура В
		               |					(ВЫБРАТЬ
		               |						ВТ_Ассортимент.Ссылка
		               |					ИЗ
		               |						ВТ_Ассортимент)) КАК ДействиеСкидокНаценокПоНоменклатуреСрезПоследних
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СкидкиНаценки КАК ВТ_СкидкиНаценки
		               |		ПО ДействиеСкидокНаценокПоНоменклатуреСрезПоследних.Источник = ВТ_СкидкиНаценки.СкидкаНаценка
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК СпрСкидкиНаценки
		               |		ПО ДействиеСкидокНаценокПоНоменклатуреСрезПоследних.Источник = СпрСкидкиНаценки.Ссылка
		               |ГДЕ
		               |	ДействиеСкидокНаценокПоНоменклатуреСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки.Соглашение КАК Соглашение,
		               |	ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки.Номенклатура КАК Номенклатура,
		               |	ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки.Характеристика КАК Характеристика,
		               |	МАКСИМУМ(ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки.ЗначениеСкидкиНаценки) КАК ЗначениеСкидкиНаценки
		               |ПОМЕСТИТЬ ВТ_СкидкиНаценкиПоНоменклатуре
		               |ИЗ
		               |	ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки КАК ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки.Соглашение,
		               |	ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки.Номенклатура,
		               |	ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки.Характеристика";	
		Запрос.Выполнить();
	КонецЕсли;
				   	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_СкидкиНаценкиПоЦеновойГруппе.Соглашение КАК Соглашение,
	               |	ВТ_СкидкиНаценкиПоЦеновойГруппе.ЦеноваяГруппа КАК НоменклатураЦеноваяГруппа,
	               |	NULL КАК Характеристика,
	               |	ВТ_СкидкиНаценкиПоЦеновойГруппе.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки
	               |ИЗ
	               |	ВТ_СкидкиНаценкиПоЦеновойГруппе КАК ВТ_СкидкиНаценкиПоЦеновойГруппе";
	Если Не ГКонфигурация = "УТ_UA" Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "
				   |ОБЪЕДИНИТЬ ВСЕ 
				   |
				   |ВЫБРАТЬ
	               |	ВТ_СкидкиНаценкиПоНоменклатуре.Соглашение,
	               |	ВТ_СкидкиНаценкиПоНоменклатуре.Номенклатура,
	               |	ВТ_СкидкиНаценкиПоНоменклатуре.Характеристика,
	               |	ВТ_СкидкиНаценкиПоНоменклатуре.ЗначениеСкидкиНаценки
	               |ИЗ
	               |	ВТ_СкидкиНаценкиПоНоменклатуре КАК ВТ_СкидкиНаценкиПоНоменклатуре";
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_СкидкиНаценкиПоНоменклатуреБезГруппировки";
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_СкидкиНаценкиПоНоменклатуре";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_СкидкиНаценки";
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_СкидкиНаценкиПоЦеновойГруппеБезГруппировки";
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_СкидкиНаценкиПоЦеновойГруппе";
		
	Выборка = Запрос.Выполнить().Выбрать();	
	
	ФлВыгружатьХарактеристики = ВыгружатьХарактеристикиНоменклатуры();
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID, A01, A02, A03"); 
	СтррПоискХарактеристики	= Новый Структура("Ссылка, Номенклатура");
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПерсональныеСкидки", Истина);
	
	Пока Выборка.Следующий() Цикл
		СтррПоля.GUID 	= Новый УникальныйИдентификатор();
		СтррПоля.A01  	= Выборка.Соглашение;
		Если ФлВыгружатьХарактеристики И ЗначениеЗаполнено(Выборка.Характеристика) Тогда
			СтррПоискХарактеристики.Номенклатура = Выборка.НоменклатураЦеноваяГруппа;
			СтррПоискХарактеристики.Ссылка  	 = Выборка.Характеристика;
			СтррПоля.A02 = ЗначениеВСтрокуДляXML(КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный")); 
		Иначе
			СтррПоля.A02 = ЗначениеВСтрокуДляXML(Выборка.НоменклатураЦеноваяГруппа);
		КонецЕсли;
		СтррПоля.A03	= Выборка.ЗначениеСкидкиНаценки;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
			
КонецПроцедуры

Процедура ВыгрузитьИсториюПродаж(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьИсториюПродаж Или ГлубинаИсторииПродаж = 0 Или КоличествоИнтерваловИстории = 0 Тогда
		Возврат;
	КонецЕсли; 	
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Интервалы.НачалоИнтервала КАК НачалоИнтервала,
	                      |	Интервалы.КонецИнтервала КАК КонецИнтервала,
	                      |	Интервалы.НомерИнтервала КАК НомерИнтервала
	                      |ПОМЕСТИТЬ ВТ_Интервалы
	                      |ИЗ
	                      |	&Интервалы КАК Интервалы
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РСАналитикаУчетаНоменклатуры.КлючАналитики КАК КлючАналитики,
	                      |	РСАналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	                      |	РСАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика
	                      |ПОМЕСТИТЬ ВТ_АналитикаУчетаНоменклатуры
	                      |ИЗ
	                      |	РегистрСведений.АналитикаУчетаНоменклатуры КАК РСАналитикаУчетаНоменклатуры
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
	                      |		ПО РСАналитикаУчетаНоменклатуры.Номенклатура = ВТ_Ассортимент.Ссылка
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	КлючАналитики
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РСАналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики,
	                      |	РСАналитикаУчетаПоПартнерам.Партнер КАК Партнер
	                      |ПОМЕСТИТЬ ВТ_АналитикаУчетаПоПартнерам
	                      |ИЗ
	                      |	РегистрСведений.АналитикаУчетаПоПартнерам КАК РСАналитикаУчетаПоПартнерам
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
	                      |		ПО РСАналитикаУчетаПоПартнерам.Партнер = ВТ_Партнеры.Ссылка
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	КлючАналитики
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА Продажи.ПериодДень >= ВТ_Интервалы.НачалоИнтервала
	                      |				И Продажи.ПериодДень <= ВТ_Интервалы.КонецИнтервала
	                      |			ТОГДА ВТ_Интервалы.НомерИнтервала
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК НомерИнтервала,
	                      |	Продажи.КоличествоОборот КАК Количество,
	                      |	Продажи.СуммаВыручкиОборот КАК Выручка,
	                      |	Продажи.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	                      |	Продажи.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	                      |ПОМЕСТИТЬ ВТ_ПродажиБезГруппировки
	                      |ИЗ
	                      |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	                      |			&НачПериода,
	                      |			&КонПериода,
	                      |			Авто,
	                      |			АналитикаУчетаНоменклатуры В
	                      |					(ВЫБРАТЬ
	                      |						ВТ_АналитикаУчетаНоменклатуры.КлючАналитики
	                      |					ИЗ
	                      |						ВТ_АналитикаУчетаНоменклатуры)
	                      |				И АналитикаУчетаПоПартнерам В
	                      |					(ВЫБРАТЬ
	                      |						ВТ_АналитикаУчетаПоПартнерам.КлючАналитики
	                      |					ИЗ
	                      |						ВТ_АналитикаУчетаПоПартнерам)) КАК Продажи,
	                      |	ВТ_Интервалы КАК ВТ_Интервалы
	                      |ГДЕ
	                      |	ВЫБОР
	                      |			КОГДА Продажи.ПериодДень >= ВТ_Интервалы.НачалоИнтервала
	                      |					И Продажи.ПериодДень <= ВТ_Интервалы.КонецИнтервала
	                      |				ТОГДА ВТ_Интервалы.НомерИнтервала
	                      |			ИНАЧЕ 0
	                      |		КОНЕЦ > 0
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	АналитикаУчетаПоПартнерам,
	                      |	АналитикаУчетаНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТ_ПродажиБезГруппировки.НомерИнтервала КАК НомерИнтервала,
	                      |	ВТ_АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	                      |	ВТ_АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	                      |	ВТ_АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	                      |	СУММА(ВТ_ПродажиБезГруппировки.Количество) КАК Количество,
	                      |	СУММА(ВТ_ПродажиБезГруппировки.Выручка) КАК Выручка
	                      |ИЗ
	                      |	ВТ_ПродажиБезГруппировки КАК ВТ_ПродажиБезГруппировки
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АналитикаУчетаНоменклатуры КАК ВТ_АналитикаУчетаНоменклатуры
	                      |		ПО ВТ_ПродажиБезГруппировки.АналитикаУчетаНоменклатуры = ВТ_АналитикаУчетаНоменклатуры.КлючАналитики
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АналитикаУчетаПоПартнерам КАК ВТ_АналитикаУчетаПоПартнерам
	                      |		ПО ВТ_ПродажиБезГруппировки.АналитикаУчетаПоПартнерам = ВТ_АналитикаУчетаПоПартнерам.КлючАналитики
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТ_ПродажиБезГруппировки.НомерИнтервала,
	                      |	ВТ_АналитикаУчетаПоПартнерам.Партнер,
	                      |	ВТ_АналитикаУчетаНоменклатуры.Номенклатура,
	                      |	ВТ_АналитикаУчетаНоменклатуры.Характеристика
	                      |ИТОГИ ПО
	                      |	Партнер,
	                      |	Номенклатура,
	                      |	Характеристика");
	
	 Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_Интервалы";
	 Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_АналитикаУчетаНоменклатуры";
	 Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_АналитикаУчетаПоПартнерам";
	 Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ПродажиБезГруппировки";
	
	//@skip-check use-non-recommended-method
	КонПериода = ТекущаяДата();
	НачПериода = НачалоДня(КонПериода - ГлубинаИсторииПродаж * 86400);
		
	ТЗИнтервалы = Новый ТаблицаЗначений;	
	ТЗИнтервалы.Колонки.Добавить("НачалоИнтервала", Новый ОписаниеТипов("Дата"));			
	ТЗИнтервалы.Колонки.Добавить("КонецИнтервала",  Новый ОписаниеТипов("Дата"));		
	ТЗИнтервалы.Колонки.Добавить("НомерИнтервала",  Новый ОписаниеТипов("Число"));
	
	РазмерИнтервала = Окр((КонПериода - НачПериода) / КоличествоИнтерваловИстории, 0, РежимОкругления.Окр15как20);
	
	НачалоИнтервала = НачПериода;
	Для Индекс = 1 По КоличествоИнтерваловИстории Цикл		
		КонецИнтервала = ?(Индекс < КоличествоИнтерваловИстории, НачалоИнтервала + РазмерИнтервала, КонПериода);
		СтрокаТ = ТЗИнтервалы.Добавить();
		СтрокаТ.НачалоИнтервала = НачалоИнтервала;
		СтрокаТ.КонецИнтервала  = КонецИнтервала;
		СтрокаТ.НомерИнтервала  = Индекс;
		НачалоИнтервала = КонецИнтервала;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("НачПериода",	НачПериода);
	Запрос.УстановитьПараметр("КонПериода",	КонПериода);
	Запрос.УстановитьПараметр("Интервалы",	ТЗИнтервалы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ИсторияПродаж", Истина);
	
		//@skip-check structure-consructor-too-many-keys
		СтррПоля = Новый Структура("GUID,A02,A04,A07,A08");
		СтррПоля.A08 = 0;
		
		СтррПоиск = Новый Структура("НомерИнтервала");
		ФлВыгружатьХарактеристики = ВыгружатьХарактеристикиНоменклатуры();
		СтррПоискХарактеристики   = Новый Структура("Ссылка, Номенклатура");

		ВыборкаПартнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);			
		Пока ВыборкаПартнер.Следующий() Цикл
			
			ВыборкаНоменклатура = ВыборкаПартнер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);				
			Пока ВыборкаНоменклатура.Следующий() Цикл
				
				ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаХарактеристика.Следующий() Цикл
					ВыборкаДетали = ВыборкаХарактеристика.Выбрать();
					СтрИстория = "";
					
					Для Индекс = 1 По КоличествоИнтерваловИстории Цикл
						СтррПоиск.НомерИнтервала = Индекс;
						ВыборкаДетали.Сбросить();
						Если ВыборкаДетали.НайтиСледующий(СтррПоиск) Тогда
							СтрИстория = СтрИстория + Формат(ВыборкаДетали.Количество, "ЧГ=0") + " ";		
						Иначе
							СтрИстория = СтрИстория + "0" + " ";		
						КонецЕсли;				
					КонецЦикла;
					
					СтррПоля.GUID = Новый УникальныйИдентификатор();
					СтррПоля.A02 = ВыборкаХарактеристика.Партнер;
					Если ФлВыгружатьХарактеристики И ЗначениеЗаполнено(ВыборкаХарактеристика.Характеристика) Тогда
						СтррПоискХарактеристики.Номенклатура = ВыборкаХарактеристика.Номенклатура;
						СтррПоискХарактеристики.Ссылка  	 = ВыборкаХарактеристика.Характеристика;
						ИдХарактеристики = КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
						СтррПоля.A04 	 = ИдХарактеристики;
					Иначе
						СтррПоля.A04 = ВыборкаХарактеристика.Номенклатура.УникальныйИдентификатор();
					КонецЕсли;
					СтррПоля.A07 = СокрЛП(СтрИстория);
					
					ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
				
				КонецЦикла; // Пока ВыборкаХарактеристика.Следующий() Цикл 
			КонецЦикла; //Пока ВыборкаНоменклатура.Следующий() Цикл  
					
		КонецЦикла; //Пока ВыборкаПартнер.Следующий() Цикл
			
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры //Процедура ВыгрузитьИсториюПродаж()

Функция ВыгрузитьСправочникИзображений(ДокОбмена, МенеджерВТ)
	
	Если Не ВыгружатьИзображенияТоваров() И Не ВыгружатьИзображенияПартнеров Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТЗКартинки = Новый ТаблицаЗначений;
	ТЗКартинки.Колонки.Добавить("Ссылка");
	ТЗКартинки.Колонки.Добавить("Описание");
	ТЗКартинки.Колонки.Добавить("ИмяФайла");
	
	Текст = ТекстЗапросаПолученияИзображений();	
	Запрос = Новый Запрос(Текст);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ФотоСправочников");
	
	СтрРасширения = "bmp;gif;png;jpeg;dib;rle;tif;jpg;ico;wmf;emf";
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A01,A02,A03");
	
	ТипХранилищеЗначения	  = Тип("ХранилищеЗначения");
	ТипСправочникНоменклатура = Тип("СправочникСсылка.Номенклатура");
	ТипСправочникПартнеры 	  = Тип("СправочникСсылка.Партнеры");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 				
		
		Если ТипЗнч(Выборка.ХранимыйФайл) = ТипХранилищеЗначения Тогда
			Картинка = Выборка.ХранимыйФайл.Получить();
		Иначе
			Картинка = Неопределено;
		КонецЕсли;
		
		ВыборкаСсылка = Выборка.Ссылка;
		
		//@skip-check use-non-recommended-method
		Если Найти(СтрРасширения, НРег(СтрЗаменить(Выборка.Расширение, ".", ""))) = 0 Или (Картинка = Неопределено И ВыборкаСсылка.Том.Пустая()) Тогда // sk_221118 Если Найти(стрРасширения, НРег(Выборка.Расширение)) = 0 Или (Картинка = Неопределено И ВыборкаСсылка.Том.Пустая()) Тогда
			Продолжить;
		КонецЕсли;	
		
		ВладелецФайла = Выборка.ВладелецФайла;
		
		Если ТипЗнч(ВладелецФайла) = ТипСправочникНоменклатура Тогда
			СтррПоля.A02 = ВладелецФайла;
			СтррПоля.A03 = Неопределено;
		ИначеЕсли ТипЗнч(ВладелецФайла) = ТипСправочникПартнеры Тогда
			СтррПоля.A02 = Неопределено;
			СтррПоля.A03 = ВладелецФайла;
		Иначе
			Продолжить;
		КонецЕсли;
		
		СтррПоля.GUID = ВыборкаСсылка.УникальныйИдентификатор();
		СтррПоля.Name = ВыборкаСсылка.Наименование;		
		СтррПоля.A01  = ВыборкаСсылка;
		
		СтрокаТ = ТЗКартинки.Добавить();
		СтрокаТ.Ссылка 	 = ВыборкаСсылка;
		СтрокаТ.Описание = Выборка.Описание;
		СтрокаТ.ИмяФайла = ВРег(СтррПоля.GUID) + "." + Выборка.Расширение;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);	
		
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	Возврат ТЗКартинки;

КонецФункции //Функция ВыгрузитьСправочникИзображений()

Процедура ВыгрузитьПечатныеФормы(ДокОбмена)
	
	СтррВидыДокументов = Новый Структура(
		"Заказ,Реализация,ПКО",
		"e070d148-8c9c-4e5f-afda-2838d5be6618", "3b95d27f-7d6f-401c-aaf3-bd3dc78a1e82", "fcdd8d0b-6e35-401f-bc28-8527fd2f4d3a");
	
	ТзПФД = Новый ТаблицаЗначений;
	ТзПФД.Колонки.Добавить("Идентификатор");
	ТзПФД.Колонки.Добавить("Наименование");
	ТзПФД.Колонки.Добавить("Код");
	ТзПФД.Колонки.Добавить("ВидДокумента");
	ТзПФД.Колонки.Добавить("ЧислоКопий");
	ТзПФД.Колонки.Добавить("Ориентация");
	ТзПФД.Колонки.Добавить("ФорматФормы");
	
	ДобавитьПечатнуюФорму(ТзПФД, "СчетНаОплату", "Счет", СтррВидыДокументов.Заказ, "1", "0", "0");
	
	ДобавитьПечатнуюФорму(ТзПФД, "Торг12", "ТОРГ-12", СтррВидыДокументов.Реализация, "2", "0", "1");
	ДобавитьПечатнуюФорму(ТзПФД, "РасходнаяНакладная", "Расходная накладная", СтррВидыДокументов.Реализация, "1", "0", "1");
	ДобавитьПечатнуюФорму(ТзПФД, "СчетФактура", "Счет-фактура", СтррВидыДокументов.Реализация, "1", "1", "1");
	ДобавитьПечатнуюФорму(ТзПФД, "ТТН", "ТТН", 	СтррВидыДокументов.Реализация, "1", "0", "1");
	ДобавитьПечатнуюФорму(ТзПФД, "СправкаБТТН", "Справка 'Б' к ТТН", СтррВидыДокументов.Реализация, "1", "0", "0"); 
	ДобавитьПечатнуюФорму(ТзПФД, "УПД", "УПД", 	СтррВидыДокументов.Реализация, "1", "1", "1");
	
	ДобавитьПечатнуюФорму(ТзПФД, "ПриходныйКассовыйОрдер", "ПКО", СтррВидыДокументов.ПКО, "1", "0", "1");
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,Code,A01,A02,A03,A04");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПечатныеФормыДокументов", Истина);
	
	Для Каждого СтрокаТ Из ТзПФД Цикл 
		СтррПоля.GUID	= СтрокаТ.Идентификатор;
		СтррПоля.Name	= СтрокаТ.Наименование;
		СтррПоля.Code	= СтрокаТ.Код;
		СтррПоля.A01 	= СтрокаТ.ВидДокумента;
		СтррПоля.A02 	= СтрокаТ.ЧислоКопий;
		СтррПоля.A03 	= СтрокаТ.Ориентация;
		СтррПоля.A04	= СтрокаТ.ФорматФормы;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	СтррПоля = Новый Структура("GUID,A01,A02");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПечатныеФормыОрганизаций", Истина);
	
	МОрганизации = ОрганизацииВыгрузки(Неопределено);

	Для Каждого ОрганизацияСсылка Из МОрганизации Цикл
		
		Для Каждого СтрокаТ Из ТзПФД Цикл 
			СтррПоля.GUID	= Новый УникальныйИдентификатор();
			СтррПоля.A01 	= ОрганизацияСсылка;
			СтррПоля.A02 	= СтрокаТ.Идентификатор;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ДобавитьПечатнуюФорму(ТЗн, Код, Наименование, ИдВидаДокумента, ЧислоКопий, Ориентация, ФорматФормы)
	
	СтрокаТ = ТЗн.Добавить();
	СтрокаТ.Идентификатор 	= Новый УникальныйИдентификатор();
	СтрокаТ.Наименование	= Наименование; 
	СтрокаТ.Код				= Код;
	СтрокаТ.ВидДокумента 	= ВРег(ИдВидаДокумента); 
	СтрокаТ.ЧислоКопий 		= ЧислоКопий; 
	СтрокаТ.Ориентация 		= Ориентация; 
	СтрокаТ.ФорматФормы 	= ФорматФормы; // графическая или текстовая форма
	
КонецПроцедуры

Процедура ВыгрузитьВидыОплат(ДокОбмена)
	
	СтррПоля = Новый Структура("GUID,Name,A01");
	
	//ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", Неопределено); // вызов, чтобы проинициализировать структуру гТаблицыПеречислений с ее таблицами
	ТЗн = ГТаблицыПеречислений.ФормыОплаты;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыОплат", Истина);
	
	Для каждого СтрокаТ Из ТЗн Цикл
		СтррПоля.GUID = СтрокаТ.Идентификатор;
		Если СтрокаТ.Идентификатор = "EF11CDB0-57E7-4C0F-ECC2-49174E487D7D" Тогда
			Если ИспользоватьОплатуКаспи Тогда
				СтррПоля.Name = "Оплата с Kaspi QR";
				СтррПоля.A01  = "Реализация";
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
			КонецЕсли;
			Продолжить;
		Иначе
			СтррПоля.Name = Строка(СтрокаТ.Значение);
		КонецЕсли;
		СтррПоля.A01  = "Заказ,Реализация,ВозвратТоваров,Поступление,ПКО,РКО";
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла; 
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьВидыДоставки(ДокОбмена)
	
	Если ИспользоватьВидыДоставки = Ложь Тогда 
		Возврат;	
	КонецЕсли;
	
	СтррПоля = Новый Структура("GUID,Name");
	
	ПолучитьИдентификаторПеречисленияПоЗначению("СпособыДоставки", Неопределено); // вызов, чтобы проинициализировать структуру гТаблицыПеречислений с ее таблицами
	ТЗн = ГТаблицыПеречислений.СпособыДоставки;
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыДоставки", Истина);
	
	Для каждого СтрокаТ Из ТЗн Цикл
		СтррПоля.GUID = СтрокаТ.Идентификатор;
		СтррПоля.Name = Строка(СтрокаТ.Значение);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла; 
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);


КонецПроцедуры

//@skip-check module-unused-method
Процедура ВыгрузитьмтПланыПродаж(ДокОбмена, МенеджерВТ)

	Если НЕ ИспользоватьПланыПродаж И НЕ ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		Возврат; //В настройках отключена опция "ИспользоватьПланыПродаж" 
	КонецЕсли;
	
	//СЗИдКонтрагентов = Неопределено; //используется для выгрузки Документы.ПланПродаж
	
	ОписаниеТипаГУИД	= Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаЧисло 	= Новый ОписаниеТипов("Число");
	ОписаниеТипаДата	= Новый ОписаниеТипов("Дата");
	ОписаниеТипаБулево	= Новый ОписаниеТипов("Булево");
	
	//ПланыПродаж по номенклатуре
	ТЗПланПродаж = Новый ТаблицаЗначений;
	ТЗПланПродаж.Колонки.Добавить("гуидСсылка", 		ОписаниеТипаГУИД);
	ТЗПланПродаж.Колонки.Добавить("ПланПродаж", 		Новый ОписаниеТипов("ДокументСсылка.ПланПродаж"));
	ТЗПланПродаж.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗПланПродаж.Колонки.Добавить("ПланКоличество", 	ОписаниеТипаЧисло);
	ТЗПланПродаж.Колонки.Добавить("ПланСумма", 			ОписаниеТипаЧисло);
	ТЗПланПродаж.Колонки.Добавить("НачалоПериода", 		ОписаниеТипаДата);
	ТЗПланПродаж.Колонки.Добавить("ОкончаниеПериода",	ОписаниеТипаДата);
	ТЗПланПродаж.Колонки.Добавить("УчетПоСумме",		ОписаниеТипаБулево);
	ТЗПланПродаж.Колонки.Добавить("Валюта",				Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТЗПланПродаж.Колонки.Добавить("Партнер",			Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗПланПродаж.Колонки.Добавить("ФактКоличество", 	ОписаниеТипаЧисло);
	ТЗПланПродаж.Колонки.Добавить("ФактСумма", 			ОписаниеТипаЧисло);
	ТЗПланПродаж.Колонки.Добавить("ПроцентВыполнения", 	ОписаниеТипаЧисло);
	
	
	//ПланыПродажПоТоварнойКатегории
	ТЗПланПродажПоКатегориям = Новый ТаблицаЗначений;
	ТЗПланПродажПоКатегориям.Колонки.Добавить("гуидСсылка", 		ОписаниеТипаГУИД);
	ТЗПланПродажПоКатегориям.Колонки.Добавить("ПланПродаж", 		Новый ОписаниеТипов("ДокументСсылка.ПланПродажПоКатегориям"));
	ТЗПланПродажПоКатегориям.Колонки.Добавить("ТоварныеКатегории",	Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));
	ТЗПланПродажПоКатегориям.Колонки.Добавить("ПланКоличество", 	ОписаниеТипаЧисло);
	ТЗПланПродажПоКатегориям.Колонки.Добавить("НачалоПериода", 		ОписаниеТипаДата);
	ТЗПланПродажПоКатегориям.Колонки.Добавить("ОкончаниеПериода",	ОписаниеТипаДата);
	ТЗПланПродажПоКатегориям.Колонки.Добавить("ФактКоличество", 	ОписаниеТипаЧисло);
	ТЗПланПродажПоКатегориям.Колонки.Добавить("ПроцентВыполнения", 	ОписаниеТипаЧисло);
	
	ВыгрузитьПланыПродаж(ДокОбмена, МенеджерВТ, ТЗПланПродаж, ТЗПланПродажПоКатегориям);
	ВыгрузитьСоставПланаПродаж(ДокОбмена, МенеджерВТ, ТЗПланПродаж, ТЗПланПродажПоКатегориям);
	
Конецпроцедуры

Процедура ВыгрузитьПланыПродаж(ДокОбмена, МенеджерВТ, ТЗПланПродаж, ТЗПланПродажПоКатегориям)

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ПланыПродаж", Истина);

	//////++ ПланыПродаж Документы.ПланПродаж//////
	//У агент есть планы продаж в Документы.ПланПродаж
	Если НЕ МенеджерВТ.Таблицы.Найти("ВТ_ПланПродаж") = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПланПродаж.Ссылка КАК Ссылка,
		               |	ПланПродаж.Сценарий.Наименование КАК НаименованиеПлана,
		               |	ПланПродаж.Номер КАК Номер,
		               |	ПланПродаж.НачалоПериода КАК НачалоПериода,
		               |	ПланПродаж.ОкончаниеПериода КАК ОкончаниеПериода,
		               |	ПланПродаж.Сценарий.ПланПродажПланироватьПоСумме КАК ПланированиеПоСумме,
					   |	ПланПродаж.Валюта КАК Валюта, 
		               |	ВЫБОР
		               |		КОГДА ПланПродаж.ВидПлана.ЗаполнятьПартнераВТЧ
		               |			ТОГДА ПланПродажТовары.Партнер
		               |		ИНАЧЕ ПланПродаж.Партнер
		               |	КОНЕЦ КАК Партнер,
		               |	ПланПродажТовары.Номенклатура КАК Номенклатура,
		               |	ПланПродажТовары.Количество КАК Количество,
		               |	ПланПродажТовары.Сумма КАК Сумма,
		               |	ПланПродажТовары.ДатаОтгрузки КАК ДатаОтгрузки
		               |ИЗ
		               |	Документ.ПланПродаж.Товары КАК ПланПродажТовары
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПланПродаж КАК ВТ_ПланПродаж
		               |		ПО ПланПродажТовары.Ссылка = ВТ_ПланПродаж.Ссылка
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланПродаж
		               |		ПО ПланПродажТовары.Ссылка = ПланПродаж.Ссылка
		               |ГДЕ
		               |	ПланПродажТовары.Отменено = ЛОЖЬ
		               |ИТОГИ
		               |	СУММА(Количество),
		               |	СУММА(Сумма)
		               |ПО
		               |	Ссылка,
		               |	Партнер,
		               |	Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПланПродаж";

		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		//ТестВыборка = Запрос.Выполнить().Выгрузить(); 
		
		//структура плана продаж
		//@skip-check structure-consructor-too-many-keys
		СтррПланПродаж 				= Новый Структура("GUID, Name, A02, A03, A04, A05, A06, A07, Партнер");
		//Структуры для оптимизации функции ВыгрузитьПланыПродажЗаписьЭлемента
		//@skip-check structure-consructor-too-many-keys
		СтррПланПродажБезПартнера   = Новый Структура("GUID, Name, A02, A03, A04, A05, A06, A07");
		//@skip-check structure-consructor-too-many-keys
		СтррПланПродажСПартнером	= Новый Структура("GUID, Name, A02, A03, A04, A05, A06, A07");
		СтррПланПродажСПартнером.Вставить(?(РежимВыгрузкиРекомендуемый, "A09", "A08"));
		
		ТипПланирования	= "DC403B36-A935-4624-AA96-CF4B85097612"; // Планирование в разрезе номенклатуры
		
		ВыборкаПланыПродаж = Запрос.Выполнить();
		
		ВыборкаУровеньПланыПродаж = ВыборкаПланыПродаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаУровеньПланыПродаж.Следующий() Цикл			
			//Заполение плана продаж
			ИдПланПродаж = ВыборкаУровеньПланыПродаж.Ссылка.УникальныйИдентификатор();
			СтррПланПродаж.GUID = ИдПланПродаж;	
			СтррПланПродаж.Name = "План агента" + " " +  ВыборкаУровеньПланыПродаж.Номер;
			СтррПланПродаж.A02  = ТипПланирования;
			СтррПланПродаж.A03  = Истина; //планирование по количеству
			СтррПланПродаж.A04  = ВыборкаУровеньПланыПродаж.ПланированиеПоСумме;
			СтррПланПродаж.A05  = ВыборкаУровеньПланыПродаж.НачалоПериода;
			СтррПланПродаж.A06  = ВыборкаУровеньПланыПродаж.ОкончаниеПериода;
			СтррПланПродаж.A07  = Ложь;
			СтррПланПродаж.Партнер = Справочники.Партнеры.ПустаяСсылка();
			
			ВыборкаУровеньПартнер 	= ВыборкаУровеньПланыПродаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			КоличествоПартнеров 	= ВыборкаУровеньПартнер.Количество();
					
			Пока ВыборкаУровеньПартнер.Следующий() Цикл
				
				//Выгрузка ВсегоПланаПродаж 
				Если КоличествоПартнеров = 1 Тогда 
					Если ЗначениеЗаполнено(ВыборкаУровеньПартнер.Партнер) Тогда
						СтррПланПродаж.Партнер = ВыборкаУровеньПартнер.Партнер;
					КонецЕсли;
					//Добавить в xml
					ВыгрузитьПланыПродажЗаписьЭлемента(СтррПланПродаж, ДокОбмена, СтррПланПродажБезПартнера, СтррПланПродажСПартнером);
				КонецЕсли;
				
				//Выгрузка Планов продаж по партнерам из ВсегоПланаПродаж. 
				//Если у одного плана продаж используется несколько партнеров, то создаем еще отдельные планы продаж по каждому партнеру. 
				ФлДобавлятьПоКаждомуПартнеру = Ложь;
				Если КоличествоПартнеров > 1 И ЗначениеЗаполнено(ВыборкаУровеньПартнер.Партнер) Тогда
					ИдПланПродажПартнера= Новый УникальныйИдентификатор();
					СтррПланПродаж.GUID = ИдПланПродажПартнера;
					СтррПланПродаж.Name = Строка(ВыборкаУровеньПартнер.Номер) + " - " + Строка(ВыборкаУровеньПартнер.Контрагент);
					СтррПланПродаж.A02  = ТипПланирования;
					СтррПланПродаж.A03  = Истина; //планирование по количеству
					СтррПланПродаж.A04  = ВыборкаУровеньПартнер.ПланированиеПоСумме;
					СтррПланПродаж.A05  = ВыборкаУровеньПартнер.НачалоПериода;
					СтррПланПродаж.A06  = ВыборкаУровеньПартнер.ОкончаниеПериода;
					СтррПланПродаж.A07  = Ложь;
					СтррПланПродаж.Партнер = ВыборкаУровеньПартнер.Партнер;
					//Добавить в xml
					ВыгрузитьПланыПродажЗаписьЭлемента(СтррПланПродаж, ДокОбмена, СтррПланПродажБезПартнера, СтррПланПродажСПартнером);
					ФлДобавлятьПоКаждомуПартнеру = Истина;
				КонецЕсли;	
					
				ВыборкаУровеньНоменклатура = ВыборкаУровеньПартнер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаУровеньНоменклатура.Следующий() Цикл
					//Для плана продаж
					СТЗПланПродаж = ТЗПланПродаж.Добавить();
					СТЗПланПродаж.гуидСсылка 		= ИдПланПродаж;
					СТЗПланПродаж.ПланПродаж 		= ВыборкаУровеньПланыПродаж.Ссылка;
					СТЗПланПродаж.НачалоПериода 	= ВыборкаУровеньНоменклатура.НачалоПериода;
					СТЗПланПродаж.ОкончаниеПериода 	= КонецДня(ВыборкаУровеньНоменклатура.ОкончаниеПериода);
					СТЗПланПродаж.Номенклатура 		= ВыборкаУровеньНоменклатура.Номенклатура;
					СТЗПланПродаж.ПланКоличество 	= ВыборкаУровеньНоменклатура.Количество;
					СТЗПланПродаж.ПланСумма      	= ВыборкаУровеньНоменклатура.Сумма;
					СТЗПланПродаж.УчетПоСумме       = ВыборкаУровеньНоменклатура.ПланированиеПоСумме;
					СТЗПланПродаж.Валюта            = ВыборкаУровеньНоменклатура.Валюта;
					СТЗПланПродаж.Партнер           = ВыборкаУровеньНоменклатура.Партнер;

					//Для плана продаж по каждому партнеру
					Если ФлДобавлятьПоКаждомуПартнеру = Истина Тогда
						СТЗПланПродаж = ТЗПланПродаж.Добавить();
						СТЗПланПродаж.гуидСсылка 		= ИдПланПродажПартнера;
						СТЗПланПродаж.ПланПродаж		= ВыборкаУровеньПланыПродаж.Ссылка;
						СТЗПланПродаж.НачалоПериода 	= ВыборкаУровеньНоменклатура.НачалоПериода;
						СТЗПланПродаж.ОкончаниеПериода 	= КонецДня(ВыборкаУровеньНоменклатура.ОкончаниеПериода);
						СТЗПланПродаж.Номенклатура 		= ВыборкаУровеньНоменклатура.Номенклатура;
						СТЗПланПродаж.ПланКоличество 	= ВыборкаУровеньНоменклатура.Количество;
						СТЗПланПродаж.ПланСумма      	= ВыборкаУровеньНоменклатура.Сумма;
						СТЗПланПродаж.УчетПоСумме       = ВыборкаУровеньНоменклатура.ПланированиеПоСумме;
						СТЗПланПродаж.Валюта            = ВыборкаУровеньНоменклатура.Валюта;
						СТЗПланПродаж.Партнер           = ВыборкаУровеньНоменклатура.Партнер;
						
					КонецЕсли;
					//////++Выборка по номенклатуре, детально ////// 
					//ВыборкаУровеньНоменклатура = ВыборкаУровеньПартнер.Выбрать(ОбходРезультатаЗапроса.Прямой);
					//Пока ВыборкаУровеньНоменклатура.Следующий() Цикл
					//	
					//КонецЦикла;
					//--Выборка по номенклатуре, детально //////
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//////-- ПланыПродаж//////
	

	//////++ ПланПродажПоКатегориям Документы.ПланПродажПоКатегориям//////
	//у агент есть планы продаж в Документы.ПланПродажПоКатегориям
	Если НЕ МенеджерВТ.Таблицы.Найти("ВТ_ПланПродажПоКатегориям") = Неопределено И Константы.ИспользоватьПланированиеПродажПоКатегориям.Получить() = Истина Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПланПродажПоКатегориям.Ссылка КАК Ссылка,
		               |	ПланПродажПоКатегориям.Номер КАК Номер,
		               |	ПланПродажПоКатегориям.НачалоПериода КАК НачалоПериода,
		               |	ПланПродажПоКатегориям.ОкончаниеПериода КАК ОкончаниеПериода,
		               |	ПланПродажТоварныеКатегории.ТоварнаяКатегория КАК ТоварнаяКатегория,
		               |	ПланПродажТоварныеКатегории.Количество КАК Количество
		               |ИЗ
		               |	Документ.ПланПродажПоКатегориям.ТоварныеКатегории КАК ПланПродажТоварныеКатегории
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПланПродажПоКатегориям КАК ВТ_ПланПродажПоКатегориям
		               |		ПО ПланПродажТоварныеКатегории.Ссылка = ВТ_ПланПродажПоКатегориям.Ссылка
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориям
		               |		ПО ПланПродажТоварныеКатегории.Ссылка = ПланПродажПоКатегориям.Ссылка
		               |ГДЕ
		               |	ПланПродажТоварныеКатегории.Отменено = ЛОЖЬ
		               |ИТОГИ
		               |	СУММА(Количество)
		               |ПО
		               |	Ссылка,
		               |	ТоварнаяКатегория
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПланПродажПоКатегориям";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		//@skip-check structure-consructor-too-many-keys
		СтррПланПродаж 	= Новый Структура("GUID, Name, A02, A03, A04, A05, A06, A07");
		
		ТипПланирования = "7C2BCBA9-EEFB-410D-B41E-FFA4E680860A"; // Планирование в разрезе ТоварныеКатегории

		ВыборкаПланыПродаж = Запрос.Выполнить();
		
		ВыборкаУровеньПланыПродаж = ВыборкаПланыПродаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУровеньПланыПродаж.Следующий() Цикл			
			
			//Заполение ПланПродажПоКатегориям 
			СтррПланПродаж.GUID = ВыборкаУровеньПланыПродаж.Ссылка.УникальныйИдентификатор();
			СтррПланПродаж.Name = "План агента по категориям" + " " +  ВыборкаУровеньПланыПродаж.Номер;
			СтррПланПродаж.A02  = ТипПланирования;
			СтррПланПродаж.A03  = Истина; 	//планирование по количеству
			СтррПланПродаж.A04  = Ложь;		//Планирование по сумме
			СтррПланПродаж.A05  = ВыборкаУровеньПланыПродаж.НачалоПериода;
			СтррПланПродаж.A06  = ВыборкаУровеньПланыПродаж.ОкончаниеПериода;
			СтррПланПродаж.A07  = Ложь;
			
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПланПродаж);
		
			ВыборкаУровеньТоварнаяКатегория = ВыборкаУровеньПланыПродаж.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаУровеньТоварнаяКатегория.Следующий() Цикл
				
				//Заполнение ТЗПланПродажПоКатегориям
				СТЗПланПродажПоКатегориям = ТЗПланПродажПоКатегориям.Добавить();
				СТЗПланПродажПоКатегориям.гуидСсылка 		= СтррПланПродаж.GUID;
				СТЗПланПродажПоКатегориям.ПланПродаж 		= ВыборкаУровеньПланыПродаж.Ссылка;
				СТЗПланПродажПоКатегориям.НачалоПериода 	= СтррПланПродаж.A05;
				СТЗПланПродажПоКатегориям.ОкончаниеПериода 	= КонецДня(СтррПланПродаж.A06);
				СТЗПланПродажПоКатегориям.ТоварныеКатегории	= ВыборкаУровеньТоварнаяКатегория.ТоварнаяКатегория;
				СТЗПланПродажПоКатегориям.ПланКоличество 	= ВыборкаУровеньТоварнаяКатегория.Количество;
				////++Выборка по номенклатуре, детально ////// 
				//ВыборкаУровеньНоменклатура = ВыборкаУровеньТоварнаяКатегория.Выбрать(ОбходРезультатаЗапроса.Прямой);
				//Пока ВыборкаУровеньНоменклатура.Следующий() Цикл
				//	
				//КонецЦикла;
				//--Выборка по номенклатуре, детально //////
					
				КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//////-- ПланПродажПоКатегориям //////

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);	
	
КонецПроцедуры

Процедура ВыгрузитьСоставПланаПродаж(ДокОбмена, МенеджерВТ, ТЗПланПродаж, ТЗПланПродажПоКатегориям)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.СоставПланаПродаж", Истина);
	
	//1.ПланыПродаж Документы.ПланПродаж
	Если ТЗПланПродаж.Количество() > 0 Тогда

		ЗаполнитьВыполнениеПланаПродаж(МенеджерВТ, ТЗПланПродаж);
		
		//@skip-check structure-consructor-too-many-keys
		СтррПоля = Новый Структура("GUID, A01, A02, A03, A04, A05, A06, A07");
		Для Каждого стзПланПродаж Из ТЗПланПродаж Цикл
			СтррПоля.GUID = Новый УникальныйИдентификатор();
			СтррПоля.A01  = стзПланПродаж.гуидСсылка;
			СтррПоля.A02  = Строка(стзПланПродаж.Номенклатура.УникальныйИдентификатор());
			СтррПоля.A03  = стзПланПродаж.ПланКоличество;
			СтррПоля.A04  = стзПланПродаж.ПланСумма;
			СтррПоля.A05  = стзПланПродаж.ФактКоличество;
			СтррПоля.A06  = стзПланПродаж.ФактСумма;
			СтррПоля.A07  = стзПланПродаж.ПроцентВыполнения;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
		КонецЦикла;
		
	КонецЕсли;		
	
	//2. ПланПродажПоКатегориям Документы.ПланПродажПоКатегориям//////
	Если ТЗПланПродажПоКатегориям.Количество() > 0 Тогда
		
		ЗаполнитьВыполнениеПланаПродаж(МенеджерВТ, ТЗПланПродажПоКатегориям);
		
		//@skip-check structure-consructor-too-many-keys
		СтррПоля = Новый Структура("GUID, A01, A02, A03, A04, A05, A06, A07");
		Для Каждого стзПланПродаж Из ТЗПланПродажПоКатегориям Цикл
			СтррПоля.GUID = Новый УникальныйИдентификатор();
			СтррПоля.A01  = стзПланПродаж.гуидСсылка;
			СтррПоля.A02  = Строка(стзПланПродаж.ТоварныеКатегории.УникальныйИдентификатор());
			СтррПоля.A03  = стзПланПродаж.ПланКоличество;
			СтррПоля.A04  = 0;
			СтррПоля.A05  = стзПланПродаж.ФактКоличество;
			СтррПоля.A06  = 0;
			СтррПоля.A07  = стзПланПродаж.ПроцентВыполнения;
			
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
		КонецЦикла;		
		
	КонецЕсли;
	////////-- ПланПродажПоКатегориям Документы.ПланПродажПоКатегориям//////

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры

//Для оптимизвции записи ЗаписатьЭлементВДокументОбмена(), если в СтррПланПродаж заполнен/незаполнен Партнер, 
//то используем стркутуру с соответствующими свойствами.  
Процедура ВыгрузитьПланыПродажЗаписьЭлемента(СтррПланПродаж, ДокОбмена, СтррПланПродажБезПартнера, СтррПланПродажСПартнером)
	
	Если ЗначениеЗаполнено(СтррПланПродаж.Партнер) Тогда
		СтррПланПродажСПартнером.GUID 	= СтррПланПродаж.GUID;
		СтррПланПродажСПартнером.Name 	= СтррПланПродаж.Name;
		СтррПланПродажСПартнером.A02 	= СтррПланПродаж.A02;
		СтррПланПродажСПартнером.A03	= СтррПланПродаж.A03;
		СтррПланПродажСПартнером.A04 	= СтррПланПродаж.A04;
		СтррПланПродажСПартнером.A05 	= СтррПланПродаж.A05;
		СтррПланПродажСПартнером.A06 	= СтррПланПродаж.A06;
		СтррПланПродажСПартнером.A07 	= СтррПланПродаж.A07;
		Если РежимВыгрузкиРекомендуемый Тогда
			СтррПланПродажСПартнером.A09= СтррПланПродаж.Партнер;
		Иначе
			СтррПланПродажСПартнером.A08= СтррПланПродаж.Партнер;
		КонецЕсли;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПланПродажСПартнером);
	Иначе
		СтррПланПродажБезПартнера.GUID  = СтррПланПродаж.GUID;
		СтррПланПродажБезПартнера.Name  = СтррПланПродаж.Name;
		СтррПланПродажБезПартнера.A02 	= СтррПланПродаж.A02;
		СтррПланПродажБезПартнера.A03 	= СтррПланПродаж.A03;
		СтррПланПродажБезПартнера.A04 	= СтррПланПродаж.A04;
		СтррПланПродажБезПартнера.A05 	= СтррПланПродаж.A05;
		СтррПланПродажБезПартнера.A06 	= СтррПланПродаж.A06;
		СтррПланПродажБезПартнера.A07 	= СтррПланПродаж.A07;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПланПродажБезПартнера);
	КонецЕсли;
	
КонецПроцедуры

//Процедура заполняет в ТЗПланПродаж коноки ФактКоличество, ФактСумма, ПроцентВыполнения
//
// Параметры:
//  МенеджерВТ	 - МенеджерВременныхТаблиц - менеджер временных таблиц. 
//  ТЗПланПродаж - ТаблицаЗначений - Определяется в ВыгрузитьмтПланыПродаж().
//
Процедура ЗаполнитьВыполнениеПланаПродаж(МенеджерВТ, ТЗПланПродаж)

	//1.Определение типа Справочника ПланаПродаж
	
	Если ТЗПланПродаж.Колонки.Найти("Номенклатура") <> Неопределено Тогда
		//В параметре ТЗПланПродаж используется таблица ТЗПланПродаж (определяется в ВыгрузитьмтПланыПродаж()) 
		ФлПланПродажПоНоменклатуре = Истина;
	ИначеЕсли ТЗПланПродаж.Колонки.Найти("ТоварныеКатегории") <> Неопределено Тогда
		//В параметре ТЗПланПродаж используется таблица тзПланПродажПоКатегориям (определяется в ВыгрузитьмтПланыПродаж())
		ФлПланПродажПоНоменклатуре = Ложь;
	Иначе
		//Ошибка
		Возврат;
	КонецЕсли;
	
	//2. Структуры, массив и переменые для отбора
		//МОтбора 			- Массив со значениями типа Справочник.Номенклатуры или Справочник.ТоварныеКатегории. Для формирования СтррОтборЗапроса  
		//СтррОтборПланПродаж  - Структура для формирвания МОтбора
		//СтррОтборВыборки     - Структура для обработки результатов запроса
		//СтррПарметрыЗапроса  - Структура с Параметрами для Запроса
	МОтбора = Новый Массив; //Значения  
	Если ФлПланПродажПоНоменклатуре Тогда 
		ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		СтррОтборПланПродаж = Новый Структура("НачалоПериода, ОкончаниеПериода, Партнер");
		СтррОтборВыборки 	= Новый Структура("НачалоПериода, ОкончаниеПериода, Номенклатура");
	Иначе
		СтррОтборПланПродаж = Новый Структура("НачалоПериода, ОкончаниеПериода");
		СтррОтборВыборки	= Новый Структура("НачалоПериода, ОкончаниеПериода, ТоварныеКатегории");
	КонецЕсли;
	//@skip-check structure-consructor-too-many-keys
	СтррПарметрыЗапроса		= Новый Структура("НачалоПериода, ОкончаниеПериода, мНоменклатура, мТоварныеКатегории, Партнер");
		
	//3. Периоды для отбора из РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты()  
	Если ФлПланПродажПоНоменклатуре Тогда
		ТЗПериоды = ТЗПланПродаж.Скопировать(, "НачалоПериода, ОкончаниеПериода, Партнер");
		ТЗПериоды.Свернуть("НачалоПериода, ОкончаниеПериода, Партнер");
	Иначе	
		ТЗПериоды = ТЗПланПродаж.Скопировать(, "НачалоПериода, ОкончаниеПериода");
		ТЗПериоды.Свернуть("НачалоПериода, ОкончаниеПериода");
	КонецЕсли;	
	
	//4. Обработка по периодам             
	Для Каждого стзПериоды Из ТЗПериоды Цикл
		
		МОтбора.Очистить();
			
		//5.1 Получение мОтбора для СтррОтбор.мНоменклатура и СтррОтбор.мТоварныеКатегории
		СтррОтборПланПродаж.НачалоПериода 	= стзПериоды.НачалоПериода;
		СтррОтборПланПродаж.ОкончаниеПериода= стзПериоды.ОкончаниеПериода;
		Если ФлПланПродажПоНоменклатуре Тогда  
			СтррОтборПланПродаж.Партнер = стзПериоды.Партнер; 	
		КонецЕсли;
		мстзПланПродаж = ТЗПланПродаж.НайтиСтроки(СтррОтборПланПродаж);
		Для Каждого стзПланПродаж Из мстзПланПродаж Цикл
			Если ФлПланПродажПоНоменклатуре И МОтбора.Найти(стзПланПродаж.Номенклатура) = Неопределено Тогда
				МОтбора.Добавить(стзПланПродаж.Номенклатура);
			ИначеЕсли Не ФлПланПродажПоНоменклатуре И МОтбора.Найти(стзПланПродаж.ТоварныеКатегории) = Неопределено Тогда
				МОтбора.Добавить(стзПланПродаж.ТоварныеКатегории);
			Конецесли;
		КонецЦикла;   		

		//5.2.1 СтррОтбор.НачалоПериода
		СтррПарметрыЗапроса.НачалоПериода		= стзПериоды.НачалоПериода;
		//5.2.2 СтррОтбор.ОкончаниеПериода
		СтррПарметрыЗапроса.ОкончаниеПериода	= стзПериоды.ОкончаниеПериода;
		//5.2.3 СтррОтбор.мНоменклатура или СтррОтбор.мТоварныеКатегории или СтррОтбор.Партнер
		Если ФлПланПродажПоНоменклатуре Тогда
			СтррПарметрыЗапроса.мНоменклатура 	    = МОтбора;
			СтррПарметрыЗапроса.Партнер	 	    = стзПериоды.Партнер;
		Иначе
			СтррПарметрыЗапроса.мТоварныеКатегории = МОтбора;
		КонецЕсли;

		//6. Получение КоличествоФакт и СуммаФакт
		//РегистрНакопления.ЗаказыКлиентов продажи по заказам (не используем)
		//РегистрНакопления.ВыручкаИСебестоимостьПродаж по Заказам и Реализациям.
		Запрос = Новый Запрос;
		Если ФлПланПродажПоНоменклатуре Тогда
			//6.1 ПланыПродаж
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДокументЗаказ.Ссылка КАК Ссылка
			               |ПОМЕСТИТЬ ВТ_ДокументыАгента
			               |ИЗ
			               |	Документ.ЗаказКлиента КАК ДокументЗаказ
			               |ГДЕ
			               |	ДокументЗаказ.Менеджер = &ВыбАгент
			               |	И ДокументЗаказ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			               |	И ДокументЗаказ.ПометкаУдаления = ЛОЖЬ
			               |	И ВЫБОР
			               |			КОГДА &ОтборПоПартнеру = ИСТИНА
			               |				ТОГДА ДокументЗаказ.Партнер = &Партнер
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ДокументРеализация.Ссылка
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг КАК ДокументРеализация
			               |ГДЕ
			               |	ДокументРеализация.Менеджер = &ВыбАгент
			               |	И ДокументРеализация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			               |	И ДокументРеализация.ПометкаУдаления = ЛОЖЬ
			               |	И ВЫБОР
			               |			КОГДА &ОтборПоПартнеру = ИСТИНА
			               |				ТОГДА ДокументРеализация.Партнер = &Партнер
			               |			ИНАЧЕ ИСТИНА
			               |		КОНЕЦ
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ссылка
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	АналитикаУчетаНоменклатуры.КлючАналитики КАК КлючАналитики,
			               |	АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура
			               |ПОМЕСТИТЬ ВТ_СвязьКлючАналитикиИНоменклатура
			               |ИЗ
			               |	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			               |ГДЕ
			               |	АналитикаУчетаНоменклатуры.Номенклатура В(&мНоменклатура)
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	КлючАналитики
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			               |	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК КоличествоФакт,
			               |	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК СуммаФакт,
			               |	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиРеглОборот КАК СуммаФактВВалютеРегУчета
			               |ПОМЕСТИТЬ ВТ_ВыручкаИСебестоимостьПродаж
			               |ИЗ
			               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
			               |			&НачалоПериода,
			               |			&ОкончаниеПериода,
			               |			Регистратор,
			               |			АналитикаУчетаНоменклатуры В
			               |					(ВЫБРАТЬ
			               |						ВТ_СвязьКлючАналитикиИНоменклатура.КлючАналитики
			               |					ИЗ
			               |						ВТ_СвязьКлючАналитикиИНоменклатура КАК ВТ_СвязьКлючАналитикиИНоменклатура)
			               |				И ЗаказКлиента В
			               |					(ВЫБРАТЬ
			               |						ВТ_ДокументыАгента.Ссылка
			               |					ИЗ
			               |						ВТ_ДокументыАгента КАК ВТ_ДокументыАгента)) КАК ВыручкаИСебестоимостьПродажОбороты
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	АналитикаУчетаНоменклатуры
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_СвязьКлючАналитикиИНоменклатура.Номенклатура КАК НоменклатураФакт,
			               |	СУММА(ВыручкаИСебестоимостьПродаж.КоличествоФакт) КАК КоличествоФакт,
			               |	СУММА(ВыручкаИСебестоимостьПродаж.СуммаФактВВалютеРегУчета) КАК СуммаФактВВалютеРегУчета
			               |ИЗ
			               |	ВТ_ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СвязьКлючАналитикиИНоменклатура КАК ВТ_СвязьКлючАналитикиИНоменклатура
			               |		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = ВТ_СвязьКлючАналитикиИНоменклатура.КлючАналитики
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ВТ_СвязьКлючАналитикиИНоменклатура.Номенклатура";

		Иначе
			//6.2 ПланыПродажПоКатегориям
			Запрос.Текст = "ВЫБРАТЬ
			               |	ДокументЗаказ.Ссылка КАК Ссылка
			               |ПОМЕСТИТЬ ВТ_ДокументыАгента
			               |ИЗ
			               |	Документ.ЗаказКлиента КАК ДокументЗаказ
			               |ГДЕ
			               |	ДокументЗаказ.Менеджер = &ВыбАгент
			               |	И ДокументЗаказ.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			               |	И ДокументЗаказ.ПометкаУдаления = ЛОЖЬ
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ДокументРеализация.Ссылка
			               |ИЗ
			               |	Документ.РеализацияТоваровУслуг КАК ДокументРеализация
			               |ГДЕ
			               |	ДокументРеализация.Менеджер = &ВыбАгент
			               |	И ДокументРеализация.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			               |	И ДокументРеализация.ПометкаУдаления = ЛОЖЬ
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Ссылка
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	Номенклатура.Ссылка КАК Номенклатура,
			               |	Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория
			               |ПОМЕСТИТЬ ВТ_СвязьНоменклатураИТоварнаяКатегория
			               |ИЗ
			               |	Справочник.Номенклатура КАК Номенклатура
			               |ГДЕ
			               |	Номенклатура.ТоварнаяКатегория В(&мТоварныеКатегории)
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Номенклатура
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	АналитикаУчетаНоменклатуры.КлючАналитики КАК КлючАналитики,
			               |	ВТ_СвязьНоменклатураИТоварнаяКатегория.ТоварнаяКатегория КАК ТоварнаяКатегория
			               |ПОМЕСТИТЬ ВТ_СвязьКлючАналитикиИТоварнаяКатегория
			               |ИЗ
			               |	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СвязьНоменклатураИТоварнаяКатегория КАК ВТ_СвязьНоменклатураИТоварнаяКатегория
			               |		ПО АналитикаУчетаНоменклатуры.Номенклатура = ВТ_СвязьНоменклатураИТоварнаяКатегория.Номенклатура
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	КлючАналитики
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			               |	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК КоличествоФакт
			               |ПОМЕСТИТЬ ВТ_ВыручкаИСебестоимостьПродаж
			               |ИЗ
			               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
			               |			&НачалоПериода,
			               |			&ОкончаниеПериода,
			               |			Регистратор,
			               |			АналитикаУчетаНоменклатуры В
			               |					(ВЫБРАТЬ
			               |						ВТ_СвязьКлючАналитикиИТоварнаяКатегория.КлючАналитики
			               |					ИЗ
			               |						ВТ_СвязьКлючАналитикиИТоварнаяКатегория КАК ВТ_СвязьКлючАналитикиИТоварнаяКатегория)
			               |				И ЗаказКлиента В
			               |					(ВЫБРАТЬ
			               |						ВТ_ДокументыАгента.Ссылка
			               |					ИЗ
			               |						ВТ_ДокументыАгента КАК ВТ_ДокументыАгента)) КАК ВыручкаИСебестоимостьПродажОбороты
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	АналитикаУчетаНоменклатуры
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ВТ_СвязьКлючАналитикиИТоварнаяКатегория.ТоварнаяКатегория КАК НоменклатураФактТоварнаяКатегория,
			               |	СУММА(ВыручкаИСебестоимостьПродаж.КоличествоФакт) КАК КоличествоФакт
			               |ИЗ
			               |	ВТ_ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СвязьКлючАналитикиИТоварнаяКатегория КАК ВТ_СвязьКлючАналитикиИТоварнаяКатегория
			               |		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = ВТ_СвязьКлючАналитикиИТоварнаяКатегория.КлючАналитики
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ВТ_СвязьКлючАналитикиИТоварнаяКатегория.ТоварнаяКатегория";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("НачалоПериода",		СтррПарметрыЗапроса.НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода",	СтррПарметрыЗапроса.ОкончаниеПериода);
		Запрос.УстановитьПараметр("ВыбАгент", 			ВыбАгент);
				
		Если ФлПланПродажПоНоменклатуре Тогда
			Запрос.УстановитьПараметр("мНоменклатура", 		СтррПарметрыЗапроса.мНоменклатура);
			Если ЗначениеЗаполнено(СтррПарметрыЗапроса.Партнер) Тогда
				Запрос.УстановитьПараметр("ОтборПоПартнеру",	Истина);
			Иначе
				Запрос.УстановитьПараметр("ОтборПоПартнеру",	Ложь);
			КонецЕсли;
			Запрос.УстановитьПараметр("Партнер", СтррПарметрыЗапроса.Партнер);
		Иначе
			Запрос.УстановитьПараметр("мТоварныеКатегории", СтррПарметрыЗапроса.мТоварныеКатегории);
		КонецЕсли;
		
		
		//@skip-check query-in-loop
		ВыборкаРезультат = Запрос.Выполнить().Выгрузить();			
			
		//7. Заполнение КоличествоФакт, СуммаФакт, ПроцентВыполнения в ТЗПланПродаж
		Для Каждого стзВыборкаРезультат Из ВыборкаРезультат Цикл 
			
			//8 СтррОтборВыборки для поиска строк в ТЗПланПродаж
			СтррОтборВыборки.НачалоПериода 		= СтррПарметрыЗапроса.НачалоПериода;
			СтррОтборВыборки.ОкончаниеПериода 	= СтррПарметрыЗапроса.ОкончаниеПериода;
			Если ФлПланПродажПоНоменклатуре Тогда 
				СтррОтборВыборки.Номенклатура 		= стзВыборкаРезультат.НоменклатураФакт;
			Иначе
				СтррОтборВыборки.ТоварныеКатегории	= стзВыборкаРезультат.НоменклатураФактТоварнаяКатегория;
			КонецЕсли;

			//9 Изменение ТЗПланПродаж колонок ФактКоличество, ФактСумма, ПроцентВыполнения 
			мстзПланПродаж = ТЗПланПродаж.НайтиСтроки(СтррОтборВыборки);
			Для Каждого стзПланПродаж Из мстзПланПродаж Цикл
				
				//9.1 ФактКоличество
				стзПланПродаж.ФактКоличество =  стзВыборкаРезультат.КоличествоФакт;
				
				//5.2 ФактСумма
				Если ФлПланПродажПоНоменклатуре Тогда
					стзПланПродаж.ФактСумма = стзВыборкаРезультат.СуммаФактВВалютеРегУчета;
					Если ЗначениеЗаполнено(стзПланПродаж.Валюта) И ЗначениеЗаполнено(ВалютаРегУчета) И стзПланПродаж.Валюта <> ВалютаРегУчета Тогда
						стзПланПродаж.ФактСумма = ПересчитатьСуммуДокументаВВалюту(стзПланПродаж.ФактСумма, ВалютаРегУчета, стзПланПродаж.Валюта, СтррПарметрыЗапроса.ОкончаниеПериода);	
					КонецЕсли;
				КонецЕсли;
						
				// 5.3 ПроцентВыполнения
				ВыполнениеПоКоличеству = ?(стзПланПродаж.ПланКоличество = 0, 1, стзПланПродаж.ФактКоличество / стзПланПродаж.ПланКоличество);
				Если ФлПланПродажПоНоменклатуре Тогда
					Если стзПланПродаж.УчетПоСумме Тогда 								
						ВыполнениеПоСуммам = ?(стзПланПродаж.ПланСумма = 0, 1, стзПланПродаж.ФактСумма / стзПланПродаж.ПланСумма);
						Если стзПланПродаж.ПланКоличество = 0 Тогда
							ПроцентВыполнения = ВыполнениеПоСуммам;
						ИначеЕсли стзПланПродаж.ПланСумма = 0 Тогда
							ПроцентВыполнения = ВыполнениеПоКоличеству;
						ИначеЕсли стзПланПродаж.ПланКоличество = 0 И стзПланПродаж.ПланСумма = 0 Тогда 
							ПроцентВыполнения = 1;
						Иначе
							ПроцентВыполнения  = (ВыполнениеПоКоличеству + ВыполнениеПоСуммам) / 2;
						КонецЕсли;						
					Иначе
						ПроцентВыполнения  = ВыполнениеПоКоличеству;
					КонецЕсли;
				Иначе
					ПроцентВыполнения  = ВыполнениеПоКоличеству;	
				КонецЕсли;
				стзПланПродаж.ПроцентВыполнения	= Окр(ПроцентВыполнения * 100, 0, 1);

			КонецЦикла;
			
		КонецЦикла;			
		
	КонецЦикла;  	
	
КонецПроцедуры

// Процедура выгружает ветку картинок ("PICTURES") в файл выгрузки.
// Параметры:
//		ДокОбмена  - ЗаписьXML - XML-документ выгрузки.
//		ТЗКартинки - Неопределено, ТаблицаЗначений - таблица свойств картинок с колонками:
//			* Ссылка - СправочникСсылка.ПартнерыПрисоединенныеФайлы, СправочникСсылка.НоменклатураПрисоединенныеФайлы - ссылка 
//			   на элемент справочника. 
// 			* Описание - Строка - описание картинки
//  		* ИмяФайла - Строка - имя файла для записи в zip-архив
Процедура ВыгрузитьИзображения(ДокОбмена, ТЗКартинки)
	
	Если ТЗКартинки = Неопределено Или ТЗКартинки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтррПоля = Новый Структура("GUID,FileName,Description");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("PICTURES");
	ДобавитьПоле(ДокОбмена, "Comment", "Картинки");	
	
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");
	
	Для каждого СтрокаТ Из ТЗКартинки Цикл
		СтррПоля.GUID		 = ВРег(СтрокаТ.Ссылка.УникальныйИдентификатор());
		СтррПоля.FileName	 = СтрокаТ.ИмяФайла;
		СтррПоля.Description = СтрокаТ.Описание;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла; 	
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); // PICTURES
	
КонецПроцедуры

Процедура ВыгрузитьРезультатыПосещений(ДокОбмена)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.РезультатыПосещений");
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A01,A02"); // A01 - "Анкетирование", A02 - "ШаблонАнкеты"
	
	СтррВО = ВОСвойстваОбъекта("_РезультатыПосещений"); // системные свойства виртуального объекта	
	ПометкаУдаления = ВОТЗИконкиСтатуса(СтррВО).Помечен;
	
	ТЗн = ВОТЗЗагрузить(СтррВО, Истина);
	Для каждого СтрокаТ Из ТЗн Цикл
		Если СтрокаТ.Статус = ПометкаУдаления Тогда
		    Продолжить;
		КонецЕсли; 
		СтррПоля.GUID = СтрокаТ.ID;
		СтррПоля.Name = СтрокаТ.Наименование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла; 
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьВидыЗадач(ДокОбмена)
	
	СтррВОЗадание 	= ВОСвойстваОбъекта("_ВидыЗадач");
	ТЗВидыЗадач		= ВОТЗЗагрузить(СтррВОЗадание, Истина);
	ПометкаУдаления = ВОТЗИконкиСтатуса(СтррВОЗадание).Помечен;
	//@skip-check structure-consructor-too-many-keys
	СтррПоля 		= Новый Структура("GUID,IsDeleted,Name,A01,A02,GrpID0");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ВидыЗадач", Истина);

	Для каждого стзВидыЗадач Из ТЗВидыЗадач Цикл
		Если стзВидыЗадач.Статус = ПометкаУдаления Тогда
		    Продолжить;
		КонецЕсли;
		
		СтррПоля.GUID		= стзВидыЗадач.ID;
		СтррПоля.IsDeleted	= 0;
		СтррПоля.Name       = стзВидыЗадач.Наименование;
		СтррПоля.A01        = стзВидыЗадач.ТипЗадачи;
		СтррПоля.A02        = "";
		СтррПоля.GrpID0     = "00000000-0000-0000-0000-000000000001"; //стзВидыЗадач.Группа;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);				
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	
	//Группировки
	СтррПоля = Новый Структура("GUID,Name,ParId");
	
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUPS");
	ДокОбмена.ЗаписатьНачалоЭлемента("GROUP");
	ДобавитьПоле(ДокОбмена, "GUID", "BEB1F064-F717-46F7-9426-8A82B81D9A6C");
	ДобавитьПоле(ДокОбмена, "Comment", "Элементы группировки по иерархии");
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");

	СтррПоля.GUID =     "00000000-0000-0000-0000-000000000001";
	СтррПоля.Name =		"Все"; 	
	СтррПоля.ParId = 	"";
	ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //GROUP
	ДокОбмена.ЗаписатьКонецЭлемента(); //GROUPS
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG       
	
КонецПроцедуры

Процедура ВыгрузитьКомандыДляМобильныхУстройств(ДокОбмена)
	
	СтррВОКомандыДляМУ	= ВОСвойстваОбъекта("_КомандыДляМУ");
	ТЗКомандыДляМУ		= ВОТЗЗагрузить(СтррВОКомандыДляМУ, Истина);
	ТипыКомандДляМУ		= ТипыКомандДляМУ();
	ПометкаУдаления 	= ВОТЗИконкиСтатуса(СтррВОКомандыДляМУ).Помечен;
	//@skip-check structure-consructor-too-many-keys
	СтррПоля 			= Новый Структура("GUID, IsDeleted, Name, A01, A02, A03");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КомандыДляМУ", Истина);

	Для каждого стзКомандыДляМУ Из ТЗКомандыДляМУ Цикл
		
		Если стзКомандыДляМУ.Статус = ПометкаУдаления ИЛИ НЕ стзКомандыДляМУ.Активна Тогда
			// Выгрузка не требуется.
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(стзКомандыДляМУ.ВидКоманды) ИЛИ ПустаяСтрока(стзКомандыДляМУ.ПараметрКоманды) Тогда	
			// Ошибка.
			Продолжить;
		ИначеЕсли НЕ стзКомандыДляМУ.ДляВсехАгентов И стзКомандыДляМУ.Агенты.НайтиПоЗначению(ВыбАгент) = Неопределено Тогда
			// Выгрузка не для этого агента.
			Продолжить;
		КонецЕсли;
		
		СтррПоля.GUID		= стзКомандыДляМУ.ID;
		СтррПоля.IsDeleted	= 0;
		СтррПоля.Name       = стзКомандыДляМУ.Наименование;
		
		СтррПоля.A01        = стзКомандыДляМУ.ПараметрКоманды;
		СтррПоля.A02        = 1;
		СтррПоля.A03     	= ТипыКомандДляМУ[стзКомандыДляМУ.ВидКоманды]; 
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);				
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG
	
КонецПроцедуры

Процедура ВыгрузитьДополнительныеОтчетыДляМУ(ДокОбмена)
	
	// Типы параметровМТ
	СТВТипыПараметровМТ = ДопОтчетТипыПараметровМТ();
	// Данные ВО 
	СтррВОДопОтчетыДляМУ= ВОСвойстваОбъекта("_ДополнительныеОтчетыДляМУ");
	ТЗДопОтчетыДляМУ	= ВОТЗЗагрузить(СтррВОДопОтчетыДляМУ, Истина);
	ПометкаУдаления 	= ВОТЗИконкиСтатуса(СтррВОДопОтчетыДляМУ).Помечен;
	// Структуры выгрузки	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля 			= Новый Структура("GUID, IsDeleted, Name, A01");
	//@skip-check structure-consructor-too-many-keys
	СтррПоляТЧ 			= Новый Структура("GUID, CtlgId, A01, A02, A03, A04");
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ДополнительныеОтчетыДляМУ", Истина);

	Для каждого стзДопОтчетыДляМУ Из ТЗДопОтчетыДляМУ Цикл
		
		Если стзДопОтчетыДляМУ.Статус = ПометкаУдаления ИЛИ НЕ стзДопОтчетыДляМУ.Выгружать Тогда
			// Выгрузка не требуется.
			Продолжить;
		КонецЕсли;
		                              
		//1. Элемент
		СтррПоля.GUID		= стзДопОтчетыДляМУ.IDМТ; //IDМТ - для проверки актуальности параметров.
		СтррПоля.IsDeleted	= 0;
		СтррПоля.Name       = стзДопОтчетыДляМУ.Наименование;
		СтррПоля.A01        = ДопОтчетИмяФайла(стзДопОтчетыДляМУ.ID);		
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);				
		
		//2. Табличная часть
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
		ДобавитьПоле(ДокОбмена, "GUID", "1242BAC5-4BC6-4B29-8B4F-78F87E49F4EB");
		ДобавитьПоле(ДокОбмена, "Comment", "Табличная часть 'Параметры'");
		
		СтррВООбъект = ВОЭлементЗагрузить(СтррВОДопОтчетыДляМУ, стзДопОтчетыДляМУ.ID);
		Если СтррВООбъект = Неопределено ИЛИ НЕ СтррВООбъект.Свойство("ПараметрыОтчета") Тогда
			Продолжить; //Ошибка
		Конецесли;
						            
		Для Каждого стзПараметрыОтчета Из СтррВООбъект.ПараметрыОтчета Цикл
			
			Если стзПараметрыОтчета.ТипПараметраGUID = ДопОтчетИдентификаторТипаПараметраНеВыгружать() Тогда
				Продолжить; //Выгрузка не требуется.
			КонецЕсли;
			
			ТипПараметраМТ = СТВТипыПараметровМТ.Получить(стзПараметрыОтчета.ТипПараметраGUID);			
			
			Если ТипПараметраМТ = Неопределено 
				 ИЛИ Не ЗначениеЗаполнено(стзПараметрыОтчета.АтрибутGUID)
				 ИЛИ Не ЗначениеЗаполнено(стзПараметрыОтчета.ИмяПараметра)
				 ИЛИ ПустаяСтрока(стзПараметрыОтчета.ИмяПараметра) 
			Тогда
				//Ошибка
				СтррПоляТЧ.GUID		= "00000000-0000-0000-0000-000000000000";
				СтррПоляТЧ.CtlgId   = стзДопОтчетыДляМУ.IDМТ;
				СтррПоляТЧ.A01      = "ОшибкаПараметра" + стзПараметрыОтчета.АтрибутНомер + ?(ЗначениеЗаполнено(стзПараметрыОтчета.ИмяПараметра), " (" + стзПараметрыОтчета.ИмяПараметра + ")", "");
				СтррПоляТЧ.A02      = "Строка";
				СтррПоляТЧ.A03      = стзПараметрыОтчета.Обязательный;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧ);
				Продолжить; 
			КонецЕсли;
			
			СтррПоляТЧ.GUID		= стзПараметрыОтчета.АтрибутGUID;
			СтррПоляТЧ.CtlgId   = стзДопОтчетыДляМУ.IDМТ;
			СтррПоляТЧ.A01      = стзПараметрыОтчета.ИмяПараметра;
			СтррПоляТЧ.A02      = ТипПараметраМТ;
			СтррПоляТЧ.A03      = стзПараметрыОтчета.Обязательный;
			Если стзПараметрыОтчета.ИмяПараметра = "ДатаНач" Или стзПараметрыОтчета.ИмяПараметра = "НачалоПериода" Тогда
				//@skip-check use-non-recommended-method
				СтррПоляТЧ.A04 = НачалоМесяца(ТекущаяДата());
			Иначе
				СтррПоляТЧ.A04 = "";
			КонецЕсли;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧ);
			
		КонецЦикла;					
		
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
		
	КонецЦикла;
	
	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG

	
	
КонецПроцедуры

// ВыгрузкаСправочников
#КонецОбласти

#Область ВыгрузкаДокументов

Процедура ВыгрузитьДокументы(ДокОбмена, МенеджерВТ)

	ДокОбмена.ЗаписатьНачалоЭлемента("DOCUMENTS");
	ДобавитьПоле(ДокОбмена, "Comment", "Документы");

	ВыгрузитьДокументыЗаказ(ДокОбмена, МенеджерВТ); 
	
	ВыгрузитьДокументыПродажи(ДокОбмена, МенеджерВТ); 
	
	ВыгрузитьДокументыВозвраты(ДокОбмена, МенеджерВТ); 
	
	ВыгрузитьДокументыСчетаФактураВыданные(ДокОбмена);
	
	ВыгрузитьДокументыДолг(ДокОбмена, МенеджерВТ);
	
	ВыгрузитьДокументыПеремещения(ДокОбмена);
	
	ВыгрузитьДокументыЗадание(ДокОбмена);
	
	ВыгрузитьМаршруты(ДокОбмена);

	Если ОчищатьДокументыПередЗагрузкой Тогда 
		// нужно выгрузить пустые тэги с атрибутом KillAll для невыгруженных видов документов, указанных в списке СписокОчищаемыхДокументов
		ИсключитьВидыДокументов = "Заказ,Долг,Реализация,Перемещение,СчетФактура";
		ВыгрузитьТэгиУдаленияДокументов(ДокОбмена, СтрРазделить_(ИсключитьВидыДокументов));
	КонецЕсли;

	ДокОбмена.ЗаписатьКонецЭлемента(); //DOCUMENTS

КонецПроцедуры

Процедура ВыгрузитьТэгиУдаленияДокументов(ДокОбмена, МИсключитьВидыДокументов)
	
	Если ОчищатьДокументыПередЗагрузкой Тогда
		Для Каждого Элемент Из СписокОчищаемыхДокументов Цикл
			Если Неопределено = МИсключитьВидыДокументов.Найти(Элемент.Значение) Тогда
				ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ." + Элемент.Значение, 1); // с признаком удаления всех документов данного вида
				ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДокументыЗаказ(ДокОбмена, МенеджерВТ)

	Если ИнтервалВыгрузкиЗаказов = 0 Тогда // это единый параметр для выгрузки документов продаж
		Возврат;
	КонецЕсли; 
	
	Если ИспользоватьАдресаДоставки Тогда
		ТЗАдресаДоставки = АдресаДоставкиЗагрузитьТЗ();	;
	КонецЕсли;

	Результат = ДанныеПоДокументамЗаказПокупателя(МенеджерВТ);
	ВыборкаДок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,dt,IsPost,DocNumber,A02,A03,A04,A05,A06,A07,A08,A09,A010,A011,A016,A019"); // шапка документа
	СтррПараметрыТЧ = Новый Структура("GUID,Comment", "0738E61B-F06F-464A-8483-4249E0254819", "Табличная часть 'Товары'");	
	//@skip-check structure-consructor-too-many-keys
	СтррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06,A09,A07,A08,A010,A011,A012,A015"); // ТЧ документа
	
	СтррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");
	
	// sk_220328 MOD-2386 СписокЗаказов = Новый Массив;

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Заказ");
	Пока ВыборкаДок.Следующий() Цикл
		ВыборкаТабличнойЧасти = ВыборкаДок.Выбрать();
		ВыборкаТабличнойЧасти.Следующий();

		СуммаДокумента = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаДокумента, ВыборкаТабличнойЧасти.Валюта, ВыборкаТабличнойЧасти.Дата);
		
		//(( sk_220328 MOD-2386	
		//ЕстьПодчиненныеРеализацииДляЗаказа = ЕстьПодчиненныеРеализацииДляЗаказа(ВыборкаДок.Ссылка);
		//Если ЕстьПодчиненныеРеализацииДляЗаказа Тогда 
		//	СписокЗаказов.Добавить(ВыборкаДок.Ссылка);
		//КонецЕсли;
		//)) sk_220328
		
		СтррПоля.GUID = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt = ВыборкаДок.Ссылка.Дата;
		СтррПоля.IsPost = ВыборкаДок.Ссылка.Проведен;
		СтррПоля.DocNumber = СокрЛП(ВыборкаДок.Номер);				
		СтррПоля.A02 = ВыборкаТабличнойЧасти.Организация;
		Если РежимВыгрузкиРекомендуемый Тогда
			СтррПоля.A03 = ?(ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки, ВыборкаТабличнойЧасти.Контрагент, "");
			СтррПоля.A04 = ВыборкаТабличнойЧасти.Клиент;
		Иначе
			СтррПоля.A03 = ВыборкаТабличнойЧасти.Клиент;
			Если ИспользоватьАдресаДоставки Тогда
				Если ГКонфигурация = "УТ_АКФ" Тогда 
					СтрКодАдреса = Строка(ВыборкаТабличнойЧасти.Контрагент.УникальныйИдентификатор()) + "000";	
					СтзРезультат = ТЗАдресаДоставки.Найти(СтрКодАдреса, "КодАдреса");
				Иначе
					СтзРезультат = ТЗАдресаДоставки.Найти(ВыборкаТабличнойЧасти.Клиент, "Партнер");
				КонецЕсли;
				СтррПоля.A04 = ?(СтзРезультат = Неопределено, "", СтзРезультат.Идентификатор);  
			ИначеЕсли ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки Тогда
				СтррПоля.A04 = ВыборкаТабличнойЧасти.Контрагент;
			Иначе
				СтррПоля.A04 = "";
			КонецЕсли;
		КонецЕсли;
		
		СтррПоля.A05 = ВыборкаТабличнойЧасти.Соглашение;
		СтррПоля.A06 = "";
		СтррПоля.A07 = "";
		Если ЗначениеЗаполнено(СтррПоля.A05) Тогда
			ВидЦен = ЗначениеЗаполнено(СтррПоля.A05.ВидЦен);
			Если ЗначениеЗаполнено(ВидЦен) Тогда
				СтррПоля.A07 = ВидЦен;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтррПоля.A07) И ЗначениеЗаполнено(ВыборкаТабличнойЧасти.ВидЦены) Тогда
			СтррПоля.A07 = ВыборкаТабличнойЧасти.ВидЦены;	
		КонецЕсли; 				
		СтррПоля.A08 = СуммаДокумента;
		СтррПоля.A09 = ВыборкаДок.Вес;
		СтррПоля.A010 	= ВыборкаДок.ДатаОтгрузки;
		СтррПоля.A011 = ВыборкаТабличнойЧасти.Комментарий;
		СтррПоля.A016 = ВыборкаДок.ЕстьПодчиненные;
		СтррПоля.A019 = ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", ВыборкаДок.ФормаОплаты);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ВыборкаТабличнойЧасти.Сбросить();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметрыТЧ);
		Пока ВыборкаТабличнойЧасти.Следующий() Цикл
			Количество = ВыборкаТабличнойЧасти.Количество;
			СуммаСтрокиТЧ = ВыборкаТабличнойЧасти.Сумма;
			Цена = ВыборкаТабличнойЧасти.Цена;
			СтррПоляТЧ.GUID = Новый УникальныйИдентификатор();
			СтррПоляТЧ.DocId = ВыборкаДок.Ссылка;
			СтррПоляТЧ.A01 = ВыборкаТабличнойЧасти.Номенклатура;
			
			СтррПоискХарактеристики.Номенклатура = ВыборкаТабличнойЧасти.Номенклатура;
			СтррПоискХарактеристики.Ссылка  	 = ВыборкаТабличнойЧасти.Характеристика;
			СтррПоляТЧ.A02 = КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
			
			СтррПоляТЧ.A03 = ВыборкаТабличнойЧасти.Упаковка;
			СтррПоляТЧ.A04 = Количество;
			СтррПоляТЧ.A05 = СуммаВВалютеУчетаАгента(Цена, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			СтррПоляТЧ.A06 = СуммаВВалютеУчетаАгента(СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			СтррПоляТЧ.A07 = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаНДС, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			СтррПоляТЧ.A08 = ВыборкаТабличнойЧасти.Вес;
			СтррПоляТЧ.A09 = ВыборкаТабличнойЧасти.ПроцентРучнойСкидки + ВыборкаТабличнойЧасти.ПроцентАвтоматическойСкидки;
			Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
				СтррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС);
			Иначе
				СтррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС) * 100;
			КонецЕсли;	
			СтррПоляТЧ.A011 = ВыборкаТабличнойЧасти.Склад;
			СтррПоляТЧ.A012 = СуммаВВалютеУчетаАгента(Количество*Цена - СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата); //Сумма скидки
			СтррПоляТЧ.A015 = ВыборкаТабличнойЧасти.ВидЦены;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧ);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

	//(( sk_220328 MOD-2386
	//Если СписокЗаказов.Количество() > 0 Тогда 
	//	гКэшСпискиОбъектов.Вставить("СписокЗаказов", СписокЗаказов);
	//КонецЕсли;
	//)) sk_22032

КонецПроцедуры

Процедура ВыгрузитьДокументыПродажи(ДокОбмена, МенеджерВТ)

	Если ИнтервалВыгрузкиЗаказов = 0 Тогда  // это единый параметр для выгрузки документов продаж
		Возврат;
	КонецЕсли; 
	
	Если ИспользоватьАдресаДоставки Тогда
		ТЗАдресаДоставки = АдресаДоставкиЗагрузитьТЗ();
	КонецЕсли;
	
	Результат = ДанныеПоДокументамПродажи(МенеджерВТ);
	ВыборкаДок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,dt,IsPost,DocNumber,A01,A02,A03,A04,A05,A06,A07,A08,A09,A011,A018"); // шапка документа
	СтррПараметрыТЧ = Новый Структура("GUID,Comment", "E4D61E0A-1D62-48D7-B70C-BCBA935D377A", "Табличная часть 'Товары'");	
	//@skip-check structure-consructor-too-many-keys
	СтррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06,A09,A07,A08,A010,A011,A012,A015"); // ТЧ документа
	
	СтррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Реализация");
	
	Пока ВыборкаДок.Следующий() Цикл
		ВыборкаТабличнойЧасти = ВыборкаДок.Выбрать();
		ВыборкаТабличнойЧасти.Следующий();

		СуммаДокумента = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаДокумента, ВыборкаТабличнойЧасти.Валюта, ВыборкаТабличнойЧасти.Дата);
		
		СтррПоля.GUID = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt = ВыборкаДок.Ссылка.Дата;    
		СтррПоля.DocNumber = СокрЛП(ВыборкаДок.Номер);	
		СтррПоля.IsPost = ВыборкаДок.Ссылка.Проведен;
		СтррПоля.A01 = ВыборкаТабличнойЧасти.Организация;
		Если РежимВыгрузкиРекомендуемый Тогда
			СтррПоля.A02 = ?(ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки, ВыборкаТабличнойЧасти.Контрагент, "");
			СтррПоля.A03 = ВыборкаТабличнойЧасти.Клиент;
		Иначе
			СтррПоля.A02 = ВыборкаТабличнойЧасти.Клиент;
			Если ИспользоватьАдресаДоставки Тогда
				Если ГКонфигурация = "УТ_АКФ" Тогда
					СтрКодАдреса = Строка(ВыборкаТабличнойЧасти.Контрагент.УникальныйИдентификатор()) + "000";	
					СТЗРезультат = ТЗАдресаДоставки.Найти(СтрКодАдреса, "КодАдреса");
				Иначе
					СТЗРезультат = ТЗАдресаДоставки.Найти(ВыборкаТабличнойЧасти.Клиент, "Партнер");
				КонецЕсли;	
				СтррПоля.A03 = ?(СТЗРезультат = Неопределено, "", СТЗРезультат.Идентификатор);  
			ИначеЕсли ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки Тогда
				СтррПоля.A03 = ВыборкаТабличнойЧасти.Контрагент;
			Иначе
				СтррПоля.A03 = "";
			КонецЕсли;
		КонецЕсли;
		СтррПоля.A04 = ВыборкаТабличнойЧасти.Соглашение;
		СтррПоля.A05 = "";
		СтррПоля.A06 = "";
		СтррПоля.A07 = СуммаДокумента;
		СтррПоля.A08 = ВыборкаДок.Вес;
		СтррПоля.A09 = ВыборкаТабличнойЧасти.Комментарий;
		СтррПоля.A011 = ВыборкаТабличнойЧасти.ДокументЗаказ;
		СтррПоля.A018 = ПолучитьИдентификаторПеречисленияПоЗначению("ФормыОплаты", ВыборкаДок.ФормаОплаты);
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ВыборкаТабличнойЧасти.Сбросить();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметрыТЧ);
		Пока ВыборкаТабличнойЧасти.Следующий() Цикл
			Количество = ВыборкаТабличнойЧасти.Количество;
			СуммаСтрокиТЧ = ВыборкаТабличнойЧасти.Сумма;
			Цена = ВыборкаТабличнойЧасти.Цена;
			СтррПоляТЧ.GUID = Новый УникальныйИдентификатор();
			СтррПоляТЧ.DocId = ВыборкаДок.Ссылка;
			СтррПоляТЧ.A01 = ВыборкаТабличнойЧасти.Номенклатура;
			
			СтррПоискХарактеристики.Номенклатура = ВыборкаТабличнойЧасти.Номенклатура;
			СтррПоискХарактеристики.Ссылка  	 = ВыборкаТабличнойЧасти.Характеристика;
			СтррПоляТЧ.A02 = КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
			
			СтррПоляТЧ.A03 = ВыборкаТабличнойЧасти.Упаковка;
			СтррПоляТЧ.A04 = Количество;
			СтррПоляТЧ.A05 = СуммаВВалютеУчетаАгента(Цена, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			СтррПоляТЧ.A06 = СуммаВВалютеУчетаАгента(СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			СтррПоляТЧ.A07 = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаНДС, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			СтррПоляТЧ.A08 = ВыборкаТабличнойЧасти.Вес;
			СтррПоляТЧ.A09 = ВыборкаТабличнойЧасти.ПроцентРучнойСкидки + ВыборкаТабличнойЧасти.ПроцентАвтоматическойСкидки;
			Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
				СтррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС);
			Иначе
				СтррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС) * 100;
			КонецЕсли;	
			СтррПоляТЧ.A011 = ВыборкаТабличнойЧасти.Склад;
			СтррПоляТЧ.A012 = СуммаВВалютеУчетаАгента(Количество*Цена - СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата); //Сумма скидки
			СтррПоляТЧ.A015 = ВыборкаТабличнойЧасти.ВидЦены;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧ);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры    

// sk_220328 MOD-2855 
//
// Выгружает документы "ВозвратыТоваровОтКлиента"
//
// Параметры:
//	ДокОбмена - ЗаписьXML - XML-документ выгрузки	
//  МенеджерВТ - МенеджерВременныхТаблиц - менеджер ВТ 
//
Процедура ВыгрузитьДокументыВозвраты(ДокОбмена, МенеджерВТ)

	Если ИнтервалВыгрузкиЗаказов = 0 Тогда  // это единый параметр для выгрузки документов продаж
		Возврат;
	КонецЕсли; 
	
	Если ИспользоватьАдресаДоставки Тогда
		ТЗАдресаДоставки = АдресаДоставкиЗагрузитьТЗ();
	КонецЕсли;
	
	Результат = ДанныеПоДокументаВозвраты(МенеджерВТ);
	ВыборкаДок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,dt,IsPost,DocNumber,A01,A02,A03,A04,A05,A06,A07,A08,A09,A011"); // шапка документа
	СтррПараметрыТЧ = Новый Структура("GUID,Comment", "235DC1EA-5963-4DCD-95E1-E8CEF487A2AE", "Табличная часть 'Товары'");	
	//@skip-check structure-consructor-too-many-keys
	СтррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06,A09,A07,A08,A010"); // ТЧ документа
	
	СтррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.ВозвратТоваров");
	
	Пока ВыборкаДок.Следующий() Цикл
		ВыборкаТабличнойЧасти = ВыборкаДок.Выбрать();
		ВыборкаТабличнойЧасти.Следующий();

		СуммаДокумента = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаДокумента, ВыборкаТабличнойЧасти.Валюта, ВыборкаТабличнойЧасти.Дата);
		
		СтррПоля.GUID 	   = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt 	   = ВыборкаДок.Дата;
		СтррПоля.IsPost	   = ВыборкаДок.Проведен;
		СтррПоля.DocNumber = СокрЛП(ВыборкаДок.Номер);		

		СтррПоля.A01 = ВыборкаТабличнойЧасти.Организация;
		Если РежимВыгрузкиРекомендуемый Тогда
			СтррПоля.A02 = ?(ИспользоватьКонтрагентов, ВыборкаТабличнойЧасти.Контрагент, "");
			СтррПоля.A03 = ВыборкаТабличнойЧасти.Клиент;
		Иначе
			СтррПоля.A02 = ВыборкаТабличнойЧасти.Клиент;
			Если ИспользоватьАдресаДоставки Тогда
				Если ГКонфигурация = "УТ_АКФ" Тогда
					СтрКодАдреса = Строка(ВыборкаТабличнойЧасти.Контрагент.УникальныйИдентификатор()) + "000";	
					СтзРезультат = ТЗАдресаДоставки.Найти(СтрКодАдреса, "КодАдреса");
				Иначе
					СтзРезультат = ТЗАдресаДоставки.Найти(ВыборкаТабличнойЧасти.Клиент, "Партнер");
				КонецЕсли;	
				СтррПоля.A03 = ?(СтзРезультат = Неопределено, "", СтзРезультат.Идентификатор);  
			ИначеЕсли ИспользоватьКонтрагентов Или ИспользоватьПунктыРазгрузки Тогда
				СтррПоля.A03 = ВыборкаТабличнойЧасти.Контрагент;
			Иначе
				СтррПоля.A03 = "";
			КонецЕсли;
		КонецЕсли;
		СтррПоля.A04 = ВыборкаТабличнойЧасти.Договор;
		СтррПоля.A05 = "";
		СтррПоля.A06 = "";
		СтррПоля.A07 = СуммаДокумента;
		СтррПоля.A08 = ВыборкаДок.Вес;  
		СтррПоля.A09 = ВыборкаТабличнойЧасти.Комментарий;
		СтррПоля.A011 = ВыборкаТабличнойЧасти.ДокументРеализация;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ВыборкаТабличнойЧасти.Сбросить();
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметрыТЧ);
		Пока ВыборкаТабличнойЧасти.Следующий() Цикл
			Количество = ВыборкаТабличнойЧасти.Количество;
			СуммаСтрокиТЧ = ВыборкаТабличнойЧасти.Сумма;
			Цена = ВыборкаТабличнойЧасти.Цена;
			СтррПоляТЧ.GUID = Новый УникальныйИдентификатор();
			СтррПоляТЧ.DocId = ВыборкаДок.Ссылка;
			СтррПоляТЧ.A01 = ВыборкаТабличнойЧасти.Номенклатура;
			
			СтррПоискХарактеристики.Номенклатура = ВыборкаТабличнойЧасти.Номенклатура;
			СтррПоискХарактеристики.Ссылка  	 = ВыборкаТабличнойЧасти.Характеристика;
			СтррПоляТЧ.A02 = КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
			
			СтррПоляТЧ.A03 = ВыборкаТабличнойЧасти.Упаковка;
			СтррПоляТЧ.A04 = Количество;
			СтррПоляТЧ.A05 = СуммаВВалютеУчетаАгента(Цена, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			СтррПоляТЧ.A06 = СуммаВВалютеУчетаАгента(СуммаСтрокиТЧ, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			СтррПоляТЧ.A07 = СуммаВВалютеУчетаАгента(ВыборкаТабличнойЧасти.СуммаНДС, ВыборкаДок.Валюта, ВыборкаДок.Дата);
			СтррПоляТЧ.A08 = ВыборкаТабличнойЧасти.Вес;
			Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
				СтррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС);
			Иначе
				СтррПоляТЧ.A010 = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ВыборкаТабличнойЧасти.СтавкаНДС) * 100;
			КонецЕсли;	

			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧ);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

// Выгружает документы "СчетаФактураВыданные"
//
// Параметры:
//	ДокОбмена - ЗаписьXML - XML-документ выгрузки	
//
Процедура ВыгрузитьДокументыСчетаФактураВыданные(ДокОбмена)
	
	Если ГКонфигурация = "УТ_UA" Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,dt,DocNumber,A01"); // Шапка документа

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.СчетФактура");
	
	Результат = ДанныеПоДокументамСчетаФактураВыданные();
	ВыборкаДок = Результат.Выбрать();
	
	Пока ВыборкаДок.Следующий() Цикл
		СтррПоля.GUID 	   = ВыборкаДок.Ссылка.УникальныйИдентификатор();
		СтррПоля.dt 	   = ВыборкаДок.Дата;
		СтррПоля.DocNumber = СокрЛП(ВыборкаДок.Номер);
		СтррПоля.A01 	   = ВыборкаДок.ДокументОснование;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьМаршруты(ДокОбмена)
	
	//1. Проверка
	Если Не ВыгружатьМаршруты И ИнтервалВыгрузкиМаршрутов = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	//2. Список торговых точек
	СтррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", ВыбНастройкиАгента.СсылкаСписокТТ); 
	
	//3. Проверка
	Если СтррОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//4. Проверка и заполнение ИспользуетсяГрафик, ИспользуетсяПП, ИспользуетсяКонтрагент
	ИспользуетсяКонтрагент 	= СтррОбъект.Детализация.НайтиПоЗначению("Контрагент") <> Неопределено;
	ИспользуетсяГрафик = Неопределено;
	ИспользуетсяПП 	   = Неопределено;
	//Заполнение
	Если Не СписокТорговыхТочекИспользуетсяДляПланированияПосещений(СтррОбъект, ИспользуетсяГрафик, ИспользуетсяПП) Тогда
	    Возврат;
	КонецЕсли;	
	
	//5. Определение структур заполнения
	СтррПоля  = Новый Структура("GUID,dt,IsPost", , ,Истина);  // Структура для ELEMENTS
	//@skip-check structure-consructor-too-many-keys
	СтррПункт = Новый Структура("GUID,DocId,A01,A02,A03,A04"); // Структура для TABLE, структура ТЧ "ТочкиМаршрута" документа "Маршрут" в МТ
	Если СтррОбъект.ИспользоватьПорядок Тогда
		СтррПункт.Вставить("A05");
	КонецЕсли;
	СтррПоиск = Новый Структура("День");				//Структура поиска строчек в тзПланПосещений
	
	//6.DOCUMENT. С признаком удаления всех документов Маршрут
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Маршрут", 1); 
	
	Если ИспользуетсяПП Тогда // если детализация по плану посещения - то выгружаем данные из плана посещения
		
		//7. период из ПП
		//@skip-check use-non-recommended-method
		ДатаНачалоПП = ?(ЗначениеЗаполнено(СтррОбъект.ДатаНачала), СтррОбъект.ДатаНачала, НачалоНедели(ТекущаяДата()));
		
		//8. Период Выгрузки
		//@skip-check use-non-recommended-method
		ДатаНачало = НачалоДня(ТекущаяДата());
		ДатаКонец  = ДатаНачало + (ИнтервалВыгрузкиМаршрутов - 1) * 86400;
		Если СтррОбъект.Свойство("ДатаОкончания") И ЗначениеЗаполнено(СтррОбъект.ДатаОкончания) И ДатаКонец > СтррОбъект.ДатаОкончания Тогда 
			ДатаКонец = СтррОбъект.ДатаОкончания;
		КонецЕсли;
		
		//9. Проверка
		Если ДатаНачалоПП > ДатаКонец ИЛИ ДатаНачало > ДатаКонец Тогда
			ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена); // DOCUMENT
			Возврат; //Дата действия ПП не попадает в выгрузку.
		КонецЕсли;
		
		//10. Данные для выгрузки
		ДатаЭлемента 		= ДатаНачало - 86400;
		ТекущийНомерИзПлана = 0;
		ТЗПланПосещений = СтррОбъект.ПланПосещений;
		ТЗПланПосещений.Сортировать("День,Порядок,Партнер");
		Если ИспользоватьАдресаДоставки Тогда
			Если ГКонфигурация = "УТ_АКФ" И ТЗПланПосещений.Количество() <> 0 Тогда
				ВыгружатьАдресаДоставки = Истина; 
			ИначеЕсли ТЗПланПосещений.Колонки.Найти("") <> Неопределено Тогда
				ВыгружатьАдресаДоставки = Истина; 
			Иначе
				ВыгружатьАдресаДоставки = Ложь;
			КонецЕсли;
		Иначе
			ВыгружатьАдресаДоставки = Ложь;
		КонецЕсли;	
		ИспользоватьПорядок = СтррОбъект.ИспользоватьПорядок;
		// Если включена детализация до контрагента, то нужно подготовить соответствие: Партнер -> Состав.Строка (соответствие партнеру строке из ТЗ Состав)
		// Это соответствие используется для выгрузки дополнительно контрагента для каждого пункта маршрута.
		Если ИспользуетсяКонтрагент Тогда 
			СТВПартнеры = Новый Соответствие;
			ТЗСостав = СтррОбъект.Состав;
			Для каждого cтзСостав Из ТЗСостав Цикл
				ТорговаяТочка = ?(ИспользоватьПунктыРазгрузки, cтзСостав.ПунктРазгрузки, cтзСостав.Партнер);
				Если ЗначениеЗаполнено(ТорговаяТочка) Тогда
					СТВПартнеры.Вставить(ТорговаяТочка, cтзСостав);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;		
		
		//11. Выгрузка Элементов по дням
		Пока ДатаЭлемента <= ДатаКонец Цикл
			ДатаЭлемента = ДатаЭлемента + 86400;
			
			//12. Определение номера первого дня из ПП на текущую ДатаЭлемента
			Если ТекущийНомерИзПлана = 0 тогда 
				Если ДатаЭлемента = ДатаНачалоПП Тогда
					ТекущийНомерИзПлана = 1;
				ИначеЕсли ДатаЭлемента > ДатаНачалоПП Тогда
					//ДатаНачалоПП  																// 1 день первой недели ПП.
					ТекущаяДатаНедели 	= НачалоНедели(ДатаЭлемента); 								// 1 День текущей недели.
					КоличествоНедельПП 	= СтррОбъект.ПериодГрафикаПлана / 7;                	   	// Количество недель ПП
					РазницаНедель 		= (ТекущаяДатаНедели - ДатаНачалоПП) / 86400 / 7;   	   	// Разница недель, для получения номера недели из ПП 
					НомерНеделиИзПП		= (РазницаНедель % КоличествоНедельПП) + 1;         	   	// Номер недели из ПП на 1 день текущей недели
					ТекущийНомерИзПлана = ДеньНедели(ДатаЭлемента) + ((НомерНеделиИзПП - 1) * 7); 	// Номер из ПП на текущий день ДатаЭлемента
				Иначе
					//на текущю дату ДатаЭлемента, нет даты в ПП
					Продолжить; // НЕ выгружаем маршруты на эту дату.
				КонецЕсли;
			Иначе
				ТекущийНомерИзПлана = ТекущийНомерИзПлана + 1;
				Если ТекущийНомерИзПлана > СтррОбъект.ПериодГрафикаПлана Тогда
					ТекущийНомерИзПлана = 1; // ПП циклические, нумерация заново.
				КонецЕсли;
			КонецЕсли;
			
			//13. Отбор из ПП 
			СтррПоиск.День = ТекущийНомерИзПлана;
			МПланПосещений = ТЗПланПосещений.НайтиСтроки(СтррПоиск);
			
			//14. Проверка. 
			Если МПланПосещений.Количество() = 0 Тогда
				Продолжить; //В ПП на ДатаЭлемента нет посещений, не выгружаем маршрут. 
			КонецЕсли;
			
			//15. ELEMENTS/ITEM. Открываем тэги нового дня (нового документа МТ "Маршрут")
			СтррПоля.GUID = Новый УникальныйИдентификатор();
			СтррПоля.dt   = ДатаЭлемента;
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь); 
			
			//16. TABLES. Табличные части документа
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			
			//17. TABLE. Табличная часть контрагентов маршрута		
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
			ДобавитьПоле(ДокОбмена, "GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
			ДобавитьПоле(ДокОбмена, "Comment", "Табличная часть 'Точки маршрута'");

			//18. TABLE/ITEM.
			Для Каждого стзПланПосещений Из МПланПосещений Цикл
				// A01 - Контрагент    (в 1С - это Партнер)
				// A02 - ТорговаяТочка (если включен режим ИспользоватьАдресаДоставки, то сюда выгружаем адрес доставки, иначе если включена детализация до контрагента, сюда выгружаем контрагента).
				// A03 - Время
				// A04 - Напоминание
				// A05 - Порядок
				СтррПункт.GUID  = Новый УникальныйИдентификатор();
				СтррПункт.DocId = СтррПоля.GUID;
				
				Если НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки Тогда				
					СтррКлиент = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(стзПланПосещений.ПунктРазгрузки, "Владелец");
					Если ИспользоватьКонтрагентов Тогда
						СтррПункт.A01 = СтррКлиент.Владелец;
					ИначеЕсли ЗначениеЗаполнено(СтррКлиент.Владелец) Тогда 
						СтррКлиент = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтррКлиент.Владелец, "Партнер");
						СтррПункт.A01 = СтррКлиент.Партнер;
					Иначе
						СтррПункт.A01 = "";
					КонецЕсли;
					СтррПункт.A02 = стзПланПосещений.ПунктРазгрузки;
				ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ВыгружатьАдресаДоставки Тогда
					СтррПункт.A01 = стзПланПосещений.Партнер; 	 // в МТ - это поле "Контрагент"
					СтррПункт.A02 = ВРег(стзПланПосещений.ИдАдресаДоставки);
				ИначеЕсли НЕ РежимВыгрузкиРекомендуемый Тогда 
					СтррПункт.A01 = стзПланПосещений.Партнер;	 // в МТ - это поле "Контрагент"
					Если ИспользуетсяКонтрагент Тогда 
						стзСостав = СТВПартнеры[стзПланПосещений.Партнер];
						СтррПункт.A02 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
					КонецЕсли;
				ИначеЕсли РежимВыгрузкиРекомендуемый Тогда
					Если ИспользуетсяКонтрагент Тогда 
						стзСостав = СТВПартнеры[стзПланПосещений.Партнер];
						СтррПункт.A01 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
					КонецЕсли;
					СтррПункт.A02 = стзПланПосещений.Партнер;	 // в МТ - это поле "Контрагент"
				Иначе
					//Ошибка.
				КонецЕсли;
				
				СтррПункт.A03 = стзПланПосещений.Время;
				СтррПункт.A04 = стзПланПосещений.Комментарий;
				Если ИспользоватьПорядок Тогда
					СтррПункт.A05 = стзПланПосещений.Порядок;
				КонецЕсли;
				
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПункт);
	
			КонецЦикла;
			
			//20. Закрываем тэги текущего документа Маршрут
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE 
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
						
		КонецЦикла;  			
				
	Иначе 
		// Детализация только по графику посещения, выгружаем данные из желательного графика посещений.
		
		//@skip-check use-non-recommended-method
		ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
		//@skip-check use-non-recommended-method
		СмещениеОтНачалаПлана = ДеньНедели(ТекущаяДата()) - 1;
		ПериодПлана = СтррОбъект.ПериодГрафикаПлана;

		Если ПериодПлана > 7 И СтррОбъект.ДатаНачала <> '00010101' Тогда
			//@skip-check use-non-recommended-method
			Дней = (НачалоДня(ТекущаяДата()) - СтррОбъект.ДатаНачала) / 86400;
			СмещениеОтНачалаПлана = Дней % СтррОбъект.ПериодГрафикаПлана;
		КонецЕсли;
		
		ТЗСостав = СтррОбъект.Состав;
		Пункт = Неопределено;
		
		Для ДеньПериода = 0 По ИнтервалВыгрузкиМаршрутов Цикл
			
			ОткрытТэгМаршрута = Ложь;
			
			Для каждого СтрокаТ Из ТЗСостав Цикл
				
				СтррГрафик = СтрокаТ.График;
				Если СтррГрафик = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				СтррПункты = СтррГрафик.Пункты;
				Если СтррПункты = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ПериодГрафика = СтррГрафик.ПериодГрафика;
				ДеньГрафика = (ДеньПериода + СмещениеОтНачалаПлана) % ПериодГрафика;
				УчитыватьВремяПосещения = СтррГрафик.УчитыватьВремяПосещения;
				
				Если СтррПункты.Свойство("П"+Строка(ДеньГрафика), Пункт) И Пункт.Выбран Тогда
					
					Если Не ОткрытТэгМаршрута Тогда
						ОткрытТэгМаршрута = Истина;
						//Порядок = 0;
						// Открываем тэги нового дня (нового документа МТ "Маршрут")
						СтррПоля.GUID = Новый УникальныйИдентификатор();
						СтррПоля.dt   = ДатаНачалаВыгрузки + ДеньПериода * 86400;
						ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь); //ITEM
						// Заполняем табличные части документа
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
						// Заполняем табличную часть контрагентов маршрута		
						ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
						ДобавитьПоле(ДокОбмена, "GUID", "ED832712-A167-4B9E-87F1-5127E6F70814");
						ДобавитьПоле(ДокОбмена, "Comment", "Табличная часть 'Точки маршрута'");
					КонецЕсли; 
					
					СтррПункт.GUID  = Новый УникальныйИдентификатор();
					СтррПункт.DocId = СтррПоля.GUID;
					Если НЕ РежимВыгрузкиРекомендуемый Тогда
						Если ИспользоватьПунктыРазгрузки Тогда
							стзСостав = СТВПартнеры[СтрокаТ.Партнер];
							СтррПункт.A01 = ?(стзСостав = Неопределено, Неопределено, стзСостав.Контрагент);
							СтррПункт.A02 = СтрокаТ.Партнер;
						ИначеЕсли ИспользоватьАдресаДоставки Тогда
							СтррПункт.A01 = СтрокаТ.Партнер; 	 // в МТ - это поле "Контрагент"
							СтррПункт.A02 = ВРег(СтрокаТ.ИдАдресаДоставки);
						Иначе
							СтррПункт.A01 = СтрокаТ.Партнер;	 // в МТ - это поле "Контрагент"
							Если ИспользуетсяКонтрагент Тогда 
								СтррПункт.A02 = СтрокаТ.Контрагент;
							КонецЕсли;
						КонецЕсли;
					Иначе
						СтррПункт.A02 = СтрокаТ.Партнер;
						Если ИспользоватьКонтрагентов Тогда
							СтррПункт.A01 = СтрокаТ.Контрагент;
						КонецЕсли;						
					КонецЕсли;
					
					СтррПункт.A03 = ?(УчитыватьВремяПосещения, Лев(Пункт.Время, 5), "");
					СтррПункт.A04 = ""; // Комментарий				
					ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПункт);	
					
				КонецЕсли; 
				
			КонецЦикла; 
			
			Если ОткрытТэгМаршрута Тогда
				// Закрываем тэги текущего документа Маршрут
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE 
				ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
				ДокОбмена.ЗаписатьКонецЭлемента(); //ITEM
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; // Если ИспользуетсяПП Тогда
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура ВыгрузитьДокументыДолг(ДокОбмена, МенеджерВТ)
		
	//ВыборкаРезультат поля:
	//	Партнер                  - Спр 	 - Партнер
	//	Контрагент               - Спр 	 - Контрагент
	//	Договор                  - Спр   - Договор (не используем)
	//	ОбъектРасчетов           - Док   - Документ Заказ (создавший).
	//	РасчетныйДокумент        - Док   - Документ расчета Реализация (по которому считается расчет).
	//	КОплатеОстаток           - Число - Сумма оставшегося долга, уже пересчитанная в валюте учета.
	//	ДатаПлатежа              - Дата  - Дата до которой нужно оплатить.
	//	КоличествоДнейПросрочено - Число - Количество дней от даты платежа до текущей даты, может быть отрицательной  если долг не просрочен.
	ВыборкаРезультат 		= ДанныеПоДолгам(МенеджерВТ);
	
	ТипДокументЗаказ 		= Тип("ДокументСсылка.ЗаказКлиента"); 
	ТипДокументРеализация 	= Тип("ДокументСсылка.РеализацияТоваровУслуг");
	ТипСправочникДоговор	= Тип("СправочникСсылка.ДоговорыКонтрагентов");
	ТипВсеДокументы 		= Документы.ТипВсеСсылки();
	//@skip-check structure-consructor-too-many-keys
	СтррПоля 				= Новый Структура("GUID,dt,IsPost,DocNumber,A02,A03,A04,A05,A06,A07,A08,A011,A014,A015");
	
	//Для оптимизвции.
	СЗДокументовСКомментариями = Новый СписокЗначений;
	СЗДокументовССоглашениями  = Новый СписокЗначений; 
	СЗДокументовСДоговорами    = Новый СписокЗначений; 
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Долг", 1);  // С признаком удаления всех документов Долг
	
	МИдЭтапыЗаглушка = Новый Массив; // Заглушка для выгрузки дубликатов документов долг (этапы оплаты дублируют записи, нереализована корректная выгрузка).
	
	Выборка = ВыборкаРезультат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КОплатеОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Только просроченные долги И Количество дней просроченных долгов
		Если ВыгружатьТолькоПросроченныеДолги И Выборка.КоличествоДнейПросрочено <= ИнтервалПросроченныхДолгов  Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыгружатьДолгиТолькоПоДокументамАгента Тогда
			СтррОбъектРасчетов = Неопределено;
			Если ЗначениеЗаполнено(Выборка.ОбъектРасчетов) И ПроверитьНаличиеРеквизита(Выборка.ОбъектРасчетов, "Менеджер") Тогда
				СтррОбъектРасчетов =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ОбъектРасчетов, "Менеджер");
			КонецЕсли;
			СтррРасчетныйДокумент = Неопределено;
			Если ЗначениеЗаполнено(Выборка.РасчетныйДокумент) И ПроверитьНаличиеРеквизита(Выборка.РасчетныйДокумент, "Менеджер") Тогда
				СтррРасчетныйДокумент = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.РасчетныйДокумент, "Менеджер");
			КонецЕсли;
			Если Не (ЗначениеЗаполнено(СтррОбъектРасчетов) И СтррОбъектРасчетов.Менеджер = ВыбАгент) Тогда
				Если Не (ЗначениеЗаполнено(СтррРасчетныйДокумент) И СтррРасчетныйДокумент.Менеджер = ВыбАгент) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;	 
		КонецЕсли;
	 
		ДокументОснование = ПолучитьДокументОснование(Выборка.ОбъектРасчетов, Выборка.РасчетныйДокумент);
		
		СтррДокументОснование = Неопределено; 
		СтрВидДокументаОснование = "";
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			СтрРеквизиты = "";
			Если ТипВсеДокументы.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
				СтрРеквизиты = "Дата, Номер, Ссылка";
				Если ТипЗнч(ДокументОснование) = ТипДокументЗаказ ИЛИ ТипЗнч(ДокументОснование) = ТипДокументРеализация Тогда
					СтрВидДокументаОснование = "ДокументПродажи";
					СтрРеквизиты = СтрРеквизиты + ", Комментарий";
					Если ИспользоватьПунктыРазгрузки Тогда
						СтрРеквизиты = СтрРеквизиты + ", алкПунктРазгрузки";
					КонецЕсли;  
					Если ИспользоватьСоглашения() Тогда
						СтрРеквизиты = СтрРеквизиты + ", Соглашение";
					ИначеЕсли ИспользоватьДоговоры() Тогда
						СтрРеквизиты = СтрРеквизиты + ", Договор";  
					КонецЕсли;
				Иначе  
					СтрВидДокументаОснование = "ПрочиеДокументы";
					Если ИспользоватьСоглашения() И ОпределитьНаличиеРеквизита(ДокументОснование, "Соглашение", СЗДокументовССоглашениями) Тогда
						СтрРеквизиты = СтрРеквизиты + ", Соглашение";
					КонецЕсли;
					Если ИспользоватьДоговоры() И ОпределитьНаличиеРеквизита(ДокументОснование, "Договор", СЗДокументовСДоговорами) Тогда
						СтрРеквизиты = СтрРеквизиты + ", Договор";
					КонецЕсли;
					Если ОпределитьНаличиеРеквизита(ДокументОснование, "Комментарий", СЗДокументовСКомментариями) Тогда
						СтрРеквизиты = СтрРеквизиты + ", Комментарий";
					КонецЕсли;	
				КонецЕсли;  
			ИначеЕсли ТипЗнч(ДокументОснование) = ТипСправочникДоговор Тогда 
				СтрВидДокументаОснование = "Договор";	
				СтрРеквизиты = "Номер, Дата, Комментарий";  			
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрРеквизиты) Тогда
				СтррДокументОснование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, СтрРеквизиты);
			КонецЕсли;
		КонецЕсли;  
		
		Если ЗначениеЗаполнено(СтррДокументОснование) Тогда  
			Если СтрВидДокументаОснование = "ДокументПродажи" И ЗначениеЗаполнено(СтррДокументОснование.Ссылка) Тогда  // sk_221118 MOD-3300 Если стрВидДокументаОснование = "ДокументПродажи" Тогда
				СтррПоля.GUID 	   = СтррДокументОснование.Ссылка.УникальныйИдентификатор();
				СтррПоля.dt 	   = СтррДокументОснование.Дата;
				СтррПоля.DocNumber = СокрЛП(СтррДокументОснование.Номер);				
				Если СтррДокументОснование.Свойство("Договор") Тогда
					СтррПоля.A05 = СтррДокументОснование.Договор;
				ИначеЕсли СтррДокументОснование.Свойство("Соглашение") Тогда
					СтррПоля.A05 = СтррДокументОснование.Соглашение;  
				Иначе
					СтррПоля.A05 = "";
				КонецЕсли;
				
				СтррПоля.A08  = СтррДокументОснование.Комментарий;
				СтррПоля.A011 = СтррДокументОснование.Ссылка.УникальныйИдентификатор();	
				СтррПоля.A015 = ДокументОснование.Метаданные().Синоним + " №" + СтррДокументОснование.Номер + " от " + Формат(СтррДокументОснование.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(Выборка.КОплатеОстаток);
				
				// Заглушка для выгрузки дубликатов документов долг (этапы оплаты дублируют записи).
				Если МИдЭтапыЗаглушка.Найти(СтррПоля.GUID) = Неопределено Тогда
					МИдЭтапыЗаглушка.Добавить(СтррПоля.GUID);
				Иначе
					Продолжить;
				КонецЕсли;	
			Иначе 
				//Справочники и другие документы.
				СтррПоля.GUID = Новый УникальныйИдентификатор();
				// Дата документа создавший долг 
				Если СтррДокументОснование.Свойство("Дата") Тогда
					СтррПоля.dt = СтррДокументОснование.Дата;  
				Иначе
					СтррПоля.dt = Выборка.ДатаПлатежа;      
				КонецЕсли;   
				// Номер документа создавший долг  
				Если СтррДокументОснование.Свойство("Номер") Тогда
					СтррПоля.DocNumber = СокрЛП(СтррДокументОснование.Номер)
				Иначе	
					СтррПоля.DocNumber = "";               
				КонецЕсли;
				// Комментарий
				Если СтррДокументОснование.Свойство("Комментарий") Тогда 
					СтррПоля.A08 = СтррДокументОснование.Комментарий;
				Иначе
					СтррПоля.A08 = "";	
				КонецЕсли;
				
				СтррПоля.A011 = ""; // Ссылка на документ основания в МТ
				Если СтрВидДокументаОснование = "ПрочиеДокументы" Тогда
					//Если это документ
					Если СтррДокументОснование.Свойство("Договор") Тогда
						СтррПоля.A05 = СтррДокументОснование.Договор;
					ИначеЕсли СтррДокументОснование.Свойство("Соглашение") Тогда
						СтррПоля.A05 = СтррДокументОснование.Соглашение;  
					Иначе
						СтррПоля.A05 = "";
					КонецЕсли;  
					СтррПоля.A015 =	Строка(ДокументОснование) + " ∑: " + Строка(Выборка.КОплатеОстаток);
				ИначеЕсли СтрВидДокументаОснование = "Договор" Тогда
					СтррПоля.A05  = ?(ИспользоватьДоговоры(), ДокументОснование, ""); 	
					СтррПоля.A015 = "Договор с контрагентом" + " №" + СокрЛП(СтррДокументОснование.Номер) + " от " + Формат(СтррДокументОснование.Дата, "ДФ=dd.MM.yy") + " ∑: " + Строка(Выборка.КОплатеОстаток);
				Иначе
					СтррПоля.A05 = "";
					СтррПоля.A015 =	Строка(ДокументОснование) + " ∑: " + Строка(Выборка.КОплатеОстаток);
				КонецЕсли;	
			КонецЕсли; 
		Иначе 
			СтррПоля.GUID      = Новый УникальныйИдентификатор(); 
			СтррПоля.DocNumber = "";                   		  	  // Номер документа создавший долг
			СтррПоля.dt 	   = Выборка.ДатаПлатежа;  		  	  // Дата документа создавший долг
			СтррПоля.A05  	   = ""; 							  // Ссылка на документ логовора МТ (Соглашение)   ДокументОснование.Соглашение;
			СтррПоля.A08  	   = ""; 							  // Комментарий		
			СтррПоля.A011	   = ""; 							  // Ссылка на документ основания в МТ
			СтррПоля.A015 	   = "Задолжность " + Строка(?(РежимВыгрузкиРекомендуемый, Выборка.Партнер, Выборка.Контрагент)) + " ∑: " + Строка(Выборка.КОплатеОстаток);
		КонецЕсли;

		СтррПоля.IsPost = Истина;
		СтррПоля.A02 = Выборка.Организация;                                                                                 
		СтррПоля.A03 = ?(РежимВыгрузкиРекомендуемый, ?(ИспользоватьКонтрагентов, Выборка.Контрагент, ""), Выборка.Партнер);
		Если РежимВыгрузкиРекомендуемый Тогда  
			СтррПоля.A04 = Выборка.Партнер;
		ИначеЕсли Не РежимВыгрузкиРекомендуемый И ИспользоватьКонтрагентов Тогда
			СтррПоля.A04 = Выборка.Контрагент;
		ИначеЕсли Не РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки И СтррДокументОснование.Свойство("алкПунктРазгрузки") Тогда
			СтррПоля.A04 = СтррДокументОснование.алкПунктРазгрузки;
		Иначе
			СтррПоля.A04 = "";
		КонецЕсли;   		
		СтррПоля.A06 = Выборка.ДатаПлатежа;
		СтррПоля.A07 = Выборка.КОплатеОстаток;
		
		// Выделять цветом просроченные долги
		Если ВыделятьЦветомПросроченныеДолги И Выборка.КоличествоДнейПросрочено > ИнтервалПросроченныхДолгов Тогда
			СтррПоля.A014 = Истина;
		Иначе
			СтррПоля.A014 = Ложь;
		КонецЕсли;
		
		Если ВзаиморасчетыНеопределеннаяДатаПлатежа И НЕ ЗначениеЗаполнено(Выборка.ДатаПлатежа) И ЗначениеЗаполнено(Выборка.Партнер) Тогда
			ТекстСообщения = "Для документа долг не определена дата платежа — """ + СтррПоля.A015 + """, партнер " + Выборка.Партнер + "";
			ОповеститьОСобытии(ТекстСообщения,,,"ТекущийАгент");
		КонецЕсли;
	 
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
		
	КонецЦикла;
			
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);

КонецПроцедуры  

Процедура ВыгрузитьДокументыПеремещения(ДокОбмена)
	
	Результат = ДанныеПоДокументамПеремещения();
	ВыборкаДок = Результат.Выбрать();
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,dt,IsPost,A01,A03,A04,A05,A06,A07,A08,A09"); // шапка документа
	СтррПараметрыТЧ = Новый Структура("GUID,Comment", "3097F10A-BEE6-4A76-AD7A-D4663C9B73EC", "Табличная часть 'Товары'");	
	//@skip-check structure-consructor-too-many-keys
	СтррПоляТЧ = Новый Структура("GUID,DocId,A01,A02,A03,A04,A05,A06"); // ТЧ документа
	
	СтррПоискХарактеристики	= Новый Структура("Ссылка,Номенклатура");

	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Перемещение");
	
	Пока ВыборкаДок.Следующий() Цикл 
		Док = ВыборкаДок.Ссылка;
		СтррПоля.GUID = Док.УникальныйИдентификатор();
		СтррПоля.dt = Док.Дата;
		СтррПоля.IsPost = Док.Проведен;
		СтррПоля.A01 = Док.Организация;
		СтррПоля.A03 = Док.СкладОтправитель;
		СтррПоля.A04 = Док.СкладПолучатель;
		СтррПоля.A05 = 0; // СуммаДокумента
		СтррПоля.A06 = Док.Комментарий;
		СтррПоля.A07 = "";
		СтррПоля.A08 = "";
		СтррПоля.A09 = Док.ВидЦены;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		Если Док.Товары.Количество() > 0 Тогда 
			ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
			ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметрыТЧ);
			Для Каждого СтрокаТ Из Док.Товары Цикл 
				Номенклатура 		= СтрокаТ.Номенклатура;
				КоличествоУпаковок 	= СтрокаТ.КоличествоУпаковок;
				ЦенаНоменклатуры    = ПолучитьЦенуНоменклатуры(
										СтрокаТ.Номенклатура, 
										СтрокаТ.Характеристика, 
										Док.ВидЦены,
										СтрокаТ.Упаковка);
				СтррПоляТЧ.GUID = Новый УникальныйИдентификатор();
				СтррПоляТЧ.DocId = ВыборкаДок.Ссылка;
				СтррПоляТЧ.A01 = Номенклатура;
				
				СтррПоискХарактеристики.Номенклатура = Номенклатура;
				СтррПоискХарактеристики.Ссылка  	 = СтрокаТ.Характеристика;
				СтррПоляТЧ.A02 = КэшСлужебныхТаблицИдентификаторЭлементаДляМТ(СтррПоискХарактеристики, "СпрХарактеристикиНоменклатурыСлужебный");
				
				СтррПоляТЧ.A03 = СтрокаТ.Упаковка;
				СтррПоляТЧ.A04 = КоличествоУпаковок;
				СтррПоляТЧ.A05 = ЦенаНоменклатуры;
				СтррПоляТЧ.A06 = ЦенаНоменклатуры * КоличествоУпаковок;
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧ);
			КонецЦикла;
			ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена);
			ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
			ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS
		КонецЕсли;
	КонецЦикла;
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

//@skip-check module-unused-method
Процедура ВыгрузитьДокументыЗадание(ДокОбмена) 
	
	// системные свойства виртуального объекта                                        	
	СтррВОЗадание = ВОСвойстваОбъекта("_Задание");
	
	//Документ проведен	
	//Статусы: Записан,Проведен,ПомеченУдаления", 0, 1, 2) //ПометкаУдаления = ВОТЗИконкиСтатуса(СтррВО).Помечен;
	СтатусПроведен = ВОТЗИконкиСтатуса(СтррВОЗадание).Проведен; // 1
	
	// Структура документа
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,dt,IsPost,DocNumber,A01,A02,A03,A04,A05,A06,A07,A08,A09,A010,A011,A012,A013"); 
	
	// Структура ТЧ Документа
	СтррПараметрыТЧЗадачи 		= Новый Структура("GUID,Comment", "DF5A99C3-4778-4CFB-B5F2-877449E05D3B", "Табличная часть 'Задачи'");	
	//@skip-check structure-consructor-too-many-keys
	СтррПоляТЧЗадачи 			= Новый Структура("GUID,DocId,A01,A02,A03,A04");
	//@skip-check bsl-variable-name-invalid
	СтррПараметрыТЧСписокФото 	= Новый Структура("GUID,Comment", "D4AB3DC4-7FE1-439F-AF1F-58D8A7E48767", "Табличная часть 'Список фото'");
	//@skip-check structure-consructor-too-many-keys
	СтррПоляТЧСписокФото		= Новый Структура("GUID,DocId,A01,A02");
	
	// Все документы Задание
	ТЗЗадание = ВОТЗЗагрузить(СтррВОЗадание, Истина);
	
	СтррПоиск = Новый Структура;
	СтррПоиск.Вставить("Менеджер", ВыбАгент);
	МЗадания = ТЗЗадание.НайтиСтроки(СтррПоиск);
	
	//@skip-check use-non-recommended-method
	ТекНачПериодаЗаданий = НачалоДня(ТекущаяДата());
	//@skip-check use-non-recommended-method
	ТекКонПериодаЗаданий = КонецДня(ТекущаяДата());
	
	ВидЗадачиДата	= Новый УникальныйИдентификатор("23D6533F-F121-4939-9A40-27257371AC26");
	ВидЗадачиОбмен  = Новый УникальныйИдентификатор("061879D3-E400-4CC8-B4F9-999C3399F47C"); 
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Документ.Задание", Истина);	
	
	Для Каждого стзЗадание Из МЗадания Цикл
		
		//Только проведенные документы.
		Если НЕ стзЗадание.Статус = СтатусПроведен Тогда
		    Продолжить;
		КонецЕсли;
		
		// Только задания текущего дня
		Если стзЗадание.Дата < ТекНачПериодаЗаданий Или стзЗадание.Дата > ТекКонПериодаЗаданий Тогда
			Продолжить;
		КонецЕсли;
		
		СтррОбьекта = ВОЭлементЗагрузить(СтррВОЗадание, стзЗадание.ID);
		
		Если СтррОбьекта.Задачи.Количество() = 0 Тогда
			Продолжить; //Документы без задач не выгружаем
		КонецЕсли;
		
		СтррПоля.GUID		= стзЗадание.ID; 
		СтррПоля.dt         = СтррОбьекта.Дата;
		СтррПоля.IsPost     = 1; // sk_220324 СтррПоля.IsPost     = 1; 
		//(( sk_220324 MOD-3074  
		// СтррПоля.IsPost     = 1;  
		СтррПоля.IsPost = ?(СтррОбьекта.ВремяОкончания = '00010101', Ложь, Истина);
		//)) sk_220324
		СтррПоля.DocNumber  = СтррОбьекта.Номер;
		СтррПоля.A01        = СтррОбьекта.Организация.УникальныйИдентификатор();
		       		
		Если РежимВыгрузкиРекомендуемый И ЗначениеЗаполнено(СтррОбьекта.Контрагент) Тогда
			СтррПоля.A02    = СтррОбьекта.Контрагент.УникальныйИдентификатор();
		ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ЗначениеЗаполнено(СтррОбьекта.Партнер) Тогда
			СтррПоля.A02    = СтррОбьекта.Партнер.УникальныйИдентификатор();
		Иначе
			СтррПоля.A02	= "";
		КонецЕсли;
		
		Если РежимВыгрузкиРекомендуемый И ЗначениеЗаполнено(СтррОбьекта.Партнер) Тогда
			СтррПоля.A03    = СтррОбьекта.Партнер.УникальныйИдентификатор();
		ИначеЕсли НЕ РежимВыгрузкиРекомендуемый И ЗначениеЗаполнено(СтррОбьекта.Контрагент) Тогда
			СтррПоля.A03    = СтррОбьекта.Контрагент.УникальныйИдентификатор();
		Иначе
			СтррПоля.A03	= "";
		КонецЕсли;
		
		Если ИспользоватьСоглашения() И СтррОбьекта.Свойство("Соглашение") И ЗначениеЗаполнено(СтррОбьекта.Соглашение) Тогда
			СтррПоля.A04    = СтррОбьекта.Соглашение.УникальныйИдентификатор();
		ИначеЕсли ИспользоватьДоговоры() И ЗначениеЗаполнено(СтррОбьекта.Договор) Тогда
			СтррПоля.A04    = СтррОбьекта.Договор.УникальныйИдентификатор();
		Иначе
			СтррПоля.A04    = "";
		КонецЕсли;
		
		СтррПоля.A05        = СтррОбьекта.Комментарий;
		СтррПоля.A06        = "";
		СтррПоля.A07        = СтррОбьекта.ВремяНачала;
		СтррПоля.A08        = СтррОбьекта.ВремяОкончания;
		СтррПоля.A09        = СтррОбьекта.НеИзменятьВМУ;
		СтррПоля.A010       = СтррОбьекта.СозданВЦБД;
		СтррПоля.A011       = СтррОбьекта.Широта;
		СтррПоля.A012       = СтррОбьекта.Долгота;
		СтррПоля.A013       = СтррОбьекта.ДатаТочкиТрека;
		
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля, Ложь);
		
		ДокОбмена.ЗаписатьНачалоЭлемента("TABLES");
		
		// ТЧ Задание
		ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметрыТЧЗадачи);	
		Для Каждого стзЗадача Из СтррОбьекта.Задачи Цикл
			СтррПоляТЧЗадачи.GUID 	  = стзЗадача.GUID;
			СтррПоляТЧЗадачи.DocId    = стзЗадание.ID;
			СтррПоляТЧЗадачи.A01      = стзЗадача.ВидЗадачи;
			СтррПоляТЧЗадачи.A02      = стзЗадача.Комментарий;
			СтррПоляТЧЗадачи.A03      = Число(стзЗадача.Обязательная);
			
			Если ЗначениеЗаполнено(стзЗадача.Результат) И (стзЗадача.ВидЗадачи = ВидЗадачиДата ИЛи стзЗадача.ВидЗадачи = ВидЗадачиОбмен) Тогда  
				СтррПоляТЧЗадачи.A04 = Формат(стзЗадача.Результат, "ДФ=ггггММддЧЧммсс");
			Иначе
				СтррПоляТЧЗадачи.A04 = стзЗадача.Результат;
			КонецЕсли;
			
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧЗадачи);
		КонецЦикла;
		ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена); //TABLE
	
		// ТЧ Фото
		Если СтррОбьекта.СписокФото.Количество() > 0 тогда
			ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметрыТЧСписокФото);	
			Для Каждого стзСписокФото Из СтррОбьекта.СписокФото Цикл
				СтррПоляТЧСписокФото.GUID 	  = стзСписокФото.GUID;
				СтррПоляТЧСписокФото.DocId    = стзЗадание.ID;
				СтррПоляТЧСписокФото.A01      = стзСписокФото.ИдЗадачиДокумента;
				СтррПоляТЧСписокФото.A02      = стзСписокФото.ФотоЗадачи;
				
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоляТЧСписокФото);
			КонецЦикла;
			ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена); //TABLE
		КонецЕсли;
		
   		ДокОбмена.ЗаписатьКонецЭлемента(); //TABLES
		ДокОбмена.ЗаписатьКонецЭлемента(); //ITEMS

	КонецЦикла;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

// ВыгрузкаДокументов  
#КонецОбласти

#Область Выгрузкаотчетов

//@skip-check module-unused-method
Функция ВыгрузитьОтчет(ЗагружаемыеОбъекты)
	
	Если ТипЗнч(ЗагружаемыеОбъекты) <> Тип("Структура") ИЛИ НЕ ЗагружаемыеОбъекты.СтррКонстанты.Свойство("ИдентификаторДопОтчетаДляОбновления") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ИдентификаторДопОтчетаДляОбновления = Новый УникальныйИдентификатор(ЗагружаемыеОбъекты.СтррКонстанты.ИдентификаторДопОтчетаДляОбновления);
	Исключение
		ВыгрузитьОтчетСообщениеОшибки("Некорректно задана костанта идентификатора запроса.");
		Возврат Неопределено;
	КонецПопытки;           
	
	ТЗСправочникОтчеты = ЗагружаемыеОбъекты.тзСправочникОтчеты;  
	СтзСправочникОтчеты = ТЗСправочникОтчеты.Найти(ИдентификаторДопОтчетаДляОбновления, "Идентификатор");
	Если СтзСправочникОтчеты = Неопределено Тогда
		ВыгрузитьОтчетСообщениеОшибки("Не найден справочник в файле обмен.");
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение таблицы Списка отчетов
	СтррВО = ВОСвойстваОбъекта("_ДополнительныеОтчетыДляМУ"); 
	ТЗДополнительныеОтчетыДляМУ = ПрочитатьЗначениеНастройки(СтррВО.РеквизитОбработки);
	Если ТЗДополнительныеОтчетыДляМУ = Неопределено Тогда
		ВыгрузитьОтчетСообщениеОшибки("Список отчетов в учетной системе не найден.", СтзСправочникОтчеты.Имя);
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск Идентификатора объекта
	СтзДополнительныеОтчетыДляМУ = ТЗДополнительныеОтчетыДляМУ.Найти(ИдентификаторДопОтчетаДляОбновления, "IDМТ");
	Если СтзДополнительныеОтчетыДляМУ = Неопределено Тогда
		ВыгрузитьОтчетСообщениеОшибки("Отчет изменен в учетной системе. Для актуализации параметров отчета в МУ необходимо выполнить обмен (полную выгрузку) в МУ.", СтзСправочникОтчеты.Имя);
		Возврат Неопределено;
	Иначе
		ИдентификаторОтчета = СтзДополнительныеОтчетыДляМУ.ID;	
	КонецЕсли;
	
	// Получение объекта отчета
	СтррОбъект = ВОЭлементЗагрузить(СтррВО, ИдентификаторОтчета);
		
	// Получение параметров отчета
	//
	//ствТипыПараметров:
	// 	Ключ 		- Строка - Идентифекатор типа
	//	Значение    - Тип	 - Тип Значения в УС
	СтвТипыПараметров = ДопОтчетТипыПараметровУС();
	//
	//тзСправочникОтчетыПараметры:
	//	GUID			- Идентификатор
	//	Родитель		- Идентификатор
	//	Имя				- Строка
	//	Тип				- Строка
	//	Обязательный	- Строка
	//	Значение		- Строка
	ТЗСправочникОтчетыПараметры = ЗагружаемыеОбъекты.тзСправочникОтчетыПараметры;
	
	Для Каждого стзСправочникОтчетыПараметры Из ТЗСправочникОтчетыПараметры Цикл
		Если стзСправочникОтчетыПараметры.Родитель <> ИдентификаторДопОтчетаДляОбновления Тогда
			Продолжить; //Ошибка
		Конецесли;
		стзПараметрыОтчета = СтррОбъект.ПараметрыОтчета.Найти(стзСправочникОтчетыПараметры.GUID, "АтрибутGUID"); 
		типПараметраУС = СтвТипыПараметров.Получить(стзПараметрыОтчета.ТипПараметраGUID);
		стзПараметрыОтчета.ЗначениеПараметра = ДопОтчетПолучитьЗначение(стзСправочникОтчетыПараметры.Имя, стзСправочникОтчетыПараметры.Значение, типПараметраУС);
		стзПараметрыОтчета.Выражение = Ложь;
	КонецЦикла;
	
	//Получение Отчета
	ТабличныйДокументРезультат = Новый ТабличныйДокумент;
	ВывестиОтчет(ТабличныйДокументРезультат, СтррОбъект);
	
	//Сохранение отчета
	//Имя файла отчета без расширения
	ИдентификаторФайла = ДопОтчетИмяФайла(ИдентификаторОтчета);
	// Временный каталог отчета.
	КаталогОтчетов 		= КаталогВременныхФайловДляТранспорта("reports");
	// Каталог для временного хранения отчета с иерархией для корректного добавления в архив
	КаталогРезультат 	= КаталогОтчетов + ИдентификаторФайла;
	Если НЕ ПроверитьИСоздатьКаталог(КаталогРезультат) Тогда
		ВыгрузитьОтчетСообщениеОшибки("Не удается создать каталог: " + КаталогОтчетов, СтзСправочникОтчеты.Имя);
	КонецЕсли;
	
	//Сохранения Файла
	КаталогФайла 		= ДополнитьСлешВПуть(КаталогРезультат) + "reports";
	Если НЕ ПроверитьИСоздатьКаталог(КаталогФайла) Тогда
		ВыгрузитьОтчетСообщениеОшибки("Не удается создать каталог: " + КаталогФайла, СтзСправочникОтчеты.Имя);
	КонецЕсли;
	ПолноеИмяОтчета = ДополнитьСлешВПуть(КаталогФайла) + ИдентификаторФайла + ".html"; 	
	
	Попытка
		ТабличныйДокументРезультат.Записать(ПолноеИмяОтчета, ТипФайлаТабличногоДокумента.HTML);
	Исключение
		ВыгрузитьОтчетСообщениеОшибки("Не удалось сохранить отчет, путь: " + ПолноеИмяОтчета, СтзСправочникОтчеты.Имя);
		Возврат Неопределено;
	КонецПопытки;	
	
	ОповеститьОСобытии("Запрос на выгрузку дополнительного отчета: """ + СтррОбъект.Наименование + """. Отчет успешно сформирован.");
	
	Возврат КаталогРезультат;
КонецФункции

Процедура ВыгрузитьОтчетСообщениеОшибки(ТекстОшибки, ИмяОтчета = Неопределено)
	
	ОповеститьОСобытии("Запрос на выгрузку дополнительного отчета " + ?(ЗначениеЗаполнено("""" + ИмяОтчета),ИмяОтчета + """ ","") + "не выполнен! Причина: " + ТекстОшибки);
	
КонецПроцедуры	

#КонецОбласти

#Область ОтборыВыгрузки

Функция ОрганизацииВыгрузки(МенеджерВТ)
	
	Если ГКэшСпискиОбъектов = Неопределено Тогда
		ГКэшСпискиОбъектов = Новый Соответствие;
		ГКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", Неопределено);	
	КонецЕсли;

	Значение = ГКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки");
	Если Значение = Неопределено Тогда
		Если МенеджерВТ = Неопределено Тогда
			МенеджерВТ = Новый МенеджерВременныхТаблиц;
		КонецЕсли; 
		МенеджерВТОрганизации(МенеджерВТ);
		Значение = ГКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки");		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ВидыКонтактнойИнформацииВыгрузки()

	Возврат ВыборкаИзСправочника(ТекстЗапросаВыборкиВидовКонтактнойИнформации());
	
КонецФункции

Функция ВидыЦенВыгрузки(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыЦен.Ссылка КАК Ссылка,
	               |	ВидыЦен.Наименование КАК Наименование,
	               |	ВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ВидыЦен
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыЦен КАК ВТ_ВидыЦен
	               |		ПО ВидыЦен.Ссылка = ВТ_ВидыЦен.ссылка
	               |
				   |УПОРЯДОЧИТЬ ПО
	               |	ВидыЦен.Наименование";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		
	Возврат ВыборкаРезультат;
		
КонецФункции

Функция СкладыВыгрузки(МенеджерВТ)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Ссылка КАК Ссылка,
	               |	Склады.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
	               |		ПО Склады.Ссылка = ВТ_Склады.ссылка
	               |
				   |УПОРЯДОЧИТЬ ПО
	               |	Склады.Наименование";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
		
	Возврат ВыборкаРезультат;
	
КонецФункции

// Заполняет структуру для выгрузки ТЧ номенклатуры.
//
// Возвращаемое значение: 
//   Структура:
//	   * КоличествоОбщ 			- Число 	- Количество складов или видов цен, включая те которые выгружаются в блоке элемент
//	   * КоличествоТЧ        	- Число 	- Количество Табличных частей
//	   * КоличествоАтрибутов 	- Число 	- Количество атрибутов выгружаемых в ТЧ для Остаков = 5, для цен = 10
//     * ВыборкаДетальныеЗаписи - Неопределено - Заполняется далее после вызова функции.
//	   * CтррТЧ              	- Структура	- Структура ТЧ 
//     * CтррТЧПоследняя     	- Структура - Структура ТЧ, последней ТЧ (количество элементов может отличатся от КоличествоАтрибутов)
//	   * СтррТЧШапка			- Структура - Структура Шапки ТЧ
//
Функция ПолучитьСтуктуруТЧНоменкдатуры(МенеджерВТ, ИмяТЧ); 
	
	//@skip-check structure-consructor-too-many-keys
	CтррРезультат = Новый Структура("КоличествоОбщ, КоличествоТЧ, КоличествоАтрибутов, ВыборкаДетальныеЗаписи, СтррТЧ, СтррТЧПоследняя, СтррТЧШапка");
	
	//1. КоличествоОбщ, КоличествоТЧ
	Если ИмяТЧ = "Остатки" ИЛИ ИмяТЧ = "ОстаткиХарактеристика" Тогда
		КоличествоОбщ	= МенеджерВТ.Таблицы.Найти("ВТ_Склады").ПолучитьДанные().Выбрать().Количество();
		КоличествоАтрибутов = 5;
	ИначеЕсли ИмяТЧ = "Цены" ИЛИ ИмяТЧ = "ЦеныХарактеристика" Тогда
		КоличествоОбщ = МенеджерВТ.Таблицы.Найти("ВТ_ВидыЦен").ПолучитьДанные().Выбрать().Количество();
		КоличествоАтрибутов = 10;
	Иначе
		//Ошибка
		Возврат Неопределено;
	КонецЕсли;
	
	//2. КоличествоТЧ
	Если КоличествоОбщ <= КоличествоАтрибутов Тогда
		КоличествоТЧ = 0;
	Иначе
		Количество = (КоличествоОбщ - КоличествоАтрибутов) / КоличествоАтрибутов;
		Если Количество <= 1 Тогда
			КоличествоТЧ = 1;	
		Иначе
			ЦелаяЧасть = Цел(Количество); 
			ДробнаяЧасть = Количество - ЦелаяЧасть; 
			КоличествоТЧ = ?(ДробнаяЧасть = 0, ЦелаяЧасть, ЦелаяЧасть + 1);
		КонецЕсли;
	КонецЕсли;
	
	CтррРезультат.КоличествоОбщ 		= КоличествоОбщ;
	CтррРезультат.КоличествоТЧ 			= КоличествоТЧ;
	CтррРезультат.КоличествоАтрибутов 	= КоличествоАтрибутов;
	
	//3. СтррТЧ
	Если КоличествоТЧ > 1 Тогда
		CтррТЧ = Новый Структура("GUID, CtlgID, " + "A0" + (КоличествоАтрибутов + 1));
		МаксимальныйАтрибут = КоличествоАтрибутов;
		Для Счетчик = 1 По МаксимальныйАтрибут Цикл
			CтррТЧ.Вставить("A0" + Счетчик, 0);
		КонецЦикла;
		CтррРезультат.СтррТЧ = CтррТЧ;
	Конецесли;		
	
	//4. СтррТЧПоследняя	
	Если КоличествоТЧ > 0 Тогда
		CтррТЧПоследняя = Новый Структура("GUID, CtlgID, " + "A0" + (КоличествоАтрибутов + 1));
		МаксимальныйАтрибут = КоличествоОбщ - (КоличествоТЧ * КоличествоАтрибутов);	
		Для Счетчик = 1 По МаксимальныйАтрибут Цикл
			CтррТЧПоследняя.Вставить("A0" + Счетчик, 0);			
		КонецЦикла;
		CтррРезультат.СтррТЧПоследняя = CтррТЧПоследняя;
	КонецЕсли;	
	
	//5. СтррТЧШапка
	Если КоличествоТЧ > 0 Тогда 
		СтррТЧШапка = Новый Структура("GUID,Comment");
		Если ИмяТЧ = "Остатки" Тогда
			СтррТЧШапка.GUID    = "af0a6972-4bca-4652-a3cf-8ebc1ed1ee0d";
			СтррТЧШапка.Comment = "Остатки";
		ИначеЕсли ИмяТЧ = "Цены" Тогда
			СтррТЧШапка.GUID    = "7f72aed2-94f7-4165-b112-c7a69fea70cc";
			СтррТЧШапка.Comment = "Цены";			
		ИначеЕсли ИмяТЧ = "ОстаткиХарактеристика" Тогда
			СтррТЧШапка.GUID    = "19481e88-8575-4720-80e6-222816c754e4";
			СтррТЧШапка.Comment = "Остатки";			
		ИначеЕсли ИмяТЧ = "ЦеныХарактеристика" Тогда
			СтррТЧШапка.GUID    = "d91732e1-d4d8-4566-9f4f-bb1b0a043e6f";
			СтррТЧШапка.Comment = "Цены";
		КонецЕсли;
		CтррРезультат.СтррТЧШапка = СтррТЧШапка;
	КонецЕсли;
	
	//@skip-check constructor-function-return-section
	Возврат CтррРезультат;
	
КонецФункции	

Функция СтатусыПартнеровВыгрузки()

	Если Не ВременныеТаблицы.Свойство("СтатусыПартнеров") Тогда // значит статусы партнеров не задавались
		Возврат Новый ТаблицаЗначений;
	Иначе
		Возврат ВременныеТаблицы.СтатусыПартнеров;
	КонецЕсли;
	
КонецФункции

Процедура АктуализироватьОграничениеВыгрузкФотографийТоваров()
	
	//1. Проверка настроек
	Если НЕ ВыгружатьИзображенияТоваров ИЛИ НЕ ВыгружатьИзображенияТоваровОграничиватьВыгрузку Тогда
		Возврат;
	КонецЕсли;
	
	//2. Получение данных
	СтрокаТ = ГКэшСлужебныхТаблиц["СпрОграничениеВыгрузкФотографийТоваров"].Найти(ВыбАгент, "Пользователь");
	//@skip-check use-non-recommended-method
	Если СтрокаТ = Неопределено Тогда
		//Фотогарафии ранее не выгружались.
		Возврат;
	ИначеЕсли СтрокаТ.ДатаВыгрузки < НачалоДня(ТекущаяДата()) Тогда
		//Актуализация не требуется, тк данные выгружались в предыдущие дни
		//Информация больше не актуальна.
		ГКэшСлужебныхТаблиц["СпрОграничениеВыгрузкФотографийТоваров"].Удалить(СтрокаТ);
		ГКэшСлужебныхТаблиц["СпрОграничениеВыгрузкФотографийТоваров_Изменен"] = Истина;
		Возврат;
	ИначеЕсли СтрокаТ.ЗагруженВМУ Тогда
		//Актуализация не требуется  
		Возврат;
	КонецЕсли;

	//3. Проверяем наличие файла на сервере
	Если СпособОбмена = "КаталогОбмена" Тогда
		СтрокаТ.ЗагруженВМУ = Истина;
		
	ИначеЕсли СпособОбмена = "АПСОД" Тогда
		Попытка
			ПутьФайлаОбмена = ДополнитьСлешВПуть(КаталогОбменаАгента(Ложь)) + "From1C.zip";
			ФайлНаДиске = Новый Файл(ПутьФайлаОбмена);
			Если НЕ ФайлНаДиске.Существует() Тогда
		    	СтрокаТ.ЗагруженВМУ = Истина;
			КонецЕсли;
		Исключение
			Возврат; // не верный путь.
		КонецПопытки;
		
	ИначеЕсли СпособОбмена = "FTP" Тогда
		ПодключениеFTP = ФТПСоздатьПодключение();
		Если ПодключениеFTP = Неопределено Тогда
			Возврат; //Ошибка подключения
		КонецЕсли;
		
		Попытка
			ФТППапкаСервера = СтрЗаменить(FTPКаталогСервера, "\", "/");
			Если Не ПустаяСтрока(ФТППапкаСервера) Тогда // указан начальный каталог сервера и указана относительная папка агента
				ПодключениеFTP.УстановитьТекущийКаталог(ФТППапкаСервера);
			КонецЕсли;
			ФТППапка	= СтрЗаменить(ВыбНастройкиАгента.КаталогОбмена, "\", "/");
			ИмяФайлаFTP = ФТППапка + "/" + "From1C.zip";
			
			Если ПодключениеFTP.НайтиФайлы(ИмяФайлаFTP).Количество() = 0 Тогда
				СтрокаТ.ЗагруженВМУ = Истина;
			КонецЕсли;
		Исключение
			Возврат; //Ошибка имени каталогов
		КонецПопытки;
		
	Иначе
		Возврат; //Ошибка
		
	КонецЕсли;	
	
	//4. Признак сохранения
	Если СтрокаТ.ЗагруженВМУ = Истина Тогда
		ГКэшСлужебныхТаблиц["СпрОграничениеВыгрузкФотографийТоваров_Изменен"] = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьЗаписьОграничениеВыгрузкиФотографийТоваров()
	
	//1. Проверка настроек
	Если НЕ ВыгружатьИзображенияТоваров() Тогда
		Возврат;
	КонецЕсли;
	
	//2. Получение данных
	СтрокаТ = ГКэшСлужебныхТаблиц["СпрОграничениеВыгрузкФотографийТоваров"].Найти(ВыбАгент, "Пользователь");
	Если СтрокаТ = Неопределено Тогда
		СтрокаТ = ГКэшСлужебныхТаблиц["СпрОграничениеВыгрузкФотографийТоваров"].Добавить();
	ИначеЕсли СтрокаТ.ЗагруженВМУ = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаТ.Пользователь 	= ВыбАгент;
	//@skip-check use-non-recommended-method
	СтрокаТ.ДатаВыгрузки	= ТекущаяДата();
	СтрокаТ.ЗагруженВМУ		= Ложь;
	
	ГКэшСлужебныхТаблиц["СпрОграничениеВыгрузкФотографийТоваров_Изменен"] = Истина;
	
КонецПроцедуры

Функция ВыгружатьИзображенияТоваров()
	
	Если НЕ ВыгружатьИзображенияТоваров Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ВыгружатьИзображенияТоваровОграничиватьВыгрузку Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаТ = ГКэшСлужебныхТаблиц["СпрОграничениеВыгрузкФотографийТоваров"].Найти(ВыбАгент, "Пользователь");
	//@skip-check use-non-recommended-method
	Если СтрокаТ = Неопределено Тогда
		//Фотогарафии ранее не выгружались.
		Возврат Истина;
		
	ИначеЕСли СтрокаТ.ДатаВыгрузки < НачалоДня(ТекущаяДата()) Тогда
		//Фотографии выгружадись в предыдущие дни.
		Возврат Истина;
		
	ИначеЕсли НЕ СтрокаТ.ЗагруженВМУ Тогда
		//Фотографии небыли загружены в МУ. (на сервере есть фаил)
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает признак - выгружать персональные цены или нет
Функция ВыгружатьПерсональныеЦены()

	Возврат ВыгружатьПерсональныеЦены И ИспользоватьСоглашения();

КонецФункции 

// Функция возвращает признак - выгружать характеристики номенклатуры или нет
Функция ВыгружатьХарактеристикиНоменклатуры()
	
	Возврат	КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики;

КонецФункции 

Функция ИспользоватьСоглашения()
	
	Возврат ИспользоватьДоговорыИлиСоглашения = "СОГЛАШЕНИЯ" 
		И КонстантыПолучитьЗначение("ИспользованиеСоглашенийСКлиентами") <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать;

КонецФункции 
	
Функция ИспользоватьДоговоры()
	
	Возврат ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" 
		И КонстантыПолучитьЗначение("ИспользоватьДоговорыСКлиентами");

КонецФункции 

Функция ИспользоватьСтатусы() Экспорт

	Если Не ПоколениеКонфигурации("<УТ_11.1.10") Или ГКонфигурация = "УТ_UA" Тогда 
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	Иначе
		Возврат Ложь;
	КонецЕсли;    
	
КонецФункции

// Возвращает признак использования режима исполнения заказов СоСкладаИПодЗаказ
//
// Возвращаемое значение:
//	Булево - признак использования режима исполнения заказов СоСкладаИПодЗаказ
//
Функция РежимИсполненияЗаказовСоСкладаИПодЗаказ() 
	
	Если ПоколениеКонфигурации("<УТ_11.1.10") Или ГКонфигурация = "УТ_UA" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат КонстантыПолучитьЗначение("ИспользоватьРасширенныеВозможностиЗаказаКлиента") И КонстантыПолучитьЗначение("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");  
	
КонецФункции // РежимИсполненияЗаказовСоСкладаИПодЗаказ()

// Процедура заполняет список выбора значений для диалогового элемента.
// Параметры:
// 	СписокВыбора - СписокЗначений Из Строка
Процедура ЗаполнитьСпособыВыгрузкиДоговоров(СписокВыбора) Экспорт

	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", 				НСтр("ru = 'Не использовать'"));
	Если Константы.ИспользоватьДоговорыСКлиентами.Получить() Тогда
		СписокВыбора.Добавить("ДОГОВОРЫ", 	НСтр("ru = 'Использовать договоры'"));
	КонецЕсли; 
	Если Константы.ИспользованиеСоглашенийСКлиентами.Получить() <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
		СписокВыбора.Добавить("СОГЛАШЕНИЯ", НСтр("ru = 'Использовать соглашения'"));
	КонецЕсли; 

КонецПроцедуры

// Процедура заполняет список выбора значений для диалогового элемента.
// Параметры:
// 	СписокВыбора - СписокЗначений Из Строка
Процедура ЗаполнитьРежимыВыгрузкиКодовНоменклатуры(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("КОД", 	 НСтр("ru = 'Выгружать коды'"));
	СписокВыбора.Добавить("АРТИКУЛ", НСтр("ru = 'Выгружать артикулы'"));

КонецПроцедуры

// Процедура заполняет список выбора значений для диалогового элемента.
// Параметры:
// 	СписокВыбора - СписокЗначений Из Строка
Процедура ЗаполнитьРежимыВыгрузкиВУД(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("", 		НСтр("ru = 'Не выгружать'"));
	СписокВыбора.Добавить("МУ", 	НСтр("ru = 'Принятые файлы из МУ'"));
	СписокВыбора.Добавить("МУиУС", 	НСтр("ru = 'Принятые файлы из МУ и отправленные в МУ'"));

КонецПроцедуры

// Процедура заполняет список выбора значений для диалогового элемента.
// Параметры:
// 	СписокВыбора - СписокЗначений Из Строка	
Процедура ЗаполнитьВариантыРегистровОстатковНоменклатуры(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("СвободныеОстатки", 	НСтр("ru = 'Свободные остатки'"));
	СписокВыбора.Добавить("ТоварыНаСкладах", 	НСтр("ru = 'Товары на складах'"));
	
КонецПроцедуры

// Заполняет список выбора значений для диалогового элемента РежимРасчетаСкидок
//
// Параметры:
// 	СписокВыбора - СписокЗначений Из Строка
Процедура ЗаполнитьРежимыРасчетаСкидок(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ОпределитьУчетнойСистемой", НСтр("ru = 'Определить учетной системой'"));
	СписокВыбора.Добавить("Рекомендуемый", 			   НСтр("ru = 'Рекомендуемый'"));
	
КонецПроцедуры

// Возвращает признак учета маркированных товаров на дату сеанса
//
// Возвращаемое значение:
//	Булево - признак учета маркированной продукции
//
Функция ВестиУчетМаркированныхТоваров() 
	
	Если ПоколениеКонфигурации(">=УТ_11.4.12") Тогда
		МодульИнтеграцияИСМПКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСерверПовтИсп"); 
		Если МодульИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции() Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

// Возвращает признак использования маркировок
//
// Возвращаемое значение:
//	Булево - признак учета маркированной продукции
//
Функция ИспользоватьМаркировки()
	
	Возврат	ВестиУчетМаркированныхТоваров И ВестиУчетМаркированныхТоваров();

КонецФункции // ИспользоватьМаркировки()       

// ОтборыВыгрузки
#КонецОбласти 

#Область ГенерацияXMLФайлаВыгрузки

Процедура ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента(); //ELEMENTS
	ДокОбмена.ЗаписатьКонецЭлемента(); //CATALOG или DOCUMENT

КонецПроцедуры

Процедура ЗаписатьНачалоВеткиОбъекта(ДокОбмена, ВидОбъектаДляМТ, УдалитьВсе = Неопределено, ДополнительныйКомментарий = "")

	КорневойВид = Неопределено;
	СвойстваВида = СвойстваВидаОбъекта(ВидОбъектаДляМТ, "ВидДляМТ", КорневойВид);
	
	ДокОбмена.ЗаписатьНачалоЭлемента(?(КорневойВид = "Документ", "DOCUMENT", "CATALOG"));
	ДобавитьПоле(ДокОбмена, "GUID", ВРег(СвойстваВида.ИдентификаторВида));
	УстановитьПризнакОчисткиОбъекта(ДокОбмена, СвойстваВида.ВидДляМТ, КорневойВид, УдалитьВсе);
	Комментарий = ПредставлениеВида(КорневойВид, СвойстваВида);
	Если Не ПустаяСтрока(ДополнительныйКомментарий) Тогда
		Комментарий = Комментарий + ЗначениеВСтрокуДляXML(" ## " + ДополнительныйКомментарий);
	КонецЕсли; 
	ДобавитьПоле(ДокОбмена, "Comment", Комментарий);
	ДокОбмена.ЗаписатьНачалоЭлемента("ELEMENTS");

КонецПроцедуры

Процедура УстановитьПризнакОчисткиОбъекта(ДокОбмена, ВидДляМТ, КорневойВид, Принудительно)

	Если Принудительно = Истина Тогда // параметр Принудительно может быть со значением Неопределено
		ДобавитьПоле(ДокОбмена, "KILLALL", "1");
	ИначеЕсли Принудительно = Ложь Тогда 	
		Возврат;
	Иначе
		
		Если КорневойВид = "Документ" И ОчищатьДокументыПередЗагрузкой Тогда
			Список = СписокОчищаемыхДокументов;
		ИначеЕсли КорневойВид = "Справочник" И ОчищатьСправочникиПередЗагрузкой Тогда
			Список = СписокОчищаемыхСправочников;
		Иначе
			Возврат;
		КонецЕсли;
			
		ИскатьЗначение = ВРег(ВидДляМТ);
		Для Каждого Элемент Из Список Цикл
			Если ВРег(Элемент.Значение) = ИскатьЗначение Тогда // пометку элемента не проверяем, т.к. в списке у нас только очищаемые справочники
				ДобавитьПоле(ДокОбмена, "KILLALL", "1");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНачалоТабличнойЧасти(ДокОбмена, СтррПараметры)

	ДокОбмена.ЗаписатьНачалоЭлемента("TABLE");
	ДобавитьПоле(ДокОбмена, "GUID", СтррПараметры.GUID);
	ДобавитьПоле(ДокОбмена, "Comment", СтррПараметры.Comment);

КонецПроцедуры

Процедура ЗаписатьОкончаниеТабличнойЧасти(ДокОбмена)

	ДокОбмена.ЗаписатьКонецЭлемента(); //TABLE

КонецПроцедуры

Процедура ДобавитьКонстанту(ДокОбмена, Идентификатор, Значение)

	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	ДобавитьПоле(ДокОбмена, "GUID", ВРег(Идентификатор));
	ДобавитьПоле(ДокОбмена, "VALUE", Значение);
	ДокОбмена.ЗаписатьКонецЭлемента();

КонецПроцедуры

Процедура ДобавитьПоле(ДокОбмена, Имя, Значение)

	ДокОбмена.ЗаписатьАтрибут(Имя, ЗначениеВСтрокуДляXML(Значение));

КонецПроцедуры

// Выполняет формирование xml-документа
//
// Параметры:
//	ДокОбмена		  - ЗаписьXML 			- XML-документ выгрузки
//	СтруктураПолей    - Структура 			- структура выгружаемых полей
//	ЗакрытьЭлемент 	  - Булево 				- признак закрытия элемента XML (узла)
//	СтрНевыгружаемыеПоля - Неопределено, Строка - невыгружаемые поля
//
//@skip-check module-unused-method
Процедура ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтруктураПолей, ЗакрытьЭлемент = Истина, СтрНевыгружаемыеПоля = Неопределено)

	Если СтруктураПолей.Свойство("GUID") И Не ЗначениеЗаполнено(СтруктураПолей.GUID) Тогда
		Возврат;
	КонецЕсли;

	ДокОбмена.ЗаписатьНачалоЭлемента("ITEM");
	Для Каждого ТекЭлемент Из СтруктураПолей Цикл
		//@skip-check use-non-recommended-method
		Если Не СтрНевыгружаемыеПоля = Неопределено И Найти(СтрНевыгружаемыеПоля, ТекЭлемент.Ключ) <> 0 Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьПоле(ДокОбмена, ТекЭлемент.Ключ, ТекЭлемент.Значение);
	КонецЦикла;
	
	Если ЗакрытьЭлемент Тогда
		ДокОбмена.ЗаписатьКонецЭлемента();
	КонецЕсли;

КонецПроцедуры

// ГенерацияXMLФайлаВыгрузки
#КонецОбласти 

//Процедура ВставитьНомерДокументаВСтруктуру(СтррПоля, Док)
//
//	НомерДляXML = СокрП(Док.Номер);
//
//	// Проверка последнего элемента номера
//	Код = КодСимвола(Прав(НомерДляXML, 1));
//	Если Код < 48 Или Код > 57 Тогда
//		ОповеститьОСобытии("В номере документа '" + Строка(Док) + "' последний символ не цифра.", "ОшибкаПрочее", Док, "ТекущийАгент");
//	КонецЕсли;
//
//	СтррПоля.Вставить("DocNumber", НомерДляXML);
//	
//КонецПроцедуры

Функция НачалоВыгрузкиДокументов(ИнтервалВыгрузки)

	//@skip-check use-non-recommended-method
	Возврат НачалоДня(ТекущаяДата()) - ?(ИнтервалВыгрузки <> Неопределено, 86400 * ИнтервалВыгрузки, 0);
	
КонецФункции

// sk_220328 MOD-2386
// ЕстьПодчиненныеРеализацииДляЗаказа()      
//
//Функция ЕстьПодчиненныеРеализацииДляЗаказа_OLD(ЗаказСсылка)
//
//	ТекстЗапроса = "
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
//	|	РеализацияТоваровУслуг.ЗаказКлиента
//	|ИЗ
//	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//	|ГДЕ
//	|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
//	|	И РеализацияТоваровУслуг.Проведен
//	|	И РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказСсылка";
//
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Возврат Не РезультатЗапроса.Пустой();
//	
//КонецФункции

//Функция ПредопределенныеПоляДокумента(ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)
//
//	СтруктураПолей = Новый Структура;
//
//	Если СоздаватьИдентификатор Тогда
//		СтруктураПолей.Вставить("GUID", Новый УникальныйИдентификатор());
//	Иначе
//		СтруктураПолей.Вставить("GUID", ТекДокумент.Ссылка.УникальныйИдентификатор());
//	КонецЕсли;
//
//	СтруктураПолей.Вставить("dt", ТекДокумент.Дата);
//	СтруктураПолей.Вставить("IsPost", ТекДокумент.Проведен);
//	Если ВыгружатьНомер Тогда
//		ВставитьНомерДокументаВСтруктуру(СтруктураПолей, ТекДокумент.Ссылка);
//	КонецЕсли;
//
//	Возврат СтруктураПолей;
//КонецФункции

//Процедура ЗаполнитьОсновныеПоляДокументаДляВыгрузки(СтррПоля, ТекДокумент, СоздаватьИдентификатор = Ложь, ВыгружатьНомер = Истина)
//
//	Если СоздаватьИдентификатор Тогда
//		СтррПоля.GUID = Новый УникальныйИдентификатор();
//	Иначе
//		СтррПоля.GUID = ТекДокумент.Ссылка.УникальныйИдентификатор();
//	КонецЕсли;
//
//	СтррПоля.dt 	= ТекДокумент.Дата;
//	СтррПоля.IsPost = ТекДокумент.Проведен;
//	Если ВыгружатьНомер Тогда
//		ВставитьНомерДокументаВСтруктуру(СтррПоля, ТекДокумент.Ссылка);
//	КонецЕсли;
//
//КонецПроцедуры

Функция СуммаВВалютеУчетаАгента(Сумма, ВалютаДокумента, НаДату)

	СуммаПересчитанная = Сумма;
	ВалютаУчетаАгента = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");

	Если Не ВалютаДокумента = ВалютаУчетаАгента Тогда 
		СуммаПересчитанная = ПересчитатьСуммуДокументаВВалюту(Сумма, ВалютаДокумента, ВалютаУчетаАгента, НаДату);
	КонецЕсли;

	Возврат СуммаПересчитанная;
	
КонецФункции      

// Пересчитывает сумму документа из текущей валюты в новую валюту.
//
// Параметры:
//	Сумма 		  - Число - сумма документа
//	ТекущаяВалюта - СправочникСсылка.Валюты - валюта документа
//	НоваяВалюта   - СправочникСсылка.Валюты - новая валюта документа
//	Дата 		  - Дата - дата документа.
//
// Возвращаемое значение:
//	Число - Новая сумма документа
//
Функция ПересчитатьСуммуДокументаВВалюту(Сумма, ТекущаяВалюта, НоваяВалюта, Дата)
	
	Если ПоколениеКонфигурации(">=УТ_11.5.7") Тогда
		Возврат РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(Сумма, ТекущаяВалюта, НоваяВалюта, Дата, Неопределено);   
	Иначе
		//@skip-check not-enough-parameters
		Возврат РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(Сумма, ТекущаяВалюта, НоваяВалюта, Дата); 
	КонецЕсли;
	
КонецФункции

//@skip-check module-unused-method
Функция ПолучитьЦенуНоменклатуры(Номенклатура, Знач Характеристика = Неопределено, ВидЦены, Знач Упаковка = Неопределено)
	
	Характеристика 	= ?(ЗначениеЗаполнено(Характеристика), Характеристика, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Если ЗначениеЗаполнено(Упаковка) И ТипЗнч(Упаковка) = Тип("СправочникСсылка.Номенклатура") Тогда
		//@skip-check wrong-string-literal-content
		Упаковка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Упаковка, "ЕдиницаИзмерения"); 			
	ИначеЕсли ЗначениеЗаполнено(Упаковка) Тогда
		Упаковка = Упаковка;
	Иначе
		Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	

	//@skip-check structure-consructor-too-many-keys
	СтррОтбор = Новый Структура("Дата, Номенклатура, Характеристика, Упаковка, ВидЦены, Валюта");
	//@skip-check use-non-recommended-method
	СтррОтбор.Дата 				= ТекущаяДата();
	СтррОтбор.Номенклатура 		= Номенклатура;
	СтррОтбор.Характеристика	= Характеристика;
	СтррОтбор.Упаковка 	    	= Упаковка;
	СтррОтбор.ВидЦены			= ВидЦены;
	СтррОтбор.Валюта			= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
		МодульЦеныПредприятияЗаполнениеСервер = ОбщегоНазначения.ОбщийМодуль("ЦеныПредприятияЗаполнениеСервер");
		СтррОтбор.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
		ЦенаНоменклатуры = МодульЦеныПредприятияЗаполнениеСервер.ПолучитьЦенуПоОтбору(СтррОтбор); 
	Иначе
		//@skip-check unknown-method-property
		ЦенаНоменклатуры = ПродажиСервер.ПолучитьЦенуПоОтбору(СтррОтбор);
	КонецЕсли;
	
	Возврат ЦенаНоменклатуры;
	
КонецФункции

// Функция возвращает минимальный вид цены, закрепленной за торговым агентом
Функция МинимальныйВидЦены()
	Возврат ?(ВыбНастройкиАгента.Свойство("МинимальныйТипЦены"), ВыбНастройкиАгента.МинимальныйТипЦены, Неопределено);	
КонецФункции

Функция ПрефиксОрганизацииИБ(Префикс)

	ПрефиксНачальный = Прав("00" + СокрЛП(Префикс), 2);
	ПрефиксИБ 		 = Прав("00" + СокрЛП(КонстантыПолучитьЗначение("ПрефиксУзлаРаспределеннойИнформационнойБазы")), 2);
	
	Возврат ПрефиксНачальный + ПрефиксИБ + "-";

КонецФункции 

Функция КонтактнаяИнформацияОрганизации(Организация)

	СтррРезультат = Новый Структура("Телефон,ФактАдрес,ЮрАдрес");
	Для Каждого СтрокаКИ Из Организация.КонтактнаяИнформация Цикл
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
			СтррРезультат.Телефон = СокрЛП(СтрокаКИ.Представление);
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
			СтррРезультат.ФактАдрес = СокрЛП(СтрокаКИ.Представление);
		ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
			И СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
			СтррРезультат.ЮрАдрес = СокрЛП(СтрокаКИ.Представление);
		КонецЕсли;
	КонецЦикла;

	Возврат СтррРезультат;
	
КонецФункции // КонтактнаяИнформацияОрганизации()

Функция ТипыКонтактнойИнформации()

	СтвРезультат = Новый Соответствие;
	СтвРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Адрес, ВРег("a4d0f540-64ed-4f3e-b2bb-818da38f5ab2"));
	СтвРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВРег("52477200-af54-405b-9888-14b8bded0e19"));
	СтвРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.ВебСтраница, ВРег("2c2cfc86-e2a0-414d-a116-5acadac53437"));
	СтвРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Другое, ВРег("e45419b3-0cfd-47ce-8b24-7037a1e86aed"));
	СтвРезультат.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, ВРег("8fc8f351-14f0-48eb-952a-38bb313b28d5"));

	Возврат СтвРезультат;
	
КонецФункции

Функция ДатаВремяВФорматXMLИз1СМТ(ЛДатаВремя = Неопределено, Тип = "ДатаВремя") Экспорт

	//@skip-check use-non-recommended-method
	ДатаВремя = ?(ЛДатаВремя = Неопределено, ТекущаяДата(), ЛДатаВремя);
	НужнаяДата = Формат(ДатаВремя, "ДФ=""гггг-ММ-дд""");
	НужноеВремя = Формат(ДатаВремя, "ДФ=""ЧЧ:мм:сс""");

	Если Тип = "Дата" Тогда
		НужноеЗначение = НужнаяДата;
	ИначеЕсли Тип = "Время" Тогда
		НужноеЗначение = НужноеВремя;
	Иначе
		Если ПустаяСтрока(НужнаяДата) или  ПустаяСтрока(НужноеВремя) Тогда
			Возврат "";
		КонецЕсли;
		НужноеЗначение = НужнаяДата + "T" + НужноеВремя;
	КонецЕсли;
	
	Возврат НужноеЗначение;
КонецФункции //ДатаВремяВФорматXMLИз1СМТ()

Функция СписокЗначенийВСтрокуМТ20(Список)
	
	Стр = Строка(Список);
	Возврат СтрЗаменить(Стр, "; ", ",");
	
КонецФункции

Функция ЗначениеВСтрокуДляXML(Значение)

	Тип = ТипЗнч(Значение);
	
	Если Тип = Тип("Строка") Тогда
		
		Возврат XMLСтрока(Значение);
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		Если Значение = 0 Тогда
			Возврат "0";
		Иначе
			Возврат Формат(Значение, "ЧГ=0;ЧРД='.'");
		КонецЕсли; 
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат ВРег(Значение);
		
	ИначеЕсли Тип = Тип("Булево") Тогда       
		
		Если Значение Тогда
			Возврат "1";
		Иначе
			Возврат "0";	
		КонецЕсли; 
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		Возврат ДатаВремяВФорматXMLИз1СМТ(Значение);
		
	ИначеЕсли Тип = Тип("СписокЗначений") Тогда 
		
		Возврат XMLСтрока(СписокЗначенийВСтрокуМТ20(Значение));
		
	ИначеЕсли Тип = Тип("Цвет") Тогда
		
		Возврат ЦветВСтроку(Значение);
		
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		
		Возврат "";
		
	Иначе // тип Справочник или Документ
		Попытка
			Возврат ВРег(XMLСтрока(Значение.Ссылка));
		Исключение
			Если Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
				Возврат ВРег(XMLСтрока(Значение));
			КонецЕсли;
			Возврат "";
		КонецПопытки;
		
	КонецЕсли;
		
КонецФункции

Функция ЗначениеИзСтрокиXML(Значение, Тип)

	Если Тип = Тип("Строка") Тогда
		
		Возврат Значение;
		
	ИначеЕсли Тип = Тип("Число") Тогда
		
		Возврат ?(ЗначениеЗаполнено(Значение), Число(Значение), 0);
		
	ИначеЕсли Тип = Тип("Дата") Тогда
		
		Возврат ДатаВремяXMLВФормат1С(Значение);
		
	ИначеЕсли Тип = Тип("Булево") Тогда
		
		Возврат ?(ЗначениеЗаполнено(Значение), Булево(Число(Значение)), Ложь);
		
	ИначеЕсли Тип = Тип("Цвет") Тогда
		
		Возврат ЦветИзСтроки(Значение);
		
	ИначеЕсли Тип = Тип("УникальныйИдентификатор") Тогда
		
		Возврат Новый УникальныйИдентификатор(Значение);
		
	Иначе 
		
		Возврат Значение;
		
	КонецЕсли;
	
КонецФункции

// Выполняет конвертирование координат из 1С в МТ 
Функция КоординатаКонвертироватьИз1СВМТ(Знач Координата)
	
	Если ЗначениеЗаполнено(Координата) Тогда
		Если Не ТипЗнч(Координата) = Тип("Число") Тогда
			Координата = ЗначениеВЧисло(Координата);
		КонецЕсли;	
		Координата = Окр(Координата, 4);
	КонецЕсли;
	
	Возврат Координата
	
КонецФункции

// Удаляет символ из строки
//
// Параметры:
//	Строка 		   - Строка - исходная строка
//	УдаляемыйНомер - Число - номер удаляемого символа
//
Процедура СтрУдалить(Строка, УдаляемыйНомер)
	
	Строка =  Лев(Строка, УдаляемыйНомер - 1) + Прав(Строка, СтрДлина(Строка) - УдаляемыйНомер);
	
КонецПроцедуры 

// Удаляет лишние скобки (указатели на идентификатор поля), используемые при текстовом представлении
//
// Параметры:
//	 СтрМаркировка - Строка - исходный код маркировки
// Возвращаемое значение:
//	 Строка - подготовленный код маркировки для выгрузки в МТ.
//
//@skip-check module-unused-method
Функция ПодготовитьКодМаркировки(СтрМаркировка)
	
	// Возвращаем исходную строку, если не нашли парные скобки
	//@skip-check use-non-recommended-method
	Если Найти(СтрМаркировка, "(") = 0 И Найти(СтрМаркировка, ")") = 0 Тогда
		Возврат СтрМаркировка;
	КонецЕсли;	  
	
	// Массив парных скобок
	МСкобки  = новый Массив;
	
	Длина = СтрДлина(СтрМаркировка);
	Счетчик 			= 1;
	ТекПозОткрСкобки    = 0;
	ТекПозЗакрСкобки    = 0;
	ФлНайденаОткрСкобка = Ложь;
	Для Cч = 1 По Длина Цикл
		Если Сред(СтрМаркировка, Счетчик, 1) = "(" Тогда    
			ТекПозОткрСкобки = Счетчик; // Находим открывающуюся скобку
			ФлНайденаОткрСкобка = Истина;
		ИначеЕсли Сред(СтрМаркировка, Счетчик, 1) = ")" И ФлНайденаОткрСкобка Тогда    
			ТекПозЗакрСкобки = Счетчик;  // Находим закрывающуюся скобку  
			МСкобки.Добавить(Новый Структура("Открывающаяся, Закрывающаяся", ТекПозОткрСкобки,  ТекПозЗакрСкобки));
			ФлНайденаОткрСкобка = Ложь;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
		
	// Удаляем найденные парные скобки из строки
	ТекКоличествоСкобок = МСкобки.Количество() - 1;
	Пока ТекКоличествоСкобок >= 0 Цикл
		СтррСкобки = МСкобки[ТекКоличествоСкобок]; 	
		СтрУдалить(СтрМаркировка, СтррСкобки.Закрывающаяся); // Закрывающаяся скобка
		СтрУдалить(СтрМаркировка, СтррСкобки.Открывающаяся); // Открывающаяся скобка
		ТекКоличествоСкобок = ТекКоличествоСкобок - 1;
	КонецЦикла;
		
	Возврат СтрМаркировка;
	
КонецФункции // ПодготовитьКодМаркировки()

Функция СформированныйМакетКомпоновкиДанных(Отбор, ТекстЗапроса)

	СхемаКомпоновки = СхемаКомпоновкиДанныхДляОбъекта(ТекстЗапроса);
	НастройкиКомпоновки = КомпоновщикНастроекАгента(СхемаКомпоновки);
	Если ТипЗнч(Отбор) <> Тип("Массив")  Тогда
		ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЗаполнитьЗначенияСвойств(ЭлементОтбора, Отбор);
	Иначе	
		 Для каждого Элемент Из Отбор Цикл
			ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, Элемент);
		 КонецЦикла; 
	КонецЕсли; 
	
	МакетКомпоновки = КомпоновкаДанныхСервер.ПолучитьМакетКомпоновки(СхемаКомпоновки, НастройкиКомпоновки);

	Возврат МакетКомпоновки;

КонецФункции 

#Область ВыборкиДанныхПоСправочникам

Функция ДанныеПоПартнерамДляВыгрузки(МенеджерВТ)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПартнеров.Партнер КАК Партнер,
	               |	СтатусыПартнеров.Статус КАК Статус
	               |ПОМЕСТИТЬ СтатусыПартнеров
	               |ИЗ
	               |	&СтатусыПартнеров КАК СтатусыПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СпрШирота.Ссылка КАК Партнер,
	               |	СпрШирота.Значение КАК Широта
	               |ПОМЕСТИТЬ ВТ_СпрШирота
	               |ИЗ
	               |	ВТ_Партнеры КАК ВТ_Партнеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК СпрШирота
	               |		ПО ВТ_Партнеры.Ссылка = СпрШирота.Ссылка
	               |ГДЕ
	               |	СпрШирота.Свойство = &СвойствоШирота
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СпрДолгота.Ссылка КАК Партнер,
	               |	СпрДолгота.Значение КАК Долгота
	               |ПОМЕСТИТЬ ВТ_СпрДолгота
	               |ИЗ
	               |	ВТ_Партнеры КАК ВТ_Партнеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.ДополнительныеРеквизиты КАК СпрДолгота
	               |		ПО ВТ_Партнеры.Ссылка = СпрДолгота.Ссылка
	               |ГДЕ
	               |	СпрДолгота.Свойство = &СвойствоДолгота
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Партнеры.Ссылка КАК Партнер,
	               |	ЕСТЬNULL(СпрШирота.Широта, 0) КАК Широта,
	               |	ЕСТЬNULL(СпрДолгота.Долгота, 0) КАК Долгота
	               |ПОМЕСТИТЬ ВТ_Координаты
	               |ИЗ
	               |	ВТ_Партнеры КАК ВТ_Партнеры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпрШирота КАК СпрШирота
	               |		ПО ВТ_Партнеры.Ссылка = СпрШирота.Партнер
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СпрДолгота КАК СпрДолгота
	               |		ПО ВТ_Партнеры.Ссылка = СпрДолгота.Партнер
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_СпрШирота
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_СпрДолгота";

	Запрос.УстановитьПараметр("СтатусыПартнеров",	СтатусыПартнеровИзНастроек());
	Запрос.УстановитьПараметр("СвойствоШирота",  	ДополнительноеСвойствоПоНаименованию(ИмяСвойстваШиротаПартнер()));
	Запрос.УстановитьПараметр("СвойствоДолгота", 	ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДолготаПартнер()));

	Запрос.Выполнить();
	
	Если ВыгружатьПерсональныеЦены() ИЛИ ИспользоватьСоглашения() Тогда
		// ВЫГРУЖАТЬ Сегменты
		
		МенеджерВТСегментыПартнеров(МенеджерВТ);
		
		Если ВыгружатьПерсональныеЦены() Тогда 
			//ИСПОЛЬЗУЮТСЯ персональные цены
			// нужно выгружать сегменты партнеров, используемых в типовых соглашениях
			// Заранее для каждого партнера указываем признак использования персональных цен, т.к. персональные цены могут быть в типовом договоре, 
			// а типовой договор может быть закреплен за сегментом, который принадлежит нескольким или всем партнерам (в т.ч. и когда нет сегментов вообще).
			
			МенеджерВТПерсональныеЦеныТоваров(МенеджерВТ);
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	ВТ_Партнеры.Ссылка КАК Ссылка,
			               |	СтатусыПартнеров.Статус КАК Статус,
			               |	ИСТИНА КАК ИспользоватьПерсональныеЦены,
			               |	регПартнерыСегмента.Сегмент КАК Сегмент,
						   |	ВТ_Координаты.Широта,
						   |	ВТ_Координаты.Долгота
			               |ИЗ
			               |	ВТ_Партнеры КАК ВТ_Партнеры
			               |		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПартнеров КАК СтатусыПартнеров
			               |		ПО ВТ_Партнеры.Ссылка = СтатусыПартнеров.Партнер
						   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СегментыПартнеров КАК регПартнерыСегмента
			               |		ПО регПартнерыСегмента.Партнер = ВТ_Партнеры.Ссылка	
						   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Координаты КАК ВТ_Координаты
			               |		ПО ВТ_Партнеры.Ссылка = ВТ_Координаты.Партнер
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ВТ_Партнеры.Ссылка.Наименование,
			               |	ВТ_Партнеры.Ссылка,
			               |	регПартнерыСегмента.Сегмент";
			
		ИначеЕсли ИспользоватьСоглашения() Тогда // НЕ ИСПОЛЬЗУЮТСЯ персональные цены. Нужно выгружать сегменты партнеров, используемых в типовых соглашениях
			Запрос.Текст = "ВЫБРАТЬ
			               |	ВТ_Партнеры.Ссылка КАК Ссылка,
			               |	СтатусыПартнеров.Статус КАК Статус,
			               |	ЛОЖЬ КАК ИспользоватьПерсональныеЦены,
			               |	регПартнерыСегмента.Сегмент КАК Сегмент,
			               |	ВТ_Координаты.Широта КАК Широта,
			               |	ВТ_Координаты.Долгота КАК Долгота
			               |ИЗ
			               |	ВТ_Партнеры КАК ВТ_Партнеры
			               |		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПартнеров КАК СтатусыПартнеров
			               |		ПО ВТ_Партнеры.Ссылка = СтатусыПартнеров.Партнер
						   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СегментыПартнеров КАК регПартнерыСегмента
			               |		ПО регПартнерыСегмента.Партнер = ВТ_Партнеры.Ссылка	
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Координаты КАК ВТ_Координаты
			               |		ПО ВТ_Партнеры.Ссылка = ВТ_Координаты.Партнер
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	ВТ_Партнеры.Ссылка.Наименование,
			               |	ВТ_Партнеры.Ссылка,
			               |	регПартнерыСегмента.Сегмент";
		КонецЕсли;
		
	Иначе 
		// НЕ ВЫГРУЖАТЬ Сегменты
		// НЕ ИСПОЛЬЗУЮТСЯ персональные цены. Не нужно выгружать сегменты партнеров.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_Партнеры.Ссылка КАК Ссылка,
		               |	СтатусыПартнеров.Статус КАК Статус,
		               |	ЛОЖЬ КАК ИспользоватьПерсональныеЦены,
					   |	ВТ_Координаты.Широта,
					   |	ВТ_Координаты.Долгота
		               |ИЗ
		               |	ВТ_Партнеры КАК ВТ_Партнеры
		               |		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПартнеров КАК СтатусыПартнеров
		               |		ПО ВТ_Партнеры.Ссылка = СтатусыПартнеров.Партнер
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Координаты КАК ВТ_Координаты
		               |		ПО ВТ_Партнеры.Ссылка = ВТ_Координаты.Партнер
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВТ_Партнеры.Ссылка.Наименование";
		
	КонецЕсли; 
	
	Результат = Запрос.Выполнить();
	
	Запрос.Текст = "Уничтожить ВТ_Координаты";
	Запрос.Выполнить();

	Возврат Результат;
КонецФункции 

// sk_230703 MOD-3451 
//
Функция ДанныеПоКонтрагентамДляВыгрузки(МенеджерВТ)

	Если ГКонфигурация = "УТ_UA" Тогда
		ИНН  = "СпрКонтрагенты.ИННПлательщикаНДС";
		КПП  = """""";
		ОКПО = """""";
	иначе
		ИНН  = "СпрКонтрагенты.ИНН";
		КПП  = "СпрКонтрагенты.КПП";
		ОКПО = "СпрКонтрагенты.КодПоОКПО";
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	СпрКонтрагенты.Ссылка КАК Контрагент
	    |ПОМЕСТИТЬ ВТ_КонтрагентыДляВыгрузки
	    |ИЗ
	    |	ВТ_Партнеры КАК ВТ_Партнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
		|		ПО ВТ_Партнеры.Ссылка = СпрКонтрагенты.Партнер 
		|
		|ГДЕ
		|	Не СпрКонтрагенты.ПометкаУдаления
	    |
		|ИНДЕКСИРОВАТЬ ПО
	    |	СпрКонтрагенты.Ссылка
		|;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
	    |	МАКСИМУМ(СпрБанковскиеСчетаКонтрагентов.НомерСчета) КАК НомерСчета,
	    |	СпрБанковскиеСчетаКонтрагентов.Владелец КАК Контрагент
	    |ПОМЕСТИТЬ ВТ_БанковскиеСчетаКонтрагентов
	    |ИЗ 
		|	ВТ_КонтрагентыДляВыгрузки КАК ВТ_КонтрагентыДляВыгрузки
	    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК СпрБанковскиеСчетаКонтрагентов 
		|		ПО ВТ_КонтрагентыДляВыгрузки.Контрагент = СпрБанковскиеСчетаКонтрагентов.Владелец  
	    |ГДЕ
	    |	НЕ СпрБанковскиеСчетаКонтрагентов.Закрыт
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	СпрБанковскиеСчетаКонтрагентов.Владелец 
		|
		|ИНДЕКСИРОВАТЬ ПО
	    |	СпрБанковскиеСчетаКонтрагентов.Владелец
		|;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрКонтрагенты.Ссылка КАК Ссылка,
		|	СпрКонтрагенты.Наименование КАК Наименование,
		|	СпрКонтрагенты.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	СпрКонтрагенты.Партнер КАК Партнер,
		|	[ИНН] КАК ИНН,
		|   [КПП] КАК КПП,
		|   СпрКонтрагенты.ГоловнойКонтрагент,
		|	СпрКонтрагенты.НаименованиеПолное КАК НаименованиеПолное,
		|	[ОКПО] КАК КодПоОКПО,
		|	ЕСТЬNULL(ВТ_БанковскиеСчетаКонтрагентов.НомерСчета, """") КАК НомерСчета 
		|ИЗ
		|	ВТ_КонтрагентыДляВыгрузки КАК ВТ_КонтрагентыДляВыгрузки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СпрКонтрагенты
		|		ПО ВТ_КонтрагентыДляВыгрузки.Контрагент = СпрКонтрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчетаКонтрагентов КАК ВТ_БанковскиеСчетаКонтрагентов
		|		ПО СпрКонтрагенты.Ссылка = ВТ_БанковскиеСчетаКонтрагентов.Контрагент";
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИНН]",  ИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[КПП]",  КПП);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОКПО]", ОКПО);     
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_КонтрагентыДляВыгрузки";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_БанковскиеСчетаКонтрагентов";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ; 
	
	Результат = Запрос.Выполнить();  

	Возврат Результат.Выбрать();
	
КонецФункции 

// sk_230703 MOD-3451 
// ДанныеПоКонтрагентамДляВыгрузки()
//
//Функция ДанныеПоКонтрагентамДляВыгрузки_OLD(МенеджерВТ)
//
//	Если ГКонфигурация = "УТ_UA" Тогда
//		ИНН  = "Контрагенты.ИННПлательщикаНДС";
//		КПП  = """""";
//		ОКПО = """""";
//	иначе
//		ИНН  = "Контрагенты.ИНН";
//		КПП  = "Контрагенты.КПП";
//		ОКПО = "Контрагенты.КодПоОКПО";
//	КонецЕсли;
//	
//	ТекстЗапроса = 
//		"ВЫБРАТЬ
//		|	Контрагенты.Ссылка КАК Ссылка,
//		|	Контрагенты.Наименование КАК Наименование,
//		|	Контрагенты.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
//		|	Контрагенты.Партнер КАК Партнер,
//		|	[ИНН] КАК ИНН,
//		|   [КПП] КАК КПП,
//		|   Контрагенты.ГоловнойКонтрагент,
//		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
//		|	[ОКПО] КАК КодПоОКПО
//		|ИЗ
//		|	ВТ_Партнеры КАК ВТ_Партнеры
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
//		|		ПО ВТ_Партнеры.Ссылка = Контрагенты.Партнер
//		|ГДЕ
//		|	Не Контрагенты.ПометкаУдаления";
//			
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИНН]",  ИНН);
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[КПП]",  КПП);
//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОКПО]", ОКПО);
//		
//	Запрос = Новый Запрос(ТекстЗапроса);
//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
//
//	Возврат Запрос.Выполнить().Выбрать();;
//	
//КонецФункции

Функция ДанныеПоКонтактнымЛицамПартнеровВыгрузки(МенеджерВТ)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка,
	               |	КонтактныеЛицаПартнеров.Владелец КАК Партнер,
	               |	КонтактныеЛицаПартнеров.Наименование КАК Наименование,
	               |	КонтактныеЛицаПартнеров.Комментарий КАК Комментарий,
	               |	КонтактныеЛицаПартнеров.ДатаРождения КАК ДатаРождения
	               |ИЗ
	               |	ВТ_Партнеры КАК ВТ_Партнеры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |		ПО ВТ_Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции 

Функция ДанныеПоКонтактамПартнеровИКонтактныхЛицВыгрузки(МенеджерВТ)
	
	Текстзапроса =
	"ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	NULL КАК КонтактноеЛицо,
	|	NULL КАК Контрагент,
	|	ПартнерыКонтактнаяИнформация.Тип,
	|	ПартнерыКонтактнаяИнформация.Вид,
	|	ПартнерыКонтактнаяИнформация.Представление
	|ПОМЕСТИТЬ КИПартнеров
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ПО ВТ_Партнеры.Ссылка = ПартнерыКонтактнаяИнформация.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	NULL,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|		ПО ВТ_Партнеры.Ссылка = КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	NULL,
	|	КонтрагентыКонтактнаяИнформация.Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Тип,
	|	КонтрагентыКонтактнаяИнформация.Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
	|			ПО (ВТ_Партнеры.Ссылка = Контрагенты.Партнер)
	|		ПО КонтрагентыКонтактнаяИнформация.Ссылка = Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КИПартнеров.Партнер, """") КАК Партнер,
	|	ЕСТЬNULL(КИПартнеров.КонтактноеЛицо, """") КАК КонтактноеЛицо,
	|	ЕСТЬNULL(КИПартнеров.Контрагент, """") КАК Контрагент,
	|	КИПартнеров.Тип,
	|	КИПартнеров.Вид,
	|	КИПартнеров.Представление
	|ИЗ
	|	КИПартнеров КАК КИПартнеров";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();
	
КонецФункции

//ВТ_Остатки
//	Номенклатура    - Спр
//	Характеристика  - Спр
//	Склад           - Спр
//	Остаток			- Число
//
//ВТ_КурсыВалют	
//	КурсКратный		- Число
//	Валюта	        - Спр
//
Процедура МенеджерВТНоменклатура(МенеджерВТ) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_НоменклатураОстатки.Номенклатура КАК Номенклатура,
	               |	ВТ_НоменклатураОстатки.Характеристика КАК Характеристика
	               |ПОМЕСТИТЬ ВТ_НоменклатураХарактеристика
	               |ИЗ
	               |	ВТ_Остатки КАК ВТ_НоменклатураОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_НоменклатураОстатки.Номенклатура,
	               |	ВТ_НоменклатураОстатки.Характеристика
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатураХарактеристика.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_Номенклатура
	               |ИЗ
	               |	ВТ_НоменклатураХарактеристика КАК ВТ_НоменклатураХарактеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_НоменклатураХарактеристика.Номенклатура
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |";
	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();
	
	Если ВыгружатьХарактеристикиНоменклатуры() Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_НоменклатураХарактеристика.Характеристика КАК Характеристика,
		               |	ВТ_НоменклатураХарактеристика.Номенклатура КАК Номенклатура
		               |ПОМЕСТИТЬ ВТ_ХарактеристикиНоменклатуры
		               |ИЗ
		               |	ВТ_НоменклатураХарактеристика КАК ВТ_НоменклатураХарактеристика
		               |ГДЕ
		               |	ВТ_НоменклатураХарактеристика.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяССылка)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_НоменклатураХарактеристика.Характеристика,
		               |	ВТ_НоменклатураХарактеристика.Номенклатура
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Характеристика,
		               |	Номенклатура";
		
		Запрос.Выполнить();		
	КонецЕсли;
	
КонеЦПроцедуры

Процедура МенеджерВТЦеныНоменклатуры(МенеджерВТ)
	
	ВалютаУчета	= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	Если ПоколениеКонфигурации("<УТ_11.2") ИЛИ ГКонфигурация = "УТ_UA"  Тогда
		КоэффициентУпаковки = "ЕСТЬNULL(СпрУпаковкиЦеныНоменклатуры.Коэффициент, 1)";
	Иначе 
		КоэффициентУпаковки = "ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиНоменклатуры, 1)";
		
		КоэффициентУпаковки = СтрЗаменить(КоэффициентУпаковки,
			"&ТекстЗапросаКоэффициентУпаковкиНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СпрУпаковки",
			"СпрНоменклатура"));
		КоэффициентУпаковки = СтрЗаменить(КоэффициентУпаковки,
			"&ТекстЗапросаКоэффициентУпаковкиЦены",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СпрУпаковкиЦеныНоменклатуры",
			"СпрНоменклатура"));
	КонецЕсли;
	
	СтррЛитералы = Новый Структура("Соединение");
	Если ПоколениеКонфигурации("<УТ_11.2") ИЛИ ГКонфигурация = "УТ_UA"  Тогда
		СтррЛитералы.Соединение = "				   
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковкиЦеныНоменклатуры
			|		ПО (ВТ_ЦеныНоменклатуры.Упаковка = СпрУпаковкиЦеныНоменклатуры.Ссылка)"; 
	Иначе		
		СтррЛитералы.Соединение = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковкиЦеныНоменклатуры
			|		ПО (ВТ_ЦеныНоменклатуры.Упаковка = СпрУпаковкиЦеныНоменклатуры.Ссылка) 
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО	ВТ_ЦеныНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
			|		ПО	СпрНоменклатура.ЕдиницаИзмерения = СпрУпаковки.Ссылка"; 
	КонецЕсли;  		
		
	Запрос = Новый Запрос; 
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;  
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());   

	Если ПоколениеКонфигурации(">=УТ_11.5.6") И ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда 		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_НоменклатураХарактеристика.Номенклатура КАК Номенклатура,
		               |	ВТ_НоменклатураХарактеристика.Характеристика КАК Характеристика,
		               |	ВЫБОР
		               |		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		               |			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		               |		ИНАЧЕ ЕСТЬNULL(СпрХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка))
		               |	КОНЕЦ КАК ХарактеристикаЦО
		               |ПОМЕСТИТЬ ВТ_НоменклатураХарактеристикаЦО
		               |ИЗ
		               |	ВТ_НоменклатураХарактеристика КАК ВТ_НоменклатураХарактеристика
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		               |		ПО ВТ_НоменклатураХарактеристика.Номенклатура = СпрНоменклатура.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		               |		ПО (ВидыНоменклатуры.Ссылка = СпрНоменклатура.ВидНоменклатуры)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
		               |		ПО ВТ_НоменклатураХарактеристика.Характеристика = СпрХарактеристикиНоменклатуры.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЦеныНоменклатуры25.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатуры25.ХарактеристикаЦО КАК ХарактеристикаЦО,
		               |	ЦеныНоменклатуры25.ВидЦены КАК ВидЦены,
		               |	ЦеныНоменклатуры25.Цена КАК Цена,
		               |	ЦеныНоменклатуры25.Валюта КАК Валюта,
		               |	ЦеныНоменклатуры25.Упаковка КАК Упаковка
		               |ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры25
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		               |			&ТекущаяДата,
		               |			(Номенклатура, ХарактеристикаЦО) В
		               |					(ВЫБРАТЬ
		               |						ВТ_НоменклатураХарактеристикаЦО.Номенклатура,
		               |						ВТ_НоменклатураХарактеристикаЦО.ХарактеристикаЦО
		               |					ИЗ
		               |						ВТ_НоменклатураХарактеристикаЦО КАК ВТ_НоменклатураХарактеристикаЦО)
		               |				И ВидЦены В
		               |					(ВЫБРАТЬ
		               |						ВТ_ВидыЦен.Ссылка
		               |					ИЗ
		               |						ВТ_ВидыЦен)) КАК ЦеныНоменклатуры25
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ЦеныНоменклатуры25.Номенклатура,
		               |	ЦеныНоменклатуры25.ХарактеристикаЦО
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ЦеныНоменклатуры25.Номенклатура КАК Номенклатура,
		               |	ЕСТЬNULL(ВТ_НоменклатураХарактеристикаЦО.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		               |	ВТ_ЦеныНоменклатуры25.ВидЦены КАК ВидЦены,
		               |	ВТ_ЦеныНоменклатуры25.Цена КАК Цена,
		               |	ВТ_ЦеныНоменклатуры25.Валюта КАК Валюта,
		               |	ВТ_ЦеныНоменклатуры25.Упаковка КАК Упаковка
		               |ПОМЕСТИТЬ ВТ_ЦеныНоменклатурыТекущие
		               |ИЗ
		               |	ВТ_ЦеныНоменклатуры25 КАК ВТ_ЦеныНоменклатуры25
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураХарактеристикаЦО КАК ВТ_НоменклатураХарактеристикаЦО
		               |		ПО ВТ_ЦеныНоменклатуры25.Номенклатура = ВТ_НоменклатураХарактеристикаЦО.Номенклатура
		               |			И ВТ_ЦеныНоменклатуры25.ХарактеристикаЦО = ВТ_НоменклатураХарактеристикаЦО.ХарактеристикаЦО
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ЦеныНоменклатурыТекущие.Номенклатура КАК Номенклатура,
		               |	ВТ_ЦеныНоменклатурыТекущие.Характеристика КАК Характеристика,
		               |	ВТ_ЦеныНоменклатурыТекущие.ВидЦены КАК ВидЦены,
		               |	МИНИМУМ(ВТ_ЦеныНоменклатурыТекущие.Упаковка) КАК Упаковка
		               |ПОМЕСТИТЬ ВТ_ЦеныНоменклатурыВидЦеныУпаковка
		               |ИЗ
		               |	ВТ_ЦеныНоменклатурыТекущие КАК ВТ_ЦеныНоменклатурыТекущие
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ЦеныНоменклатурыТекущие.Номенклатура,
		               |	ВТ_ЦеныНоменклатурыТекущие.Характеристика,
		               |	ВТ_ЦеныНоменклатурыТекущие.ВидЦены
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика,
		               |	ВидЦены,
		               |	Упаковка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ЦеныНоменклатурыТекущие.Номенклатура КАК Номенклатура,
		               |	ВТ_ЦеныНоменклатурыТекущие.Характеристика КАК Характеристика,
		               |	ВТ_ЦеныНоменклатурыТекущие.ВидЦены КАК ВидЦены,
		               |	ВТ_ЦеныНоменклатурыТекущие.Цена КАК Цена,
		               |	ВТ_ЦеныНоменклатурыТекущие.Валюта КАК Валюта,
		               |	ВТ_ЦеныНоменклатурыТекущие.Упаковка КАК Упаковка
		               |ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
		               |ИЗ
		               |	ВТ_ЦеныНоменклатурыТекущие КАК ВТ_ЦеныНоменклатурыТекущие
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЦеныНоменклатурыВидЦеныУпаковка КАК ВТ_ЦеныНоменклатурыВидЦеныУпаковка
		               |		ПО ВТ_ЦеныНоменклатурыТекущие.Номенклатура = ВТ_ЦеныНоменклатурыВидЦеныУпаковка.Номенклатура
		               |			И ВТ_ЦеныНоменклатурыТекущие.Характеристика = ВТ_ЦеныНоменклатурыВидЦеныУпаковка.Характеристика
		               |			И ВТ_ЦеныНоменклатурыТекущие.ВидЦены = ВТ_ЦеныНоменклатурыВидЦеныУпаковка.ВидЦены
		               |			И ВТ_ЦеныНоменклатурыТекущие.Упаковка = ВТ_ЦеныНоменклатурыВидЦеныУпаковка.Упаковка
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика,
		               |	ВидЦены,
		               |	Валюта";
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_НоменклатураХарактеристикаЦО";
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ЦеныНоменклатуры25";   
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ЦеныНоменклатурыТекущие";  
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ЦеныНоменклатурыВидЦеныУпаковка";  
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		               |	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		               |	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
		               |	ЦеныНоменклатуры.Цена КАК Цена,
		               |	ЦеныНоменклатуры.Валюта КАК Валюта,
		               |	ЦеныНоменклатуры.Упаковка КАК Упаковка
		               |ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
		               |ИЗ
		               |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		               |			&ТекущаяДата,
		               |			(Номенклатура, Характеристика) В
		               |					(ВЫБРАТЬ
		               |						ВТ_НоменклатураХарактеристика.Номенклатура,
		               |						ВТ_НоменклатураХарактеристика.Характеристика
		               |					ИЗ
		               |						ВТ_НоменклатураХарактеристика КАК ВТ_НоменклатураХарактеристика)
		               |				И ВидЦены В
		               |					(ВЫБРАТЬ
		               |						ВТ_ВидыЦен.Ссылка
		               |					ИЗ
		               |						ВТ_ВидыЦен)) КАК ЦеныНоменклатуры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ЦеныНоменклатуры.Номенклатура,
		               |	ЦеныНоменклатуры.Характеристика,
					   |	ЦеныНоменклатуры.ВидЦены,
		               |	ЦеныНоменклатуры.Валюта"; 
	КонецЕсли;                                          
	Запрос.Выполнить();   
		
	Запрос.Текст = "ВЫБРАТЬ
					   |	ВТ_ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
					   |	ВТ_ЦеныНоменклатуры.Характеристика КАК Характеристика,
					   |	ВТ_ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
					   |	ВЫРАЗИТЬ(ЕСТЬNULL(ВТ_ЦеныНоменклатуры.Цена, 0) / &ЛитералКоэффициентУпаковки * ВЫБОР
					   |			КОГДА &Валюта <> ВТ_ЦеныНоменклатуры.Валюта
					   |				ТОГДА ВТ_КурсыВалют.КурсКратный
					   |			ИНАЧЕ 1
					   |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена  
					   |ПОМЕСТИТЬ ВТ_Цены
					   |ИЗ
					   |	ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыЦен КАК ВТ_ВидыЦен
					   |		ПО (ВТ_ЦеныНоменклатуры.ВидЦены = ВТ_ВидыЦен.Ссылка)
					   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК ВТ_КурсыВалют
					   |		ПО (ВТ_КурсыВалют.Валюта = ВТ_ЦеныНоменклатуры.Валюта)
					   |	[Соединение]
					   |
					   |ИНДЕКСИРОВАТЬ ПО
					   |	Номенклатура,
					   |	Характеристика,
					   |	ВидЦены";  
				 	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЛитералКоэффициентУпаковки", КоэффициентУпаковки);
	ЗаменитьЛитералы(Запрос.Текст, СтррЛитералы); 
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_НоменклатураХарактеристика";
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ЦеныНоменклатуры";  
	
	Запрос.УстановитьПараметр("Валюта",	ВалютаУчета);	
	Запрос.Выполнить(); 

КонецПроцедуры

Функция ДанныеПоНоменклатуре(МенеджерВТ)
	
	КонстантаИспользоватьУпаковкиНоменклатуры = КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры");
	ВыгружатьХарактеристики 				  = ВыгружатьХарактеристикиНоменклатуры();

	Если ПоколениеКонфигурации("<УТ_11.2") Тогда
		Весовой = "ВЫБОР КОГДА Номенклатура.Вес > 0 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";	
	Иначе
		Весовой = "СпрНоменклатура.ВесИспользовать";
	КонецЕсли;
	
	Если ИспользоватьМаркировки() Тогда
		Если ПоколениеКонфигурации(">=УТ_11.4.13.99") Тогда 
			СтрМолочнаяПродукция = "
			|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)	
			|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)";
		Иначе	
			СтрМолочнаяПродукция = "
			|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукция)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукция)";
		КонецЕсли;
		
		Если ПоколениеКонфигурации(">=УТ_11.4.13.71") Тогда
			СтрАльтернативныйТабак = "
			|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)"; 
			СтрУпакованнаяВода = "
			|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)";
		Иначе
			СтрАльтернативныйТабак = "";
			СтрУпакованнаяВода = "";
		КонецЕсли;    
		
		//(( sk_220412 MOD-3101  
		Если (ПоколениеКонфигурации("=УТ_11.4") И ПоколениеКонфигурации(">=УТ_11.4.14.164")) 
			Или (ПоколениеКонфигурации("=УТ_11.5") И ПоколениеКонфигурации(">=УТ_11.5.7.367")) Тогда
			СтрНикотиносодержащаяПродукция = "
			|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция)
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция)";
		Иначе
			СтрНикотиносодержащаяПродукция = "";
		КонецЕсли;  
		//)) sk_220412    
				
		СтрВидПродукцииИС = "ВЫБОР
		|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
		|		&СтрЗаменитьАльтернативныйТабак   
		|		&СтрЗаменитьУпакованнаяВода
		|		&СтрЗаменитьНикотиносодержащаяПродукция
		|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
		|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
		|		&СтрЗаменитьМолочнаяПродукция
		|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
		|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
		|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
		|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
		|		КОГДА СпрНоменклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи) 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
		|	КОНЕЦ";
		СтрВидПродукцииИС = СтрЗаменить(СтрВидПродукцииИС, "&СтрЗаменитьМолочнаяПродукция",   		  СтрМолочнаяПродукция);
		СтрВидПродукцииИС = СтрЗаменить(СтрВидПродукцииИС, "&СтрЗаменитьАльтернативныйТабак",	      СтрАльтернативныйТабак);
		СтрВидПродукцииИС = СтрЗаменить(СтрВидПродукцииИС, "&СтрЗаменитьНикотиносодержащаяПродукция", СтрНикотиносодержащаяПродукция); // sk_220412 MOD-3102  
		СтрВидПродукцииИС = СтрЗаменить(СтрВидПродукцииИС, "&СтрЗаменитьУпакованнаяВода", 			  СтрУпакованнаяВода); // sk_220412 MOD-3101 
	Иначе
		СтрВидПродукцииИС = """""";
	КонецЕсли;  
	
	//(( sk_230626 MOD-3506 
	Если ГКонфигурация = "УТ" Тогда
		ПодакцизныйТовар = "СпрНоменклатура.ПодакцизныйТовар";	
	Иначе
		ПодакцизныйТовар = "ЛОЖЬ";
	КонецЕсли;
	//)) sk_230626
		
	Запрос = Новый Запрос;
	
	//GUID базовой единицы измерения выгружается равным GUID номенклатуры, когда не используются упаковки номенклатуры (см. выгрузку ссылок для единиц измерения)
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	               |	СпрНоменклатура.Родитель КАК Родитель,
	               |	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	СпрНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
	               |	СпрНоменклатура.Наименование КАК Наименование,
	               |	СпрНоменклатура.Код КАК Код,
	               |	СпрНоменклатура.Артикул КАК Артикул,
	               |	СпрНоменклатура.СтавкаНДС КАК СтавкаНДС,
	               |	ВЫБОР
	               |		КОГДА &КонстантаИспользоватьУпаковкиНоменклатуры
	               |			ТОГДА ВЫБОР
	               |					КОГДА СпрНоменклатура.ИспользоватьУпаковки = ЛОЖЬ
	               |							ИЛИ СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	               |						ТОГДА СпрНоменклатура.Ссылка
	               |					ИНАЧЕ НаборыУпаковок.ЕдиницаИзмерения
	               |				КОНЕЦ
				   |		ИНАЧЕ СпрНоменклатура.Ссылка
	               |	КОНЕЦ КАК БазоваяЕдиница,
	               |	ВЫБОР
	               |		КОГДА &КонстантаИспользоватьУпаковкиНоменклатуры
	               |				И СпрНоменклатура.ИспользоватьУпаковки
	               |				И СпрНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	               |			ТОГДА СпрНоменклатура.НаборУпаковок
	               |		ИНАЧЕ """"
	               |	КОНЕЦ КАК НаборУпаковок,
	               |	&СтрЗаменитьВесовой КАК Весовой,
	               |	ВЫБОР
	               |		КОГДА &ВыгружатьХарактеристики И ВидыНоменклатуры.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
				   |			ТОГДА Истина
	               |		ИНАЧЕ Ложь
	               |	КОНЕЦ КАК УчетПоХарактеристикам,
	               |	ВЫБОР
	               |		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЭтоУслуга,
	               |	СпрНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
	               |	СпрНоменклатура.Описание КАК Описание,
	               |	СпрНоменклатура.ФайлКартинки КАК ФайлКартинки,
	               |	СпрНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
				   |	&СтрЗаменитьВидПродукцииИС КАК ВидПродукцииИС,
				   //(( sk_230626 MOD-3506
				   |	&СтрЗаменитьПодакцизныйТовар КАК ПодакцизныйТовар
				   //)) sk_230626
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ВТ_Номенклатура.Номенклатура = СпрНоменклатура.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
	               |		ПО (СпрНоменклатура.НаборУпаковок = НаборыУпаковок.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	               |		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СпрНоменклатура.Наименование,
				   |	СпрНоменклатура.Код,
				   |	СпрНоменклатура.Артикул";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрЗаменитьВесовой", 	   Весовой);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрЗаменитьВидПродукцииИС", СтрВидПродукцииИС);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрЗаменитьПодакцизныйТовар", ПодакцизныйТовар); // sk_230626 MOD-3506
	
	Запрос.УстановитьПараметр("КонстантаИспользоватьУпаковкиНоменклатуры", 	КонстантаИспользоватьУпаковкиНоменклатуры);
	Запрос.УстановитьПараметр("ВыгружатьХарактеристики", 					ВыгружатьХарактеристики);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоОстаткамНоменклатуры(МенеджерВТ)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	               |	ВТ_Склады.Ссылка КАК Склад
	               |ПОМЕСТИТЬ ВТ_НоменклатураСклады
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура,
	               |	ВТ_Склады КАК ВТ_Склады
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_Номенклатура.Номенклатура,
	               |	ВТ_Склады.Ссылка
	               |;
	               |
				   |
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатураСклады.Номенклатура КАК Номенклатура,
	               |	ВТ_НоменклатураСклады.Склад КАК Склад,
	               |	СУММА(ЕСТЬNULL(ВТ_НоменклатураОстатки.Остаток, 0)) КАК Остаток
				   |	ПОМЕСТИТЬ ВТ_НоменклатураСортировка
	               |ИЗ
	               |	ВТ_НоменклатураСклады КАК ВТ_НоменклатураСклады
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_НоменклатураОстатки
	               |		ПО ВТ_НоменклатураСклады.Номенклатура = ВТ_НоменклатураОстатки.Номенклатура
	               |			И ВТ_НоменклатураСклады.Склад = ВТ_НоменклатураОстатки.Склад
				   |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_НоменклатураСклады.Номенклатура,
	               |	ВТ_НоменклатураСклады.Склад
				   |
				   |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Склад
	               |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
	               |	ВТ_НоменклатураСортировка.Номенклатура КАК Номенклатура,
	               |	ВТ_НоменклатураСортировка.Склад КАК Склад,
	               |	ВТ_НоменклатураСортировка.Остаток КАК Остаток
	               |ИЗ
	               |	ВТ_НоменклатураСортировка КАК ВТ_НоменклатураСортировка
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ВТ_СпрНоменклатура
	               |		ПО ВТ_НоменклатураСортировка.Номенклатура = ВТ_СпрНоменклатура.Ссылка
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ВТ_СпрСклады
	               |		ПО ВТ_НоменклатураСортировка.Склад = ВТ_СпрСклады.Ссылка
	               |
				   |УПОРЯДОЧИТЬ ПО
				   |	ВТ_СпрНоменклатура.Наименование,
				   |	ВТ_СпрНоменклатура.Код,
				   |	ВТ_СпрНоменклатура.Артикул,
				   |	ВТ_СпрСклады.Наименование
				   |
	               |ИТОГИ
	               |	СУММА(Остаток)
	               |ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатураСклады; УНИЧТОЖИТЬ ВТ_НоменклатураСортировка";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ ВыгружатьХарактеристикиНоменклатуры() Тогда
		ЗапросВТ = Новый Запрос;
		ЗапросВТ.Текст = "УНИЧТОЖИТЬ ВТ_Остатки";
		ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросВТ.Выполнить();		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоЦенамНоменклатуры(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	               |	ВТ_ВидыЦен.Ссылка КАК ВидЦены
	               |ПОМЕСТИТЬ ВТ_НоменклатураВидЦены
	               |ИЗ
	               |	ВТ_Номенклатура КАК ВТ_Номенклатура,
	               |	ВТ_ВидыЦен КАК ВТ_ВидыЦен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_Номенклатура.Номенклатура,
	               |	ВТ_ВидыЦен.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Цены.Номенклатура КАК Номенклатура,
	               |	ВТ_Цены.ВидЦены КАК ВидЦены,
	               |	МАКСИМУМ(ВТ_Цены.Цена) КАК Цена
	               |ПОМЕСТИТЬ ВТ_НоменклатураЦеныБезХарактеристик
	               |ИЗ
	               |	ВТ_Цены КАК ВТ_Цены
	               |ГДЕ
	               |	ВТ_Цены.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Цены.Номенклатура,
	               |	ВТ_Цены.ВидЦены
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_Цены.Номенклатура,
	               |	ВТ_Цены.ВидЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_НоменклатураВидЦены.Номенклатура КАК Номенклатура,
	               |	ВТ_НоменклатураВидЦены.ВидЦены КАК ВидЦены,
	               |	ЕСТЬNULL(ВТ_НоменклатураЦены.Цена, 0) КАК Цена
	               |ИЗ
	               |	ВТ_НоменклатураВидЦены КАК ВТ_НоменклатураВидЦены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураЦеныБезХарактеристик КАК ВТ_НоменклатураЦены
	               |		ПО ВТ_НоменклатураВидЦены.Номенклатура = ВТ_НоменклатураЦены.Номенклатура
	               |			И ВТ_НоменклатураВидЦены.ВидЦены = ВТ_НоменклатураЦены.ВидЦены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ВТ_НоменклатураВидЦены.Номенклатура = СпрНоменклатура.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК СпрВидыЦен
	               |		ПО ВТ_НоменклатураВидЦены.ВидЦены = СпрВидыЦен.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СпрНоменклатура.Наименование,
	               |	СпрНоменклатура.Код,
	               |	СпрНоменклатура.Артикул,
	               |	СпрВидыЦен.Наименование
	               |ИТОГИ
	               |	СУММА(Цена)
	               |ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатураВидЦены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_НоменклатураЦеныБезХарактеристик";
	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Если НЕ ВыгружатьХарактеристикиНоменклатуры() Тогда
		ЗапросВТ = Новый Запрос;
		ЗапросВТ.Текст = "УНИЧТОЖИТЬ ВТ_Цены";
		ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВТ;
		ЗапросВТ.Выполнить();		
	КонецЕсли;  
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоХарактеристикам(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_ХарактеристикиНоменклатуры.Характеристика КАК Характеристика,
	               |	ВТ_ХарактеристикиНоменклатуры.Номенклатура КАК Номенклатура,
	               |	СпрХарактеристикиНоменклатуры.Наименование КАК Наименование
	               |ИЗ
	               |	ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
	               |		ПО ВТ_ХарактеристикиНоменклатуры.Характеристика = СпрХарактеристикиНоменклатуры.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ВТ_ХарактеристикиНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СпрХарактеристикиНоменклатуры.Наименование,
	               |	СпрНоменклатура.Наименование,
	               |	СпрНоменклатура.Код,
	               |	СпрНоменклатура.Артикул
	               |ИТОГИ ПО
	               |	Номенклатура,
	               |	Характеристика";			   
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	                                                          
	Результат = Запрос.Выполнить();
	
	Возврат Результат;	
КонецФункции

Функция ДанныеПоОстаткамХарактеристикНоменклатуры(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_ХарактеристикиНоменклатуры.Характеристика КАК Характеристика,
	               |	ВТ_ХарактеристикиНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ВТ_Склады.Ссылка КАК Склад
	               |ПОМЕСТИТЬ ВТ_ХарактеристикаСклады
	               |ИЗ
	               |	ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры,
	               |	ВТ_Склады КАК ВТ_Склады
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_ХарактеристикиНоменклатуры.Характеристика,
	               |	ВТ_ХарактеристикиНоменклатуры.Номенклатура,
	               |	ВТ_Склады.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ХарактеристикаСклады.Характеристика КАК Характеристика,
	               |	ВТ_ХарактеристикаСклады.Номенклатура КАК Номенклатура,
	               |	ВТ_ХарактеристикаСклады.Склад КАК Склад,
	               |	ЕСТЬNULL(ВТ_Остатки.Остаток, 0) КАК Остаток
	               |ИЗ
	               |	ВТ_ХарактеристикаСклады КАК ВТ_ХарактеристикаСклады
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	               |		ПО ВТ_ХарактеристикаСклады.Характеристика = ВТ_Остатки.Характеристика
	               |			И ВТ_ХарактеристикаСклады.Номенклатура = ВТ_Остатки.Номенклатура
	               |			И ВТ_ХарактеристикаСклады.Склад = ВТ_Остатки.Склад
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ВТ_СпрХарактеристикиНоменклатуры
	               |		ПО ВТ_ХарактеристикаСклады.Характеристика = ВТ_СпрХарактеристикиНоменклатуры.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК ВТ_СпрСклады
	               |		ПО ВТ_ХарактеристикаСклады.Склад = ВТ_СпрСклады.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ВТ_ХарактеристикаСклады.Номенклатура = СпрНоменклатура.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВТ_СпрХарактеристикиНоменклатуры.Наименование,
	               |	СпрНоменклатура.Наименование,
	               |	СпрНоменклатура.Код,
	               |	СпрНоменклатура.Артикул,
	               |	ВТ_СпрСклады.Наименование
	               |ИТОГИ
	               |	СУММА(Остаток)
	               |ПО
	               |	Номенклатура, 
				   |	Характеристика
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ХарактеристикаСклады
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Остатки";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоЦенамХарактеристик(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_ХарактеристикиНоменклатуры.Характеристика КАК Характеристика,
	               |	ВТ_ХарактеристикиНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ВТ_ВидыЦен.Ссылка КАК ВидЦены
	               |ПОМЕСТИТЬ ВТ_ХарактеристикаВидЦены
	               |ИЗ
	               |	ВТ_ХарактеристикиНоменклатуры КАК ВТ_ХарактеристикиНоменклатуры,
	               |	ВТ_ВидыЦен КАК ВТ_ВидыЦен
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВТ_ХарактеристикиНоменклатуры.Характеристика,
	               |	ВТ_ХарактеристикиНоменклатуры.Номенклатура,
	               |	ВТ_ВидыЦен.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
				   |	ВТ_ХарактеристикаВидЦены.Характеристика КАК Характеристика,
	               |	ВТ_ХарактеристикаВидЦены.Номенклатура КАК Номенклатура,
	               |	ВТ_ХарактеристикаВидЦены.ВидЦены КАК ВидЦены,
	               |	ЕСТЬNULL(ВТ_Цены.Цена, 0) КАК Цена
	               |ИЗ
	               |	ВТ_ХарактеристикаВидЦены КАК ВТ_ХарактеристикаВидЦены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Цены КАК ВТ_Цены
	               |		ПО ВТ_ХарактеристикаВидЦены.Характеристика = ВТ_Цены.Характеристика
	               |			И ВТ_ХарактеристикаВидЦены.Номенклатура = ВТ_Цены.Номенклатура
	               |			И ВТ_ХарактеристикаВидЦены.ВидЦены = ВТ_Цены.ВидЦены
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристикиНоменклатуры
	               |		ПО ВТ_ХарактеристикаВидЦены.Характеристика = СпрХарактеристикиНоменклатуры.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК СпрВидыЦен
	               |		ПО ВТ_ХарактеристикаВидЦены.ВидЦены = СпрВидыЦен.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ВТ_ХарактеристикаВидЦены.Номенклатура = СпрНоменклатура.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	СпрХарактеристикиНоменклатуры.Наименование,
	               |	СпрНоменклатура.Наименование,
	               |	СпрНоменклатура.Код,
	               |	СпрНоменклатура.Артикул,
	               |	СпрВидыЦен.Наименование
	               |ИТОГИ
	               |	СУММА(Цена)
	               |ПО
				   |	Номенклатура,
				   |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Цены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ХарактеристикаВидЦены";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Результат = Запрос.Выполнить();
	
	Если Не (ВыгружатьШтрихКодыТоваров ИЛИ ИспользоватьМаркировки()) Тогда
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ХарактеристикиНоменклатуры";
		Запрос.Выполнить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоЕдиницамИзмеренияВыгрузки(МенеджерВТ)

	//@skip-check structure-consructor-too-many-keys
	СтррЛитералы = Новый Структура("НоменклатураВес,УпаковкиЕдиницыИзмерения,УпаковкиКоэффициент,Упаковки,НоменклатураНаборУпаковок,ИспользоватьУпаковки");
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		
		СтррЛитералы.НоменклатураВес = 
			"ВЫБОР
			|	КОГДА Номенклатура.Ссылка.ВесЗнаменатель > 0
			|		ТОГДА Номенклатура.Ссылка.ВесЧислитель / Номенклатура.Ссылка.ВесЗнаменатель
			|	ИНАЧЕ 0
			|КОНЕЦ";
			
		СтррЛитералы.УпаковкиКоэффициент = 
			"ВЫБОР
			|	КОГДА Упаковки.Знаменатель > 0
			|		ТОГДА Упаковки.Числитель / Упаковки.Знаменатель
			|	ИНАЧЕ 0
			|КОНЕЦ";
		//СтррЛитералы.УпаковкиКоэффициент		= "Упаковки.Числитель / Упаковки.Знаменатель";
		СтррЛитералы.Упаковки					= "УпаковкиЕдиницыИзмерения";
		
	Иначе // УТ 11.1
		
		СтррЛитералы.УпаковкиКоэффициент		= "Упаковки.Коэффициент";
		СтррЛитералы.Упаковки					= "УпаковкиНоменклатуры";
		СтррЛитералы.НоменклатураВес 			= "Номенклатура.Вес";
		СтррЛитералы.УпаковкиЕдиницыИзмерения   = "ЕдиницыИзмерения";
		
	КонецЕсли;
	
	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтррЛитералы.НоменклатураНаборУпаковок  = "И Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)";
		СтррЛитералы.ИспользоватьУпаковки 		= "Номенклатура.ИспользоватьУпаковки = Истина";
	Иначе
		СтррЛитералы.НоменклатураНаборУпаковок  = "";
		СтррЛитералы.ИспользоватьУпаковки 		= "ИСТИНА";
	КонецЕсли;        
	             	
	Запрос = Новый Запрос;
	
	Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.ЕдиницаИзмерения КАК Ссылка,
			|	"""" КАК КодОКЕИ,
			|	СпрЕдиницаИзмерения.Наименование КАК Наименование,
			|	1 КАК Коэффициент,
			|	ВТ_Ассортимент.Ссылка КАК Номенклатура,
			|	[НоменклатураВес] Как Вес,
			|	ЛОЖЬ КАК ЭтоНаборУпаковок,
			|	&ПустойНаборУпаковок КАК ВладелецНаборУпаковок,
			|	Номенклатура.ЕдиницаИзмерения КАК Классификатор,
			|	ИСТИНА КАК ЭтоЕдиницаНоменклатуры
			|ПОМЕСТИТЬ ЕдиницыБезКлассификаторов
			|ИЗ
			|	ВТ_Ассортимент КАК ВТ_Ассортимент
			|	Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|	ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
			|	Левое СОЕДИНЕНИЕ Справочник.[УпаковкиЕдиницыИзмерения] КАК СпрЕдиницаИзмерения
			|	ПО Номенклатура.ЕдиницаИзмерения = СпрЕдиницаИзмерения.Ссылка				
			|ГДЕ
			|	(НЕ Номенклатура.ИспользоватьУпаковки ИЛИ Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры))
			|	И Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)
			|	И СпрЕдиницаИзмерения.ПометкаУдаления = Ложь
			|
			|ОБЪЕДИНИТЬ ВСЕ 
			|
			|ВЫБРАТЬ
			|	Упаковки.Ссылка,
			|	"""",
			|	Упаковки.Наименование,
			|	[УпаковкиКоэффициент],
			|	Упаковки.Владелец,
			|	Упаковки.Вес,
			|	ЛОЖЬ,
			|	&ПустойНаборУпаковок,
			|	Упаковки.ЕдиницаИзмерения,
			|	ЛОЖЬ
			|ИЗ
			|	Справочник.[Упаковки] КАК Упаковки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
			|		ПО Упаковки.Владелец = ВТ_Ассортимент.Ссылка
			|	Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|	ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
			|ГДЕ
			|	Номенклатура.ИспользоватьУпаковки
			|	И Номенклатура.НаборУпаковок = &ИндивидуальныйНаборУпаковок
			|	И Упаковки.ПометкаУдаления = Ложь	
			|
			|ОБЪЕДИНИТЬ ВСЕ 
			|
			|ВЫБРАТЬ
			|	Упаковки.Ссылка,
			|	"""",
			|	Упаковки.Наименование,
			|	[УпаковкиКоэффициент],
			|	&ПустаяНоменклатура,
			|	Упаковки.Вес,
			|	ИСТИНА,
			|	Упаковки.Владелец,
			|	Упаковки.ЕдиницаИзмерения,
			|	ЛОЖЬ
			|ИЗ
			|	ВТ_Ассортимент КАК ВТ_Ассортимент
			|		Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|		ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.[Упаковки] КАК Упаковки 
			|       ПО Упаковки.Владелец = Номенклатура.НаборУпаковок 
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
			|		ПО Упаковки.Владелец = НаборыУпаковок.Ссылка
			|ГДЕ
			|	Номенклатура.ИспользоватьУпаковки
			|	И Номенклатура.НаборУпаковок <> &ИндивидуальныйНаборУпаковок
			|	И Упаковки.ПометкаУдаления = Ложь
			|	И НаборыУпаковок.ПометкаУдаления = Ложь
			|ИНДЕКСИРОВАТЬ ПО
			|	Классификатор";
		
	Иначе // не используются упаковки номенклатуры
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.ЕдиницаИзмерения КАК Ссылка,
			|	"""" КАК КодОКЕИ,
			|	Номенклатура.ЕдиницаИзмерения.Наименование КАК Наименование,
			|	1 КАК Коэффициент,
			|	ВТ_Ассортимент.Ссылка КАК Номенклатура,
			|	[НоменклатураВес] КАК Вес,
			|	ЛОЖЬ КАК ЭтоНаборУпаковок,
			|	&ПустойНаборУпаковок КАК ВладелецНаборУпаковок,
			|	Номенклатура.ЕдиницаИзмерения КАК Классификатор,
			|	ИСТИНА КАК ЭтоЕдиницаНоменклатуры
			|ПОМЕСТИТЬ ЕдиницыБезКлассификаторов
			|ИЗ
			|	ВТ_Ассортимент КАК ВТ_Ассортимент
			|	Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
			|	ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
			|ГДЕ
			|	Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)
			|	И Номенклатура.ЕдиницаИзмерения.ПометкаУдаления = Ложь
			|ИНДЕКСИРОВАТЬ ПО
			|	Классификатор";
		
	КонецЕсли; // ПолучитьЗначениеКонстанты("ИспользоватьУпаковкиНоменклатуры")
	
	Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.ЕдиницаИзмерения КАК Классификатор
		|ПОМЕСТИТЬ ВТ_НаборУпаковокАссортимента
		|ИЗ
		|	ВТ_Ассортимент КАК ВТ_Ассортимент
		|		Левое СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_Ассортимент.Ссылка = Номенклатура.Ссылка
		|ГДЕ
		|	[ИспользоватьУпаковки]
		|	[НоменклатураНаборУпаковок]
		|	И Номенклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.[УпаковкиЕдиницыИзмерения].ПустаяСсылка)
		|ИНДЕКСИРОВАТЬ ПО
		|	Классификатор
		|;
		|
		|////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕдиницыБезКлассификаторов.Ссылка КАК Ссылка,
		|	ЕдиницыБезКлассификаторов.КодОКЕИ КАК КодОКЕИ,
		|	ЕдиницыБезКлассификаторов.Наименование КАК Наименование,
		|	ЕдиницыБезКлассификаторов.Коэффициент КАК Коэффициент,
		|	ЕдиницыБезКлассификаторов.Номенклатура КАК Номенклатура,
		|	ЕдиницыБезКлассификаторов.Вес КАК Вес,
		|	ЕдиницыБезКлассификаторов.ЭтоНаборУпаковок КАК ЭтоНаборУпаковок,
		|	ЕдиницыБезКлассификаторов.ВладелецНаборУпаковок КАК ВладелецНаборУпаковок,
		|	ЕдиницыБезКлассификаторов.Классификатор КАК Классификатор,
		|	ЕдиницыБезКлассификаторов.ЭтоЕдиницаНоменклатуры КАК ЭтоЕдиницаНоменклатуры
		|ИЗ
		|	ЕдиницыБезКлассификаторов КАК ЕдиницыБезКлассификаторов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Классификатор.Ссылка,
		|	Классификатор.Код,
		|	Классификатор.Наименование,
		|	1,
		|	&ПустаяНоменклатура,
		|	0,
		|	ЛОЖЬ,
		|	&ПустойНаборУпаковок,
		|	&ПустойНаборУпаковок,
		|	ЛОЖЬ КАК ЭтоЕдиницаНоменклатуры
		|ИЗ
		|	Справочник.[УпаковкиЕдиницыИзмерения] КАК ТАБ_Классификатор
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЕдиницыБезКлассификаторов КАК ТАБ_ЕдиницыБезКлассификаторов
		|		ПО ТАБ_Классификатор.Ссылка = ТАБ_ЕдиницыБезКлассификаторов.Классификатор
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Классификатор.Ссылка,
		|	Классификатор.Код,
		|	Классификатор.Наименование,
		|	1,
		|	&ПустаяНоменклатура,
		|	0,
		|	ЛОЖЬ,
		|	&ПустойНаборУпаковок,
		|	&ПустойНаборУпаковок,
		|	ЛОЖЬ КАК ЭтоЕдиницаНоменклатуры
		|ИЗ
		|	Справочник.[УпаковкиЕдиницыИзмерения] КАК ТАБ_Классификатор
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НаборУпаковокАссортимента КАК ВТ_НаборУпаковокАссортимента
		|		ПО ТАБ_Классификатор.Ссылка = ВТ_НаборУпаковокАссортимента.Классификатор
		|ГДЕ
		|	ТАБ_Классификатор.ПометкаУдаления = Ложь
		|;
		|
		|////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_НаборУпаковокАссортимента
		|;
		|
		|////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЕдиницыБезКлассификаторов 
		|"; 
		
	ЗаменитьЛитералы(Запрос.Текст, СтррЛитералы);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ПустойНаборУпаковок", Справочники.НаборыУпаковок.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ИндивидуальныйНаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ДанныеПоЕдиницамИзмеренияВыгрузки()

// Возвращает запрос по сегментам соглашений
//
// Параметры:
//  МенеджерВТ - МенеджерВременныхТаблиц - менеджер ВТ
// 
// Возвращаемое значение: 
//  ВыборкаИзРезультатаЗапроса  
//
Функция ДанныеПоСегментамСоглашений(МенеджерВТ)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_СегментыСоглашений.Сегмент КАК Сегмент,
	               |	ВТ_СегментыСоглашений.Соглашение КАК Соглашение
	               |ИЗ
	               |	ВТ_СегментыСоглашений КАК ВТ_СегментыСоглашений
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сегмент
	               |ИТОГИ ПО
	               |	Сегмент";	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ДанныеПоСегментамСоглашений () 

// ВыборкиДанныхПоСправочникам
#КонецОбласти

#Область ВыборкиДанныхПоДокументам           

// sk_220328 MOD-2386 
// Возвращает запрос по документам "ЗаказКлиента"
//
// Параметры:
//  МенеджерВТ - МенеджерВременныхТаблиц - менеджер ВТ
// 
// Возвращаемое значение: 
//  ВыборкаИзРезультатаЗапроса  
//
Функция ДанныеПоДокументамЗаказПокупателя(МенеджерВТ)

	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовЗаказПокупателя());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Если ВыгружатьЗаказыПоПартнерамАгента Тогда // запрос с отбором документов по партнерам торгового агента
		МенеджерВТПартнеров(МенеджерВТ);
	КонецЕсли; 
	Запрос.УстановитьПараметр("Агент", 						 ВыбАгент);
	Запрос.УстановитьПараметр("ДатаНачала", 				 НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
	//@skip-check use-non-recommended-method
	Запрос.УстановитьПараметр("ДатаОкончания", 				 КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ИспользоватьПунктыРазгрузки", ИспользоватьПунктыРазгрузки);
	Запрос.УстановитьПараметр("ИспользоватьАдресаДоставки",  ИспользоватьАдресаДоставки);
	
	Возврат Запрос.Выполнить();
	
КонецФункции  

// sk_220328 MOD-2386 
// ДанныеПоДокументамЗаказПокупателя()
//
//Функция ДанныеПоДокументамЗаказПокупателя_OLD(МенеджерВТ)
//
//	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовЗаказПокупателя_OLD(ВыгружатьЗаказыПоПартнерамАгента));
//	Если ВыгружатьЗаказыПоПартнерамАгента Тогда // запрос с отбором документов по партнерам торгового агента
//		МенеджерВТПартнеров(МенеджерВТ);
//		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
//	КонецЕсли; 
//	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
//	//@skip-check use-non-recommended-method
//	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("ИспользоватьПунктыРазгрузки", ИспользоватьПунктыРазгрузки);
//	Запрос.УстановитьПараметр("ИспользоватьАдресаДоставки", ИспользоватьАдресаДоставки);
//	Запрос.УстановитьПараметр("Агент", ВыбАгент);
//	
//	Возврат Запрос.Выполнить();
//	
//КонецФункции

// sk_220328 MOD-2386 
// Возвращает запрос по документам "РеализацияТоваровУслуг"
//
// Параметры:
//  МенеджерВТ - МенеджерВременныхТаблиц - менеджер ВТ
// 
// Возвращаемое значение: 
//  ВыборкаИзРезультатаЗапроса  
//
Функция ДанныеПоДокументамПродажи(МенеджерВТ)
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовРеализация());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ; 
	Запрос.УстановитьПараметр("Агент", 						 ВыбАгент);
	Запрос.УстановитьПараметр("ДатаНачала", 				 НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
	//@skip-check use-non-recommended-method
	Запрос.УстановитьПараметр("ДатаОкончания", 				 КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ИспользоватьПунктыРазгрузки", ИспользоватьПунктыРазгрузки);
	Запрос.УстановитьПараметр("ИспользоватьАдресаДоставки",  ИспользоватьАдресаДоставки);

	Возврат Запрос.Выполнить();
	
КонецФункции   

// sk_220328 MOD-2386 
// ДанныеПоДокументамПродажи()
//
//Функция ДанныеПоДокументамПродажи_OLD()
//
//	Если ГКэшСпискиОбъектов.Получить("СписокЗаказов") = Неопределено Тогда 
//		СписокЗаказов = "";
//	Иначе 
//		СписокЗаказов = ГКэшСпискиОбъектов.Получить("СписокЗаказов");
//	КонецЕсли;
//	
//	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовРеализация());
//	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
//	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
//	Запрос.УстановитьПараметр("ИспользоватьПунктыРазгрузки", ИспользоватьПунктыРазгрузки);
//	Запрос.УстановитьПараметр("ИспользоватьАдресаДоставки", ИспользоватьАдресаДоставки);
//	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
//	Запрос.УстановитьПараметр("Агент", ВыбАгент);
//
//	Возврат Запрос.Выполнить();
//	
//КонецФункции

// sk_220328 MOD-2855
// Возвращает запрос по документам "ВозвратыТоваровОтКлиента"
//
// Параметры:
//  МенеджерВТ - МенеджерВременныхТаблиц - менеджер ВТ
// 
// Возвращаемое значение: 
//  ВыборкаИзРезультатаЗапроса  
//
Функция ДанныеПоДокументаВозвраты(МенеджерВТ)
	
	//@skip-check structure-consructor-too-many-keys
	СтррЛитералы = Новый Структура("Вес, Контрагент, Упаковки, УсловиеОтбораВозвратов");     
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		СтррЛитералы.Вес = 
			"ВЫБОР
			|	КОГДА ВозвратТоваровОтКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|	ИЛИ ВозвратТоваровОтКлиентаТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|				КОГДА ВозвратТоваровОтКлиентаТовары.Номенклатура.ВесЗнаменатель = 0
			|					ТОГДА 0
			|				ИНАЧЕ ВозвратТоваровОтКлиентаТовары.Номенклатура.ВесЧислитель / ВозвратТоваровОтКлиентаТовары.Номенклатура.ВесЗнаменатель * ВозвратТоваровОтКлиентаТовары.Количество
			|			КОНЕЦ
			|	ИНАЧЕ ВозвратТоваровОтКлиентаТовары.Упаковка.Вес * ВозвратТоваровОтКлиентаТовары.Количество
			|КОНЕЦ";
		СтррЛитералы.Упаковки = "УпаковкиЕдиницыИзмерения";	
	Иначе // УТ11.1
		СтррЛитералы.Вес = 
			"ВЫБОР
			|	КОГДА ВозвратТоваровОтКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|	ИЛИ ВозвратТоваровОтКлиентаТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|			КОГДА ВозвратТоваровОтКлиентаТовары.Номенклатура.Вес = 0
			|				ТОГДА 0
			|			ИНАЧЕ ВозвратТоваровОтКлиентаТовары.Номенклатура.Вес * ВозвратТоваровОтКлиентаТовары.Количество
			|		КОНЕЦ
			|	ИНАЧЕ ВозвратТоваровОтКлиентаТовары.Упаковка.Вес * ВозвратТоваровОтКлиентаТовары.Количество
			|КОНЕЦ";
		СтррЛитералы.Упаковки = "УпаковкиНоменклатуры";		
	КонецЕсли;  
		
	Если ГКонфигурация = "УТ_АП"  Тогда 
		СтррЛитералы.Контрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьПунктыРазгрузки
			|			ТОГДА ВозвратТоваровОтКлиента.алкПунктРазгрузки
			|		ИНАЧЕ ВозвратТоваровОтКлиента.Контрагент
			|	КОНЕЦ";
	ИначеЕсли ГКонфигурация = "УТ_АКФ" Тогда
			СтррЛитералы.Контрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьАдресаДоставки
			|			ТОГДА ВозвратТоваровОтКлиента.ТорговаяТочка
			|		ИНАЧЕ ВозвратТоваровОтКлиента.Контрагент
			|	КОНЕЦ";	
	Иначе 
		СтррЛитералы.Контрагент = "ВозвратТоваровОтКлиента.Контрагент";
	КонецЕсли; 
	
	Если ВыгружатьЗаказыПоПартнерамАгента Тогда 
		СтррЛитералы.УсловиеОтбораВозвратов = "ВозвратТоваровОтКлиента.Партнер В (ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры)";
	Иначе
		СтррЛитералы.УсловиеОтбораВозвратов = "ВозвратТоваровОтКлиента.Менеджер = &Агент"; 
	КонецЕсли; 
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВозвратТоваровОтКлиента.Ссылка КАК Возврат
	               |ПОМЕСТИТЬ ВТ_Возвраты
	               |ИЗ  
				   |	ВТ_Реализации КАК ВТ_Реализации 
	               |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               |		ПО ВТ_Реализации.Реализация = ВозвратТоваровОтКлиента.ДокументРеализации
				   |ГДЕ
	               |	НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
	               |	И ВозвратТоваровОтКлиента.Проведен
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВозвратТоваровОтКлиента.Ссылка
	               |ИЗ
	               |	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	               |ГДЕ
	               |	НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
	               |	И ВозвратТоваровОтКлиента.Проведен
	               |	И ВозвратТоваровОтКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания  
				   |	И [УсловиеОтбораВозвратов]
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка,
	               |	ВозвратТоваровОтКлиента.Дата КАК Дата,
				   |	ВозвратТоваровОтКлиента.Номер КАК Номер,
				   |	ВозвратТоваровОтКлиента.Проведен КАК Проведен,
				   |	ВЫБОР
				   |		КОГДА &ИспользоватьПунктыРазгрузки
				   |			ТОГДА ВозвратТоваровОтКлиента.Контрагент
				   |		ИНАЧЕ ВозвратТоваровОтКлиента.Партнер
				   |	КОНЕЦ КАК Клиент,
				   |	[Контрагент] КАК Контрагент,
				   |	ВозвратТоваровОтКлиента.Организация КАК Организация,
				   |	ВЫБОР
				   |		КОГДА &ИспользоватьСоглашения
	               |			ТОГДА ВозвратТоваровОтКлиента.Соглашение
				   |		КОГДА &ИспользоватьСоглашения
				   |			ТОГДА ВозвратТоваровОтКлиента.Договор 
				   |		ИНАЧЕ NULL		
				   |	КОНЕЦ КАК Договор,
	               |	ВозвратТоваровОтКлиента.Валюта КАК Валюта,
	               |	ВозвратТоваровОтКлиента.СуммаДокумента КАК СуммаДокумента,
	               |	ВозвратТоваровОтКлиента.Склад КАК Склад,
				   |	[Вес] КАК Вес,
	               |	ВозвратТоваровОтКлиента.Комментарий КАК Комментарий,
	               |	ВозвратТоваровОтКлиента.ДокументРеализации КАК ДокументРеализация,
	               |	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
	               |	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
				   |	ВЫБОР
	               |		КОГДА ВозвратТоваровОтКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.[Упаковки].ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА СпрНоменклатура.ИспользоватьУпаковки = ЛОЖЬ
	               |							ИЛИ СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	               |						ТОГДА СпрНоменклатура.Ссылка
	               |					ИНАЧЕ НаборыУпаковок.ЕдиницаИзмерения
	               |				КОНЕЦ
	               |		ИНАЧЕ ВозвратТоваровОтКлиентаТовары.Упаковка
	               |	КОНЕЦ КАК Упаковка,
	               |	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок КАК Количество,
	               |	ВозвратТоваровОтКлиентаТовары.Цена КАК Цена,
	               |	ВозвратТоваровОтКлиентаТовары.Сумма КАК Сумма,
	               |	ВозвратТоваровОтКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	               |	ВозвратТоваровОтКлиентаТовары.СуммаНДС КАК СуммаНДС,
	               |	ВозвратТоваровОтКлиентаТовары.СуммаСНДС КАК СуммаСНДС
	               |ИЗ
	               |	ВТ_Возвраты КАК ВТ_Возвраты
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
				   |		ПО ВТ_Возвраты.Возврат = ВозвратТоваровОтКлиента.Ссылка
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
				   |		ПО ВТ_Возвраты.Возврат = ВозвратТоваровОтКлиентаТовары.Ссылка
				   | 		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ВозвратТоваровОтКлиентаТовары.Номенклатура = СпрНоменклатура.Ссылка
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
	               |		ПО (СпрНоменклатура.НаборУпаковок = НаборыУпаковок.Ссылка)
				   |ИТОГИ
				   |	СУММА(Вес)
				   |ПО
				   |	Ссылка";

	ЗаменитьЛитералы(Запрос.Текст, СтррЛитералы);  
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_Реализации";
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_Возвраты";
	
	Запрос.УстановитьПараметр("Агент", 						 ВыбАгент);
	Запрос.УстановитьПараметр("ДатаНачала", 				 НачалоВыгрузкиДокументов(ИнтервалВыгрузкиЗаказов));
	//@skip-check use-non-recommended-method
	Запрос.УстановитьПараметр("ДатаОкончания", 				 КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ИспользоватьПунктыРазгрузки", ИспользоватьПунктыРазгрузки);
	Запрос.УстановитьПараметр("ИспользоватьАдресаДоставки",  ИспользоватьАдресаДоставки);
	Запрос.УстановитьПараметр("ИспользоватьДоговоры", 		 ИспользоватьДоговоры());
	Запрос.УстановитьПараметр("ИспользоватьСоглашения", 	 ИспользоватьСоглашения());
	
	Результат = Запрос.Выполнить(); 
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоДокументамСчетаФактураВыданные()		

	ТЗПодтвержденияДок = ПодтвержденияСДОткрыть("Документы", ВыбНастройкиАгента.СсылкаМУ, Истина);
	СтррОтбор 		   = Новый Структура("ВидДокумента", "СчетФактураВыданный");
	МПодтвержденияДок  = ТЗПодтвержденияДок.НайтиСтроки(СтррОтбор); 
	ДокМенеджер 	   = Документы["СчетФактураВыданный"];
	МДокументы		   = Новый Массив;
	Для Каждого стзСтрока Из МПодтвержденияДок Цикл
		СсылкаДок = ДокМенеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(стзСтрока.Идентификатор));	
		Если СсылкаДок.ПолучитьОбъект() = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		МДокументы.Добавить(СсылкаДок);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетФактураВыданный.Ссылка КАК Ссылка,
	               |	СчетФактураВыданный.Дата КАК Дата,
	               |	СчетФактураВыданный.Номер КАК Номер,
	               |	СчетФактураВыданный.ДокументОснование КАК ДокументОснование
	               |ИЗ
	               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	               |ГДЕ
	               |	СчетФактураВыданный.Ссылка В(&Документы)
	               |	И НЕ СчетФактураВыданный.ПометкаУдаления";
	Запрос.УстановитьПараметр("Документы", МДокументы); 	
	Результат = Запрос.Выполнить();

	Возврат Результат;

КонецФункции // ДанныеПоДокументамСчетаФактураВыданные()

Функция ДанныеПоДокументамПеремещения()
	
	Запрос = Новый Запрос(ТекстЗапросаВыборкиДокументовПеремещение());
	Запрос.УстановитьПараметр("ДатаНачала", НачалоВыгрузкиДокументов(ИнтервалВыгрузкиПеремещений));
	//@skip-check use-non-recommended-method
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	МобильныйСклад = Неопределено;
	ВыбНастройкиАгента.Свойство("МобильныйСклад", МобильныйСклад);
	Запрос.УстановитьПараметр("Склад", МобильныйСклад);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПеремещенийТоваров.Принято);
	Запрос.УстановитьПараметр("Агент", ВыбАгент);

	Возврат Запрос.Выполнить();
	
КонецФункции

#Область ДанныеПоВзаиморасчетам 

Функция ДанныеПоДолгам(МенеджерВТ)	
	
	//1. Параметры
	//@skip-check use-non-recommended-method
	ДатаОтчета   = ТекущаяДата();                                            		// Дата       - Дата отчета
	ДатаОстатков = Новый Граница(КонецДня(ДатаОтчета), ВидГраницы.Включая);   		// Граница    - Дата отчета, вспомогательная.
	Валюта		 = Константы.ВалютаРегламентированногоУчета.Получить();            	// Справочник - Валюта отчета(регл или упр) 
	
	Запрос = Новый Запрос;
	
	//2. Отборы. Курсы валют потребуются при реализации этапов оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики,
	               |	АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	АналитикаУчетаПоПартнерам.Организация КАК Организация,
	               |	АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	               |	АналитикаУчетаПоПартнерам.Договор КАК Договор
	               |ПОМЕСТИТЬ ВТ_ОтборПоСегментуПартнеров
	               |ИЗ
	               |	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
	               |		ПО АналитикаУчетаПоПартнерам.Организация = ВТ_Организации.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
	               |		ПО АналитикаУчетаПоПартнерам.Партнер = ВТ_Партнеры.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КлючАналитики
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КурсыВалютыТекущегоКурса.Валюта КАК Валюта,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(КурсыВалютыТекущегоКурса.Кратность, 0) > 0
	               |				И ЕСТЬNULL(КурсыВалютыТекущегоКурса.Курс, 0) > 0
	               |				И ЕСТЬNULL(КурсыВалютыНовогоКурса.Курс, 0) > 0
	               |				И ЕСТЬNULL(КурсыВалютыНовогоКурса.Кратность, 0) > 0
	               |			ТОГДА КурсыВалютыТекущегоКурса.Курс * КурсыВалютыНовогоКурса.Кратность / (КурсыВалютыНовогоКурса.Курс * КурсыВалютыТекущегоКурса.Кратность)
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК КоэффициентПересчета
	               |ПОМЕСТИТЬ ВТ_КурсВалютыУчета
	               |ИЗ
	               |	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, ) КАК КурсыВалютыТекущегоКурса
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, Валюта = &Валюта) КАК КурсыВалютыНовогоКурса
	               |		ПО (ИСТИНА)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Валюта";
	
	//В УТ 11.1 нет измерения РегистрСведений.АналитикаУчетаПоПартнерам.Договор
	Если ПоколениеКонфигурации("<УТ_11.2") Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АналитикаУчетаПоПартнерам.Договор", "ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Выполнить();
	
	//3. Получение данных по долгам и дату платежа
	Если Метаданные.ФункциональныеОпции.Найти("НоваяАрхитектураВзаиморасчетов") <> Неопределено И ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		Запрос.Текст ="ВЫБРАТЬ
		              |	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		              |	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
		              |	РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
		              |	РасчетыСКлиентамиПоСрокамОстатки.Валюта КАК Валюта,
		              |	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток КАК КОплатеОстаток,
		              |	РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения КАК ДатаПлатежа
		              |ПОМЕСТИТЬ ВТ_Долги
		              |ИЗ
		              |	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ДатаОстатков, ) КАК РасчетыСКлиентамиПоСрокамОстатки  
					  |
					  //(( sk_231113 MOD-3534
					  |ГДЕ
			          |	РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток > 0
					  //)) sk_231113 
		              |
		              |ИНДЕКСИРОВАТЬ ПО
		              |	АналитикаУчетаПоПартнерам";
		
		Запрос.Выполнить();
		
	Иначе
		
		Если ПоколениеКонфигурации(">=УТ_11.2") И ГКонфигурация <> "УТ_UA" Тогда
			// 3.1 Получаем даты платежа по этапам с разделенным долгом по каждому этапу. 
			//Поле долг уже разделено на этапы оплаты.
			//Если поле долг не заполнено, то это строка пересчета валюты на разные даты. Или поступила предоплата.
			//Если долг был сформирован в валюте и курс на текущую дату может отличатся то выгружаем в валюте. Не учитываем долг из соответствующей колонки.
			//Учет долга по полю КВозврату и "Предоплата" игнорируем, требуется анализ.
			//Не должно быть дублей в разрезе ДатаПлатежа АналитикаУчетаПоПартнерам ЗаказКлиента РасчетныйДокумент
			Запрос.Текст ="ВЫБРАТЬ
			              |	РасчетыСКлиентамиПоДокументам.ДатаПлатежа КАК ДатаПлатежа,
			              |	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			              |	РасчетыСКлиентамиПоДокументам.ЗаказКлиента КАК ЗаказКлиента,
			              |	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент КАК РасчетныйДокумент,
			              |	РасчетыСКлиентамиПоДокументам.Долг КАК ДолгНачальный
			              |ПОМЕСТИТЬ ВТ_ДолгНачальный
			              |ИЗ
			              |	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтборПоСегментуПартнеров КАК ВТ_ОтборПоСегментуПартнеров
			              |		ПО РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = ВТ_ОтборПоСегментуПартнеров.КлючАналитики
			              |ГДЕ
			              |	РасчетыСКлиентамиПоДокументам.Долг > 0
			              |	И РасчетыСКлиентамиПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			              |
			              |ИНДЕКСИРОВАТЬ ПО
			              |	АналитикаУчетаПоПартнерам,
			              |	ЗаказКлиента,
			              |	РасчетныйДокумент";
			
			Запрос.Выполнить();
			

			// 3.2 Получаем текущие общие долги по долгам, без этапов оплаты.
			//Также получаем общие долги в валюте рег учета, тк долги выгружаются в му в ВалютаРегламентированногоУчета. Если нет этапов оплаты, то это и есть долг.
			Запрос.Текст ="ВЫБРАТЬ
			              |	РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			              |	РасчетыСКлиентамиПоДокументамОстатки.ЗаказКлиента КАК ЗаказКлиента,
			              |	РасчетыСКлиентамиПоДокументамОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
			              |	РасчетыСКлиентамиПоДокументамОстатки.Валюта КАК Валюта,
			              |	РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток КАК ДолгОстаток
			              |ПОМЕСТИТЬ ВТ_ДолгОстатки
			              |ИЗ
			              |	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ДатаОстатков, ) КАК РасчетыСКлиентамиПоДокументамОстатки
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтборПоСегментуПартнеров КАК ВТ_ОтборПоСегментуПартнеров
			              |		ПО РасчетыСКлиентамиПоДокументамОстатки.АналитикаУчетаПоПартнерам = ВТ_ОтборПоСегментуПартнеров.КлючАналитики
			              |ГДЕ
			              |	РасчетыСКлиентамиПоДокументамОстатки.ДолгОстаток > 0
			              |
			              |ИНДЕКСИРОВАТЬ ПО
			              |	АналитикаУчетаПоПартнерам,
			              |	ЗаказКлиента,
			              |	РасчетныйДокумент,
			              |	Валюта";
			
			Запрос.Выполнить();
			
			// 3.3 Объеденяем ВТ_ДолгНачальный и ВТ_ДолгОстатки 
			//Определяем для текущих долгов даты платежа, Если долг разделен на этапы, то текущий долг для этапа не актуален и увеличивается количество записей по этапам 
			Запрос.Текст ="ВЫБРАТЬ
			              |	ВТ_ДолгНачальный.ДатаПлатежа КАК ДатаПлатежа,
			              |	ВТ_ДолгОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			              |	ВТ_ДолгОстатки.ЗаказКлиента КАК ОбъектРасчетов,
			              |	ВТ_ДолгОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
						  |	ВТ_ДолгОстатки.Валюта КАК Валюта,
			              |	ВТ_ДолгОстатки.ДолгОстаток КАК КОплатеОстаток
			              |ПОМЕСТИТЬ ВТ_Долги
			              |ИЗ
			              |	ВТ_ДолгОстатки КАК ВТ_ДолгОстатки
			              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолгНачальный КАК ВТ_ДолгНачальный
			              |		ПО ВТ_ДолгОстатки.АналитикаУчетаПоПартнерам = ВТ_ДолгНачальный.АналитикаУчетаПоПартнерам
			              |			И ВТ_ДолгОстатки.ЗаказКлиента = ВТ_ДолгНачальный.ЗаказКлиента
			              |			И ВТ_ДолгОстатки.РасчетныйДокумент = ВТ_ДолгНачальный.РасчетныйДокумент";
			
			Запрос.Выполнить();
			//ВыбркаРезультат = Запрос.Выполнить();
			//Возврат ВыбркаРезультат;
			
			
			//3.4 Очищаем не нужные таблицы из менедждера.
			Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ДолгНачальный
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |УНИЧТОЖИТЬ ВТ_ДолгОстатки";
			
			Запрос.Выполнить();
						
		Иначе //ПоколениеКонфигурации("<УТ_11.2") Тогда
			//Возможно требуется пересчет валюты. Пересчет происходит по валюте текущего курса, а в типовых отчетах долг отображается по ДолгУпр или ДолгРегл
			Запрос.Текст ="ВЫБРАТЬ
			              |	РасчетыСКлиентамиПоДокументам.ДатаПлатежа КАК ДатаПлатежа,
						  |	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			              |	РасчетыСКлиентамиПоДокументам.ЗаказКлиента КАК ОбъектРасчетов,
			              |	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент,
			              |	РасчетыСКлиентамиПоДокументам.Валюта КАК Валюта,
						  |	РасчетыСКлиентамиПоДокументам.ДолгОстаток КАК КОплатеОстаток
			              |ПОМЕСТИТЬ ВТ_Долги
			              |ИЗ
			              |		РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ДатаОстатков, ) КАК РасчетыСКлиентамиПоДокументам
			              |ГДЕ
			              | РасчетыСКлиентамиПоДокументам.ДолгОстаток > 0";
			
			Запрос.Выполнить();

		КонецЕсли;
		
	КонецЕсли;
	
	//4. Получение итогового результата
	Запрос.Текст ="ВЫБРАТЬ
	              |	ВТ_ОтборПоСегментуПартнеров.Организация КАК Организация,
	              |	ВТ_ОтборПоСегментуПартнеров.Партнер КАК Партнер,
	              |	ВТ_ОтборПоСегментуПартнеров.Контрагент КАК Контрагент,
	              |	ВТ_ОтборПоСегментуПартнеров.Договор КАК Договор,
	              |	ВТ_Долги.ОбъектРасчетов КАК ОбъектРасчетов,
	              |	ВТ_Долги.РасчетныйДокумент КАК РасчетныйДокумент,
	              |	ВЫРАЗИТЬ(ВТ_Долги.КОплатеОстаток * ВЫБОР
	              |			КОГДА &Валюта <> ВТ_Долги.Валюта
	              |				ТОГДА ВТ_КурсВалютыУчета.КоэффициентПересчета
	              |			ИНАЧЕ 1
	              |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК КОплатеОстаток,
	              |	ВТ_Долги.ДатаПлатежа КАК ДатаПлатежа,
	              |	ВЫБОР
	              |		КОГДА ВТ_Долги.ДатаПлатежа < &ДатаОтчета
	              |			ТОГДА РАЗНОСТЬДАТ(ВТ_Долги.ДатаПлатежа, &ДатаОтчета, ДЕНЬ)
	              |		ИНАЧЕ 0
	              |	КОНЕЦ КАК КоличествоДнейПросрочено
	              |ИЗ
	              |	ВТ_Долги КАК ВТ_Долги
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтборПоСегментуПартнеров КАК ВТ_ОтборПоСегментуПартнеров
	              |		ПО ВТ_Долги.АналитикаУчетаПоПартнерам = ВТ_ОтборПоСегментуПартнеров.КлючАналитики
	              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсВалютыУчета КАК ВТ_КурсВалютыУчета
	              |		ПО (ВТ_КурсВалютыУчета.Валюта = ВТ_Долги.Валюта)
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Партнер,
	              |	Контрагент";
	
	
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	
	ВыборкаРезультат = Запрос.Выполнить();
	
	////5. Удаление временных таблиц
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ОтборПоСегментуПартнеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_КурсВалютыУчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_Долги";
	Запрос.Выполнить();
	
	Возврат ВыборкаРезультат;
	
КонецФункции	

//Обновление регистра накоплений "Расчеты с клиентами по документам"
//
Процедура ОбновлениеРегистрРасчетыСКлиентамиПоДокументам()
	
	//УТ_11.4	-  РаспределениеВзаиморасчетовВызовСервера.РассчитатьВсе()
	//УТ_11.3	-  РаспределениеВзаиморасчетов.РассчитатьВсе()
	//УТ_11.1	-  ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСКлиентами()
	Если ПоколениеКонфигурации(">=УТ_11.4") Тогда
		УстановитьБезопасныйРежим(Истина); // gi_240224 - добавлено по требованию EDT
		МодульВзаиморасчетов = Вычислить("РаспределениеВзаиморасчетовВызовСервера");
	ИначеЕсли ПоколениеКонфигурации(">=УТ_11.2") Тогда
		УстановитьБезопасныйРежим(Истина); // gi_240224 - добавлено по требованию EDT
		МодульВзаиморасчетов = Вычислить("РаспределениеВзаиморасчетов");
	Иначе //ПоколениеКонфигурации("<УТ_11.2")
		//@skip-check empty-except-statement
		Попытка
			УстановитьБезопасныйРежим(Истина); // gi_240224 - добавлено по требованию EDT
			МодульВзаиморасчетов = Вычислить("ВзаиморасчетыСервер");
			МодульВзаиморасчетов.ВыполнитьПроведениеДокументовПоРасчетамСКлиентами();
		Исключение	
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ФункциональныеОпции.Найти("НоваяАрхитектураВзаиморасчетов") = Неопределено ИЛИ НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		КонецРасчета = КонецМесяца(ТекущаяДатаСеанса()) + 1;
		Попытка
			МодульВзаиморасчетов.РассчитатьВсе(КонецРасчета, Неопределено);
		Исключение
			Попытка
				АналитикиРасчета =  Новый Структура("АналитикиУчетаПоПартнерам, Организации", Неопределено, Неопределено);
				МодульВзаиморасчетов.РассчитатьВсе(КонецРасчета, АналитикиРасчета);
			Исключение
				МОрганизации = Новый Массив;
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	Организации.Ссылка КАК Ссылка
				               |ИЗ
				               |	Справочник.Организации КАК Организации";
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МОрганизации.Добавить(Выборка.Ссылка);
				КонецЦикла;
				Попытка
					АналитикиРасчета =  Новый Структура("АналитикиУчетаПоПартнерам, Организации", Неопределено, МОрганизации);
					МодульВзаиморасчетов.РассчитатьВсе(КонецРасчета, АналитикиРасчета);
				Исключение
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "При обновлении регистра накоплений ""Расчеты с клиентами по документам"" произошла ошибка: " + ОписаниеОшибки();
					Сообщение.Сообщить();
				КонецПопытки;
			КонецПопытки;
		Конецпопытки;
	КонецЕсли;
Конецпроцедуры   

// Функция проверять наличие реквизита у документа.
// Параметры:
//  СсылкаДок	- ДокументСсылка - Ссылка на документ
//  СтрРеквизит	- Строка 		 - Имя реквизита
//  СЗДокументы - СписокЗначений Из Строка - Для оптимизации 
// 
// Возвращаемое значение:
//  Булево - Истина, если есть реквизит
//
//@skip-check module-unused-method
Функция ОпределитьНаличиеРеквизита(СсылкаДок, СтрРеквизит, СЗДокументы = Неопределено)

	Если НЕ ЗначениеЗаполнено(СсылкаДок) ИЛИ НЕ ЗначениеЗаполнено(СтрРеквизит) Тогда
		Возврат Ложь;
	КонецЕсли;

	Результат = Неопределено;
	ТипДок    = ТипЗнч(СсылкаДок);
	
	Если СЗДокументы <> Неопределено Тогда
		Поиск = СЗДокументы.НайтиПоЗначению(ТипДок);
		Если Поиск <> Неопределено Тогда
			Результат = Поиск.Пометка;
		КонецЕсли;		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Если СсылкаДок.Метаданные().Реквизиты.Найти(СтрРеквизит) = Неопределено Тогда
			Результат = Ложь;
		Иначе
			Результат = Истина;
		КонецЕсли;
		СЗДокументы.Добавить(ТипДок, ,Результат);		
	КонецЕсли;
		
	Возврат Результат; 
	
КонецФункции

#КонецОбласти

// ВыборкиДанныхПоДокументам
#КонецОбласти

Функция СтатусыПартнеровИзНастроек()

	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТЗРезультат.Колонки.Добавить("Статус",  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36))); // вынуждены использовать УникальныйИдентификатор как строку, чтобы такая ТЗ обрабатывалась в запросе
	ТЗСтатусы = СтатусыПартнеровВыгрузки();
	
	Для Каждого стзСтатусы Из ТЗСтатусы Цикл
		сзПартнерыСтауса = стзСтатусы.Партнеры;
		стрИдСтатуса = стзСтатусы.Идентификатор;
		Если сзПартнерыСтауса <> Неопределено Тогда
			Для Каждого ЭлементСЗ Из сзПартнерыСтауса Цикл
				СтрокаТ = ТЗРезультат.Добавить();
				СтрокаТ.Партнер = ЭлементСЗ.Значение;
				СтрокаТ.Статус  = стрИдСтатуса; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ТЗРезультат;
	
КонецФункции 

Функция СтавкаНДСЧислом(Знач СтавкаНДС, НДСпоСтавкам4и2 = Ложь) Экспорт
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		
		Возврат ?(НДСпоСтавкам4и2, 0.02, 0.1);
		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18
		ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		
		Возврат ?(НДСпоСтавкам4и2, 0.04, 0.18);
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

#Область ТекстыЗапросов

// sk_230703 MOD-3451 
//
Функция ТекстЗапросаВыгрузкиОрганизаций()

	//dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828 КаспиДанныеОрганизаций,СинонимИДКомпании,СоединениеКаспи
	//@skip-check structure-consructor-too-many-keys
	СтррЛитералы = Новый Структура("ИНН_ИПрочее,Соединение,СправочникКлассификаторБанков,КаспиДанныеОрганизаций,СинонимИДКомпании,СоединениеКаспи"); // sk_231116 MOD-3579 СтррЛитералы = Новый Структура("ИНН_ИПрочее,Соединение");
	Если ГКонфигурация = "УТ_UA" Тогда
		СтррЛитералы.ИНН_ИПрочее = "
			|	УчетнаяПолитикаОрганизацийСрезПоследних.ИННПлательщикаНДС КАК ИНН,
			|	УчетнаяПолитикаОрганизацийСрезПоследних.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельства,
			|	УчетнаяПолитикаОрганизацийСрезПоследних.ИнформацияОСтатусеПлательщикаНалогов КАК ИнформацияОСтатусеПлательщикаНалогов,
			|	"""" КАК КПП,
			|	"""" КАК ОГРН";
		СтррЛитералы.Соединение = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних КАК УчетнаяПолитикаОрганизацийСрезПоследних
			|		ПО Организации.Ссылка = УчетнаяПолитикаОрганизацийСрезПоследних.Организация
			|";
	Иначе
		СтррЛитералы.ИНН_ИПрочее = "
			|	СправочникОрганизации.ИНН КАК ИНН,
			|	СправочникОрганизации.КПП КАК КПП,
			|	СправочникОрганизации.ОГРН КАК ОГРН";
		СтррЛитералы.Соединение = "";
	КонецЕсли;   

	//(( sk_231116 MOD-3579
	Если ПоколениеКонфигурации(">=УТ_11.4.1") Тогда
		СтррЛитералы.СправочникКлассификаторБанков = "КлассификаторБанков";	
	Иначе
		СтррЛитералы.СправочникКлассификаторБанков = "КлассификаторБанковРФ";		
	КонецЕсли;
	//)) sk_231116
	
	//{{dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	Если ИспользоватьОплатуКаспи И ВременныеТаблицы.Свойство("КаспиДанныеОрганизаций") Тогда
		СтррЛитералы.КаспиДанныеОрганизаций = 
		"ВЫБРАТЬ
	    |	КаспиДанныеОрганизаций.Организация КАК Организация,
		|	КаспиДанныеОрганизаций.Синоним КАК Синоним,
		|	КаспиДанныеОрганизаций.ИДОрганизации КАК ИДОрганизации,
		//{{dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
		|	КаспиДанныеОрганизаций.ПараметрНомераДокумента КАК ПараметрНомераДокумента,
		|	КаспиДанныеОрганизаций.ПараметрФИОАгента КАК ПараметрФИОАгента
		//}}dm_240122 #mt-2838
		|ПОМЕСТИТЬ ВТ_КаспиДанныеОрганизаций
		|ИЗ
		|	&тзКаспи КАК КаспиДанныеОрганизаций
		|ГДЕ
		|	НЕ КаспиДанныеОрганизаций.Синоним = """"
		|	И НЕ КаспиДанныеОрганизаций.ИДОрганизации = """"
		//{{dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
		|	И НЕ КаспиДанныеОрганизаций.ПараметрНомераДокумента = """"
		|	И НЕ КаспиДанныеОрганизаций.ПараметрФИОАгента = """"
		//}}dm_240122 #mt-2838
		|
		|ИНДЕКСИРОВАТЬ ПО
	    |	КаспиДанныеОрганизаций.Организация
		|;
	    |
	    |////////////////////////////////////////////////////////////////////////////////";
		СтррЛитералы.СинонимИДКомпании = "
		|	ВТ_КаспиДанныеОрганизаций.Синоним КАК Синоним,
		|	ВТ_КаспиДанныеОрганизаций.ИДОрганизации КАК ИДОрганизации,
		//{{dm_240122 #mt-2838 https://dev.agentplus.online/browse/MT-2838
		|	ВТ_КаспиДанныеОрганизаций.ПараметрНомераДокумента КАК ПараметрНомераДокумента,
		|	ВТ_КаспиДанныеОрганизаций.ПараметрФИОАгента КАК ПараметрФИОАгента,";
		//}}dm_240122 #mt-2838
		СтррЛитералы.СоединениеКаспи = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КаспиДанныеОрганизаций КАК ВТ_КаспиДанныеОрганизаций
		|		ПО Организации.Ссылка = ВТ_КаспиДанныеОрганизаций.Организация";
	Иначе
		СтррЛитералы.КаспиДанныеОрганизаций = ""; 
		СтррЛитералы.СинонимИДКомпании = "";
		СтррЛитералы.СоединениеКаспи = "";
	КонецЕсли;
	//}}dm_231226 #mt-2828
	
	ТекстЗапроса =
	    "[КаспиДанныеОрганизаций]
		|ВЫБРАТЬ
	    |	МАКСИМУМ(СпрБанковскиеСчетаОрганизаций.Ссылка) КАК СчетОрганизации,
	    |	СпрБанковскиеСчетаОрганизаций.Владелец КАК Организация
	    |ПОМЕСТИТЬ ВТ_БанковскиеСчетаОрганизаций
	    |ИЗ 
		|	ВТ_Организации КАК ВТ_Организации
	    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК СпрБанковскиеСчетаОрганизаций  
		|		ПО ВТ_Организации.Ссылка = СпрБанковскиеСчетаОрганизаций.Владелец  
	    |ГДЕ
	    |	НЕ СпрБанковскиеСчетаОрганизаций.Закрыт
	    |
	    |СГРУППИРОВАТЬ ПО
	    |	СпрБанковскиеСчетаОрганизаций.Владелец 
		|
		|ИНДЕКСИРОВАТЬ ПО
	    |	СпрБанковскиеСчетаОрганизаций.Владелец
		|;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	СправочникОрганизации.Наименование КАК Наименование,
		|	СправочникОрганизации.НаименованиеПолное КАК НаименованиеПолное,		
		|	СправочникОрганизации.Префикс КАК Префикс,
		|	[ИНН_ИПрочее],
		|	[СинонимИДКомпании]
		|	ЕСТЬNULL(СпрБанковскиеСчетаОрганизаций.НомерСчета, """") КАК НомерСчета,
		|	ЕСТЬNULL(СпрКлассификаторБанков.Наименование, """") КАК БанкНаименование,
		|	ЕСТЬNULL(СпрКлассификаторБанков.КоррСчет, """") КАК КоррСчет,  
		|	ЕСТЬNULL(СпрКлассификаторБанков.Код, """") КАК БИК
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	ВТ_Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
		|		ПО Организации.Ссылка = СправочникОрганизации.Ссылка
		|		[Соединение]
		|		[СоединениеКаспи]
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчетаОрганизаций КАК ВТ_БанковскиеСчетаОрганизаций
		|		ПО СправочникОрганизации.Ссылка = ВТ_БанковскиеСчетаОрганизаций.Организация   
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК СпрБанковскиеСчетаОрганизаций
		|		ПО ВТ_БанковскиеСчетаОрганизаций.СчетОрганизации = СпрБанковскиеСчетаОрганизаций.Ссылка 
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.[СправочникКлассификаторБанков] КАК СпрКлассификаторБанков
		|		ПО СпрБанковскиеСчетаОрганизаций.Банк = СпрКлассификаторБанков.Ссылка 
		|		
		|
		|УПОРЯДОЧИТЬ ПО
		|	СправочникОрганизации.Наименование
		|";
		
	ЗаменитьЛитералы(ТекстЗапроса, СтррЛитералы);   
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_БанковскиеСчетаОрганизаций";
	//{{dm_231226 #mt-2828 https://dev.agentplus.online/browse/MT-2828
	Если ИспользоватьОплатуКаспи И ВременныеТаблицы.Свойство("КаспиДанныеОрганизаций") Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_КаспиДанныеОрганизаций";
	КонецЕсли;
	//}}dm_231226 #mt-2828
	
	Возврат ТекстЗапроса;
	
КонецФункции

// sk_230703 MOD-3451 
// ТекстЗапросаВыгрузкиОрганизаций()
//
//Функция ТекстЗапросаВыгрузкиОрганизаций_OLD()
//
//	СтррЛитералы = Новый Структура("ИНН_ИПрочее,Соединение");
//	Если ГКонфигурация = "УТ_UA" Тогда
//		СтррЛитералы.ИНН_ИПрочее = "
//			|	УчетнаяПолитикаОрганизацийСрезПоследних.ИННПлательщикаНДС КАК ИНН,
//			|	УчетнаяПолитикаОрганизацийСрезПоследних.НомерСвидетельстваПлательщикаНДС КАК НомерСвидетельства,
//			|	УчетнаяПолитикаОрганизацийСрезПоследних.ИнформацияОСтатусеПлательщикаНалогов КАК ИнформацияОСтатусеПлательщикаНалогов,
//			|	"""" КАК КПП,
//			|	"""" КАК ОГРН";
//		СтррЛитералы.Соединение = "
//			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних КАК УчетнаяПолитикаОрганизацийСрезПоследних
//			|		ПО Организации.Ссылка = УчетнаяПолитикаОрганизацийСрезПоследних.Организация
//			|";
//	Иначе
//		СтррЛитералы.ИНН_ИПрочее = "
//			|	СправочникОрганизации.ИНН КАК ИНН,
//			|	СправочникОрганизации.КПП КАК КПП,
//			|	СправочникОрганизации.ОГРН КАК ОГРН";
//		СтррЛитералы.Соединение = "";
//	КонецЕсли;
//	
//	ТекстЗапроса = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//		|	Организации.Ссылка КАК Ссылка,
//		|	СправочникОрганизации.Наименование КАК Наименование,
//		|	СправочникОрганизации.НаименованиеПолное КАК НаименованиеПолное,		
//		|	СправочникОрганизации.Префикс КАК Префикс,
//		|	[ИНН_ИПрочее]
//		|{ВЫБРАТЬ
//		|	Ссылка.*}
//		|ИЗ
//		|	ВТ_Организации КАК Организации
//		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникОрганизации
//		|		ПО Организации.Ссылка = СправочникОрганизации.Ссылка
//		|		[Соединение]
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	СправочникОрганизации.Наименование
//		|";
//		
//	ЗаменитьЛитералы(ТекстЗапроса, СтррЛитералы);   
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции

Функция ТекстЗапросаВыборкиВидовКонтактнойИнформации()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.Наименование,
	|	ВидыКонтактнойИнформации.Тип.Ссылка КАК ТипКИ,
	|	ВидыКонтактнойИнформации.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И НЕ ВидыКонтактнойИнформации.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Родитель";

	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаОтбораСоглашений(ВключитьОтборПоОрганизациям)
	
	Если НЕ ИспользоватьПунктыРазгрузки ИЛИ (ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов) Тогда 
		
		// При ИспользоватьПунктыРазгрузки = Истина:
		// Если ИспользоватьКонтрагентов = Ложь, тогда используем Партнеров для Пуктов разгузки 
		// (В справочник МТ контрагенты - выгружаются Партнеры, а в справочник МТ ТорговыеТочки - выгружаются Пункты Разгрузки)
		
		//Это не совсем верно.
		Если ПоколениеКонфигурации(">=УТ_11.4.5.24") Тогда
			ЦенаВключаетНДС = "ЦенаВключаетНДС";
			//ИспользоватьНДС = "ВЫБОР КОГДА ВТ_СоглашенияБезТорговыхТочек.ЦенаВключаетНДС ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ";
		Иначе
			ЦенаВключаетНДС = "ЦенаВключаетНДС";
			//ИспользоватьНДС = "ВЫБОР КОГДА ВТ_СоглашенияБезТорговыхТочек.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";
		Конецесли;
		 		
    	ТекстЗапроса = "ВЫБРАТЬ
    	               |	Соглашения.Ссылка КАК Ссылка,
    	               |	Соглашения.Номер КАК Номер,
    	               |	Соглашения.Дата КАК Дата,
    	               |	Соглашения.Типовое КАК Типовое,
    	               |	Соглашения.ВидЦен КАК ВидЦен,
    	               |	Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
    	               |	Соглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
    	               |	Соглашения.Наименование КАК Наименование,
    	               |	Соглашения.Организация КАК Организация,
    	               |	Соглашения.СегментПартнеров КАК СегментПартнеров,
    	               |	Соглашения.[ЦенаВключаетНДС] КАК [ЦенаВключаетНДС],
    	               |	Соглашения.Контрагент КАК Контрагент,
    	               |	Соглашения.Партнер КАК Партнер,
					   //(( sk_231113 MOD-3531
					   |	СпрГрафикиОплаты.ФормаОплаты КАК ФормаОплаты
					   //)) sk_231113
    	               |ПОМЕСТИТЬ ВТ_СоглашенияБезТорговыхТочек
    	               |ИЗ
    	               |	Справочник.СоглашенияСКлиентами КАК Соглашения
					   //(( sk_231113 MOD-3531  
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты КАК СпрГрафикиОплаты
					   |		ПО Соглашения.ГрафикОплаты = СпрГрафикиОплаты.Ссылка 
						//)) sk_231113
    	               |ГДЕ
    	               |	НЕ Соглашения.ПометкаУдаления
    	               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
    	               |	И Соглашения.Типовое = ИСТИНА
    	               |	И Соглашения.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
    	               |
    	               |ОБЪЕДИНИТЬ ВСЕ
    	               |
    	               |ВЫБРАТЬ
    	               |	Соглашения.Ссылка,
    	               |	Соглашения.Номер,
    	               |	Соглашения.Дата,
    	               |	Соглашения.Типовое,
    	               |	Соглашения.ВидЦен,
    	               |	Соглашения.ДатаНачалаДействия,
    	               |	Соглашения.ДатаОкончанияДействия,
    	               |	Соглашения.Наименование,
    	               |	Соглашения.Организация,
    	               |	Соглашения.СегментПартнеров,
    	               |	Соглашения.[ЦенаВключаетНДС],
    	               |	Соглашения.Контрагент,
    	               |	Соглашения.Партнер,
					   //(( sk_231113 MOD-3531
					   |	СпрГрафикиОплаты.ФормаОплаты
					   //)) sk_231113
    	               |ИЗ
    	               |	Справочник.СоглашенияСКлиентами КАК Соглашения
    	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СегментыСоглашений КАК ВТ_СегментыСоглашений
    	               |		ПО Соглашения.СегментПартнеров = ВТ_СегментыСоглашений.Сегмент
					    //(( sk_231113 MOD-3531  
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты КАК СпрГрафикиОплаты
					   |		ПО Соглашения.ГрафикОплаты = СпрГрафикиОплаты.Ссылка 
						//)) sk_231113
    	               |ГДЕ
    	               |	НЕ Соглашения.ПометкаУдаления
    	               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
    	               |	И Соглашения.Типовое = ИСТИНА
    	               |
    	               |ОБЪЕДИНИТЬ ВСЕ
    	               |
    	               |ВЫБРАТЬ
    	               |	Соглашения.Ссылка,
    	               |	Соглашения.Номер,
    	               |	Соглашения.Дата,
    	               |	Соглашения.Типовое,
    	               |	Соглашения.ВидЦен,
    	               |	Соглашения.ДатаНачалаДействия,
    	               |	Соглашения.ДатаОкончанияДействия,
    	               |	Соглашения.Наименование,
    	               |	Соглашения.Организация,
    	               |	Соглашения.СегментПартнеров,
    	               |	Соглашения.[ЦенаВключаетНДС],
    	               |	Соглашения.Контрагент,
    	               |	Соглашения.Партнер,
					   //(( sk_231113 MOD-3531
					   |	СпрГрафикиОплаты.ФормаОплаты
					   //)) sk_231113

    	               |ИЗ
    	               |	Справочник.СоглашенияСКлиентами КАК Соглашения
    	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
    	               |		ПО Соглашения.Партнер = ВТ_Партнеры.Ссылка
					   //(( sk_231113 MOD-3531  
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты КАК СпрГрафикиОплаты
					   |		ПО Соглашения.ГрафикОплаты = СпрГрафикиОплаты.Ссылка 
					   //)) sk_231113
    	               |ГДЕ
    	               |	НЕ Соглашения.ПометкаУдаления
    	               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
    	               |	И Соглашения.Типовое = ЛОЖЬ
    	               |;
    	               |
    	               |////////////////////////////////////////////////////////////////////////////////
    	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
    	               |	ВТ_СоглашенияБезТорговыхТочек.Ссылка КАК Ссылка,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Номер КАК Номер,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Дата КАК Дата,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Типовое КАК Типовое,
    	               |	ВТ_СоглашенияБезТорговыхТочек.ВидЦен КАК ВидЦен,
    	               |	ВТ_СоглашенияБезТорговыхТочек.ДатаНачалаДействия КАК ДатаНачалаДействия,
    	               |	ВТ_СоглашенияБезТорговыхТочек.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Наименование КАК Наименование,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Организация КАК Организация,
    	               |	ВТ_СоглашенияБезТорговыхТочек.СегментПартнеров КАК СегментПартнеров,
					   |	ВТ_СоглашенияБезТорговыхТочек.[ЦенаВключаетНДС] КАК [ЦенаВключаетНДС],
					   |	[ИспользоватьНДС] КАК ИспользоватьНДС,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Партнер КАК Партнер,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Контрагент КАК Контрагент,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Партнер КАК мтКлиент,
    	               |	ВТ_СоглашенияБезТорговыхТочек.Контрагент КАК мтТорговаяТочка,
					   //(( sk_231113 MOD-3531
					   |	ВТ_СоглашенияБезТорговыхТочек.ФормаОплаты КАК ФормаОплаты
					   //)) sk_231113
    	               |ПОМЕСТИТЬ ВТ_Соглашения
    	               |ИЗ
    	               |	ВТ_СоглашенияБезТорговыхТочек КАК ВТ_СоглашенияБезТорговыхТочек";
		
		Если ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов Тогда
			ТекстЗапроса = ТекстЗапроса + "
					   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПунктыРазгрузки КАК ВТ_ПунктыРазгрузки
		               |		ПО ВТ_СоглашенияБезТорговыхТочек.Партнер = ВТ_ПунктыРазгрузки.Клиент";
		КонецЕсли;					
 
		Если ВключитьОтборПоОрганизациям Тогда
			ТекстЗапроса = ТекстЗапроса + " 
					   |ГДЕ ВТ_СоглашенияБезТорговыхТочек.Организация В (&Организации)";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ЦенаВключаетНДС]", ЦенаВключаетНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИспользоватьНДС]", ЦенаВключаетНДС);
												  
	ИначеЕсли ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов Тогда
		
		// Если ИспользоватьКонтрагентов = Истина, тогда используем Контрагентов для Пуктов разгузки 
		//(В справочник МТ контрагенты - выгружаются Контрагенты, а в справочник МТ ТорговыеТочки - выгружаются Пункты Разгрузки)
		
		//НЕ реализовано. 
		//Выгружаем только индивидуальные соглашения и типовые без учета СегментПартнеров. 
		//(Для учета сегментов требуется доработать выгрузку справочника <CATALOG GUID="B08784C4-5B74-4685-88B5-A17EA105AE48" Comment="Справочник.Сегменты (*Сегменты)"> и табличной части справочника <CATALOG GUID="9450980F-FB59-47E3-BAE2-AA3C58441B1A" Comment="Справочник.Контрагенты (Партнеры)"> )
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	Соглашения.Ссылка КАК Ссылка,
		               |	Соглашения.Номер КАК Номер,
		               |	Соглашения.Дата КАК Дата,
		               |	Соглашения.Типовое КАК Типовое,
		               |	Соглашения.ВидЦен КАК ВидЦен,
		               |	Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
		               |	Соглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		               |	Соглашения.Наименование КАК Наименование,
		               |	Соглашения.Организация КАК Организация,
		               |	Соглашения.СегментПартнеров КАК СегментПартнеров,
		               |	Соглашения.НалогообложениеНДС КАК НалогообложениеНДС,
		               |	Соглашения.Контрагент КАК Контрагент,
		               |	Соглашения.Партнер КАК Партнер,
					   //(( sk_231110 MOD-3531
					   |	СпрГрафикиОплаты.ФормаОплаты КАК ФормаОплаты
					   //)) sk_231110
		               |ПОМЕСТИТЬ ВТ_СоглашенияБезТорговыхТочек
		               |ИЗ
		               |	Справочник.СоглашенияСКлиентами КАК Соглашения
					   //(( sk_231113 MOD-3531  
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты КАК СпрГрафикиОплаты
					   |		ПО Соглашения.ГрафикОплаты = СпрГрафикиОплаты.Ссылка 
						//)) sk_231113
		               |ГДЕ
		               |	НЕ Соглашения.ПометкаУдаления
		               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		               |	И Соглашения.Типовое = ИСТИНА
		               |	И Соглашения.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Соглашения.Ссылка,
		               |	Соглашения.Номер,
		               |	Соглашения.Дата,
		               |	Соглашения.Типовое,
		               |	Соглашения.ВидЦен,
		               |	Соглашения.ДатаНачалаДействия,
		               |	Соглашения.ДатаОкончанияДействия,
		               |	Соглашения.Наименование,
		               |	Соглашения.Организация,
		               |	Соглашения.СегментПартнеров,
		               |	Соглашения.НалогообложениеНДС,
		               |	Соглашения.Контрагент,
		               |	Соглашения.Партнер,
					   //(( sk_231110 MOD-3531
					   |	СпрГрафикиОплаты.ФормаОплаты
					   //)) sk_231110
		               |ИЗ
		               |	Справочник.СоглашенияСКлиентами КАК Соглашения
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
		               |		ПО Соглашения.Контрагент = ВТ_Контрагенты.Ссылка
					   //(( sk_231113 MOD-3531  
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты КАК СпрГрафикиОплаты
					   |		ПО Соглашения.ГрафикОплаты = СпрГрафикиОплаты.Ссылка 
						//)) sk_231113
		               |ГДЕ
		               |	НЕ Соглашения.ПометкаУдаления
		               |	И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		               |	И Соглашения.Типовое = ЛОЖЬ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТ_СоглашенияБезТорговыхТочек.Ссылка КАК Ссылка,
		               |	ВТ_СоглашенияБезТорговыхТочек.Номер КАК Номер,
		               |	ВТ_СоглашенияБезТорговыхТочек.Дата КАК Дата,
		               |	ВТ_СоглашенияБезТорговыхТочек.Типовое КАК Типовое,
		               |	ВТ_СоглашенияБезТорговыхТочек.ВидЦен КАК ВидЦен,
		               |	ВТ_СоглашенияБезТорговыхТочек.ДатаНачалаДействия КАК ДатаНачалаДействия,
		               |	ВТ_СоглашенияБезТорговыхТочек.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		               |	ВТ_СоглашенияБезТорговыхТочек.Наименование КАК Наименование,
		               |	ВТ_СоглашенияБезТорговыхТочек.Организация КАК Организация,
		               |	ВТ_СоглашенияБезТорговыхТочек.СегментПартнеров КАК СегментПартнеров,
		               |	ВТ_СоглашенияБезТорговыхТочек.НалогообложениеНДС КАК НалогообложениеНДС,
		               |	ВТ_СоглашенияБезТорговыхТочек.Контрагент КАК мтКлиент,
		               |	ВТ_ПунктыРазгрузки.Ссылка КАК мтТорговаяТочка,
					   //(( sk_231110 MOD-3531
					   |	ВТ_СоглашенияБезТорговыхТочек.ФормаОплаты КАК ФормаОплаты 
					   //)) sk_231110
		               |ПОМЕСТИТЬ ВТ_Соглашения
		               |ИЗ
		               |	ВТ_СоглашенияБезТорговыхТочек КАК ВТ_СоглашенияБезТорговыхТочек
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПунктыРазгрузки КАК ВТ_ПунктыРазгрузки
		               |		ПО ВТ_СоглашенияБезТорговыхТочек.Партнер = ВТ_ПунктыРазгрузки.Клиент";
		
		Если ВключитьОтборПоОрганизациям Тогда
			ТекстЗапроса = ТекстЗапроса + "
					  |	ГДЕ ВТ_СоглашенияБезТорговыхТочек.Организация В (&Организации)";
		КонецЕсли;
		
	Иначе

		//Заглушка
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Соглашения.Ссылка КАК Ссылка,
		               |	Соглашения.Номер КАК Номер,
		               |	Соглашения.Дата КАК Дата,
		               |	Соглашения.Типовое КАК Типовое,
		               |	Соглашения.ВидЦен КАК ВидЦен,
		               |	Соглашения.ДатаНачалаДействия КАК ДатаНачалаДействия,
		               |	Соглашения.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		               |	Соглашения.Наименование КАК Наименование,
		               |	Соглашения.Организация КАК Организация,
		               |	Соглашения.СегментПартнеров КАК СегментПартнеров,
		               |	Соглашения.НалогообложениеНДС КАК НалогообложениеНДС,
		               |	Соглашения.Контрагент КАК Контрагент,
		               |	Соглашения.Партнер КАК Партнер,
					   //(( sk_231110 MOD-3531
					   |	СпрГрафикиОплаты.ФормаОплаты КАК ФормаОплаты
					   //)) sk_231110
		               |ПОМЕСТИТЬ ВТ_СоглашенияБезТорговыхТочек
		               |ИЗ
		               |	Справочник.СоглашенияСКлиентами КАК Соглашения
					   //(( sk_231113 MOD-3531  
					   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты КАК СпрГрафикиОплаты
					   |		ПО Соглашения.ГрафикОплаты = СпрГрафикиОплаты.Ссылка 
						//)) sk_231113
		               |ГДЕ
		               |	ИСТИНА = ЛОЖЬ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_СоглашенияБезТорговыхТочек.Ссылка КАК Ссылка,
		               |	ВТ_СоглашенияБезТорговыхТочек.Номер КАК Номер,
		               |	ВТ_СоглашенияБезТорговыхТочек.Дата КАК Дата,
		               |	ВТ_СоглашенияБезТорговыхТочек.Типовое КАК Типовое,
		               |	ВТ_СоглашенияБезТорговыхТочек.ВидЦен КАК ВидЦен,
		               |	ВТ_СоглашенияБезТорговыхТочек.ДатаНачалаДействия КАК ДатаНачалаДействия,
		               |	ВТ_СоглашенияБезТорговыхТочек.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		               |	ВТ_СоглашенияБезТорговыхТочек.Наименование КАК Наименование,
		               |	ВТ_СоглашенияБезТорговыхТочек.Организация КАК Организация,
		               |	ВТ_СоглашенияБезТорговыхТочек.СегментПартнеров КАК СегментПартнеров,
		               |	ВТ_СоглашенияБезТорговыхТочек.НалогообложениеНДС КАК НалогообложениеНДС,
		               |	ВТ_СоглашенияБезТорговыхТочек.Партнер КАК мтКлиент,
		               |	ВТ_СоглашенияБезТорговыхТочек.Ссылка КАК мтТорговаяТочка,
					   //(( sk_231113 MOD-3531
					   |	ВТ_СоглашенияБезТорговыхТочек.ФормаОплаты КАК ФормаОплаты
					   //)) sk_231113
		               |ПОМЕСТИТЬ ВТ_Соглашения
		               |ИЗ
		               |	ВТ_СоглашенияБезТорговыхТочек КАК ВТ_СоглашенияБезТорговыхТочек";

	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
					   |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
                       |	УНИЧТОЖИТЬ ВТ_СоглашенияБезТорговыхТочек";
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаОтбораДоговоров(ВключитьОтборПоОрганизациям)
	
	Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
		ИспользоватьНДС = "ВЫБОР 
						  |		КОГДА ДоговорыКонтрагентов.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) 
					  	  |			ТОГДА ЛОЖЬ 	
						  |		КОГДА ДоговорыКонтрагентов.СтавкаНДС = ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС) 
					  	  |			ТОГДА ЛОЖЬ 
					      |		ИНАЧЕ ИСТИНА 
						  |КОНЕЦ";	
	
	ИначеЕсли ПоколениеКонфигурации(">=УТ_11.3") Тогда
		ИспользоватьНДС = "ВЫБОР 
						  |		КОГДА ДоговорыКонтрагентов.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) 
					  	  |			ТОГДА ЛОЖЬ 		
						  |		КОГДА ДоговорыКонтрагентов.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) 
					  	  |			ТОГДА ЛОЖЬ 
					      |		КОГДА ДоговорыКонтрагентов.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0) 
					  	  |			ТОГДА ЛОЖЬ 
					      |		ИНАЧЕ ИСТИНА 
						  |КОНЕЦ";
	Иначе
		ИспользоватьНДС = "ЛОЖЬ";
	КонецЕсли;
	
	Если НЕ ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов Тогда
		// используются Контрагенты и Партнеры. (В справочник МТ контрагенты - выгружаются Партнеры, а в справочник МТ ТорговыеТочки - выгружаются Контрагенты)   
		ТекстЗапроса = "
		   |ВЫБРАТЬ
           |	ДоговорыКонтрагентов.Ссылка,
           |	ДоговорыКонтрагентов.Номер,
           |	ДоговорыКонтрагентов.Наименование,
           |	ДоговорыКонтрагентов.Контрагент,
           |	ДоговорыКонтрагентов.Партнер,
           |	ДоговорыКонтрагентов.Партнер КАК мтКлиент,
           |	ДоговорыКонтрагентов.Контрагент КАК мтТорговаяТочка,
           |	ДоговорыКонтрагентов.Дата,
           |	ДоговорыКонтрагентов.ДатаНачалаДействия,
           |	ДоговорыКонтрагентов.ДатаОкончанияДействия,
           |	ДоговорыКонтрагентов.Организация,
		   |	[ИспользоватьНДС] КАК ИспользоватьНДС
		   |ПОМЕСТИТЬ ВТ_Договоры
           |ИЗ
           |	ВТ_Контрагенты КАК ВТ_Контрагенты
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
           |		ПО ВТ_Контрагенты.Ссылка = ДоговорыКонтрагентов.Контрагент
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
           |		ПО (ВТ_Партнеры.Ссылка = ДоговорыКонтрагентов.Партнер)
           |ГДЕ
           |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
           |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)"; 
		
	ИначеЕсли НЕ ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов Тогда   
		// Используются только Партнеры. (В справочник МТ контрагенты - выгружаются Партнеры, а в справочник МТ ТорговыеТочки - Пустой)
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ДоговорыКонтрагентов.Ссылка,
			|	ДоговорыКонтрагентов.Номер,
			|	ДоговорыКонтрагентов.Наименование,
			|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,	
			|	ДоговорыКонтрагентов.Партнер,
            |	ДоговорыКонтрагентов.Партнер КАК мтКлиент,
            |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК мтТорговаяТочка,
			|	ДоговорыКонтрагентов.Дата,
			|	ДоговорыКонтрагентов.ДатаНачалаДействия,
			|	ДоговорыКонтрагентов.ДатаОкончанияДействия,
			|	ДоговорыКонтрагентов.Организация,
			|	[ИспользоватьНДС] КАК ИспользоватьНДС
			|ПОМЕСТИТЬ ВТ_Договоры
			|ИЗ
			|	ВТ_Партнеры КАК ВТ_Партнеры
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|		ПО ВТ_Партнеры.Ссылка = ДоговорыКонтрагентов.Партнер
			|ГДЕ
			|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
			|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
			|";
		
	ИначеЕсли ИспользоватьПунктыРазгрузки И ИспользоватьКонтрагентов Тогда
		
		// Если ИспользоватьКонтрагентов = Истина, тогда используем Контрагентов для Пуктов разгузки 
		//(В справочник МТ контрагенты - выгружаются Контрагенты, а в справочник МТ ТорговыеТочки - выгружаются Пункты Разгрузки)
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка,
		               |	ДоговорыКонтрагентов.Номер,
		               |	ДоговорыКонтрагентов.Наименование,
		               |	ДоговорыКонтрагентов.Контрагент,
		               |	ДоговорыКонтрагентов.Партнер,
           			   |	ДоговорыКонтрагентов.Контрагент КАК мтКлиент,
                       |	ВТ_ПунктыРазгрузки.Ссылка КАК мтТорговаяТочка,
		               |	ДоговорыКонтрагентов.Дата,
		               |	ДоговорыКонтрагентов.ДатаНачалаДействия,
		               |	ДоговорыКонтрагентов.ДатаОкончанияДействия,
		               |	ДоговорыКонтрагентов.Организация,
					   |	[ИспользоватьНДС] КАК ИспользоватьНДС
		               |ПОМЕСТИТЬ ВТ_Договоры
		               |ИЗ
		               |	ВТ_ПунктыРазгрузки КАК ВТ_ПунктыРазгрузки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |		ПО ВТ_ПунктыРазгрузки.Клиент = ДоговорыКонтрагентов.Контрагент
		               |ГДЕ
		               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		               |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)"; 
	
		   
	ИначеЕсли ИспользоватьПунктыРазгрузки И НЕ ИспользоватьКонтрагентов Тогда

		// Если ИспользоватьКонтрагентов = Ложь, тогда используем Партнеров для Пуктов разгузки   
		//(В справочник МТ контрагенты - выгружаются Партнеры, а в справочник МТ ТорговыеТочки - выгружаются Пункты Разгрузки)
	
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ДоговорыКонтрагентов.Ссылка,
		               |	ДоговорыКонтрагентов.Номер,
		               |	ДоговорыКонтрагентов.Наименование,
		               |	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		               |	ДоговорыКонтрагентов.Партнер,
           			   |	ДоговорыКонтрагентов.Партнер КАК мтКлиент,
                       |	ВТ_ПунктыРазгрузки.Ссылка КАК мтТорговаяТочка,
		               |	ДоговорыКонтрагентов.Дата,
		               |	ДоговорыКонтрагентов.ДатаНачалаДействия,
		               |	ДоговорыКонтрагентов.ДатаОкончанияДействия,
		               |	ДоговорыКонтрагентов.Организация,
					   |	[ИспользоватьНДС] КАК ИспользоватьНДС
		               |ПОМЕСТИТЬ ВТ_Договоры
		               |ИЗ
		               |	ВТ_ПунктыРазгрузки КАК ВТ_ПунктыРазгрузки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		               |		ПО ВТ_ПунктыРазгрузки.Клиент = ДоговорыКонтрагентов.Партнер
		               |ГДЕ
		               |	НЕ ДоговорыКонтрагентов.ПометкаУдаления
		               |	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)"; 

		
	КонецЕсли; 
	
	Если ВключитьОтборПоОрганизациям Тогда
		ТекстЗапроса = ТекстЗапроса + " И ДоговорыКонтрагентов.Организация В (&Организации)";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИспользоватьНДС]", ИспользоватьНДС);
	
	Возврат ТекстЗапроса;

КонецФункции 

Функция ТекстЗапросаОтбораНоменклатуры()

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Ассортимент
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.ЭтоГруппа
		|{ГДЕ
		|	Номенклатура.Ссылка.* КАК Номенклатура,
		|	Номенклатура.ВидНоменклатуры.*,
		|	Номенклатура.ГруппаДоступа.*,
		|	Номенклатура.ЦеноваяГруппа.*}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВыборкиНоменклатуры()

Процедура ЗаменитьЛитералы(Шаблон, СтррЛитералы)
	
	//@skip-check use-non-recommended-method
	Если Найти(Шаблон, "//[") <> 0 Тогда 
	    СтрНачалоВставки = "//[";
	Иначе
		СтрНачалоВставки = "[";
	КонецЕсли; 
	
	Для Каждого Литерал Из СтррЛитералы Цикл
		Шаблон = СтрЗаменить(Шаблон, СтрНачалоВставки + Литерал.Ключ + "]", 
			?(Литерал.Значение <> Неопределено, Литерал.Значение, Литерал.Ключ)); // если значение литерала не указано, заменяем его на наименование литерала
	КонецЦикла
	
КонецПроцедуры

Функция ТекстЗапросаВыборкиГруппПартнеров()
	
	//(( sk_231110 MOD-3323
	//ТекстЗапроса = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	Партнеры.ГруппаДоступа.Наименование КАК Наименование,
	//|	Партнеры.ГруппаДоступа КАК Ссылка
	//|ИЗ
	//|	ВТ_Партнеры КАК ВТ_Партнеры
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	//|		ПО ВТ_Партнеры.Ссылка = Партнеры.Ссылка
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Наименование";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СпрГруппыДоступаПартнеров.Ссылка КАК Ссылка,
	|	СпрГруппыДоступаПартнеров.Наименование КАК Наименование
	|ИЗ
	|	ВТ_Партнеры КАК ВТ_Партнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СпрПартнеры
	|		ПО ВТ_Партнеры.Ссылка = СпрПартнеры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступаПартнеров КАК СпрГруппыДоступаПартнеров
	|		ПО (СпрПартнеры.ГруппаДоступа = СпрГруппыДоступаПартнеров.Ссылка)
	|ГДЕ
	|	НЕ СпрГруппыДоступаПартнеров.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование"; 
	//)) sk_231110 MOD-3323
	
	Возврат ТекстЗапроса;
	
КонецФункции

// sk_220328 MOD-2386 
// Возвращает текст запроса по документам "ЗаказКлиента"
//
// Возвращаемое значение: 
//  Строка - текст запроса  
//
Функция ТекстЗапросаВыборкиДокументовЗаказПокупателя()

	//@skip-check structure-consructor-too-many-keys
	СтррЛитералы = Новый Структура("ЗаказКлиентаТоварыВес, ЗаказКлиентаТоварыКонтрагент, Упаковки, УсловиеОтбораЗаказов");
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда 
		СтррЛитералы.ЗаказКлиентаТоварыВес = 
			"ВЫБОР
			|	КОГДА ЗаказКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|	ИЛИ ЗаказКлиентаТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|				КОГДА ЗаказКлиентаТовары.Номенклатура.ВесЗнаменатель = 0
			|					ТОГДА 0
			|				ИНАЧЕ ЗаказКлиентаТовары.Номенклатура.ВесЧислитель / ЗаказКлиентаТовары.Номенклатура.ВесЗнаменатель * ЗаказКлиентаТовары.Количество
			|			КОНЕЦ
			|	ИНАЧЕ ЗаказКлиентаТовары.Упаковка.Вес * ЗаказКлиентаТовары.Количество
			|КОНЕЦ";

		СтррЛитералы.Упаковки = "УпаковкиЕдиницыИзмерения";
			
	Иначе // УТ11.1
		СтррЛитералы.ЗаказКлиентаТоварыВес = 
			"ВЫБОР
			|	КОГДА ЗаказКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|	ИЛИ ЗаказКлиентаТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|			КОГДА ЗаказКлиентаТовары.Номенклатура.Вес = 0
			|				ТОГДА 0
			|			ИНАЧЕ ЗаказКлиентаТовары.Номенклатура.Вес * ЗаказКлиентаТовары.Количество
			|		КОНЕЦ
			|	ИНАЧЕ ЗаказКлиентаТовары.Упаковка.Вес * ЗаказКлиентаТовары.Количество
			|КОНЕЦ";
		СтррЛитералы.Упаковки = "УпаковкиНоменклатуры";
	КонецЕсли;
	
	Если ГКонфигурация = "УТ_АП"  Тогда 
		СтррЛитералы.ЗаказКлиентаТоварыКонтрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьПунктыРазгрузки
			|			ТОГДА ЗаказКлиентаТовары.Ссылка.алкПунктРазгрузки
			|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Контрагент
			|	КОНЕЦ";
	ИначеЕсли ГКонфигурация = "УТ_АКФ" Тогда
			СтррЛитералы.ЗаказКлиентаТоварыКонтрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьАдресаДоставки
			|			ТОГДА ЗаказКлиентаТовары.Ссылка.ТорговаяТочка
			|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Контрагент
			|	КОНЕЦ";	
	Иначе 
		СтррЛитералы.ЗаказКлиентаТоварыКонтрагент = "ЗаказКлиентаТовары.Ссылка.Контрагент";
	КонецЕсли;
	
	Если ВыгружатьЗаказыПоПартнерамАгента Тогда 
		СтррЛитералы.УсловиеОтбораЗаказов = "ЗаказКлиента.Партнер В (ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры)";
	Иначе
		СтррЛитералы.УсловиеОтбораЗаказов = "ЗаказКлиента.Менеджер = &Агент"; // отбор по менеджеру в документе
	КонецЕсли; 
	
	СтррЛитералы.УсловиеОтбораЗаказов = СтррЛитералы.УсловиеОтбораЗаказов + " И ЗаказКлиента.Статус <> Значение(Перечисление.СтатусыЗаказовКлиентов.Закрыт)";
		
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказКлиента.Ссылка КАК Заказ
		|ПОМЕСТИТЬ ВТ_Заказы
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ЗаказКлиента.ПометкаУдаления
		|	И ЗаказКлиента.Проведен
		|	И [УсловиеОтбораЗаказов]
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Заказы.Заказ КАК Заказ,
		|	РеализацияТоваровУслуг.Ссылка КАК Реализация
		|ПОМЕСТИТЬ ВТ_РеализацииНаОснованииЗаказов
		|ИЗ 
		|	ВТ_Заказы КАК ВТ_Заказы	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВТ_Заказы.Заказ = РеализацияТоваровУслуг.ЗаказКлиента
		|ГДЕ
		|	НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|	И РеализацияТоваровУслуг.Проведен  
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ	
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
		|	ЗаказКлиентаТовары.Ссылка.Дата КАК Дата,
		|	ЗаказКлиентаТовары.Ссылка.Номер,
		|	ЗаказКлиентаТовары.Ссылка.Проведен,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ЗаказКлиентаТовары.Ссылка.Контрагент
		|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Партнер
		|	КОНЕЦ КАК Клиент,
		|	[ЗаказКлиентаТоварыКонтрагент] КАК Контрагент,
		|	ЗаказКлиентаТовары.Ссылка.Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА ЗаказКлиентаТовары.Ссылка.Договор
		|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Соглашение
		|	КОНЕЦ КАК Соглашение,
		|	ЗаказКлиентаТовары.Ссылка.Валюта КАК Валюта,
		|	ЗаказКлиентаТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказКлиентаТовары.Ссылка.Склад,
		|	ЗаказКлиентаТовары.Ссылка.ФормаОплаты КАК ФормаОплаты,  
		|	ВЫБОР
		|		КОГДА ВТ_РеализацииНаОснованииЗаказов.Реализация ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|   КОНЕЦ КАК ЕстьПодчиненные,
		|	ЗаказКлиентаТовары.Номенклатура,
		|	ЗаказКлиентаТовары.Характеристика,
		|	ВЫБОР
		|		КОГДА ЗаказКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.[Упаковки].ПустаяСсылка)
		|			ТОГДА ЗаказКлиентаТовары.Номенклатура
		|		ИНАЧЕ ЗаказКлиентаТовары.Упаковка
		|	КОНЕЦ КАК Упаковка, 
		|	ЗаказКлиентаТовары.КоличествоУпаковок КАК Количество,
		|	ЗаказКлиентаТовары.ВидЦены,
		|	ЗаказКлиентаТовары.Цена,
		|	ЗаказКлиентаТовары.Сумма,
		|	ЗаказКлиентаТовары.СтавкаНДС,
		|	ЗаказКлиентаТовары.СуммаНДС,
		|	ЗаказКлиентаТовары.СуммаСНДС,
		|	ЗаказКлиентаТовары.ПроцентРучнойСкидки,
		|	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки,
		|	ЗаказКлиентаТовары.СуммаРучнойСкидки,
		|	[ЗаказКлиентаТоварыВес] КАК Вес,
		|	ЗаказКлиентаТовары.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗаказКлиентаТовары.Ссылка.Комментарий КАК Комментарий
		|ИЗ 
		|	ВТ_Заказы КАК ВТ_Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары 
		|		ПО ВТ_Заказы.Заказ = ЗаказКлиентаТовары.Ссылка       
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РеализацииНаОснованииЗаказов КАК ВТ_РеализацииНаОснованииЗаказов
		|		ПО ЗаказКлиентаТовары.Ссылка = ВТ_РеализацииНаОснованииЗаказов.Заказ
		|		
		|
		|ИТОГИ
		|	СУММА(Вес),
		|	МАКСИМУМ(ЕстьПодчиненные)
		|ПО
		|	Ссылка";
		
	ЗаменитьЛитералы(ТекстЗапроса, СтррЛитералы); 
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_Заказы"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции  

// sk_220328 MOD-2386 
// ТекстЗапросаВыборкиДокументовЗаказПокупателя()
//
//Функция ТекстЗапросаВыборкиДокументовЗаказПокупателя_OLD(ОтборЗаказовПоПартнерамАгента)
//
//	//@skip-check structure-consructor-too-many-keys
//	СтррЛитералы = Новый Структура("ЗаказКлиентаТоварыВес, УсловиеОтбораЗаказа, ЗаказКлиентаТоварыКонтрагент, Упаковки");
//	
//	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда 
//		СтррЛитералы.ЗаказКлиентаТоварыВес = 
//			"ВЫБОР
//			|	КОГДА ЗаказКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
//			|	ИЛИ ЗаказКлиентаТовары.Упаковка.Вес = 0
//			|		ТОГДА ВЫБОР
//			|				КОГДА ЗаказКлиентаТовары.Номенклатура.ВесЗнаменатель = 0
//			|					ТОГДА 0
//			|				ИНАЧЕ ЗаказКлиентаТовары.Номенклатура.ВесЧислитель / ЗаказКлиентаТовары.Номенклатура.ВесЗнаменатель * ЗаказКлиентаТовары.Количество
//			|			КОНЕЦ
//			|	ИНАЧЕ ЗаказКлиентаТовары.Упаковка.Вес * ЗаказКлиентаТовары.Количество
//			|КОНЕЦ";
//
//		СтррЛитералы.Упаковки = "УпаковкиЕдиницыИзмерения";			
//	Иначе // УТ11.1
//		СтррЛитералы.ЗаказКлиентаТоварыВес = 
//			"ВЫБОР
//			|	КОГДА ЗаказКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
//			|	ИЛИ ЗаказКлиентаТовары.Упаковка.Вес = 0
//			|		ТОГДА ВЫБОР
//			|			КОГДА ЗаказКлиентаТовары.Номенклатура.Вес = 0
//			|				ТОГДА 0
//			|			ИНАЧЕ ЗаказКлиентаТовары.Номенклатура.Вес * ЗаказКлиентаТовары.Количество
//			|		КОНЕЦ
//			|	ИНАЧЕ ЗаказКлиентаТовары.Упаковка.Вес * ЗаказКлиентаТовары.Количество
//			|КОНЕЦ";
//		СтррЛитералы.Упаковки = "УпаковкиНоменклатуры";		
//	КонецЕсли;
//	
//	Если ГКонфигурация = "УТ_АП"  Тогда 
//		СтррЛитералы.ЗаказКлиентаТоварыКонтрагент = "
//			|	ВЫБОР
//			|		КОГДА &ИспользоватьПунктыРазгрузки
//			|			ТОГДА ЗаказКлиентаТовары.Ссылка.алкПунктРазгрузки
//			|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Контрагент
//			|	КОНЕЦ";
//	ИначеЕсли ГКонфигурация = "УТ_АКФ" Тогда
//			СтррЛитералы.ЗаказКлиентаТоварыКонтрагент = "
//			|	ВЫБОР
//			|		КОГДА &ИспользоватьАдресаДоставки
//			|			ТОГДА ЗаказКлиентаТовары.Ссылка.ТорговаяТочка
//			|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Контрагент
//			|	КОНЕЦ";		
//	Иначе 
//		СтррЛитералы.ЗаказКлиентаТоварыКонтрагент = "ЗаказКлиентаТовары.Ссылка.Контрагент";
//	КонецЕсли;
//	
//	Если ОтборЗаказовПоПартнерамАгента Тогда 
//		СтррЛитералы.УсловиеОтбораЗаказа = "ЗаказКлиентаТовары.Ссылка.Партнер В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )";
//	Иначе
//		СтррЛитералы.УсловиеОтбораЗаказа = "ЗаказКлиентаТовары.Ссылка.Менеджер = &Агент"; // отбор по менеджеру в документе
//	КонецЕсли; 
//	
//	СтррЛитералы.УсловиеОтбораЗаказа = СтррЛитералы.УсловиеОтбораЗаказа + " И ЗаказКлиентаТовары.Ссылка.Статус <> Значение(Перечисление.СтатусыЗаказовКлиентов.Закрыт)";
//	
//	ТекстЗапроса = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
//		|	ЗаказКлиентаТовары.Ссылка.Дата КАК Дата,
//		|	ЗаказКлиентаТовары.Ссылка.Номер,
//		|	ЗаказКлиентаТовары.Ссылка.Проведен,
//		|	ВЫБОР
//		|		КОГДА &ИспользоватьПунктыРазгрузки
//		|			ТОГДА ЗаказКлиентаТовары.Ссылка.Контрагент
//		|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Партнер
//		|	КОНЕЦ КАК Клиент,
//		|	[ЗаказКлиентаТоварыКонтрагент] КАК Контрагент,
//		|	ЗаказКлиентаТовары.Ссылка.Организация,
//		|	ВЫБОР
//		|		КОГДА &ИспользоватьПунктыРазгрузки
//		|			ТОГДА ЗаказКлиентаТовары.Ссылка.Договор
//		|		ИНАЧЕ ЗаказКлиентаТовары.Ссылка.Соглашение
//		|	КОНЕЦ КАК Соглашение,
//		|	ЗаказКлиентаТовары.Ссылка.Валюта КАК Валюта,
//		|	ЗаказКлиентаТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
//		|	ЗаказКлиентаТовары.Склад,
//		|	ЗаказКлиентаТовары.Ссылка.ФормаОплаты КАК ФормаОплаты,
//		|	ЗаказКлиентаТовары.Номенклатура,
//		|	ЗаказКлиентаТовары.Характеристика,
//		|	ВЫБОР
//		|		КОГДА ЗаказКлиентаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.[Упаковки].ПустаяСсылка)
//		|			ТОГДА ЗаказКлиентаТовары.Номенклатура
//		|		ИНАЧЕ ЗаказКлиентаТовары.Упаковка
//		|	КОНЕЦ КАК Упаковка, 
//		|	ЗаказКлиентаТовары.КоличествоУпаковок КАК Количество,
//		|	ЗаказКлиентаТовары.ВидЦены,
//		|	ЗаказКлиентаТовары.Цена,
//		|	ЗаказКлиентаТовары.Сумма,
//		|	ЗаказКлиентаТовары.СтавкаНДС,
//		|	ЗаказКлиентаТовары.СуммаНДС,
//		|	ЗаказКлиентаТовары.СуммаСНДС,
//		|	ЗаказКлиентаТовары.ПроцентРучнойСкидки,
//		|	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки,
//		|	ЗаказКлиентаТовары.СуммаРучнойСкидки,
//		|	[ЗаказКлиентаТоварыВес] КАК Вес,
//		|	ЗаказКлиентаТовары.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
//		|	ЗаказКлиентаТовары.Ссылка.Комментарий КАК Комментарий
//		|ИЗ
//		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
//		|ГДЕ
//		|	ЗаказКлиентаТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И НЕ ЗаказКлиентаТовары.Ссылка.ПометкаУдаления
//		|	И ЗаказКлиентаТовары.Ссылка.Проведен
//		|	И [УсловиеОтбораЗаказа]
//		|ИТОГИ
//		|	СУММА(Вес)
//		|ПО
//		|	Ссылка";
//		
//	ЗаменитьЛитералы(ТекстЗапроса, СтррЛитералы);
//		
//	Возврат ТекстЗапроса;
//	
//КонецФункции 

// sk_220328 MOD-2386 
// Возвращает текст запроса по документам "РеализацияТоваровУслуг"
//
// Возвращаемое значение: 
//  Строка - текст запроса  
//
Функция ТекстЗапросаВыборкиДокументовРеализация()
	
	//@skip-check structure-consructor-too-many-keys
	СтррЛитералы = Новый Структура("РеализацияТоваровВес, РеализацияТоваровКонтрагент, Упаковки, УсловиеОтбораРеализаций");
	
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
		СтррЛитералы.РеализацияТоваровВес = 
			"ВЫБОР
			|	КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|	ИЛИ РеализацияТоваровУслугТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|				КОГДА РеализацияТоваровУслугТовары.Номенклатура.ВесЗнаменатель = 0
			|					ТОГДА 0
			|				ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ВесЧислитель / РеализацияТоваровУслугТовары.Номенклатура.ВесЗнаменатель * РеализацияТоваровУслугТовары.Количество
			|			КОНЕЦ
			|	ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Вес * РеализацияТоваровУслугТовары.Количество
			|КОНЕЦ";
		СтррЛитералы.Упаковки = "УпаковкиЕдиницыИзмерения";
	Иначе // УТ11.1
		СтррЛитералы.РеализацияТоваровВес = 
			"ВЫБОР
			|	КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|	ИЛИ РеализацияТоваровУслугТовары.Упаковка.Вес = 0
			|		ТОГДА ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.Номенклатура.Вес = 0
			|				ТОГДА 0
			|			ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.Вес * РеализацияТоваровУслугТовары.Количество
			|		КОНЕЦ
			|	ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Вес * РеализацияТоваровУслугТовары.Количество
			|КОНЕЦ";
		СтррЛитералы.Упаковки = "УпаковкиНоменклатуры";
	КонецЕсли;
	
	Если ГКонфигурация = "УТ_АП"  Тогда 
		СтррЛитералы.РеализацияТоваровКонтрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьПунктыРазгрузки
			|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.алкПунктРазгрузки
			|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Контрагент
			|	КОНЕЦ";
	ИначеЕсли ГКонфигурация = "УТ_АКФ" Тогда
			СтррЛитералы.РеализацияТоваровКонтрагент = "
			|	ВЫБОР
			|		КОГДА &ИспользоватьАдресаДоставки
			|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.ТорговаяТочка
			|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Контрагент
			|	КОНЕЦ";		
	Иначе 
		СтррЛитералы.РеализацияТоваровКонтрагент = "РеализацияТоваровУслугТовары.Ссылка.Контрагент";
	КонецЕсли;    
	
	Если ВыгружатьЗаказыПоПартнерамАгента Тогда 
		СтррЛитералы.УсловиеОтбораРеализаций = "РеализацияТоваровУслуг.Партнер В (ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры)";
	Иначе
		СтррЛитералы.УсловиеОтбораРеализаций = "РеализацияТоваровУслуг.Менеджер = &Агент"; // отбор по менеджеру в документе
	КонецЕсли; 
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_РеализацииНаОснованииЗаказов.Реализация КАК Реализация
		|ПОМЕСТИТЬ ВТ_Реализации
		|ИЗ 
		|	ВТ_РеализацииНаОснованииЗаказов КАК ВТ_РеализацииНаОснованииЗаказов	
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления
		|	И РеализацияТоваровУслуг.Проведен
		|	И [УсловиеОтбораРеализаций]
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Реализация 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслугТовары.Ссылка.Дата КАК Дата,
		|	РеализацияТоваровУслугТовары.Ссылка.Номер,
		|	РеализацияТоваровУслугТовары.Ссылка.Проведен,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.Контрагент
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Партнер
		|	КОНЕЦ КАК Клиент,
		|	[РеализацияТоваровКонтрагент] КАК Контрагент,
		|	РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьПунктыРазгрузки
		|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.Договор
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Соглашение
		|	КОНЕЦ КАК Соглашение,
		|	РеализацияТоваровУслугТовары.Ссылка.Валюта КАК Валюта,
		|	РеализацияТоваровУслугТовары.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	РеализацияТоваровУслугТовары.Ссылка.Склад КАК Склад,
		|	РеализацияТоваровУслугТовары.Ссылка.ФормаОплаты КАК ФормаОплаты,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.[Упаковки].ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка
		|	КОНЕЦ КАК Упаковка, 
		|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК Количество,
		|	РеализацияТоваровУслугТовары.ВидЦены,
		|	РеализацияТоваровУслугТовары.Цена,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.СтавкаНДС,
		|	РеализацияТоваровУслугТовары.СуммаНДС,
		|	РеализацияТоваровУслугТовары.СуммаСНДС,
		|	РеализацияТоваровУслугТовары.ПроцентРучнойСкидки,
		|	РеализацияТоваровУслугТовары.ПроцентАвтоматическойСкидки,
		|	РеализацияТоваровУслугТовары.СуммаРучнойСкидки,
		|	[РеализацияТоваровВес] КАК Вес,
		|	РеализацияТоваровУслугТовары.Ссылка.Комментарий,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ДокументЗаказ
		|ИЗ 
		|	ВТ_Реализации КАК ВТ_Реализации     
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|	    ПО ВТ_Реализации.Реализация = РеализацияТоваровУслугТовары.Ссылка	
		|ИТОГИ
		|	СУММА(Вес)
		|ПО
		|	Ссылка";
	
	ЗаменитьЛитералы(ТекстЗапроса, СтррЛитералы);       
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_РеализацииНаОснованииЗаказов";
		
	Возврат ТекстЗапроса;
	
КонецФункции  

// sk_220328 MOD-2386 
// ТекстЗапросаВыборкиДокументовРеализация()
//
//Функция ТекстЗапросаВыборкиДокументовРеализация_OLD()
//	
//	СтррЛитералы = Новый Структура("РеализацияТоваровВес, РеализацияТоваровКонтрагент, Упаковки");
//	
//	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда
//		СтррЛитералы.РеализацияТоваровВес = 
//			"ВЫБОР
//			|	КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
//			|	ИЛИ РеализацияТоваровУслугТовары.Упаковка.Вес = 0
//			|		ТОГДА ВЫБОР
//			|				КОГДА РеализацияТоваровУслугТовары.Номенклатура.ВесЗнаменатель = 0
//			|					ТОГДА 0
//			|				ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.ВесЧислитель / РеализацияТоваровУслугТовары.Номенклатура.ВесЗнаменатель * РеализацияТоваровУслугТовары.Количество
//			|			КОНЕЦ
//			|	ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Вес * РеализацияТоваровУслугТовары.Количество
//			|КОНЕЦ";
//		СтррЛитералы.Упаковки = "УпаковкиЕдиницыИзмерения";
//	Иначе // УТ11.1
//		СтррЛитералы.РеализацияТоваровВес = 
//			"ВЫБОР
//			|	КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
//			|	ИЛИ РеализацияТоваровУслугТовары.Упаковка.Вес = 0
//			|		ТОГДА ВЫБОР
//			|			КОГДА РеализацияТоваровУслугТовары.Номенклатура.Вес = 0
//			|				ТОГДА 0
//			|			ИНАЧЕ РеализацияТоваровУслугТовары.Номенклатура.Вес * РеализацияТоваровУслугТовары.Количество
//			|		КОНЕЦ
//			|	ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Вес * РеализацияТоваровУслугТовары.Количество
//			|КОНЕЦ";
//		СтррЛитералы.Упаковки = "УпаковкиНоменклатуры";		
//	КонецЕсли;
//	
//	Если ГКонфигурация = "УТ_АП"  Тогда 
//		СтррЛитералы.РеализацияТоваровКонтрагент = "
//			|	ВЫБОР
//			|		КОГДА &ИспользоватьПунктыРазгрузки
//			|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.алкПунктРазгрузки
//			|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Контрагент
//			|	КОНЕЦ";
//	ИначеЕсли ГКонфигурация = "УТ_АКФ" Тогда
//			СтррЛитералы.РеализацияТоваровКонтрагент = "
//			|	ВЫБОР
//			|		КОГДА &ИспользоватьАдресаДоставки
//			|			ТОГДА РеализацияТоваровУслугТовары.Ссылка.ТорговаяТочка
//			|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Контрагент
//			|	КОНЕЦ";	
//	
//	Иначе 
//		СтррЛитералы.РеализацияТоваровКонтрагент = "РеализацияТоваровУслугТовары.Ссылка.Контрагент";
//	КонецЕсли;
//	
//	ТекстЗапроса = 
//		"ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	ДокументыРеализация.Ссылка КАК Ссылка
//		|ПОМЕСТИТЬ ДокументыПродажи
//		|ИЗ
//		|	(ВЫБРАТЬ
//		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка
//		|	ИЗ
//		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//		|	ГДЕ
//		|		ВЫРАЗИТЬ(РеализацияТоваровУслуг.ЗаказКлиента КАК Документ.ЗаказКлиента) В (&СписокЗаказов)
//		|	
//		|	ОБЪЕДИНИТЬ ВСЕ
//		|	
//		|	ВЫБРАТЬ
//		|		РеализацияТоваровУслуг.Ссылка
//		|	ИЗ
//		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//		|	ГДЕ
//		|		РеализацияТоваровУслуг.Менеджер = &Агент) КАК ДокументыРеализация
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ДокументыПродажи.Ссылка КАК Ссылка,
//		|	ДокументыПродажи.Ссылка.Дата КАК Дата,
//		|	ДокументыПродажи.Ссылка.Номер,
//		|	ДокументыПродажи.Ссылка.Проведен,
//		|	ВЫБОР
//		|		КОГДА &ИспользоватьПунктыРазгрузки
//		|			ТОГДА ДокументыПродажи.Ссылка.Контрагент
//		|		ИНАЧЕ ДокументыПродажи.Ссылка.Партнер
//		|	КОНЕЦ КАК Клиент,
//		|	[РеализацияТоваровКонтрагент] КАК Контрагент,
//		|	ДокументыПродажи.Ссылка.Организация КАК Организация,
//		|	ВЫБОР
//		|		КОГДА &ИспользоватьПунктыРазгрузки
//		|			ТОГДА ДокументыПродажи.Ссылка.Договор
//		|		ИНАЧЕ ДокументыПродажи.Ссылка.Соглашение
//		|	КОНЕЦ КАК Соглашение,
//		|	ДокументыПродажи.Ссылка.Валюта КАК Валюта,
//		|	ДокументыПродажи.Ссылка.СуммаДокумента КАК СуммаДокумента,
//		|	ДокументыПродажи.Ссылка.Склад КАК Склад,
//		|	ДокументыПродажи.Ссылка.ФормаОплаты КАК ФормаОплаты,
//		|	РеализацияТоваровУслугТовары.Номенклатура,
//		|	РеализацияТоваровУслугТовары.Характеристика,
//		|	ВЫБОР
//		|		КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.[Упаковки].ПустаяСсылка)
//		|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура
//		|		ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка
//		|	КОНЕЦ КАК Упаковка, 
//		|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК Количество,
//		|	РеализацияТоваровУслугТовары.ВидЦены,
//		|	РеализацияТоваровУслугТовары.Цена,
//		|	РеализацияТоваровУслугТовары.Сумма,
//		|	РеализацияТоваровУслугТовары.СтавкаНДС,
//		|	РеализацияТоваровУслугТовары.СуммаНДС,
//		|	РеализацияТоваровУслугТовары.СуммаСНДС,
//		|	РеализацияТоваровУслугТовары.ПроцентРучнойСкидки,
//		|	РеализацияТоваровУслугТовары.ПроцентАвтоматическойСкидки,
//		|	РеализацияТоваровУслугТовары.СуммаРучнойСкидки,
//		|	[РеализацияТоваровВес] КАК Вес,
//		|	РеализацияТоваровУслугТовары.Ссылка.Комментарий,
//		|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ДокументЗаказ
//		|ИЗ
//		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПродажи КАК ДокументыПродажи
//		|		ПО (ДокументыПродажи.Ссылка = РеализацияТоваровУслугТовары.Ссылка)
//		|ГДЕ
//		|	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
//		|	И НЕ РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления
//		|ИТОГИ
//		|	СУММА(Вес)
//		|ПО
//		|	Ссылка";
//	
//	ЗаменитьЛитералы(ТекстЗапроса, СтррЛитералы);
//		
//	Возврат ТекстЗапроса;
//	
//КонецФункции

Функция ТекстЗапросаВыборкиДокументовПеремещение()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПеремещениеТоваров.Ссылка
	               |ИЗ
	               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	               |ГДЕ
	               |	НЕ ПеремещениеТоваров.ПометкаУдаления
	               |	И ПеремещениеТоваров.Проведен
	               |	И ПеремещениеТоваров.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И (ПеремещениеТоваров.СкладПолучатель = &Склад
	               |			ИЛИ ПеремещениеТоваров.СкладОтправитель = &Склад)
	               |	И ПеремещениеТоваров.Статус = &Статус
				   |	И ПеремещениеТоваров.Ответственный = &Агент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПеремещениеТоваров.МоментВремени
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолученияИзображений()
	
	Если Не ВыгружатьИзображенияТоваров И Не ВыгружатьИзображенияПартнеров Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрОбласть = "";
	
	Если ВыгружатьИзображенияТоваров() Тогда
		
		СтрОбласть = СтрОбласть + "
		    |ВЫБРАТЬ
		    |	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
		    |	НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		    |	НоменклатураПрисоединенныеФайлы.Наименование КАК Наименование,
		    |	НоменклатураПрисоединенныеФайлы.Расширение КАК Расширение,
		    |	НоменклатураПрисоединенныеФайлы.Описание КАК Описание,
		    |	НоменклатураПрисоединенныеФайлы.ФайлХранилище КАК ФайлХранилище
		    |ИЗ
		    |	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		    |ГДЕ
		    |	НоменклатураПрисоединенныеФайлы.ВладелецФайла В ( ВЫБРАТЬ ВТ_Ассортимент.Ссылка ИЗ ВТ_Ассортимент )
		    |	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		    |	И НЕ НоменклатураПрисоединенныеФайлы.Зашифрован
			|";	
		
	КонецЕсли; 
	
	Если ВыгружатьИзображенияПартнеров Тогда
		
		СтрОбласть = СтрОбласть + ?(СтрОбласть = "", "", " ОБЪЕДИНИТЬ ВСЕ ") + "
		    |ВЫБРАТЬ
		    |	ПартнерыПрисоединенныеФайлы.Ссылка,
		    |	ПартнерыПрисоединенныеФайлы.ВладелецФайла,
		    |	ПартнерыПрисоединенныеФайлы.Наименование,
		    |	ПартнерыПрисоединенныеФайлы.Расширение,
		    |	ПартнерыПрисоединенныеФайлы.Описание,
		    |	ПартнерыПрисоединенныеФайлы.ФайлХранилище
		    |ИЗ
		    |	Справочник.ПартнерыПрисоединенныеФайлы КАК ПартнерыПрисоединенныеФайлы
		    |ГДЕ
		    |	ПартнерыПрисоединенныеФайлы.ВладелецФайла В ( ВЫБРАТЬ ВТ_Партнеры.Ссылка ИЗ ВТ_Партнеры )
		    |	И НЕ ПартнерыПрисоединенныеФайлы.ПометкаУдаления
		    |	И НЕ ПартнерыПрисоединенныеФайлы.Зашифрован
			|";	
		
	КонецЕсли; 
	
	СтррРегистрСведенийИзображений = Новый Структура("Регистр, Измерение, Ресурс");
	Если ПоколениеКонфигурации(">УТ_11.3") Тогда
		//((id_240716 MOD_3673
		Если ПоколениеКонфигурации(">=УТ_11.5.18.41") Или ПоколениеКонфигурации(">=УТ_11.5.17.110") Тогда 
			СтррРегистрСведенийИзображений.Регистр   = "ХранилищеФайлов"; 
			СтррРегистрСведенийИзображений.Ресурс    = "ХранилищеДвоичныхДанных.ДвоичныеДанные";
		Иначе
			СтррРегистрСведенийИзображений.Регистр   = "ДвоичныеДанныеФайлов";   
			СтррРегистрСведенийИзображений.Ресурс    = "ДвоичныеДанныеФайла";
		КонецЕсли;
		//))id_240716 MOD_3673
		СтррРегистрСведенийИзображений.Измерение = "Файл";
	Иначе
		СтррРегистрСведенийИзображений.Регистр   = "ПрисоединенныеФайлы";
		СтррРегистрСведенийИзображений.Измерение = "ПрисоединенныйФайл";
		СтррРегистрСведенийИзображений.Ресурс    = "ХранимыйФайл";
	КонецЕсли;                                   
	
	Текст = "
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрисоединенныеФайлы.[Ресурс] КАК ХранимыйФайл,
	|	ФайлыСправочников.Ссылка,
	|	ФайлыСправочников.ВладелецФайла,
	|	ФайлыСправочников.Наименование,
	|	ФайлыСправочников.Расширение,
	|	ФайлыСправочников.Описание
	|ИЗ
		|	([Область]) КАК ФайлыСправочников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.[Регистр] КАК ПрисоединенныеФайлы
		|		ПО ФайлыСправочников.Ссылка = ПрисоединенныеФайлы.[Измерение]
		|";
		
		СтррРегистрСведенийИзображений.Вставить("Область", СтрОбласть);
		ЗаменитьЛитералы(Текст, СтррРегистрСведенийИзображений);	
		
		Возврат Текст; 
	
КонецФункции

// ТекстыЗапросов
#КонецОбласти

#Область ФормированиеВремеменныхТаблиц

Функция МенеджерВТПодготовитьЗапрос(МенеджерВТ, ОтборыСКД, ТекстЗапроса)
	
	Если ТипЗнч(ОтборыСКД) = Тип("ЭлементОтбораКомпоновкиДанных") И ОтборыСКД.Использование Тогда
		ИспользоватьМакетКомпоновки = Истина;
	ИначеЕсли ТипЗнч(ОтборыСКД) = Тип("Массив") Тогда
		ИспользоватьМакетКомпоновки = Истина;
	Иначе
		ИспользоватьМакетКомпоновки = Ложь;
	КонецЕсли; 
	
	Если ИспользоватьМакетКомпоновки Тогда
		МакетКомпоновки = СформированныйМакетКомпоновкиДанных(ОтборыСКД, ТекстЗапроса);
		Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.НаборДанных.Запрос);
		Для Каждого ЭлементОтбора Из МакетКомпоновки.ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЦикла;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
	КонецЕсли; 
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Возврат Запрос;
	
КонецФункции

Процедура МенеджерВТВыполнитьЗапрос(МенеджерВТ, ОтборыСКД, ТекстЗапроса)
	
	Запрос = МенеджерВТПодготовитьЗапрос(МенеджерВТ, ОтборыСКД, ТекстЗапроса);
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает ВТ_ПланПродаж и ВТ_ПланПродажПоКатегориям
Процедура МенеджерВТПланыПродажПоНомеклатуреИКатегории(МенеджерВТ)

	Если ИспользоватьПланыПродаж И МенеджерВТ.Таблицы.Найти("ВТ_ПланПродаж") = Неопределено Тогда
		//1. ПланыПродаж по Номенклатуре
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		               |	ПланПродаж.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ПланПродаж
		               |ИЗ
		               |	Документ.ПланПродаж КАК ПланПродаж
		               |ГДЕ
		               |	ПланПродаж.Ответственный = &Агент
		               |	И ПланПродаж.ВидПлана.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПланПродаж)
		               |	И ПланПродаж.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
					   |	И &ТекущаяДата МЕЖДУ НАЧАЛОПЕРИОДА(ПланПродаж.НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(ПланПродаж.ОкончаниеПериода, ДЕНЬ)
		               |	И ПланПродаж.Проведен
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка";
								  
		Запрос.УстановитьПараметр("Агент", 	ВыбАгент);
		//@skip-check use-non-recommended-method
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	Конецесли;
	
	//2. ПланыПродаж по товарной категории
	Если ИспользоватьПланыПродажПоТоварнымКатегориям И МенеджерВТ.Таблицы.Найти("ВТ_ПланПродажПоКатегориям") = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПланПродажПоКатегориям.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ПланПродажПоКатегориям
		               |ИЗ
		               |	Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориям
		               |ГДЕ
		               |	ПланПродажПоКатегориям.Ответственный = &Агент
		               |	И ПланПродажПоКатегориям.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
					   |	И &ТекущаяДата МЕЖДУ НАЧАЛОПЕРИОДА(ПланПродажПоКатегориям.НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(ПланПродажПоКатегориям.ОкончаниеПериода, ДЕНЬ)
		               |	И ПланПродажПоКатегориям.Проведен
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка";

		Запрос.УстановитьПараметр("Агент", 	ВыбАгент);
		//@skip-check use-non-recommended-method
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	КонецЕсли;		
		
КонецПроцедуры	
	
// Основным планом продаж может быть план из Документ.ПланПродаж или Документ.ПланПродажПоКатегориям
// Основном планом продаж считается последний созданный документ в учетной системе из Документ.ПланПродаж и Документ.ПланПродажПоКатегориям.
Функция ПолучитьОсновнойПланПродаж(МенеджерВТ)
	
	Результат = Неопределено;
	
	//Запрос = Новый Запрос;
	////Для сортировке берется Дата документа, раньше сортировка происходила по МоментВремени
	//
	//////Без категории, при добавлении категорий удалить и взять запрос выше
	////Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	////               |	ПланПродажВСЕ.Ссылка КАК Ссылка
	////               |ИЗ
	////               |	(ВЫБРАТЬ
	////               |		ПланПродаж.Ссылка КАК Ссылка,
	////               |		ПланПродаж.Дата КАК Дата
	////               |	ИЗ
	////               |		ВТ_ПланПродаж КАК ВТ_ПланПродаж
	////               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланПродаж
	////               |			ПО ВТ_ПланПродаж.Ссылка = ПланПродаж.Ссылка) КАК ПланПродажВСЕ
	////               |
	////               |УПОРЯДОЧИТЬ ПО
	////               |	ПланПродажВСЕ.Дата УБЫВ"; 
	//
	//////Вместе с катигорией	
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	ПланПродажВСЕ.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	(ВЫБРАТЬ
	//               |		ПланПродаж.Ссылка КАК Ссылка,
	//               |		ПланПродаж.Дата КАК Дата
	//               |	ИЗ
	//               |		ВТ_ПланПродаж КАК ВТ_ПланПродаж
	//               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланПродаж
	//               |			ПО ВТ_ПланПродаж.Ссылка = ПланПродаж.Ссылка
	//               |	
	//               |	ОБЪЕДИНИТЬ ВСЕ
	//               |	
	//               |	ВЫБРАТЬ
	//               |		ПланПродажПоКатегориям.Ссылка,
	//               |		ПланПродажПоКатегориям.Дата
	//               |	ИЗ
	//               |		ВТ_ПланПродажПоКатегориям КАК ВТ_ПланПродажПоКатегориям
	//               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориям
	//               |			ПО ВТ_ПланПродажПоКатегориям.Ссылка = ПланПродажПоКатегориям.Ссылка) КАК ПланПродажВСЕ
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	ПланПродажВСЕ.Дата УБЫВ";
	//
	//	
	//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	//	ВыборкаРезультат = Запрос.Выполнить().Выбрать();

	//	Пока ВыборкаРезультат.Следующий() Цикл 
	//		//Первый элемент в отсортированом списке по дате
	//		Результат = ВыборкаРезультат.Ссылка;
	//		Прервать;
	//	КонецЦикла;
	//	Возврат Результат;

	Если НЕ ИспользоватьПланыПродаж И НЕ ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("ПланПродаж");
	ТЗРезультат.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	//1. ОсновнойПланПродажПономенклатуре	
	Если ИспользоватьПланыПродаж Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПланПродаж.Ссылка КАК Ссылка,
		               |	ПланПродаж.Дата КАК Дата
		               |ИЗ
		               |	ВТ_ПланПродаж КАК ВТ_ПланПродаж
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж КАК ПланПродаж
		               |		ПО ВТ_ПланПродаж.Ссылка = ПланПродаж.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПланПродаж.Дата УБЫВ";
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() = 1 Тогда
			СТЗРезультат = ТЗРезультат.Добавить();
			СТЗРезультат.ПланПродаж = Выборка[0].Ссылка;
			СТЗРезультат.Дата = Выборка[0].Дата;
		КонецЕсли;
	КонецЕсли;
	
	//2. ОсновнойПланПродажПоКатегории
	Если ИспользоватьПланыПродажПоТоварнымКатегориям Тогда
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПланПродажПоКатегориям.Ссылка КАК Ссылка,
		               |	ПланПродажПоКатегориям.Дата КАК Дата
		               |ИЗ
		               |	ВТ_ПланПродажПоКатегориям КАК ВТ_ПланПродажПоКатегориям
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориям
		               |		ПО ВТ_ПланПродажПоКатегориям.Ссылка = ПланПродажПоКатегориям.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ПланПродажПоКатегориям.Дата УБЫВ";
		
		Выборка = Запрос.Выполнить().Выгрузить();
		
		Если Выборка.Количество() = 1 Тогда
			СТЗРезультат = ТЗРезультат.Добавить();
			СТЗРезультат.ПланПродаж = Выборка[0].Ссылка;
			СТЗРезультат.Дата = Выборка[0].Дата;
		КонецЕсли;
	КонецЕсли;
	
	//3. ОсновнойПланПродаж
	Количество = ТЗРезультат.Количество();
	Если Количество = 1 Тогда
		Результат = ТЗРезультат[0].ПланПродаж;
	ИначеЕсли Количество = 2 Тогда
		ТЗРезультат.Сортировать("Дата"); 
		Результат = ТЗРезультат[1].ПланПродаж;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
	
// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_Организации (если такой еще не добавлено).
// Дополнительно обновляет кэш значений гКэшСпискиОбъектов - добавляет в свойство "ОрганизацииВыгрузки" массив выгружаемых организаций.
Процедура МенеджерВТОрганизации(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_Организации") = Неопределено Тогда 	
	
		Отбор = ЭлементОтбораПоЛевомуЗначению("Организации");
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Организации.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ВТ_Организации
			|{ВЫБРАТЬ
			|	Ссылка.*}
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ 
			|	Не Организации.ПометкаУдаления
			|{ГДЕ
			|	Организации.Ссылка.* КАК Организации}
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|";
			
		МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отбор, ТекстЗапроса);
		
		ВключенОтборПоОрганизациям = ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") И Отбор.Использование И ЗначениеЗаполнено(Отбор.ПравоеЗначение);
		
		// Помещаем массив организаций в кэш
		РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_Организации").ПолучитьДанные();			
		ГКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		ГКэшСпискиОбъектов.Вставить("ОрганизацииВыгрузки_ВключенОтбор", ВключенОтборПоОрганизациям); // признак, что в настройках агента включен отбор по организациям
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_ВидыЦен (если такой еще не добавлено).
Процедура МенеджерВТВидыЦен(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_ВидыЦен") = Неопределено Тогда
		//(( sk_220331 MOD-2946 
		СтррЛитералы = Новый Структура("УсловиеОтбораЭтоГруппа");
		Если ПоколениеКонфигурации(">=УТ_11.3.3") Тогда
			СтррЛитералы.УсловиеОтбораЭтоГруппа = "И Не ВидыЦен.ЭтоГруппа";
		Иначе
			СтррЛитералы.УсловиеОтбораЭтоГруппа = "";  
		КонецЕсли;
		//)) sk_220331
		Отборы = ЭлементОтбораПоЛевомуЗначению("ВидыЦен", "ТолькоВидыЦенИзСоглашений", МенеджерВТ);
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	ВидыЦен.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ВидыЦен
		               |{ВЫБРАТЬ
		               |	Ссылка.*}
		               |ИЗ
		               |	Справочник.ВидыЦен КАК ВидыЦен
					   |ГДЕ 
					   |	Не ВидыЦен.ПометкаУдаления  
					   //(( sk_220331 MOD-2946
					   |	[УсловиеОтбораЭтоГруппа]
					   //)) sk_220331
		               |{ГДЕ
					   |	ВидыЦен.Ссылка.* КАК ВидыЦен}
					   |ИНДЕКСИРОВАТЬ ПО
					   |	Ссылка";   
		ЗаменитьЛитералы(ТекстЗапроса, СтррЛитералы); // sk_220331 MOD-2946 		
		МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);
		
		// Добавляем вид цены для расчета рентабельности
		Если ПоказыватьРентабельность И ЗначениеЗаполнено(ВидЦеныДляРасчетаРентабельности) 
			И Не МенеджерВТ.Таблицы.Найти("ВТ_ВидыЦен") = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ
			              |	ВТ_ВидыЦен.Ссылка КАК Ссылка
			              |ИЗ
			              |	ВТ_ВидыЦен КАК ВТ_ВидыЦен
			              |ГДЕ
			              |	ВТ_ВидыЦен.Ссылка = &ВидЦеныДляРасчетаРентабельности";	
				 
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			Запрос.УстановитьПараметр("ВидЦеныДляРасчетаРентабельности", ВидЦеныДляРасчетаРентабельности);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				 Запрос.Текст = "ВЫБРАТЬ
				                |	ВТ_ВидыЦен.Ссылка КАК Ссылка
				                |ПОМЕСТИТЬ ВТ_ВидыЦенВрем
				                |ИЗ
				                |	ВТ_ВидыЦен КАК ВТ_ВидыЦен
				                |;
				                |
				                |////////////////////////////////////////////////////////////////////////////////
				                |УНИЧТОЖИТЬ ВТ_ВидыЦен
				                |;
				                |
				                |////////////////////////////////////////////////////////////////////////////////
				                |ВЫБРАТЬ
				                |	ВТ_ВидыЦенВрем.Ссылка КАК Ссылка
				                |ПОМЕСТИТЬ ВТ_ВидыЦен
				                |ИЗ
				                |	ВТ_ВидыЦенВрем КАК ВТ_ВидыЦенВрем
				                |
				                |ОБЪЕДИНИТЬ
				                |
				                |ВЫБРАТЬ
				                |	&ВидЦеныДляРасчетаРентабельности
				                |
				                |ИНДЕКСИРОВАТЬ ПО
				                |	Ссылка
				                |;
				                |
				                |////////////////////////////////////////////////////////////////////////////////
				                |УНИЧТОЖИТЬ ВТ_ВидыЦенВрем";
				 Запрос.Выполнить();
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_КурсыВалют (если такой еще не добавлено)
Процедура МенеджерВТКурсыВалют(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_КурсыВалют") = Неопределено Тогда 
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	КурсыВалют.Валюта,
			|	ВЫБОР
			|		КОГДА КурсыВалют.Курс ЕСТЬ NULL
			|			ТОГДА 1
			|		КОГДА КурсыВалют.Курс = 0
			|			ТОГДА 1
			|		ИНАЧЕ
			|			КурсыВалют.Курс
			|	КОНЕЦ / 
			|	ВЫБОР
			|		КОГДА КурсыВалют.Кратность ЕСТЬ NULL
			|			ТОГДА 1
			|		КОГДА КурсыВалют.Кратность = 0
			|			ТОГДА 1
			|		ИНАЧЕ
			|			КурсыВалют.Кратность
			|	КОНЕЦ КАК КурсКратный
			|ПОМЕСТИТЬ ВТ_КурсыВалют
			|ИЗ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата,) КАК КурсыВалют
			|ИНДЕКСИРОВАТЬ ПО
			|	Валюта
		    |";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		//@skip-check use-non-recommended-method
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		Запрос.Выполнить();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура МенеджерВТПартнеров(МенеджерВТ)

	Если МенеджерВТ.Таблицы.Найти("ВТ_Партнеры") <> Неопределено Тогда 	
		Возврат;
	КонецЕсли;
	
	Отборы = ЭлементОтбораПоЛевомуЗначению("Партнеры", "СегментыПартнеров,ТолькоПартнерыИзСпискаТТ,СсылкаСписокТТ,ТипПартнера,ТолькоПартнерыОсновногоМенеджера,ОсновнойМенеджер,РегиональныйМенеджер,БизнесРегион", МенеджерВТ);

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Партнеры
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ 
		|	Не Партнеры.ПометкаУдаления
		|{ГДЕ
		|	Партнеры.Ссылка.* КАК Партнеры}
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|";
	                             
	МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);
	
	Если РежимВыгрузкиРекомендуемый и ИспользоватьКонтрагентов Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_Партнеры.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ПартнерыОтбора
		               |ИЗ
		               |	ВТ_Партнеры КАК ВТ_Партнеры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Партнеры.Родитель КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_ПартнерыРодители
		               |ИЗ
		               |	ВТ_ПартнерыОтбора КАК ВТ_ПартнерыОтбора
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		               |		ПО ВТ_ПартнерыОтбора.Ссылка = Партнеры.Ссылка
		               |ГДЕ
		               |	НЕ Партнеры.ПометкаУдаления
		               |	И НЕ Партнеры.Родитель = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Партнеры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ПартнерыОтбора.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_Партнеры
		               |ИЗ
		               |	ВТ_ПартнерыОтбора КАК ВТ_ПартнерыОтбора
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	ВТ_ПартнерыРодители.Ссылка
		               |ИЗ
		               |	ВТ_ПартнерыРодители КАК ВТ_ПартнерыРодители
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПартнерыОтбора
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ПартнерыРодители";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
		
	КонецЕсли;

КонецПроцедуры 

Процедура МенеджерВТКонтрагенты(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_Контрагенты") <> Неопределено Тогда 	
		Возврат;
	КонецЕсли;
		
	Отборы = ЭлементОтбораПоЛевомуЗначению("Контрагенты");
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Контрагенты.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТ_Контрагенты
	               |{ВЫБРАТЬ
	               |	Ссылка.*}
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	НЕ Контрагенты.ПометкаУдаления
	               |{ГДЕ
	               |	Контрагенты.Ссылка.* КАК Контрагенты}
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка";
	
	МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);

КонецПроцедуры

Процедура МенеджерВТСоответствий(МенеджерВТ)
	
	Если НЕ РежимВыгрузкиРекомендуемый Тогда
		Возврат; //Для режима "Совместимый" выгрузка соответствий не требуется.
	Конецесли;  	
	
	// Помимо связки Контрагент - Партнер, нужно выгружать еще связку Контрагент - ПотомокПартнера (партнер у которого Родительпартнер связаны с контрагентом, 
	//		то есть партнер находится в группе партнера который связан с контрагентом)

	Запрос = Новый Запрос;  
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Контрагенты.Ссылка КАК Контрагент,
				   |	ИерархияПартнеров.Партнер
	               |ПОМЕСТИТЬ ВТ_Соответствия
	               |ИЗ
	               |	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
	               |		ПО ИерархияПартнеров.Партнер = ВТ_Партнеры.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ИерархияПартнеров.Родитель = Контрагенты.Партнер
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	               |		ПО (Контрагенты.Ссылка = ВТ_Контрагенты.Ссылка)";
	
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;		
	Запрос.Выполнить();

КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_Соглашения (если такой еще не добавлено)
Процедура МенеджерВТСоглашения(МенеджерВТ)

	МенеджерВТСегментыСоглашений(МенеджерВТ); // сегменты партнеров и соглашения у нас взаимосвязаны при выгрузке данных в МУ
	
	Если ИспользоватьПунктыРазгрузки Тогда
		МенеджерВТПунктыРазгрузки(МенеджерВТ);	
	КонецЕсли;
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_Соглашения") = Неопределено Тогда 	
		МОрганизации = ОрганизацииВыгрузки(МенеджерВТ);
		ВключитьОтборПоОрганизациям = ГКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки_ВключенОтбор");
		Запрос = Новый Запрос(ТекстЗапросаОтбораСоглашений(ВключитьОтборПоОрганизациям));
		Запрос.УстановитьПараметр("Организации", МОрганизации);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_Договоры (если такой еще не добавлено)
Процедура МенеджерВТДоговоры(МенеджерВТ)

	Если МенеджерВТ.Таблицы.Найти("ВТ_Договоры") = Неопределено Тогда 	
		Если ГКонфигурация = "УТ_АП" И ИспользоватьПунктыРазгрузки Тогда
			МенеджерВТПунктыРазгрузки(МенеджерВТ);
		КонецЕсли;
		МОрганизации = ОрганизацииВыгрузки(МенеджерВТ);
		ВключитьОтборПоОрганизациям = ГКэшСпискиОбъектов.Получить("ОрганизацииВыгрузки_ВключенОтбор");
		Запрос = Новый Запрос(ТекстЗапросаОтбораДоговоров(ВключитьОтборПоОрганизациям));
		Запрос.УстановитьПараметр("Организации", МОрганизации);
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

Процедура МенеджерВТСегменты(МенеджерВТ) 
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_Сегменты") <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МенеджерВТСегментыПартнеров(МенеджерВТ);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_СегментыПартнеров.Сегмент КАК Сегмент
	               |ПОМЕСТИТЬ ВТ_Сегменты
	               |ИЗ
	               |	ВТ_СегментыПартнеров КАК ВТ_СегментыПартнеров
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СегментыПартнеров.Сегмент
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сегмент";
	
	Запрос.Выполнить();
					
КонецПроцедуры

Процедура МенеджерВТСегментыПартнеров(МенеджерВТ, Условие = Неопределено, ЗначениеПараметра = Неопределено)
	
	//1. Проверка
	Если МенеджерВТ.Таблицы.Найти("ВТ_СегментыПартнеров") <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//2. Запрос			
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	//3. Сегменты созданные вручную
	Если Условие = Неопределено И МенеджерВТ.Таблицы.Найти("ВТ_Партнеры") <> Неопределено Тогда
		Запрос.Текст =  "ВЫБРАТЬ
		                |	ПартнерыСегмента.Сегмент КАК Сегмент,
		                |	ПартнерыСегмента.Партнер КАК Партнер
		                |ПОМЕСТИТЬ ВТ_СегментыРучные
		                |ИЗ
		                |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
		                |		ПО ПартнерыСегмента.Партнер = ВТ_Партнеры.Ссылка
		                |
		                |ИНДЕКСИРОВАТЬ ПО
		                |	Сегмент,
		                |	Партнер";
				
	Иначе
		Запрос.Текст =  "ВЫБРАТЬ
		                |	ПартнерыСегмента.Сегмент КАК Сегмент,
		                |	ПартнерыСегмента.Партнер КАК Партнер
		                |ПОМЕСТИТЬ ВТ_СегментыРучные
		                |ИЗ
		                |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		                |ГДЕ
		                |	&Условие
		                |
		                |ИНДЕКСИРОВАТЬ ПО
		                |	Сегмент,
		                |	Партнер";
		
		Если Условие = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ПартнерыСегмента.Сегмент " + Условие);
			Запрос.УстановитьПараметр("мСегмент", ЗначениеПараметра);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Выполнить();

	//4. Сегменты созданные динамически
	//4.1 Получение динамических сегментов
	Запрос.Текст = "ВЫБРАТЬ
	               |	СегментыПартнеров.Ссылка КАК Сегмент
	               |ИЗ
	               |	Справочник.СегментыПартнеров КАК СегментыПартнеров
	               |ГДЕ
	               |	СегментыПартнеров.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)";
	
	Если Условие <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И СегментыПартнеров.Ссылка " + Условие;
		Запрос.УстановитьПараметр("мСегмент", ЗначениеПараметра);
	КонецЕсли;
	
	//4.2 Получение партнеров динамически созданных сегментов
	ТЗСегментПартнер = Новый ТаблицаЗначений;
	ТЗСегментПартнер.Колонки.Добавить("Сегмент", Новый ОписаниеТипов("СправочникСсылка.СегментыПартнеров"));
	ТЗСегментПартнер.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТЗПартнеры = СегментыСервер.СписокЭлементовСКД(Выборка.Сегмент);
		Для Каждого стзпартнеры Из ТЗПартнеры Цикл
			стзСегментПартнер = ТЗСегментПартнер.Добавить();
			стзСегментПартнер.Сегмент = Выборка.Сегмент;
			стзСегментПартнер.Партнер = стзпартнеры.ЭлементСписка;
		КонецЦикла;			                                      			
	КонецЦикла;
	
	//4.3 Создаем ВТ динамических сегментов
	Запрос.Текст = "ВЫБРАТЬ
	               |	тзСегментПартнер.Сегмент КАК Сегмент,
	               |	тзСегментПартнер.Партнер КАК Партнер
	               |ПОМЕСТИТЬ ВТ_СегментыДинамические
	               |ИЗ
	               |	&тзСегментПартнер КАК тзСегментПартнер
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сегмент,
	               |	Партнер";
	
	//4.4 Добавен отбор.
	Если МенеджерВТ.Таблицы.Найти("ВТ_Партнеры") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_СегментыДинамические", "ВТ_СегментыДинамическиеВременная");	
		Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС;
		Запрос.Текст = Запрос.Текст + 	"ВЫБРАТЬ
		                              	|	ВТ_СегментыДинамическиеВременная.Сегмент КАК Сегмент,
		                              	|	ВТ_СегментыДинамическиеВременная.Партнер КАК Партнер
		                              	|ПОМЕСТИТЬ ВТ_СегментыДинамические
		                              	|ИЗ
		                              	|	ВТ_СегментыДинамическиеВременная КАК ВТ_СегментыДинамическиеВременная
		                              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
		                              	|		ПО ВТ_СегментыДинамическиеВременная.Партнер = ВТ_Партнеры.Ссылка
		                              	|
		                              	|ИНДЕКСИРОВАТЬ ПО
		                              	|	Сегмент,
		                              	|	Партнер";
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("тзСегментПартнер", ТЗСегментПартнер);
	Запрос.Выполнить();
	
	//5. обьединяем динамически и вручную созданные сегменты.
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ВТ_СегментыРучные.Сегмент КАК Сегмент,
	                |	ВТ_СегментыРучные.Партнер КАК Партнер
	                |ПОМЕСТИТЬ ВТ_СегментыПартнеров
	                |ИЗ
	                |	ВТ_СегментыРучные КАК ВТ_СегментыРучные
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ВТ_СегментыДинамические.Сегмент,
	                |	ВТ_СегментыДинамические.Партнер
	                |ИЗ
	                |	ВТ_СегментыДинамические КАК ВТ_СегментыДинамические
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	Сегмент,
	                |	Партнер
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ВТ_СегментыРучные
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |УНИЧТОЖИТЬ ВТ_СегментыДинамические";
	
	
	Запрос.Выполнить();
	
КонецПроцедуры

//@skip-check module-unused-method
Процедура МенеджерВТСегментыСоглашений(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_СегментыСоглашений") <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МенеджерВТОрганизации(МенеджерВТ);	
	МенеджерВТПартнеров(МенеджерВТ);
	МенеджерВТСегментыПартнеров(МенеджерВТ);
	МенеджерВТСегменты(МенеджерВТ);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпрСоглашенияСКлиентами.СегментПартнеров КАК Сегмент,
	               |	СпрСоглашенияСКлиентами.Ссылка КАК Соглашение
	               |ПОМЕСТИТЬ ВТ_СегментыСоглашенийПоОтбору
	               |ИЗ
	               |	Справочник.СоглашенияСКлиентами КАК СпрСоглашенияСКлиентами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Организации КАК ВТ_Организации
	               |		ПО СпрСоглашенияСКлиентами.Организация = ВТ_Организации.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Сегменты КАК ВТ_Сегменты
	               |		ПО СпрСоглашенияСКлиентами.СегментПартнеров = ВТ_Сегменты.Сегмент
	               |ГДЕ
	               |	СпрСоглашенияСКлиентами.Типовое
	               |	И НЕ СпрСоглашенияСКлиентами.ПометкаУдаления
	               |	И СпрСоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпрСоглашенияСКлиентами.СегментПартнеров КАК Сегмент,
	               |	СпрСоглашенияСКлиентами.Ссылка КАК Соглашение
	               |ПОМЕСТИТЬ ВТ_СегментыСоглашенийПустыеСсылки
	               |ИЗ
	               |	Справочник.СоглашенияСКлиентами КАК СпрСоглашенияСКлиентами
	               |ГДЕ
	               |	СпрСоглашенияСКлиентами.Типовое
	               |	И НЕ СпрСоглашенияСКлиентами.ПометкаУдаления
	               |	И СпрСоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	               |	И (СпрСоглашенияСКлиентами.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |			ИЛИ СпрСоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СегментыСоглашенийПоОтбору.Сегмент КАК Сегмент,
	               |	ВТ_СегментыСоглашенийПоОтбору.Соглашение КАК Соглашение
	               |ПОМЕСТИТЬ ВТ_СегментыСоглашенийБезГруппупировки
	               |ИЗ
	               |	ВТ_СегментыСоглашенийПоОтбору КАК ВТ_СегментыСоглашенийПоОтбору
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТ_СегментыСоглашенийПустыеСсылки.Сегмент,
	               |	ВТ_СегментыСоглашенийПустыеСсылки.Соглашение
	               |ИЗ
	               |	ВТ_СегментыСоглашенийПустыеСсылки КАК ВТ_СегментыСоглашенийПустыеСсылки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СегментыСоглашенийБезГруппупировки.Сегмент КАК Сегмент,
	               |	ВТ_СегментыСоглашенийБезГруппупировки.Соглашение КАК Соглашение
	               |ПОМЕСТИТЬ ВТ_СегментыСоглашений
	               |ИЗ
	               |	ВТ_СегментыСоглашенийБезГруппупировки КАК ВТ_СегментыСоглашенийБезГруппупировки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СегментыСоглашенийБезГруппупировки.Сегмент,
	               |	ВТ_СегментыСоглашенийБезГруппупировки.Соглашение
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сегмент";
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_СегментыСоглашенийПоОтбору";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_СегментыСоглашенийПустыеСсылки";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_СегментыСоглашенийБезГруппупировки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	// РезультатЗапроса = Запрос.Выполнить()
	Запрос.Выполнить();	
	
КонецПроцедуры

// sk_230825 MOD-3522
//
// Процедура добавляет в Менеджер временных таблиц таблицу ВТ_ПерсональныеЦеныТоваров (если такой еще не добавлено)
//
Процедура МенеджерВТПерсональныеЦеныТоваров(МенеджерВТ)

	Если МенеджерВТ.Таблицы.Найти("ВТ_ПерсональныеЦеныТоваров") = Неопределено Тогда 	
		
		МенеджерВТСоглашения(МенеджерВТ); // для получения персональных цен нам нужна временная таблица ВТ_Соглашения 
		
		Если ПоколениеКонфигурации("<УТ_11.2") ИЛИ ГКонфигурация = "УТ_UA"  Тогда
			КоэффициентУпаковки = "ЕСТЬNULL(СпрУпаковкиЦеныНоменклатуры.Коэффициент, 1)";
		Иначе 
			КоэффициентУпаковки = "ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиЦены, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиНоменклатуры, 1)";
			
			КоэффициентУпаковки = СтрЗаменить(КоэффициентУпаковки,
			"&ТекстЗапросаКоэффициентУпаковкиНоменклатуры",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СпрУпаковки",
			"СпрНоменклатура"));
			КоэффициентУпаковки = СтрЗаменить(КоэффициентУпаковки,
			"&ТекстЗапросаКоэффициентУпаковкиЦены",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СпрУпаковкиЦеныНоменклатуры",
			"СпрНоменклатура"));
		КонецЕсли;  
		
		СтррЛитералы = Новый Структура("Соединение");
		Если ПоколениеКонфигурации("<УТ_11.2") ИЛИ ГКонфигурация = "УТ_UA"  Тогда
			СтррЛитералы.Соединение = "				   
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковкиЦеныНоменклатуры
			|		ПО (СоглашенияСКлиентамиТовары.Упаковка = СпрУпаковкиЦеныНоменклатуры.Ссылка)"; 
		Иначе		
			СтррЛитералы.Соединение = "
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковкиЦеныНоменклатуры
			|		ПО (СоглашенияСКлиентамиТовары.Упаковка = СпрУпаковкиЦеныНоменклатуры.Ссылка) 
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
			|		ПО	СоглашенияСКлиентамиТовары.Номенклатура = СпрНоменклатура.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК СпрУпаковки
			|		ПО	СпрНоменклатура.ЕдиницаИзмерения = СпрУпаковки.Ссылка"; 
		КонецЕсли; 
		
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		Запрос.Текст = " 
			|ВЫБРАТЬ
			|	СоглашенияСКлиентамиТовары.Ссылка КАК Соглашение,
			|	СоглашенияСКлиентамиТовары.Номенклатура,
			|	СоглашенияСКлиентамиТовары.Характеристика,
			|	ВЫБОР
			|		КОГДА СоглашенияСКлиентамиТовары.Цена = 0
			|			ТОГДА СоглашенияСКлиентамиТовары.ВидЦены
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ВидЦены,
			|	ВЫРАЗИТЬ(ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) / &ЛитералКоэффициентУпаковки * ВЫБОР
			|			КОГДА &Валюта <> СоглашенияСКлиентамиТовары.Ссылка.Валюта
			|				ТОГДА ВТ_КурсыВалют.КурсКратный
			|			ИНАЧЕ 1
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена   
			|ПОМЕСТИТЬ ВТ_ПерсональныеЦеныТоваров
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Соглашения КАК ВТ_Соглашения
			|		ПО СоглашенияСКлиентамиТовары.Ссылка = ВТ_Соглашения.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
			|		ПО СоглашенияСКлиентамиТовары.Номенклатура = ВТ_Ассортимент.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК ВТ_КурсыВалют
			|		ПО СоглашенияСКлиентамиТовары.Ссылка.Валюта = ВТ_КурсыВалют.Валюта
			|	[Соединение]";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЛитералКоэффициентУпаковки", КоэффициентУпаковки);
		ЗаменитьЛитералы(Запрос.Текст, СтррЛитералы); 

		Запрос.УстановитьПараметр("Валюта", КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета"));	
		Запрос.Выполнить();
		
	КонецЕсли;

КонецПроцедуры  

// sk_230825 MOD-3522
// МенеджерВТПерсональныеЦеныТоваров()
//
//Процедура МенеджерВТПерсональныеЦеныТоваров_OLD(МенеджерВТ)
//
//	Если МенеджерВТ.Таблицы.Найти("ВТ_ПерсональныеЦеныТоваров") = Неопределено Тогда 	
//		
//		МенеджерВТСоглашения(МенеджерВТ); // для получения персональных цен нам нужна временная таблица ВТ_Соглашения
//		
//		ТекстЗапроса = " 
//			|ВЫБРАТЬ
//			|	СоглашенияСКлиентамиТовары.Ссылка КАК Соглашение,
//			|	СоглашенияСКлиентамиТовары.Номенклатура,
//			|	СоглашенияСКлиентамиТовары.Характеристика,
//			|	ВЫБОР
//			|		КОГДА СоглашенияСКлиентамиТовары.Цена = 0
//			|			ТОГДА СоглашенияСКлиентамиТовары.ВидЦены
//			|		ИНАЧЕ """"
//			|	КОНЕЦ КАК ВидЦены,
//			|	СоглашенияСКлиентамиТовары.Цена,
//			|	СоглашенияСКлиентамиТовары.Ссылка.Валюта КАК Валюта
//			|ПОМЕСТИТЬ ВТ_ПерсональныеЦеныТоваров // Персональные цены товаров без пересчета курса
//			|ИЗ
//			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Соглашения КАК ВТ_Соглашения
//			|		ПО СоглашенияСКлиентамиТовары.Ссылка = ВТ_Соглашения.Ссылка
//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ассортимент КАК ВТ_Ассортимент
//			|		ПО СоглашенияСКлиентамиТовары.Номенклатура = ВТ_Ассортимент.Ссылка
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	Валюта";	
//				
//		Запрос = Новый Запрос(ТекстЗапроса);
//		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
//		Запрос.Выполнить();
//		
//	КонецЕсли;
//
//КонецПроцедуры

// Добавляет в Менеджер временных таблиц таблицу ВТ_ПерсональныеЦеныЦеновыхГрупп (если такой еще не добавлено)
//
Процедура МенеджерВТПерсональныеЦеныЦеновыеГруппы(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_ПерсональныеЦеныЦеновыхГрупп") = Неопределено Тогда
		
		МенеджерВТСоглашения(МенеджерВТ); // Для получения персональных цен нам нужна временная таблица ВТ_Соглашения
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СоглашенияСКлиентамиЦеновыеГруппы.Ссылка КАК Соглашение,
		               |	СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
					   |	СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен КАК ВидЦен
		               |ПОМЕСТИТЬ ВТ_ПерсональныеЦеныЦеновыхГрупп
		               |ИЗ
		               |	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Соглашения КАК ВТ_Соглашения
					   |		ПО СоглашенияСКлиентамиЦеновыеГруппы.Ссылка = ВТ_Соглашения.Ссылка";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить()
	КонецЕсли;
	
КонецПроцедуры

Процедура МенеджерВТАсортиментОтбор(МенеджерВТ)

	Отборы = ЭлементОтбораПоЛевомуЗначению("Номенклатура", "ВидНоменклатуры,ГруппаДоступа,ЦеноваяГруппа");
	Запрос = МенеджерВТПодготовитьЗапрос(МенеджерВТ, Отборы, ТекстЗапросаОтбораНоменклатуры());
	Запрос.Выполнить();

КонецПроцедуры 

Процедура МенеджерВТОстатки(МенеджерВТ)

	// Варианты остатков товаров 
	// РН ТоварыОрганизаций – остатки товаров в разрезе юридических лиц, используется при контроле остатков перед проведением документов. 
	// РН ТоварыНаСкладах   – остатки товаров по складам. Эти остатки должны соответствовать физическому наличию товара на складе.
	// 						  	Основные регистраторы по этому регистру – складские ордера: Приходный, Расходный и прочие; в случае когда ордерная схема 
	//						  	не используется – Поступление товаров и Реализация товаров.
	// РН СвободныеОстатки  - показывают информацию о резервах, свободных остатках и графике будущего движения запасов.  
	//							Списание остатков производится документом Реализация товаров. 
	//							Но при использовании ордерной схемы – поступление товаров в свободные остатки отражается документом Приходный ордер. 
		
	
	Запрос = Новый Запрос; 
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("ВыгружатьТоварыСНулевымОстатком", ВыгружатьТоварыСНулевымОстатком);
	Запрос.УстановитьПараметр("УчитыватьРезервы", УчитыватьРезервы);
	
	Если ПоколениеКонфигурации(">=УТ_11.5.7") И РегистрОстатковТоваров = "СвободныеОстатки" Тогда    
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_Ассортимент.Ссылка КАК Номенклатура,
		               |	ЕСТЬNULL(РаспределениеЗапасов.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика,
		               |	ЕСТЬNULL(РаспределениеЗапасов.Склад, ЗНАЧЕНИЕ(Справочник.Склады.Пустаяссылка)) КАК Склад,
		               |	ЕСТЬNULL(ВЫБОР
		               |			КОГДА &УчитыватьРезервы
					   //(( sk_220215 MOD-3027
					   //|				ТОГДА РаспределениеЗапасов.Свободно - РаспределениеЗапасов.Резерв
		               //|			ИНАЧЕ РаспределениеЗапасов.Свободно
		               |				ТОГДА РаспределениеЗапасов.Свободно
		               |			ИНАЧЕ РаспределениеЗапасов.ВНаличии
		               |		КОНЕЦ, 0) КАК Остаток
					   //)) sk_220215
		               |ПОМЕСТИТЬ ВТ_ОстаткиБезГруппировки
		               |ИЗ
		               |	ВТ_Ассортимент КАК ВТ_Ассортимент
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
		               |			ПО РаспределениеЗапасов.Склад = ВТ_Склады.Ссылка
		               |		ПО ВТ_Ассортимент.Ссылка = РаспределениеЗапасов.Номенклатура
		               |			И (РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе))
		               |			И (РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
		               |ГДЕ
		               |	ВЫБОР
		               |			КОГДА &ВыгружатьТоварыСНулевымОстатком
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ ЕСТЬNULL(ВЫБОР
		               |						КОГДА &УчитыватьРезервы
					   //(( sk_220215 MOD-3027
					   //|							ТОГДА РаспределениеЗапасов.Свободно - РаспределениеЗапасов.Резерв
		               //|						ИНАЧЕ РаспределениеЗапасов.Свободно
		               |							ТОГДА РаспределениеЗапасов.Свободно
		               |						ИНАЧЕ РаспределениеЗапасов.ВНаличии
					   //)) sk_220215
		               |					КОНЕЦ, 0) > 0
		               |		КОНЕЦ
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ОстаткиБезГруппировки.Номенклатура КАК Номенклатура,
		               |	ВТ_ОстаткиБезГруппировки.Характеристика КАК Характеристика,
		               |	ВТ_ОстаткиБезГруппировки.Склад КАК Склад,
		               |	СУММА(ВТ_ОстаткиБезГруппировки.Остаток) КАК Остаток
		               |ПОМЕСТИТЬ ВТ_Остатки
		               |ИЗ
		               |	ВТ_ОстаткиБезГруппировки КАК ВТ_ОстаткиБезГруппировки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ОстаткиБезГруппировки.Номенклатура,
		               |	ВТ_ОстаткиБезГруппировки.Характеристика,
		               |	ВТ_ОстаткиБезГруппировки.Склад
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ВТ_ОстаткиБезГруппировки.Номенклатура,
		               |	ВТ_ОстаткиБезГруппировки.Характеристика,
		               |	ВТ_ОстаткиБезГруппировки.Склад";   	
	Иначе		
		СтррЛитералы = Новый Структура("ВРезервеСоСкладаОстаток, ВРезервеПодЗаказОстаток, РегистрНакопленияОстатков");	
		Если РегистрОстатковТоваров = "СвободныеОстатки" Тогда
			СтррЛитералы.РегистрНакопленияОстатков = "СвободныеОстатки";
			Если Не ПоколениеКонфигурации("<=УТ_11.1.2") ИЛИ ГКонфигурация = "УТ_UA" Тогда
				СтррЛитералы.ВРезервеСоСкладаОстаток = "ВРезервеСоСкладаОстаток";
				СтррЛитералы.ВРезервеПодЗаказОстаток = "СвободныеОстаткиТоваров.ВРезервеПодЗаказОстаток";
			Иначе
				СтррЛитералы.ВРезервеСоСкладаОстаток = "ВРезервеОстаток";
				СтррЛитералы.ВРезервеПодЗаказОстаток = "0"; 
			КонецЕсли;
		Иначе 
			СтррЛитералы.РегистрНакопленияОстатков 	= "ТоварыНаСкладах";
			СтррЛитералы.ВРезервеСоСкладаОстаток 	= "КОтгрузкеОстаток";
			СтррЛитералы.ВРезервеПодЗаказОстаток    = "0";
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Ассортимент.Ссылка КАК Номенклатура,
				   |	ЕСТЬNULL(СвободныеОстаткиТоваров.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.Пустаяссылка)) КАК Характеристика,
				   |	ЕСТЬNULL(СвободныеОстаткиТоваров.Склад, ЗНАЧЕНИЕ(Справочник.Склады.Пустаяссылка)) КАК Склад,
				   |	ЕСТЬNULL(ВЫБОР
				   |				КОГДА &УчитыватьРезервы
				   |					ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток] - [ВРезервеПодЗаказОстаток] 
				   |				ИНАЧЕ 
				   |					СвободныеОстаткиТоваров.ВНаличииОстаток КОНЕЦ, 0) КАК Остаток
	               |ПОМЕСТИТЬ ВТ_ОстаткиБезГруппировки
	               |ИЗ
	               |	ВТ_Ассортимент КАК ВТ_Ассортимент
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.[РегистрНакопленияОстатков].Остатки КАК СвободныеОстаткиТоваров
				   |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Склады КАК ВТ_Склады
				   |			ПО СвободныеОстаткиТоваров.Склад = ВТ_Склады.Ссылка 
				   |		ПО ВТ_Ассортимент.Ссылка = СвободныеОстаткиТоваров.Номенклатура
				   |ГДЕ
				   |	ВЫБОР
				   |		КОГДА &ВыгружатьТоварыСНулевымОстатком
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ 
				   |			ЕСТЬNULL(ВЫБОР
				   |						КОГДА &УчитыватьРезервы
				   |							ТОГДА СвободныеОстаткиТоваров.ВНаличииОстаток - СвободныеОстаткиТоваров.[ВРезервеСоСкладаОстаток] - [ВРезервеПодЗаказОстаток] 
				   |						ИНАЧЕ СвободныеОстаткиТоваров.ВНаличииОстаток
				   |					КОНЕЦ, 0) > 0
				   |		КОНЕЦ
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |Выбрать 
				   |	ВТ_ОстаткиБезГруппировки.Номенклатура,
				   |	ВТ_ОстаткиБезГруппировки.Характеристика,
				   |	ВТ_ОстаткиБезГруппировки.Склад,
				   |	СУММА(ВТ_ОстаткиБезГруппировки.Остаток) КАК Остаток
				   |ПОМЕСТИТЬ ВТ_Остатки
				   |ИЗ
				   |	ВТ_ОстаткиБезГруппировки КАК ВТ_ОстаткиБезГруппировки
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ВТ_ОстаткиБезГруппировки.Номенклатура,
				   |	ВТ_ОстаткиБезГруппировки.Характеристика,
				   |	ВТ_ОстаткиБезГруппировки.Склад
				   |
				   |ИНДЕКСИРОВАТЬ ПО
				   |	Номенклатура,
				   |	Характеристика,
				   |	Склад";    
		ЗаменитьЛитералы(Запрос.Текст, СтррЛитералы); 	
	КонецЕсли;
	    	
	Запрос.Текст = Запрос.Текст + Символы.ПС + ";" + Символы.ПС + "Уничтожить ВТ_ОстаткиБезГруппировки";		
	Запрос.Выполнить();
	
	Если ВыгружатьТоварыСНулевымОстатком Тогда
		
		//Связь Видов номенклатуры и номенклатуры , для получения общ характеристик
		//Виды номенклатуры, для получения общ характеристик
		//Виды общих характеристик, для получения общ характеристик
		//Соединение индивидуальных и общих характеристик номенклатуры
		//Добавление к ВТ_Остатки характеристик с нулевыми остатками.
		//Создание новой ВТ_Остатки
		Запрос.Текст = "ВЫБРАТЬ
		               |	спрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		               |	спрНоменклатура.Ссылка КАК Номенклатура
		               |ПОМЕСТИТЬ ВТ_НоменклатураПоВидам
		               |ИЗ
		               |	ВТ_Ассортимент КАК ВТ_Ассортимент
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		               |		ПО ВТ_Ассортимент.ссылка = спрНоменклатура.Ссылка
		               |ГДЕ
		               |	НЕ спрНоменклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(справочник.ВидыНоменклатуры.ПустаяСсылка)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ВидНоменклатуры,
		               |	Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_НоменклатураПоВидам.ВидНоменклатуры КАК ВидНоменклатуры
		               |ПОМЕСТИТЬ ВТ_ВидыНоменклатуры
		               |ИЗ
		               |	ВТ_НоменклатураПоВидам КАК ВТ_НоменклатураПоВидам
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_НоменклатураПоВидам.ВидНоменклатуры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ВидНоменклатуры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	спрВидыНоменклатуры.Ссылка КАК ВидНоменклатуры
		               |ПОМЕСТИТЬ ВТ_ВидыОбщХарактеристик
		               |ИЗ
		               |	ВТ_ВидыНоменклатуры КАК ВТ_ВидыНоменклатуры
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК спрВидыНоменклатуры
		               |		ПО ВТ_ВидыНоменклатуры.ВидНоменклатуры = спрВидыНоменклатуры.Ссылка
		               |ГДЕ
		               |	спрВидыНоменклатуры.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ВидНоменклатуры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ВидыНоменклатуры
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	спрХарактеристики.Владелец КАК Номенклатура,
		               |	спрХарактеристики.Ссылка КАК Характеристика
		               |ПОМЕСТИТЬ ВТ_АссортиментХарактеристики
		               |ИЗ
		               |	ВТ_Ассортимент КАК ВТ_Ассортимент
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК спрХарактеристики
		               |		ПО ВТ_Ассортимент.Ссылка = спрХарактеристики.Владелец
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ВТ_НоменклатураПоВидам.Номенклатура,
		               |	спрХарактеристики.Ссылка
		               |ИЗ
		               |	ВТ_ВидыОбщХарактеристик КАК ВТ_ВидыОбщХарактеристик
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК спрХарактеристики
		               |		ПО ВТ_ВидыОбщХарактеристик.ВидНоменклатуры = спрХарактеристики.Владелец
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураПоВидам КАК ВТ_НоменклатураПоВидам
		               |		ПО ВТ_ВидыОбщХарактеристик.ВидНоменклатуры = ВТ_НоменклатураПоВидам.ВидНоменклатуры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_ВидыОбщХарактеристик
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_НоменклатураПоВидам
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(ВТ_АссортиментХарактеристики.Номенклатура, ВТ_Остатки.Номенклатура) КАК Номенклатура,
		               |	ЕСТЬNULL(ВТ_АссортиментХарактеристики.Характеристика, ВТ_Остатки.Характеристика) КАК Характеристика,
		               |	ЕСТЬNULL(ВТ_Остатки.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
		               |	ЕСТЬNULL(ВТ_Остатки.Остаток, 0) КАК Остаток
		               |ПОМЕСТИТЬ ВТ_ОстаткиАссортимент
		               |ИЗ
		               |	ВТ_АссортиментХарактеристики КАК ВТ_АссортиментХарактеристики
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
		               |		ПО ВТ_АссортиментХарактеристики.Номенклатура = ВТ_Остатки.Номенклатура
		               |			И ВТ_АссортиментХарактеристики.Характеристика = ВТ_Остатки.Характеристика
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика,
		               |	Склад
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_АссортиментХарактеристики
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТ_Остатки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ОстаткиАссортимент.Номенклатура КАК Номенклатура,
		               |	ВТ_ОстаткиАссортимент.Характеристика КАК Характеристика,
		               |	ВТ_ОстаткиАссортимент.Склад КАК Склад,
		               |	ВТ_ОстаткиАссортимент.Остаток КАК Остаток
		               |ПОМЕСТИТЬ ВТ_Остатки
		               |ИЗ
		               |	ВТ_ОстаткиАссортимент КАК ВТ_ОстаткиАссортимент
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура,
		               |	Характеристика,
		               |	Склад";
		
		Запрос.Выполнить();		
			   
	КонецЕсли;	
	
КонецПроцедуры 

// Корректирует ВТ_Ассортимент полученный в МенеджерВТАсортиментОтбор().
// Добавляет лополнительные фильтры или номенклатуру, котрая используется в локументах или планах
Процедура МенеджерВТАссортимент(МенеджерВТ) 

	//Общая настройка "Выгружать номенклатуру с нулевыми отстатками".
	Если НЕ ВыгружатьТоварыСНулевымОстатком Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_Ассортимент
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Остатки.Номенклатура КАК Ссылка
		               |ПОМЕСТИТЬ ВТ_Ассортимент
		               |ИЗ
		               |	ВТ_Остатки КАК ВТ_Остатки
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_Остатки.Номенклатура
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка";
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

Процедура МенеджерВТСклады(МенеджерВТ)
	
	Отборы = ЭлементОтбораПоЛевомуЗначению("Склады");
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Ссылка
		|ПОМЕСТИТЬ ВТ_Склады
		|{ВЫБРАТЬ
		|	Ссылка.*}
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|{ГДЕ
		|	Склады.Ссылка.* КАК Склады}";

	МенеджерВТВыполнитьЗапрос(МенеджерВТ, Отборы, ТекстЗапроса);
	
КонецПроцедуры
 
Функция МенеджерВТПолучить()
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	// Клиенты
	МенеджерВТОрганизации(МенеджерВТ);
	МенеджерВТПартнеров(МенеджерВТ);
	Если РежимВыгрузкиРекомендуемый ИЛИ ИспользоватьПунктыРазгрузки Тогда
		МенеджерВТКонтрагенты(МенеджерВТ);
	КонецЕсли;
	
	МенеджерВТСоответствий(МенеджерВТ);
	
	// Номенклатура
	МенеджерВТСклады(МенеджерВТ);
	МенеджерВТКурсыВалют(МенеджерВТ);
	МенеджерВТВидыЦен(МенеджерВТ);
	МенеджерВТАсортиментОтбор(МенеджерВТ);
	МенеджерВТОстатки(МенеджерВТ);
	МенеджерВТАссортимент(МенеджерВТ); //Корректирует ВТ_Асртимент полученный в МенеджерВТАсортиментОтбор()
	
	//Другое.
	МенеджерВТПланыПродажПоНомеклатуреИКатегории(МенеджерВТ);
	
	//Проверки
	Если МенеджерВТ.Таблицы.Найти("ВТ_Склады").ПолучитьДанные().Пустой() Тогда
		Возврат НСтр("ru = 'Не найдены отобранные склады или магазины. Проверьте наличие в базе складов или магазинов, указанных в настройках отбора данных агента.'");
	ИначеЕсли МенеджерВТ.Таблицы.Найти("ВТ_Ассортимент").ПолучитьДанные().Пустой() Тогда
		Возврат НСтр("ru = 'Не найдена отобранная номенклатура. Проверьте наличие в базе номенклатуры, указанной в настройках отбора данных агента.'");
	КонецЕсли;	
	
	Возврат МенеджерВТ;
КонецФункции 

// ФормированиеВремеменныхТаблиц
#КонецОбласти

// Функция создает zip-архив выгружаемых картинок.
// 
// Параметры:
//		ТЗКартинки - Неопределено, ТаблицаЗначений - таблица свойств картинок с колонками:
//		 * Ссылка - СправочникСсылка.НоменклатураПрисоединенныеФайлы, СправочникСсылка.ПартнерыПрисоединенныеФайлы - ссылка
// 		 * Описание - Строка - описание картинки
//  	 * ИмяФайла - Строка - имя файла для записи в zip-архив
//  
// Возвращаемое значение:
//  Строка   - полный путь к zip-архиву.
//  
Функция СформироватьАрхивСКартинками(ТЗКартинки)
	   	
	Перем КаталогКартинок;
	Если ТЗКартинки = Неопределено Или ТЗКартинки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
				
	КаталогКартинок = КаталогВременныхФайловДляТранспорта("Pictures");
	
	ПолноеИмяАрхиваКартинок = КаталогКартинок + "GoodsPhotosFromCDB.zip";
	
	АрхивКартинок = Новый ЗаписьZipФайла(ПолноеИмяАрхиваКартинок, , , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);		
	
	Для Каждого СтрокаТ Из ТЗКартинки Цикл			
		ФайлСсылка = СтрокаТ.Ссылка; 
		ПолноеИмяФайла = КаталогКартинок + СтрокаТ.ИмяФайла;
		Если Не ФайлСуществует(ПолноеИмяФайла) Тогда
			Если ПоколениеКонфигурации(">=УТ_11.4.4") Тогда // gi_240219 - было ">=УТ_11.4.5.24"
				Попытка
					ОбщийМодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
					ДанныеФайла = ОбщийМодульРаботаСФайлами.ДвоичныеДанныеФайла(ФайлСсылка);
				Исключение
					Продолжить;
				КонецПопытки;
				Если ТипЗнч(ДанныеФайла) = Тип("Картинка") Тогда
					Картинка = ДанныеФайла;
				ИначеЕсли ТипЗнч(ДанныеФайла) = Тип("ДвоичныеДанные") Тогда
					Картинка = Новый Картинка(ДанныеФайла);
				Иначе
					Продолжить;
				КонецЕсли;
				Картинка.Записать(ПолноеИмяФайла);
			Иначе	
				//@skip-check wrong-string-literal-content
				ОбщийМодульПрисоединенныеФайлы = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлы");
				СтррДанные = ОбщийМодульПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлСсылка);	
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтррДанные.СсылкаНаДвоичныеДанныеФайла);
				Если ДвоичныеДанные = Неопределено Тогда
					Продолжить;
				Иначе
					ДвоичныеДанные.Записать(ПолноеИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		АрхивКартинок.Добавить(ПолноеИмяФайла);

	КонецЦикла;
	
	АрхивКартинок.Записать();
	
	Возврат ПолноеИмяАрхиваКартинок;
	
КонецФункции

// ВыгрузкаДанных
#КонецОбласти

#Область ЗагрузкаДанных

Процедура ОповеститьОСменеАгента(СтарыйАгент, НовыйАгент)
	
	Текст = "В файле загрузки данных указан агент (%1), отличающийся от текущего (%2). Загрузка проводится для агента из файла выгрузки (%1).";
	Текст = СтрШаблон_(Текст, Строка(НовыйАгент), Строка(СтарыйАгент));
	ОповеститьОСобытии(Текст, "ОшибкаНастройки", , СтарыйАгент);
	
КонецПроцедуры

// Функция возвращает Истина, если загрузка прошла корректно.
// В параметре СтррСведения передаются в функцию дополнительные сведения о загружаемых данных
// (например, свойство "КаталогФото" - с временным каталогом распакованных фото).
Функция ЗагрузитьДанныеИзФайлаОбмена(Агент, ФайлОбмена, ЗагружаемыеОбъекты)

	Результат = Истина;	
	
	ТекстXML = Новый ЧтениеXML;
	ТекстXML.ОткрытьФайл(ФайлОбмена.ПолноеИмя);
	
	ВерсияКонфигурации = "";
	Пока ТекстXML.Прочитать() Цикл

		Если Не ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		КонецЕсли;
		Если ТекстXML.Имя = "DATA" Тогда
			//НазваниеКонфигурации = ТекстXML.ЗначениеАтрибута("CONFIGNAME");
			ВерсияКонфигурации = ТекстXML.ЗначениеАтрибута("CONFIGVERSION");
		КонецЕсли;

		Если ТекстXML.Имя = "CONSTANTS" Тогда
			Если ТекстXML.Имя = "CONSTANTS"	И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Продолжить;
			КонецЕсли;
			СтррКонстанты = КонстантыИзФайлаОбмена(ТекстXML);
			ЗагружаемыеОбъекты.СтррКонстанты = СтррКонстанты;
			АгентЗагрузки = ТорговыйПредставительИзФайлаОбмена(СтррКонстанты);
			Если Агент <> АгентЗагрузки Тогда
				Если НЕ СтррКонстанты.Свойство("АгентЗагрузки") Тогда // константа отсутствует в файле
					Текст = СтрШаблон_(НСтр("ru = 'В файле загрузки отсуствтует константа ""ИдентификаторАгента""! (GUID=""%1"").'"), КонстантыМТПолучитьGUID("АгентЗагрузки"));
				ИначеЕсли ЗначениеЗаполнено(АгентЗагрузки) Тогда // константа присутствует в файле и ссылается на существующего агента
					Текст = НСтр("ru = 'Получен файл загрузки от агента:'") + " " + АгентЗагрузки;
				Иначе // константа присутствует в файле и ссылается на не существующего агента
					Текст = СтрШаблон_(НСтр("ru = 'В файле выгрузки указана ссылка на несуществующего агента ""%1"". Загрузка проигнорирована.'"), СтррКонстанты.АгентЗагрузки);
					ОповеститьОСобытии(Текст);
					Результат = Ложь;
					Прервать;
				КонецЕсли; 
				ОповеститьОСобытии(Текст);
				
				Если Не ЭтоСсылкаНаНайденныйОбъект(АгентЗагрузки) Тогда // Не можем определить по значению константы "АгентЗагрузки" из МУ от какого агента получен файл ...
					Если ЗначениеЗаполнено(Агент) Тогда // ... тогда загружаем файл для текущего выбранного агента - такое допустимо, например, при автообмене по FTP - мы точно знаем - нужно загружать для выбранного агента
						ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Данные загружаются для текущего агента ""%1"".'"), Агент), "ОшибкаЗапись",, "ТекущийАгент");
					Иначе // ... тогда останавливаем загрузку - не понятно для какого агента грузить файл
						ОповеститьОСобытии(НСтр("ru = 'Загрузка проигнорирована.'"));
						Результат = Ложь;
						Прервать;
					КонецЕсли;
				Иначе
					НастройкиАгента = ПолучитьНастройкиАгента(АгентЗагрузки);
					Если НастройкиАгента = Неопределено Тогда
						Если Не ЗначениеЗаполнено(Агент) Тогда
							ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Не найдены настройки для агента ""%1"". Загрузка проигнорирована.'"), АгентЗагрузки), "ОшибкаЗапись");
							Результат = Ложь;
							Прервать;
						Иначе
							ОповеститьОСобытии(СтрШаблон_(НСтр("ru = 'Не найдены настройки для агента ""%1"". Загружаются данные с использованием настроек для агента ""%2"".'"), 
								АгентЗагрузки, Агент), "ОшибкаЗапись",, "ТекущийАгент");
							Агент = АгентЗагрузки;						
						КонецЕсли; 
					Иначе
						ВыбНастройкиАгента = НастройкиАгента;
						ОповеститьОСменеАгента(Агент, АгентЗагрузки);
						Агент = АгентЗагрузки;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
			ПроверитьОбновитьВерсиюПриложенияАгента(ВерсияКонфигурации);
		ИначеЕсли ТекстXML.Имя = "CATALOGS" Тогда
			ЗагрузитьСправочники(ТекстXML, ЗагружаемыеОбъекты);
		ИначеЕсли ТекстXML.Имя = "DOCUMENTS" Тогда
			ЗагрузитьДокументы(ТекстXML, ЗагружаемыеОбъекты);
		ИначеЕсли ТекстXML.Имя = "PICTURES" Тогда
			ЗагрузитьФотографииЭтап2(ТекстXML, ЗагружаемыеОбъекты);
		КонецЕсли;
		
	КонецЦикла;
	ТекстXML.Закрыть();

	Если Результат Тогда
		ЗакончитьЗагрузкуКонтактнойИнформации(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуСоглашений(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуКассовыхОрдеров(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуВозвратов(ЗагружаемыеОбъекты); 							
		ЗакончитьЗагрузкуВиртуальныхДокументов(ЗагружаемыеОбъекты);
		ЗакончитьЗагрузкуФотографий(ЗагружаемыеОбъекты);
		ПодтвержденияСохранитьВсе(ВыбНастройкиАгента.СсылкаМУ, ЗагружаемыеОбъекты); // сохранение подтверждений для всех объектов
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

#Область ЗагрузкаСправочников

Процедура ЗагрузитьСправочники(ТекстXML, ЗагружаемыеОбъекты)
	
	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Имя = ТекстXML.Имя;
		
		Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда	
			Если Имя = "KILLEDS" Тогда
				ТекстXML.Пропустить();
				Продолжить;
			КонецЕсли;			
		ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Если Имя = "CATALOGS" Тогда
				Прервать;
			ИначеЕсли Имя = "CATALOG" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИдСпрXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдСпрXML <> Неопределено Тогда
			ИдВидСправочникаМТ = Новый УникальныйИдентификатор(ИдСпрXML);
			ВидСправочника = ВидОбъектаПоИдентификатору(ИдВидСправочникаМТ, Истина, "Справочник");
			Если ВидСправочника = Неопределено Тогда 
				ТекстXML.Пропустить();
				Если ТекстXML.Имя = "CATALOGS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				Иначе
					Продолжить;				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Пока ТекстXML.Прочитать() Цикл
			
			Имя = ТекстXML.Имя;
			
			Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда
				Если Имя = "ITEM" Тогда
					ЗагрузитьСправочник(ТекстXML, ЗагружаемыеОбъекты, ВидСправочника, ИдВидСправочникаМТ);
				ИначеЕсли Имя = "KILLEDS" Или Имя = "GROUPS" Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
			ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
				Если Имя = "ELEMENTS" Или Имя = "CATALOG" Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЦикла; // Пока ТекстXML.Прочитать() Цикл
	
КонецПроцедуры

// Функция загружает элемент справочника из XML-файла в БД 1С:Предприятия.
// Параметры:
//		ТекстXML - ЧтениеXML - объект ЧтениеXML
//		ЗагружаемыеОбъекты - Структура - структура для запоминания загруженных объектов (используется для выгрузки подтверждений).
//		ВидСправочника - Строка - вид справочника в 1С:Предприятии
//		ИдВидСправочникаМТ - УникальныйИдентификатор - идентификатор вида документа в МТ
// Возвращаемое значение:
// 		Булево - Истина - если элемент справочника успешно записан в БД, иначе Ложь.
//  
Функция ЗагрузитьСправочник(ТекстXML, ЗагружаемыеОбъекты, ВидСправочника, ИдВидСправочникаМТ)
	
	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидСправочника = "*НастройкиОбмена" Тогда
		// элементы справочника МТ "Настройки обмена" - это настройки обмена МУ (в т.ч., полученные из ЛК) - их нет смысла грузить в БД 1С
		ТекстXML.Пропустить();
		Возврат Истина;
		
	ИначеЕсли ВидСправочника = "СоставПланаПродаж" Тогда
		ТекстXML.Пропустить();
		Возврат Истина;
		
	ИначеЕсли ВидСправочника = "*ПечатныеФормыДокументов" Тогда
		ТекстXML.Пропустить();
		Возврат Истина;
	
	ИначеЕсли ВидСправочника = "*ФотоДокументов" ИЛИ ВидСправочника = "*ФотоСправочников" Тогда
		СтррДанныеФото = ПолучитьДанныеДляЗагрузкиФото(ТекстXML, ВидСправочника);
		Если СтррДанныеФото.ОписаниеОшибки = Неопределено Тогда
			// фотографии загружаются в УТ в 3 этапа
			ЗагрузитьФотографиюЭтап1(СтррДанныеФото, ЗагружаемыеОбъекты); // загрузка в ЗагружаемыеОбъекты.тзФотографии
			ТекстXML.Прочитать();
			Возврат Истина;
		Иначе
			ОповеститьОСобытии(СтррДанныеФото.ОписаниеОшибки);
			ОповеститьОСобытии(СтрШаблон_("Пропущена загрузка элемента справочника ""%1"". Загрузка не предусмотрена!", ВидСправочника)); 
			ТекстXML.Пропустить();
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидСправочника = "ДополнительныеОтчетыДляМУ" Тогда
		ЗагрузитьСправочникОтчеты(ТекстXML, ЗагружаемыеОбъекты); // загрузка данных для выгрузки отчетов.
		ТекстXML.Прочитать();
		Возврат Истина;
		
	КонецЕсли;
	
	Попытка	
		СпрМенеджер = Справочники[ВидСправочника];
	Исключение
		ОповеститьОСобытии(СтрШаблон_("Пропущена загрузка элемента справочника ""%1"". Загрузка не предусмотрена!", ВидСправочника)); 
		ТекстXML.Пропустить();
		Возврат Ложь;
	КонецПопытки;	
	
	ПредставлениеСпр = СпрМенеджер.ПустаяСсылка().Метаданные().Синоним;
	
	ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
	
	Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда
		ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
		ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
		ОбъектСпр.ОбменДанными.Загрузка = Истина;
		ОбъектСпр.УстановитьНовыйКод();
		ЭтоНовыйОбъект = Истина;
	Иначе						
		ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
		ОбъектСпр.Разблокировать();
		ЭтоНовыйОбъект = Ложь;
	КонецЕсли;
	
	Если ВидСправочника = "Партнеры" Тогда   		
		Результат = ЗагрузитьПартнера(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);	
		ТекстXML.Прочитать();		//</ITEM> или <TABLES>	
		// Пропускаем табличные части. Сегменты и статусы.
		Если ТекстXML.Имя = "TABLES" Тогда
			ТекстXML.Пропустить();	
			ТекстXML.Прочитать();
		КонецЕсли;
	ИначеЕсли ВидСправочника = "Контрагенты" Тогда;
		Если ИспользоватьАдресаДоставки И ГКонфигурация = "УТ_АКФ" Тогда
			Результат = АКФ_ЗаполнитьКоординатыПоАдресуДоставки(ТекстXML);
		Иначе	
			Результат = ЗагрузитьКонтрагента(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
		КонецЕсли;
		ТекстXML.Прочитать();		//</ITEM> или <TABLES>	
		// Пропускаем табличные части. Сегменты и статусы.
		Если ТекстXML.Имя = "TABLES" Тогда
			ТекстXML.Пропустить();	
			ТекстXML.Прочитать();
		КонецЕсли;	
	ИначеЕсли ВидСправочника = "СоглашенияСКлиентами" Тогда
		Результат = ЗагрузитьСоглашение(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект); 
		ТекстXML.Прочитать();
	ИначеЕсли ВидСправочника = "ВидыКонтактнойИнформации" Тогда
		Результат = ЗагрузитьКонтактнуюИнформацию(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
		ТекстXML.Прочитать();
	ИначеЕсли ВидСправочника = "КонтактныеЛицаПартнеров" Тогда
		Результат = ЗагрузитьКонтактноеЛицо(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
		ТекстXML.Прочитать();
	Иначе
		Текст = "Пропущена загрузка справочника ""%1 (%2)"". Загрузка справочников не предусмотрена!";
		ОповеститьОСобытии(СтрШаблон_(Текст, ПредставлениеСпр, ВидСправочника)); 
		ТекстXML.Пропустить();
		ТекстXML.Прочитать();
		Возврат Ложь;
	КонецЕсли;
		
	Если Результат Тогда
		
		СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Добавить();
		СтрокаТ.Идентификатор 	 	= ИдОбъекта; // идентификатор (GUID) элемента справочника
		СтрокаТ.ИдВидСправочникаМТ	= ИдВидСправочникаМТ; // идентификатор (GUID) вида справочника в МТ
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьПартнера(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект)
	
	НаименованиеПартнера 	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	Долгота 				= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A09"), ТекстXML.ПолучитьАтрибут("A016"));
	Широта	 				= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A010"),  ТекстXML.ПолучитьАтрибут("A017"));
	
	ОбъектСпр.Наименование 			= НаименованиеПартнера;
	ОбъектСпр.НаименованиеПолное 	= НаименованиеПартнера; 
	ОбъектСпр.ГруппаДоступа 		= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("GrpId0"), "ГруппыДоступаПартнеров");
	ОбъектСпр.Комментарий 			= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A07"), ТекстXML.ПолучитьАтрибут("A023"));
	ОбъектСпр.ОбменДанными.Загрузка = Ложь;
	ОбъектСпр.ЮрФизЛицо 			= Перечисления.КомпанияЧастноеЛицо.Компания;
	Если ЭтоНовыйОбъект Тогда
		ОбъектСпр.ОсновнойМенеджер  = ВыбНастройкиАгента.Пользователь;
	КонецЕсли;	
	Если Не ОбъектСпр.ЭтоГруппа Тогда 
		ОбъектСпр.Клиент = Истина;		
	КонецЕсли;

	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	Если Результат Тогда
		ЗаписьДопСвойствПартнера(ОбъектСпр, Новый Структура("Широта,Долгота", Широта, Долгота));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// предварительная загрузка фотографии в ТЗ
Процедура ЗагрузитьФотографиюЭтап1(СтррДанные, ЗагружаемыеОбъекты)
	
	ТЗФотографии = ЗагружаемыеОбъекты.тзФотографии;
	СтрокаТ = ТЗФотографии.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТ, СтррДанные);
	
КонецПроцедуры

Процедура ЗагрузитьСправочникОтчеты(ТекстXML, ЗагружаемыеОбъекты)
	
	Если ТекстXML.Имя <> "ITEM" ИЛИ ТекстXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		Возврат; //Ошибка
	КонецЕсли;                              
	
	// Данные ITEM 
	//	Идентификатор	- Идентификатор
	//	Наименование	- Строка
	//	ИмяФайла		- Строка
	//	ВстроенныйОтчет - Строка
	ТЗСправочникОтчеты = ЗагружаемыеОбъекты.тзСправочникОтчеты;      
	СТЗСправочникОтчеты = ТЗСправочникОтчеты.Добавить();
	СТЗСправочникОтчеты.Идентификатор 	=  Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("GUID"));
	СТЗСправочникОтчеты.Наименование 	=  ТекстXML.ПолучитьАтрибут("A01");
	СТЗСправочникОтчеты.ИмяФайла 		=  ТекстXML.ПолучитьАтрибут("A02");
	СТЗСправочникОтчеты.ВстроенныйОтчет =  ТекстXML.ПолучитьАтрибут("A03");
	
	// Параметры TABLE
	//	GUID			- Идентификатор
	//	Родитель		- Идентификатор
	//	Имя				- Строка
	//	Тип				- Строка
	//	Обязательный	- Строка
	//	Значение		- Строка
	ТЗСправочникОтчетыПараметры = ЗагружаемыеОбъекты.тзСправочникОтчетыПараметры;
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли ТекстXML.Имя <> "ITEM" ИЛИ ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Продолжить; 
		КонецЕсли;
		
		СТЗСправочникОтчетыПараметры = ТЗСправочникОтчетыПараметры.Добавить();
		СТЗСправочникОтчетыПараметры.GUID			= Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("GUID"));
		СТЗСправочникОтчетыПараметры.Родитель		= Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("CtlgId"));
		СТЗСправочникОтчетыПараметры.Имя			= ТекстXML.ПолучитьАтрибут("A01");
		СТЗСправочникОтчетыПараметры.Тип			= ТекстXML.ПолучитьАтрибут("A02");
		СТЗСправочникОтчетыПараметры.Обязательный	= ТекстXML.ПолучитьАтрибут("A03");
		СТЗСправочникОтчетыПараметры.Значение		= ТекстXML.ПолучитьАтрибут("A04");
		
	КонецЦикла;   
	
Конецпроцедуры

Функция ЗагрузитьКонтрагента(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект)

	НаименованиеКонтрагента	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	ИННКПП		 		    = ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A013"), ТекстXML.ПолучитьАтрибут("A016"));
	
	ОбъектСпр.Наименование 				= НаименованиеКонтрагента;
	ОбъектСпр.НаименованиеПолное 		= НаименованиеКонтрагента;
	ОбъектСпр.Партнер					= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A02"), "Партнеры");
	ОбъектСпр.ЮрФизЛицо 				= Перечисления.ЮрФизЛицо.ЮрЛицо;
	ОбъектСпр.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ОбъектСпр.ОбменДанными.Загрузка 	= Ложь;
	МИннКпп = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИННКПП, "/");
	Если МИннКпп.Количество() = 2 Тогда
		ОбъектСпр.ИНН = МИннКпп[0];
		ОбъектСпр.КПП = МИннКпп[1];
	ИначеЕсли МИннКпп.Количество() = 1 Тогда
		ОбъектСпр.ИНН = МИннКпп[0];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектСпр.ГоловнойКонтрагент) И Не ОбъектСпр.ОбособленноеПодразделение Тогда
		ОбъектСпр.ГоловнойКонтрагент = ?(ЭтоНовыйОбъект, ОбъектСпр.ПолучитьСсылкуНового(), ОбъектСпр.Ссылка);
	КонецЕсли;
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтактнуюИнформацию(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	
	ИдЭлемента       = ТекстXML.ПолучитьАтрибут("GUID");
	ИдКонтрагент     = ТекстXML.ПолучитьАтрибут("A01");
	ИдТорговаяТочка  = ТекстXML.ПолучитьАтрибут("A02");
	ИдКонтактноеЛицо = ТекстXML.ПолучитьАтрибут("A03");
	ИдТип 		     = ТекстXML.ПолучитьАтрибут("A04");
	ИдВид 		     = ТекстXML.ПолучитьАтрибут("A05");
	Представление    = ТекстXML.ПолучитьАтрибут("A06");

	Если ИдКонтактноеЛицо <> Неопределено Тогда
		ТекОбъект = СсылкаИзСправочника(ИдКонтактноеЛицо, "КонтактныеЛицаПартнеров");
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники.КонтактныеЛицаПартнеров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтактноеЛицо));
		КонецЕсли;
	ИначеЕсли ИдКонтрагент <> Неопределено Тогда
		СтрВидСправочник = ?(РежимВыгрузкиРекомендуемый, "Контрагенты", "Партнеры");
		ТекОбъект = СсылкаИзСправочника(ИдКонтрагент, СтрВидСправочник);
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники[СтрВидСправочник].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдКонтрагент));
		КонецЕсли;
	ИначеЕсли ИдТорговаяТочка <> Неопределено Тогда
		СтрВидСправочник = ?(РежимВыгрузкиРекомендуемый, "Партнеры", "Контрагенты");
		ТекОбъект = СсылкаИзСправочника(ИдТорговаяТочка, СтрВидСправочник);  
		Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
			ОбъектСпр = Справочники[СтрВидСправочник].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдТорговаяТочка));
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;            
	
	ТипКИ = ПолучитьЗначениеПеречисленияПоИдентификатору("ТипыКонтактнойИнформации", ИдТип);
	ВидКИ = СсылкаИзСправочника(ИдВид, "ВидыКонтактнойИнформации");
	Если ТипКИ = "" Или ВидКИ.Пустая() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Значит, скорее всего, объект контактной информации еще не был загружен.
	Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
		
		Если НЕ ЗагружаемыеОбъекты.Свойство("ТЗКонтактнаяИнформация") Тогда 
			ТЗн = Новый ТаблицаЗначений();
			ТЗн.Колонки.Добавить("ОбъектСпр");
			ТЗн.Колонки.Добавить("ИдЭлемента");
			ТЗн.Колонки.Добавить("Тип");
			ТЗн.Колонки.Добавить("Вид");
			ТЗн.Колонки.Добавить("Представление");
			ЗагружаемыеОбъекты.Вставить("ТЗКонтактнаяИнформация", ТЗн);
		КонецЕсли;
		
		СтрокаТ = ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация.Добавить();
		СтрокаТ.ОбъектСпр		= ОбъектСпр;
		СтрокаТ.ИдЭлемента     	= ИдЭлемента;
		СтрокаТ.Тип            	= ТипКИ;
		СтрокаТ.Вид            	= ВидКИ;
		СтрокаТ.Представление  	= Представление;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбъектСпр = ТекОбъект.ПолучитьОбъект();
	
	Если ОбъектСпр = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТЧКИ = ОбъектСпр.КонтактнаяИнформация;  		
	Отбор = Новый Структура("Тип, Вид", ТипКИ, ВидКИ);
	
	МСтрокиТ = ТЧКИ.НайтиСтроки(Отбор); 
	
	Если МСтрокиТ.Количество() = 0 Тогда
		СтрокаТЧ = ТЧКИ.Добавить();						
	Иначе  						
		СтрокаТЧ = МСтрокиТ[0];
	КонецЕсли;
	
	СтрокаТЧ.Тип		   = ТипКИ;	
	СтрокаТЧ.Вид 		   = ВидКИ;	
	СтрокаТЧ.Представление = Представление;
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьКонтактноеЛицо(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект);
	
	НаименованиеКЛ	= СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	ДатаРождения 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A02"));
	ИдКонтрагент    = ТекстXML.ПолучитьАтрибут("A03");
	ИдТорговаяТочка = ТекстXML.ПолучитьАтрибут("A04");
	Комментарий		= ТекстXML.ПолучитьАтрибут("A05");
	
	Если ИдКонтрагент <> Неопределено Тогда
		СтрВидСправочник = ?(РежимВыгрузкиРекомендуемый, "Контрагенты", "Партнеры");
		ТекОбъект = СсылкаИзСправочника(ИдКонтрагент, СтрВидСправочник, Истина);	
	ИначеЕсли ИдТорговаяТочка <> Неопределено Тогда
		СтрВидСправочник = ?(РежимВыгрузкиРекомендуемый, "Партнеры", "Контрагенты");
		ТекОбъект = СсылкаИзСправочника(ИдТорговаяТочка, СтрВидСправочник, Истина);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекОбъект) Тогда 
		Текст = "Не найден владелец контактного лица: " + Строка(НаименованиеКЛ) + ". Загрузка не будет выполнена!";;
		ОповеститьОСобытии(Текст, "ОшибкаОбмен", ОбъектСпр.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектСпр.Владелец 				= ТекОбъект;
	ОбъектСпр.Наименование 		 	= НаименованиеКЛ;
	ОбъектСпр.ДатаРождения			= ДатаРождения;
	//@skip-check use-non-recommended-method
	ОбъектСпр.ДатаРегистрацииСвязи  = ТекущаяДата();
	ОбъектСпр.Автор  				= ВыбНастройкиАгента.Пользователь;
	ОбъектСпр.Комментарий   		= Комментарий;
	ОбъектСпр.ОбменДанными.Загрузка = Истина;
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗакончитьЗагрузкуКонтактнойИнформации(ЗагружаемыеОбъекты)
	
	Если НЕ ЗагружаемыеОбъекты.Свойство("ТЗКонтактнаяИнформация") Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТ Из ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация Цикл 
		
		ОбъектСпр = СтрокаТ.ОбъектСпр.ПолучитьОбъект();
		
		Если ОбъектСпр = Неопределено Тогда
			Продолжить;
		КонецЕсли;          
		
		Тип 		  = СтрокаТ.Тип;
		Вид 		  = СтрокаТ.Вид;
		Представление = СтрокаТ.Представление;
		ИдЭлемента 	  = СтрокаТ.ИдЭлемента;
		  				
		ТЧКИ = ОбъектСпр.КонтактнаяИнформация;  		
		Отбор = Новый Структура("Тип, Вид", Тип, Вид);
		
		МСтрокиТ = ТЧКИ.НайтиСтроки(Отбор); 
		
		Если МСтрокиТ.Количество() = 0 Тогда
			СтрокаТЧ = ТЧКИ.Добавить();						
		Иначе  						
			СтрокаТЧ = МСтрокиТ[0];
		КонецЕсли;
		
		СтрокаТЧ.Тип		   = Тип;	
		СтрокаТЧ.Вид 		   = Вид;	
		СтрокаТЧ.Представление = Представление;	  
		
		Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда
			Текст = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектСпр.Ссылка, "ТекущийАгент");
			Возврат;
		КонецЕсли;
		
		Текст = "Записана контактная информация для объекта: " + ОбъектСпр;
		ОповеститьОСобытии(Текст, "ИнфоОбмен", ОбъектСпр.Ссылка);
		
		Если ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Найти(ИдЭлемента, "Идентификатор") = Неопределено Тогда 
			СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеСправочники.Добавить();
			СтрокаТ.Идентификатор 	 	= ИдЭлемента;
			СтрокаТ.ИдВидСправочникаМТ	= "85B62882-0156-4881-85BA-B8FEF05C867B"; // идентификатор (GUID) вида справочника в МТ
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагружаемыеОбъекты.ТЗКонтактнаяИнформация.Очистить();
	
КонецПроцедуры

// Функция возвращает вид справочника УТ для загрузки фотографии.
// в параметре СтррПараметры возвращается структура с дополнительными данными для загрузки фотографии.
// Возвращает структуру данных
// Если не предусмотрена загрузка данной фотографии то СтррДанные.ОписаниеОшибки заполнено. 
// Если ошибок нет то СтррДанные.ОписаниеОшибки = Неопределено
Функция ПолучитьДанныеДляЗагрузкиФото(ТекстXML, ВидСправочника)
		
	//1. Результирующая Cтруктура
	//  СтррДанные.GUID 			- Строка	- идентификатор элемента справочнка "ФотоДокументов" для подтверждения
	//  СтррДанные.ВидДокумента 	- Строка	- вид документа в УТ, за которым закреплена фотография
	//  СтррДанные.ВидСправочника 	- Строка	- вид справочника в УТ для загрузки фотографии
	//  СтррДанные.Время 			- Строка	- время создания фотографии
	//  СтррДанные.ИдДокумента 		- Строка	- идентификатор документа, к которому прикреплена фотография - заполняется ниже в функции ЗаполненИдентификаторДокументаКфото()
	//  СтррДанные.ИдФото   		- Строка	- идентификатор изображения фотографии (используется в ветке PICTURES xml-файла)
	//	СтррДанные.ОписаниеОшибки	- Строка	-описание ошибки
	//@skip-check structure-consructor-too-many-keys
	СтррДанные = Новый Структура("GUID, ВидДокумента, ВидСправочника, Время, ИдДокумента, ИдФото, ОписаниеОшибки");
		
	//2. Проверка
	Если НЕ (ВидСправочника = "*ФотоДокументов" ИЛИ ВидСправочника = "*ФотоСправочников" ИЛИ ВидСправочника = "*ФотоТЧЗаданиеСписокФото") Тогда
		СтррДанные.ОписаниеОшибки = "Не предусмотрена загрузка фотографий вида """ + ВидСправочника + """. GUID = " + ТекстXML.ПолучитьАтрибут("GUID");
		Возврат СтррДанные;
	КонецЕсли;
	
	//3. Фото локументов задание ТЧ "СписокФото"
	Если ВидСправочника = "*ФотоТЧЗаданиеСписокФото" Тогда
		СтррДанные.GUID 			= ТекстXML.ПолучитьАтрибут("GUID"); 	
		СтррДанные.ВидДокумента   	= "ЗаданиеТЧСписокФото";
		СтррДанные.ВидСправочника   = "ВиртуальныйСправочник";
		//@skip-check use-non-recommended-method
		СтррДанные.Время 			= ТекущаяДата();
		СтррДанные.ИдФото 			= ТекстXML.ПолучитьАтрибут("A02"); 
		СтррДанные.ОписаниеОшибки 	= Неопределено; 
		Попытка
			СтррДанные.ИдДокумента	= Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("DocId"));
		Исключение
			СтррДанные.ОписаниеОшибки = "Некорректный идентификатор документа задание";
		Конецпопытки;
		
		Возврат СтррДанные; 
	КонецЕсли;
	
	//4. ФОТО Справочников
	Если ВидСправочника = "*ФотоСправочников" Тогда
		СтррДанные.GUID 		= ТекстXML.ПолучитьАтрибут("GUID");		
		СтррДанные.ИдФото   	= ТекстXML.ПолучитьАтрибут("A01");
		//@skip-check use-non-recommended-method
		СтррДанные.Время    	= ТекущаяДата();
		СтррДанные.ВидСправочника = "ПартнерыПрисоединенныеФайлы"; //фотографии Партнеров и контрагентов записываются в ПартнерыПрисоединенныеФайлы
		
		Если НЕ ТекстXML.ПолучитьАтрибут("A03") = Неопределено Тогда
			//Контрагент
			СтррДанные.ИдДокумента 	= ТекстXML.ПолучитьАтрибут("A03");
			СтррДанные.ВидДокумента = ?(РежимВыгрузкиРекомендуемый, "Контрагенты", "Партнеры"); 
		ИначеЕсли НЕ ТекстXML.ПолучитьАтрибут("A04") = Неопределено Тогда
			//Торговая точка	
			СтррДанные.ИдДокумента  = ТекстXML.ПолучитьАтрибут("A04");
			СтррДанные.ВидДокумента = ?(РежимВыгрузкиРекомендуемый, "Партнеры", "Контрагенты");
		Иначе
			СтррДанные.ОписаниеОшибки = "Не предусмотрена загрузка фотографий """ + ВидСправочника + """ GUID = " + ТекстXML.ПолучитьАтрибут("GUID");
		КонецЕсли;
		
		Возврат СтррДанные;
	КонецЕсли;
	
	//5. ФОТО Документов	
	СтррДанные.GUID   = ТекстXML.ПолучитьАтрибут("GUID"); 	
	СтррДанные.Время  = ТекстXML.ПолучитьАтрибут("A05");  
	СтррДанные.ИдФото = ТекстXML.ПолучитьАтрибут("A04");  
	
	ИдЗаказ 		 = ТекстXML.ПолучитьАтрибут("A01");
	ИдПКО	 		 = ТекстXML.ПолучитьАтрибут("A02");
	ИдМерчендайзинг  = ТекстXML.ПолучитьАтрибут("A03");
	ИдПосещение 	 = ТекстXML.ПолучитьАтрибут("A06");
	ИдРеализация 	 = ТекстXML.ПолучитьАтрибут("A07");
	ИдПеремещение 	 = ТекстXML.ПолучитьАтрибут("A08");
	ИдРКО			 = ТекстXML.ПолучитьАтрибут("A09");
	ИдПоступление	 = ТекстXML.ПолучитьАтрибут("A010");
	ИдВозвратТоваров = ТекстXML.ПолучитьАтрибут("A011");
	ИдЗадание		 = ТекстXML.ПолучитьАтрибут("A012");
	
	Если ЗаполненИдентификаторДокументаКфото(ИдЗаказ, СтррДанные) Тогда
		Если ЗагружатьЗаказКакРеализацию() Тогда
			СтррДанные.ВидДокумента   = "РеализацияТоваровУслуг";
		Иначе
			СтррДанные.ВидДокумента   = "ЗаказКлиента";
		КонецЕсли;
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(ИдРеализация, СтррДанные) Тогда
		СтррДанные.ВидДокумента   = "РеализацияТоваровУслуг";
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(ИдПоступление, СтррДанные) Тогда
		СтррДанные.ВидДокумента   = ВидДокументаПоступлениеТоваровУслуг();
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(ИдВозвратТоваров, СтррДанные) Тогда
		СтррДанные.ВидДокумента = "ВозвратТоваровОтКлиента";
		
	ИначеЕсли ЗначениеЗаполнено(ИдПКО) Или ЗначениеЗаполнено(ИдРКО) Или ЗначениеЗаполнено(ИдПеремещение) Тогда
		СтррДанные.ОписаниеОшибки = "Не предусмотрена загрузка фотографий для документов ПКО, РКО, Перемещение.";
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(ИдМерчендайзинг, СтррДанные) Тогда
		СтррДанные.ВидСправочника = "ВиртуальныйСправочник";
		СтррДанные.ВидДокумента   = "Мерчендайзинг";
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(ИдПосещение, СтррДанные) Тогда
		СтррДанные.ВидСправочника = "ВиртуальныйСправочник";
		СтррДанные.ВидДокумента   = "Посещение";
		
	ИначеЕсли ЗаполненИдентификаторДокументаКфото(ИдЗадание, СтррДанные) Тогда
		СтррДанные.ОписаниеОшибки = "Загрузка фотографий для виртуальных документов ""Задание"" не пердусмотрена.";
		
	Иначе
		ВызватьИсключение("Функция ПолучитьВидСправочникаДляЗагрузкиФото(): не определено условие загрузки фотографии.");
		
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(СтррДанные.ВидДокумента) И НЕ ЗначениеЗаполнено(СтррДанные.ВидСправочника) Тогда
		СтррДанные.ВидСправочника = СтррДанные.ВидДокумента + "ПрисоединенныеФайлы";
	КонецЕсли;

	Возврат СтррДанные;
	
КонецФункции

// Вспомогательная функция для функции ПолучитьДанныеДляЗагрузкиФото()
Функция ЗаполненИдентификаторДокументаКфото(ИдДокумента, СтррПараметры)
	
	Если ЗначениеЗаполнено(ИдДокумента) Тогда
		СтррПараметры.идДокумента = ИдДокумента;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

// Процедура дополняет ТЗ в ЗагружаемыеОбъекты.тзФотографии дополнительными сведениями из XML-ветки PICTURES.
Процедура ЗагрузитьФотографииЭтап2(ТекстXML, ЗагружаемыеОбъекты)
	
	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Если ПодтверждатьВсеФотографии Тогда // требуется сразу обновить данные для подтверждений тэга PICTURES
		ТЗPictures    = ПодтвержденияСДОткрыть("Фото", ВыбНастройкиАгента.СсылкаМУ, Ложь); // функция всегда возвращает таблицу значений
		//@skip-check use-non-recommended-method
		ТекДата       = ТекущаяДата();
		БылиИзменения = Ложь;
	КонецЕсли;
		
	ТЗФотографии = ЗагружаемыеОбъекты.тзФотографии; // подтверждения только по указанным фотографиям в справочнике "*ФотоДокументов"
	
	Пока ТекстXML.Прочитать() Цикл
		
		Если ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Прервать;
		ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаНачало Тогда
			
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				ИначеЕсли ТекстXML.Имя = "ITEM" И Не ТекстXML.ТипУзла = ТипУзлаКонец Тогда					
					
					GUID = ТекстXML.ПолучитьАтрибут("GUID"); // идентификатор изображения фотографии в платформе 2.0
					СтрокаТ = ТЗФотографии.Найти(GUID, "ИдФото");
					Если СтрокаТ <> Неопределено Тогда
						СтрокаТ.ИмяФайла = ТекстXML.ПолучитьАтрибут("FileName");
						СтрокаТ.Описание = ТекстXML.ПолучитьАтрибут("Description");
					КонецЕсли; 
					
					Если ПодтверждатьВсеФотографии Тогда
						
						ИдФото = Новый УникальныйИдентификатор(GUID); // идентификатор изображения фотографии в платформе 2.0
						СтрокаТ = ТЗPictures.Найти(ИдФото, "Идентификатор");
						Если СтрокаТ = Неопределено Тогда
							СтрокаТ = ТЗPictures.Добавить();
							СтрокаТ.Идентификатор = ИдФото;
						КонецЕсли;
						СтрокаТ.Дата = ТекДата;	// Если справочник выгружается из МУ повторно, то обновляем в подтверждении его время загрузки
						БылиИзменения = Истина;
						
					КонецЕсли; 
					
				КонецЕсли;
					
			КонецЦикла;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодтверждатьВсеФотографии И БылиИзменения = Истина Тогда
		ПодтвержденияСДСохранить("Фото", ВыбНастройкиАгента.СсылкаМУ, ТЗPictures);			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьЗагрузкуФотографий(ЗагружаемыеОбъекты)
	
	ТТЗФотографии = ЗагружаемыеОбъекты.тзФотографии;
	Если ТТЗФотографии.Количество() = 0 Тогда // в файле выгрузки отсутствовал справочник ФотоДокументов - мы не знаем к каким документам привязать фотографии
	    Возврат; 
	КонецЕсли;
	
	КаталогФото = ДополнитьСлешВПуть(ЗагружаемыеОбъекты.СведенияИзАрхива.КаталогФото); // временный каталог фотографий, куда распакованы фото из архива торгового агента

	СтррВО = ВОСвойстваОбъекта("_Фотографии");
	
	СвояТранзакцияОткрыта = Ложь;
	
	Для каждого СтрокаТ Из ТТЗФотографии Цикл
		
		Если СтрокаТ.ВидСправочника = "ВиртуальныйСправочник" Тогда
			ЗагрузитьФотоДляВиртуальногоДокумента(СтрокаТ, КаталогФото, СтррВО);
			Продолжить;
		КонецЕсли;
		
		// Определяем ссылку документа-владельца или справочника-владельца фотографии.
		Если СтрокаТ.ВидСправочника = "ПартнерыПрисоединенныеФайлы" Тогда
			ДокументСсылка = Справочники[СтрокаТ.ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.ИдДокумента)); 
			Если СтрокаТ.ВидДокумента = "Контрагенты" Тогда
				СтрокаТ.Описание = "Фото контрагента """ + ДокументСсылка + """." + Символы.ПС + СтрокаТ.Описание;
				ДокументСсылка = ДокументСсылка.Партнер;
			КонецЕсли;
		Иначе		
			ДокументСсылка = Документы[СтрокаТ.ВидДокумента].ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТ.ИдДокумента));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДокументСсылка) ИЛИ ДокументСсылка.ПолучитьОбъект() = Неопределено Тогда
			ОповеститьОСобытии(СтрШаблон_("Пропущена загрузка фотографии ""%1"". В учетной системе не найдена принадлежность файла: ""%2"".", СтрокаТ.ИдФото, СтрокаТ.ИдДокумента)); 
			Продолжить;
		КонецЕсли;

		СпрМенеджер = Справочники[СтрокаТ.ВидСправочника];
		ИдОбъекта = Новый УникальныйИдентификатор(СтрокаТ.GUID);
		СсылкаОбъекта = СпрМенеджер.ПолучитьСсылку(ИдОбъекта);
		
		Если СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда
			ОбъектСпр = СпрМенеджер.СоздатьЭлемент();						
			ОбъектСпр.УстановитьСсылкуНового(СсылкаОбъекта);
			ОбъектСпр.ОбменДанными.Загрузка = Истина;
			СтрокаТ.ЭтоНовый = Истина;
		Иначе						
			ОбъектСпр = СсылкаОбъекта.ПолучитьОбъект();
			ОбъектСпр.Разблокировать();
			СтрокаТ.ЭтоНовый = Ложь;
		КонецЕсли;
		
		ОбъектСпр.Наименование 	= СтрокаТ.ИдФото;
		ОбъектСпр.Автор 		= ВыбНастройкиАгента.Пользователь; 
		ОбъектСпр.ДатаСоздания 	= ДатаВремяXMLВФормат1С(СтрокаТ.Время);
		ОбъектСпр.Описание 		= СтрокаТ.Описание;
		
		Если ЭтоСсылкаНаНайденныйОбъект(ДокументСсылка) Тогда
			ОбъектСпр.ВладелецФайла = ДокументСсылка;
		КонецЕсли;
		
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		ФайлФото = Новый Файл(КаталогФото + СтрокаТ.ИмяФайла); // СтрокаТ.ИмяФайла может быть и пустым - из-за прерывания загрузки пользователем или возможных ошибок в обработке
		
		Если ФайлФото.Существует() И ЗначениеЗаполнено(СтрокаТ.ИмяФайла) Тогда // добавляем файл в справочник
			РасширениеБезТочки = СтрЗаменить(ФайлФото.Расширение, ".", "");
			ДвоичныеДанные = Новый ДвоичныеДанные(КаталогФото + СтрокаТ.ИмяФайла);
			СтрокаТ.Загружено = Истина; // ставим признак загрузки фотографии, только если есть файл фотографии
		Иначе // в качестве изображения подставляем картинку "Нет фото"
			РасширениеБезТочки = "png";			
			ДвоичныеДанные = ПолучитьМакет("NoPhoto");
			
			Если ЗначениеЗаполнено(ОбъектСпр.Описание)  Тогда
				ОбъектСпр.Описание = НСтр("ru = 'Фото еще не отправлено из МУ.'") + Символы.ПС + ОбъектСпр.Описание;
			Иначе
				ОбъектСпр.Описание = НСтр("ru = 'Фото еще не отправлено из МУ'");
			КонецЕсли;
		КонецЕсли; 
		
		ИмяБезРасширения   						= ОбъектСпр.Наименование;		
		ОбъектСпр.Расширение 					= РасширениеБезТочки;		
		ОбъектСпр.ДатаМодификацииУниверсальная 	= ВремяИзмененияУниверсальное;		
		ОбъектСпр.ПодписанЭП       				= Ложь;		
		
		Если ПоколениеКонфигурации(">=УТ_11.4") Тогда    
			МодульФайловыеФункции = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
		Иначе
			//@skip-check wrong-string-literal-content
			МодульФайловыеФункции = ОбщегоНазначения.ОбщийМодуль("ФайловыеФункцииСлужебный");
		КонецЕсли;
		ОбъектСпр.ТипХраненияФайла = МодульФайловыеФункции.ТипХраненияФайлов();		
		ОбъектСпр.Размер           = ДвоичныеДанные.Размер();
		
		Попытка
			Если ОбъектСпр.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				НачатьТранзакцию();
				СвояТранзакцияОткрыта = Истина;
				
				Если ПоколениеКонфигурации(">=УТ_11.4") Тогда
					МодульФайловыеФункции.ЗаписатьФайлВИнформационнуюБазу(СсылкаОбъекта, ДвоичныеДанные);
				Иначе
					//@skip-check wrong-string-literal-content
					МодульПрисоединенныеФайлыСлужебный = ОбщегоНазначения.ОбщийМодуль("ПрисоединенныеФайлыСлужебный");  
					МодульПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(СсылкаОбъекта, ДвоичныеДанные);
				КонецЕсли; 
					
				ОбъектСпр.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ОбъектСпр.ПутьКФайлу = "";
			Иначе
				// Добавление в один из томов (где есть свободное место).
				Если ПоколениеКонфигурации(">=УТ_11.4.12") Тогда
					МодульРаботаСФайламиВТомахСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиВТомахСлужебный");
					СтррСвойстваФайлаВТоме = МодульРаботаСФайламиВТомахСлужебный.СвойстваФайлаВТоме();
					ЗаполнитьЗначенияСвойств(СтррСвойстваФайлаВТоме, ОбъектСпр);
					МодульРаботаСФайламиВТомахСлужебный.УдалитьФайл(МодульРаботаСФайламиВТомахСлужебный.ПолноеИмяФайлаВТоме(СтррСвойстваФайлаВТоме));
					МодульРаботаСФайламиВТомахСлужебный.ДобавитьФайл(ОбъектСпр, ДвоичныеДанные);
				Иначе
					СведенияОФайле = МодульФайловыеФункции.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,	ИмяБезРасширения, РасширениеБезТочки, , ОбъектСпр.Зашифрован);
					ОбъектСпр.Том		 = СведенияОФайле.Том;
					ОбъектСпр.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
				КонецЕсли;
			КонецЕсли;
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			ОбъектСпр.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ОбъектСпр.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			ОбъектСпр.Заполнить(Неопределено);
			
			ОбъектСпр.Записать();
			
			Если СвояТранзакцияОткрыта Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Если СвояТранзакцияОткрыта Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
			                             |%2'");
			//@skip-check object-deprecated
			КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			//@skip-check object-deprecated
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Добавление присоединенного файла'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				КомментарийЖурналаРегистрации);
			
			//@skip-check object-deprecated
			ИнформацияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ИмяБезРасширения + "." + РасширениеБезТочки,
				ИнформацияОбОшибке);
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

// Завершает загрузку соглашений
//
// Параметры:
//	ЗагружаемыеОбъекты - Структура - загружаемые объекты
//
Процедура ЗакончитьЗагрузкуСоглашений(ЗагружаемыеОбъекты)
	
	ТЗСоглашения = ЗагружаемыеОбъекты.тзСоглашения;
	
	Если Не ТЗСоглашения = Неопределено Тогда
		
		Для Каждого СТЗСоглашение Из ТЗСоглашения Цикл
			
			Партнер = СТЗСоглашение.Партнер;
			
			ОбъектПартнер = Партнер.ПолучитьОбъект();			
			ОбъектСпр 	  = СТЗСоглашение.Объект.ПолучитьОбъект();
			
			Если ОбъектПартнер = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
			
			ОбъектСпр.Партнер    = Партнер;
			ОбъектСпр.Контрагент = Контрагент;		
							
			Если ЗначениеЗаполнено(Партнер) Тогда
				ОбъектСпр.ЗаполнитьУсловияПродажПоУмолчанию();
			КонецЕсли;
			
			Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда
				Текст = "Не удалось записать элемент справочника: " + Строка(ОбъектСпр) + " в базу!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектСпр.Ссылка, "ТекущийАгент");
				Возврат;
			КонецЕсли;
			
			Текст = "Дозаписана информация для справочника ""Соглашение с клиентами"" для объекта: " + ОбъектСпр;
			ОповеститьОСобытии(Текст, "ИнфоОбмен", ОбъектСпр.Ссылка);
			
		КонецЦикла;
		
		ЗагружаемыеОбъекты.тзСоглашения = ТЗСоглашения;
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательная функция для ЗакончитьЗагрузкуФотографий()
//  Общий Ревизит обработки СправочникФотографии - ТЗ - Поля:
//  ID 								- ГУИД 	 - идентификатор элемента
//  ВладелецФайла   				- ГУИД   - пока что документ "Мерчендайзинг
//  ДатаМодификацииУниверсальная    - Дата   -
//  ДатаСоздания                    - Дата   -
//  Наименование					- Строка -
//  Описание						- Строка -
//  Размер							- Число  -
//  Расширение						- Строка -
//  Статус							- Число  - Это признак пометка удаление , записан итд. Поумолчанию = 3 - это файл сохранен.
//  ХранимыйФайл					- Строка - адрес картинки в каталоге
//
// Параметры:
//  СтрокаТ		 - СтрокаТаблицыЗначений - Строка ТЗ ЗагружаемыеОбъекты.тзФотографии
//  СтрокаТ.GUID 			- Строка	- идентификатор элемента справочнка "ФотоДокументов" для подтверждения
//  СтрокаТ.ВидДокумента 	- Строка	- вид документа в УТ, за которым закреплена фотография
//  СтрокаТ.ВидСправочника 	- Строка	- вид справочника в УТ для загрузки фотографии
//  СтрокаТ.Время 			- Строка	- время создания фотографии
//  СтрокаТ.Загружено		- Булево	- Истина, если фото загружено в УС
//  СтрокаТ.ИдДокумента 	- Строка	- идентификатор документа, к которому прикреплена фотография - заполняется ниже в функции ЗаполненИдентификаторДокументаКфото()
//  СтрокаТ.ИдФото   		- Строка	- идентификатор изображения фотографии (используется в ветке PICTURES xml-файла)
//  СтрокаТ.ИмяФайла		- Строка	- изначальное физическое название фотографии загруженная во временный каталог
//  СтрокаТ.Описание		- Строка	- Описание к фото
//  СтрокаТ.ЭтоНовый		- Булево	- Истина если в УС небыло загруженного обьекта.
//
//  КаталогФото				- Строка    - это временная папка куда распаковывается архив
//  СтррВО					- Структура - Структура описания виртуальных справочников фотографии	
Процедура ЗагрузитьФотоДляВиртуальногоДокумента(СтрокаТ, КаталогФото, СтррВО = Неопределено)
	
	//0. Значения по умолчанию.
	Если СтррВО = Неопределено Тогда
		СтррВО = ВОСвойстваОбъекта("_Фотографии");
	КонецЕсли;
	
	//Поля для виртуального саправочника СправочникФотографии ВО и также поля для элементов фотографий ВО
	СтррОбъект	=  СтррВО.СтррОбъекта;
	
	//1. Проверка на заполнение
	ТекстОшибкиXML = "Ошибка формата данных XML при загрузке фотографий";
	Если СтррВО = Неопределено Тогда
		ОповеститьОСобытии(ТекстОшибкиXML);
		Возврат;	
	Иначе
		Попытка
			ГуидID = Новый УникальныйИдентификатор(СтрокаТ.GUID);
			Если НЕ ЗначениеЗаполнено(ГуидID) Тогда
				ОповеститьОСобытии(ТекстОшибкиXML);
				Возврат;
			КонецЕсли;
			ГуидВладельца = Новый УникальныйИдентификатор(СтрокаТ.ИдДокумента);
			Если НЕ ЗначениеЗаполнено(ГуидВладельца) Тогда
				ОповеститьОСобытии(ТекстОшибкиXML);
				Возврат;
			КонецЕсли;
			ДатаСоздания = ДатаВремяXMLВФормат1С(СтрокаТ.Время);
		Исключение
			ОповеститьОСобытии(ТекстОшибкиXML);
			Возврат;
		КонецПопытки;	
	КонецЕсли;
	
	//2. Проверка на наличие такого объекта в базе.
	СтррОбьектВХранилище = ВОЭлементЗагрузить(СтррВО, ГуидID);
	Если СтррОбьектВХранилище = Неопределено Тогда
		СтрокаТ.ЭтоНовый = Истина;
	иначе
		СтрокаТ.ЭтоНовый = Ложь;
	КонецЕсли;

	//3. Заполнение свойств
	СтррОбъект.ВладелецФайла				= ГуидВладельца;
	СтррОбъект.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	СтррОбъект.ДатаСоздания                 = ДатаСоздания;
	СтррОбъект.ИмяФайла                     = Неопределено; 				    // Заполняется далее при копировании фото
	СтррОбъект.Наименование                 = "Новое Фото" + ?(ЗначениеЗаполнено(СтрокаТ.ИмяФайла), ": " + СтрокаТ.ИмяФайла, "");
	СтррОбъект.Описание                     = СтрокаТ.Описание;
	СтррОбъект.Размер                       = Неопределено;                 // Заполняется далее при копировании фото
	СтррОбъект.Расширение                   = Неопределено;                 // Заполняется далее при копировании фото
	СтррОбъект.Статус                       = 3;
	СтррОбъект.ХранимыйФайл                 = СтрокаТ.ИмяФайла;
	
	//4. Проверка СтрокаТ.ИмяФайла.  Может быть и пустым - из-за прерывания загрузки пользователем или возможных ошибок в обработке
	Если ПустаяСтрока(СтрокаТ.ИмяФайла) Тогда
		СтррОбъект.Описание = НСтр("ru = 'Фото еще не отправлено из МУ.'") + Символы.ПС + Символы.ПС + СтррОбъект.Описание;
		СтрокаТ.Загружено = Ложь;
		СтррОбъект.ИмяФайла   = Неопределено;
		СтррОбъект.Размер     = Неопределено;
		СтррОбъект.Расширение = Неопределено;
		ВОЭлементСохранить(СтррВО, ГуидID, СтррОбъект);
		Возврат;
	Иначе
		СтррОбъект.ИмяФайла = СтрокаТ.ИмяФайла;
	КонецЕсли;
	
	//5. Определяем пути к фотографии
	//КаталогФото - это временная папка куда распаковывается архив
	//Пример C:\Users\vdeineko\AppData\Local\Temp\AP20TMP\bbb\Photos\
	//КаталогДанных - это место где уже постоянно хранятся фото.
	//Пример C:\Users\vdeineko\Documents\APMT\Photoes
	ПутьКФотоВТемп     = КаталогФото + СтрокаТ.ИмяФайла; 
	ПутьКФотоХранилище = ДополнитьСлешВПуть(ДополнитьСлешВПуть(КаталогДанных) + "Photoes") + СтрокаТ.ИмяФайла;

	//6. Проверяем наличие фотографии и добовляем
	ФайлФото = Новый Файл(ПутьКФотоХранилище);
	Если ФайлФото.Существует() Тогда
		//файл уже загружен и хранится в КаталогДанных
		СтрокаТ.Загружено = Истина;
	Иначе
		ФайлФото = Новый Файл(ПутьКФотоВТемп);
		Если ФайлФото.Существует() Тогда
			//файл загружен во временную папку
	        //Копирование файла
			Попытка
				//@skip-check object-deprecated
				КопироватьФайл(ПутьКФотоВТемп, ПутьКФотоХранилище);
				СтрокаТ.Загружено = Истина;
			Исключение
				Текст = "Не удается скопирвать файл. Путь временного хранения файла: " + ПутьКФотоВТемп + ". Путь каталога данных: " + ПутьКФотоХранилище;
				ОповеститьОСобытии(Текст);
			КонецПопытки;
		КонецЕсли;		
	КонецЕсли;
	
	//7. Заполнение свойств Размер Расширение
	Если СтрокаТ.Загружено Тогда
		СтррОбъект.Размер     = ФайлФото.Размер();
		СтррОбъект.Расширение = СтрЗаменить(ФайлФото.Расширение, ".", "");
	Иначе
		СтррОбъект.Размер     = Неопределено;
		СтррОбъект.Расширение = Неопределено;
		СтррОбъект.Описание = НСтр("ru = 'Фото еще не загружено из МУ.'") + Символы.ПС + Символы.ПС + СтррОбъект.Описание;
	КонецЕсли;

	//8. Сохраняем элемент
	ВОЭлементСохранить(СтррВО, ГуидID, СтррОбъект);
	
КонецПроцедуры

// Выполняет загрузку договора
//
// Параметры:
//	ТекстXML 		   - ЧтениеXML - объект ЧтениеXML
//	ЗагружаемыеОбъекты - Структура - структура загруженных объектов
//  ОбъектСпр 		   - СправочникОбъект.СоглашенияСКлиентами - соглашение
//	ЭтоНовыйОбъект     - Булево - признак нового объекта
//
// Возвращаемое значение:
//	Булево - 
//			Ложь - соглашение не записано
//			Истина - соглашение записано
//
Функция ЗагрузитьСоглашение(ТекстXML, ЗагружаемыеОбъекты, ОбъектСпр, ЭтоНовыйОбъект)
		
	Наименование  	 = СокрЛП(ТекстXML.ПолучитьАтрибут("Name"));
	ИдКонтрагент     = ТекстXML.ПолучитьАтрибут("A02");
	ДатаЗаключения   = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A03"));
	СрокДействия   	 = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A04"));
	ИдОрганизация    = ТекстXML.ПолучитьАтрибут("A05");
	ИдВидЦены		 = ТекстXML.ПолучитьАтрибут("A06");
	ИдТорговаяТочка  = ТекстXML.ПолучитьАтрибут("A010");
	
	Организация = СсылкаИзСправочника(ИдОрганизация, 												"Организации");
	ВидЦены     = СсылкаИзСправочника(ИдВидЦены,     												"ВидыЦен");
	Партнер     = СсылкаИзСправочника(?(РежимВыгрузкиРекомендуемый, ИдТорговаяТочка, ИдКонтрагент), "Партнеры");
	Контрагент  = СсылкаИзСправочника(?(РежимВыгрузкиРекомендуемый, ИдКонтрагент, ИдТорговаяТочка), "Контрагенты"); 	
		
	Если Не ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Партнер) Тогда
		Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	КонецЕсли;
			
	ОбъектСпр.Наименование 		 	= Наименование;
	ОбъектСпр.Организация           = Организация;
	ОбъектСпр.Партнер 				= Партнер;	   	
	ОбъектСпр.Контрагент 		    = Контрагент;
	ОбъектСпр.Дата 					= ДатаЗаключения;	
	ОбъектСпр.ДатаНачалаДействия 	= ДатаЗаключения;	
	ОбъектСпр.ДатаОкончанияДействия = ?(ДатаЗаключения > СрокДействия, ДатаЗаключения, СрокДействия);
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		ОбъектСпр.ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
	ОбъектСпр.ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;	
	ОбъектСпр.Статус 	    		 = Перечисления.СтатусыСоглашенийСКлиентами.Действует;  	
	ОбъектСпр.Валюта 			     = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	ОбъектСпр.Менеджер 	    		 = ВыбАгент;
	ОбъектСпр.ВидЦен 	    		 = ВидЦены;  
	Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
		ОбъектСпр.ОплатаВВалюте = ВзаиморасчетыСервер.ПолучитьОплатуВВалютеПоУмолчанию();
	Иначе
		//@skip-check unknown-method-property
		ОбъектСпр.ПорядокОплаты	= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;	

	ОбъектСпр.Типовое 		     						= Ложь;
	ОбъектСпр.ИспользуетсяВРаботеТорговыхПредставителей = Истина;       		
	ОбъектСпр.ОбменДанными.Загрузка 					= Истина;	
	
	Результат = ЗаписьСправочника(ОбъектСпр, ЭтоНовыйОбъект);
	
	// Получим ссылку пока несуществующего объекта по идентификатору 	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		СТЗДоговор = ЗагружаемыеОбъекты.тзСоглашения.Добавить();
		СТЗДоговор.Объект 	  = ОбъектСпр.Ссылка;	
		СТЗДоговор.Партнер	  = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(?(РежимВыгрузкиРекомендуемый, ИдТорговаяТочка, ИдКонтрагент)));;
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьСоглашение()

// ЗагрузкаСправочников
#КонецОбласти

#Область ЗагрузкаДокументов

Процедура ЗагрузитьДокументы(ТекстXML, ЗагружаемыеОбъекты)

	ТипУзлаНачало = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаКонец  = ТипУзлаXML.КонецЭлемента;
	
	Пока ТекстXML.Прочитать() Цикл
		
		Имя = ТекстXML.Имя;
		
		Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда	
			Если Имя = "KILLEDS" Тогда
				ТекстXML.Пропустить();
				Продолжить;
			КонецЕсли;			
		ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
			Если Имя = "DOCUMENTS" Тогда
				Прервать;
			ИначеЕсли Имя = "DOCUMENT" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИдДокXML = ТекстXML.ЗначениеАтрибута("GUID");
		Если ИдДокXML <> Неопределено Тогда
			ИдВидДокументаМТ = Новый УникальныйИдентификатор(ИдДокXML);
			ВидДокумента = ВидОбъектаПоИдентификатору(ИдВидДокументаМТ, Истина, "Документ");
			Если ВидДокумента = Неопределено Тогда 
				ТекстXML.Пропустить();
				Если ТекстXML.Имя = "DOCUMENTS" И ТекстXML.ТипУзла = ТипУзлаКонец Тогда
					Прервать;
				Иначе
					Продолжить;				
				КонецЕсли;	
			ИначеЕсли ПропуститьДокументы(ВидДокумента) Тогда
				ТекстXML.Пропустить();
				Продолжить; 
			КонецЕсли;
		КонецЕсли;			

		Пока ТекстXML.Прочитать() Цикл
			
			Имя = ТекстXML.Имя;
			
			Если ТекстXML.ТипУзла = ТипУзлаНачало Тогда
				Если Имя = "ITEM" Тогда
					//@skip-check query-in-loop
					ЗагрузитьДокумент(ТекстXML, ЗагружаемыеОбъекты, ВидДокумента, ИдВидДокументаМТ);
				ИначеЕсли Имя = "KILLEDS" Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
			ИначеЕсли ТекстXML.ТипУзла = ТипУзлаКонец Тогда
				Если Имя = "ELEMENTS" Или Имя = "DOCUMENT" Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;				
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ЗагрузитьДокументы

Функция ЗагрузитьДокументЗаказ(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты)
	
	ОбъектДок = СтррПараметры.ОбъектДокумента;
	
	ЗагрузкаВВидеЗаказа = (ОбъектДок.Метаданные().Имя = "ЗаказКлиента");
	
	СтррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML);
	
	СтррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A02");
	СтррЗначения.ИдКлиента		= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A04") ,ТекстXML.ПолучитьАтрибут("A03"));
	СтррЗначения.ИдСоглашения	= ТекстXML.ПолучитьАтрибут("A05");
	СтррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A08"));
	СтррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A011");
	СтррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A012");
	СтррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A014");
	СтррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A015");
	СтррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));
	СтррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A018"));

	ОбщаяСкидка 		= Число(ТекстXML.ПолучитьАтрибут("A06"));
	ВидЦены 			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A07"), "ВидыЦен");
	//ОбщийВес 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
	ДатаДоставки 		= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	ИдМерчендайзинга	= ВРег(ТекстXML.ПолучитьАтрибут("A013"));
	ВидОплаты 			= ПолучитьЗначениеПеречисленияПоИдентификатору("ФормыОплаты", ТекстXML.ПолучитьАтрибут("A019")); 
	ВидДоставки         = ПолучитьЗначениеПеречисленияПоИдентификатору("СпособыДоставки", ТекстXML.ПолучитьАтрибут("A020"));
	Склад 				= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A023"), "Склады");

	ОбъектДок.Заполнить(Неопределено);
	ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;	
	
	Если РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию" Тогда
		ДокМенеджер = Документы.РеализацияТоваровУслуг;  
	Иначе
		ДокМенеджер = Документы.ЗаказКлиента;
	КонецЕсли;		
	
	Если НЕ РежимВыгрузкиРекомендуемый И ИспользоватьПунктыРазгрузки Тогда
		СтррЗначения.ИдПунктаРазгрузки = ТекстXML.ПолучитьАтрибут("A04");
		Если ИспользоватьКонтрагентов Тогда
			СтррОбязательныеПоля = Новый Структура("Организация, Контрагент, ПунктРазгрузки");
		Иначе
			СтррОбязательныеПоля = Новый Структура("Организация, Партнер, ПунктРазгрузки");
		КонецЕсли;
		
		Если ИспользоватьДоговорыИлиСоглашения = "СОГЛАШЕНИЯ" Тогда
			СтррОбязательныеПоля.Вставить("Соглашение");	
		ИначеЕсли ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" Тогда
			СтррОбязательныеПоля.Вставить("Договор");
		ИначеЕсли ИспользоватьКонтрагентов Тогда
			СтррОбязательныеПоля.Вставить("Договор");
		Иначе
			СтррОбязательныеПоля.Вставить("Соглашение");
		КонецЕсли;				
	Иначе
		Если ИспользоватьКонтрагентов Тогда
			СтррЗначения.ИдКонтрагента = ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A04")); 	
		КонецЕсли;
		//@skip-check structure-consructor-too-many-keys
		СтррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	КонецЕсли;
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, СтррЗначения, ДокМенеджер, СтррОбязательныеПоля);
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОбъектДок);

	ОбъектДок.Склад = Склад;
	ОбъектДок.ФормаОплаты = ВидОплаты;
	ОбъектДок.Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	// Заполняет реквизиты объекта по соглашению, изменяет склад
	Если ЗначениеЗаполнено(ОбъектДок.Соглашение) Тогда
		ЗаполнитьУсловияПродажПоСоглашению(ОбъектДок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ОбъектДок.Склад = Склад;
	ИначеЕсли ЗначениеЗаполнено(ВыбНастройкиАгента.ОсновнойСклад) Тогда
		ОбъектДок.Склад = ВыбНастройкиАгента.ОсновнойСклад;	
	КонецЕсли;

	Если ЗначениеЗаполнено(ВидОплаты) Тогда
		ОбъектДок.ФормаОплаты = ВидОплаты;
	КонецЕсли;
	
	Если ГКонфигурация = "УТ_UA" И ЗначениеЗаполнено(ВидЦены) Тогда
		Если ВидЦены.ЦенаВключаетНДС Тогда
			ОбъектДок.ЦенаВключаетНДС = Истина;
			ОбъектДок.АвторасчетНДС = Ложь;			
		КонецЕсли;			
	КонецЕсли;
	
	ЕСли ВидДоставки = Неопределено Тогда 
		ВидДоставки = СпособДоставки;
	КонецЕсли;
	ОбъектДок.СпособДоставки = ВидДоставки;		
	
	Если ЗагрузкаВВидеЗаказа = Истина Тогда
		Если ИспользоватьСтатусы() И ЗначениеЗаполнено(СтатусЗаказовКлиентов) Тогда
		    СтатусЗаказа = СтатусЗаказовКлиентов;
		Иначе	
			МДопустимыеСтатусы = ?(ПоколениеКонфигурации(">=УТ_11.2"), Документы.ЗаказКлиента.ДопустимыеСтатусыВводаНаОсновании(), Новый Массив);
			Если ЗначениеЗаполнено(СтатусЗаказовКлиентов) И МДопустимыеСтатусы.Найти(СтатусЗаказовКлиентов) <> Неопределено Тогда
				СтатусЗаказа = СтатусЗаказовКлиентов;
			Иначе	
				СтатусЗаказа = ?(МДопустимыеСтатусы.Количество() > 0, МДопустимыеСтатусы[0], Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
			КонецЕсли; 
		КонецЕсли;
		
	Иначе
		Если ИспользоватьСтатусы() И ЗначениеЗаполнено(СтатусРеализацияТоваровУслуг) Тогда 
			СтатусЗаказа = СтатусРеализацияТоваровУслуг;			
		Иначе
			СтатусЗаказа = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;			
		КонецЕсли;
	КонецЕсли;
	
	ОбъектДок.Статус = СтатусЗаказа;  
	 
	Если ЗагрузкаВВидеЗаказа Тогда
		//@skip-check unknown-method-property 
		
		//((id_240829 MOD_3675
		Если ПоколениеКонфигурации(">=УТ_11.5.19.44") Или ПоколениеКонфигурации(">=УТ_11.5.17.122") Тогда
			ОбъектДок.Приоритет = ?(ПоколениеКонфигурации(">=УТ_11.1.2"), 
			Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(), Перечисления.Приоритеты.Низкий);   
		Иначе
			ОбъектДок.Приоритет = ?(ПоколениеКонфигурации(">=УТ_11.1.2"), 
			Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Справочники.Приоритеты.ПустаяСсылка()), Перечисления.Приоритеты.Низкий);
		КонецЕсли;
		//))id_240829	
		Если РежимИсполненияЗаказовСоСкладаИПодЗаказ() И ПоколениеКонфигурации("<=УТ_11.5.6") Тогда
			ОбъектДок.ЖелаемаяДатаОтгрузки = ДатаДоставки;
		КонецЕсли;	
		ОбъектДок.ДатаОтгрузки = ДатаДоставки;
	КонецЕсли;
	
	Соглашение = ОбъектДок.Соглашение;
	Если ЗначениеЗаполнено(Соглашение) Тогда
		Если Не ЗначениеЗаполнено(ОбъектДок.Склад) Тогда
			ОбъектДок.Склад = Соглашение.Склад;
		КонецЕсли;
		ВалютаВзаиморасчетов = Соглашение.Валюта;
		ОбъектДок.ХозяйственнаяОперация = Соглашение.ХозяйственнаяОперация;
		ОбъектДок.ПорядокРасчетов = Соглашение.ПорядокРасчетов;
				
		Если ЗначениеЗаполнено(Соглашение.ГрафикОплаты) Тогда
			Если ЕстьРеквизитОбъекта("ГрафикОплаты", ОбъектДок) Тогда
				ОбъектДок.ГрафикОплаты = Соглашение.ГрафикОплаты;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОбъектДок.ФормаОплаты) Тогда
				ОбъектДок.ФормаОплаты = Соглашение.ГрафикОплаты.ФормаОплаты;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидОплаты) Тогда
			ОбъектДок.ФормаОплаты = ВидОплаты;
		КонецЕсли;		
		
		ДокументПродажиЗакупкиЗаполнитьБанковскиеСчета(ОбъектДок);
		
		ОбъектДок.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;
		ОбъектДок.ГруппаФинансовогоУчета = Соглашение.ГруппаФинансовогоУчета;
		ДокументПродажиЗаполнитьКассуОрганизацииПоУмолчанию(ОбъектДок);

		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ОбъектДок, ОбъектДок.ХозяйственнаяОперация, ВалютаВзаиморасчетов);
		Если Не Договор = ОбъектДок.Договор Тогда
			ОбъектДок.Договор = Договор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДок.Договор) Тогда
			ДокументПродажиЗаполнитьПоДоговору(ОбъектДок);	
		КонецЕсли;
		
		ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок);
		
	Иначе
		ДокументПродажиЗаполнить(ОбъектДок);
	КонецЕсли;

	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОбъектДок);
	ОбъектДок.Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	Если Не ОбъектДок.ЭтоНовый() Тогда
		ОбъектДок.Товары.Очистить();
	КонецЕсли;
	
	ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СрокПоставки," 
		+ " Количество, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки,"
		+ " ПроцентАвтоматическойСкидки, СтатусУказанияСерий";
		
	Если ЗагрузкаВВидеЗаказа Тогда
		ПоляСтруктуры = ПоляСтруктуры + ", ДатаОтгрузки, ПричинаОтмены, Содержание";
	КонецЕсли;

	ВспомогательныеПоля = "ХарактеристикиИспользуются, Отменено, ТипНоменклатуры, ВариантОформленияПродажи, СуммаОтменено, СуммаНДСОтменено,"
		+ " СуммаСНДСОтменено, СуммаАвтоматическойСкидкиОтменено, СуммаРучнойСкидкиОтменено";
	ИтоговыеПоляСтруктуры = ПоляСтруктуры + ", " + ВспомогательныеПоля;
	
	ИдТЧТовары = НРег("0738E61B-F06F-464A-8483-4249E0254819"); // идентификатор ТЧ "Товары" у Заказа в МТ 2.0
	ИспользоватьСкладыВТЧ = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
	
	ЗаполнятьХарактеристики = КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура("ПроверитьХарактеристикуПоВладельцу,ПроверитьЗаполнитьУпаковкуПоВладельцу,ПересчитатьКоличествоЕдиниц");
	
	Если ГКонфигурация = "УТ_UA" Тогда
		УстановитьБезопасныйРежим(Истина); // gi_240224 - добавлено по требованию EDT
		Выполнить("НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Контрагент, ОбъектДок.Соглашение, ОбъектДок.Дата);");
	Иначе
		НалогообложениеНДС = ОбъектДок.НалогообложениеНДС;
	КонецЕсли;

	СтррПересчетаСумм = ДокументПродажиПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтррПересчетаСумм);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтррПересчетаСумм);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));	
	СтруктураЗависимыхРеквизитов = Новый Структура("Отменено", "Сумма, СуммаНДС, СуммаСНДС, СуммаАвтоматическойСкидки, СуммаРучнойСкидки");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураЗависимыхРеквизитов);
	
	СтррЗаполненияЦеныВСтрокеТЧ = ДокументПродажиПараметрыЗаполненияЦеныВСтрокеТЧ(ОбъектДок);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтррЗаполненияЦеныВСтрокеТЧ);
	
	//(( sk_220524 MOD-3169
	Если ПоколениеКонфигурации(">=УТ_11.5.8") И ЗагрузкаВВидеЗаказа Тогда
		//@skip-check structure-consructor-too-many-keys
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация,  ПоДатеОтгрузки", НалогообложениеНДС, ОбъектДок.Дата, ОбъектДок.Организация, Истина));	
	ИначеЕсли ПоколениеКонфигурации(">=УТ_11.5.8") И Не ЗагрузкаВВидеЗаказа Тогда 	
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", НалогообложениеНДС, ОбъектДок.Дата, ОбъектДок.Организация));	
	//)) sk_220524	
	ИначеЕсли ПоколениеКонфигурации(">=УТ_11.4.6.166") И ЗагрузкаВВидеЗаказа Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, ПоДатеОтгрузки", НалогообложениеНДС, ОбъектДок.Дата, Истина));
	ИначеЕсли ПоколениеКонфигурации(">=УТ_11.4.6.166") И Не ЗагрузкаВВидеЗаказа  Тогда
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, ОбъектДок.Дата));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);
	КонецЕсли;
	
	Если ЗагрузкаВВидеЗаказа Тогда
		Если ГКонфигурация = "КА" Или ГКонфигурация = "ERP" Тогда
			СтруктураДействий.Вставить("ЗаполнитьСодержание", Новый Структура("ЗаполнятьДляВсехУслуг", Ложь));
		Иначе	
			СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(ОбъектДок, Ложь));
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗагрузкиЗаказов = "СоздаватьНаОснованииРеализацию" Тогда // этот режим сейчас не поддерживается
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	ИначеЕсли ЗагрузкаВВидеЗаказа Тогда
		ВариантОбеспечения = УстановитьОбеспечениеЗаказа();	
	Иначе
		ВариантОбеспечения = Неопределено; 
	КонецЕсли;
	
	ПроставитьАдресДоставки(ОбъектДок, ТекстXML.ПолучитьАтрибут("A04")); // В МТ реквизит A04 - это GUID торговой точки
	ДокументПродажиЗаполнитьЗонуДоставки(ОбъектДок); // sk_231016 MOD-3533
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				//Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				//СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				//Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
				//СтавкаНДС 		= Число(ТекстXML.ПолучитьАтрибут("A010"));
				ИдСклад 			= ТекстXML.ПолучитьАтрибут("A011");
				ИдВидЦены 			= ТекстXML.ПолучитьАтрибут("A015");
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				ТекВидЦены 			= УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦены);
				ТекСклад 			= Справочники.Склады.ПустаяСсылка();

				Если ИспользоватьСкладыВТЧ Тогда
					ТекСклад = СсылкаИзСправочника(ИдСклад, "Склады");
					Если Не ТекСклад.Пустая() Тогда
						СкладГруппа = ТекСклад.Родитель;
						Если Не СкладГруппа.Пустая() Тогда
							Если Не СкладГруппа.ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Тогда
								ОбъектДок.Склад = СкладГруппа;
							КонецЕсли;
						Иначе
							ОбъектДок.Склад = ТекСклад;	
						КонецЕсли;

						Если Не ЗагрузкаВВидеЗаказа Тогда
							СтррОтветственный = ДокументПродажиПолучитьОтветственногоПоСкладу(ОбъектДок);
							Если Не СтррОтветственный = Неопределено Тогда
								ОбъектДок.Отпустил 			= СтррОтветственный.Ответственный;
								ОбъектДок.ОтпустилДолжность = СтррОтветственный.ОтветственныйДолжность;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если ТекСклад.Пустая() Тогда
					ТекСклад = ОбъектДок.Склад;
				КонецЕсли;

				НоваяСтрока = ОбъектДок.Товары.Добавить(); 									
				Если РежимРасчетаСкидок = "ОпределитьУчетнойСистемой" Тогда
					ПроцентРучнойСкидки = 0;
				ИначеЕсли СкидкаТЧ = 0 Тогда
					ПроцентРучнойСкидки	= ОбщаяСкидка; 
				Иначе
					ПроцентРучнойСкидки = СкидкаТЧ;
				КонецЕсли;
				
				СтруктураЗаполнения = Новый Структура(ИтоговыеПоляСтруктуры, 
					ТекНоменклатура, ТекХарактеристика, ТекЕдиница, ТекСклад, ТекВидЦены, Цена,
						Количество, ПроцентРучнойСкидки, ОбъектДок.Соглашение.СрокПоставки);
				Если ГКонфигурация = "УТ_BL" Тогда
					СтруктураЗаполнения.Вставить("ЦенаСоСкидкой");
				КонецЕсли;
					
				СтруктураЗаполнения.ХарактеристикиИспользуются = ЗаполнятьХарактеристики;
				СтруктураЗаполнения.Отменено = Ложь;
					
				Если ЗагрузкаВВидеЗаказа Тогда
					СтруктураЗаполнения.ДатаОтгрузки = ДатаДоставки;
				КонецЕсли;
				
				СтруктураДействий.ПроверитьХарактеристикуПоВладельцу = ТекХарактеристика;
				СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;

				//исправить погику на ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОбъектДок.Товары, СтруктураДействий, Неопределено);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
				
				Если СтруктураЗаполнения.Цена <> Цена Тогда
					СтруктураДействий.Удалить("ЗаполнитьЦенуПродажи");
					СтруктураЗаполнения.Цена     = Цена;
					СтруктураЗаполнения.ВидЦены  = Справочники.ВидыЦен.ПустаяСсылка();
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
					СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтррЗаполненияЦеныВСтрокеТЧ);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
				
				Если ВариантОбеспечения <> Неопределено И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					НоваяСтрока.ВариантОбеспечения = ВариантОбеспечения;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗагрузкаВВидеЗаказа И ПоколениеКонфигурации(">=УТ_11.3") Тогда
				ПроверитьЗаполнитьОбеспечениеВДокументеЗаказы(ОбъектДок);
			КонецЕсли; 		
			
			//(( sk_221223 MOD-3326
			Если ПоколениеКонфигурации(">=УТ_11.3") Тогда
				МодульНоменклатураСервер = ОбщегоНазначения.ОбщийМодуль("НоменклатураСервер");
				СтррПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(МодульНоменклатураСервер.ПараметрыУказанияСерий(ОбъектДок, ?(ЗагрузкаВВидеЗаказа, Документы.ЗаказКлиента, Документы.РеализацияТоваровУслуг)));
				МодульНоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДок, СтррПараметрыУказанияСерий);
			КонецЕсли; 
			//)) sk_221223
			
		КонецЕсли;
	КонецЕсли;

	ДокументПродажиЗаполнитьЭтапыГрафикаОплаты(ОбъектДок);
	
	ПересчитатьДокументВВалютуСоглашенияЗаказа(ОбъектДок);
	
	СтррПараметрыРасчетаСкидок = Новый Структура;
	СтррПараметрыРасчетаСкидок.Вставить("ПрименятьКОбъекту",                Истина);
	СтррПараметрыРасчетаСкидок.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтррПараметрыРасчетаСкидок.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтррПараметрыРасчетаСкидок.Вставить("УправляемыеСкидки", 				Неопределено);
	Если Не ЗагрузкаВВидеЗаказа Тогда
		СтррПараметрыРасчетаСкидок.Вставить("РеализацияСверхЗаказа", Ложь);
	КонецЕсли;
	РассчитатьСкидкиПоРежиму(ОбъектДок, СтррПараметрыРасчетаСкидок, КэшированныеЗначения);  
	
	Результат = ЗаписьДокумента(ОбъектДок, СтррЗначения, СтррПараметры.ЭтоНовый);
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = "На основании документа """ + Строка(ОбъектДок.Ссылка) + """ не будет создан документ ""Реализация товаров и услуг"", т.к. он помечен на удаление.";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		Иначе
			//Если РежимЗагрузкиЗаказов = СоздаватьНаОснованииРеализацию Тогда
			//	ВвестиРеализациюНаОснованииЗаявки(ОбъектДок);
			//КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) И ЗначениеЗаполнено(ИдМерчендайзинга) Тогда // нужно запомнить ссылку на документ мерчендайзинга, чтобы при загрузке документа Мерчендайзинг ее проставить.
		СтрокаТ = ЗагружаемыеОбъекты.тзСсылкиНаМерчендайзинг.Добавить();
		СтрокаТ.Документ		 = ОбъектДок.Ссылка;
		СтрокаТ.ИдМерчендайзинга = ИдМерчендайзинга;
	КонецЕсли; 
	
	Возврат Результат;

КонецФункции

Функция ЗагрузитьДокументРеализация(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты)

	ОбъектДок = СтррПараметры.ОбъектДокумента;
	
	СтррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML);
	
	СтррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	СтррЗначения.ИдКлиента		= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A02"));
	СтррЗначения.ИдСоглашения	= ТекстXML.ПолучитьАтрибут("A04");
	СтррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A07"));
	СтррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A09");
	СтррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A010");
	СтррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A012");
	СтррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A013");
	СтррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A016"));
	СтррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));

	ОбщаяСкидка 		= Число(ТекстXML.ПолучитьАтрибут("A05"));
	ВидЦены 			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "ВидыЦен");
	//ОбщийВес 			= Число(ТекстXML.ПолучитьАтрибут("A08"));
	//ДатаДоставки 		= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	ИдДокОснования 	 	= ТекстXML.ПолучитьАтрибут("A011");
	ИдМерчендайзинга	= ВРег(ТекстXML.ПолучитьАтрибут("A015"));
	ВидОплаты 			= ПолучитьЗначениеПеречисленияПоИдентификатору("ФормыОплаты", ТекстXML.ПолучитьАтрибут("A018")); 
	//Склад 				= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A023"), "Склады");
	ВалютаУчета			= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	
	Если ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад) Тогда 
		Склад = ВыбНастройкиАгента.МобильныйСклад;
	ИначеЕсли ЗначениеЗаполнено(ВыбНастройкиАгента.ОсновнойСклад) Тогда
		Склад = ВыбНастройкиАгента.ОсновнойСклад;
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	СтррДанныеЗаполнения = Новый Структура;
	СтррДанныеЗаполнения.Вставить("Организация", СсылкаИзСправочника(СтррЗначения.ИдОрганизации, "Организации"));
	СтррДанныеЗаполнения.Вставить("Склад", Склад);
	СтррДанныеЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
	ОбъектДок.Заполнить(СтррДанныеЗаполнения); 
	
	ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;
		
	Если ИспользоватьПунктыРазгрузки И НЕ РежимВыгрузкиРекомендуемый Тогда
		СтррЗначения.ИдПунктаРазгрузки = ТекстXML.ПолучитьАтрибут("A03");
	
		Если ИспользоватьКонтрагентов Тогда
			СтррОбязательныеПоля = Новый Структура("Организация, Контрагент, ПунктРазгрузки");
		Иначе
			СтррОбязательныеПоля = Новый Структура("Организация, Партнер, ПунктРазгрузки");
		КонецЕсли;
		
		Если ИспользоватьДоговорыИлиСоглашения = "СОГЛАШЕНИЯ" Тогда
			СтррОбязательныеПоля.Вставить("Соглашение");	
		ИначеЕсли ИспользоватьДоговорыИлиСоглашения = "ДОГОВОРЫ" Тогда
			СтррОбязательныеПоля.Вставить("Договор");
		ИначеЕсли ИспользоватьКонтрагентов Тогда
			СтррОбязательныеПоля.Вставить("Договор");
		ИначеЕсли КонстантыПолучитьЗначение("ИспользованиеСоглашенийСКлиентами") <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
			СтррОбязательныеПоля.Вставить("Соглашение");
		КонецЕсли;
		
	Иначе
		Если ИспользоватьКонтрагентов = Истина Тогда
			СтррЗначения.ИдКонтрагента = ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A02"), ТекстXML.ПолучитьАтрибут("A03"));
		КонецЕсли;
		СтррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент");
		Если КонстантыПолучитьЗначение("ИспользованиеСоглашенийСКлиентами") <> Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать Тогда
			СтррОбязательныеПоля.Вставить("Соглашение");
		КонецЕсли;
	КонецЕсли;
	
	//++ЗАПОЛНИТЬ ОСНОВНЫЕ РЕКВИЗИТЫ
	ДокМенеджер = Документы.РеализацияТоваровУслуг;
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, СтррЗначения, ДокМенеджер, СтррОбязательныеПоля);
	//--Заполнить ОСНОВНЫЕ РЕКВИЗИТЫ
	
	Если ЗначениеЗаполнено(ОбъектДок.Соглашение) Тогда
		ЗаполнитьУсловияПродажПоСоглашению(ОбъектДок);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОплаты) Тогда
		ОбъектДок.ФормаОплаты = ВидОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбНастройкиАгента.МобильныйСклад) Тогда 
		ОбъектДок.Склад = ВыбНастройкиАгента.МобильныйСклад;
	ИначеЕсли ЗначениеЗаполнено(ВыбНастройкиАгента.ОсновнойСклад) Тогда
		ОбъектДок.Склад = ВыбНастройкиАгента.ОсновнойСклад;	
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОбъектДок);  
	
	ОснованиеЗаказ = СсылкаИзДокумента(ИдДокОснования, "ЗаказКлиента");
	Если ЗначениеЗаполнено(ОснованиеЗаказ) Тогда
		ОбъектДок.ЗаказКлиента = ОснованиеЗаказ;
		ОбъектДок.РеализацияПоЗаказам = Истина;
	КонецЕсли;

	ОбъектДок.Валюта = ВалютаУчета;
	
	ОбъектДок.СпособДоставки = СпособДоставки;
	
	Соглашение = ОбъектДок.Соглашение;
	Если ЗначениеЗаполнено(Соглашение) Тогда	
		
		ОбъектДок.ПорядокРасчетов = Соглашение.ПорядокРасчетов;
		
		ХозяйственнаяОперацияДоговора = ?(
			ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет,
			Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
			ОбъектДок.ХозяйственнаяОперация
		);
		

		ДокументПродажиЗаполнитьКассуОрганизацииПоУмолчанию(ОбъектДок);	
		ДокументПродажиЗакупкиЗаполнитьБанковскиеСчета(ОбъектДок);
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ОбъектДок, ХозяйственнаяОперацияДоговора, ОбъектДок.ВалютаВзаиморасчетов);
		Если Не Договор = ОбъектДок.Договор Тогда
			ОбъектДок.Договор = Договор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДок.Договор) Тогда
			ДокументПродажиЗаполнитьПоДоговору(ОбъектДок);	
		КонецЕсли;
				
		ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок);
		
		//ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.РеализацияТоваровУслуг.ПараметрыУказанияСерий(ОбъектДок));
		//НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДок,ПараметрыУказанияСерий);
		
	Иначе  	
		ДокументПродажиЗаполнить(ОбъектДок);	
	КонецЕсли;
	
	Если ГКонфигурация <> "УТ_UA" Тогда
		СтррОтветственный = ДокументПродажиПолучитьОтветственногоПоСкладу(ОбъектДок);
		Если Не СтррОтветственный = Неопределено Тогда
			ОбъектДок.Отпустил 			= СтррОтветственный.Ответственный;
			ОбъектДок.ОтпустилДолжность = СтррОтветственный.ОтветственныйДолжность;
		КонецЕсли;
	КонецЕсли; 
	
	Если Не ОбъектДок.РеализацияПоЗаказам Тогда		
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ОбъектДок.Склад);
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ОбъектДок.Склад, СкладГруппа, ОбъектДок.Товары, Истина); 		
	КонецЕсли;
	
	ОбъектДок.Основание   = "";		
	
	Если СтатусРеализацияТоваровУслуг = Неопределено Тогда
		ОбъектДок.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	Иначе
		ОбъектДок.Статус = СтатусРеализацияТоваровУслуг;
    КонецЕсли;
	
	ПроставитьАдресДоставки(ОбъектДок, ТекстXML.ПолучитьАтрибут("A03")); // В МТ реквизит A04 - это GUID торговой точки 
	ДокументПродажиЗаполнитьЗонуДоставки(ОбъектДок); // sk_231016 MOD-3533
	
	//++++ ТАБЛИЧНА ЧАСТЬ ////////////////////////////////////////
	
		ФлИспользоватьМаркировки = ИспользоватьМаркировки();
		Если Не ОбъектДок.ЭтоНовый() Тогда
			ОбъектДок.Товары.Очистить();
			Если ФлИспользоватьМаркировки Тогда
				ОбъектДок.ШтрихкодыУпаковок.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		СтрИдТЧТовары	  = НРег("E4D61E0A-1D62-48D7-B70C-BCBA935D377A"); // идентификатор ТЧ "Товары" у Реализации в МТ 2.0
		СтрИдТЧМаркировки = НРег("3C70D006-D9A7-4389-8824-44DF5E86305C"); // идентификатор ТЧ "Маркировки"
		
		ИспользоватьСкладыВТЧ = Константы.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи.Получить();
		
		ЗаполнятьХарактеристики = КонстантыПолучитьЗначение("ИспользоватьХарактеристикиНоменклатуры") И ИспользоватьХарактеристики;
		КэшированныеЗначения    = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		
		//++ СтруктураЗаполнения
		
		ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки, СрокПоставки, " +
							"Количество, Сумма, СтавкаНДС, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, " + 
				  				"ПроцентАвтоматическойСкидки, СтатусУказанияСерий, СуммаВзаиморасчетов, ЗаказКлиента";
		
		ДопПоля = "ХарактеристикиИспользуются, ТипНоменклатуры";
		
		СтруктураЗаполнения = Новый Структура(ПоляСтруктуры + ", " + ДопПоля); 
		Если ГКонфигурация = "УТ_BL" Тогда
			СтруктураЗаполнения.Вставить("ЦенаСоСкидкой");
		КонецЕсли;
		СтррДанныеЗаполненияМаркировки = Новый Структура("ВидМаркированногоТовара, КодМаркировки");
		
		//-- СтруктураЗаполнения
		
		//++ СтруктураДействий 
		
		СтруктураДействий = Новый Структура; 
		
		СтррПересчетаСумм = ДокументПродажиПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
		СтррЗаполненияЦеныВСтрокеТЧ = ДокументПродажиПараметрыЗаполненияЦеныВСтрокеТЧ(ОбъектДок);
		
		Если ГКонфигурация = "УТ_UA" Тогда
			УстановитьБезопасныйРежим(Истина); // gi_240224 - добавлено по требованию EDT
			Выполнить("НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Контрагент, ОбъектДок.Соглашение, ОбъектДок.Дата);");
		Иначе
			НалогообложениеНДС = ОбъектДок.НалогообложениеНДС;
		КонецЕсли;				

		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу");
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		//(( sk_220524 MOD-3170 
		Если ПоколениеКонфигурации(">=УТ_11.5.8") Тогда
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", ОбъектДок.НалогообложениеНДС, ОбъектДок.Дата, ОбъектДок.Организация));	
		//)) sk_220524
		ИначеЕсли ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", ОбъектДок.НалогообложениеНДС, ОбъектДок.Дата));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);	
		КонецЕсли;

		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",    			 СтррПересчетаСумм);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",   			 СтррПересчетаСумм);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",   			 СтррЗаполненияЦеныВСтрокеТЧ);
		
		//ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		//-- СтруктураДействий
		
		ТекстXML.Прочитать();
		Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТекстXML.Прочитать();
			Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = СтрИдТЧТовары Тогда
				Пока ТекстXML.Прочитать() Цикл
					Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						ТекстXML.Пропустить();
						Прервать;
					КонецЕсли;
					Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Продолжить;
					КонецЕсли;
					
					ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
					ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
					ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
					Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
					Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
					//Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
					//СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
					//Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
					СкидкаТЧ 			= Число(ТекстXML.ПолучитьАтрибут("A09"));
					//СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));
					ИдСклад 			= ТекстXML.ПолучитьАтрибут("A011");
					ИдВидЦены 			= ТекстXML.ПолучитьАтрибут("A015");
					
					ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
					ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
					ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
					ТекВидЦены 			= УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦены);
					ТекСклад 			= Справочники.Склады.ПустаяСсылка();
					
					Если ИспользоватьСкладыВТЧ Тогда
						ТекСклад = СсылкаИзСправочника(ИдСклад, "Склады");
						Если Не ТекСклад.Пустая() Тогда
							СкладГруппа = ТекСклад.Родитель;
							Если Не СкладГруппа.Пустая() Тогда
								Если Не СкладГруппа.ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Тогда
									ОбъектДок.Склад = СкладГруппа;
								КонецЕсли;
							Иначе
								ОбъектДок.Склад = ТекСклад;	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ТекСклад.Пустая() Тогда
						ТекСклад = ОбъектДок.Склад;
					КонецЕсли;
					
					НоваяСтрока = ОбъектДок.Товары.Добавить();
					Если РежимРасчетаСкидок = "ОпределитьУчетнойСистемой" Тогда
						ПроцентРучнойСкидки = 0;
					ИначеЕсли СкидкаТЧ = 0 Тогда
						ПроцентРучнойСкидки	= ОбщаяСкидка; 
					Иначе
						ПроцентРучнойСкидки = СкидкаТЧ;
					КонецЕсли;

					СтруктураЗаполнения.Номенклатура		       = ТекНоменклатура;
					СтруктураЗаполнения.Характеристика			   = ТекХарактеристика;
					СтруктураЗаполнения.Упаковка				   = ТекЕдиница;
					СтруктураЗаполнения.Склад					   = ТекСклад;
					СтруктураЗаполнения.ВидЦены					   = ТекВидЦены;
					СтруктураЗаполнения.Цена					   = Цена;
					СтруктураЗаполнения.КоличествоУпаковок		   = Количество;
					СтруктураЗаполнения.ПроцентРучнойСкидки		   = ПроцентРучнойСкидки;
					СтруктураЗаполнения.СрокПоставки 			   = ОбъектДок.Соглашение.СрокПоставки;
					СтруктураЗаполнения.ХарактеристикиИспользуются = ЗаполнятьХарактеристики;
					СтруктураЗаполнения.ТипНоменклатуры            = Неопределено;
					СтруктураЗаполнения.Количество				   = Неопределено;
					СтруктураЗаполнения.Сумма					   = Неопределено;
					СтруктураЗаполнения.СтавкаНДС				   = Неопределено;
					СтруктураЗаполнения.СуммаНДС				   = Неопределено;
					СтруктураЗаполнения.СуммаСНДС				   = Неопределено;
					СтруктураЗаполнения.СуммаРучнойСкидки		   = Неопределено;
					СтруктураЗаполнения.СуммаАвтоматическойСкидки  = Неопределено;
					СтруктураЗаполнения.ПроцентАвтоматическойСкидки= Неопределено;
					СтруктураЗаполнения.СтатусУказанияСерий		   = Неопределено;
					СтруктураЗаполнения.СуммаВзаиморасчетов		   = Неопределено;
					СтруктураЗаполнения.ЗаказКлиента			   = Неопределено;

					Если ГКонфигурация = "УТ_BL" Тогда
						СтруктураЗаполнения.ЦенаСоСкидкой = Неопределено;
					КонецЕсли;
					
					СтруктураДействий.ПроверитьХарактеристикуПоВладельцу    = ТекХарактеристика;
					СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
					
					Если СтруктураЗаполнения.Цена <> Цена Тогда
						СтруктураДействий.Удалить("ЗаполнитьЦенуПродажи");
						СтруктураЗаполнения.Цена     = Цена;
						СтруктураЗаполнения.ВидЦены  = Справочники.ВидыЦен.ПустаяСсылка();
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
						СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтррЗаполненияЦеныВСтрокеТЧ);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
				КонецЦикла; 
				//(( sk_221223 MOD-3326
				Если ПоколениеКонфигурации(">=УТ_11.3") Тогда
					МодульНоменклатураСервер = ОбщегоНазначения.ОбщийМодуль("НоменклатураСервер");
					СтррПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(МодульНоменклатураСервер.ПараметрыУказанияСерий(ОбъектДок, Документы.РеализацияТоваровУслуг));
					МодульНоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДок, СтррПараметрыУказанияСерий);
				КонецЕсли; 
				//)) sk_221223
	
			КонецЕсли;
	
			Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = СтрИдТЧМаркировки Тогда
				Пока ТекстXML.Прочитать() Цикл
					Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						ТекстXML.Пропустить();
						Прервать;
					КонецЕсли;
					Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Продолжить;
					КонецЕсли;
					
					СтррДанныеЗаполненияМаркировки.КодМаркировки 		   = ТекстXML.ПолучитьАтрибут("A05");
					СтррДанныеЗаполненияМаркировки.ВидМаркированногоТовара = ТекстXML.ПолучитьАтрибут("A06"); 
 
					ЗаполнитьКодМаркировкиИзМТ(ОбъектДок, СтррДанныеЗаполненияМаркировки);

					КонецЦикла	
				КонецЕсли;

		КонецЕсли;
		
		//---- ТАБЛИЧНА ЧАСТЬ ////////////////////////////////////////

	ДокументПродажиЗаполнитьЭтапыГрафикаОплаты(ОбъектДок);
	
	СтррПараметрыРасчетаСкидок = Новый Структура;
	СтррПараметрыРасчетаСкидок.Вставить("ПрименятьКОбъекту",                Истина);
	СтррПараметрыРасчетаСкидок.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтррПараметрыРасчетаСкидок.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтррПараметрыРасчетаСкидок.Вставить("УправляемыеСкидки", 			    Неопределено);
	СтррПараметрыРасчетаСкидок.Вставить("РеализацияСверхЗаказа", 		    Ложь);
	РассчитатьСкидкиПоРежиму(ОбъектДок, СтррПараметрыРасчетаСкидок, КэшированныеЗначения);  
	
	ЗаполнитьКодыМаркировокПоОбъемноСортовомуУчету(ОбъектДок); // sk_220822 MOD-3239 
	
	Результат = ЗаписьДокумента(ОбъектДок,  СтррЗначения, СтррПараметры.ЭтоНовый);
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = "На основании документа """ + Строка(ОбъектДок.Ссылка) + """ не будет создан документ ""Реализация товаров и услуг"", т.к. он помечен на удаление.";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Ссылка) И ЗначениеЗаполнено(ИдМерчендайзинга) Тогда // нужно запомнить ссылку на документ мерчендайзинга, чтобы при загрузке документа Мерчендайзинг ее проставить.
		СтрокаТ = ЗагружаемыеОбъекты.тзСсылкиНаМерчендайзинг.Добавить();
		СтрокаТ.Документ		 = ОбъектДок.Ссылка;
		СтрокаТ.ИдМерчендайзинга = ИдМерчендайзинга;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьДокументРеализация()

Функция ЗагрузитьДокументПоступлениеВозврат(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты)

	ОбъектДок = СтррПараметры.ОбъектДокумента;
	ВыбАгент  = ВыбАгент;
	
	СтррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML);
	
	СтррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	СтррЗначения.ИдКлиента		= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"),ТекстXML.ПолучитьАтрибут("A02"));
	СтррЗначения.ИдСоглашения	= ТекстXML.ПолучитьАтрибут("A04");
	СтррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A07"));
	СтррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A09");
	СтррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A010");
	СтррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A013");
	СтррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A014");
	СтррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A017"));
	СтррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A018"));

	//ОбщаяСкидка 		= Число(ТекстXML.ПолучитьАтрибут("A05"));
	//@skip-check module-unused-local-variable
	ВидЦены 			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A06"), "ВидыЦен");
	//ОбщийВес 			= Число(ТекстXML.ПолучитьАтрибут("A08"));
	ИдДокОснования 	 	= ТекстXML.ПолучитьАтрибут("A011");
	ВидОплаты 			= ПолучитьЗначениеПеречисленияПоИдентификатору("ФормыОплаты", ТекстXML.ПолучитьАтрибут("A019")); 
	Склад 				= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A016"), "Склады");
	ВалютаУчета			= КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");

	ОбъектДок.Заполнить(Неопределено);
	
	ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;
	
	ДокМенеджер = Документы[ОбъектДок.Метаданные().Имя];	// ДокМенеджер = Документы.ВозвратТоваровОтКлиента;   //ПоступлениеТоваровУслуг или ВозвратТоваровОтКлиента
	
	Если ИспользоватьПунктыРазгрузки Тогда
		СтррЗначения.ИдПунктаРазгрузки = ТекстXML.ПолучитьАтрибут("A03");
		//@skip-check structure-consructor-too-many-keys
		СтррОбязательныеПоля = Новый Структура("Организация, Контрагент, ПунктРазгрузки, Договор");
	Иначе
		Если ИспользоватьКонтрагентов = Истина Тогда
			СтррЗначения.ИдКонтрагента = ?(РежимВыгрузкиРекомендуемый,ТекстXML.ПолучитьАтрибут("A02") ,ТекстXML.ПолучитьАтрибут("A03"));
		КонецЕсли;
		//@skip-check structure-consructor-too-many-keys
		СтррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	КонецЕсли;
	
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, СтррЗначения, ДокМенеджер, СтррОбязательныеПоля);
	
	ЭтоВозврат = Истина;
	Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект." + ВидДокументаПоступлениеТоваровУслуг()) Тогда		
		ЭтоВозврат = Ложь;		
	КонецЕсли;
	
	ЭтоЗаявкаНаВозвратТоваровОтКлиента = Ложь;
	Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда		
		ЭтоЗаявкаНаВозвратТоваровОтКлиента = Истина;
	КонецЕсли;   	

	Если Склад.Пустая() Тогда		
		Если ВыбНастройкиАгента.МобильныйСклад.Пустая() Тогда
			Склад = ВыбНастройкиАгента.ОсновнойСклад;
		Иначе
			Склад = ВыбНастройкиАгента.МобильныйСклад;
		КонецЕсли;	
	КонецЕсли;
	
	ОбъектДок.Склад = Склад;	
	
	ОбъектДок.Валюта = ВалютаУчета;    	
	
	Если ЭтоВозврат Тогда	
		ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		Если ЭтоЗаявкаНаВозвратТоваровОтКлиента И ТекстXML.ЗначениеАтрибута("A024") <> Неопределено Тогда
			ОбъектДок.ЖелаемаяДатаПоступления = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A024"));		
		КонецЕсли;		
	Иначе
		Если ПоколениеКонфигурации("<УТ_11.4.6.166") Тогда
			//@skip-check unknown-method-property
			ОбъектДок.ДатаПлатежа   = ОбъектДок.Дата;
		КонецЕсли;
		
		СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
		Если Не СтруктураОтветственного = Неопределено Тогда
			//@skip-check unknown-method-property
			ОбъектДок.Принял 		  = СтруктураОтветственного.Ответственный;
			//@skip-check unknown-method-property
			ОбъектДок.ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
		КонецЕсли;
		
		Если ВидОплаты = Неопределено Тогда
			ОбъектДок.ФормаОплаты = ВидОплаты;			
		Иначе
			ОбъектДок.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
		КонецЕсли;                              	
	КонецЕсли;
	
	Соглашение = ОбъектДок.Соглашение;
		
	Если ЗначениеЗаполнено(Соглашение) Тогда
		
		ЗаполнитьУсловияПродажПоСоглашению(ОбъектДок);
		
		Если Не ЗначениеЗаполнено(ОбъектДок.Склад) Тогда
			//@skip-check reading-attribute-from-database
			ОбъектДок.Склад = Соглашение.Склад;
		КонецЕсли;
					
		Если Не ЭтоВозврат Тогда	
			//@skip-check reading-attribute-from-database
			ОбъектДок.ХозяйственнаяОперация = Соглашение.ХозяйственнаяОперация;
			Если Не ЗначениеЗаполнено(ОбъектДок.ХозяйственнаяОперация) Тогда
				ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			КонецЕсли;
			ДокументПродажиЗакупкиЗаполнитьБанковскиеСчета(ОбъектДок);
			//@skip-check many-actual-parameters
			//@skip-check unknown-method-property
			Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
				ОбъектДок.Договор,
				ОбъектДок.Партнер,
				ОбъектДок.Контрагент,
				ОбъектДок.Организация,
				ОбъектДок.ХозяйственнаяОперация,,
				ОбъектДок.ВалютаВзаиморасчетов,
				ОбъектДок.Соглашение
				);
			Если Не Договор = ОбъектДок.Договор Тогда
				ОбъектДок.Договор = Договор;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОбъектДок.Договор) Тогда
				//@skip-check unknown-method-property
				ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		ОбъектДок.Валюта = ВалютаУчета;
				
		ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок);
		
		//@skip-check reading-attribute-from-database
		ОбъектДок.ЦенаВключаетНДС = Соглашение.ЦенаВключаетНДС;		
	КонецЕсли;
	
	ФлИспользоватьМаркировки = ИспользоватьМаркировки();
	Если Не ОбъектДок.ЭтоНовый() Тогда
		Если ЭтоЗаявкаНаВозвратТоваровОтКлиента Тогда
			ОбъектДок.ВозвращаемыеТовары.Очистить();
		Иначе
			//@skip-check unknown-method-property
			ОбъектДок.Товары.Очистить();
			Если ФлИспользоватьМаркировки Тогда
				//@skip-check unknown-method-property
				ОбъектДок.ШтрихкодыУпаковок.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВозврат Тогда
		ИдТЧТовары = "235dc1ea-5963-4dcd-95e1-e8cef487a2ae";
		СтрИдТЧМаркировки = "a261f2e3-94c3-4d61-9517-255576eb2f62";
	Иначе
		ИдТЧТовары = "a10221fa-5ac6-4e8c-80d8-d40d8dfc7779";
		СтрИдТЧМаркировки = "bc076e73-a0a5-4b41-9fd7-003cfe5221ce";
	КонецЕсли;
	
	СтррДанныеЗаполненияМаркировки = Новый Структура("ВидМаркированногоТовара, КодМаркировки");
	
	Если ГКонфигурация = "УТ_UA" Тогда
		УстановитьБезопасныйРежим(Истина); // gi_240224 - добавлено по требованию EDT
		Выполнить("НалогообложениеНДС = НДСОбщегоНазначенияСервер.ПолучитьНалогообложениеНДСПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Контрагент, ОбъектДок.Соглашение, ОбъектДок.Дата);");
	Иначе
		НалогообложениеНДС = ОбъектДок.НалогообложениеНДС;
	КонецЕсли;     
	
	СтруктураДействий = Новый Структура;   		
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц"); 
	
	//(( sk_220526 MOD-3171 
	//Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда
	//	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок); 
	//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, ОбъектДок.Дата));
	//Иначе
	//	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);	
	//КонецЕсли; 
	
	Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок); 
	Иначе
		//@skip-check unknown-method-property
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);	
	КонецЕсли;  

	Если ПоколениеКонфигурации(">=УТ_11.5.8") Тогда 
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата, Организация", НалогообложениеНДС, ОбъектДок.Дата, ОбъектДок.Организация));	
	ИначеЕсли ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, ОбъектДок.Дата));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НалогообложениеНДС);	
	КонецЕсли;
    //)) sk_220526

	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);				
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);				
	СтруктураДействий.Вставить("ПересчитатьСумму");

	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				// Сумма 				= Число(ТекстXML.ПолучитьАтрибут("A06"));
				// СуммаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A07"));
				// Вес 				= Число(ТекстXML.ПолучитьАтрибут("A08"));
				// Скидка 				= Число(ТекстXML.ПолучитьАтрибут("A09"));
				// СтавкаНДС 			= Число(ТекстXML.ПолучитьАтрибут("A010"));
				СуммаСкидки		 	= Число(ТекстXML.ПолучитьАтрибут("A011"));
				         
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				// ТекВидЦены 			= ВидЦены;   // УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦены);
				// ТекСклад 			= Справочники.Склады.ПустаяСсылка();
				
				//{{gi_240205 ошибка с ненайденным товаром в УТ 11.5.8.267
				// Ошибка в процедуре ОбщийМодуль.ОбработкаТабличнойЧастиКлиентСервер.Модуль.ПересчитатьКоличествоЕдиницВСтрокеТЧ()
				// Конфигурация: УТ 11.5.8.267
				// Неправильно обрабатывался случай при осутсвии ссылки на товар 
				Если Не ЗначениеЗаполнено(ТекНоменклатура) Тогда
					Текст = "Не найден товар с идентификатором """ + ИдНоменклатуры + """! Строка в документе пропущена! (документ """ + Строка(ОбъектДок.Ссылка) + """)";
					ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
					Продолжить;
				КонецЕсли;
				//}}gi_240205 ошибка с ненайденным товаром в УТ 11.5.8.267
				
				
				Если ЭтоЗаявкаНаВозвратТоваровОтКлиента Тогда
					НоваяСтрока = ОбъектДок.ВозвращаемыеТовары.Добавить();
				Иначе
					//@skip-check unknown-method-property
					НоваяСтрока = ОбъектДок.Товары.Добавить();
				КонецЕсли;
				
				Если ЭтоВозврат Тогда
					Если СуммаСкидки > 0 Тогда
						Цена = Цена - (СуммаСкидки/Количество);
						Текст = "Цена в документе """ + Строка(ОбъектДок.Ссылка) + """ пересчитана с учетом скидки в МУ.";
						ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
					КонецЕсли;
					ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок";
					СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, 
					Цена, Количество);
				Иначе
					ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, Цена, КоличествоУпаковок, Склад";
					СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, Цена, Количество, ОбъектДок.Склад);
				КонецЕсли;				
				
				СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", НоваяСтрока.Упаковка);
					
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);			
				
				Если Не ЭтоВозврат Тогда
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));							
				КонецЕсли;
				
				КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
			КонецЦикла;
		КонецЕсли;
	
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = СтрИдТЧМаркировки Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоВозврат Тогда
					СтррДанныеЗаполненияМаркировки.КодМаркировки 		   = ТекстXML.ПолучитьАтрибут("A05");
					СтррДанныеЗаполненияМаркировки.ВидМаркированногоТовара = ТекстXML.ПолучитьАтрибут("A06"); 
					
					ЗаполнитьКодМаркировкиИзМТ(ОбъектДок, СтррДанныеЗаполненияМаркировки);
					
				КонецЕсли;
			КонецЦикла	
		КонецЕсли;

	КонецЕсли;
	
	Результат = Ложь;
	
	Если ЭтоВозврат Тогда		
		// Добавляем запись в вспомогательную таблицу
		ТЗДокументыВозвраты = ЗагружаемыеОбъекты.тзДокументыВозвраты; 
		НоваяЗапись = ТЗДокументыВозвраты.Добавить();
		НоваяЗапись.Документ 	 = ОбъектДок;
		НоваяЗапись.СтррЗначения = СтррЗначения;
		НоваяЗапись.ЭтоНовый     = ОбъектДок.ЭтоНовый();
		НоваяЗапись.ИдОснования	 = ИдДокОснования;
		ЗагружаемыеОбъекты.тзДокументыВозвраты = ТЗДокументыВозвраты;
		Результат = Истина;
	Иначе		
		Результат = ЗаписьДокумента(ОбъектДок, СтррЗначения, СтррПараметры.ЭтоНовый);
	КонецЕсли; 
	
	Если Результат Тогда
		Если ОбъектДок.ПометкаУдаления Тогда
			Текст = "На основании документа """ + Строка(ОбъектДок.Ссылка) + """ не будет создан документ ""Возврат товаров от клиента"", т.к. он помечен на удаление.";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьДокументПоступление ()

Функция ЗагрузитьДокументСчетФактура(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты)
	
	Результат = Ложь;
	
	СтррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML);
	
	ИдДокОснования 	= ТекстXML.ПолучитьАтрибут("A01");
	ДокОснование 	= СсылкаИзДокумента(ИдДокОснования, "РеализацияТоваровУслуг");
	Если ЗначениеЗаполнено(ДокОснование) Тогда
		ОбъектОснования = ДокОснование.ПолучитьОбъект(); 		
		Если ОбъектОснования <> Неопределено Тогда
			СсылкаОснования = ОбъектОснования.Ссылка;  
			//(( sk_220331 MOD-1717 
			// Прежде чем заполнять счет фактуру, нужно провести реализацию
			Если Не ОбъектОснования.Проведен Тогда
				Если Не ВыполнитьОперациюДляОбъекта(ОбъектОснования, "проведение") Тогда  
					Текст = "Не удалось провести документ: " + Строка(СсылкаОснования);
					ОповеститьОСобытии(Текст, "ОшибкаЗапись", СсылкаОснования, "ТекущийАгент");	
					Текст = "Ввод счета фактуры на основании документа: " + Строка(СсылкаОснования) + " не будет произведен!";
					ОповеститьОСобытии(Текст, "ОшибкаЗапись", СсылкаОснования, "ТекущийАгент");		
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;		
			//)) sk_220331
			ОбъектДок = СтррПараметры.ОбъектДокумента;	
			ОбъектДок.Организация 	  	= СсылкаОснования.Организация;
			ОбъектДок.ДатаВыставления 	= СтррЗначения.Дата;
			//@skip-check structure-consructor-too-many-keys
			СтррДанныеЗаполнения 		= Новый Структура("ДокументОснование, Дата, КодВидаОперации, Исправление", СсылкаОснования, СсылкаОснования.Дата, "01", Ложь);
			ОбъектДок.Заполнить(СтррДанныеЗаполнения);
			Результат = ЗаписьДокумента(ОбъектДок, СтррЗначения, СтррПараметры.ЭтоНовый); 
		КонецЕсли;
	КонецЕсли;
	
	Если Не Результат Тогда
		СтррПараметры.ПропускДокумента = Истина;
	КонецЕсли;			
	
	Возврат Результат;
	
КонецФункции // ЗагрузитьДокументСчетФактура()

Функция ЗагрузитьДокументПеремещение(ТекстXML, СтррПараметры)
	
	ОбъектДок =  СтррПараметры.ОбъектДокумента;
	
	СтррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML);
	
	СтррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	СтррЗначения.ИдКатегории	= ТекстXML.ПолучитьАтрибут("A02");
	СтррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A06");
	СтррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A07");
	СтррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A08");
	СтррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	СтррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A011"));
	
	СкладОтправитель = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A03"), "Склады");
	СкладПолучатель	 = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A04"), "Склады");
	ВидЦены			 = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A09"), "ВидыЦен");
	
	ОбъектДок.Заполнить(Неопределено);
	ОбъектДок.Ответственный = ВыбНастройкиАгента.Пользователь;
	
	ДокМенеджер = Документы.ПеремещениеТоваров;
	
	СтррОбязательныеПоля = Новый Структура("Организация");
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, СтррЗначения, ДокМенеджер, СтррОбязательныеПоля);
	
	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		Текст = "В документе Перемещение товаров № " + СтррЗначения.Номер + " от " + СтррЗначения.Дата + "  не указан склад-отправитель!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
	Иначе 
		ОбъектДок.СкладОтправитель = СкладОтправитель;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		Текст = "В документе Перемещение товаров № " + СтррЗначения.Номер + " от " + СтррЗначения.Дата + "  не указан склад-получатель!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
	Иначе 
		ОбъектДок.СкладПолучатель = СкладПолучатель;
	КонецЕсли;
	
	ОбъектДок.Статус   				= Перечисления.СтатусыПеремещенийТоваров.Принято;
	ОбъектДок.ВидЦены  				= ВидЦены;
	ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	
	Если Не ОбъектДок.ЭтоНовый() Тогда		
		ОбъектДок.Товары.Очистить();		
	КонецЕсли;
	
	ПоляСтруктуры = "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, Количество";
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура("ПроверитьЗаполнитьУпаковкуПоВладельцу,ПересчитатьКоличествоЕдиниц");
	
	ИдТЧТовары = НРег("3097F10A-BEE6-4A76-AD7A-D4663C9B73EC"); // идентификатор ТЧ "Товары" у Перемещения в МТ 2.0
	
	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры 		= ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики 	= ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм 		= ТекстXML.ПолучитьАтрибут("A03");
				Количество 			= Число(ТекстXML.ПолучитьАтрибут("A04"));
				// Цена 				= Число(ТекстXML.ПолучитьАтрибут("A05"));
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				
				НоваяСтрока = ОбъектДок.Товары.Добавить();
				
				СтруктураЗаполнения = Новый Структура(ПоляСтруктуры, ТекНоменклатура, ТекХарактеристика, ТекЕдиница, Количество);
				
				СтруктураДействий.ПроверитьЗаполнитьУпаковкуПоВладельцу = ТекЕдиница;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураЗаполнения, СтруктураДействий, КэшированныеЗначения);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаполнения, ПоляСтруктуры);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗаписьДокумента(ОбъектДок,  СтррЗначения, СтррПараметры.ЭтоНовый);
	
	Возврат Результат;
	
КонецФункции

//!!! Переделать! Можно сразу загружать кассовый ордер в БД и после проставлять ссылки.
Процедура ЗагрузитьДокументКассовыйОрдер(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты)

	ОбъектДок = СтррПараметры.ОбъектДокумента;
	
	СтррЗначения = СвойстваДокументаИзXML();
	ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML);
	
	СтррЗначения.ИдОрганизации	= ТекстXML.ПолучитьАтрибут("A01");
	СтррЗначения.ИдКлиента		= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A02"));
	СтррЗначения.ИдСоглашения 	= ТекстXML.ПолучитьАтрибут("A04");
	СтррЗначения.Комментарий 	= ТекстXML.ПолучитьАтрибут("A06");
	СтррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A07"));
	СтррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A011");
	СтррЗначения.Широта 		= ТекстXML.ПолучитьАтрибут("A012");
	СтррЗначения.Долгота 		= ТекстXML.ПолучитьАтрибут("A013");
	СтррЗначения.ВремяНачала 	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A014"));
	СтррЗначения.ВремяОкончания	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A015"));
	
	Если ИспользоватьКонтрагентов = Истина Тогда
		СтррЗначения.ИдКонтрагента = ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A02"), ТекстXML.ПолучитьАтрибут("A03"));
	КонецЕсли;

	ИдДокОснования	= ТекстXML.ПолучитьАтрибут("A09");
	// ВидОплаты 		= ТекстXML.ПолучитьАтрибут("A016");
	
	ДокМенеджер = ?(ТипЗнч(ОбъектДок.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер"), 
			Документы.ПриходныйКассовыйОрдер, Документы.РасходныйКассовыйОрдер);
	
	//@skip-check structure-consructor-too-many-keys
	СтррОбязательныеПоля = Новый Структура("Организация, Партнер, Контрагент, Соглашение");
	ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, СтррЗначения, ДокМенеджер, СтррОбязательныеПоля);

	ОбъектДок.Кассир = ПолучитьКассира(ОбъектДок.Организация, ВыбНастройкиАгента.Пользователь); // sk_230126 MOD-3332 ОбъектДок.Кассир = ВыбНастройкиАгента.Пользователь; 
	УстановитьКассуВКассовомОрдере(ОбъектДок);
	ОбъектДок.Валюта = ОбъектДок.Касса.ВалютаДенежныхСредств;    
	
	//(( sk_230302 MOD-3344 
	ОбъектДок.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбАгент, РеквизитОбъекта("Спр_Пользователи_Подразделение"));
	//)) sk_230302

	Если ИспользоватьПунктыРазгрузки Тогда
		Клиент	 	= СсылкаИзСправочника(СтррЗначения.ИдКлиента, "Контрагенты"); 
		// Соглашение 	= СсылкаИзСправочника(СтррЗначения.ИдСоглашения, "ДоговорыКонтрагентов");
	Иначе 
		Клиент	 	= СсылкаИзСправочника(СтррЗначения.ИдКлиента, "Партнеры"); 
		Если ИспользоватьДоговоры() Тогда
		    // Договор    = СсылкаИзСправочника(СтррЗначения.ИдСоглашения, "ДоговорыКонтрагентов");
		Иначе			
			// Соглашение = СсылкаИзСправочника(СтррЗначения.ИдСоглашения, "СоглашенияСКлиентами");
		КонецЕсли; 
	КонецЕсли;
	// Реквизитов "Договор" и "Соглашения" в документе ПКО в 1С нет.
	
	УстановитьРеквизитыДляКонтрагентаВКассовомОрдере(ОбъектДок);
	УстановитьБанковскийСчетВКассовомОрдере(ОбъектДок);
	ОбъектДок.Комментарий = СтррЗначения.Комментарий;
	
	// Заполняем строку табличной части "Расшифровка платежа"
	СтрокаПлатеж = ?(ОбъектДок.РасшифровкаПлатежа.Количество() > 0, ОбъектДок.РасшифровкаПлатежа[0], ОбъектДок.РасшифровкаПлатежа.Добавить());
	СтрокаПлатеж.Партнер 				= ?(ИспользоватьПунктыРазгрузки, Клиент.Партнер, Клиент);
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ОбъектДок.СтатьяДвиженияДенежныхСредств;
	СтрокаПлатеж.Сумма 					= ОбъектДок.СуммаДокумента;
	СтрокаПлатеж.ВалютаВзаиморасчетов 	= ОбъектДок.Валюта;
	СтрокаПлатеж.СуммаВзаиморасчетов 	= ОбъектДок.СуммаДокумента;
	Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
		СтрокаПлатеж.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбАгент, РеквизитОбъекта("Спр_Пользователи_Подразделение")); // sk_230302 MOD-3344 СтрокаПлатеж.Подразделение = ФизическиеЛицаУТ.ПодразделениеФизическогоЛица(ОбъектДок.ПодотчетноеЛицо);
	Иначе
		СтрокаПлатеж.Подразделение = ОбъектДок.Кассир[РеквизитОбъекта("Спр_Пользователи_Подразделение")];
	КонецЕсли;	
	Организация	= СсылкаИзСправочника(СтррЗначения.ИдКлиента, "Организации");
	Если ЗначениеЗаполнено(Организация) Тогда
		СтрокаПлатеж.Организация = Организация;
	КонецЕсли;
	
	СтрокаТ = ЗагружаемыеОбъекты.тзКассовыеДокументы.Добавить();
	СтрокаТ.Документ 	 = ОбъектДок;
	СтрокаТ.СтррЗначения = СтррЗначения; // для записи значений доп. реквизитов
	СтрокаТ.ЭтоНовый 	 = СтррПараметры.ЭтоНовый;
	СтрокаТ.ИдОснования  = ИдДокОснования;

КонецПроцедуры

Функция ЗагрузитьДокументМерчендайзинг(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты)

	СтррДокумент = СтррПараметры.ОбъектДокумента; // для виртуальных документов СтррДокумент - это Структура, которая будет записана в Хранилище
	
	СтррЗначения = СвойстваДокументаИзXML("ДокументОснование,ЭтоНовый");
	ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML);
	
	СтррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	СтррЗначения.ИдКлиента	 	= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A02"));
	//СтррЗначения.ИдКонтрагента 	= ТекстXML.ПолучитьАтрибут("A03");	
	СтррЗначения.СуммаДокумента = Число(ТекстXML.ПолучитьАтрибут("A06"));
	СтррЗначения.Комментарий   	= ТекстXML.ПолучитьАтрибут("A07");		
	СтррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A08");
	СтррЗначения.Широта	     	= ТекстXML.ПолучитьАтрибут("A09");
	СтррЗначения.Долгота	    = ТекстXML.ПолучитьАтрибут("A010");			
	СтррЗначения.ВремяНачала	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A013"));
	СтррЗначения.ВремяОкончания = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A014"));
	
	// ВидЦены	        			= СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A05"), "ВидыЦен");	
	
	СтррЗначения.ДокументОснование = СсылкаИзДокументаПоСпискуВидов(ТекстXML.ПолучитьАтрибут("A011"), "ЗаказКлиента,РеализацияТоваровУслуг");
	Если Не ЗначениеЗаполнено(СтррЗначения.ДокументОснование) Тогда // пытаемся найти документ заказа или реализации среди загруженных и ссылающегося на загружаемый мерчендайзинг
		СтрокаТ = ЗагружаемыеОбъекты.тзСсылкиНаМерчендайзинг.Найти(ВРег(СтррПараметры.ИдОбъекта), "ИдМерчендайзинга");
		Если СтрокаТ <> Неопределено Тогда
			СтррЗначения.ДокументОснование = СтрокаТ.Документ;
		КонецЕсли; 
	КонецЕсли; 
	
	СтррДокумент.Менеджер = ВыбНастройкиАгента.Пользователь;

	СтррОбязательныеПоля = Новый Структура("Организация, Партнер");		
	СтррЗначения.ЭтоНовый = СтррПараметры.ЭтоНовый;
	ЗаполнитьОсновныеРеквизитыДокумента(СтррДокумент, СтррЗначения,, СтррОбязательныеПоля);
	
	ИдТЧТовары = НРег("a9c8662f-9554-4deb-a78a-fb66dc757060"); // идентификатор ТЧ "Товары" у Мерчендайзинга в МТ 2.0
	
	ТЗТовары = СтррДокумент.Товары;

	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧТовары Тогда
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				ИдНоменклатуры   = ТекстXML.ПолучитьАтрибут("A01");
				ИдХарактеристики = ТекстXML.ПолучитьАтрибут("A02");
				ИдЕдиницыИзм	 = ТекстXML.ПолучитьАтрибут("A03");
				Количество		 = ТекстXML.ПолучитьАтрибут("A04");
				Цена			 = ТекстXML.ПолучитьАтрибут("A05");
				Сумма			 = ТекстXML.ПолучитьАтрибут("A07");
				ДоляПолки		 = ТекстXML.ПолучитьАтрибут("A09");
				КоличествоФейсов = ТекстXML.ПолучитьАтрибут("A010");
				
				СтрокаТ = ТЗТовары.Добавить();
				
				ТекНоменклатура  	= СсылкаИзСправочника(ИдНоменклатуры, "Номенклатура");
				ТекХарактеристика 	= ХарактеристикаНоменклатурыПоИдентификаторуМТ(ИдХарактеристики);
				ТекЕдиница 			= ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзм);
				
				СтрокаТ.Упаковка			= ТекЕдиница;				
				СтрокаТ.Номенклатура		= ТекНоменклатура;
				СтрокаТ.Характеристика		= ТекХарактеристика;
				СтрокаТ.КоличествоУпаковок  = Число(Количество);
				СтрокаТ.Цена      			= Число(Цена);
				СтрокаТ.Сумма     			= Число(Сумма);
				СтрокаТ.ДоляПолки		 	= Число(ДоляПолки);
				СтрокаТ.КоличествоФейсов 	= Число(КоличествоФейсов);
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Результат = ЗаписьВиртуальногоДокумента(СтррДокумент, СтррЗначения, СтррПараметры, ЗагружаемыеОбъекты);
	
	Возврат Результат;

КонецФункции

Функция ЗагрузитьДокументПосещение(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты)

	СтррДокумент = СтррПараметры.ОбъектДокумента; // для виртуальных документов СтррДокумент - это Структура, которая будет записана в Хранилище
	
	СтррЗначения = СвойстваДокументаИзXML("РезультатПосещения,РезультатПосещения_Представление,ЭтоНовый");
	ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML);
	
	СтррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	СтррЗначения.ИдКлиента	 	= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03") , ТекстXML.ПолучитьАтрибут("A02"));
	//СтррЗначения.ИдКонтрагента 	= ТекстXML.ПолучитьАтрибут("A03"); // в МТ - это поле "ТорговаяТочка"	
	
	СтрИдРезультата = ТекстXML.ПолучитьАтрибут("A04");
	Если ЗначениеЗаполнено(СтрИдРезультата) Тогда
		ИдРезультата = Новый УникальныйИдентификатор(СтрИдРезультата);
	Иначе	
		ИдРезультата = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	КонецЕсли; 
	
	СтррЗначения.РезультатПосещения 				= ИдРезультата;
	СтррЗначения.РезультатПосещения_Представление   = ВОТЗПолучитьЗначениеРеквизита("_РезультатыПосещений", ИдРезультата, "Наименование");
	
	СтррЗначения.Комментарий   	= ТекстXML.ПолучитьАтрибут("A05");		
	СтррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A06");
	СтррЗначения.Широта	     	= ТекстXML.ПолучитьАтрибут("A07");
	СтррЗначения.Долгота	    = ТекстXML.ПолучитьАтрибут("A08");			
	СтррЗначения.ВремяНачала	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A09"));
	СтррЗначения.ВремяОкончания = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A010"));
	
	СтррДокумент.Менеджер 		= ВыбНастройкиАгента.Пользователь;

	СтррОбязательныеПоля = Новый Структура("Организация, Партнер");
	СтррЗначения.ЭтоНовый = СтррПараметры.ЭтоНовый;
	ЗаполнитьОсновныеРеквизитыДокумента(СтррДокумент, СтррЗначения,, СтррОбязательныеПоля);
	ЗаполнитьЗначенияСвойств(СтррДокумент, СтррЗначения, "РезультатПосещения,РезультатПосещения_Представление");
	
	ИдТЧВопросы = НРег("99f6a8ce-3046-4782-ab5e-557f40243749"); // идентификатор ТЧ "Вопросы" у документа "Посещение" в МТ 2.0
	
	//тзВопросы = СтррДокумент.Вопросы;

	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = ИдТЧВопросы Тогда
			Пока ТекстXML.Прочитать() Цикл
				
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
				
				//ИдВопроса    = ТекстXML.ПолучитьАтрибут("A01");
				//стрОтвет 	 = ТекстXML.ПолучитьАтрибут("A02");
				//Обязательный = Булево(Число(ТекстXML.ПолучитьАтрибут("A03")));
				
				//СтрокаТ = тзВопросы.Добавить();
				//
				//СтрокаТ.Вопрос	= ???(ИдВопроса);
				//СтрокаТ.Ответ	= ???(Ответ);
				//СтрокаТ.Обязательный = Обязательный;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Результат = ЗаписьВиртуальногоДокумента(СтррДокумент, СтррЗначения, СтррПараметры, ЗагружаемыеОбъекты);
	
	Возврат Результат;

КонецФункции

Функция ЗагрузитьДокументЗадание(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты)

	СтррДокумент = СтррПараметры.ОбъектДокумента; // для виртуальных документов СтррДокумент - это Структура, которая будет записана в Хранилище
	
	СтррЗначения = СвойстваДокументаИзXML("НеИзменятьВМУ,СозданВЦБД,ДатаТочкиТрека,Договор,Соглашение,ЭтоНовый");
	Если СтррЗначения.Свойство("СуммаДокумента") Тогда
		СтррЗначения.Удалить("СуммаДокумента");
	КонецЕсли;
	
	ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML);
	
	СтррЗначения.ИдОрганизации 	= ТекстXML.ПолучитьАтрибут("A01");
	СтррЗначения.ИдКлиента	 	= ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A03"), ТекстXML.ПолучитьАтрибут("A02"));
	
	Если ИспользоватьКонтрагентов Тогда
		СтррЗначения.ИдКонтрагента = ?(РежимВыгрузкиРекомендуемый, ТекстXML.ПолучитьАтрибут("A02"), ТекстXML.ПолучитьАтрибут("A03"));
	КонецЕсли;
	
	Если ИспользоватьСоглашения() Тогда
		СтррЗначения.Соглашение = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A04"), "СоглашенияСКлиентами");
	ИначеЕсли ИспользоватьДоговоры() Тогда
		СтррЗначения.Договор = СсылкаИзСправочника(ТекстXML.ПолучитьАтрибут("A04"), "ДоговорыКонтрагентов");
	КонецЕсли;
	
	СтррЗначения.Комментарий   	= ТекстXML.ПолучитьАтрибут("A05");		
	СтррЗначения.ИдКатегории 	= ТекстXML.ПолучитьАтрибут("A06");
		
	СтррЗначения.ВремяНачала	= ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A07"));
	СтррЗначения.ВремяОкончания = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A08"));
	СтррЗначения.Широта	     	= ТекстXML.ПолучитьАтрибут("A011");
	СтррЗначения.Долгота	    = ТекстXML.ПолучитьАтрибут("A012");
	СтррЗначения.ДатаТочкиТрека = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("A013"));
	
	СтррЗначения.НеИзменятьВМУ  = ТекстXML.ПолучитьАтрибут("A09");
	СтррЗначения.СозданВЦБД     = ТекстXML.ПолучитьАтрибут("A010");
	
	СтррДокумент.Менеджер = ВыбНастройкиАгента.Пользователь;

	СтррОбязательныеПоля = Новый Структура("Организация, Партнер");	
	СтррЗначения.ЭтоНовый = СтррПараметры.ЭтоНовый;
	ЗаполнитьОсновныеРеквизитыДокумента(СтррДокумент, СтррЗначения,, СтррОбязательныеПоля);
	
	// Виртупльный справочник ВидыЗадач
	СтррВидыЗадач = Новый Структура; // общие значения модуля формы
	ВОКонтекстФормыДополнить(СтррВидыЗадач, "_ВидыЗадач", Истина);
	ТЗВидыЗадач = ВОТЗЗагрузить(СтррВидыЗадач.ВО, Истина);

	ТЗЗадачи 	 = СтррДокумент.Задачи;
	ТЗСписокФото = СтррДокумент.СписокФото;	

	ТекстXML.Прочитать();
	Если ТекстXML.Имя = "TABLES" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		ТекстXML.Прочитать();
		Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "df5a99c3-4778-4cfb-b5f2-877449e05d3b" Тогда
			Пока ТекстXML.Прочитать() Цикл
				Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					//ТекстXML.Пропустить();
					Прервать;
				КонецЕсли;
				
				Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
					Продолжить;
				КонецЕсли;
			
				СтрокаТ = ТЗЗадачи.Добавить();
				СтрокаТ.GUID					= Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("GUID"));
				СтрокаТ.ВидЗадачи 				= Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("A01")); 
				
				СТЗВидЗадачиПредставление = ТЗВидыЗадач.Найти(СтрокаТ.ВидЗадачи, "ID");
				Если СТЗВидЗадачиПредставление = Неопределено Тогда
					СтрокаТ.ВидЗадачиПредставление 	= "Обьект не найден <" + Строка(СтрокаТ.ВидЗадачи) + ">";
					СтрокаТ.Результат 				= Неопределено;
					СтрокаТ.РезультатПредставление  = "";
				Иначе
					СтрокаТ.ВидЗадачиПредставление 	= СТЗВидЗадачиПредставление.Наименование;
					СтрокаТ.Результат 	 			= ТекстXML.ПолучитьАтрибут("A04");
					СтрокаТ.РезультатПредставление  = "";
					ЗаполнитьРезультатДокументаЗадание(СТЗВидЗадачиПредставление.ТипЗадачи, СтрокаТ.Результат, СтрокаТ.РезультатПредставление)
				КонецЕсли;
				
				СтрокаТ.Комментарий            	= ТекстXML.ПолучитьАтрибут("A02");
				СтрокаТ.Обязательная            = Булево(Число(ТекстXML.ПолучитьАтрибут("A03")));

			КонецЦикла;
			
			ТекстXML.Прочитать();
			Если НРег(СокрЛП(ТекстXML.ПолучитьАтрибут("GUID"))) = "d4ab3dc4-7fe1-439f-af1f-58d8a7e48767" Тогда
				Пока ТекстXML.Прочитать() Цикл
					Если ТекстXML.Имя = "TABLE" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						ТекстXML.Пропустить();
						Прервать;
					КонецЕсли;
					
					Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТ = ТЗСписокФото.Добавить();
					СтрокаТ.GUID 				=  Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("GUID"));
                    СтрокаТ.ИдЗадачиДокумента  	=  Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("A01"));
	      			СтрокаТ.ФотоЗадачи  		=  Новый УникальныйИдентификатор(ТекстXML.ПолучитьАтрибут("A02"));

					СтррДанныеФото = ПолучитьДанныеДляЗагрузкиФото(ТекстXML, "*ФотоТЧЗаданиеСписокФото");
					Если СтррДанныеФото.ОписаниеОшибки = Неопределено Тогда
						// фотографии загружаются в УТ в 3 этапа
						ЗагрузитьФотографиюЭтап1(СтррДанныеФото, ЗагружаемыеОбъекты); // загрузка в ЗагружаемыеОбъекты.тзФотографии
					Иначе
						ОповеститьОСобытии(СтррДанныеФото.ОписаниеОшибки);
						ОповеститьОСобытии(СтрШаблон_("Пропущена загрузка фотографии ""%1"". Загрузка не предусмотрена!", СтрокаТ.GUID)); 
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Результат = ЗаписьВиртуальногоДокумента(СтррДокумент, СтррЗначения, СтррПараметры, ЗагружаемыеОбъекты);
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьРезультатДокументаЗадание(ТипЗадачи, СтрРезультат, СтрПредставление)
	
	Если ТипЗнч(ТипЗадачи) <> Тип("УникальныйИдентификатор") ИЛИ НЕ ЗначениеЗаполнено(СтрРезультат) Тогда
		СтрРезультат 	 = Неопределено;
		СтрПредставление = "";
		Возврат; 
	КонецЕсли;	
		
	Если ТипЗадачи = Новый уникальныйидентификатор("23d6533f-f121-4939-9a40-27257371ac26") Тогда
		// Ввести дату
		Попытка
			СтрРезультат 		= Дата(СтрРезультат);
			СтрПредставление 	= Строка(СтрРезультат);
		Исключение
			Попытка
				СтрРезультат     = ДатаВремяXMLВФормат1С(СтрРезультат);
				СтрПредставление = Строка(СтрРезультат);
			Исключение
				СтрРезультат     = Неопределено;
				СтрПредставление = "";
			КонецПопытки;
		КонецПопытки;     
	
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("061879d3-e400-4cc8-b4f9-999c3399f47c") Тогда
		// совершить обмен
		Попытка
			СтрРезультат     = ДатаВремяXMLВФормат1С(СтрРезультат);
			СтрПредставление = "Выполнен " + Строка(СтрРезультат);
		Исключение
			Попытка
				СтрРезультат 		= Дата(СтрРезультат);
				СтрПредставление 	= "Выполнен " + Строка(СтрРезультат);
			Исключение
				СтрРезультат     = Неопределено;
				СтрПредставление = "";
			КонецПопытки;
		КонецПопытки;
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("19661470-75a6-4eb4-be94-44924664b3d1") Тогда
		// Ввести число
		СтрРезультат 	 = Число(СтрРезультат);
		СтрПредставление = Строка(СтрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("a429fb60-a01b-4282-ba56-85721e24257d") Тогда
		// Ввести строку
		СтрРезультат 	 = СтрРезультат;
		СтрПредставление = СтрРезультат;

	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("b65c3f4c-6cbe-4675-9685-9f3c62be199e") Тогда
		// Выбрать ""да"" или ""нет""
		Если СтрРезультат = "1" Тогда
			СтрРезультат 	 = Истина;
			СтрПредставление = "Да";
		ИначеЕсли СтрРезультат = "0" Тогда
			СтрРезультат 	 = Ложь;
			СтрПредставление = "Нет";
		Иначе
			СтрРезультат     = Неопределено;
			СтрПредставление = "";
		КонецЕсли;						
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("b483e5f9-95e6-4e2d-b6b2-d5954fcc25ae") Тогда
		// сделать фото
		СтрРезультат 	 = СтрРезультат;
		СтрПредставление = СтрРезультат;
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("eaded006-5271-4497-9222-79541d23e3fa") Тогда
		// Создать документ Заказ
		СтрРезультат 	 = СсылкаИзДокумента(СтрРезультат, "ЗаказКлиента");
		СтрПредставление = Строка(СтрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("d6176c16-130d-40d8-ad70-13a39c957927") Тогда
		// Создать документ Реализация
		СтрРезультат 	 = СсылкаИзДокумента(СтрРезультат, "РеализацияТоваровУслуг");
		СтрПредставление = Строка(СтрРезультат);

	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("57ec9bd4-c2ec-47e0-86c1-b06211735f32") Тогда
		// Создать документ перемещение
		СтрРезультат 	 = СсылкаИзДокумента(СтрРезультат, "ПеремещениеТоваров");
		СтрПредставление = Строка(СтрРезультат);

	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("79e5b0f6-b019-41fe-9214-c7a204e05974") Тогда
		// Создать документ поступление
		СтрРезультат 	 = СсылкаИзДокумента(СтрРезультат, "ПоступлениеТоваров");
		СтрПредставление = Строка(СтрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("ec84ce42-a9c3-4936-94fb-595ec1e84aef") Тогда
		// Создать документ возврат
		СтрРезультат 	 = СсылкаИзДокумента(СтрРезультат, "ВозвратТоваровОтКлиента");
		СтрПредставление = Строка(СтрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("2ec90b5a-56ff-4338-aeaa-2416b8923bf8") Тогда
		// Создать документ пко
		СтрРезультат 	 = СсылкаИзДокумента(СтрРезультат, "ПриходныйКассовыйОрдер");
		СтрПредставление = Строка(СтрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("8bed83c4-4428-4206-89d1-a31790130937") Тогда
		// Создать документ рко
		СтрРезультат 	 = СсылкаИзДокумента(СтрРезультат, "РасходныйКассовыйОрдер");
		СтрПредставление = Строка(СтрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("544b81fd-49da-453e-9b9c-eec549cbef10") Тогда
		// Создать документ мерчендайзинг
		Если СтрРезультат = "00000000-0000-0000-0000-000000000000" Тогда
			СтрПредставление = "Документ не создан";
		Иначе
			СтрПредставление = "Документ ""Мерчендайзинг""";
		КонецЕсли;
		СтрРезультат 	 = Новый уникальныйидентификатор(СтрРезультат);
		
	ИначеЕсли ТипЗадачи = Новый уникальныйидентификатор("2f7826f4-2665-49fa-95e7-e7c8cc6ebf0e") Тогда
		// Создать документ посещение
		Если СтрРезультат = "00000000-0000-0000-0000-000000000000" Тогда
			СтрПредставление = "Документ не создан";
		Иначе
			СтрПредставление = "Документ ""Посещение""";
		КонецЕсли;
		СтрРезультат 	 = Новый уникальныйидентификатор(СтрРезультат);
				
	Иначе
		СтрРезультат 	 = Неопределено;	
		СтрПредставление = "";
		
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет реквизит "АдресДоставки" в загружаемом документе.
Процедура ПроставитьАдресДоставки(ОбъектДок, ИдАдреса)
	
	Если ИспользоватьАдресаДоставки И Не ПустаяСтрока(ИдАдреса) Тогда	
		ТЗАдресаДоставки = АдресаДоставкиЗагрузитьТЗ();
		СТЗАдресДоставки = ТЗАдресаДоставки.Найти(НРег(ИдАдреса), "Идентификатор");
		Если ГКонфигурация = "УТ_АКФ" Тогда
			Если Не СТЗАдресДоставки = Неопределено Тогда
				//+akf необходимо производить поиск по идентификатору безе учета добавленных ранее(для сохранения длины строки передаваемой в МУ) трех символов
				//@skip-check empty-except-statement
				Попытка
					ТТД = Справочники.ТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(Лев(СТЗАдресДоставки.КодАдреса, 36)));
					ОбъектДок.ТорговаяТочка = ТТД;	
					//@skip-check reading-attribute-from-database
					//@skip-check unknown-method-property
					ОбъектДок.АдресДоставки = ТТД.Адрес;
				Исключение
				КонецПопытки;	
				//найденный объект проставляем в необходимое нам поле
				//-akf
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОбъектДок.ТорговаяТочка) Тогда
				ОбъектДок.АдресДоставки = "Объект не найден.";
			КонецЕсли;	
		Иначе
			Если Не СТЗАдресДоставки = Неопределено Тогда
				ОбъектДок.АдресДоставки	= СТЗАдресДоставки.Адрес;
			КонецЕсли;
        КонецЕсли;
	КонецЕсли;
	
	//Заполнение адреса доставки
	Если НЕ ИспользоватьАдресаДоставки И НЕ ЗначениеЗаполнено(ОбъектДок.АдресДоставки) И ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Для каждого Элемент Из ОбъектДок.Партнер.КонтактнаяИнформация Цикл
			Если Элемент.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				ОбъектДок.АдресДоставки = Элемент.Представление;
				Прервать;
			Конецесли;
		КонецЦикла;                                              
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьБанковскийСчетВКассовомОрдере(ДокументОбъект)
	
	Если ПоколениеКонфигурации("<=УТ_11.2.2") Тогда	
		//@skip-check many-actual-parameters
		ДокументОбъект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДокументОбъект.Организация, Перечисления.ФормыОплаты.Наличная, , ДокументОбъект.Валюта);
			
	Иначе 
		СтррПараметры = Новый Структура;
		СтррПараметры.Вставить("Организация", ДокументОбъект.Организация);
		СтррПараметры.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Наличная);
		СтррПараметры.Вставить("БанковскийСчет", Неопределено);
		СтррПараметры.Вставить("Валюта", ДокументОбъект.Валюта);
		СтррПараметры.Вставить("НаправлениеДеятельности", ДокументОбъект.ХозяйственнаяОперация);
		ДокументОбъект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтррПараметры);
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьРеквизитыДляКонтрагентаВКассовомОрдере(ДокументОбъект)

	Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
		МодульПартнерыИКонтрагенты = ОбщегоНазначения.ОбщийМодуль("ПартнерыИКонтрагенты");
		СтррРеквизиты = МодульПартнерыИКонтрагенты.РеквизитыКонтрагента(ДокументОбъект.Контрагент);
	Иначе
		//@skip-check unknown-method-property
		СтррРеквизиты = Справочники.Контрагенты.РеквизитыКонтрагента(ДокументОбъект.Контрагент);
	КонецЕсли;
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		ДокументОбъект.ПринятоОт = СтррРеквизиты.Наименование;
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
		ДокументОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	Иначе
		ДокументОбъект.Выдать = СтррРеквизиты.Наименование;
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
		ДокументОбъект.СтатьяДвиженияДенежныхСредств =  Справочники.СтатьиДвиженияДенежныхСредств.ВозвратОплатыКлиенту;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКассуВКассовомОрдере(ДокументОбъект)

	Если ЗначениеЗаполнено(ВыбНастройкиАгента.Касса) Тогда
		ДокументОбъект.Касса = ВыбНастройкиАгента.Касса; 
		Возврат;
	КонецЕсли;
	
	Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
	Выборка = Справочники.Кассы.Выбрать( , ДокументОбъект.Организация);
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.ПометкаУдаления И Выборка.ВалютаДенежныхСредств = Валюта Тогда
			ДокументОбъект.Касса = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
		Текст = "Не найдено ни одной кассы для организации """ + ДокументОбъект.Организация + """. Выберите кассу в документе вручную!";
		ОповеститьОСобытии(Текст,, ДокументОбъект.Ссылка);
	КонецЕсли;

КонецПроцедуры

Функция ПрочитатьИПроверитьРеквизит(ИдентификаторGUID, ВидСправочника, ИмяРеквизита, ОбъектДок, ПредставлениеДокВМУ, УстановитьРеквизитДокумента = Ложь)

	Если ЭтоПустойИдентификатор(ИдентификаторGUID) Тогда
		Текст = "В документе """ + ПредставлениеДокВМУ + """ не реквизит """ + ИмяРеквизита + """!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		Возврат Неопределено;
	Иначе
		Результат = СсылкаИзСправочника(ИдентификаторGUID, ВидСправочника);
		Если УстановитьРеквизитДокумента Тогда
			ОбъектДок[ИмяРеквизита] = Результат;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;

КонецФункции 

// Процедура заполняет основные реквизиты документа (в т.ч. и виртуального документа).
// Параметры:
// 	ОбъектДок - ДокументОбъект, Структура - если передан обычный документ, то значение типа ДокументОбъект, если передан виртуальный документ, то Структура.
// 	СтррЗначения - Структура - структура значений реквизитов документа, прочитанных из XML-файла.
// 	ДокументМенеджер - ДокументМенеджер, Неопределено - если передан обычный документ, то МенеджерДокумента, если передан виртуальный документ, то Неопределено.
// 	СтррОбязательныеПоля - Структура - обязательные поля для заполнения документа.
Процедура ЗаполнитьОсновныеРеквизитыДокумента(ОбъектДок, СтррЗначения, ДокументМенеджер = Неопределено, СтррОбязательныеПоля)

	ИдФирмы 	 = СтррЗначения.ИдОрганизации;
	ИдКлиента 	 = СтррЗначения.ИдКлиента;
	ИдСоглашения = СтррЗначения.ИдСоглашения;
	НомерДок 	 = СтррЗначения.Номер;
	ДатаДок 	 = СтррЗначения.Дата;
	Комментарий  = СтррЗначения.Комментарий;
	
	Если ДокументМенеджер = Неопределено Тогда // виртуальный документ
	    Реквизиты = ГВДокРеквизиты.Получить(ОбъектДок._ВидДокумента); 
		Представление = ОбъектДок._ВидДокумента + " № " + НомерДок + " от " + ДатаДок;
	Иначе // обычный документ
		Реквизиты = ОбъектДок.Метаданные().Реквизиты;
		Представление = ОбъектДок.Метаданные().Синоним + " № " + НомерДок + " от " + ДатаДок;		
	КонецЕсли; 

	Если СтррОбязательныеПоля.Свойство("Организация") И Реквизиты.Найти("Организация") <> Неопределено Тогда
		ПрочитатьИПроверитьРеквизит(ИдФирмы, "Организации", "Организация", ОбъектДок, Представление, Истина);
	КонецЕсли;
	
	ЕстьРеквизитПартнер = Реквизиты.Найти("Партнер") <> Неопределено;	
	Если СтррОбязательныеПоля.Свойство("Партнер") Тогда
		Партнер = ПрочитатьИПроверитьРеквизит(ИдКлиента, "Партнеры", "Партнер", ОбъектДок, Представление);
		Если ЕстьРеквизитПартнер Тогда 
			ОбъектДок.Партнер = Партнер;
		КонецЕсли; 
	КонецЕсли;
	
	ЕстьРеквизитКонтрагент = Реквизиты.Найти("Контрагент") <> Неопределено;	
	Если ЕстьРеквизитКонтрагент И СтррОбязательныеПоля.Свойство("Контрагент") Тогда
		Если СтррЗначения.Свойство("ИдКонтрагента") Тогда
			Контрагент = ПрочитатьИПроверитьРеквизит(СтррЗначения.ИдКонтрагента, "Контрагенты", "Контрагент", ОбъектДок, Представление);
			ОбъектДок.Контрагент = Контрагент;
		КонецЕсли;
	КонецЕсли;	

	Если СтррОбязательныеПоля.Свойство("Соглашение") И Реквизиты.Найти("Соглашение") <> Неопределено Тогда
		
		Если ИспользоватьДоговоры() Тогда
			Если ЭтоПустойИдентификатор(ИдСоглашения) Тогда
				Текст = "В документе """ + Представление + """ не указан договор! Будет проставлен договор по умолчанию!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
			Иначе	
				ОбъектДок.Договор = СсылкаИзСправочника(СтррЗначения.ИдСоглашения, "ДоговорыКонтрагентов");
			КонецЕсли; 
		ИначеЕсли ИспользоватьСоглашения() Тогда
			Если ЭтоПустойИдентификатор(ИдСоглашения) Тогда 
				Текст = "В документе """ + Представление + """ не указано соглашение! Будет проставлено соглашение по умолчанию!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
			Иначе
				Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект." + ВидДокументаПоступлениеТоваровУслуг()) Тогда
					//ОбъектДок.Соглашение = СсылкаИзСправочника(СтррЗначения.ИдСоглашения, "СоглашенияСПоставщиками"); соглашения поставщиков пока не выгружаем
				Иначе
					ОбъектДок.Соглашение = СсылкаИзСправочника(СтррЗначения.ИдСоглашения, "СоглашенияСКлиентами");
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;

	Если СтррОбязательныеПоля.Свойство("Контрагент") И Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		Если ИспользоватьПунктыРазгрузки Тогда
			ПрочитатьИПроверитьРеквизит(ИдКлиента, "Контрагенты", "Контрагент", ОбъектДок, Представление, Истина);
			Если ЕстьРеквизитПартнер Тогда 
				ОбъектДок.Партнер = ОбъектДок.Контрагент.Партнер;
			КонецЕсли;
		ИначеЕсли Не ЗначениеЗаполнено(ОбъектДок.Контрагент) Тогда
			Если Не ЕстьРеквизитПартнер И ЗначениеЗаполнено(Партнер) Тогда // такое возможно для ПКО и РКО - партнер указывается в ТЧ документа
				ОбъектДок.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
			ИначеЕсли ЕстьРеквизитПартнер И ЗначениеЗаполнено(ОбъектДок.Партнер) Тогда
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ОбъектДок.Партнер, ОбъектДок.Контрагент);
			Иначе
				Текст = "В документе """ + Представление + """ не указан контрагент!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Реквизиты.Найти("Менеджер") <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ОбъектДок.Менеджер) Тогда
			ОбъектДок.Менеджер = ВыбНастройкиАгента.Пользователь;
		КонецЕсли;
		Если Реквизиты.Найти("Подразделение") <> Неопределено Тогда
			ОбъектДок.Подразделение = ОбъектДок.Менеджер[РеквизитОбъекта("Спр_Пользователи_Подразделение")];
		КонецЕсли;
	КонецЕсли;

	Если Реквизиты.Найти("Ответственный") <> Неопределено И Не ЗначениеЗаполнено(ОбъектДок.Ответственный) Тогда
		ОбъектДок.Ответственный = ВыбНастройкиАгента.Пользователь;
	КонецЕсли;

	Если Реквизиты.Найти("Комментарий") <> Неопределено Тогда
		ОбъектДок.Комментарий = Комментарий;
	КонецЕсли;
	
	Если СтррЗначения.Свойство("ДокументОснование") И Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ОбъектДок.ДокументОснование = СтррЗначения.ДокументОснование;
	КонецЕсли; 
	
	Если СтррОбязательныеПоля.Свойство("ПунктРазгрузки") И Реквизиты.Найти("алкПунктРазгрузки") <> Неопределено Тогда
		ПрочитатьИПроверитьРеквизит(СтррЗначения.ИдПунктаРазгрузки, "алкПунктыРазгрузки", "алкПунктРазгрузки", ОбъектДок, Представление, Истина);
		Если Реквизиты.Найти("алкЛицензияКонтрагента") <> Неопределено Тогда 
			ОбъектДок.алкЛицензияКонтрагента = ОбъектДок.алкПунктРазгрузки.алкОсновнаяЛицензия;
		КонецЕсли;
	КонецЕсли;
	
	Если СтррОбязательныеПоля.Свойство("Договор") И Реквизиты.Найти("Договор") <> Неопределено Тогда
		ПрочитатьИПроверитьРеквизит(ИдСоглашения, "ДоговорыКонтрагентов", "Договор", ОбъектДок, Представление, Истина);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДатаДок) ИЛИ                                                                              // Без даты
		(ЗагружатьДокументыТекущейДатой И СтррЗначения.Свойство("ЭтоНовый") И СтррЗначения.ЭтоНовый = Истина) ИЛИ 		// Для виртуальных документов, корректно и для типового.  
		(ЗагружатьДокументыТекущейДатой И НЕ СтррЗначения.Свойство("ЭтоНовый") И ДокументМенеджер = Неопределено) ИЛИ   // Виртуальные
		(ЗагружатьДокументыТекущейДатой И ДокументМенеджер <> Неопределено И ОбъектДок.ЭтоНовый())  					// Типовые
	Тогда 
		//@skip-check use-non-recommended-method
		ОбъектДок.Дата = ТекущаяДата();	
	Иначе	
		ОбъектДок.Дата = ДатаДок;
	КонецЕсли;
	
	Если Реквизиты.Найти("ДатаПлатежа") <> Неопределено Тогда
		Если ОбъектДок.ДатаПлатежа < ОбъектДок.Дата Тогда
			ОбъектДок.ДатаПлатежа = ОбъектДок.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерДок) Тогда 
		Если  ДокументМенеджер <> Неопределено И НЕ ИспользоватьНумерациюЦБД Тогда
			//@skip-check use-non-recommended-method
			Если ДокументМенеджер.НайтиПоНомеру(НомерДок, ТекущаяДата()) = ДокументМенеджер.ПустаяСсылка() Тогда
				ОбъектДок.Номер = НомерДок;
			Иначе
				Текст = "Номер  документа """ + Представление + """ уже присутствует в информационной базе, номер документа будет заменен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
			КонецЕсли;
		ИначеЕсли ДокументМенеджер <> Неопределено И ИспользоватьНумерациюЦБД Тогда
			//По умолчанию номер присваивается автоматически
			СтррЗначения.Номер = Неопределено;
		ИначеЕсли ДокументМенеджер = Неопределено Тогда // виртуальный документ - всегда присваеваем номер из МУ
			ОбъектДок.Номер = НомерДок;
		Иначе
			//По умолчанию номер присваивается автоматически	
			Текст = "Номер  документа """ + Представление + """ присвоен автоматически"; //такой ситуации не должно быть.
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
		КонецЕсли;
	КонецЕсли;

	Если СтррЗначения.Свойство("СуммаДокумента") И Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
		ОбъектДок.СуммаДокумента = СтррЗначения.СуммаДокумента;
	КонецЕсли;

КонецПроцедуры

// Функция проверяет необходимость загрузки документа в БД 1С. И, если загрузка необходима, делает подготовку к загрузке документа.
// Возвращает структуру, в которой проставлены свойства для дальнейшей загрузки документа или для пропуска документа.
Функция ПараметрыЗагрузкиДокумента(ВидДокумента, ТекстXML, ЗагружаемыеОбъекты)

	//@skip-check structure-consructor-too-many-keys
	СтррПараметры = Новый Структура("РезультатВозврата,Дата,Номер,ИдОбъекта,ЭтоНовый,Проведен,ПропускДокумента,ОбъектДокумента,Синоним,Представление,ЭтоВиртуальныйДокумент");
	
	СтррПараметры.Проведен	= Булево(Число(ТекстXML.ЗначениеАтрибута("IsPost")));
	СтррПараметры.Дата 		= Строка(ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt")));
	СтррПараметры.Номер 	= СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumberPrefix")) + СокрЛП(ТекстXML.ПолучитьАтрибут("DocNumber"));
	
	НомерДата = ?(ЗначениеЗаполнено(СтррПараметры.Номер), " N " + СокрЛП(СтррПараметры.Номер), "") + " от " + СтррПараметры.Дата;
	
	Если ВДокЭтоВиртуальныйДокумент(ВидДокумента) Тогда
	    СтррПараметры.ЭтоВиртуальныйДокумент = Истина;
		СтррПараметры.Синоним = СвойстваВидаОбъекта(ВидДокумента, "Вид", "Документ").Представление;
	Иначе
	    СтррПараметры.ЭтоВиртуальныйДокумент = Ложь;
	    ДокМенеджер = Документы[ВидДокумента];
		СтррПараметры.Синоним = ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
	КонецЕсли;
	
	СтррПараметры.Представление = СтррПараметры.Синоним + НомерДата;	
	
	СтррПараметры.ПропускДокумента = Ложь;	
	
	Если ВидДокумента = "_ВнеплановыйМаршрут" Тогда
		СтррПараметры.Вставить("ПричинаПропуска", "Данный вид документов не поддерживается.");
		СтррПараметры.ПропускДокумента  = Истина; 
		СтррПараметры.РезультатВозврата = Ложь; // документ не загружать в БД
		Возврат СтррПараметры;
	КонецЕсли;
	
	Если Не СтррПараметры.Проведен Тогда
		СтррПараметры.Вставить("ПричинаПропуска", "Документ не проведен в мобильном приложении!");
		СтррПараметры.ПропускДокумента  = Истина; 
		СтррПараметры.РезультатВозврата = Ложь; // документ не загружать в БД
		Возврат СтррПараметры;
	КонецЕсли;

	СтррПараметры.ЭтоНовый = Истина;
	СтррПараметры.ИдОбъекта = Новый УникальныйИдентификатор(ТекстXML.ЗначениеАтрибута("GUID"));
	
	// Проверяем - есть ли уже такой документ в БД 1С?
	
	Если СтррПараметры.ЭтоВиртуальныйДокумент Тогда
		
		// ищем идентификатор в ТЗ журнала виртуальных документов заданного вида		
		ТЗЖурнала = Неопределено;
		Если Не ЗагружаемыеОбъекты.Свойство(ВидДокумента, ТЗЖурнала) Тогда
			ТЗЖурнала = ВОТЗЗагрузить(ВидДокумента);
			ЗагружаемыеОбъекты.Вставить(ВидДокумента, ТЗЖурнала); // оставляем тзЖурнала загруженной в память, чтобы избежать многократной загрузки ТЗ из Хранилища.
		КонецЕсли; 
		
		СТЗЖурнала = ТЗЖурнала.Найти(СтррПараметры.ИдОбъекта, "ID"); // для виртуальных документов в ОбъектДок находится строка тзЖурнала
		Если СТЗЖурнала = Неопределено Тогда // загружаем новый виртуальный документ
			СтррПараметры.ЭтоНовый = Истина;
			СТЗЖурнала = ТЗЖурнала.Добавить(); // добавляем пустую строку в журнал, она будет заполнена в процедуре ЗагрузитьДокумент<ВиртуальныйДокумент>()
			СТЗЖурнала.ID = СтррПараметры.ИдОбъекта;
		Иначе
			СтррПараметры.ЭтоНовый = Ложь;
			Если Не ОбновлятьДокументыПриЗагрузке И ВидДокумента <> "_Задание" Тогда
				СтррПараметры.ПропускДокумента  = Истина; // документ уже есть в БД, но его не обновляем
				СтррПараметры.РезультатВозврата = Истина; // документ считаем успешно загруженным в БД
				Возврат СтррПараметры;
			КонецЕсли;
		КонецЕсли; 
		
		// Сюда попадаем, если виртуальный документ должен быть записан в БД 1С (в Хранилище).
		// После завершения загрузки документов, тзЖурнала нужно записать в Хранилище.	
		// Для этого запоминаем в свойстве "ВидыВиртуальныхДокументовДляЗаписи" массив видов виртуальных документов, ТЗ журнала которых обновлены в ЗагружаемыеОбъекты.
		// Запоминать имеет смысл только тогда, когда был записан в тзЖурнала документ - это тут и делаем.
		Если Не ЗагружаемыеОбъекты.Свойство("ВидыВиртуальныхДокументовДляЗаписи") Тогда
			МВидыДокументов = Новый Массив;
			МВидыДокументов.Добавить(ВидДокумента);
			ЗагружаемыеОбъекты.Вставить("ВидыВиртуальныхДокументовДляЗаписи", МВидыДокументов);
		ИначеЕсли ЗагружаемыеОбъекты.ВидыВиртуальныхДокументовДляЗаписи.Найти(ВидДокумента) = Неопределено Тогда
			ЗагружаемыеОбъекты.ВидыВиртуальныхДокументовДляЗаписи.Добавить(ВидДокумента);
		КонецЕсли; 
		
		СтрРеквизиты = ВДокРеквизитыШапки(ВидДокумента); // строка реквизитов шапки виртуального документа, разделенных через запятую
		// Запоминаем массив реквизитов виртуального документа - чтобы проверять наличие реквизитов при загрузке документа из МУ в ТЗ.
		Если ГВДокРеквизиты = Неопределено Тогда
			ГВДокРеквизиты = Новый Соответствие;
		КонецЕсли; 
		Если ГВДокРеквизиты.Получить(ВидДокумента) = Неопределено Тогда
			ГВДокРеквизиты.Вставить(ВидДокумента, СтрРазделить_(СтрРеквизиты)); // аналог "Метаданные().Реквизиты" для виртуальных документов
		КонецЕсли; 
	
		ОбъектДок  = Новый Структура(СтрРеквизиты);
		ОбъектДок.ID = СтррПараметры.ИдОбъекта;
		ОбъектДок.Вставить("_ВидДокумента", ВидДокумента); // системный реквизит документа
		ОбъектДок.Вставить("_строкаЖурнала", СТЗЖурнала);  // системный реквизит документа
		ОбъектДок.Вставить("Ссылка", Неопределено); 	   // свойство "Ссылка" в виртуальных документах - всегда пустое - для совместимости процедур и функций работы с "невиртуальными" документами
		ВДокРеквизитыТЧДобавить(ВидДокумента, ОбъектДок);  // добавляем реквизиты ТЧ
		
	Иначе // ЭтоВиртуальныйДокумент = Ложь
		
		СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(СтррПараметры.ИдОбъекта);
		ОбъектДок = СсылкаОбъекта.ПолучитьОбъект();
		
		Если ОбъектДок = Неопределено И ВидДокумента = "ЗаказКлиента" Тогда // заказ не нашли, пытаемся найти заказ среди документов РеализацияТоваровУслуг
			ОбъектДок = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(СтррПараметры.ИдОбъекта).ПолучитьОбъект();
		КонецЕсли;
		
		Если ОбъектДок = Неопределено И ВидДокумента = "ВозвратТоваровОтКлиента" Тогда // ВозвратТоваровОтКлиента не нашли, пытаемся найти среди документов ЗаявкаНаВозвратТоваровОтКлиента
			ОбъектДок = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолучитьСсылку(СтррПараметры.ИдОбъекта).ПолучитьОбъект();
		КонецЕсли;	
		
		Если ОбъектДок = Неопределено Тогда // загружаем новый документ
			
			Если ВидДокумента = "ЗаказКлиента" Тогда 
				Если ЗагружатьЗаказКакРеализацию() Тогда  // "Заказ" должны загрузить как "РеализацияТоваровУслуг"
					ДокМенеджер   = Документы.РеализацияТоваровУслуг;
					СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(СтррПараметры.ИдОбъекта); // заново устанавливаем ссылку из нового менеджера документов
					СтррПараметры.Синоним 		= ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
					СтррПараметры.Представление = СтррПараметры.Синоним + НомерДата;
				КонецЕсли;
			КонецЕсли;
			
			Если ВидДокумента = "ВозвратТоваровОтКлиента" И ТекстXML.ЗначениеАтрибута("A023") <> Неопределено И Число(ТекстXML.ЗначениеАтрибута("A023")) = 1 Тогда
				ДокМенеджер   = Документы.ЗаявкаНаВозвратТоваровОтКлиента;
				СсылкаОбъекта = ДокМенеджер.ПолучитьСсылку(СтррПараметры.ИдОбъекта); // заново устанавливаем ссылку из нового менеджера документов
				СтррПараметры.Синоним 		= ДокМенеджер.ПустаяСсылка().Метаданные().Синоним;
				СтррПараметры.Представление = СтррПараметры.Синоним + НомерДата;
			КонецЕсли;						
			
			ОбъектДок = ДокМенеджер.СоздатьДокумент();
			ОбъектДок.УстановитьСсылкуНового(СсылкаОбъекта);
			СтррПараметры.ЭтоНовый = Истина;
		Иначе
			Если Не ОбновлятьДокументыПриЗагрузке Тогда
				СтррПараметры.ПропускДокумента  = Истина; // документ уже есть в БД, но его не обновляем
				СтррПараметры.РезультатВозврата = Истина; // документ считаем успешно загруженным в БД
				СтррПараметры.ОбъектДокумента = ОбъектДок;
				Возврат СтррПараметры;
			КонецЕсли;
			ОбъектДок.Разблокировать();
			СтррПараметры.ЭтоНовый = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СтррПараметры.ОбъектДокумента = ОбъектДок;
	
	Возврат СтррПараметры;

КонецФункции 

Функция ЗагружатьЗаказКакРеализацию()

	Возврат Не КонстантыПолучитьЗначение("ИспользоватьЗаказыКлиентов") Или РежимЗагрузкиЗаказов = "ЗагружатьКакРеализацию"; // документ "Заказ" должны загрузить как "РеализацияТоваровУслуг"

КонецФункции 
  
// Функция загружает документ из XML-файла в БД 1С:Предприятия.
// Параметры:
//		ТекстXML - ЧтениеXML - объект ЧтениеXML
//		ЗагружаемыеОбъекты - Структура - структура для запоминания загруженных объектов (используется для выгрузки подтверждений).
//		ВидДокумента - Строка - вид документа в 1С:Предприятии
//		ИдВидДокументаМТ - УникальныйИдентификатор - идентификатор вида документа в МТ
// Возвращаемое значение:
// 		Булево - Истина - если документ успешно записан в БД, иначе Ложь. Истина возвращается в случае, если документ был ранее записан
//  					в БД 1С, но не обновлен из-за настройки ОбновлятьДокументыПриЗагрузке = Ложь.
Функция ЗагрузитьДокумент(ТекстXML, ЗагружаемыеОбъекты, ВидДокумента, ИдВидДокументаМТ)

	Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидДокумента = "СчетФактураВыданный" И ГКонфигурация = "УТ_UA" Тогда 
		Возврат Ложь;
	КонецЕсли; 
	
	СтррПараметры = ПараметрыЗагрузкиДокумента(ВидДокумента, ТекстXML, ЗагружаемыеОбъекты);
	
	// ОповеститьОСобытии("Попытка загрузить документ (id=" + СтррПараметры.ИдОбъекта + ") '" + СтррПараметры.Представление + "'",,, "ТекущийАгент"); // gi_240220 добавлено для упрощения отладки	
	Результат = СтррПараметры.РезультатВозврата;	
	
	Если Результат <> Ложь И Не СтррПараметры.ПропускДокумента Тогда
		
		Если ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь;
		ИначеЕсли ТекстXML.Имя = "ELEMENTS" И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат Ложь;
		КонецЕсли;

		Если ВидДокумента = "ЗаказКлиента" Тогда
			Результат = ЗагрузитьДокументЗаказ(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "ПриходныйКассовыйОрдер" Или ВидДокумента = "РасходныйКассовыйОрдер" Тогда
			ЗагрузитьДокументКассовыйОрдер(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты); //!!!! переделать - загрузка сделана сначала в ТЗ, можно сразу грузить в БД!!!!
			Результат = Истина; // !!!! убрать после переделки
		ИначеЕсли ВидДокумента = "РеализацияТоваровУслуг" Тогда 
			Результат = ЗагрузитьДокументРеализация(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "ПеремещениеТоваров" Тогда
			Результат = ЗагрузитьДокументПеремещение(ТекстXML, СтррПараметры);
		ИначеЕсли ВидДокумента = "_Мерчендайзинг" Тогда
			Результат = ЗагрузитьДокументМерчендайзинг(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "_Посещение" Тогда
			Результат = ЗагрузитьДокументПосещение(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "_Задание" Тогда
			Результат = ЗагрузитьДокументЗадание(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "СчетФактураВыданный" Тогда
			Результат = ЗагрузитьДокументСчетФактура(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты);
		ИначеЕсли ВидДокумента = "ВозвратТоваровОтКлиента" ИЛИ ВидДокумента = ВидДокументаПоступлениеТоваровУслуг() Тогда
			Результат = ЗагрузитьДокументПоступлениеВозврат(ТекстXML, СтррПараметры, ЗагружаемыеОбъекты);
		Иначе // какой-то новый вид документа в МТ, про который модуль не знает
			СтррПараметры.ПропускДокумента = Истина;
			СтррПараметры.Вставить("ПричинаПропуска", "Данный вид документов не поддерживается.");
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Если СтррПараметры.ПропускДокумента Тогда
		
		СтррСвойства = Новый Структура("Представление", СтррПараметры.Представление);
		Если ТипСсылки(СтррПараметры.ОбъектДокумента) = "Документ" Тогда
			СтррСвойства.Вставить("СсылкаНаОбъект", СтррПараметры.ОбъектДокумента.Ссылка);
		КонецЕсли;
		СообщитьОПропускеДокумента(СтррСвойства, СтруктураЗначениеСвойства(СтррПараметры, "ПричинаПропуска"));
		ТекстXML.Пропустить();
		
	КонецЕсли; 
		
	Если Результат Тогда // Сюда попадаем в одном из случаев:
		// 1. Новый документ успешно загружен в БД 1С. 
		// 2. Документ был ранее загружен в БД 1С и был обновлен или был пропущен, т.к. настройка ОбновлятьДокументыПриЗагрузке = Ложь.
		СтрокаТ = ЗагружаемыеОбъекты.ТЗЗагруженныеДокументы.Добавить();
		СтрокаТ.Идентификатор 	 = СтррПараметры.ИдОбъекта; // идентификатор (GUID) документа
		СтрокаТ.ВидДокумента  	 = ?(СтррПараметры.ЭтоВиртуальныйДокумент, ВидДокумента, СтррПараметры.ОбъектДокумента.Метаданные().Имя);
		СтрокаТ.ИдВидДокументаМТ = ИдВидДокументаМТ;  // идентификатор (GUID) вида документа в МТ
		СтрокаТ.ДатаДокумента    = СтррПараметры.Дата;// дата-время создания документа в МУ

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция возвращат структуру с общими свойствами для всех видов документов.
// В параметре передается строка с перечислением дополнительных свойств.
//	Параметры:
//		СтрДополнительныеСвойства - Строка - список дополнительных свойств документов, разделенных через запятую.
//	Возвращаемое значение:
//	  Структура - свойства документа.
Функция СвойстваДокументаИзXML(СтрДополнительныеСвойства = Неопределено)
	
	Реквизиты = "ПометкаУдаления,Номер,Дата,ИдОрганизации,ИдКлиента,ИдСоглашения,СуммаДокумента,Комментарий," // основные реквизиты
		+ "Широта,Долгота,ВремяНачала,ВремяОкончания,ИдКатегории" // дополнительные реквизиты
		+ ?(ИспользоватьПунктыРазгрузки, ",ИдПунктаРазгрузки", "")
		+ ?(ИспользоватьКонтрагентов, ",ИдКонтрагента", "");
		
	Если СтрДополнительныеСвойства <> Неопределено Тогда
		Реквизиты = Реквизиты + "," + СтрДополнительныеСвойства;
	КонецЕсли; 
		
	Возврат Новый Структура(Реквизиты);
	
КонецФункции

Процедура ЗаполнитьСистемныеСвойстваДокументаИзXML(СтррЗначения, ТекстXML)
	
	СтррЗначения.Номер 			 = ТекстXML.ПолучитьАтрибут("DocNumberPrefix") + ТекстXML.ПолучитьАтрибут("DocNumber");
	СтррЗначения.Дата			 = ДатаВремяXMLВФормат1С(ТекстXML.ПолучитьАтрибут("dt"));
	СтррЗначения.ПометкаУдаления = Булево(Число(ТекстXML.ПолучитьАтрибут("IsDeleted")));
	
КонецПроцедуры

Функция ЕдиницаИзмеренияТовара(ТекНоменклатура, ИдЕдиницыИзмерения)

	ТекЕдиница = Неопределено;
	Попытка
		ГуидЕдиницаИзм = Новый УникальныйИдентификатор(ИдЕдиницыИзмерения);
	Исключение
		ГуидЕдиницаИзм = Неопределено;
	КонецПопытки;
	
	НазваниеСпрУпаковок = ?(ПоколениеКонфигурации(">=УТ_11.2"), "УпаковкиЕдиницыИзмерения", "УпаковкиНоменклатуры");

	Если ГуидЕдиницаИзм = ТекНоменклатура.УникальныйИдентификатор()  Тогда
		ТекЕдиница = СсылкаИзСправочника(ИдЕдиницыИзмерения, НазваниеСпрУпаковок);
	Иначе
		Если КонстантыПолучитьЗначение("ИспользоватьУпаковкиНоменклатуры") Тогда
			Если ТекНоменклатура.ИспользоватьУпаковки Тогда	
				ТекЕдиница = СсылкаИзСправочника(ИдЕдиницыИзмерения, НазваниеСпрУпаковок);
			КонецЕсли; 
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекЕдиница) Тогда
			ТекЕдиница = СсылкаИзСправочника(ИдЕдиницыИзмерения, НазваниеСпрУпаковок);
		КонецЕсли; 
	КонецЕсли; 

	Если Не ЗначениеЗаполнено(ТекЕдиница) Или ТекЕдиница.Пустая() Тогда
		ТекЕдиница = ?(ТекНоменклатура.Пустая(), Справочники[НазваниеСпрУпаковок].ПустаяСсылка(), ТекНоменклатура.ЕдиницаИзмерения);	
	КонецЕсли;

	Возврат ТекЕдиница;
КонецФункции

Функция ДатаВремяXMLВФормат1С(ДатаВремя) Экспорт

	СимвРазделителяА15 = " ";
	СимвРазделителяМТ  = "T";

	//@skip-check use-non-recommended-method
	Поз = Найти(ДатаВремя, "-");
	Если Поз <> 0 Тогда	 
		Год = Число(Лев(ДатаВремя,  Поз - 1));
		Месяц = Число(Сред(ДатаВремя, Поз + 1,2));
		День = Число(Сред(ДатаВремя, Поз + 4,2));
	Иначе
		Если ТипЗнч(ДатаВремя) = Тип("Строка") И НЕ ПустаяСтрока(ДатаВремя) Тогда
			//@skip-check empty-except-statement
			Попытка
				Результат = Дата(ДатаВремя);
				Возврат Результат;
			Исключение
			КонецПопытки;
		КонецЕсли;	
		Возврат '00010101';
	КонецЕсли;

	//@skip-check use-non-recommended-method
	ПозПробела = Найти(ДатаВремя, СимвРазделителяА15);
	Часы = 0;
	Минуты = 0;
	Секунды = 0;
	Если ПозПробела = 0 Тогда
		//@skip-check use-non-recommended-method
		ПозПробела = Найти(ДатаВремя, СимвРазделителяМТ);
	КонецЕсли;

	Если ПозПробела > 0 Тогда
		Часы    = Число(Сред(ДатаВремя, ПозПробела + 1, 2));
		Минуты  = Число(Сред(ДатаВремя, ПозПробела + 4, 2));
		Секунды = Число(Сред(ДатаВремя, ПозПробела + 7, 2));
	КонецЕсли;

	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции

Процедура ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок)
	
	Если ПоколениеКонфигурации(">=УТ_11.4.13") Тогда
		ЗаполнитьНалогооблажениеНДСДокументаНоваяСхема(ОбъектДок);	
	Иначе
		ЗаполнитьНалогооблажениеНДСДокументаСтараяСхема(ОбъектДок);
	КонецЕсли; 
	
КонецПроцедуры   

// Проверяет соответствие указанного в документе продажи/закупки Налогообложения НДС настройкам учета НДС и операции документа
//
// Параметры:
//	ОбъектДок - ДокументОбъект - документ
//
Процедура ЗаполнитьНалогооблажениеНДСДокументаНоваяСхема(ОбъектДок)
	
	МодульУчетНДСЛокализация = ОбщегоНазначения.ОбщийМодуль("УчетНДСЛокализация");	
	МодульУчетНДСЛокализация.ЗаполнитьНалогообложениеНДСПродажиПоПараметрам(ОбъектДок.НалогообложениеНДС, ОбъектДок.НалогообложениеНДС, ПараметрыЗаполненияНалогообложенияНДС(ОбъектДок));

КонецПроцедуры

// Параметры заполнения НалогообложенияНДС по документу
//
// Параметры:
//	ОбъектДок - ДокументОбъект - документ
//
// Возвращаемое значение:
//	Структура - параметры заполнения
//
Функция ПараметрыЗаполненияНалогообложенияНДС(ОбъектДок) 
	
	ТипДокумента = ТипЗнч(ОбъектДок);
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектДок.Ссылка);
	
	Если ТипДокумента = Тип("ДокументОбъект.ЗаказКлиента")
		Или ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг") 
		Или ТипДокумента = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") 				
		Или ТипДокумента = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") 
		Или ТипДокумента = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		Возврат МенеджерОбъекта.ПараметрыЗаполненияНалогообложенияНДСПродажи(ОбъектДок); 
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		Возврат МенеджерОбъекта.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ОбъектДок);
	Иначе
		МодульУчетНДСУПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("УчетНДСУПКлиентСервер");	
		Возврат МодульУчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	КонецЕсли;
	
КонецФункции // ПараметрыЗаполненияНалогообложенияНДС()

Процедура ЗаполнитьНалогооблажениеНДСДокументаСтараяСхема(ОбъектДок)
	
	Если ГКонфигурация = "УТ_UA" Тогда
		Возврат;
	КонецЕсли;
	
	НалогообложениеНДС = Неопределено;
	
	//1. Определяем из соглашения
	//Наличие реквизита ОбъектДок.Соглашение.НалогообложениеНДС
	//УТ_KZ 3.4.4.34 	- нет	- 11.4.4.136
	//УТ 11.4.5.24      - есть  - 11.4.5.24     
	//КА 2.4.3.137      - есть  - 
	//КА 2.4.5.33       - нет   - 
	Если ПоколениеКонфигурации("<УТ_11.4.4") И ЗначениеЗаполнено(ОбъектДок.Соглашение) Тогда
		//@skip-check reading-attribute-from-database
		//@skip-check unknown-method-property
		НалогообложениеНДС = ОбъектДок.Соглашение.НалогообложениеНДС;
	КонецЕсли;        	
	                                                         
	//2. Определяем из типовых функций УТ
    Если НалогообложениеНДС = неопределено Тогда 
		//УТ_KZ 3.4.4.34 	- НалогообложениеНДС  - 11.4.4.136
		//УТ 11.4.5.24      - НалогообложениеНДС  - 11.4.5.24
		МодульЗначениеНастроекПовтИсп = ОбщегоНазначения.ОбщийМодуль("ЗначениеНастроекПовтИсп");	
		Если ПоколениеКонфигурации("<УТ_11.4.4") Тогда        
			//@skip-check unknown-method-property
			НалогообложениеНДС = МодульЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Дата);
		Иначе
			//@skip-check object-deprecated
			НалогообложениеНДС = МодульЗначениеНастроекПовтИсп.НалогообложениеНДС(ОбъектДок.Организация, ОбъектДок.Склад, ОбъектДок.Договор , ОбъектДок.НаправлениеДеятельности, ОбъектДок.Дата);
		КонецЕсли;
	КонецЕсли; 
	
	//3. Заполняем
	Если НЕ НалогообложениеНДС = Неопределено Тогда
		ОбъектДок.НалогообложениеНДС = НалогообложениеНДС;
	КонецЕсли;

КонецПроцедуры

Процедура СообщитьОПропускеДокумента(Объект, ПричинаПропуска = Неопределено)

	СсылкаНаОбъект = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		Объект.Свойство("СсылкаНаОбъект", СсылкаНаОбъект);		
		Представление = Объект.Представление;
	Иначе
		СсылкаНаОбъект = Объект.Ссылка;
		Представление = Строка(Объект);
	КонецЕсли; 
	
	Текст = "Пропущена загрузка документа """ + Представление + """. "
		+  ?(ЗначениеЗаполнено(ПричинаПропуска), ПричинаПропуска, "Документ был загружен ранее."); 
	ОповеститьОСобытии(Текст,, СсылкаНаОбъект, "ТекущийАгент");
	
КонецПроцедуры

Процедура ЗакончитьЗагрузкуКассовыхОрдеров(ЗагружаемыеОбъекты)
	
	ТЗКассовыеДокументы = ЗагружаемыеОбъекты.тзКассовыеДокументы;
	
	Если ТЗКассовыеДокументы <> Неопределено Тогда
		
		СтррВидыДокументовОснования = ОснованияДляДокументовОрдер();

		Для Каждого СтрокаТ Из ТЗКассовыеДокументы Цикл
			ОбъектДок = СтрокаТ.Документ;
			УстановитьДокументОснованияОрдеру(ОбъектДок, СтррВидыДокументовОснования, СтрокаТ);
			
			ДокументОснование = Неопределено;
			Если ЗначениеЗаполнено(ОбъектДок.ДокументОснование) Тогда 
				ДокументОснование = ОбъектДок.ДокументОснование;
			КонецЕсли;
			
			Результат = ЗаписьДокумента(ОбъектДок, СтрокаТ.СтррЗначения, СтрокаТ.ЭтоНовый);
			Если Не Результат Тогда
				СообщитьОПропускеДокумента(СтрокаТ.Документ);
			ИначеЕсли Результат И ПроводитьДокумент(ОбъектДок.Метаданные().Имя) Тогда
				//@skip-check empty-except-statement
				Попытка
					Если Не ДокументОснование = Неопределено Тогда 
						ДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		ТЗКассовыеДокументы.Очистить();
		ЗагружаемыеОбъекты.тзКассовыеДокументы = ТЗКассовыеДокументы;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДокументОснованияОрдеру(ДокументОбъект, СтррВидыДокументовОснования, ДанныеОрдера)

	СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа[0];	
	Для Каждого Элемент Из СтррВидыДокументовОснования Цикл
		СсылкаОснования = СсылкаИзДокумента(ДанныеОрдера.ИдОснования, Элемент.Значение);
		Если Не ЗначениеЗаполнено(СсылкаОснования) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект.ДокументОснование 	 = СсылкаОснования;
		//(( sk_220314 MOD-3044 
		//СтрокаПлатеж[стрИмяРеквизитаОбъекта] = СсылкаОснования; 
		Если ПоколениеКонфигурации(">=УТ_11.5") Тогда 
			МодульОбъектыРасчетовСервер = ОбщегоНазначения.ОбщийМодуль("ОбъектыРасчетовСервер");	
			СтрокаПлатеж.ОбъектРасчетов = МодульОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(СсылкаОснования);
		Иначе
			СтрокаПлатеж.Заказ = СсылкаОснования;
		КонецЕсли;
		//)) sk_220314
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
			СтрокаПлатеж.ОснованиеПлатежа = СсылкаОснования;
			//УТ_UA 3.1.1.122 - 5 параметров	- 11.0.6.9
			//УТ_UA 3.1.5.1   - 5 параметров
			//УТ_KZ 3.1.4.8   - 5 парметров
			//УТ_KZ 3.2.2.22  - 5 парметров
			//
			//КА 2.4.3.137    - 3 Параметра
			//УТ 11.2.3.300   - 5 параметров
			//УТ 11.3.1.109   - 3 параметра
			//УТ 11.3.4.93    - 3 параметра
			//УТ 11.4.3.126   - 3 параметра
			
			Если ПоколениеКонфигурации("<УТ_11.3") Тогда 
				мДокументыОснование = ДокументОбъект.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
				мДокументыОснование.Добавить(ДокументОбъект.ДокументОснование);	
				//@skip-check many-actual-parameters
				ДокументОбъект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
					ДокументОбъект.СуммаДокумента, 
					ДокументОбъект.Валюта, 
					мДокументыОснование, 
					Ложь, 
					Истина);
			Иначе
				Если ПоколениеКонфигурации(">=УТ_11.5.7") Тогда
					тзТаблицаНДС = ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ДокументОбъект.Организация, ТекущаяДатаСеанса(), ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОснованиеПлатежа"), Истина)
				Иначе
					тзТаблицаНДС = ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(ТекущаяДатаСеанса(), ДокументОбъект.Валюта, ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОснованиеПлатежа"), Истина)
				КонецЕсли;
				ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(ДокументОбъект.РасшифровкаПлатежа, тзТаблицаНДС);	
				
				Если ПоколениеКонфигурации(">=УТ_11.5.7") Тогда 
					ДокументОбъект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
						ДокументОбъект.Организация,	
						ДокументОбъект.Валюта, 
						ДокументОбъект.РасшифровкаПлатежа, 
						Ложь);	
				Иначе
					//@skip-check not-enough-parameters
					ДокументОбъект.ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
						ДокументОбъект.Валюта, 
						ДокументОбъект.РасшифровкаПлатежа, 
						Ложь); 
				КонецЕсли;	
			КонецЕсли;
			
			ДокументОбъект.Основание = СокрЛП(СсылкаОснования);
			
		КонецЕсли;
		Прервать;
	КонецЦикла;

КонецПроцедуры

Процедура ЗакончитьЗагрузкуВозвратов(ЗагружаемыеОбъекты)
	
	ТЗДокументыВозвраты = ЗагружаемыеОбъекты.тзДокументыВозвраты;
	
	Если ТЗДокументыВозвраты <> Неопределено Тогда
		
		СЗВидыДокументовОснования = ВидыДокументовОснованияДляДокументовВозвраты();

		Для Каждого стзСтрока Из ТЗДокументыВозвраты Цикл
			
			ОбъектДок = стзСтрока.Документ;
			
			УстановитьДокументОснованияПоВозврату(ОбъектДок, СЗВидыДокументовОснования, стзСтрока);
			
			ДокументОснование = Неопределено;
			Если ЗначениеЗаполнено(ОбъектДок.ДокументРеализации) Тогда 
				ДокументОснование = ОбъектДок.ДокументРеализации;
			КонецЕсли;
			
			Результат = ЗаписьДокумента(ОбъектДок, стзСтрока.СтррЗначения, стзСтрока.ЭтоНовый);
			
			Если Не Результат Тогда
				СообщитьОПропускеДокумента(стзСтрока.Документ);
			ИначеЕсли Результат И ПроводитьДокумент(ОбъектДок.Метаданные().Имя) Тогда
				//@skip-check empty-except-statement
				Попытка
					Если Не ДокументОснование = Неопределено Тогда 
						ДокументОснование.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		ТЗДокументыВозвраты.Очистить();
		ЗагружаемыеОбъекты.тзДокументыВозвраты = ТЗДокументыВозвраты;
		
	КонецЕсли;

КонецПроцедуры  

Функция ВидыДокументовОснованияДляДокументовВозвраты()

	СЗВидыДокументовОснования = Новый СписокЗначений;
	СЗВидыДокументовОснования.Добавить("РеализацияТоваровУслуг");

	Возврат СЗВидыДокументовОснования;
	
КонецФункции // ОснованияДляДокументовОрдер()

Процедура УстановитьДокументОснованияПоВозврату(ДокументОбъект, СЗВидыДокументовОснования, ДанныеДокумента)
	
	Для Каждого Элемент Из СЗВидыДокументовОснования Цикл
		СсылкаОснования = СсылкаИзДокумента(ДанныеДокумента.ИдОснования, Элемент.Значение);
		Если Не ЗначениеЗаполнено(СсылкаОснования) Тогда
			Продолжить;
		КонецЕсли;
		ДокументОбъект.ДокументРеализации = СсылкаОснования; 
		
		Для Каждого Строка Из ДокументОбъект.Товары Цикл
			Строка.ДокументРеализации = СсылкаОснования;
			Если ПоколениеКонфигурации(">=УТ_11.3.1") Тогда
				Строка.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;
			КонецЕсли;
		КонецЦикла;
		Прервать;
	КонецЦикла;

КонецПроцедуры

Процедура ЗакончитьЗагрузкуВиртуальныхДокументов(ЗагружаемыеОбъекты)
	
	Если ЗагружаемыеОбъекты.Свойство("ВидыВиртуальныхДокументовДляЗаписи") Тогда // были загружены виртуальные документы
		
		Для Каждого ВидДокумента Из ЗагружаемыеОбъекты.ВидыВиртуальныхДокументовДляЗаписи Цикл
			ВОТЗСохранить(ВидДокумента, ЗагружаемыеОбъекты[ВидДокумента]);
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры

// Функция - Проводить документ
//
// Параметры:
//  ВидДокумента - Строка - вид документа ВидДокумента = ОбъектДок.Метаданные().Имя
// 
// Возвращаемое значение:
// Булево - Истина если можно проводить Настройками обработки
//
Функция ПроводитьДокумент(ВидДокумента)
	
	Если НЕ ПроводитьДокументыПриЗагрузке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ПроводитьДокументыСписок.НайтиПоЗначению(ВидДокумента);
	Если Результат <> Неопределено И Результат.Пометка Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь; 
	
КонецФункции

// Если валюта в указаном соглашении отличается от валюты документа, то пересчитываем документ в валюту документа.
Процедура ПересчитатьДокументВВалютуСоглашенияЗаказа(ОбъектДок)
	
	Если ТипЗнч(ОбъектДок) <> Тип("ДокументОбъект.ЗаказКлиента") ИЛИ НЕ ЗначениеЗаполнено(ОбъектДок.Соглашение) ИЛИ НЕ ЗначениеЗаполнено(ОбъектДок.Соглашение.Валюта)  Тогда
		Возврат;	
	КонецЕсли;
	
	НоваяВалюта 		= ОбъектДок.Соглашение.Валюта;
	СтараяВалюта	    = ОбъектДок.Валюта; //Старая валюта
	
	Если НоваяВалюта = СтараяВалюта Тогда
		Возврат;
	Иначе
		ОбъектДок.Валюта = НоваяВалюта;	
	КонецЕсли;

	ДатаДокумента               = ?(ЗначениеЗаполнено(ОбъектДок.Дата), ОбъектДок.Дата, ТекущаяДатаСеанса());  
	Если ПоколениеКонфигурации(">=УТ_11.5.7") Тогда
		ВалютаУчета = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
		МодульРаботаСКурсамиВалютУТ = ОбщегоНазначения.ОбщийМодуль("РаботаСКурсамиВалютУТ");	
	    СтруктураКурсовСтаройВалюты = МодульРаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента, ВалютаУчета);
		СтруктураКурсовНовойВалюты  = МодульРаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента, ВалютаУчета);  
	Иначе
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);   
	КонецЕсли;
	
	//1.
	//@skip-check object-deprecated
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		ОбъектДок.Товары,
		ОбъектДок.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Истина,
		Истина);
		
	//2. СуммаЗалогаЗаТару и СуммаЗаказано
	СтррДействий = Новый Структура;
	СтррДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", 			ОбъектДок.ВернутьМногооборотнуюТару);
	СтррДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары",  ОбъектДок.ВернутьМногооборотнуюТару);
	
	СтррСтрока = Новый Структура;
	СтррСтрока.Вставить("БезВозвратнойТары", 			Неопределено);
	СтррСтрока.Вставить("ОтмененоБезВозвратнойТары", 	Неопределено);
	СтррСтрока.Вставить("ТипНоменклатуры",			    Неопределено);
	СтррСтрока.Вставить("Отменено",			   			Неопределено);
	
	
	//СуммаЗалогаЗаТару = ?(ОбъектДок.ТребуетсяЗалогЗаТару,(КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено"))
	//		- (КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары")),0);
	//		
	//СуммаЗаказано = ?(ОбъектДок.ТребуетсяЗалогЗаТару,
	//	КоллекцияТовары.Итог("Сумма") - КоллекцияТовары.Итог("СуммаОтменено"),
	//	КоллекцияТовары.Итог("СуммаБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаОтмененоБезВозвратнойТары"));		
	СуммаЗалогаЗаТару = 0;
	СуммаЗаказано	  = 0;
	Для Каждого стзТовары Из ОбъектДок.Товары Цикл
		СтррСтрока.ТипНоменклатуры 	= стзТовары.Номенклатура.ТипНоменклатуры;
		СтррСтрока.Отменено			= стзТовары.Отменено;
		ЗаполнитьПризнакБезВозвратнойТары(СтррСтрока, СтррДействий);
		ЗаполнитьПризнакОтмененоБезВозвратнойТары(СтррСтрока, СтррДействий);

		Если ОбъектДок.ТребуетсяЗалогЗаТару Тогда
			СуммаЗалогаЗаТару = СуммаЗалогаЗаТару 
				+ стзТовары.СуммаСНДС 
				- ?(СтррСтрока.Отменено, стзТовары.СуммаСНДС, 0)
				- ?(СтррСтрока.БезВозвратнойТары, стзТовары.СуммаСНДС, 0)  
				- ?(СтррСтрока.ОтмененоБезВозвратнойТары, стзТовары.СуммаСНДС, 0);
				
			СуммаЗаказано = СуммаЗаказано 
				+ стзТовары.Сумма 
				- ?(СтррСтрока.Отменено, стзТовары.Сумма, 0);
				
		Иначе
			СуммаЗаказано = СуммаЗаказано 
				+ ?(СтррСтрока.БезВозвратнойТары, стзТовары.Сумма, 0) 
				- ?(СтррСтрока.ОтмененоБезВозвратнойТары, стзТовары.Сумма, 0);				
			
		КонецЕсли;
		
	КонецЦикла;
	
	//3. РаспределитьСуммуПоЭтапамОплаты() 
	Ценообразование.РаспределитьСуммуПоЭтапамОплаты(ОбъектДок, СуммаЗаказано, СуммаЗалогаЗаТару);

	//4. ЗаполнитьПодчиненныеСвойства
	Если ГКонфигурация = "УТ_UA" Тогда
		//@skip-check wrong-string-literal-content
		МодульЗаполнениеСвойствПоСтатистикеСервер = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеСвойствПоСтатистикеСервер");
		МодульЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(ОбъектДок, "Валюта");
	Иначе
		Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
			МодульЗаполнениеОбъектовПоСтатистике = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеОбъектовПоСтатистике"); 	
			МодульЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(ОбъектДок, "Валюта");
		ИначеЕсли ПоколениеКонфигурации(">=УТ_11.2") Тогда 
			//@skip-check wrong-string-literal-content
			МодульЗаполнениеСвойствПоСтатистикеСервер = ОбщегоНазначения.ОбщийМодуль("ЗаполнениеСвойствПоСтатистикеСервер");
			МодульЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(ОбъектДок, "Валюта");
		КонецЕсли;
	КонецЕсли;
	
	//5. ПорядокОплаты
	Если ПоколениеКонфигурации(">=УТ_11.3") ИЛИ ГКонфигурация = "УТ_UA" Тогда
		ВалютаДокумента = ОбъектДок.Валюта;
		ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(ОбъектДок.ФормаОплаты, ОбъектДок.БанковскийСчет, ОбъектДок.Касса);  
		Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
			ОбъектДок.ОплатаВВалюте = ВзаиморасчетыСервер.ПолучитьОплатуВВалютеПоУмолчанию(ВалютаОплаты);	
		Иначе
			//@skip-check unknown-method-property
			ОбъектДок.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(ВалютаДокумента, ОбъектДок.НалогообложениеНДС, ВалютаОплаты);
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

#Область ЗагрузкаДокументов_ОбработкаШапки
// обработка шапки загружаемых документов перед записью в БД 1С
	
Функция ИспользоватьНаправленияДеятельности()
	
	Если ГИспользоватьНаправленияДеятельности = Неопределено Тогда
		Если ПоколениеКонфигурации(">=УТ_11.3.2") Тогда
			МодульБухгалтерскийУчетПереопределяемый = ОбщегоНазначения.ОбщийМодуль("БухгалтерскийУчетПереопределяемый");
			ГИспользоватьНаправленияДеятельности = МодульБухгалтерскийУчетПереопределяемый.ИспользоватьНаправленияДеятельности();	
		ИначеЕсли ПоколениеКонфигурации(">=УТ_11.2") Тогда
			ГИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности")
													Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетДСпоНаправлениямДеятельностиРаздельно")
													Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности"); 
		Иначе
			ГИспользоватьНаправленияДеятельности = Ложь;
		КонецЕсли;											
	КонецЕсли; 
	
	Возврат ГИспользоватьНаправленияДеятельности;
	
КонецФункции

Процедура ДокументПродажиЗаполнитьПоДоговору(ОбъектДок)
	
	Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ЗаказКлиента") Тогда  
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчет, ОбъектДок.БанковскийСчетКонтрагента); 
	Иначе
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ОбъектДок.Договор, ОбъектДок.БанковскийСчетОрганизации, ОбъектДок.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Договор) Тогда
		//@skip-check wrong-string-literal-content
		ОбъектДок.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДок.Договор, "ГруппаФинансовогоУчета");
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности() И ПоколениеКонфигурации(">=УТ_11.2") Тогда
		ОбщийМодульНаправленияДеятельностиСервер = ОбщегоНазначения.ОбщийМодуль("НаправленияДеятельностиСервер"); 
		ОбщийМодульНаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(ОбъектДок.НаправлениеДеятельности, ОбъектДок.Соглашение, ОбъектДок.Договор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДок.Договор) Тогда
		Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
			//@skip-check wrong-string-literal-content
			ОбъектДок.ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДок.Договор,"ОплатаВВалюте");	
		ИначеЕсли ПоколениеКонфигурации(">=УТ_11.3") Тогда
			//@skip-check unknown-method-property
			//@skip-check wrong-string-literal-content
			ОбъектДок.ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДок.Договор,"ПорядокОплаты");
        КонецЕсли;
	КонецЕсли;
	
	Если ГКонфигурация = "УТ_KZ" Или ГКонфигурация = "УТ_UA" Тогда
		//@skip-check unknown-method-property
		ОбъектДок.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ОбъектДок);
	Иначе
		СтррПараметры = Новый Структура("Соглашение, Договор");
		ЗаполнитьЗначенияСвойств(СтррПараметры, ОбъектДок);
		//@skip-check object-deprecated
		ОбъектДок.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоУмолчанию(СтррПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументПродажиЗаполнить(ОбъектДок)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Возврат;
	КонецЕсли;	
	
	СтррКопия = Новый Структура;
	Для Каждого Элемент Из ОбъектДок.Метаданные().Реквизиты Цикл
		СтррКопия.Вставить(Элемент.Имя, ОбъектДок[Элемент.Имя]);  
	КонецЦикла;
	
	ОбъектДок.ЗаполнитьУсловияПродажПоУмолчанию();
	Соглашение = ОбъектДок.Соглашение;
	
	ЗаполнитьЗначенияСвойств(ОбъектДок, СтррКопия);
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		
		//Типовое заполнение по соглашению
		ОбъектДок.Соглашение = Соглашение;
		ЗаполнитьУсловияПродажПоСоглашению(ОбъектДок);
		
		//Организация
		НДСИзменен = Ложь;
		Если ЗначениеЗаполнено(СтррКопия.Организация) И СтррКопия.Организация <> ОбъектДок.Организация Тогда
			ОбъектДок.Организация = СтррКопия.Организация;
			НДСИзменен = Истина;
		КонецЕсли;
		
		//Валюта
		Если НЕ ЗначениеЗаполнено(ОбъектДок.Валюта) Тогда
			Если ЗначениеЗаполнено(СтррКопия.Валюта) Тогда
				ОбъектДок.Валюта = СтррКопия.Валюта;
			Иначе
				ОбъектДок.Валюта = КонстантыПолучитьЗначение("ВалютаРегламентированногоУчета");
			КонецЕсли;
		КонецЕсли;
		
		//ХозяйственнаяОперация
		Если Не ЗначениеЗаполнено(ОбъектДок.ХозяйственнаяОперация) Тогда
			Если ЗначениеЗаполнено(СтррКопия.ХозяйственнаяОперация) Тогда
				ОбъектДок.ХозяйственнаяОперация = СтррКопия.ХозяйственнаяОперация;
			Иначе
				ОбъектДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
			КонецЕсли;
		КонецЕсли;
		
		//ФормаОплаты
		Если НЕ ЗначениеЗаполнено(ОбъектДок.ФормаОплаты) И ЗначениеЗаполнено(СтррКопия.ФормаОплаты) Тогда
			ОбъектДок.ФормаОплаты = СтррКопия.ФормаОплаты;
		КонецЕсли;
		
		//БанковскийСчетОрганизации, БанковскийСчетКонтрагента		
		ДокументПродажиЗакупкиЗаполнитьБанковскиеСчета(ОбъектДок);
		
		//Склад
		Если ОбъектДок.Склад <> СтррКопия.Склад И ЗначениеЗаполнено(СтррКопия.Склад) Тогда
			ОбъектДок.Склад = СтррКопия.Склад;
		КонецЕсли;
		
		//
		Если ЗначениеЗаполнено(СтррКопия.Договор) Тогда
			ОбъектДок.Договор = СтррКопия.Договор;
			Если ИспользоватьДоговоры() Тогда
				Если ПоколениеКонфигурации(">=УТ_11.3") Тогда
					ОбъектДок.ЦенаВключаетНДС = ДоговорИспользуетНДС(ОбъектДок.Договор);
				КонецЕсли;
				//Наличие реквизита ДоговорыКонтрагентов.НалогообложениеНДС
				//УТ 11.4.4.136 - нет
				//УТ 11.4.5.24  - есть  
				Если ПоколениеКонфигурации(">=УТ_11.4.5.24") И Не ОбъектДок.Договор.НалогообложениеНДСОпределяетсяВДокументе Тогда        
					ОбъектДок.НалогообложениеНДС = ОбъектДок.Договор.НалогообложениеНДС;
				КонецЕсли;
			КонецЕсли; 
			ДокументПродажиЗаполнитьПоДоговору(ОбъектДок);
		КонецЕсли; 
		
		//НДС
		Если ГКонфигурация <> "УТ_UA" И (Не ЗначениеЗаполнено(ОбъектДок.НалогообложениеНДС) ИЛИ НДСИзменен) Тогда 
			ЗаполнитьНалогооблажениеНДСДокумента(ОбъектДок);
		КонецЕсли
		
	КонецЕсли;        	
	
КонецПроцедуры

// Выполняет расчет скидок в зависимости от выбранного режима
// Режимы расчета скидок:
//	ОпределитьУчетнойСистемой;
//	Рекомендуемый.              
//
// Параметры:
//  ОбъектДок 				   - ДокументОбъект - объект рассчитываемого документа
//  СтррПараметрыРасчетаСкидок - Структура - структура параметров расчета скидок
//	СтррКэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура РассчитатьСкидкиПоРежиму(ОбъектДок, СтррПараметрыРасчетаСкидок, СтррКэшированныеЗначения)
	
	Если Не ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ЗаказКлиента") И Не ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ВызватьИсключение("Процедура РассчитатьСкидкиПоРежиму() - неизвестный вид документа - " + Строка(ОбъектДок));
	КонецЕсли;
	
	ФлУчитыватьСкидкиСоглашений = ?(ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") И  	
									(ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах") ИЛИ 
									ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах")),
									Истина, Ложь);							
									
	Если Не ФлУчитыватьСкидкиСоглашений Тогда
		Возврат;
	КонецЕсли;
	
	МодульСкидкиНаценкиСервер = ОбщегоНазначения.ОбщийМодуль("СкидкиНаценкиСервер");
	СтррПримененныеСкидки = МодульСкидкиНаценкиСервер.Рассчитать(ОбъектДок, СтррПараметрыРасчетаСкидок);
	
	Если РежимРасчетаСкидок = "Рекомендуемый" Тогда
		ФлПересчитать = Ложь;
		СтррДействия = Новый Структура("ПересчитатьСуммуРучнойСкидки");
		МодульОбработкаТабличнойЧастиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОбработкаТабличнойЧастиКлиентСервер");
		//@skip-check unknown-method-property
		Для Каждого стчЭлемент Из ОбъектДок.Товары Цикл
			Если Не стчЭлемент.ПроцентАвтоматическойСкидки = 0 Тогда
				ФлПересчитать = Истина;
				стчЭлемент.СуммаРучнойСкидки = 0;
				стчЭлемент.ПроцентРучнойСкидки = стчЭлемент.ПроцентРучнойСкидки - стчЭлемент.ПроцентАвтоматическойСкидки;
				МодульОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(стчЭлемент, СтррДействия, СтррКэшированныеЗначения);
			КонецЕсли;
		КонецЦикла;
		Если ФлПересчитать Тогда 
			МодульСкидкиНаценкиСервер.Рассчитать(ОбъектДок, СтррПараметрыРасчетаСкидок);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

Функция ДоговорИспользуетНДС(Договор)
	
	Если ПоколениеКонфигурации(">=УТ_11.5") И (Не ЗначениеЗаполнено(Договор.СтавкаНДС) ИЛИ Договор.СтавкаНДС = Справочники.СтавкиНДС.БезНДС) Тогда
		Возврат Ложь;	
	ИначеЕсли Договор.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Или Договор.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции 

// Возвращает признак пропуска документа
// 
// Параметры:
//	ВидДокумента - Строка - вид документа
//
// Возвращаемое значение:
//	Булево - признак пропуска документа
//
Функция ПропуститьДокументы(ВидДокумента)
	
	Если ЗагружатьВиртуальныеДокументы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидДокумента = "_Посещение" Или ВидДокумента = "_Мерчендайзинг" Или ВидДокумента = "_Задание" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПропуститьДокументы()

// ЗагрузкаДокументов_ОбработкаШапки
#КонецОбласти

#Область ЗагрузкаДокументов_ОбработкаТабличнойЧасти

// Для совместимости с конфигурацией УТ_11.1.7 и ниже
// 
Процедура ЗаполнитьПризнакБезВозвратнойТары(СтррСтрока, СтррДействий)
	
	Если Не ПоколениеКонфигурации("<=УТ_11.1.7") ИЛИ ГКонфигурация = "УТ_UA" Тогда
		ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары(СтррСтрока, СтррДействий);
	Иначе
		ФлВернутьМногооборотнуюТару = Ложь;
		Если СтррДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", ФлВернутьМногооборотнуюТару) Тогда
			СтррСтрока.БезВозвратнойТары = Не (ФлВернутьМногооборотнуюТару
				И СтррСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

// Для совместимости с конфигурацией УТ_11.1.7 и ниже
//
Процедура ЗаполнитьПризнакОтмененоБезВозвратнойТары(СтррСтрока, СтррДействий)

	Если Не ПоколениеКонфигурации("<=УТ_11.1.7") ИЛИ ГКонфигурация = "УТ_UA" Тогда
		ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары(СтррСтрока, СтррДействий);
	Иначе
		ФлВернутьМногооборотнуюТару = Ложь;
		Если СтррДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", ФлВернутьМногооборотнуюТару) Тогда
			СтррСтрока.ОтмененоБезВозвратнойТары = Не (ФлВернутьМногооборотнуюТару
			И СтррСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) И СтррСтрока.Отменено;
		КонецЕсли;					
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, содержащую поля значений, используемых для заполнения цен в строках табличной части документа.
//
// Параметры:
//	ОбъектДок - ДокументОбъект. - документ продажи	
//
// Возвращаемое значение:
//	Структура - структура, используемая для заполнения цен в табличной части документа:
//		* Дата - Дата - дата документа.
//		* Валюта - СправочникСсылка.Валюты - валюта документа.
//
Функция ДокументПродажиПараметрыЗаполненияЦеныВСтрокеТЧ(ОбъектДок)
	
	Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
		Возврат ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(ОбъектДок);
	Иначе
		//@skip-check unknown-method-property
		Возврат ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(ОбъектДок);
	КонецЕсли;
	
КонецФункции // ДокументПродажиПараметрыЗаполненияЦеныВСтрокеТЧ() 

// Возвращает структуру, содержащую поля значений, используемых для пересчета сумм НДС в строках табличной части 
// документа.
//
// Параметры:
//	ОбъектДок - ДокументОбъект. - документ продажи	
//
// Возвращаемое значение:
//	Структура - структура, используемая для пересчета сумм НДС в табличной части документа:
//		* ЦенаВключаетНДС - Булево - Истина - НДС включен в цену товара.
//		* НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - налогообложение документа.
//
Функция ДокументПродажиПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок)
	
	Если ПоколениеКонфигурации(">=УТ_11.4.6.166") Тогда 
		Возврат ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	Иначе
		//@skip-check unknown-method-property
		Возврат ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);
	КонецЕсли;	
	
КонецФункции // ДокументПродажиПараметрыПересчетаСуммыНДСВСтрокеТЧ() 

#Область ЗагрузкаДокументов_ОбработкаТабличнойЧасти_Маркировки

// Заполняет в документах РеализацияТоваровУслуг\ВозвратТоваровОтКлиента ТЧ ШтрихкодыУпаковок по данным из МТ
//
// Параметры:
//  ОбъектДок	  - Произвольный - ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.ВозвратТоваровОтКлиента - заполняемый документ
//  СтррПараметры - Структура - данные маркировки из МУ
//
//@skip-check module-unused-method
Процедура ЗаполнитьКодМаркировкиИзМТ(ОбъектДок, СтррПараметры)
		
	Если Не ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.РеализацияТоваровУслуг") И Не ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
		ВызватьИсключение("Процедура ЗаполнитьКодМаркировкиИзМТ() - неизвестный вид документа - " + Строка(ОбъектДок));
	КонецЕсли;  
	
	Если Не СтруктураЕстьСвойства(СтррПараметры, "ВидМаркированногоТовара, КодМаркировки") Тогда
		ВызватьИсключение("Процедура ЗаполнитьКодМаркировкиИзМТ() - отсутствуют обязательные свойства в СтррПараметры");
	КонецЕсли;
  	
	ВидМаркированногоТовара = СтррПараметры.ВидМаркированногоТовара;
	КодМаркировки			= СтррПараметры.КодМаркировки;
	
	Если Не ЗначениеЗаполнено(ВидМаркированногоТовара) Или Не ЗначениеЗаполнено(КодМаркировки) Тогда
		ВызватьИсключение("Процедура ЗаполнитьКодМаркировкиИзМТ() - отсутствуют реквизиты для определения кода маркировки!");
	КонецЕсли;   
	
	ВидПродукцииИС = ПолучитьЗначениеПеречисленияПоИдентификатору("ВидыМаркированногоТовара", ВидМаркированногоТовара);;
	Если ВидПродукцииИС = Неопределено Тогда
		ВызватьИсключение("Неизвестный вид маркированного товара");	
	КонецЕсли;      
	Если ВидПродукцииПоддерживаетОбъемноСортовойУчет(ВидПродукцииИС) Тогда
		Возврат;
	КонецЕсли;
	СтррПараметры.Вставить("ВидПродукцииИС", ВидПродукцииИС);
	
	// Получаем элемент маркировки из справочника
	ТекстОшибки = Неопределено;
	Маркировка = ПолучитьМаркировку(СтррПараметры, ТекстОшибки);	
	// Заполняем ТЧ ШтрихкодыУпаковок 
	Если ЗначениеЗаполнено(Маркировка) Тогда
		НоваяСтрока = ОбъектДок.ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = Маркировка;
		Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")  Тогда
			НоваяСтрока.ЗначениеШтрихкода = Маркировка.ЗначениеШтрихкода;
		КонецЕсли;
	Иначе
		ОповеститьОСобытии(ТекстОшибки, "ОшибкаЗапись", ОбъектДок.Ссылка, "ТекущийАгент");
	КонецЕсли;
	
КонецПроцедуры   

// sk_220823 MOD-3239
//  
//  Возвращает признак поддержки объемно-сортового учета по виду продукции.
//
// Параметры:
//  ВидПродукцииИС	 - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// 
// Возвращаемое значение:
//  Булево - признак поддержки объемно-сортового учета
//
Функция ВидПродукцииПоддерживаетОбъемноСортовойУчет(ВидПродукцииИС) 
	
	Если ПоколениеКонфигурации(">=УТ_11.5.8.267") Тогда
		МодульИнтеграцияИСМПКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСерверПовтИсп"); 
		Возврат МодульИнтеграцияИСМПКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(ВидПродукцииИС);
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

// Возвращает данные маркировки из УС
//
// Параметры:
//  СтррПараметры	 - Структура - данные маркировки из МУ
//  ТекстОшибки		 - Произвольный - Строка, Неопределено - сообщение об ошибке
// 
// Возвращаемое значение:
//  Произвольный - СправочникСсылка.ШтрихкодыУпаковокТоваров, Неопределено - ссылка на маркировку
//
Функция ПолучитьМаркировку(СтррПараметры, ТекстОшибки)
		
	Маркировка = ПолучитьМаркировкуИзСправочника(СтррПараметры, ТекстОшибки);
	Если Не ЗначениеЗаполнено(Маркировка)  Тогда
		ТекстОшибкиНеНайденЭлемент = СтрШаблон_(НСтр("ru = 'В справочнике ""ШтрихкодыУпаковокТоваров"" не найден элемент с кодом маркировки: ""%1""!'"), СтррПараметры.КодМаркировки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда	
			ТекстОшибки = ТекстОшибки
			+ Символы.ПС
			+ ТекстОшибкиНеНайденЭлемент;
		Иначе
			ТекстОшибки = ТекстОшибкиНеНайденЭлемент;					
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Маркировка; 
 	
КонецФункции // ПолучитьМаркировку()  

// Возвращает ссылку на маркировку по значению штрихкода
//
// Параметры:
//  СтррПараметры - Структура - данные маркировки из МУ
//  ТекстОшибки	  - Произвольный - Строка, Неопределено - сообщение об ошибке
// 
// Возвращаемое значение:
//  Произвольный - СправочникСсылка.ШтрихкодыУпаковокТоваров, Неопределено - ссылка на маркировку
//
Функция ПолучитьМаркировкуИзСправочника(СтррПараметры, ТекстОшибки) 
	
	ВидПродукцииИС = СтррПараметры.ВидПродукцииИС;
	КодМаркировки = СтрЗаменить(СтррПараметры.КодМаркировки, Символы.ПС, "");
	ТекстОшибки = Неопределено;
	
	СтррПримечаниеКРезультатуРазбора = Неопределено;
	Если ПоколениеКонфигурации(">=УТ_11.4.13.51") Тогда
		МодульРазборКодаМаркировки = ОбщегоНазначения.ОбщийМодуль("РазборКодаМаркировкиИССлужебный");
	Иначе
		МодульРазборКодаМаркировки = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИССлужебный");
	КонецЕсли;
	СтррДанныеРазбора = МодульРазборКодаМаркировки.РазобратьКодМаркировки(КодМаркировки, ВидПродукцииИС, СтррПримечаниеКРезультатуРазбора);
	Если СтррДанныеРазбора = Неопределено Тогда
		ТекстОшибки = СтрШаблон_(НСтр("ru = 'Не удалось разобрать код маркировки: ""%1"". По причине: ""%2"".'"), КодМаркировки, СтррПримечаниеКРезультатуРазбора.ТекстОшибки);     
		Возврат Неопределено;
	КонецЕсли;
	
	Маркировка = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьПоЗначениюШтрихкода(СтррДанныеРазбора.НормализованныйКодМаркировки);
	Если Не ЗначениеЗаполнено(Маркировка)Тогда
		Если ПоколениеКонфигурации(">=УТ_11.4.13.51") Тогда
			МодульНормализацияМаркировки = ОбщегоНазначения.ОбщийМодуль("РазборКодаМаркировкиИССлужебныйКлиентСервер");
		Иначе
			МодульНормализацияМаркировки = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИССлужебный");
		КонецЕсли;
		// Выполняем поиск по коду марки без МРЦ
		СтррПараметрыНормализации = МодульНормализацияМаркировки.ПараметрыНормализацииКодаМаркировки();
		Если СтруктураЕстьСвойства(СтррПараметрыНормализации, "ВключатьМРЦ") И СтррПараметрыНормализации.ВключатьМРЦ 
			И СтруктураЕстьСвойства(СтррДанныеРазбора.СоставКодаМаркировки, "ВключаетМРЦ") И СтррДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ Тогда 
			СтррПараметрыНормализации.ВключатьМРЦ = Ложь;
			СтрНормализованныйКодМаркировкиБезМРЦ = МодульНормализацияМаркировки.НормализоватьКодМаркировки(СтррДанныеРазбора, ВидПродукцииИС, СтррПараметрыНормализации);
			Маркировка = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьПоЗначениюШтрихкода(СтрНормализованныйКодМаркировкиБезМРЦ); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Маркировка;

КонецФункции // ПолучитьМаркировкуИзСправочника()

// sk_220823 MOD-3239
//  
//  Заполняет в документах РеализацияТоваровУслуг ТЧ ШтрихкодыУпаковок по объемно-сортовому учету
//
// Параметры:
//  ОбъектДок	 - ДокументОбъект.РеализацияТоваровУслуг - заполняемый документ
//
Процедура ЗаполнитьКодыМаркировокПоОбъемноСортовомуУчету(ОбъектДок)
		
	Если Не ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		ВызватьИсключение("Процедура ЗаполнитьКодыМаркировокПоОбъемноСортовомуУчету() - неизвестный вид документа - " + Строка(ОбъектДок));
	КонецЕсли;  
	
	Если Не ИспользоватьМаркировки() Тогда
		Возврат;
	КонецЕсли;      
	
	Если Не КонфигурацияПоддерживаетОбъемноСортовойУчет() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ОбъектДок.Товары Цикл
		Номенклатура = СтрокаТЧ.Номенклатура;
		//@skip-check reading-attribute-from-database
		ОсобенностьУчета = Номенклатура.ОсобенностьУчета; 
		Если Не ЗначениеЗаполнено(ОсобенностьУчета) Тогда
			Продолжить;
		КонецЕсли;
		ВидПродукцииИС = ВидПродукцииПоОсобенностиУчета(ОсобенностьУчета);
		Если Не ВидПродукцииПоддерживаетОбъемноСортовойУчет(ВидПродукцииИС) Тогда
			Продолжить;
		КонецЕсли;
		Характеристика = СтрокаТЧ.Характеристика;
		Количество = СтрокаТЧ.Количество;
		Маркировка = СоздатьМаркировкуПоОСУ(ОбъектДок.Ссылка, ВидПродукцииИС, Номенклатура, Характеристика, Количество); 
		// Заполняем ТЧ ШтрихкодыУпаковок 
		Если ЗначениеЗаполнено(Маркировка) Тогда
			НоваяСтрока = ОбъектДок.ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.ШтрихкодУпаковки = Маркировка;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры 

// sk_220823 MOD-3239
//  
//  Возвращает признак поддержки объемно-сортового учета в конфигурации
// 
// Возвращаемое значение:
//  Булево - признак поддержки объемно-сортового учета
//
Функция КонфигурацияПоддерживаетОбъемноСортовойУчет()  
	
	Если ПоколениеКонфигурации(">=УТ_11.5.8.267") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ИспользоватьМаркировки() 

// sk_220823 MOD-3239
//  
//  Возвращает значение вид продукции ИС по переданной особенности учета номенклатуры
//
// Параметры:
//  ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры	 - особенность учета номенклатуры
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыПродукцииИС - вид продукции ИС
//
Функция ВидПродукцииПоОсобенностиУчета(ОсобенностьУчета)    
	
	МодульИнтеграцияИСУТКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСУТКлиентСервер"); 
	Возврат МодульИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ОсобенностьУчета)
		
КонецФункции  

// sk_220823 MOD-3239
//  
//  Создает маркировку по ОСУ
//
// Параметры:
//  СсылкаНаОбъект	 - ДокументСсылка.РеализацияТоваровУслуг - ссылка на документ
//  ВидПродукцииИС	 - ПеречислениеСсылка.ВидыПродукцииИС			- вид продукции
//  Номенклатура	 - СправочникСсылка.Номенклатура				- номенклатура
//  Характеристика	 - СправочникСсылка.ХарактеристикиНоменклатуры	- характеристика
//  Количество		 - Число										- количество
// 
// Возвращаемое значение:
//  Произвольный - СправочникСсылка.ШтрихкодыУпаковокТоваров, Неопределено - ссылка на маркировку
//
Функция СоздатьМаркировкуПоОСУ(СсылкаНаОбъект, ВидПродукцииИС, Номенклатура, Характеристика, Количество)
			
	СтррДанныеУпаковки = ДанныеПотребительскойУпаковки(Номенклатура, Характеристика);
	Если СтррДанныеУпаковки = Неопределено Тогда 
		ТекстОшибки = СтрШаблон_(НСтр("ru = 'Не получены данные потребительской упаковки по номенклатуре: ""%1"" и характеристике: ""%2""!'"), Номенклатура, Характеристика);
		ОповеститьОСобытии(ТекстОшибки, "ОшибкаЗапись", СсылкаНаОбъект, "ТекущийАгент");
		Возврат Неопределено;
	КонецЕсли;  
	
	GTIN = СтррДанныеУпаковки.GTIN;
	КоличествоВПотребительскойУпаковке = СтррДанныеУпаковки.КоличествоВПотребительскойУпаковке; 
	ФлПроизвольнаяЕдиницаУчета = СтррДанныеУпаковки.ПроизвольнаяЕдиницаУчета;	
	Если ФлПроизвольнаяЕдиницаУчета Тогда		
		КоличествоПотребительскихУпаковок = 0;
		КоличествоОбработано = 0;
		Пока (КоличествоОбработано + КоличествоВПотребительскойУпаковке) <= Количество Цикл
			КоличествоОбработано = КоличествоОбработано + КоличествоВПотребительскойУпаковке;
			КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок + 1;
		КонецЦикла;			
	КонецЕсли;	
	
	НормализованныйКодМаркировки = НормализоватьКодМаркировкиПоОСУ(GTIN, ?(ФлПроизвольнаяЕдиницаУчета, КоличествоПотребительскихУпаковок, Количество)); 	
	СтррДанныеНовойУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СтруктураСозданияШтрихкодаУпаковки(); 
	СтррДанныеНовойУпаковки.Штрихкод = НормализованныйКодМаркировки;
	СтррДанныеНовойУпаковки.ДатаУпаковки = ТекущаяДатаСеанса();
	СтррДанныеНовойУпаковки.ВидПродукции = ВидПродукцииИС;
	СтррДанныеНовойУпаковки.ТипУпаковки  = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	СтррДанныеНовойУпаковки.Номенклатура = Номенклатура;
	СтррДанныеНовойУпаковки.Характеристика = Характеристика;
	СтррДанныеНовойУпаковки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка(); 
	СтррДанныеНовойУпаковки.Количество = Количество; 
	Если ФлПроизвольнаяЕдиницаУчета Тогда
		СтррДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок;   
	КонецЕсли;	
	СтррДанныеНовойУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128;   
	
	СЗДанныеДляРасчетаХешСуммы = Новый СписокЗначений;
	СЗДанныеДляРасчетаХешСуммы.Добавить(НормализоватьКодМаркировкиПоОСУДляХэш(НормализованныйКодМаркировки, Номенклатура, Характеристика, Количество));   
	СтррДанныеНовойУпаковки.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(СЗДанныеДляРасчетаХешСуммы);
	
	СтррПараметрыЗаписи = Новый Структура;
	СтррПараметрыЗаписи.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
	СтррПараметрыЗаписи.Вставить("НеРассчитыватьХешСумму", Истина);      
	
	СтррПараметрыСоздания = Справочники.ШтрихкодыУпаковокТоваров.ДополнительныеПараметрыСозданияШтрихкодовУпаковок();

	ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодУпаковки(
				СтррДанныеНовойУпаковки,
				Неопределено,
				СтррПараметрыЗаписи,
				Неопределено,
				СтррПараметрыСоздания);
				
	Возврат ШтрихкодУпаковки;
	
КонецФункции 

// sk_220909 MOD-3250
//  
//  Возращает структуру данных потребительской упаковки для формирования регулярного выражения по ОСУ
//
// Параметры:
//  Номенклатура	- СправочникСсылка.Номенклатура - номенклатура
//  Характеристика	- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика
// 
// Возвращаемое значение:
//  Произвольный - Структура, Неопределено
//
Функция ДанныеПотребительскойУпаковки(Номенклатура, Характеристика)	
	
	СтррДанные = Новый Структура;
	СтррДанные.Вставить("Номенклатура", Номенклатура);
	СтррДанные.Вставить("Характеристика", Характеристика);
	СтррДанные.Вставить("ХарактеристикиИспользуются", ПризнакИспользованияХарактеристик(Номенклатура));	
	МДанные = Новый Массив;
	МДанные.Добавить(СтррДанные);
	
	МодульИнтеграцияИСМП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
	ТЗДанныеДляУточнения = МодульИнтеграцияИСМП.ДанныеДляУточненияКоэффициентовУпаковок(МДанные, СтррДанные.ХарактеристикиИспользуются);	
	Если ТЗДанныеДляУточнения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;     

	СтррРезультат = Новый Структура;
	СтррРезультат.Вставить("GTIN", "");
	СтррРезультат.Вставить("КоличествоВПотребительскойУпаковке", 1);
	СтррРезультат.Вставить("ПроизвольнаяЕдиницаУчета", Ложь);
	
	Если ТЗДанныеДляУточнения.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(СтррРезультат, ТЗДанныеДляУточнения[0]);
	Иначе
		СтррОтбор = Новый Структура("ВидУпаковки", Перечисления.ВидыУпаковокИС.Потребительская);
		МСтроки = ТЗДанныеДляУточнения.НайтиСтроки(СтррОтбор);
		Если Не МСтроки.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СтррРезультат, МСтроки[0]);
		Иначе
			ЗаполнитьЗначенияСвойств(СтррРезультат, ТЗДанныеДляУточнения[0]);	
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтррРезультат.КоличествоВПотребительскойУпаковке = 1 Тогда
		СтррРезультат.ПроизвольнаяЕдиницаУчета = Истина;
	КонецЕсли;
	
	Возврат СтррРезультат;
	
КонецФункции   

// sk_220909 MOD-3250
//  Возвращает признак использования характеристик по номенклатуре
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура
// 
// Возвращаемое значение:
//  Булево - признак использования характеристик
//
Функция ПризнакИспользованияХарактеристик(Номенклатура)

	МодульИнтеграцияИС = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИС");
	Возврат МодульИнтеграцияИС.ПризнакИспользованияХарактеристик(Номенклатура);
	
КонецФункции	

// sk_220823 MOD-3239
//  
//  Нормализует код маркировки по ОСУ
//
// Параметры:
//  GTIN		 - Строка	 - GTIN
//  Количество	 - Число	 - количество
// 
// Возвращаемое значение:
//  Строка - нормализованный код маркировки
//
Функция НормализоватьКодМаркировкиПоОСУ(GTIN, Количество)  
	
	Возврат СтрШаблон_(
				"(02)%1(37)%2",
				GTIN,
				Формат(Количество, "ЧГ=0;"));	
	
КонецФункции

// sk_220823 MOD-3239
//  
//  Нормализует код маркировки по ОСУ для расчета Хэш
//
// Параметры:
//  НормализованныйКодМаркировки - Строка						 - нормализованный код маркировки
//  Номенклатура				 - СправочникСсылка.Номенклатура - номенклатура													 -
//  Характеристика				 - СправочникСсылка.ХарактеристикиНоменклатуры	 - характеристика													 -
//  Количество					 - Число										 - количество
// 
// Возвращаемое значение:
//  Строка - нормализованный код маркировки
//
Функция НормализоватьКодМаркировкиПоОСУДляХэш(НормализованныйКодМаркировки, Номенклатура, Характеристика, Количество)  
	
	НоменклатураGUID   = СтрокаGUID(Номенклатура);
	ХарактеристикаGUID = СтрокаGUID(Характеристика);
			
	Возврат	СтрШаблон_("%1|%2|%3|%4|",
				НормализованныйКодМаркировки,
				Формат(Количество, "ЧГ=0;"),
				НоменклатураGUID, ХарактеристикаGUID);	
	
КонецФункции	

// sk_220823 MOD-3239
//  
//  Возвращает GUID по ссылке в формате строки.
//
// Параметры:
//  Ссылка - СправочникСсылка - ссылка на элемент справочника
// 
// Возвращаемое значение:
//  Строка 
//
Функция СтрокаGUID(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции			

// ЗагрузкаДокументов_ОбработкаТабличнойЧасти_Маркировки
#КонецОбласти

// ЗагрузкаДокументов_ОбработкаТабличнойЧасти 
#КонецОбласти

// ЗагрузкаДокументов
#КонецОбласти

#Область ЗагрузкаТреков

Процедура ЗагрузитьТрек(ФайлТрека, СсылкаМУ)
	
	ТекущаяДатаТрека 	= Неопределено; // Текущая дата трека в виде строки "YYYY-MM-DD" (дата точек трека).
	СтррДанные		 	= Неопределено; // Трек в файле трека 1С	
	ДатаВремяТочки	 	= Неопределено; // Дата строчки из МУ 
	БылиИзменения 	 	= Ложь;         // Изменения в файле трека 1С 
	Сортировать		 	= Ложь;         // Сортировать по дате ТЗ в файле трека 1С 
	КаталогТрековАгента = КаталогФайловТрековАгента();
	//@skip-check structure-consructor-too-many-keys
	СтррСтрокаТрека		= Новый Структура("Время, Широта, Долгота, Скорость, ИсточникСигнала, ЕстьОшибка");
	
	ЧтениеТрека = Новый ЧтениеТекста(ФайлТрека.ПолноеИмя);
	СтрокаФайла	= ЧтениеТрека.ПрочитатьСтроку();
	Пока СтрокаФайла <> Неопределено Цикл
				
		Результат =  ТрекДатаИзСтроки(СтрокаФайла);
		Если Результат = '00010101' Тогда
			СтрокаФайла = ЧтениеТрека.ПрочитатьСтроку();
			Продолжить;
		Иначе
			ДатаВремяТочки = Результат;
		КонецЕсли;
		
		//Открываем файл трека 
		Если ТекущаяДатаТрека <> НачалоДня(ДатаВремяТочки) Тогда
			Если БылиИзменения Тогда			
				ТрекСохранитьФайл(СтррДанные, КаталогТрековАгента, Сортировать);
			КонецЕсли;
			ТекущаяДатаТрека = НачалоДня(ДатаВремяТочки);
			СтррДанные = ТрекОткрытьФайл(ТекущаяДатаТрека, КаталогТрековАгента);
			БылиИзменения 	 = Ложь;
			Сортировать		 = Ложь;
		КонецЕсли;

		Если ДатаВремяТочки > СтррДанные.ВремяОкончания ИЛИ ДатаВремяТочки < СтррДанные.ВремяНачала  Тогда
			
			СтррСтрокаТрека.Время = ДатаВремяТочки;
			ТрекЗаполнитьСтррСтрокаТрека(СтрокаФайла, СтррСтрокаТрека);
			
			Если СтррСтрокаТрека.ЕстьОшибка = Истина Тогда
				СтрокаФайла = ЧтениеТрека.ПрочитатьСтроку();
				Продолжить;
			КонецЕсли;
				
			СТЗТрек = СтррДанные.Трек.Добавить();
			СТЗТрек.Время 			= СтррСтрокаТрека.Время;
			СТЗТрек.Широта 			= СтррСтрокаТрека.Широта;
			СТЗТрек.Долгота 		= СтррСтрокаТрека.Долгота;
			СТЗТрек.Скорость 		= СтррСтрокаТрека.Скорость;
			СТЗТрек.ИсточникСигнала = СтррСтрокаТрека.ИсточникСигнала;			
			БылиИзменения = Истина;
			
			Если ДатаВремяТочки < СтррДанные.ВремяНачала  Тогда
				Сортировать	= Истина;
				СтррДанные.ВремяНачала = ДатаВремяТочки;
			Иначе
				СтррДанные.ВремяОкончания = ДатаВремяТочки;
			КонецЕсли;
		КонецЕсли;  
			
		СтрокаФайла = ЧтениеТрека.ПрочитатьСтроку();
		
	КонецЦикла;
	
	Если БылиИзменения Тогда
		ТрекСохранитьФайл(СтррДанные, КаталогТрековАгента, Сортировать);
	КонецЕсли; 
	
	Если ДатаВремяТочки <> Неопределено Тогда // есть дата и время последней точки трека, нужно ее запомнить для подтверждения.
		Имя = СДИмяФайлаДляМУ(СсылкаМУ);
		СтррЗначения = СДПрочитать(Имя, Истина);
		СтррЗначения.Вставить("ПоследнееВремяТрека", ДатаВремяТочки);
		СДЗаписать(Имя, СтррЗначения);
	КонецЕсли; 

КонецПроцедуры

Процедура ТрекСохранитьФайл(СтррДанные, КаталогТрековАгента, Сортировать = Ложь)

	ТЗТрек = СтррДанные.Трек;
	Если ТЗТрек.Количество() = 0 Тогда // пустой трек не записываем
		Возврат;
	КонецЕсли; 
	
	Если Сортировать Тогда
		ТЗТрек.Сортировать("Время");
	КонецЕсли; 
	
	СтррДанные.ВремяНачала 		= ТЗТрек[0].Время;
	СтррДанные.ВремяОкончания 	= ТЗТрек[ТЗТрек.Количество()-1].Время;
	ИмяФайла = ТрекИмяФайлаПоДате(СтррДанные.ВремяНачала, КаталогТрековАгента);
	
	ЗначениеВФайл(ИмяФайла, СтррДанные);

КонецПроцедуры

Функция ТрекОткрытьФайл(ДатаТочкиТрека, КаталогТрековАгента) Экспорт

	ИмяФайла = ТрекИмяФайлаПоДате(ДатаТочкиТрека, КаталогТрековАгента);
	Если ФайлСуществует(ИмяФайла) Тогда
		Попытка
			СтррДанные = ЗначениеИзФайла(ИмяФайла);
		Исключение
			Текст = СтрШаблон_(НСтр("ru = 'Не удалось получить значение из файла трека: ""%1"" по причине: %2. Файл будет переформирован.'"), ИмяФайла, ОписаниеОшибки());     
			ОповеститьОСобытии(Текст, "ОшибкаОбмен",, "ТекущийАгент");
			СтррДанные = ПолучитьСтруктуруДанныхТрека();	
		КонецПопытки;
	Иначе
		СтррДанные = ПолучитьСтруктуруДанныхТрека();
	КонецЕсли; 
	
	Возврат СтррДанные;

КонецФункции 

Процедура ТрекЗаполнитьСтррСтрокаТрека(СтрокаФайла, СтррСтрокаТрека);

	СтррСтрокаТрека.ЕстьОшибка = Ложь;	
	Строки = СтрЗаменить(СтрокаФайла, Символы.Таб, Символы.ПС); 
	
	Если СтрЧислоСтрок(Строки) < 5 Тогда
		СтррСтрокаТрека.ЕстьОшибка = Истина;
		Возврат;
	Конецесли;
	
	Попытка
		СтррСтрокаТрека.Широта  = Число(СтрПолучитьСтроку(Строки, 2));		
		СтррСтрокаТрека.Долгота = Число(СтрПолучитьСтроку(Строки, 3));
	Исключение
		СтррСтрокаТрека.ЕстьОшибка = Истина;
		Возврат;	
	КонецПопытки;
	
	Если (СтррСтрокаТрека.Широта = 0 ИЛИ СтррСтрокаТрека.Долгота = 0) И НЕ СтррСтрокаТрека.Широта = СтррСтрокаТрека.Долгота = 0 Тогда
		СтррСтрокаТрека.ЕстьОшибка = Истина;
		Возврат;
	КонецЕсли; 	
	
	Попытка
		СтррСтрокаТрека.Скорость  = Число(СтрПолучитьСтроку(Строки, 4));		
	Исключение
		СтррСтрокаТрека.Скорость = 0;
	КонецПопытки;
	
	Попытка
		СтррСтрокаТрека.ИсточникСигнала  = Число(СтрПолучитьСтроку(Строки, 5));		
	Исключение
		СтррСтрокаТрека.ИсточникСигнала = 0;
	КонецПопытки;
	
КонецПроцедуры	
	
Функция ТрекДатаИзСтроки(СтрокаТрека)

	Попытка
		//@skip-check use-non-recommended-method
		КонечныйИндексСимвола = Найти(СтрокаТрека, символы.Таб) - 1;
		СтрокаДаты = Лев(СтрокаТрека, КонечныйИндексСимвола);
		СтрокаДаты = СтрЗаменить(СтрокаДаты, "-", "");
		СтрокаДаты = СтрЗаменить(СтрокаДаты, " ", "");
		СтрокаДаты = Дата(СтрокаДаты);
	Исключение
		СтрокаДаты = '00010101';	
	КонецПопытки;
		
	Возврат СтрокаДаты;
КонецФункции

Функция ТрекИмяФайлаПоДате(ДатаТрека, КаталогТрековАгента)

	Возврат КаталогТрековАгента + Формат(ДатаТрека, "ДФ=yyyyMMdd") + "_GPS.dat";
	
КонецФункции

// ЗагрузкаТреков
#КонецОбласти

// Загрузка значений всех реквизитов обработки. Таблицы значений загружаются в реквизит "ВременныеТаблицы" (тип - Структура).
Процедура ЗагрузитьНастройкиДляРаботыОбмена()

	Если ГНастройкиОбменаЗагружены = Истина Тогда // настройки обмена уже загружены в память
		Возврат;
	КонецЕсли; 
	
	ОпределитьВерсиюКонфигурации();
	
	Имена = "";
	
	Для Каждого ЭлементМетаданных Из Метаданные().Реквизиты Цикл
		Имя = ЭлементМетаданных.Имя;
		Если Имя <> "ВыбАгент" Тогда
			Имена = Имена + Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	ВосстановитьЗначенияНастроекОбработки(Лев(Имена, СтрДлина(Имена)-1), Истина);
	
	ГКэшСравненияКонфигураций 	= Новый Соответствие;
	ГКэшРеквизитыОбъектов 		= Новый Соответствие;
	
	// чтение служебных таблиц (которых нет среди реквизитов обработки) гКэшСлужебныхТаблиц
	КэшСлужебныхТаблицЗагрузить("СпрХарактеристикиНоменклатурыСлужебный");
	КэшСлужебныхТаблицЗагрузить("СпрОграничениеВыгрузкФотографийТоваров");
	
КонецПроцедуры

Функция НовыйДополнительныйРеквизитИлиСведение(ИмяСвойства, ПредставлениеСвойства, ОписаниеТипа, ЭтоДополнительноеСведение, Подсказка)

	НовыйЭлемент = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	НовыйЭлемент.ДополнительныеЗначенияИспользуются = Истина;
	Если ПоколениеКонфигурации(">=УТ_11.2") Тогда 
		НовыйЭлемент.Доступен = Ложь;
	КонецЕсли;
	НовыйЭлемент.Заголовок 		= ПредставлениеСвойства;
	НовыйЭлемент.Наименование 	= ИмяСвойства;
	НовыйЭлемент.ТипЗначения 	= ОписаниеТипа;
	НовыйЭлемент.ЭтоДополнительноеСведение = ЭтоДополнительноеСведение;
	НовыйЭлемент.Подсказка 		= Подсказка;
	НовыйЭлемент.Записать();

	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции 

// Функция возвращает структуру, используемую для запоминания загруженных объектов
// (документов, элементов справочников) из XML-файла, полученного от МТ.
// Параметры:
// 	  СтррСведенияИзАрхива - Структура - дополнительные данные о содержимом архива файла обмена To1C.zip.
//
Функция ЗагруженныеОбъектыИзФайла(СтррСведенияИзАрхива)

	СтррРезультат = Новый Структура;
	
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки());
	ОписаниеТипаИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	ОписаниеТипаДата   = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ТЗЗагруженныеДокументы = Новый ТаблицаЗначений;
	ТЗЗагруженныеДокументы.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор);	// идентификатор документа
	ТЗЗагруженныеДокументы.Колонки.Добавить("ВидДокумента", 	ОписаниеТипаСтрока); // вид документа в 1С
	ТЗЗагруженныеДокументы.Колонки.Добавить("ИдВидДокументаМТ", ОписаниеТипаИдентификатор); // идентификатор (GUID) вида документа в МУ (на случай, если, например, Заказ в МУ загружался в 1С как РеализацияТоваровУслуг)
	ТЗЗагруженныеДокументы.Колонки.Добавить("ДатаДокумента", 	ОписаниеТипаДата); // дата-время создания документа в МУ
	СтррРезультат.Вставить("тзЗагруженныеДокументы", 			ТЗЗагруженныеДокументы); // идентификаторы загруженных документов
	
	ТЗЗагруженныеСправочники = Новый ТаблицаЗначений;
	ТЗЗагруженныеСправочники.Колонки.Добавить("Идентификатор", 		ОписаниеТипаИдентификатор);	// идентификатор элемента справочника
	ТЗЗагруженныеСправочники.Колонки.Добавить("ИдВидСправочникаМТ", ОписаниеТипаИдентификатор); // идентификатор (GUID) вида справочника в МУ ? возможно не нужен
	СтррРезультат.Вставить("тзЗагруженныеСправочники", 	ТЗЗагруженныеСправочники); // идентификаторы загруженных элементов справочников
	
	ТЗКассовыеДокументы = Новый ТаблицаЗначений;
	ТЗКассовыеДокументы.Колонки.Добавить("Документ"); 	  // объект документа
	ТЗКассовыеДокументы.Колонки.Добавить("СтррЗначения"); // значения дополнительных реквизитов документа
	ТЗКассовыеДокументы.Колонки.Добавить("ЭтоНовый");
	ТЗКассовыеДокументы.Колонки.Добавить("ИдОснования");
	СтррРезультат.Вставить("тзКассовыеДокументы", ТЗКассовыеДокументы);
	
	ТЗДокументыВозвраты = Новый ТаблицаЗначений; 
	ТЗДокументыВозвраты.Колонки.Добавить("Документ"); 	  // объект документа
	ТЗДокументыВозвраты.Колонки.Добавить("СтррЗначения"); // значения дополнительных реквизитов документа
	ТЗДокументыВозвраты.Колонки.Добавить("ЭтоНовый");
	ТЗДокументыВозвраты.Колонки.Добавить("ИдОснования");
	СтррРезультат.Вставить("тзДокументыВозвраты", ТЗДокументыВозвраты);
	
	ТЗСсылкиНаМерчендайзинг = Новый ТаблицаЗначений; // таблица ссылок на документы Мерчандайзинг в загруженных из МУ документов ЗаказКлиента и Реализация (по значению реквизита "Мерчендайзинг")
	ТЗСсылкиНаМерчендайзинг.Колонки.Добавить("Документ");
	ТЗСсылкиНаМерчендайзинг.Колонки.Добавить("ИдМерчендайзинга");
	СтррРезультат.Вставить("тзСсылкиНаМерчендайзинг", ТЗСсылкиНаМерчендайзинг);
	
	// Сведения
	СтррРезультат.Вставить("СведенияИзАрхива", СтррСведенияИзАрхива); 
	ТЗФотографии = Новый ТаблицаЗначений;
	ТЗФотографии.Колонки.Добавить("GUID", 	ОписаниеТипаСтрока); // идентификатор элемента справочника МТ "*ФотоДокументов" для выгрузки подтверждений
	ТЗФотографии.Колонки.Добавить("ИдФото", ОписаниеТипаСтрока); // идентификатор изображения фотографии - используется для подтверждения элементов тэга PICTURES
	ТЗФотографии.Колонки.Добавить("Время",  ОписаниеТипаСтрока); // время создания фотографии в формате XML
	ТЗФотографии.Колонки.Добавить("ИдДокумента",  ОписаниеТипаСтрока);   // идентификатор документа, за которым закреплена фотография 
	ТЗФотографии.Колонки.Добавить("ВидДокумента", 	ОписаниеТипаСтрока); // вид документа-владельца фотографии
	ТЗФотографии.Колонки.Добавить("ВидСправочника", ОписаниеТипаСтрока); // вид справочника УТ, куда загружается фотография
	ТЗФотографии.Колонки.Добавить("ИмяФайла", 		ОписаниеТипаСтрока); // имя файла фотографии
	ТЗФотографии.Колонки.Добавить("Описание", 	ОписаниеТипаСтрока); // описание фотографии, которое ввел пользователь МУ после фотографирования
	ТЗФотографии.Колонки.Добавить("ЭтоНовый", 	ОписаниеТипаБулево); // признак, что фотография загружается в УТ впервые
	ТЗФотографии.Колонки.Добавить("Загружено", 	ОписаниеТипаБулево); // ссылка на элемент справочника УТ хранения фотографий (для разных видов документов это разные справочники в УТ)
	СтррРезультат.Вставить("тзФотографии", ТЗФотографии);

	ТЗСправочникОтчеты = Новый ТаблицаЗначений;
	ТЗСправочникОтчеты.Колонки.Добавить("Идентификатор", 	ОписаниеТипаИдентификатор);
	ТЗСправочникОтчеты.Колонки.Добавить("Наименование", 	ОписаниеТипаСтрока);
	ТЗСправочникОтчеты.Колонки.Добавить("ИмяФайла", 		ОписаниеТипаСтрока);
	ТЗСправочникОтчеты.Колонки.Добавить("ВстроенныйОтчет",	ОписаниеТипаСтрока);
	СтррРезультат.Вставить("тзСправочникОтчеты", ТЗСправочникОтчеты);
	
	ТЗСправочникОтчетыПараметры = Новый ТаблицаЗначений; 
	ТЗСправочникОтчетыПараметры.Колонки.Добавить("GUID", 			ОписаниеТипаИдентификатор);
	ТЗСправочникОтчетыПараметры.Колонки.Добавить("Родитель", 		ОписаниеТипаИдентификатор);
	ТЗСправочникОтчетыПараметры.Колонки.Добавить("Имя", 			ОписаниеТипаСтрока);
	ТЗСправочникОтчетыПараметры.Колонки.Добавить("Тип", 			ОписаниеТипаСтрока);
	ТЗСправочникОтчетыПараметры.Колонки.Добавить("Обязательный",	ОписаниеТипаСтрока);
	ТЗСправочникОтчетыПараметры.Колонки.Добавить("Значение", 		ОписаниеТипаСтрока);
	СтррРезультат.Вставить("тзСправочникОтчетыПараметры", ТЗСправочникОтчетыПараметры);
	
	ТЗСоглашения = Новый ТаблицаЗначений;	
	ТЗСоглашения.Колонки.Добавить("Объект");
	ТЗСоглашения.Колонки.Добавить("Партнер");		
	СтррРезультат.Вставить("тзСоглашения", ТЗСоглашения);
	
	СтррРезультат.Вставить("СтррКонстанты", Новый Структура);
	
	Возврат СтррРезультат;
КонецФункции 

Функция СсылкаИзДокументаПоСпискуВидов(ИдДокумента, СтрВидыДокументов)
	
	МВидыДокументов = СтрРазделить_(СтрВидыДокументов);
	ТипИдентификатора = ТипЗнч(ИдДокумента);
	
	Если ТипИдентификатора = Тип("Строка") И Не ПустаяСтрока(ИдДокумента) Тогда
		GUID = Новый УникальныйИдентификатор(ИдДокумента);
	ИначеЕсли ТипИдентификатора = Тип("УникальныйИдентификатор") Тогда
		GUID = ИдДокумента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Для каждого ВидДокумента Из МВидыДокументов Цикл
		Ссылка = СсылкаИзДокумента(GUID, ВидДокумента);
		Если Не Ссылка.Пустая() Тогда
			Результат = Ссылка;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Результат = Неопределено Тогда // возвращаем пустую ссылку вида из первого элемента массива
		Результат = Документы[МВидыДокументов[0]].ПустаяСсылка();
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции
                                                                                                    
Функция СсылкаИзДокумента(ИдДокумента, ВидДокумента)

	ДокМенеджер = Документы[ВидДокумента];		
	ТипИдентификатора = ТипЗнч(ИдДокумента);
	
	Если ТипИдентификатора = Тип("Строка") И Не ПустаяСтрока(ИдДокумента) И НЕ ИдДокумента = "00000000-0000-0000-0000-000000000000" Тогда
		GUID = Новый УникальныйИдентификатор(ИдДокумента);       
	ИначеЕсли ТипИдентификатора = Тип("УникальныйИдентификатор") Тогда
		GUID = ИдДокумента;
	Иначе
		GUID = Неопределено;
	КонецЕсли;
	
	Если GUID <> Неопределено Тогда
		Ссылка = ДокМенеджер.ПолучитьСсылку(GUID);
		ОбъектДок = Ссылка.ПолучитьОбъект(); // будет возвращено Неопределено, если объект не найден
	КонецЕсли; 
	
	Возврат ?(ОбъектДок = Неопределено, ДокМенеджер.ПустаяСсылка(), Ссылка);
	
КонецФункции

Функция СсылкаИзСправочника(ИдЭлемента, Спр, СоздаватьЭлемент = Ложь)
	
	СпрМенеджер = Справочники[Спр];
	
	Если ИдЭлемента = Неопределено Или ЭтоПустойИдентификатор(ИдЭлемента) Тогда
		Возврат СпрМенеджер.ПустаяСсылка();
	КонецЕсли;
	
	Результат = Неопределено;	

	Если ЗначениеЗаполнено(ИдЭлемента) Тогда
		ГуидЭлемента = Новый УникальныйИдентификатор(ИдЭлемента);
		Результат = СпрМенеджер.ПолучитьСсылку(ГуидЭлемента);
		Если Результат.ПолучитьОбъект() = Неопределено Тогда
			Если СоздаватьЭлемент Тогда
				ЭлементОбъект = СпрМенеджер.СоздатьЭлемент();
				ЭлементОбъект.УстановитьСсылкуНового(Результат); 
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				Если Не ВыполнитьОперациюДляОбъекта(ЭлементОбъект, "запись") Тогда
					Текст = "Не удалось записать элемент справочника: " + Строка(ЭлементОбъект);
					ОповеститьОСобытии(Текст, "ОшибкаЗапись", ЭлементОбъект, "ТекущийАгент");
					Возврат Результат;
				КонецЕсли;
				Результат = ЭлементОбъект.Ссылка;
			Иначе
				Результат = СпрМенеджер.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Результат = СпрМенеджер.ПустаяСсылка();
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Функция записыввает и (если требуется в настройках) проводит документ.
// Возвращает Истина, если документ удалось записать, или Ложь в противном случае.
// gi_240222 добавлен параметр: СтррПараметры = Неопределено
Функция ЗаписьДокумента(Док, СтррЗначенияДопРеквизитов, ЭтоНовый)
	
	МожноПроводить = Истина;             
	МетаданныеДок = Док.Метаданные();
	РеквизитыДок = МетаданныеДок.Реквизиты;

	ПроводитьДокумент = ПроводитьДокумент(МетаданныеДок.Имя);
		
	Если ПроводитьДокумент Тогда
		
		Если РеквизитыДок.Найти("Партнер") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Партнер) Тогда
				Текст = "В документе " + Строка(Док) + " не указан партнер. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если РеквизитыДок.Найти("Контрагент") <> Неопределено И ТипЗнч(Док) <> Тип("ДокументОбъект.СчетФактураВыданный") Тогда //Если РеквизитыДок.Найти("Контрагент") <> Неопределено Тогда  //В счет фактуре не требуется заполнение контрагента.
			Если Не ЗначениеЗаполнено(Док.Контрагент) Тогда
				Текст = "В документе " + Строка(Док) + " не указан контрагент. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если РеквизитыДок.Найти("Соглашение") <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Док.Соглашение) И ИспользоватьСоглашения() И Не ИспользоватьПунктыРазгрузки Тогда
				Текст = "В документе " + Строка(Док) + " не указано соглашение. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитыДок.Найти("Договор") <> Неопределено И ИспользоватьПунктыРазгрузки Тогда
			Если Не ЗначениеЗаполнено(Док.Договор) Тогда
				Текст = "В документе " + Строка(Док) + " не указан договор. Документ не будет проведен!";
				ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
				МожноПроводить = Ложь;
			КонецЕсли;
		КонецЕсли;
				
	Иначе
		МожноПроводить = Ложь;
		
	КонецЕсли;

	Если Не ВыполнитьОперациюДляОбъекта(Док, "запись") Тогда
		
		ПредставлениеВМУ = " (значения в МУ: N " + СтррЗначенияДопРеквизитов.Номер  // gi_240222 добавлено 
			+ " от " + СтррЗначенияДопРеквизитов.Дата 
			+ " , id=" + Док.Ссылка.УникальныйИдентификатор() + ")";
		Текст = "Не удалось записать документ " + Строка(Док) + " в базу!" + ПредставлениеВМУ; // gi_240222 дополнено
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
		////{{ gi_240222 добавлено
		//Если СтррПараметры <> Неопределено Тогда
		//	СтррПараметры.Вставить("ПричинаПропуска", "Отказано в записи! (id=" + СтррПараметры.ИдОбъекта + ")");		
		//КонецЕсли;
		////}} gi_240222
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписатьДополнительныеСвойстваДокумента(Док.Ссылка, СтррЗначенияДопРеквизитов);	

	Если МожноПроводить И РеквизитыДок.Найти("СуммаДокумента") <> Неопределено Тогда
		Если Док.СуммаДокумента = 0 Тогда
			Текст = "Сумма документа " + Строка(Док) + " равна 0. Документ не будет проведен!";
			ОповеститьОСобытии(Текст, "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
			МожноПроводить = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеДок.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить И ПроводитьДокумент И МожноПроводить Тогда
		Если Не ВыполнитьОперациюДляОбъекта(Док, "проведение") Тогда
			ОповеститьОСобытии("Не удалось провести документ: " + Строка(Док), "ОшибкаЗапись", Док.Ссылка, "ТекущийАгент");
			Возврат Истина; // 
		КонецЕсли;
	КонецЕсли;
	
	Текст = ?(ЭтоНовый, "Создан", "Перезаписан") + " документ " + Строка(Док);
	ОповеститьОСобытии(Текст, "ИнфоОбмен", Док.Ссылка);
	
	Возврат Истина;
	
КонецФункции

// Функция записыввает и (если требуется в настройках) проводит документ.
// Возвращает Истина, если документ удалось записать, или Ложь в противном случае.
Функция ЗаписьВиртуальногоДокумента(СтррДокумент, СтррЗначенияДопРеквизитов, СтррПараметры, ЗагружаемыеОбъекты) // !!!! ЗагружаемыеОбъекты - временный параметр
	
	//МожноПроводить = Истина;
	
	ВидДокумента = СтррДокумент._ВидДокумента;
	СтрокаТ 	 = СтррДокумент._строкаЖурнала; // строка ТЗ журнала виртуального документа
	
	// удаляем служебные реквизиты структуры перед записью документа в хранилище
	СтррДокумент.Удалить("_ВидДокумента");
	СтррДокумент.Удалить("_строкаЖурнала");
	СтррДокумент.Удалить("Ссылка");
	
	СтррДокумент.Статус = ?(СтррПараметры.Проведен, 1, 0);
	
	ЗаполнитьЗначенияСвойств(СтррДокумент, СтррЗначенияДопРеквизитов, "ВремяНачала,ВремяОкончания,Широта,Долгота"); // заполняем значения доп. реквизитов
	ЗаполнитьЗначенияСвойств(СтрокаТ, СтррДокумент); // заполняем значения строки журнала виртуального документа (копируется часть реквизитов шапки документа)
	
	Префикс = ВОСвойстваОбъекта(ВидДокумента).Префикс;
	GUID = СтрокаТ.ID;
	СохранитьОбъектВХранилище(Префикс, GUID, СтррДокумент);
	
	Текст = ?(СтррПараметры.ЭтоНовый, "Создан", "Перезаписан") + " документ " + СтррПараметры.Представление; 
	ОповеститьОСобытии(Текст, "ИнфоОбмен", Неопределено);
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписьСправочника(ОбъектСпр, НовыйЭлемент = Истина)
	
	Если Не ВыполнитьОперациюДляОбъекта(ОбъектСпр, "запись") Тогда
		Текст = "Не удалось записать справочник " + Строка(ОбъектСпр) + " в базу!";
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", ОбъектСпр.Ссылка, "ТекущийАгент");
		Возврат Ложь;
	КонецЕсли;
	
	Текст = СтрШаблон_("%1 элемент справочника ""%2"", наименование: %3",
		?(НовыйЭлемент, "Создан", "Перезаписан"),
		ОбъектСпр.Метаданные().Имя,
		Строка(ОбъектСпр));
	ОповеститьОСобытии(Текст, "ИнфоОбмен", ОбъектСпр.Ссылка);
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписьДопСвойствПартнера(Спр, СтррСвойства)

	ТЗРеквизиты = Новый ТаблицаЗначений;
	ТЗРеквизиты.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТЗРеквизиты.Колонки.Добавить("Значение");
	
	СТЗШирота = ТЗРеквизиты.Добавить();	
	СТЗШирота.Свойство  = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваШиротаПартнер());	
	СТЗШирота.Значение	= СтррСвойства.Широта;
	СТЗДолгота = ТЗРеквизиты.Добавить();
	СТЗДолгота.Свойство = ДополнительноеСвойствоПоНаименованию(ИмяСвойстваДолготаПартнер());
	СТЗДолгота.Значение = СтррСвойства.Долгота;

	УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(Спр.Ссылка, ТЗРеквизиты);

КонецПроцедуры

Функция ВыполнитьОперациюДляОбъекта(Объект, ВидОперации)
	
	Результат = Ложь;
	
	Попытка
		
		Если ВидОперации = "запись" Тогда
			
			Объект.Записать();
			
		ИначеЕсли ВидОперации = "проведение" Тогда
			
			Если Объект.ПометкаУдаления Тогда
				ОповеститьОСобытии("Документ помечен на удаление - проведение отменено!", "ОшибкаЗапись", Объект.Ссылка, "ТекущийАгент");
				Возврат Ложь;
			Иначе
				//@skip-check many-actual-parameters
				Объект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		ИначеЕсли ВидОперации = "создание" Тогда
			
			СтрОбъект = Строка(Объект);
			
			Если Лев(СтрОбъект, 10)     = "Справочник" Тогда
				Объект = Объект.СоздатьЭлемент();
			ИначеЕсли Лев(СтрОбъект, 8) = "Документ" Тогда
				Объект = Объект.СоздатьДокумент();
			ИначеЕсли Лев(СтрОбъект, 7) = "Регистр" Тогда
				Объект = Объект.СоздатьМенеджерЗаписи();
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Истина;
		
	Исключение
		
		Текст = "Не удалось выполнить " + ВидОперации + " для объекта: """ + Строка(Объект) + """. Причина: " + ОписаниеОшибки();
		Ссылка = ?(ЕстьРеквизитОбъекта("Ссылка", Объект), Объект.Ссылка, Неопределено);
		ОповеститьОСобытии(Текст, "ОшибкаЗапись", Ссылка, "ТекущийАгент");
		
		Если ВидОперации = "проведение" И ЗначениеЗаполнено(Объект.Ссылка) Тогда 
			// запись документа прошла успешно, возвращаем Истина, чтобы документ был зарегистрирован в журнале обмена
			Результат = Истина;
		КонецЕсли; 
		
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

Функция ОснованияДляДокументовОрдер()

	СписокОснованийДляОрдера = Новый СписокЗначений;
	СписокОснованийДляОрдера.Добавить("ЗаказКлиента");
	СписокОснованийДляОрдера.Добавить("РеализацияТоваровУслуг");
	СписокОснованийДляОрдера.Добавить("ВозвратТоваровОтКлиента");
	СписокОснованийДляОрдера.Добавить(ВидДокументаПоступлениеТоваровУслуг());

	Возврат СписокОснованийДляОрдера;
	
КонецФункции // ОснованияДляДокументовОрдер()

Функция ЭтоПустойИдентификатор(GUID)

	Возврат (ПустаяСтрока(GUID) Или СокрЛП(GUID) = "00000000-0000-0000-0000-000000000000");

КонецФункции
 
Функция КонстантыИзФайлаОбмена(ТекстXML)

	СтррРезультат = Новый Структура;
	СтвКонстанты = КонстантыМТПолучитьСоответствие();
	
	Пока ТекстXML.Прочитать() Цикл
		Если ТекстXML.Имя = "CONSTANTS"	И ТекстXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		ИначеЕсли ТекстXML.Имя = "ITEM" И ТекстXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяКонстанты = СтвКонстанты.Получить(НРег(ТекстXML.ЗначениеАтрибута("GUID")));
			Если ЗначениеЗаполнено(ИмяКонстанты) Тогда
				СтррРезультат.Вставить(ИмяКонстанты, ТекстXML.ЗначениеАтрибута("Value"));
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтррРезультат;
КонецФункции 

Функция ТорговыйПредставительИзФайлаОбмена(СтррКонстанты)

	Если ТипЗнч(СтррКонстанты) <> Тип("Структура") ИЛИ НЕ СтррКонстанты.Свойство("АгентЗагрузки") ИЛИ НЕ ЗначениеЗаполнено(СтррКонстанты.АгентЗагрузки) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(СтррКонстанты.АгентЗагрузки));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция НайтиФайлОбменаВКаталоге(Путь)

	Маска = "To*.zip";
	НайденныеФайлы = НайтиФайлы(Путь, Маска);
	ФайлАрхив = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		ФайлАрхив = НайденныеФайлы[0];
	Иначе
		Текст = СтрШаблон_("Данные от агента отсутствуют в каталоге ""%1"".", Путь);
		ОповеститьОСобытии(Текст,,, "ТекущийАгент");
		Возврат Неопределено;
	КонецЕсли;

	Возврат ФайлАрхив;
	
КонецФункции 

Функция ФайлОбменаРаспакованный(ПутьККаталогуФайла)

	Маска = "To*.xml";
	НайденныеФайлы = НайтиФайлы(ПутьККаталогуФайла, Маска);
	ФайлОбмена = Неопределено;
	Если НайденныеФайлы.Количество() > 0 Тогда
		ФайлОбмена = НайденныеФайлы[0];
	Иначе
		Текст = СтрШаблон_("Не найден файл в папке ""%1"" по маске ""%2"".", ПутьККаталогуФайла, Маска);
		ВызватьИсключение(Текст);
	КонецЕсли;

	Возврат ФайлОбмена;
	
КонецФункции 

Функция УстановитьВидЦеныТЧ(ИдВидЦены, ВидЦеныДокумента) 
	
	ВидЦены = СсылкаИзСправочника(ИдВидЦены, "ВидыЦен");
	
	Если ВидЦены.Пустая() 
		И НЕ ВыбНастройкиАгента.НастройкиМобильногоПриложения.РазрешитьРедактироватьЦены.Значение
			И НЕ ВыбНастройкиАгента.НастройкиМобильногоПриложения.ИспользоватьТипыЦенВТЧ.Значение Тогда 
		
		ВидЦены = ВидЦеныДокумента;
		
	КонецЕсли;
	
	Возврат ВидЦены;
	
КонецФункции

Функция УстановитьОбеспечениеЗаказа();
	
	Если ВыбНастройкиАгента.НастройкиМобильногоПриложения.ЗапретитьОтрицательныеОстатки.Значение = Ложь И (ПоколениеКонфигурации(">УТ_11.1.7") ИЛИ ГКонфигурация = "УТ_UA") Тогда
		//(( sk_220411 MOD-3103 
		//ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется; 
		Если ПоколениеКонфигурации(">=УТ_11.5.7.390") Тогда
			ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению; 
		Иначе
			//@skip-check unknown-method-property
			ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется; 
		КонецЕсли;
		//)) sk_220411
	ИначеЕсли РегистрОстатковТоваров = "СвободныеОстатки" Или ПоколениеКонфигурации("<=УТ_11.1.7") Тогда
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
	Иначе
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
	КонецЕсли;
		
	Возврат ВариантОбеспечения;
	
КонецФункции

Процедура ЗаполнитьУсловияПродажПоСоглашению(ОбъектДок)
	
	//В названии процедуры используется английская "C" или русская "C", зависит от версии конфигурации.
	
	//Заказ Клиента
	// В УТ < 11.3         	Используется Англ
	// В УТ >= 11.3        	Используется Рус
	// В УТ_UA 3.1.1.122   	Используется Англ	11.0.6.9
	// В УТ_UA 3.1.3.4     	Используется Англ
	// В УТ_UA 3.1.5.1     	Используется Англ 
	// В КА 2.4.3.127      	Используется Рус
	// В УТ_KZ 3.1.4.8     	Используется Англ
	// В УТ_KZ 3.2.3.10    	Используется Англ 
	// В УТ_CRM_2 3.0.11.1	Используется Рус 

	//Реализация
	// В УТ < 11.3			Используется Англ
	// В УТ >= 11.3			Используется Рус
	// В УТ_UA 3.1.5.1		Используется Англ
	// В УТ_KZ 3.2.3.10		Используется Англ
	// В УТ_CRM_2 3.0.11.1	Используется Рус
	
	//Возвраты
	// В УТ_UA 3.1.5.1    	Используется Англ
	// В УТ_KZ 3.2.3.10   	Используется Англ
	// В УТ_CRM_2 3.0.11.1	Используется Рус

	Если ПоколениеКонфигурации("<УТ_11.3") Тогда
		//@skip-check unknown-method-property
		ОбъектДок.ЗаполнитьУсловияПродажПоCоглашению(); // В названии процедуры английская "C"		
	Иначе
		ОбъектДок.ЗаполнитьУсловияПродажПоСоглашению(); // В названии процедуры русская "C"	
	КонецЕсли;      

Конецпроцедуры

// Заполняет БанковскиеСчета по документам Продажи/Закупки значениями по умолчанию
//
// Параметры:
//	ОбъектДок - ДокументОбъект. - заполняемый документ	
//
Процедура ДокументПродажиЗакупкиЗаполнитьБанковскиеСчета(ОбъектДок)
		
	Если Не ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ЗаказКлиента") И Не ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		И Не ТипЗнч(ОбъектДок) = Тип("ДокументОбъект." + ВидДокументаПоступлениеТоваровУслуг()) Тогда
		ВызватьИсключение("Процедура ДокументПродажиЗаполнитьБанковскиеСчета() - неизвестный вид документа - " + Строка(ОбъектДок));
	КонецЕсли;

	Если ПоколениеКонфигурации("<=УТ_11.2.2") Или ГКонфигурация = "УТ_UA" Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Валюта);	
	Иначе
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ОбъектДок.Организация, ОбъектДок.Валюта, ОбъектДок.НаправлениеДеятельности);
	КонецЕсли;
		
	Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		ОбъектДок.БанковскийСчет = БанковскийСчет;
	Иначе
		//@skip-check unknown-method-property
		ОбъектДок.БанковскийСчетОрганизации =  БанковскийСчет;
	КонецЕсли;
	
	ОбъектДок.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ОбъектДок.Контрагент);
		
КонецПроцедуры
	
// Заполняет кассу организации по умолчанию по документам Продажи
//
// Параметры:
//	ОбъектДок - ДокументОбъект. - заполняемый документ	
//
Процедура ДокументПродажиЗаполнитьКассуОрганизацииПоУмолчанию(ОбъектДок)
	
	Если ПоколениеКонфигурации("<=УТ_11.2.2") Тогда
			//@skip-check many-actual-parameters
			//@skip-check unknown-method-property
			ОбъектДок.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(
				ОбъектДок.Организация, ОбъектДок.ФормаОплаты, Справочники.Кассы.ПустаяСсылка(), ОбъектДок.Валюта);
		Иначе
			СтррПараметрыЗаполненияКассы = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
			//@skip-check unknown-method-property
			СтррПараметрыЗаполненияКассы.Организация 			 = ОбъектДок.Организация; 
			//@skip-check unknown-method-property
			СтррПараметрыЗаполненияКассы.ФормаОплаты 			 = ОбъектДок.ФормаОплаты;
			СтррПараметрыЗаполненияКассы.Касса 		 			 = Справочники.Кассы.ПустаяСсылка();
			//@skip-check unknown-method-property
			СтррПараметрыЗаполненияКассы.Валюта 	 			 = ОбъектДок.Валюта;
			//@skip-check unknown-method-property
			СтррПараметрыЗаполненияКассы.НаправлениеДеятельности = ОбъектДок.НаправлениеДеятельности;	
			Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
				//@skip-check unknown-method-property
				СтррПараметрыЗаполненияКассы.ФизическоеЛицо = ОбъектДок.Курьер;
			КонецЕсли;
			//@skip-check unknown-method-property
			ОбъектДок.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтррПараметрыЗаполненияКассы);
		КонецЕсли;

КонецПроцедуры

// Заполняет ТЧ ЭтапыГрафикаОплаты по документам Продажи
//
// Параметры:
//	ОбъектДок - ДокументОбъект. - заполняемый документ	
//
Процедура ДокументПродажиЗаполнитьЭтапыГрафикаОплаты(ОбъектДок)
		
	Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
		ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ОбъектДок);
	ИначеЕсли Не (ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.РеализацияТоваровУслуг") И ПоколениеКонфигурации("<УТ_11.4.6")) Тогда
		//@skip-check unknown-method-property
		ОбъектДок.ЗаполнитьЭтапыГрафикаОплаты();
	КонецЕсли;
		
КонецПроцедуры

// Возвращает структуру по ответственному лицу указанного склада
// В случае если склад является группой, возвращает значения,
// 		использовавшиеся в последнем документе указанного менеджера с указанным складом.
//
// Параметры:
//	ОбъектДок - ДокументОбъект. - документ продажи
//
// Возвращаемое значение:
// 		Структура - Структура с полями: 
// 		* Ответственный - СправочникСсылка.ФизическиеЛица - Ответственное лицо
// 		* ОтветственныйДолжность - Строка - Должность ответственного лица
//
Функция ДокументПродажиПолучитьОтветственногоПоСкладу(ОбъектДок)
	
	Если ПоколениеКонфигурации(">=УТ_11.5") Тогда
		//@skip-check unknown-method-property
		Возврат ПродажиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад);
	Иначе
		//@skip-check many-actual-parameters
		//@skip-check unknown-method-property
		Возврат ПродажиСервер.ПолучитьОтветственногоПоСкладу(ОбъектДок.Склад, ОбъектДок.Менеджер);
	КонецЕсли;
	
КонецФункции // ДокументПродажиПолучитьОтветственногоПоСкладу() 

// Проверяет и заполняет обеспечение в документе Заказ           
//                                                    
// Параметры:
//	ОбъектДок - ДокументОбъект.ЗаказКлиента - документ заказы
//
Процедура ПроверитьЗаполнитьОбеспечениеВДокументеЗаказы(ОбъектДок)

	Если ПоколениеКонфигурации("<УТ_11.3") Тогда
		Возврат;
	КонецЕсли;
	
	//УТ 11.1.10.150 	нет
	//УТ 11.2.2.100     нет
	//УТ 11.3.1.109		нет
	//УТ 11.4.2.109     есть
	//УТ 11.4.7.150		есть
	Если ПоколениеКонфигурации(">=УТ_11.5.7") Тогда
		ВариантыОбеспечения = ПродажиСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(ОбъектДок.Соглашение, ОбъектДок.Статус);	
	ИначеЕсли ПоколениеКонфигурации(">=УТ_11.4") Тогда  
		//@skip-check unknown-method-property
		ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(ОбъектДок.Соглашение, ОбъектДок.Статус);
	КонецЕсли;	
	
	//УТ 11.1.10.150 	нет
	//УТ 11.2.2.100     нет
	//УТ 11.3.1.109		есть    
	//УТ 11.4.7.150		есть
	Если ПоколениеКонфигурации(">=УТ_11.5.7") Тогда
		СтррДействия = Новый Структура();
		СтррПараметры = Документы.ЗаказКлиента.ПараметрыДокументаДляДействийОбеспечения(ОбъектДок);
		CтрПоляСтрокой = "ВариантОбеспечения";    
		МодульОбеспечениеВДокументахКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОбеспечениеВДокументахКлиентСервер");
		МодульОбеспечениеВДокументахКлиентСервер.ДобавитьДействияОбеспечения(СтррДействия, CтрПоляСтрокой, СтррПараметры);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОбъектДок.Товары, СтррДействия, Неопределено);
	Иначе   
		Если ПоколениеКонфигурации(">=УТ_11.3.3") Тогда
			//@skip-check unknown-method-property
			СтррПараметры = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, ОбъектДок.ЖелаемаяДатаОтгрузки);
		Иначе
			//@skip-check unknown-method-property
			СтррПараметры = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечениеВДокументеПродажи(ВариантыОбеспечения, ОбъектДок.Статус, ОбъектДок.ЖелаемаяДатаОтгрузки);
		КонецЕсли;
		СтррДействия = Новый Структура;
		СтррДействия.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", СтррПараметры);
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОбъектДок.Товары, СтррДействия, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// sk_231016 MOD-3533
//
// Заполняет зону доставки по партнеру
//                                                    
// Параметры:
//	ОбъектДок - ДокументОбъект.ЗаказКлиента - документ заказы
//
Процедура ДокументПродажиЗаполнитьЗонуДоставки(ОбъектДок)
	
	//(( sk_231228
	Если ПоколениеКонфигурации("<УТ_11.5") Тогда
		Возврат;
	КонецЕсли;
	//)) sk_231228
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ОбъектДок.ЗонаДоставки)Тогда
		Если ОбъектДок.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
			Или ОбъектДок.СпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки
			Или ОбъектДок.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуСоСклада
			Или ОбъектДок.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуНаСклад
			Или ОбъектДок.СпособДоставки = Перечисления.СпособыДоставки.ПоручениеЭкспедиторуВПункте 
			Или ОбъектДок.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиентаКурьером Тогда
			//@skip-check wrong-string-literal-content
			ОбъектДок.ЗонаДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДок.Партнер, "ЗонаДоставки"); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ЗагрузкаДанных
#КонецОбласти

// Возвращает структуру данных трека
//
Функция ПолучитьСтруктуруДанныхТрека()
	
	СтррДанные = Новый Структура;
	СтррДанные.Вставить("Версия", 1);
	СтррДанные.Вставить("ВремяНачала", 		'00010101');
	СтррДанные.Вставить("ВремяОкончания", 	'00010101');
	
	ТипДата	 = Новый ОписаниеТипов("Дата");
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	ТЗТрек = Новый ТаблицаЗначений;
	ТЗТрек.Колонки.Добавить("Время", 			ТипДата);
	ТЗТрек.Колонки.Добавить("Широта", 			ТипЧисло);
	ТЗТрек.Колонки.Добавить("Долгота", 			ТипЧисло);
	ТЗТрек.Колонки.Добавить("Скорость",			ТипЧисло);
	ТЗТрек.Колонки.Добавить("ИсточникСигнала",  ТипЧисло);
	
	СтррДанные.Вставить("Трек", ТЗТрек);		
	
	Возврат СтррДанные; 	
	
КонецФункции


#Область АдресаДоставки

Функция АдресаДоставкиЗагрузитьТЗ() Экспорт
	
	Если ГКэшАдресаДоставки = Неопределено Тогда
		ГКэшАдресаДоставки = Новый Структура("ТЗн,Изменено", ПрочитатьЗначениеНастройки("АдресаДоставки"), Ложь);
	КонецЕсли; 
	
	ТЗн = ГКэшАдресаДоставки.ТЗн;
	Если ТЗн = Неопределено Тогда
		ОТИдентификатор = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36));	
		ТЗн = Новый ТаблицаЗначений;
		ТЗн.Колонки.Добавить("Идентификатор", ОТИдентификатор); // идентификатор типа "Строка", чтобы ТЗ можно было использовать в запросе
		ТЗн.Колонки.Добавить("Партнер", 		Новый ОписаниеТипов("СправочникСсылка.Партнеры")); 
		ТЗн.Колонки.Добавить("КодАдреса",  	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36+3))); // в строке хранится GUID партнера (36 символов) + номер адреса доставки (3 символа)
		ТЗн.Колонки.Добавить("Адрес", 		Новый ОписаниеТипов("Строка"));
	КонецЕсли; 
	
	Возврат ТЗн;
	
КонецФункции

Процедура АдресаДоставкиСохранитьТЗ(ТЗн) Экспорт
	
	СохранитьЗначениеНастройки("АдресаДоставки", ТЗн);
	
КонецПроцедуры

// Процедура проверяет - сохранялась ли ТЗ адресов доставки в старом формате, если да, 
// то пересохраняет ТЗ в новом формате, а старую ТЗ удаляет.
// Процедура требуется только для конфигурации "УТ_GR"
Процедура АдресаДоставкиКонвертировать()
	
	ТЗСтарая = ПрочитатьЗначениеНастройки("Ид_ТТ");
	Если ТЗСтарая = Неопределено Тогда
		Возврат; // старая ТЗ не обнаружена
	КонецЕсли; 
	
	// структура старой ТЗ:
	//	тзАдресаДоставкиТТ = Новый ТаблицаЗначений;
	//	тзАдресаДоставкиТТ.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка"));
	//	тзАдресаДоставкиТТ.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	//	тзАдресаДоставкиТТ.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	//	тзАдресаДоставкиТТ.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	// структура новой ТЗ:
	//	ТЗн.Колонки.Добавить("Идентификатор",стрОписаниеТипаИдентификатор); // идентификатор типа "Строка", чтобы ТЗ можно было использовать в запросе
	//	ТЗн.Колонки.Добавить("Ссылка", 		Новый ОписаниеТипов("СправочникСсылка.Партнеры")); 
	//	ТЗн.Колонки.Добавить("КодАдреса",  	Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36+3))); // в строке хранится GUID партнера (36 символов) + номер адреса доставки (3 символа)
	//	ТЗн.Колонки.Добавить("Адрес", 		Новый ОписаниеТипов("Строка"));
	
	ТЗНовая = АдресаДоставкиЗагрузитьТЗ();
	ТЗНовая.Очистить();
	
	Для каждого стзСтарая Из ТЗСтарая Цикл
		СтрокаТ = ТЗНовая.Добавить();
		СтрокаТ.Идентификатор = ВРег(стзСтарая.Ид);
		СтрокаТ.Партнер		  = стзСтарая.Контрагент;
		СтрокаТ.Адрес  		  = стзСтарая.Адрес;
		СтрокаТ.КодАдреса  	  = ЗначениеВСтрокуДляXML(СтрокаТ.Партнер) + Прав("000" + Строка(стзСтарая.НомерСтроки), 3);
	КонецЦикла; 
	
	АдресаДоставкиСохранитьТЗ(ТЗНовая);
	ОповеститьОСобытии("Сконвертирована таблица адресов доставки из старого формата (2.0.0.50) в новый.");
	УдалитьЗначениеНастройки("Ид_ТТ"); 	// уничтожаем старую ТЗ адресов доставки
	СохранитьЗначениеНастройки("Ид_ТТ_Old", ТЗСтарая); // на всякий случай сохраняем старую версию таблицы в под другим именем настройки

КонецПроцедуры

Функция АдресаДоставкиДанныеДляВыгрузки(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Если ГКонфигурация <> "УТ_АКФ" Тогда
		// похожий запрос применяется в функции АдресаДоставкиПолучитьПоПартнеру()
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартнерыКонтактнаяИнформация.Представление КАК Адрес,
		               |	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
		               |	ПартнерыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки
		               |ИЗ
		               |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Партнеры КАК ВТ_Партнеры
		               |		ПО (ВТ_Партнеры.Ссылка = ПартнерыКонтактнаяИнформация.Ссылка)
		               |ГДЕ
		               |	ПартнерыКонтактнаяИнформация.Вид = &Вид";
		
		Запрос.УстановитьПараметр("Вид", ВидКИАдресДоставки);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТорговыеТочки.Партнер КАК Партнер,
		               |	ТорговыеТочки.Адрес КАК Адрес,
		               |	ТорговыеТочки.Код КАК НомерСтроки,
		               |	ТорговыеТочки.Ссылка КАК Ссылка,
					   |	ЕСТЬNULL(ТорговыеТочки.АгентПлюсШиротаПартнер, 0) КАК Широта,
					   |	ЕСТЬNULL(ТорговыеТочки.АгентПлюсДолготаПартнер, 0) КАК Долгота	
		               |ИЗ
		               |	ВТ_Партнеры КАК ВТ_Партнеры
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТорговыеТочки КАК ТорговыеТочки
		               |		ПО ВТ_Партнеры.Ссылка = ТорговыеТочки.Партнер.Ссылка
					   |
					   |ГДЕ
		               |	ТорговыеТочки.НеИспользовать = ЛОЖЬ
		               |	И ТорговыеТочки.ПометкаУдаления = ЛОЖЬ";	
	Конецесли;
			
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция возвращает список адресов доставки по переданному партнеру.
// Если в таблице адресов доставки не найден адрес, но он есть в БД 1С, 
// то таблица адресов обновляется и записывается в хранилище значений.
// Параметры:
// 	  ТЗн - ТаблицаЗначений - таблица авдресов доставки
// 	  Партнер - СправочникСсылка.Партнеры 
// Возвращаемое значение:
//   СписокЗначений Из Строка
Функция АдресаДоставкиПолучитьПоПартнеру(ТЗн, Партнер) Экспорт
	
	СЗРезультат = Новый СписокЗначений;
	
	Если ТЗн = Неопределено Тогда
		ТЗн = АдресаДоставкиЗагрузитьТЗ();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Если НЕ ГКонфигурация = "УТ_АКФ" Тогда
		// похожий запрос применяется в функции АдресаДоставкиДанныеДляВыгрузки()
		Запрос.Текст = "ВЫБРАТЬ
		               |	ПартнерыКонтактнаяИнформация.Представление КАК Адрес,
		               |	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
		               |	ПартнерыКонтактнаяИнформация.НомерСтроки КАК НомерСтроки
		               |ИЗ
		               |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
		               |ГДЕ
		               |	ПартнерыКонтактнаяИнформация.Вид = &Вид
		               |	И ПартнерыКонтактнаяИнформация.Ссылка = &Партнер";
			
		Запрос.УстановитьПараметр("Вид", ПрочитатьЗначениеНастройки("ВидКИАдресДоставки"));
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТорговыеТочки.Адрес КАК Адрес,
		               |	ТорговыеТочки.Ссылка КАК Ссылка,
		               |	ТорговыеТочки.Код КАК НомерСтроки
		               |ИЗ
		               |	Справочник.ТорговыеТочки КАК ТорговыеТочки
		               |ГДЕ
		               |	ТорговыеТочки.Партнер = &Партнер
					   |	И ТорговыеТочки.НеИспользовать = ЛОЖЬ
		               |	И ТорговыеТочки.ПометкаУдаления = ЛОЖЬ";
	Конецесли;
	
	Запрос.УстановитьПараметр("Партнер", Партнер);

	РезультатЗапроса = Запрос.Выполнить();
	
	БылиИзменения = Ложь;
	
	ИдПартнера = ЗначениеВСтрокуДляXML(Партнер);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ГКонфигурация = "УТ_АКФ" Тогда
			КодАдреса = Строка(Выборка.Ссылка.УникальныйИдентификатор()) + "000";
		Иначе
			КодАдреса = ИдПартнера + Прав("000" + Строка(Выборка.НомерСтроки), 3);
		КонецЕсли;
		
		СтрокаТ = ТЗн.Найти(КодАдреса, "КодАдреса");
		Если СтрокаТ = Неопределено Тогда
			СтрокаТ = ТЗн.Добавить();
			Если ГКонфигурация = "УТ_АКФ" Тогда
				СтрокаТ.Идентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());
			Иначе
				СтрокаТ.Идентификатор = Строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			СтрокаТ.Партнер		= Партнер;
			СтрокаТ.Адрес  		= Выборка.Адрес;
			СтрокаТ.КодАдреса  	= КодАдреса;
			БылиИзменения = Истина;
		ИначеЕсли СтрокаТ.Адрес <> Выборка.Адрес Тогда
			СтрокаТ.Адрес  		= Выборка.Адрес;
			БылиИзменения = Истина;
		КонецЕсли; 
		
		СЗРезультат.Добавить(СтрокаТ.Идентификатор, Выборка.Адрес);
		
	КонецЦикла;
	
	Если БылиИзменения Тогда
		АдресаДоставкиСохранитьТЗ(ТЗн);
	КонецЕсли; 
	
	Возврат СЗРезультат;
	
КонецФункции

//@skip-check module-unused-method
Процедура ВыгрузитьАдресаДоставки(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки", Истина, "Вид КИ: " + ВидКИАдресДоставки); // в МТ этот справочник называется "ТорговыеТочки"
	
	ТЗАдресаДоставки = АдресаДоставкиЗагрузитьТЗ();
	ФлБылиИзменения = Ложь;  
	ФлИспользоватьПерсональныеЦены = ВыгружатьПерсональныеЦены(); // sk_220331 MOD-2289 
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A02,A07,A011"); // sk_220331 MOD-2289 СтррПоля = Новый Структура("GUID,Name,A02,A07");
	
	Если ГКонфигурация = "УТ_АКФ" Тогда
		СтррПоля.Вставить("A09");  // Долгота	
		СтррПоля.Вставить("A010"); // Широта
		
		СтррОбъект = ПолучитьОбъектИзХранилища("СпрСТТ", ВыбНастройкиАгента.СсылкаСписокТТ);
		Если Не СтррОбъект = Неопределено Тогда
			//@skip-check unknown-method-property
			СтатусТТПотенциальная = Справочники.СтатусыТТ.НайтиПоНаименованию("Потенциальная");
			ТЗАдресаДоставкиСписокТТ = СтррОбъект.Состав;
			Для Каждого СТЗСтрокаТЧ Из ТЗАдресаДоставкиСписокТТ Цикл
				Партнер   	 	 = СТЗСтрокаТЧ.Партнер;
				СтрКодАдреса 	 = НРег(СТЗСтрокаТЧ.ИдАдресаДоставки) + "000";
				СТЗАдресДоставки = ТЗАдресаДоставки.Найти(СтрКодАдреса, "КодАдреса");
				Если СТЗАдресДоставки = Неопределено Тогда
					СТЗАдресДоставки = ТЗАдресаДоставки.Добавить();
					СТЗАдресДоставки.Идентификатор = Строка(СТЗСтрокаТЧ.АКФ_СпрТТ.УникальныйИдентификатор());
					СТЗАдресДоставки.Партнер	   = Партнер;
					СТЗАдресДоставки.Адрес  	   = СТЗСтрокаТЧ.Адрес;
					СТЗАдресДоставки.КодАдреса     = СтрКодАдреса;
					ФлБылиИзменения				   = Истина;
				КонецЕсли;
				
				СтррПоля.GUID = ВРег(СТЗСтрокаТЧ.ИдАдресаДоставки);
				СтррПоля.Name = СТЗСтрокаТЧ.Адрес;
				СтррПоля.A02  = Партнер;
				СтррПоля.A07  = ""; 				   														    // Комментарий
				СтррПоля.A09  = КоординатаКонвертироватьИз1СВМТ(СТЗСтрокаТЧ.АКФ_СпрТТ.АгентПлюсДолготаПартнер); // Долгота
				СтррПоля.A010 = КоординатаКонвертироватьИз1СВМТ(СТЗСтрокаТЧ.АКФ_СпрТТ.АгентПлюсШиротаПартнер);  // Широта
				Если  СТЗСтрокаТЧ.АКФ_СпрТТ.Статус = СтатусТТПотенциальная Тогда
					СтррПоля.A07 = СТЗСтрокаТЧ.АКФ_СпрТТ.Наименование;
				КонецЕсли;   
				СтррПоля.A011 = ФлИспользоватьПерсональныеЦены; // sk_220331 MOD-2289
				ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
			КонецЦикла;
		КонецЕсли;
	Иначе
		РезультатЗапроса = АдресаДоставкиДанныеДляВыгрузки(МенеджерВТ);
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Партнер   		 = Выборка.Партнер;
			СтрКодАдреса 	 = ЗначениеВСтрокуДляXML(Партнер) + Прав("000" + Строка(Выборка.НомерСтроки), 3);
			СТЗАдресДоставки = ТЗАдресаДоставки.Найти(СтрКодАдреса, "КодАдреса");
			Если СТЗАдресДоставки = Неопределено Тогда
				СТЗАдресДоставки = ТЗАдресаДоставки.Добавить();
				СТЗАдресДоставки.Идентификатор = Строка(Новый УникальныйИдентификатор());
				СТЗАдресДоставки.Партнер	   = Партнер;
				СТЗАдресДоставки.Адрес  	   = Выборка.Адрес;
				СТЗАдресДоставки.КодАдреса     = СтрКодАдреса;
				ФлБылиИзменения = Истина;
			ИначеЕсли СТЗАдресДоставки.Адрес <> Выборка.Адрес Тогда
				СТЗАдресДоставки.Адрес  	   = Выборка.Адрес;	
				ФлБылиИзменения = Истина;
			КонецЕсли;
			
			СтррПоля.GUID = ВРег(СТЗАдресДоставки.Идентификатор);
			СтррПоля.Name = Выборка.Адрес;
			СтррПоля.A02  = Партнер;
			СтррПоля.A07  = ""; // Комментарий
			СтррПоля.A011 = ФлИспользоватьПерсональныеЦены; // sk_220331 MOD-2289
			ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
		КонецЦикла;
	
	КонецЕсли;
	
	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
	Если ФлБылиИзменения Тогда
		АдресаДоставкиСохранитьТЗ(ТЗАдресаДоставки);
	КонецЕсли; 
	
КонецПроцедуры

//Возвращает массив торговых точек из Справочник.ТорговыеТочки у которых назначены ТорговыйПредставители (МАгенты)
//	и исключить точки перечисленные в массиве МСостав 
//
// Параметры:
//  МАгенты	 - Массив Из СправочникСсылка.Пользователи - Массив агентов
//  МСостав	 - Массив Из СправочникСсылка - Массив торговых точек (тип Справочник.ТорговыеТочки)
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка - Массив Ссылок Справочник.ТорговыеТочки
//
Функция АКФ_ПодобратьТорговыеТочкиПоАгентам(МАгенты, МСостав) Экспорт
	
	//Таблица значений которую нужно добавить в Состав
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	                |ПОМЕСТИТЬ ВТ_ТорговыеПредставители
	                |ИЗ
	                |	Справочник.Пользователи КАК Пользователи
	                |ГДЕ
	                |	Пользователи.Ссылка В(&мПользователи)
	                |	И НЕ Пользователи.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	                |
	                |ИНДЕКСИРОВАТЬ ПО
	                |	ФизическоеЛицо
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ТорговыеТочки.Ссылка КАК СсылкаСпрТТ
	                |ИЗ
	                |	Справочник.ТорговыеТочки КАК ТорговыеТочки
	                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТорговыеПредставители КАК ВТ_ТорговыеПредставители
	                |		ПО ТорговыеТочки.ТорговыйПредставитель = ВТ_ТорговыеПредставители.ФизическоеЛицо
	                |ГДЕ
	                |	НЕ ТорговыеТочки.Ссылка В (&мСостав)
	                |	И ТорговыеТочки.ПометкаУдаления = ЛОЖЬ
					|	И ТорговыеТочки.НеИспользовать = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("мПользователи",  МАгенты);
	Запрос.УстановитьПараметр("мСостав"       , МСостав);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Возврат Выборка.ВыгрузитьКолонку("СсылкаСпрТТ");
	
КонецФункции

Процедура АКФ_ДобавитьТорговыеТочкиВСпискиНаСервере(МИзменения, ПодразделениеОтборПоПодразделению = Неопределено) Экспорт
			
	//1. Создадим ТЗ связи СписокТорговыхТочек - Назначеные Агенты (агентов для ТТ может быть несколько, колонка СсылкаСписокТТ не уникальна)
	ТЗСписокТТиАгентов = Новый ТаблицаЗначений;
	ТЗСписокТТиАгентов.Колонки.Добавить("СсылкаСписокТТ",  Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТЗСписокТТиАгентов.Колонки.Добавить("спрПользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	//2. Получим данные настроек агентов из хранилища
	ВосстановитьЗначенияНастроекОбработки("СпискиТорговыхТочек");
	ВосстановитьЗначенияНастроекОбработки("НастройкиАгентов");
	
	//3. Заполним тзСписокТТиАгентов из НастройкиАгентов
	Для Каждого Элемент Из НастройкиАгентов Цикл 
		стзТТ = ТЗСписокТТиАгентов.Добавить();
		стзТТ.СсылкаСписокТТ  = Элемент.СсылкаСписокТТ;
		стзТТ.спрПользователь = Элемент.Пользователь;
	КонецЦикла;
	
	//4. Определяем временные массивы для обработки данных
	МСостав        = Новый Массив; // Массив торговых точек (тип Справочник.ТорговыеТочки) которые уже входят в список торговых точек
	МСоставНовые   = Новый Массив; // Массив торговых точек (тип Справочник.ТорговыеТочки) которые требуется добавить в список торговых точек
	МАгенты        = Новый Массив; // Массив агентов (тип Справочник.Пользователи) котрым назначен список торговых точек
	СтррОтбор      = Новый Структура("СсылкаСписокТТ"); // Структура для поиска значений в тзСписокТТиАгентов
	
	//5. Заполняем состав списков
	Для Каждого ЭлементСписка Из СпискиТорговыхТочек Цикл	
		МСостав.Очистить();
		МСоставНовые.Очистить();
		МАгенты.Очистить();
		
		СтррОбъектСписокТТ = ПолучитьОбъектИзХранилища("СпрСТТ", ЭлементСписка.ID);
		ТЗСостав = СтррОбъектСписокТТ.Состав; // Текущая ТЗ Состав для списка ЭлементСписока

		// 5.1 Определяем Агентов назначеной текущему списку торговых точек ЭлементСписока
		СтррОтбор.СсылкаСписокТТ = ЭлементСписка.ID;
		мСтрокиТЗ = ТЗСписокТТиАгентов.НайтиСтроки(СтррОтбор);
		Для Каждого ЭлементМассиваСтрокиТЗ Из мСтрокиТЗ Цикл
			//Если отбор происходит по Подразделению то не добовляем в мАгенты агентов не вошедших в это подразделение
			//@skip-check reading-attribute-from-database
			Если ПодразделениеОтборПоПодразделению = Неопределено Тогда 
				МАгенты.Добавить(ЭлементМассиваСтрокиТЗ.спрПользователь);
			ИначеЕсли ПодразделениеОтборПоПодразделению = ЭлементМассиваСтрокиТЗ.спрПользователь.Подразделение Тогда 
				МАгенты.Добавить(ЭлементМассиваСтрокиТЗ.спрПользователь);
			КонецЕсли;			
		КонецЦикла;   		
		
		//5.4 Удаляем из текущей тзСостав те торговые точки котрые больше не удовлетворяют условию из Справочник.ТорговыеТочки.ТорговыйПредставитель
		КоличествоСоставУдаленные = 0;
		АКФ_УдалитьТорговыеТочкиНеПривязанныеКАгентам(ТЗСостав, МАгенты, КоличествоСоставУдаленные);
		
		// 5.2 Определяем текущий Состав списка торговой точки (мСостав)
		Для Каждого ЭлементCостава Из ТЗСостав Цикл      
			МСостав.Добавить(ЭлементCостава.АКФ_СпрТТ);
		КонецЦикла;
		
		// 5.4 Определяем торговые точки из Справочники.ТорговыеТочки, которые требуется добавить в текущий список торговых точек.
		//@skip-check query-in-loop
		МСоставНовые = АКФ_ПодобратьТорговыеТочкиПоАгентам(МАгенты, МСостав);
		
		//5.5 Возврат если изменений в списке нет.
		КоличествоСоставНовые = МСоставНовые.Количество();
		
		//5.6 Формирование массива сообщений р изменениях
		Если КоличествоСоставНовые > 0 Тогда 
			МИзменения.Добавить("Для списка торговых точек: " + ЭлементСписка.Наименование + " добавлено: " + КоличествоСоставНовые + " торговых точек.");
		КонецЕсли;
		Если КоличествоСоставУдаленные > 0 Тогда 
			МИзменения.Добавить("Для списка торговых точек: " + ЭлементСписка.Наименование + " удалено: " + КоличествоСоставУдаленные + " торговых точек.") ;	
		КонецЕсли;
		
		// 5.7 Заполняем и добавляем мСоставНовые в состав списка торговых точек в текущую тзСостав.
		Для Каждого ЭлементНовые Из МСоставНовые Цикл
			СТЗСостав = ТЗСостав.Добавить();
			СТЗСостав.Партнер              = ЭлементНовые.Партнер;
			СТЗСостав.ИдАдресаДоставки     = Строка(ЭлементНовые.УникальныйИдентификатор()) + "000";
			СТЗСостав.АКФ_СпрТТ            = ЭлементНовые;
			СТЗСостав.Адрес                = ЭлементНовые.Адрес; 
			СТЗСостав.ПредставлениеПлана   = "";
			СТЗСостав.ПредставлениеГрафика = ""; 
		КонецЦикла;		
		
		//5.8 Сохраняем Состав в хранилище значений
		СтррОбъектСписокТТ.Состав = ТЗСостав;
		Если СтррОбъектСписокТТ.Детализация.Количество() > 0 Тогда
			АКФ_ОбновитьДанныеПоМаршрутам(СтррОбъектСписокТТ);
		КонецЕсли;
		СохранитьОбъектВХранилище("СпрСТТ", ЭлементСписка.ID, СтррОбъектСписокТТ);
		
		//5.9 Записываем в сам список новое колличество торговых точек.
		ЭлементСписка.ВсегоТочек = ТЗСостав.Количество();
	
	КонецЦикла;
	
	//6. Сохраняем списки в хранилище
	Если МИзменения.Количество() > 0 тогда
		//!!!СохранитьОбъектВХранилище();
		СохранитьЗначениеНастройки("СпискиТорговыхТочек", СпискиТорговыхТочек);
	Иначе
		МИзменения.Добавить("Обновление списка торговых точек не требуется.");
	КонецЕсли;	
	
КонецПроцедуры

// Обновляет данные по маршрутам
// 
// Параметры:
//	СтррОбъектСписокТТ - Структура - объект список ТТ
//
Процедура АКФ_ОбновитьДанныеПоМаршрутам(СтррОбъектСписокТТ)
	
	ТЗПП = СтррОбъектСписокТТ.ПланПосещений;
	ТЗПП.Очистить();
	ТЗСостав = СтррОбъектСписокТТ.Состав;
	МДниПлана  = Новый Массив;
	МДниНедели = СтрРазделить_(НСтр("ru='пн,вт,ср,чт,пт,СБ,ВС'"), ",");
	Для Каждого СТЗСтрокаТЧ из ТЗСостав Цикл
		СтрокаХМ = СокрЛП(СТЗСтрокаТЧ.АКФ_СпрТТ.ДниПосещенийСистемный);
		УказаноПосещений = Цел(СтрДлина(СокрЛП(СтрокаХМ)) / 2);
		Партнер  = СТЗСтрокаТЧ.Партнер;
		ИдАдресаДоставки = СТЗСтрокаТЧ.ИдАдресаДоставки;  // Идентификатор адреса доставки
		МДниПлана.Очистить();
		Для Эл = 1 По УказаноПосещений Цикл
			День = (Число(Сред(СтрокаХМ,(Эл * 2 - 1), 1)) - 1) * 7 + Число(Сред(СтрокаХМ,(Эл * 2), 1));
			Если День > 0 Тогда
				стзСтрока = ТЗПП.Добавить();
				стзСтрока.Партнер      	   = Партнер;
				стзСтрока.ИдАдресаДоставки = ИдАдресаДоставки;
				стзСтрока.День 			   = День;
				стзСтрока.Порядок		   = 9999;
				МДниПлана.Добавить(День);
			КонецЕсли;
		EndDo;
		СТЗСтрокаТЧ.ПредставлениеПлана = АКФ_ПредставлениеПлана(МДниПлана,4, МДниНедели);
	КонецЦикла;
	СтррОбъектСписокТТ.ДатаНачала		  = Дата(2020, 03, 02, 0, 0 ,0);
	СтррОбъектСписокТТ.ПериодГрафикаПлана = 28;
	СтррОбъектСписокТТ.ПланПосещений 	  = ТЗПП;
	СтррОбъектСписокТТ.Состав	    	  = ТЗСостав;
	
КонецПроцедуры

Процедура АКФ_УдалитьТорговыеТочкиНеПривязанныеКАгентам(ТЗСостав, МАгенты , КоличествоУдаленныхЭлементов)
	
	Если ТЗСостав.Количество() = 0 Или МАгенты.Количество() = 0 Тогда
		Возврат;
	Конецесли;
	
	ФлОставитьЭлемент = Ложь; //Признак удалять торговую точку из мСостав , или нет.	
	Счетчик = 0;
	
	Пока Счетчик < ТЗСостав.Количество() Цикл
					
		СтрокаТаблицы     = ТЗСостав.Получить(Счетчик);
		ФлОставитьЭлемент = Ложь;
				
		Для Каждого ЭлементАгент Из МАгенты Цикл   
			Если ЭлементАгент.ФизическоеЛицо = СтрокаТаблицы.АКФ_СпрТТ.ТорговыйПредставитель И Не СтрокаТаблицы.АКФ_СпрТТ.НеИспользовать И Не СтрокаТаблицы.АКФ_СпрТТ.ПометкаУдаления Тогда
				ФлОставитьЭлемент = Истина;	
			КонецЕсли;
		КонецЦикла;
		
		//Удаление строки
		Если НЕ ФлОставитьЭлемент Тогда
			ТЗСостав.Удалить(СтрокаТаблицы);						
			КоличествоУдаленныхЭлементов = КоличествоУдаленныхЭлементов + 1;
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;		
		
	КонецЦикла;
		
КонецПроцедуры

// Выполняет заполнение координат пользовальского справочника для АКФ
// 
// Параметры:
//	ТекстXML - ЧтениеXML - объект ЧтениеXML
// 
Функция АКФ_ЗаполнитьКоординатыПоАдресуДоставки(ТекстXML)
	
	Если Не ГКонфигурация = "УТ_АКФ"  Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрГуидАдреса = ТекстXML.ПолучитьАтрибут("GUID"); // Идентификатор
	СтрДолгота 	  = ТекстXML.ПолучитьАтрибут("A09");  // Долгота
	СтрШирота	  = ТекстXML.ПолучитьАтрибут("A010"); // Широта
	
	ТЗАдресаДоставки = АдресаДоставкиЗагрузитьТЗ();
	СТЗАдресДоставки = ТЗАдресаДоставки.Найти(НРег(СтрГуидАдреса), "Идентификатор");
	
	Если СТЗАдресДоставки <> Неопределено Тогда
		ТекОбъектСсылка = Справочники.ТорговыеТочки.ПолучитьСсылку(Новый УникальныйИдентификатор(Лев(СТЗАдресДоставки.КодАдреса, 36)));
		ОбъектСпр = ТекОбъектСсылка.ПолучитьОбъект();
		
		Если ОбъектСпр <> Неопределено Тогда  
			ОбъектСпр.АгентПлюсДолготаПартнер = СтрДолгота;
			ОбъектСпр.АгентПлюсШиротаПартнер  = СтрШирота;
			Результат = ЗаписьСправочника(ОбъектСпр, Ложь);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает представления плана 
// 
// Параметры:
//	МДниПлана - Массив Из Число  - дни плана
//	ВсегоНедель - Число - число недель
//	МДниНедели - Массив Из Строка - названия дней недели
//
// Возвращаемое значение:
//	Строка - представление плана
// 
Функция АКФ_ПредставлениеПлана(МДниПлана, ВсегоНедель, МДниНедели)
	
	Если МДниПлана.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекНеделя 					  = Неопределено;
	ФлВсеНеделиОдинаковы		  = Истина;
	ПредыдущееПредставлениеНедели = Неопределено;
	ВыбраноНедель				  = 0;
	
	СтрРабочиеДни = "";	
	РабочихДней   = 0; 
	СтрВыходные   = ""; 
	Выходных 	  = 0;
	
	МДниПлана.Добавить(-100); // маркер последнего дня, чтобы завершить цикл, но не повторять алгоритм получения представления недели после цикла
	
	СтрРезультат = "";
	
	Для Каждого День Из МДниПлана Цикл
		
		Неделя = Цел((День - 1) / 7); // недели нумеруются с 0
		ДеньНедели_1 = (День - 1 ) % 7;
		
		Если ТекНеделя <> Неделя Тогда
			
			Если ТекНеделя <> Неопределено Тогда
				Если РабочихДней = 5 Тогда
					ПредставлениеНедели = ?(Выходных = 2, НСтр("ru='все дни'"),	НСтр("ru='по будням'") + ?(Выходных = 0, "", ", " + СтрВыходные));
				Иначе
					ПредставлениеНедели = СтрРабочиеДни + СтрВыходные;
				КонецЕсли;
				Если Прав(ПредставлениеНедели, 2) = ", " Тогда
					ПредставлениеНедели = Лев(ПредставлениеНедели, СтрДлина(ПредставлениеНедели) - 2);
				КонецЕсли;
				Если ФлВсеНеделиОдинаковы И ТекНеделя > 0 Тогда
					ФлВсеНеделиОдинаковы = (ПредыдущееПредставлениеНедели = ПредставлениеНедели);
				КонецЕсли; 
				Если ПредставлениеНедели <> "" Тогда
					СтрРезультат = СтрРезультат + ?(СтрРезультат = "", "", "; ") + Строка(ТекНеделя+1) + ": " + ПредставлениеНедели;		
				КонецЕсли; 
				ПредыдущееПредставлениеНедели = ПредставлениеНедели;
				ВыбраноНедель = ВыбраноНедель + 1; 
			КонецЕсли; 
			
			Если День = -100 Тогда
				Прервать;
			КонецЕсли; 
			
			ТекНеделя 	  = Неделя;				
			СтрРабочиеДни = "";	
			РабочихДней   = 0; 
			СтрВыходные   = ""; 
			Выходных 	  = 0;
			
		КонецЕсли; 
		
		Если ДеньНедели_1 < 5 Тогда // 0-4 - пн-пт
			СтрРабочиеДни = СтрРабочиеДни + МДниНедели[ДеньНедели_1] + ", ";
			РабочихДней   = РабочихДней + 1;
		Иначе
			СтрВыходные   = СтрВыходные + МДниНедели[ДеньНедели_1] + ", ";
			Выходных 	  = Выходных + 1;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если ФлВсеНеделиОдинаковы И ВыбраноНедель = ВсегоНедель Тогда
		СтрРезультат = ПредставлениеНедели;
	КонецЕсли; 
	
	Возврат СтрРезультат;
	
КонецФункции

// АдресаДоставки
#КонецОбласти


#Область УТАП_KT2000_Alcohol_Trade

Процедура ВыгрузитьПунктыРазгрузки_УТАП(ДокОбмена, МенеджерВТ)
	
	МенеджерВТПунктыРазгрузки(МенеджерВТ);
	РезультатЗапроса = МенеджерВТ.Таблицы.Найти("ВТ_ПунктыРазгрузки").ПолучитьДанные();
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.ТорговыеТочки"); // в МТ этот справочник называется "ТорговыеТочки"
	
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,Name,A02,A07,A011"); // sk_220331 MOD-2289 СтррПоля = Новый Структура("GUID,Name,A02,A07");
	ДополнительнаяИнформация = "";
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаПуктРазгрузки = Выборка.Ссылка;
		ВыборкаКлиент		 = Выборка.Клиент;
		
		ДополнительнаяИнформация = "";
		Если ВыборкаПуктРазгрузки.КодОКАТО <> "" Тогда 
			ДополнительнаяИнформация = ДополнительнаяИнформация + "КодОКАТО: " + ВыборкаПуктРазгрузки.КодОКАТО + "/";
		КонецЕсли;
		Если Выборка.Ссылка.КПП <> "" Тогда 
			ДополнительнаяИнформация = ДополнительнаяИнформация + "КПП: " + ВыборкаПуктРазгрузки.КПП;
		КонецЕсли;
		
		СтррПоля.GUID 	= ВыборкаПуктРазгрузки.УникальныйИдентификатор();
		СтррПоля.Name 	= ВыборкаПуктРазгрузки.Наименование;
		СтррПоля.A02	= ВыборкаКлиент; 
		СтррПоля.A07	= ДополнительнаяИнформация;
		СтррПоля.A011	= Выборка.ИспользоватьПерсональныеЦены; // sk_220331 MOD-2289
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Процедура МенеджерВТПунктыРазгрузки(МенеджерВТ)
	
	Если МенеджерВТ.Таблицы.Найти("ВТ_ПунктыРазгрузки") <> Неопределено Тогда 	
		Возврат;
	КонецЕсли;

	МенеджерВТКонтрагенты(МенеджерВТ);
	
	Если НЕ ИспользоватьКонтрагентов Тогда
		МенеджерВТПартнеров(МенеджерВТ);	
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаМенеджерВТПунктыРазгрузки_УТАП());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;    
	Запрос.УстановитьПараметр("ИспользоватьПерсональныеЦены", ВыгружатьПерсональныеЦены());
	Запрос.Выполнить();
		
КонецПроцедуры

Функция ТекстЗапросаМенеджерВТПунктыРазгрузки_УТАП()
	
	Если  ИспользоватьКонтрагентов Тогда 
		
		//Выгрузка контрагентов. Если ИспользоватьКонтрагентов = Истина, тогда выгружаются контрагентов в справочник МТ контрагенты.
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	алкПунктыРазгрузки.Ссылка КАК Ссылка,
			|	алкПунктыРазгрузки.Владелец КАК Клиент,
			|	&ИспользоватьПерсональныеЦены КАК ИспользоватьПерсональныеЦены 
			|ПОМЕСТИТЬ ВТ_ПунктыРазгрузки
			|ИЗ
			|	ВТ_Контрагенты КАК ВТ_Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
			|		ПО ВТ_Контрагенты.Ссылка = алкПунктыРазгрузки.Владелец
			|ГДЕ
			|	НЕ алкПунктыРазгрузки.ПометкаУдаления
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка";
	Иначе
		
		//Выгрузка партнеров. Если ИспользоватьКонтрагентов = Ложь, тогда выгружаются Партнеров в справочник МТ контрагенты.
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	алкПунктыРазгрузки.Ссылка КАК Ссылка,
		|	ВТ_Партнеры.Ссылка КАК Клиент,
		|	&ИспользоватьПерсональныеЦены КАК ИспользоватьПерсональныеЦены
		|ПОМЕСТИТЬ ВТ_ПунктыРазгрузки
		|ИЗ
		|	ВТ_Партнеры КАК ВТ_Партнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК спрКонтрагенты
		|		ПО ВТ_Партнеры.Ссылка = спрКонтрагенты.Партнер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
		|		ПО (спрКонтрагенты.Ссылка = ВТ_Контрагенты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
		|		ПО (ВТ_Контрагенты.Ссылка = алкПунктыРазгрузки.Владелец)
		|ГДЕ
		|	НЕ алкПунктыРазгрузки.ПометкаУдаления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ВыгрузитьКонтактнуюИнформацию_УТ_АП(ДокОбмена, МенеджерВТ)
	
	ЗаписатьНачалоВеткиОбъекта(ДокОбмена, "Справочник.КонтактнаяИнформация");

	СтвТипыКИ = ТипыКонтактнойИнформации();
	//@skip-check structure-consructor-too-many-keys
	СтррПоля = Новый Структура("GUID,A01,A02,A04,A05,A06");
	
	РезультатЗапроса = ДанныеПоКонтактамПунктовРазгрузокИКонтрагентов_УТАП(МенеджерВТ);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтррПоля.GUID = Новый УникальныйИдентификатор();
		СтррПоля.A01 = Выборка.Контрагент;
		СтррПоля.A02 = Выборка.ПунктРазгрузки;
		СтррПоля.A04 = СтвТипыКИ[Выборка.Тип];
		СтррПоля.A05 = Выборка.Вид;
		СтррПоля.A06 = Выборка.Представление;
		ЗаписатьЭлементВДокументОбмена(ДокОбмена, СтррПоля);
	КонецЦикла;

	ЗаписатьОкончаниеВеткиОбъекта(ДокОбмена);
	
КонецПроцедуры

Функция ДанныеПоКонтактамПунктовРазгрузокИКонтрагентов_УТАП(МенеджерВТ)
	
	Текстзапроса =
	"ВЫБРАТЬ
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Ссылка КАК ПунктРазгрузки,
	|	NULL КАК Контрагент,
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Тип,
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Вид,
	|	алкПунктыРазгрузкиКонтактнаяИнформация.Представление
	|ПОМЕСТИТЬ КИПартнеров
	|ИЗ
	|	Справочник.алкПунктыРазгрузки КАК алкПунктыРазгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ПО алкПунктыРазгрузки.Владелец = ВТ_Контрагенты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.алкПунктыРазгрузки.КонтактнаяИнформация КАК алкПунктыРазгрузкиКонтактнаяИнформация
	|		ПО алкПунктыРазгрузки.Ссылка = алкПунктыРазгрузкиКонтактнаяИнформация.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL,
	|	КонтрагентыКонтактнаяИнформация.Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Тип,
	|	КонтрагентыКонтактнаяИнформация.Вид,
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ПО КонтрагентыКонтактнаяИнформация.Ссылка = ВТ_Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КИПартнеров.ПунктРазгрузки, """") КАК ПунктРазгрузки,
	|	ЕСТЬNULL(КИПартнеров.Контрагент, """") КАК Контрагент,
	|	КИПартнеров.Тип,
	|	КИПартнеров.Вид,
	|	КИПартнеров.Представление
	|ИЗ
	|	КИПартнеров КАК КИПартнеров";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	Возврат Запрос.Выполнить();

КонецФункции

// УТАП_KT2000_Alcohol_Trade
#КонецОбласти

#Область ДополнительныеОтчетыДляМУ

// Функция - Формирует отчет для МУ в табличном документе
//
// Параметры:
//  ТабличныйДокументРезультат	 - ТабличныйДокумент - Объект Табличный документ, в него записывается результат.
//  СтррОбъект					 - Структура		 - Объект ВО
// 
// Возвращаемое значение:
//  Строка - Описанте ошибки, если произошла ошибка выполнения.
//
Функция ВывестиОтчет(ТабличныйДокументРезультат, СтррОбъект) Экспорт

	ТабличныйДокументРезультат.Очистить();

	СЗПараметры = ДопОтчетПолучитьПараметры(СтррОбъект.ПараметрыОтчета);
	
	Если СтррОбъект.ТипОтчета = 0 Тогда
		ПроцессорКомпоновкиДанных = ДопОтчетПолучениеДанныхСКД(СЗПараметры, СтррОбъект);
		Если ТипЗнч(ПроцессорКомпоновкиДанных) = Тип("ПроцессорКомпоновкиДанных") Тогда
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(ТабличныйДокументРезультат);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		Иначе
			Возврат ПроцессорКомпоновкиДанных; //Текст ошибким
		КонецЕсли;

	ИначеЕсли СтррОбъект.ТипОтчета = 1 Тогда
		ПостроительОтчета = ДопОтчетПолучениеДанныхЗапрос(СЗПараметры, СтррОбъект.ОтчетЗапросТекстЗапроса);	
		Если ТипЗнч(ПостроительОтчета) = Тип("ПостроительОтчета") Тогда
			ПостроительОтчета.Вывести(ТабличныйДокументРезультат);
		Иначе
			Возврат ПостроительОтчета; //Текст ошибким
		КонецЕсли;	
		
	ИначеЕсли СтррОбъект.ТипОтчета = 2 Тогда	
		Возврат ДопОтчетПолучениеДанныхПрограмма(СЗПараметры, СтррОбъект.ОчетПрограммаТекстПрограммы, ТабличныйДокументРезультат);	
		
	Иначе	
		Возврат НСтр("ru = 'Некорректно задан тип отчета'");
		
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция ДопОтчетПолучитьПараметры(ТЗПараметрыОтчета)
	
	СЗПараметры = Новый СписокЗначений;
	
	Для Каждого СТЗПараметрыОтчета Из ТЗПараметрыОтчета Цикл
		
		Если ПустаяСтрока(СТЗПараметрыОтчета.ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		//Значение		
		Если СТЗПараметрыОтчета.Выражение Тогда
			Попытка
				УстановитьБезопасныйРежим(Истина); // gi_240224 - добавлено по требованию EDT
				Значение = Вычислить(СТЗПараметрыОтчета.ЗначениеПараметра);
			Исключение
				Продолжить;
			КонецПопытки;
		Иначе
			Значение = СТЗПараметрыОтчета.ЗначениеПараметра;
		КонецЕсли;
		
		СЗПараметры.Добавить(Значение, СТЗПараметрыОтчета.ИмяПараметра, СТЗПараметрыОтчета.Использовать);
		
	КонецЦикла;	
	
	Возврат СЗПараметры;
КонецФункции

Функция ДопОтчетПолучениеДанныхСКД(СЗПараметры, СтррОбъект)

	//0. Параметры
	ОтчетСКДМакет			= СтррОбъект.ОтчетСКДМакет;
	ОтчетСКДВариантОтчета	= СтррОбъект.ОтчетСКДВариантОтчета;
	ВыводитьПараметры    	= СтррОбъект.ВыводитьПараметры;
	ВыводитьОтбор        	= СтррОбъект.ВыводитьОтбор;
	
	//1. Проверка
	Если Не ТипЗнч(ОтчетСКДМакет) = Тип("Строка") ИЛИ ПустаяСтрока(ОтчетСКДМакет) Тогда
		Возврат НСтр("ru = 'Некорректно задан макет схемы компоновки данных'");	    
	Конецесли;
	                                                   
	//2. Макет схемы компоновки данных
	Попытка
		УстановитьБезопасныйРежим(Истина); // gi_240224 - добавлено по требованию EDT
		СхемаКомпоновкиДанных = Вычислить(ОтчетСКДМакет); //Выполнить("СхемаКомпоновкиДанных = " + стрМакет);
	Исключение
		Возврат НСтр("ru = 'Ошибка получения макета СКД. Описание:'") + " " + ОписаниеОшибки();     
	КонецПопытки;
	
	//3. ВариантыНастроек 
	ВариантыНастроек = Неопределено;
	Если ЗначениеЗаполнено(ОтчетСКДВариантОтчета) И ТипЗнч(ОтчетСКДВариантОтчета) = Тип("Строка") Тогда
		ВариантыНастроек = СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ОтчетСКДВариантОтчета);	
	КонецЕсли;	
	Если ВариантыНастроек = Неопределено Тогда
		ВариантыНастроек = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Иначе 
		ВариантыНастроек = ВариантыНастроек.Настройки;
	КонецЕсли;
	
	
	//3. КомпоновщикНастроек
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(ВариантыНастроек);	
	
	//4. Установка параметров                                              
	Для Каждого Элемент Из СЗПараметры Цикл
		ПараметрОтчета = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Элемент.Представление));
		Если ПараметрОтчета <> Неопределено Тогда
			ПараметрОтчета.Использование = Элемент.Пометка;
			ПараметрОтчета.Значение 	 = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
	//5. Вывод значений параметров
	ПараметрВыводитьПараметры = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьПараметрыДанных"));
	ПараметрВыводитьПараметры.Использование = Истина;
	ПараметрВыводитьПараметры.Значение = ?(ВыводитьПараметры, ТипВыводаТекстаКомпоновкиДанных.Выводить, ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	//6. Вывод значений отбора
	ПараметрВыводитьОтбор = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьОтбор"));
	ПараметрВыводитьОтбор.Использование = Истина;
	ПараметрВыводитьОтбор.Значение = ?(ВыводитьОтбор, ТипВыводаТекстаКомпоновкиДанных.Выводить, ТипВыводаТекстаКомпоновкиДанных.НеВыводить);;

	//7. КомпоновщикМакетаКомпоновкиДанных 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Настройки = КомпоновщикНастроек.Настройки;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);

	//8. ПроцессорКомпоновкиДанных
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,,Истина);
	
	Возврат ПроцессорКомпоновкиДанных;	
КонецФункции

Функция ДопОтчетПолучениеДанныхЗапрос(СЗПараметры, ТекстЗапроса)
	
	Запрос = Новый Запрос(ТекстЗапроса);

	Для Каждого Элемент Из СЗПараметры Цикл
		Если Элемент.Пометка Тогда
			//@skip-check empty-except-statement
			Попытка
				Запрос.УстановитьПараметр(Элемент.Представление, Элемент.Значение);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		РезЗапроса = Запрос.Выполнить();	
	Исключение
		Возврат НСтр("ru = 'Ошибка выполнения запроса. Ошибка:'") + ОписаниеОшибки();		
	КонецПопытки;
	
	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезЗапроса);       
	
	Возврат ПостроительОтчета;
КонецФункции

Функция ДопОтчетПолучениеДанныхПрограмма(СЗПараметры, ТекстПрограммы, ТабличныйДокументРезультат)
	
	Попытка
		УстановитьБезопасныйРежим(Истина); // gi_240224 - добавлено по требованию EDT	
		Выполнить(ТекстПрограммы);
	Исключение
		Возврат НСтр("ru = 'Ошибка выполнения кода. Ошибка:'") + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Неопределено;
КонецФункции

Функция ДопОтчетТипыПараметров() Экспорт
	
	ТЗТипыПараметров = Новый ТаблицаЗначений;
	ТЗТипыПараметров.Колонки.Добавить("Идентификатор", 	Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТЗТипыПараметров.Колонки.Добавить("Представление", 	Новый ОписаниеТипов("Строка"));
	ТЗТипыПараметров.Колонки.Добавить("ЗначениеУС",		Неопределено);
	ТЗТипыПараметров.Колонки.Добавить("ЗначениеМТ",    	Новый ОписаниеТипов("Строка"));
	
	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= ДопОтчетИдентификаторТипаПараметраНеВыгружать();
	СТЗТипыПараметров.Представление	= "Не выгружать";
	СТЗТипыПараметров.ЗначениеУС	= Неопределено;
	СТЗТипыПараметров.ЗначениеМТ	= "";

	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= Новый УникальныйИдентификатор("f5d00ce7-4aee-49c8-9d88-6fc6a2ffbf17");
	СТЗТипыПараметров.Представление	= "Булево";
	СТЗТипыПараметров.ЗначениеУС	= Тип("Булево");
	СТЗТипыПараметров.ЗначениеМТ	= "Булево";
	
	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= Новый УникальныйИдентификатор("05e73b81-0353-4938-85b8-37107158eb19");
	СТЗТипыПараметров.Представление	= "Число";
	СТЗТипыПараметров.ЗначениеУС	= Тип("Число");
	СТЗТипыПараметров.ЗначениеМТ	= "Число";
	
	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= Новый УникальныйИдентификатор("0753caa1-1eda-400c-a1b0-c4afea3e5dbc");
	СТЗТипыПараметров.Представление	= "Строка";
	СТЗТипыПараметров.ЗначениеУС	= Тип("Строка");
	СТЗТипыПараметров.ЗначениеМТ	= "Строка";
	
	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= Новый УникальныйИдентификатор("9fd15620-174f-41e4-a5e8-6e7b437d0a4f");
	СТЗТипыПараметров.Представление	= "Дата";
	СТЗТипыПараметров.ЗначениеУС	= Тип("Дата");
	СТЗТипыПараметров.ЗначениеМТ	= "Дата";
		 
	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= Новый УникальныйИдентификатор("977e6e5b-713b-435e-b714-9a4d1c555dff");
	СТЗТипыПараметров.Представление	= "Справочник ""Организации""";
	СТЗТипыПараметров.ЗначениеУС	= Тип("СправочникСсылка.Организации");
	СТЗТипыПараметров.ЗначениеМТ	= "СправочникСсылка.Организации";
	
	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= Новый УникальныйИдентификатор("41ba363d-5822-4b51-8306-c42b7c286c5e");
	СТЗТипыПараметров.Представление	= "Справочник ""Партнеры""";
	СТЗТипыПараметров.ЗначениеУС	= Тип("СправочникСсылка.Партнеры");
	СТЗТипыПараметров.ЗначениеМТ	= ?(РежимВыгрузкиРекомендуемый, "СправочникСсылка.ТорговыеТочки", "СправочникСсылка.Контрагенты");
	
	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= Новый УникальныйИдентификатор("2e15cfda-0d12-4c14-a699-7d8371f78684");
	СТЗТипыПараметров.Представление	= "Справочник ""Соглашения""";
	СТЗТипыПараметров.ЗначениеУС	= Тип("СправочникСсылка.СоглашенияСКлиентами");
	СТЗТипыПараметров.ЗначениеМТ	= "СправочникСсылка.Договоры";
	
	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= Новый УникальныйИдентификатор("619dcb8a-2950-4ebe-b8ef-2c53bdc2665b");
	СТЗТипыПараметров.Представление	= "Справочник ""Номенклатура""";
	СТЗТипыПараметров.ЗначениеУС	= Тип("СправочникСсылка.Номенклатура");
	СТЗТипыПараметров.ЗначениеМТ	= "СправочникСсылка.Номенклатура";
	
	СТЗТипыПараметров = ТЗТипыПараметров.Добавить();
	СТЗТипыПараметров.Идентификатор	= Новый УникальныйИдентификатор("8f12d71b-207d-40b4-a2fd-c39ae3f8c3da");
	СТЗТипыПараметров.Представление	= "Справочник ""Вид цены""";
	СТЗТипыПараметров.ЗначениеУС	= Тип("СправочникСсылка.ВидыЦен");
	СТЗТипыПараметров.ЗначениеМТ	= "СправочникСсылка.ТипыЦен";
	
	Возврат ТЗТипыПараметров;	
КонецФункции
 
Функция ДопОтчетТипыПараметровУС()
	
	ТЗТипыПараметров = ДопОтчетТипыПараметров();
	
	СтвТипыПараметров = Новый Соответствие;
	Для Каждого стзТипыПараметров Из ТЗТипыПараметров Цикл
		СтвТипыПараметров.Вставить(стзТипыПараметров.Идентификатор, стзТипыПараметров.ЗначениеУС); 	
	КонецЦикла;	
	
	Возврат СтвТипыПараметров;
КонецФункции

Функция ДопОтчетТипыПараметровМТ()
	
	ТЗТипыПараметров = ДопОтчетТипыПараметров();
	
	СтвТипыПараметров = Новый Соответствие;
	Для Каждого стзТипыПараметров Из ТЗТипыПараметров Цикл
		СтвТипыПараметров.Вставить(стзТипыПараметров.Идентификатор, стзТипыПараметров.ЗначениеМТ); 	
	КонецЦикла;	
	
	Возврат СтвТипыПараметров;
КонецФункции

Функция ДопОтчетИдентификаторТипаПараметраНеВыгружать()
	
	Возврат Новый УникальныйИдентификатор("92c80152-8a09-48ad-995d-d561d103de4c");
	
КонецФункции

Функция ДопОтчетПолучитьЗначение(ИмяМТ, ЗначениеМТ, ТипПараметраУС)
	
	//Простые типы
	Если ТипПараметраУС = Неопределено Тогда
		Возврат Неопределено; // Ошибка, параметр не должен выгружаться в МТ
		
	ИначеЕсли ТипПараметраУС = Тип("Булево") Тогда
		Попытка
			Возврат Булево(ЗначениеМТ);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипПараметраУС = Тип("Дата") Тогда
		Попытка
			Если ИмяМТ = "ДатаНач" Или ИмяМТ = "НачалоПериода" Тогда
				Возврат НачалоДня(Дата(ЗначениеМТ));
			ИначеЕсли ИмяМТ = "ДатаКон" Или ИмяМТ = "КонецПериода" Тогда
			 	Возврат КонецДня(Дата(ЗначениеМТ));
			Иначе
				Возврат Дата(ЗначениеМТ);
			КонецЕсли;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипПараметраУС = Тип("Строка") Тогда
		Попытка
			Возврат Строка(ЗначениеМТ);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипПараметраУС = Тип("Число") Тогда
		Попытка
			Возврат Число(ЗначениеМТ);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
		
	//Ссылки Получение идентификатора ссылки
	Попытка
		ИдентификаторСсылки = Новый УникальныйИдентификатор(ЗначениеМТ);	
	Исключение		
		Попытка
			Возврат Новый (ТипПараметраУС); //Пустая ссылка типа.
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;
	
	// Получение Ссылки
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипПараметраУС);
	Если МетаданныеТипа = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка	
		МенеджерТипа = Справочники[МетаданныеТипа.Имя];
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
	
	СсылкаСправочника = МенеджерТипа.ПолучитьСсылку(ИдентификаторСсылки);
	
	Возврат СсылкаСправочника;
КонецФункции

Функция ДопОтчетИмяФайла(GUID)
	
	Возврат ВРЕГ(Строка(GUID));
	
КонецФункции

// ДополнительныеОтчетыДляМУ
#КонецОбласти


#Область ФотоОтчет

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Признак отказа от создания формы.
//      См. описание одноименного параметра "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//      См. описание одноименного параметра "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// См. также:
//   Процедура для вывода добавленных команд в форму: ОтчетыСервер.ВывестиКоманду().
//   Глобальный обработчик этого события: ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
// Пример добавления команды:
//    Команда = Форма.Команды.Добавить("<ИмяКоманды>");
//    Команда.Действие  = "Подключаемый_Команда";
//    Команда.Заголовок = НСтр("ru = '<Представление команды...>'");
//    ОтчетыСервер.ВывестиКоманду(Форма, Команда, "<ВидГруппы>");
// Обработчик команды пишется в процедуре ОтчетыКлиентПереопределяемый.ОбработчикКоманды.
//
Процедура ОтчетПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	МассивРеквизитов = Новый Массив;
	//Само дерево
	НовыйРеквизитФормы = Новый РеквизитФормы("СоставОтчета", Новый ОписаниеТипов("ДеревоЗначений"));
	МассивРеквизитов.Добавить(НовыйРеквизитФормы);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Партнеры"));
	
	ТипРеквизита = Новый ОписаниеТипов(МассивТипов);

	МассивРеквизитов.Добавить(Новый РеквизитФормы("Данные", ТипРеквизита, "СоставОтчета"));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ТипРеквизита = Новый ОписаниеТипов(МассивТипов);

	МассивРеквизитов.Добавить(Новый РеквизитФормы("ID", ТипРеквизита, "СоставОтчета"));
	
	МассивТипов = Новый Массив;	
	МассивТипов.Добавить(Тип("Число"));	
	ТипРеквизита = Новый ОписаниеТипов(МассивТипов);
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КартинкаСтрок", ТипРеквизита, "СоставОтчета"));
	
	//Колонки
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	ОсновнаяГруппа = Форма.Элементы.Добавить("ОсновнаяГруппа" , Тип("ГруппаФормы"));
	ОсновнаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ОсновнаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	
	НовыйЭлементФормы = Форма.Элементы.Добавить("СоставОтчета" , Тип("ТаблицаФормы"), ОсновнаяГруппа);
	НовыйЭлементФормы.ПутьКДанным = "СоставОтчета";
	НовыйЭлементФормы.Отображение = ОтображениеТаблицы.Дерево;
	НовыйЭлементФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	//@skip-check module-attachable-event-handler-name
	НовыйЭлементФормы.УстановитьДействие("Выбор", "СоставОтчетаВыбор");
	НовыйЭлементФормы.ТолькоПросмотр = Истина;
	
	Если Форма.Параметры.Свойство("ПользовательскиеНастройкиДляУстановки") Тогда
		
		НовыйЭлементФормы.Видимость = Ложь;
		
	КонецЕсли;
	
	НоваяКолонка = Форма.Элементы.Добавить("Данные", Тип("ПолеФормы"), НовыйЭлементФормы);
    НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода;
    НоваяКолонка.ПутьКДанным = "СоставОтчета.Данные";
	НоваяКолонка.Заголовок = "Группировка";
	
	Форма.Элементы.Переместить(Форма.Элементы.ОтчетТабличныйДокумент, ОсновнаяГруппа);
	
	Форма.ПостоянныеРеквизиты.Добавить("СоставОтчета");
	
КонецПроцедуры

// ФотоОтчет
#КонецОбласти

// СлужебныеПроцедурыИФункции
#КонецОбласти

#КонецЕсли
