&НаКлиенте
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив) Экспорт
	
	Объект.ДокументСсылка = ОбъектыНазначенияМассив[0];
		
	Действие11 = Новый ОписаниеОповещения("НачатьЗаполнениеИзФайла", ЭтотОбъект);
	
	ОткрытьФорму("ВнешняяОбработка.ЗагрузкаЦенИзФайлаExcel.Форма.ФормаНастройкиЗагрузкиИзФайлаExcel", , ЭтаФорма, "_ФормаНастройкиЗагрузкиЦенИзФайлаExcel_",,, Действие11,);
	
КонецПроцедуры	

&НаКлиенте
Процедура НачатьЗаполнениеИзФайла(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Действие22 = Новый ОписаниеОповещения("НачатьЗаполнениеИзФайла_Продолжение"	, Этотобъект, РезультатЗакрытия);
	Действие11 = Новый ОписаниеОповещения("ПроверитьРасширениеФайла"			, ЭтотОбъект, РезультатЗакрытия);
	
	НачатьПомещениеФайла(Действие22, , , Истина, ЭтаФорма.УникальныйИдентификатор, Действие11);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРасширениеФайла(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт

	Расширение = ВРЕГ(ПомещаемыйФайл.Расширение);
	
	ДополнительныеПараметры.Вставить("РасширениеФайла", ПомещаемыйФайл.Расширение);
	
	Если НЕ (СтрНайти(Расширение, "XLSX") ИЛИ
		СтрНайти(Расширение, "XLS") ) Тогда
	
		ОтказОтПомещенияФайла=Истина;
		Сообщить("ОШИБКА! Выбран некорректный файл! Для обработки необходимо выбрать файл с расширением XLS, XLSX!");
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеИзФайла_Продолжение(Знач Успешно, Знач Адрес, Знач ВыбранноеИмяФайла, Знач ДополнительныеПараметры) Экспорт
	
	Если Не Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресХранилищаДанных = Адрес;
	
	Результат = ЗагрузитьДанныеИзФайлаНаСервере(ДополнительныеПараметры);
	
	Если Результат = Истина Тогда
	
		ИнициализироватьНоменклатуруНаСервере(ДополнительныеПараметры);
		//
		ЗаполнитьДокументНаСервере();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузитьДанныеИзФайлаНаСервере(ДопПараметры)
	//
	ПутьКФайлуПоставщика = ПолучитьИмяВременногоФайла(ДопПараметры.РасширениеФайла);
	
	ПолучитьИзВременногоХранилища(Объект.АдресХранилищаДанных).Записать(ПутьКФайлуПоставщика);
	
	XLSОбъект = Новый COMОбъект("Excel.Application");
    XLSОбъект.Visible       = Ложь;
    XLSОбъект.DisplayAlerts = Ложь;
	
	Попытка
		
        newConnection = XLSОбъект.Workbooks.Open(ПутьКФайлуПоставщика, , Истина);
		
	Исключение
		
		Сообщить("ОШИБКА загрузки данных из EXCEL-файла (Excel.Application)" + СИМВОЛЫ.ПС + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		
		Возврат Ложь;
		
    КонецПопытки;
	
    xlSheet = newConnection.Sheets(МАКС(1,ДопПараметры.НомерЛистаКниги));
	
	НомерСтрокиНачалоДанных = МАКС(1, ДопПараметры.НомерСтрокиНачалоДанных);
	
	ВсегоЗаписей	= xlSheet.Cells(1, 1).SpecialCells(11).Row;
	
	Для RowCount = НомерСтрокиНачалоДанных По ВсегоЗаписей Цикл
		
		Состояние("Загрузка из файла ", RowCount / ВсегоЗаписей * 100, ""+RowCount + " из " + ВсегоЗаписей);
		
		ЗначениеИдентификации	= xlSheet.Cells(RowCount, ДопПараметры.Колонка_Идентификатора).Text;
		Цена			= xlSheet.Cells(RowCount, ДопПараметры.Колонка_Цена).Value;
		//
		Если ПустаяСтрока(ЗначениеИдентификации) 
				ИЛИ НЕ ЗначениеЗаполнено(Цена) 
			Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		нс1 = Объект.СоответствиеНоменклатуры.Добавить();
		нс1.ЗначениеИдентификации = СОКРЛП(ЗначениеИдентификации);
		нс1.Цена		= Цена;
		
	КонецЦикла;
		
	XLSОбъект.Application.Quit();
	XLSОбъект=Неопределено;

	УдалитьФайлы(ПутьКФайлуПоставщика);
	
	Возврат ИСТИНА;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьНоменклатуруНаСервере(ДополнительныеПараметры)

	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ИсходныеДанные", Объект.СоответствиеНоменклатуры.Выгрузить());
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ИсходныеДанные.Артикул КАК Артикул,
	//	|	ИсходныеДанные.Наименование КАК Наименование,
	//	|	ИсходныеДанные.НомерСтроки КАК НомерСтроки
	//	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	//	|ИЗ
	//	|	&ИсходныеДанные КАК ИсходныеДанные
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ИсходныеДанные.Артикул КАК Артикул
	//	|ПОМЕСТИТЬ ВТ_Артикулы
	//	|ИЗ
	//	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ВТ_ИсходныеДанные.Артикул
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Артикул
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ИсходныеДанные.Наименование КАК Наименование
	//	|ПОМЕСТИТЬ ВТ_Наименования
	//	|ИЗ
	//	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ВТ_ИсходныеДанные.Наименование
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Наименование
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_Наименования.Наименование КАК Наименование,
	//	|	МАКСИМУМ(Номенклатура.Ссылка) КАК Номенклатура
	//	|ПОМЕСТИТЬ ВТ_Номенклатура
	//	|ИЗ
	//	|	ВТ_Наименования КАК ВТ_Наименования
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	//	|		ПО ВТ_Наименования.Наименование = Номенклатура.Наименование
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ВТ_Наименования.Наименование
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	Наименование
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_ИсходныеДанные.Артикул КАК Артикул,
	//	|	ВТ_ИсходныеДанные.НомерСтроки КАК НомерСтроки,
	//	|	ВТ_Номенклатура.Номенклатура КАК Номенклатура,
	//	|	ВТ_Номенклатура.Номенклатура.ЕдиницаИзмерения КАК Упаковка
	//	|ИЗ
	//	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Номенклатура КАК ВТ_Номенклатура
	//	|		ПО ВТ_ИсходныеДанные.Наименование = ВТ_Номенклатура.Наименование";
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Выборка1 = РезультатЗапроса.Выбрать();
	//
	//Пока Выборка1.Следующий() Цикл
	//	//
	//	ЗаписьТЧ = Объект.СоответствиеНоменклатуры[Выборка1.НомерСтроки-1];
	//	ЗаписьТЧ.Номенклатура	= Выборка1.Номенклатура;
	//	ЗаписьТЧ.Упаковка		= Выборка1.Упаковка;
	//	
	//КонецЦикла;
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаУстановкиЦен.НомерСтроки КАК НомерСтроки,
		|	ТаблицаУстановкиЦен.ЗначениеИдентификации КАК ЗначениеИдентификации,
		|	ТаблицаУстановкиЦен.Цена КАК Цена
		|ПОМЕСТИТЬ ВТ_ТаблицаУстановкиЦен
		|ИЗ
		|	&ТаблицаУстановкиЦен КАК ТаблицаУстановкиЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаУстановкиЦен.ЗначениеИдентификации КАК ЗначениеИдентификации,
		|	ВТ_ТаблицаУстановкиЦен.Цена КАК Цена,
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	Номенклатура.ЕдиницаИзмерения КАК Упаковка
		|ИЗ
		|	ВТ_ТаблицаУстановкиЦен КАК ВТ_ТаблицаУстановкиЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО ВТ_ТаблицаУстановкиЦен.ЗначениеИдентификации = Номенклатура.Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаУстановкиЦен.НомерСтроки";
	
	Если ДополнительныеПараметры.ВидИдентификации = "Наименование" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ЗначениеИдентификации = Номенклатура.Код", ".ЗначениеИдентификации = Номенклатура.Наименование");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаУстановкиЦен", Объект.СоответствиеНоменклатуры.Выгрузить());
	Объект.СоответствиеНоменклатуры.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаСервере()

	докОбъект = Объект.ДокументСсылка.ПолучитьОбъект();
	
	Объект.ВидЦены = докОбъект.ВидыЦен[0].ВидЦены;
	
	докОбъект.Товары.Очистить();
	
	Для каждого ЗаписьТЧ Из Объект.СоответствиеНоменклатуры Цикл
		
		Если ЗначениеЗаполнено(ЗаписьТЧ.Номенклатура) Тогда
				
			нс1 = докОбъект.Товары.Добавить();
			нс1.ВидЦены		= Объект.ВидЦены;
			нс1.Номенклатура= ЗаписьТЧ.Номенклатура;
			нс1.Упаковка	= ЗаписьТЧ.Упаковка;
			нс1.Цена		= ЗаписьТЧ.Цена;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Товар: "+ЗаписьТЧ.Номенклатура + " цена: " + ЗаписьТЧ.Цена + " вид цены: " + Объект.ВидЦены);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найдена номенклатура с значением поиска: " + ЗаписьТЧ.ЗначениеИдентификации);
		КонецЕсли;
	КонецЦикла;
	
	докОбъект.Записать(РежимЗаписиДокумента.Запись);

КонецПроцедуры
