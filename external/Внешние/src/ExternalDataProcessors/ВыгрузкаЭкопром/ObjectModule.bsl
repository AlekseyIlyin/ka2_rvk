#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

//@skip-warning
Перем мСтруктураКэшДанных;

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

#Область ДополнительныеОтчетыИОбработки

Функция ЗаголовокФормы() Экспорт

	СведенияОВнешнейОбработке = СведенияОВнешнейОбработке();
	Результат = "v." + СведенияОВнешнейОбработке.Версия + " " + СведенияОВнешнейОбработке.Наименование;

	Возврат Результат;

КонецФункции


// Сведения о внешней обработке.
// 
// Возвращаемое значение:
//  Структура
Функция СведенияОВнешнейОбработке() Экспорт

	Версии = Версии();
	МетаОбъект = МетаОбъект();

	Результат = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(Версии.БСП);
	Результат.Информация = МетаОбъект.Синоним;
	Результат.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	Результат.Версия = Версии.Обработка;
	Результат.БезопасныйРежим = Ложь;
	Результат.Наименование = МетаОбъект.Синоним;

	Команда = Результат.Команды.Добавить();
	Команда.Представление = "Сформировать, отправить данные (Задание)";
	Команда.Идентификатор = "СформироватьОтправитьДанныеЗадание";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Ложь;

	Команда = Результат.Команды.Добавить();
	Команда.Представление = "Открыть форму подготовки / отправки";
	Команда.Идентификатор = "ОткрытьФормуПодготовитьОтправитьДанные";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.ПоказыватьОповещение = Истина;

	Возврат Результат;
	
КонецФункции

Функция МетаОбъект() Экспорт
	Ключ = "МетаОбъект";
	
	Если НЕ мСтруктураКэшДанных.Свойство(Ключ) Тогда
		мСтруктураКэшДанных.Вставить(Ключ, Метаданные());
	КонецЕсли;

	Возврат мСтруктураКэшДанных[Ключ];
КонецФункции

Процедура ЗагрузитьНастройки() Экспорт
	//@skip-check undefined-variable
	рвк_ДополнительныеОтчетыИОбработки.ЗагрузитьНастройки(ЭтотОбъект);
	
	Если Не НастройкиЗагружены Тогда
		ИдентификационныйКодЭкопром = 6009;
		ИдентификационныйКодДистрибьютера = "2311254019";
		ГлубинаОтчетаДней = 45;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		Сутки = 86400;
		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса()) - Сутки;
		ДатаНачала = ТекущаяДата - Сутки * ГлубинаОтчетаДней;
		ДатаОкончания = КонецДня(ТекущаяДата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНастройки() Экспорт
	//@skip-check undefined-variable
	рвк_ДополнительныеОтчетыИОбработки.ЗаписатьНастройки(ЭтотОбъект);
КонецПроцедуры

Функция ИменаНастроек() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Производитель");
	Результат.Добавить("ГлубинаОтчетаДней");
	Результат.Добавить("ИдентификационныйКодЭкопром");
	Результат.Добавить("ИдентификационныйКодДистрибьютера");
	Результат.Добавить("ПутьВыгрузки");
	Результат.Добавить("ОсновнойМенеджер");
	Результат.Добавить("ИмяСвойстваНашиОрганизации");
	Результат.Добавить("ИсходящаяПапкаCisLink");
	Результат.Добавить("ВходящаяПапкаCisLink");
	Результат.Добавить("ПутьКлиентаCisLink");
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	
	Если ИдентификаторКоманды = "СформироватьОтправитьДанныеЗадание" Тогда
		Заполнить();
		АдресРезультатаЗаписи = ЗаписатьДанные();
		ПодготовитьФайлыКОтправке(АдресРезультатаЗаписи);
		ЗапуститьCISLink();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура Заполнить() Экспорт
	
	ДанныеЗаполнены = Ложь;
	Отказ = Ложь;
	
	ЗагрузитьНастройки();
	
	Заполнить_Остатки("eprest", Отказ);
	Заполнить_ДетализациюДвиженияТовара("epsales", Отказ);
	Заполнить_СправочникФилиалов("epwh", Отказ);
	
	ДанныеЗаполнены = Не Отказ;
	мСтруктураКэшДанных.Очистить();
	
КонецПроцедуры

Функция ЗаписатьДанные(АдресРезультата = Неопределено) Экспорт
	
	Мета = МетаОбъект();
	ДанныеФайлов = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из Мета.ТабличныеЧасти Цикл
		ИмяТаблицы = ТабличнаяЧасть.Имя;
		ДанныеФайла = ДанныеФайлаПоТаблице(ИмяТаблицы);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеФайлов, АдресРезультата);
	
КонецФункции

Процедура ПодготовитьФайлыКОтправке(АдресРезультатаВыгрузки, ВыгрузкаИзФормы = Ложь) Экспорт
	
	Если Не ВыгрузкаИзФормы Тогда
		Если Не ЗначениеЗаполнено(ИсходящаяПапкаCisLink) Тогда
			//@skip-check undefined-variable
			рвк_ЖурналРегистрацииВызовСервера.ЗаписатьОшибку(ИмяСобытияЖР(), "Не выбрана исходящая папка CISLINK", ДополнительнаяОбработкаСсылка);
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АдресРезультатаВыгрузки) Или Не ЭтоАдресВременногоХранилища(АдресРезультатаВыгрузки) Тогда
			//@skip-check undefined-variable
			рвк_ЖурналРегистрацииВызовСервера.ЗаписатьОшибку(ИмяСобытияЖР(), "Данные необходимо выгрузить перед отправкой", ДополнительнаяОбработкаСсылка);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДанныеФайлов = ПолучитьИзВременногоХранилища(АдресРезультатаВыгрузки);
	Если Не ЗначениеЗаполнено(ДанныеФайлов) Тогда
		//@skip-check undefined-variable
		рвк_ЖурналРегистрацииВызовСервера.ЗаписатьОшибку(ИмяСобытияЖР(), "Данные необходимо выгрузить перед отправкой", ДополнительнаяОбработкаСсылка);
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяДанныеФайла Из ДанныеФайлов Цикл
		ПолноеИмяФайла = СтрШаблон("%1\%2", ИсходящаяПапкаCisLink, ИмяДанныеФайла.ИмяФайла);
		ИмяДанныеФайла.ДанныеФайла.Записать(ПолноеИмяФайла);
	КонецЦикла;
	//@skip-check undefined-variable
	рвк_ЖурналРегистрацииВызовСервера.ЗаписатьИнформацию(ИмяСобытияЖР(), "Файлы успешно подготовлены к выгрузке", ДополнительнаяОбработкаСсылка);
	
КонецПроцедуры

Процедура ЗапуститьCISLink(ВыгрузкаИзФормы = Ложь) Экспорт
	
	Если Не ВыгрузкаИзФормы И Не ЗначениеЗаполнено(ПутьКлиентаCisLink) Тогда
		//@skip-check undefined-variable
		рвк_ЖурналРегистрацииВызовСервера.ЗаписатьОшибку(ИмяСобытияЖР(), "Не выбран клиент CISLINK", ДополнительнаяОбработкаСсылка);
		Возврат;
	КонецЕсли;
	
	КодВозврата = Неопределено;
	Попытка
		ЗапуститьПриложение(СтрШаблон("%1 console", ПутьКлиентаCisLink),, Истина, КодВозврата);
		ТекстСообщения = СтрШаблон("Клиент CISLink успешно выполнен, код возврата: %1", КодВозврата);
		Если ВыгрузкаИзФормы Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Иначе
			//@skip-check undefined-variable
			рвк_ЖурналРегистрацииВызовСервера.ЗаписатьИнформацию(ИмяСобытияЖР(), ТекстСообщения, ДополнительнаяОбработкаСсылка);
		КонецЕсли;
	Исключение
		ТекстСообщения = СтрШаблон("При запуске клиента CISLink возникла ошибка: %1", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		Если ВыгрузкаИзФормы Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Иначе
			//@skip-check undefined-variable
			рвк_ЖурналРегистрацииВызовСервера.ЗаписатьОшибку(ИмяСобытияЖР(), ТекстСообщения, ДополнительнаяОбработкаСсылка);
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сервис

Функция Версии()
	Результат = Новый Структура();
	Результат.Вставить("Обработка", "1.01");
	Результат.Вставить("Конфигурация", "2.5.12.195");
	Результат.Вставить("БСП", "3.1.1.136");
	Возврат Результат;
КонецФункции

Функция ИмяСобытияЖР()
	Возврат СтрШаблон("ВнешняяОбработка.%1", МетаОбъект().Имя);
КонецФункции

#Область ПодготовкаДанных

Процедура Заполнить_Остатки(ИмяТЧ, Отказ)
	
	Таблица = ЭтотОбъект[ИмяТЧ];
	Таблица.Очистить();
	
	ЭтотОбъект["epcatal"].Очистить();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПолучитьМакет("Остатки");	

    //создадим компоновщик настроек и загрузим настройки по умолчанию, вместо настроек по умолчанию можно использовать восстановленные настройки
    КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек.Настройки;
    
    //установка параметров отчета, без КомпоновщикНастроекКомпоновкиДанных делать это гораздо сложнее
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Производитель", Производитель);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаНачала", ДатаНачала);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаОкончания", ДатаОкончания);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ИдентификационныйКодЭкопром", ИдентификационныйКодЭкопром);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ИдентификационныйКодДистрибьютера", ИдентификационныйКодДистрибьютера);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КачествоНеГоден", Перечисления.ГрадацииКачества.НеГоден);
    Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПроизводственныйКалендарь", Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ"));
    
    //Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    //Очищаем поле табличного документа
    ТаблицаОстатки = Новый ТаблицаЗначений;
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
    ПроцессорВывода.УстановитьОбъект(ТаблицаОстатки);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
    
    Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
    	Если СтрокаОстатки.beg_rest = 0 Тогда
    		СтрокаОстатки.beg_amount = 0;
    	КонецЕсли;
    	Если СтрокаОстатки.end_rest = 0 Тогда
    		СтрокаОстатки.end_amount = 0;
    	КонецЕсли;
    	
    	ДополнитьСправочник(epcatal, "code", СтрокаОстатки.code, СтрокаОстатки);	
    КонецЦикла;

    Таблица.Загрузить(ТаблицаОстатки);
    
КонецПроцедуры

Процедура Заполнить_ДетализациюДвиженияТовара(ИмяТЧ, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = ЭтотОбъект[ИмяТЧ];
	Таблица.Очистить();

	ЭтотОбъект["epclient"].Очистить();
	ЭтотОбъект["epsr"].Очистить();
	
	Если Не ЗначениеЗаполнено(ИмяСвойстваНашиОрганизации) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не заполнен обязательный параметр ИмяСвойстваНашиОрганизации",,, "Объект.ИмяСвойстваНашиОрганизации", Отказ);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса_ДетализациюДвиженияТовара();
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Производитель", Производитель);
	Запрос.УстановитьПараметр("ВидКИ_ЮрАдрес", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Запрос.УстановитьПараметр("ВидКИ_ФактАдрес", Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	Запрос.УстановитьПараметр("ВидКИ_АдресПартнера", Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	Запрос.УстановитьПараметр("ИдентификационныйКодЭкопром", ИдентификационныйКодЭкопром);
	Запрос.УстановитьПараметр("ИдентификационныйКодДистрибьютера", ИдентификационныйКодДистрибьютера);
	Запрос.УстановитьПараметр("ИмяСвойстваНашиОрганизации", ИмяСвойстваНашиОрганизации);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТипыОперацийПоТипамДокументов = ТипыОперацийПоТипамДокументов(); 
	МинимальнаяСуммаДляНДС = 0.20;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипОперации = ТипыОперацийПоТипамДокументов.Получить(Выборка.ТипДокумента);
		Если ТипОперации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипОперации = 9 И Выборка.quantity > 0 Тогда
			ТипОперации = 1;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить(); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.quantity = Макс(-НоваяСтрока.quantity, НоваяСтрока.quantity);
		НоваяСтрока.amount_bp  = Макс(-НоваяСтрока.amount_bp, НоваяСтрока.amount_bp);
		НоваяСтрока.amount_cp  = Макс(-НоваяСтрока.amount_cp, НоваяСтрока.amount_cp);
		
		НоваяСтрока.oper_type = ТипОперации;
		
		Если ЭтоПродажа(ТипОперации) Тогда
			НоваяСтрока.amount_cp  = Макс(НоваяСтрока.amount_cp, МинимальнаяСуммаДляНДС);
			Сумма = НоваяСтрока.amount_cp;
		Иначе
			Сумма = НоваяСтрока.amount_bp;
		КонецЕсли;
		НоваяСтрока.vat = СуммаНДС(Сумма, Выборка.СтавкаНДС);
		
		КонтрагентПартнер = Выборка.Партнер;
		Если ЗначениеЗаполнено(КонтрагентПартнер) Тогда
			КонтрагентПартнер = Выборка.Контрагент;
		КонецЕсли;
		НоваяСтрока.clientcode = XmlСтрока(КонтрагентПартнер.УникальныйИдентификатор());
		ДополнитьСправочник(epclient, "clientcode", НоваяСтрока.clientcode, Выборка);
		
		ЗаполнитьТорговогоПредставителя(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТорговогоПредставителя(НоваяСтрока, Выборка)

	Если ЗначениеЗаполнено(Выборка.ТорговыйПредставитель) Тогда
		НоваяСтрока.tpcode = XmlСтрока(Выборка.ТорговыйПредставитель.УникальныйИдентификатор());
		ДополнитьСправочник(epsr, "tpcode", НоваяСтрока.tpcode, Выборка);
			
	Иначе
		ТорговыйПредставитель = ТорговыйПредставительПоУмолчанию();
		НоваяСтрока.tpcode = ТорговыйПредставитель.tpcode;
		ДополнитьСправочник(epsr, "tpcode", ТорговыйПредставитель.tpcode, ТорговыйПредставитель);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТорговыйПредставительПоУмолчанию()
	Ключ = "ТорговыйПредставительПоУмолчанию";
	
	Если НЕ мСтруктураКэшДанных.Свойство(Ключ) Тогда
		ТорговыйПредставитель = Новый Структура;
		ТорговыйПредставитель.Вставить("tpcode", "ТП не определен");
		ТорговыйПредставитель.Вставить("tpname", "ТП не определен");
		ТорговыйПредставитель.Вставить("tptypeid", 2);
		ТорговыйПредставитель.Вставить("manfid", ИдентификационныйКодЭкопром);
		мСтруктураКэшДанных.Вставить(Ключ, ТорговыйПредставитель);
	КонецЕсли;

	Возврат мСтруктураКэшДанных[Ключ];	
КонецФункции

Функция СуммаНДС(СуммаСНДС, СтавкаНДС)
	ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
	Возврат УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаСНДС, ТекПроцентНДС, Истина);
КонецФункции

Функция ТипыОперацийПоТипамДокументов()
	Результат = Новый Соответствие;
	
	Результат.Вставить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"), 0);
	Результат.Вставить(Тип("ДокументСсылка.РеализацияТоваровУслуг"), 0);
	Результат.Вставить(Тип("ДокументСсылка.КорректировкаРеализации"), 9);
	Результат.Вставить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"), 2);
	Результат.Вставить(Тип("ДокументСсылка.КорректировкаПриобретения"), 7);

	Возврат Результат;
КонецФункции

Функция ЭтоПродажа(ТипОперации)
	Возврат ТипОперации = 0 Или ТипОперации = 1 Или ТипОперации = 7;
КонецФункции

Процедура Заполнить_СправочникФилиалов(ИмяТЧ, Отказ)
	
	Таблица = ЭтотОбъект[ИмяТЧ];
	Таблица.Очистить();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнаяОрганизация = Справочники.Организации.НайтиПоРеквизиту("ИНН", ИдентификационныйКодДистрибьютера);
	
	ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
	ОтборКИ.Дата = ДатаНачала;
	ОтборКИ.ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(ОсновнаяОрганизация, ОтборКИ);
	
	НоваяСтрокаТаблицы = Таблица.Добавить();
	НоваяСтрокаТаблицы.whcode = ИдентификационныйКодДистрибьютера;
	НоваяСтрокаТаблицы.whname = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяОрганизация, "НаименованиеПолное");
	НоваяСтрокаТаблицы.whaddress = ?(ЗначениеЗаполнено(ТаблицаКИ), ТаблицаКИ[0].Представление, "");
	НоваяСтрокаТаблицы.manfid = ИдентификационныйКодЭкопром;

КонецПроцедуры

Процедура ДополнитьСправочник(ТаблицаСправочника, ИмяКлюча, ЗначениеКлюча, Данные)
	Если ТаблицаСправочника.Найти(ЗначениеКлюча, ИмяКлюча) = Неопределено Тогда
		НоваяСтрокаСправочника = ТаблицаСправочника.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСправочника, Данные);
		НоваяСтрокаСправочника[ИмяКлюча] = ЗначениеКлюча;
	КонецЕсли;
КонецПроцедуры

Функция ДанныеФайлаПоТаблице(ИмяТаблицы)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяФайла", СтрШаблон("%1.txt", ИмяТаблицы));
	Результат.Вставить("ДанныеФайла", ДвоичныеДанныеТаблицы_txt(ИмяТаблицы));
	
	Возврат Результат;
КонецФункции

Функция ДвоичныеДанныеТаблицы_txt(ИмяТаблицы)

	СимволРазделителя = Символы.Таб;

	Мета = МетаОбъект();
	РеквизитыТаблицы = Мета.ТабличныеЧасти[ИмяТаблицы].Реквизиты;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ФайлРезультата = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.ANSI);
	
	ЗначенияПолей = Новый Массив;
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		ЗначенияПолей.Добавить(Реквизит.Имя);
	КонецЦикла;
	ФайлРезультата.ЗаписатьСтроку(СтрСоединить(ЗначенияПолей, СимволРазделителя));
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТаблицы] Цикл
		ЗначенияПолей = Новый Массив;
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			ЗначениеПоля = ЗначениеПоля(СтрокаТаблицы[Реквизит.Имя], Реквизит.Формат);
			ЗначенияПолей.Добавить(ЗначениеПоля);
		КонецЦикла;
		ФайлРезультата.ЗаписатьСтроку(СтрСоединить(ЗначенияПолей, СимволРазделителя));
	КонецЦикла;
	ФайлРезультата.Закрыть();
	ФайлРезультата = Неопределено;
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДанныеФайла;
КонецФункции

Функция ЗначениеПоля(Знач Значение, Знач Формат)
	Результат = "";
	Если ЗначениеЗаполнено(Формат) Тогда
		Результат = Формат(Значение, Формат);
	ИначеЕсли Не ПустаяСтрока(Значение) Тогда
		Результат = СокрЛП(СтрЗаменить(Значение, Символы.Таб, ""));
		Результат = СокрЛП(СтрЗаменить(Результат, Символы.ПС, ""));
		Результат = СокрЛП(СтрЗаменить(Результат, Символы.ВК, ""));
		Результат = СокрЛП(СтрЗаменить(Результат, Символы.ВТаб, ""));
		Результат = СокрЛП(СтрЗаменить(Результат, Символы.ПФ, ""));
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТекстыЗапросов

Функция ТекстЗапроса_ДетализациюДвиженияТовара()
	Возврат "ВЫБРАТЬ
	|	КлючиАналитикиУчетаНоменклатуры.Ссылка КАК АналитикаНоменклатуры,
	|	КлючиАналитикиУчетаНоменклатуры.Номенклатура.Код КАК НоменклатураКод,
	|	ВЫБОР
	|		КОГДА КлючиАналитикиУчетаНоменклатуры.Номенклатура.ВесЧислитель = 0
	|			ТОГДА 1
	|		ИНАЧЕ КлючиАналитикиУчетаНоменклатуры.Номенклатура.ВесЧислитель * 1000
	|	КОНЕЦ КАК ВесЕдиницы
	|ПОМЕСТИТЬ ВТ_АнадитикаНоменклатуры
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитикиУчетаНоменклатуры
	|ГДЕ
	|	КлючиАналитикиУчетаНоменклатуры.Номенклатура.Производитель = &Производитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыДополнительныеРеквизиты.Ссылка КАК Партнер
	|ПОМЕСТИТЬ ВТ_НашиПартнеры
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	|ГДЕ
	|	ПартнерыДополнительныеРеквизиты.Свойство.Имя = &ИмяСвойстваНашиОрганизации
	|	И ПартнерыДополнительныеРеквизиты.Значение = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаПоПартнерам.Ссылка КАК АналитикаУчетаПоПартнерам,
	|	ВЫРАЗИТЬ(КлючиАналитикиУчетаПоПартнерам.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(КлючиАналитикиУчетаПоПартнерам.Партнер КАК Справочник.Партнеры) КАК Партнер,
	|	МАКСИМУМ(ЕСТЬNULL(КИ_Адрес_Партнер.Представление, КИ_ФактАдрес.Представление)) КАК ФактАдрес,
	|	МАКСИМУМ(ЕСТЬNULL(КИ_ЮрАдрес.Представление, """")) КАК ЮрАдрес
	|ПОМЕСТИТЬ ВТ_АналитикиУчетаПоПартнерам
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КИ_ЮрАдрес
	|		ПО КлючиАналитикиУчетаПоПартнерам.Контрагент = КИ_ЮрАдрес.Ссылка
	|		И КИ_ЮрАдрес.Вид = &ВидКИ_ЮрАдрес
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КИ_ФактАдрес
	|		ПО КлючиАналитикиУчетаПоПартнерам.Контрагент = КИ_ФактАдрес.Ссылка
	|		И КИ_ФактАдрес.Вид = &ВидКИ_ФактАдрес
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КИ_Адрес_Партнер
	|		ПО КлючиАналитикиУчетаПоПартнерам.Партнер = КИ_Адрес_Партнер.Ссылка
	|		И КИ_Адрес_Партнер.Вид = &ВидКИ_АдресПартнера
	|ГДЕ
	|	НЕ КлючиАналитикиУчетаПоПартнерам.Партнер В
	|		(ВЫБРАТЬ
	|			ВТ_НашиПартнеры.Партнер
	|		ИЗ
	|			ВТ_НашиПартнеры КАК ВТ_НашиПартнеры)
	|СГРУППИРОВАТЬ ПО
	|	КлючиАналитикиУчетаПоПартнерам.Ссылка,
	|	ВЫРАЗИТЬ(КлючиАналитикиУчетаПоПартнерам.Контрагент КАК Справочник.Контрагенты),
	|	ВЫРАЗИТЬ(КлючиАналитикиУчетаПоПартнерам.Партнер КАК Справочник.Партнеры)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АналитикиУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ВТ_АналитикиУчетаПоПартнерам.ФактАдрес) КАК ФактАдрес,
	|	МАКСИМУМ(ВТ_АналитикиУчетаПоПартнерам.ЮрАдрес) КАК ЮрАдрес,
	|	ВТ_АналитикиУчетаПоПартнерам.Партнер
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|ИЗ
	|	ВТ_АналитикиУчетаПоПартнерам КАК ВТ_АналитикиУчетаПоПартнерам
	|СГРУППИРОВАТЬ ПО
	|	ВТ_АналитикиУчетаПоПартнерам.Контрагент,
	|	ВТ_АналитикиУчетаПоПартнерам.Партнер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усОстаткиПоПартиямОбороты.Регистратор КАК Документ,
	|	ТИПЗНАЧЕНИЯ(усОстаткиПоПартиямОбороты.Регистратор) КАК ТипДокумента,
	|	ВТ_АнадитикаНоменклатуры.НоменклатураКод КАК code,
	|	СУММА(усОстаткиПоПартиямОбороты.КоличествоОборот) КАК quantity,
	|	СУММА(усОстаткиПоПартиямОбороты.СтоимостьОборот) КАК amount_bp,
	|	СУММА(усПродажиОбороты.СуммаВыручкиОборот) КАК amount_cp,
	|	усОстаткиПоПартиямОбороты.Период КАК curr_date,
	|	усОстаткиПоПартиямОбороты.Регистратор.Номер КАК doc_number,
	|	усОстаткиПоПартиямОбороты.Регистратор.Контрагент.ИНН КАК inn,
	|	усОстаткиПоПартиямОбороты.Регистратор.Контрагент.КПП КАК kpp,
	|	ВТ_Контрагенты.ЮрАдрес КАК address_ur,
	|	ВТ_Контрагенты.ФактАдрес КАК address,
	|	ВЫРАЗИТЬ(ВТ_Контрагенты.Партнер.НаименованиеПолное КАК СТРОКА(1000)) КАК clientname,
	|	1 КАК ru,
	|	усОстаткиПоПартиямОбороты.Регистратор.НомерВходящегоДокумента КАК doc_ttn,
	|	ВТ_АнадитикаНоменклатуры.ВесЕдиницы КАК weight,
	|	&ИдентификационныйКодДистрибьютера КАК whcode,
	|	&ИдентификационныйКодЭкопром КАК manfid,
	|	усПродажиОбороты.Регистратор.Партнер.ОсновнойМенеджер КАК ТорговыйПредставитель,
	|	2 КАК tptypeid,
	|	ЕСТЬNULL(усПродажиОбороты.Регистратор.Партнер.ОсновнойМенеджер.ФизическоеЛицо.ФИО,
	|		усПродажиОбороты.Регистратор.Партнер.ОсновнойМенеджер.Наименование) КАК tpname,
	|	ВТ_АнадитикаНоменклатуры.АналитикаНоменклатуры.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	ВТ_Контрагенты.Контрагент КАК Контрагент,
	|	ВТ_Контрагенты.Партнер
	|ИЗ
	|	РегистрНакопления.усОстаткиПоПартиям.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, АналитикаУчетаНоменклатуры В
	|		(ВЫБРАТЬ
	|			ВТ_АнадитикаНоменклатуры.АналитикаНоменклатуры КАК АналитикаНоменклатуры
	|		ИЗ
	|			ВТ_АнадитикаНоменклатуры КАК ВТ_АнадитикаНоменклатуры)) КАК усОстаткиПоПартиямОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АнадитикаНоменклатуры КАК ВТ_АнадитикаНоменклатуры
	|		ПО усОстаткиПоПартиямОбороты.АналитикаУчетаНоменклатуры = ВТ_АнадитикаНоменклатуры.АналитикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.усПродажи.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор,
	|			АналитикаУчетаНоменклатуры В
	|			(ВЫБРАТЬ
	|				ВТ_АнадитикаНоменклатуры.АналитикаНоменклатуры КАК АналитикаНоменклатуры
	|			ИЗ
	|				ВТ_АнадитикаНоменклатуры КАК ВТ_АнадитикаНоменклатуры)
	|		И АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				ВТ_АналитикиУчетаПоПартнерам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				ВТ_АналитикиУчетаПоПартнерам КАК ВТ_АналитикиУчетаПоПартнерам)) КАК усПродажиОбороты
	|		ПО усОстаткиПоПартиямОбороты.АналитикаУчетаНоменклатуры = усПродажиОбороты.АналитикаУчетаНоменклатуры
	|		И усОстаткиПоПартиямОбороты.Регистратор = усПродажиОбороты.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ПО усОстаткиПоПартиямОбороты.Регистратор.Контрагент = ВТ_Контрагенты.Контрагент
	|		И усОстаткиПоПартиямОбороты.Регистратор.Партнер = ВТ_Контрагенты.Партнер
	|СГРУППИРОВАТЬ ПО
	|	усОстаткиПоПартиямОбороты.Регистратор,
	|	ТИПЗНАЧЕНИЯ(усОстаткиПоПартиямОбороты.Регистратор),
	|	ВТ_АнадитикаНоменклатуры.НоменклатураКод,
	|	усОстаткиПоПартиямОбороты.Период,
	|	усОстаткиПоПартиямОбороты.Регистратор.Номер,
	|	усОстаткиПоПартиямОбороты.Регистратор.Контрагент.ИНН,
	|	усОстаткиПоПартиямОбороты.Регистратор.Контрагент.КПП,
	|	усОстаткиПоПартиямОбороты.Регистратор.НомерВходящегоДокумента,
	|	ВТ_АнадитикаНоменклатуры.ВесЕдиницы,
	|	усПродажиОбороты.Регистратор.Партнер.ОсновнойМенеджер,
	|	ЕСТЬNULL(усПродажиОбороты.Регистратор.Партнер.ОсновнойМенеджер.ФизическоеЛицо.ФИО,
	|		усПродажиОбороты.Регистратор.Партнер.ОсновнойМенеджер.Наименование),
	|	ВТ_АнадитикаНоменклатуры.АналитикаНоменклатуры.Номенклатура.СтавкаНДС,
	|	ВТ_Контрагенты.ЮрАдрес,
	|	ВТ_Контрагенты.ФактАдрес,
	|	ВТ_Контрагенты.Контрагент,
	|	ВТ_Контрагенты.Партнер,
	|	ВЫРАЗИТЬ(ВТ_Контрагенты.Партнер.НаименованиеПолное КАК СТРОКА(1000))";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

мСтруктураКэшДанных = Новый Структура;

#КонецОбласти

#КонецЕсли