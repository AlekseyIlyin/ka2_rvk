
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Версия = ОбработкаОбъект.ВерсияОбработки();
	
	Элементы.ПолеОбъектПоиска.ВысотаСпискаВыбора = 15;
	Элементы.ПолеОбъектПоиска.СписокВыбора.ТипЗначения = Новый ОписаниеТипов("Структура");
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	Если Лев(ВерсияПриложения, 4) <> "8.2." Тогда
		Элементы.ПолеОбъектПоиска.КнопкаВыпадающегоСписка  = Истина;
	Иначе
		Элементы.ПолеОбъектПоиска.КнопкаСпискаВыбора  = Истина;
	КонецЕсли;
	
	Если Метаданные.ПланыОбмена.Найти("апМобильноеПриложениеТорговыйПредставитель") <> Неопределено Тогда
		Объект.ЭтоПрофМодуль = Истина;	
	КонецЕсли;
	
	// +++
	Объект.v2ФорматВыгрузки = Истина; // пока полностью на этом формате 
	// ---

	ЗаполнитьКонтекстноеМенюНайденныеОбъекты();
	 	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораТекущегоКодаДистрибьютора()
	
	Если НастройкиПоставщиков.Количество() <>  0 Тогда
		Для Каждого Строка Из НастройкиПоставщиков Цикл
			Если Элементы.ТекущийКодДистрибьютора.СписокВыбора.НайтиПоЗначению(Строка.КодДистрибьютора) = Неопределено Тогда
				Элементы.ТекущийКодДистрибьютора.СписокВыбора.Вставить(Элементы.ТекущийКодДистрибьютора.СписокВыбора.Количество(),Строка.КодДистрибьютора,Строка.КодДистрибьютора);		
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиНаСервере()
	
	Если НастройкаВыгрузки = "Продажи" Тогда		
		КлючНастройки = "АП_УД_Выгрузка_продаж";
	ИначеЕсли НастройкаВыгрузки = "Остатки" Тогда		
		КлючНастройки = "АП_УД_Выгрузка_остатков";
	Иначе
		КлючНастройки = "АП_УД_Выгрузка_оплат";	
	КонецЕсли;
	
	ВосстановитьНастройки(КлючНастройки);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	НастройкиВыгрузкиСправочников = ОбработкаОбъект.УстановитьНастройкиВыгрузкиКонтрагентовПартнеров();
	Объект.ВыгрузкаТорговыхТочек = НастройкиВыгрузкиСправочников.ВыгрузкаТорговыхТочек;
	Объект.ВыгрузкаКонтрагентов = НастройкиВыгрузкиСправочников.ВыгрузкаКонтрагентов;

	УстановитьПривилегированныйРежим(Истина);
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("апОбменДаннымиВторичныеПродажи", "НастройкиПоставщиков",,,"апОбменДаннымиВторичныеПродажи");
	
	Если Настройки <> Неопределено Тогда
		НастройкиПоставщиков.Загрузить(Настройки);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьСписокВыбораТекущегоКодаДистрибьютора();
	
	ПриИзмененииОбъектаПоиска(Истина);

КонецПроцедуры

Процедура ВосстановитьНастройки(КлючНастройки)
		
	//СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить(КлючНастройки, КлючНастройки,, КлючНастройки);
	//Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда			
	//	Для каждого ТекНастройка Из СтруктураНастроек Цикл
	//		Объект[ТекНастройка.Ключ] = ТекНастройка.Значение;	
	//	КонецЦикла;
	//КонецЕсли;	
	//ИспользованиеFTP = Объект.ИспользоватьФТПСервер;	
	
	//Перенести текущие настройки в таблицу настроек поставщиков
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
		
	Если ТипЗнч(ОбъектыПоиска) <> Тип("Структура") Тогда
		ОбъектыПоиска = Новый Структура;
	КонецЕсли; 
	
	Если ТипЗнч(НастройкиОбъектовВыгрузки) <> Тип("Структура") Тогда
		НастройкиОбъектовВыгрузки = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ОбъектВыгрузки) <> Тип("Структура") Тогда
		Объект.ОбъектВыгрузки = ЗаполнитьСтруктуруОбъектаПоиска();
	КонецЕсли; 
	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " (ver " + Версия + ")";	
	
	ВосстановитьНастройкиНаСервере();
	
	ЭтаФорма.Модифицированность = Ложь;	
	
	УстановитьДниВыгрузкиИзНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//СохранитьОбъектПоиска();
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("СохранитьВсеПродолжить", ЭтотОбъект, "ПоЗакрытиюОкна");
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеПродолжить(РезультатОтвета, ДополнительныеПараметры) Экспорт
	
	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда
		ЗаписатьНастройкиНаСервере();
		Закрыть();
	ИначеЕсли РезультатОтвета = КодВозвратаДиалога.Нет Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Источник) <> Тип("Структура") И ТипЗнч(Источник) <> Тип("УправляемаяФорма") Тогда Возврат; КонецЕсли; 
	Если НЕ ЕстьРеквизитОбъекта(Источник, "ИмяФормы") Тогда Возврат; КонецЕсли; 
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда Возврат; КонецЕсли; 
		
	Если Найти(Источник.ИмяФормы, ".ВыборОбъектаМетаданных") <> 0 Тогда 
		
		Результат = Параметр;
		ПолноеИмяОбъекта = Результат.Имя;
		Если ТипЗнч(Объект.ОбъектВыгрузки) = Тип("Структура") И Объект.ОбъектВыгрузки.Свойство("ПолноеИмя") И ПолноеИмяОбъекта = Объект.ОбъектВыгрузки.ПолноеИмя Тогда
			Возврат;
		КонецЕсли; 
		
		ПозицияТочки = Найти(ПолноеИмяОбъекта, ".");
		ТипОбъекта = Лев(ПолноеИмяОбъекта, ПозицияТочки - 1);
		ИмяОбъекта = Сред(ПолноеИмяОбъекта, ПозицияТочки + 1);
		Объект.ОбъектВыгрузки = ЗаполнитьСтруктуруОбъектаПоиска(ТипОбъекта, ИмяОбъекта, Результат.Синоним, Ложь);
		Объект.ОбъектВыгрузки.РежимОтбора  = Объект.РежимОтбора;

		ОбъектПоискаПредставление = Объект.ОбъектВыгрузки.Представление;
		ПриИзмененииОбъектаПоиска();
		СохранитьОбъектПоискаВСпискеВыбора();
		
	//ИначеЕсли Найти(Источник.ИмяФормы, ".НастройкиФТП") <> 0 Тогда
	//	
	//	Объект.КаталогНаСервере 		= Параметр.КаталогНаСервере;
	//	Объект.ПарольФТП				= Параметр.ПарольФТП;
	//	Объект.ПассивныйРежимФТП 		= Параметр.ПассивныйРежимФТП;
	//	Объект.ПодключениеУстановлено 	= Параметр.ПодключениеУстановлено;
	//	Объект.ПользовательФТП 			= Параметр.ПользовательФТП;
	//	Объект.СерверФТП				= Параметр.СерверФТП;
	//	Объект.ФайлЛога			 		= Параметр.ФайлЛога;
	//	
	//	Объект.КаталогНаРезервномСервере 		= Параметр.КаталогНаРезервномСервере;
	//	Объект.ПарольРезервногоФТП				= Параметр.ПарольРезервногоФТП;
	//	Объект.ПассивныйРежимРезервногоФТП 		= Параметр.ПассивныйРежимРезервногоФТП;
	//	Объект.ПользовательРезервногоФТП 		= Параметр.ПользовательРезервногоФТП;
	//	Объект.СерверРезервногоФТП				= Параметр.СерверРезервногоФТП;

	//	ЗаписатьНастройкиНаСервере();				
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	//Объект.ОбъектВыгрузки = Настройки["Объект.ОбъектВыгрузки"];
	//Объект.ОтборДанных = Настройки["Объект.ОтборДанных"];
	//ОбъектыПоиска = Настройки["ОбъектыПоиска"];
	//НастройкиОбъектовВыгрузки = Настройки["НастройкиОбъектовВыгрузки"];
	//
	//Если ТипЗнч(Объект.ОбъектВыгрузки) = Тип("Структура") Тогда
	//	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектВыгрузки.Тип + "." + Объект.ОбъектВыгрузки.Имя);
	//	Если ОбъектМетаданных = Неопределено Тогда
	//		Объект.ОбъектВыгрузки = Неопределено;
	//		ОбъектПоискаПредставление = "";
	//		Объект.ОтборДанных = Неопределено;
	//	КонецЕсли; 
	//КонецЕсли; 
		
	ЗагрузитьСпискиВыбораИзНастроекСервер(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	//Попытка
	//	Если ЗначениеЗаполнено(НастройкаВыгрузки) Тогда
	//		УстановитьОбъектПоиска(НастройкаВыгрузки, Истина);
	//	КонецЕсли;
	//Исключение
	//	ВызватьИсключение("Не удалось загрузить настройки по причине: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	//СохранитьОбъектПоиска();
	//Настройки.Вставить("Объект.ОтборДанных", Объект.ОтборДанных);
	//Настройки.Вставить("ОбъектыПоиска", ОбъектыПоиска);
	//Настройки.Вставить("ОбъектВыгрузки", Объект.ОбъектВыгрузки);
	//Настройки.Вставить("НастройкиОбъектовВыгрузки", НастройкиОбъектовВыгрузки);
	//Настройки.Вставить("Объект.ОбъектВыгрузки.СписокВыбора", Элементы.ПолеОбъектПоиска.СписокВыбора);
		
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеОбъектПоискаПриИзменении(Элемент)
	
	ПриИзмененииОбъектаПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОбъектПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СохранитьОбъектПоиска();
	ВыборОбъектаМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОбъектПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СохранитьОбъектПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОбъектПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ОбъектПоискаПредставление = ВыбранноеЗначение.Представление;
		Объект.ОбъектВыгрузки = ВыбранноеЗначение;
	Иначе
		ОбъектПоискаПредставление = "";
		Объект.ОбъектВыгрузки = Неопределено;
	КонецЕсли;
	
	Если Объект.ОбъектВыгрузки <> Неопределено Тогда
		
		ПриИзмененииОбъектаПоиска();
		СохранитьОбъектПоискаВСпискеВыбора();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДниВыгрузкиИзНастроек()
	
	Для Каждого СтрокаНастроекПоставщика Из НастройкиПоставщиков Цикл
		//Количество дней в разрезе типа выгрузки (продажи; остатки; оплаты)
		Если ТипЗнч(СтрокаНастроекПоставщика.ДниВыгрузки) = Тип("Структура") Тогда
			КоличествоДней = 0;
			СтрокаНастроекПоставщика.ДниВыгрузки.Свойство(НастройкаВыгрузки, КоличествоДней);
			Если КоличествоДней <> Неопределено Тогда
				СтрокаНастроекПоставщика.ВыгружатьДанныеАвтоматическиЗаПоследние = КоличествоДней;
			Иначе
				СтрокаНастроекПоставщика.ВыгружатьДанныеАвтоматическиЗаПоследние = 0;
			КонецЕсли;
		Иначе
			СтрокаНастроекПоставщика.ВыгружатьДанныеАвтоматическиЗаПоследние = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВыгрузкиПриИзменении(Элемент)

	УстановитьДниВыгрузкиИзНастроек();
	
	Если Не ЗначениеЗаполнено(ТекущийКодДистрибьютора) Тогда
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не указан текущий код дистрибьютора. Укажите, пожалуйста, код дистрибьютора.'");
		Сообщение.ПутьКДанным = "ТекущийКодДистрибьютора"; 
		Сообщение.Поле = "ТекущийКодДистрибьютора"; 
		Сообщение.Сообщить();
		
	Иначе
		
		// +++
		Если Объект.v2ФорматВыгрузки Тогда
			Если НастройкаВыгрузки = "Оплаты" Тогда
				ВызватьИсключение("Выгрузка оплат не поддерживается текущим форматом")
			КонецЕсли;
		КонецЕсли;
		// ---			
		
		УстановитьОбъектПоиска(НастройкаВыгрузки);
		Если НастройкаВыгрузки = "Продажи"
			Или НастройкаВыгрузки = "Оплаты" Тогда 
			
			Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Заголовок = "Найти документы";
		Иначе
			Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Заголовок = "Найти объекты";
		КонецЕсли;
		
		// +++
		Если Объект.v2ФорматВыгрузки Тогда
			Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Заголовок = "Записать в файлы";
			Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Доступность = Ложь;
		КонецЕсли;
		// ---
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтбораПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
	Объект.ОбъектВыгрузки.РежимОтбора = Объект.РежимОтбора;
КонецПроцедуры

&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог обмена";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Каталог = Объект.КаталогОбмена;

	Диалог.Показать(Новый ОписаниеОповещения("ПослеВыбораКаталогаОбмена", ЭтотОбъект));
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьFTPСерверПриИзменении(Элемент)
	ИспользоватьФТППриИзменении();	
КонецПроцедуры

// ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНайденныеОбъекты

&НаКлиенте
Процедура НайденныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НайденныеОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Объект.ОбъектВыгрузки.Тип <> "РегистрНакопления" Тогда
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(, ТекущиеДанные.Объект);
		КонецЕсли;  //  
	КонецЕсли;  
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыНайденныеОбъекты
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыЗапроса

&НаКлиенте
Процедура ПараметрыЗапросаЭтоВыражениеПриИзменении(Элемент)
	
	Если Элементы.ПараметрыЗапроса.ТекущиеДанные.ЭтоВыражение Тогда
		Если Не ТипЗнч(Элементы.ПараметрыЗапроса.ТекущиеДанные.ЗначениеПараметра) = Тип("Строка") Тогда
			Элементы.ПараметрыЗапроса.ТекущиеДанные.ЗначениеПараметра = "";
		КонецЕсли; 
	КонецЕсли;
	
	Элементы.ПараметрыЗапросаЗначениеПараметра.ВыбиратьТип = Не Элементы.ПараметрыЗапроса.ТекущиеДанные.ЭтоВыражение;

КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеПараметраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекОписаниеТипов = Элементы.ПараметрыЗапроса.ТекущиеДанные.ТипПараметра;
	Элемент.ОграничениеТипа = ТекОписаниеТипов;
		
КонецПроцедуры

// ОбработчикиСобытийЭлементовТаблицыФормыПараметрыЗапроса
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНайтиОбъекты(Команда)
	
	ОчиститьСообщения();
	Если Объект.НачПериода = Дата("00010101") ИЛИ Объект.КонецПериода = Дата("00010101") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан период поиска объектов. Укажите, пожалуйста, границы периода.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийКодДистрибьютора) Тогда
		СообщениеНеУказанТекущийДистрибьютор();
		Возврат;
	КонецЕсли;
	
	Если Объект.ОбъектВыгрузки.Тип = "РегистрНакопления" Тогда
		Если Объект.ОбъектВыгрузки.Имя = "ВыручкаИСебестоимостьПродаж" // ERP
			Или Объект.ОбъектВыгрузки.Имя = "Продажи" // Розница
			Тогда 
			НайтиЗаписиОПродажах();
		ИначеЕсли Объект.ОбъектВыгрузки.Имя = "ТоварыНаСкладах" // ERP
			Или Объект.ОбъектВыгрузки.Имя = "ТоварыОрганизаций" // Розница
			Тогда 
			ПолучитьОстаткиТоваров();
		КонецЕсли;	
	ИначеЕсли Объект.ОбъектВыгрузки.Имя = "ПриходныйКассовыйОрдер" Тогда 
		ПолучитьЗаписиОбОплатах();
	КонецЕсли;
	
	Если Объект.ОбъектВыгрузки.Тип = "РегистрБухгалтерии" Тогда
		Если Объект.ОбъектВыгрузки.Имя = "Хозрасчетный" Тогда
			ПолучитьОстаткиТоваров(); // БП			
		КонецЕсли;		
	КонецЕсли;
	
	Если Объект.ОбъектВыгрузки.Тип = "Документ" Тогда
		Если Объект.ОбъектВыгрузки.Имя = "РеализацияТоваровУслуг" Тогда
			НайтиЗаписиОПродажах(); // БП			
		КонецЕсли;		
	КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьВсеОбъекты(Команда)
	ПометитьСтроки(Истина, НайденныеОбъекты);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыбратьВсеРеквизиты(Команда)
	ПометитьСтроки(Истина, ВыгружаемыеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьВыборВсехОбъектов(Команда)
	ПометитьСтроки(Ложь, НайденныеОбъекты);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьВыборВсехРеквизитов(Команда)
	ПометитьСтроки(Ложь, ВыгружаемыеДанные);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСброситьНастройкиПоиска(Команда)
	
	ПриИзмененииОбъектаПоиска(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгружатьГруппы(Команда)
	
	//Элементы.НайденныеОбъектыВыгружатьГруппы.Пометка = НЕ Элементы.НайденныеОбъектыВыгружатьГруппы.Пометка;
	//Объект.ВыгружатьГруппы = Элементы.НайденныеОбъектыВыгружатьГруппы.Пометка;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьДанные(Команда)
		
	ОчиститьСообщения();
	Если ПроверитьЗаполненностьПолей() Тогда 
		
		ВыгрузитьДанныеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьНесопоставленнуюНоменклатуру(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.ИспользоватьФТПСервер Тогда
		
		Если ПроверитьСущестованиеКаталогаОбменаНаСервере() Тогда 
			ЗагрузитьНесопоставленнуюНоменклатуруСФТП();
		КонецЕсли;
				
	Иначе	
		
		ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		ДиалогВыбора.Заголовок = "Выбор файла запроса";
		ДиалогВыбора.МножественныйВыбор = Ложь;
		ДиалогВыбора.ИндексФильтра               = 0;
		ДиалогВыбора.Фильтр = "Текстовые документы (NotMappedGoods.txt)|NotMappedGoods.txt";
		ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
		
		ДиалогВыбора.Показать(Новый ОписаниеОповещения("ЗагрузитьНесопоставленнуюНоменклатуруВыбранФайл", ЭтотОбъект));
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакомментировать(Команда)
	Перем ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка;
	
	Элемент = Элементы.ТекстПроизвольногоЗапроса;
	Элемент.ПолучитьГраницыВыделения(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);

	ТекстДоИзменения = Объект.ТекстПроизвольногоЗапроса;
	КоличествоСтрок = СтрЧислоСтрок(ТекстДоИзменения);
	ВыделенныйФрагмент = "";
	ДлинаПоследнейСтроки = 0;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока - 1;
	КонецЕсли;
	Если ПерваяСтрока >= ПоследняяСтрока И ПоследняяКолонка = 1 Тогда 
		ПоследняяКолонка = СтрДлина(СтрПолучитьСтроку(ТекстДоИзменения, ПерваяСтрока));
		ПоследняяСтрока = ПерваяСтрока;
	КонецЕсли;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Фрагмент = СтрПолучитьСтроку(ТекстДоИзменения, НомерСтроки);
		Если НомерСтроки >= ПерваяСтрока И НомерСтроки <= ПоследняяСтрока Тогда
			Если НомерСтроки = ПерваяСтрока Тогда 
				ВыделенныйФрагмент = ВыделенныйФрагмент + "//" + Фрагмент;
			Иначе
				ВыделенныйФрагмент = ВыделенныйФрагмент + Символы.ПС + "//" +Фрагмент;
			КонецЕсли;
			Если НомерСтроки = ПоследняяСтрока Тогда 
				ДлинаПоследнейСтроки = СтрДлина(Фрагмент) + 3;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока + 1;
		ДлинаПоследнейСтроки = 1;
		ВыделенныйФрагмент =  ВыделенныйФрагмент + Символы.ПС;
	КонецЕсли;

	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	Элемент.ВыделенныйТекст = ВыделенныйФрагмент;
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьНастройки(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполненностьПолей(Ложь) Тогда 
		
		ЗаписатьНастройкиНаСервере();
		ЗаголовокГруппы = Строка(Элементы.ГруппаНастройкиАвтовыгрузки.Заголовок);
		Позиция = Найти(ЗаголовокГруппы,"*");
		Если Позиция <> 0 Тогда
			Элементы.ГруппаНастройкиАвтовыгрузки.Заголовок = Прав(ЗаголовокГруппы,СтрДлина(ЗаголовокГруппы)-2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьФТПСоединение(Команда)
		
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("КаталогНаСервере", Объект.КаталогНаСервере);
	ПараметрыФормы.Вставить("ПарольФТП", Объект.ПарольФТП);
	ПараметрыФормы.Вставить("ПассивныйРежимФТП", Объект.ПассивныйРежимФТП);
	ПараметрыФормы.Вставить("ПользовательФТП", Объект.ПользовательФТП);
	ПараметрыФормы.Вставить("СерверФТП", Объект.СерверФТП);
	ПараметрыФормы.Вставить("ФайлЛога", Объект.ФайлЛога);
	ПараметрыФормы.Вставить("ПодключениеУстановлено", Объект.ПодключениеУстановлено); 
	
	ПараметрыФормы.Вставить("КаталогНаРезервномСервере", Объект.КаталогНаРезервномСервере);
	ПараметрыФормы.Вставить("ПарольРезервногоФТП", Объект.ПарольРезервногоФТП);
	ПараметрыФормы.Вставить("ПассивныйРежимРезервногоФТП", Объект.ПассивныйРежимРезервногоФТП);
	ПараметрыФормы.Вставить("ПользовательРезервногоФТП", Объект.ПользовательРезервногоФТП);
	ПараметрыФормы.Вставить("СерверРезервногоФТП", Объект.СерверРезервногоФТП);
	ПараметрыФормы.Вставить("ПодключениеУстановленоРезервногоФТП", Объект.ПодключениеУстановленоРезервногоФТП); 
	
	ОткрытьФорму(ПолучитьПолноеИмяФормы("НастройкиФТП"), ПараметрыФормы, ЭтаФорма);	

КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьПараметры(Команда)

	Результат = ОбновитьПараметрыНаСервере();
	Если Результат <> Истина Тогда
		ПоказатьПредупреждение(, Результат, , "Ошибка");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКонструкторЗапроса(Команда)
	
	ТекстЗапросаВФорме = Объект.ТекстПроизвольногоЗапроса;
	
	Если ВерсияКонфигурации835ИБольше() Тогда
		#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТонкийКлиент Тогда
			КонструкторЗапроса = Неопределено;
			Если ПустаяСтрока(ТекстЗапросаВФорме) Тогда
				Выполнить("КонструкторЗапроса = Новый КонструкторЗапроса();");
			Иначе
				Выполнить("КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапросаВФорме);");
			КонецЕсли;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапроса", ЭтотОбъект);
			КонструкторЗапроса.Показать(Оповещение);
		#Иначе
			ТекстСообщения = НСтр("ru = 'Конструктор запроса доступен только в режимах: Тонкий клиент или Толстый клиент.'");
			ПоказатьПредупреждение(, ТекстСообщения);
		#КонецЕсли
	Иначе
		#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
			Если ПустаяСтрока(ТекстЗапросаВФорме) Тогда
				КонструкторЗапроса = Новый КонструкторЗапроса();
			Иначе
				КонструкторЗапроса = Новый КонструкторЗапроса(ТекстЗапросаВФорме);
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияКонструктораЗапроса", ЭтотОбъект);
			КонструкторЗапроса.Показать(Оповещение);
			
		#Иначе
			ТекстСообщения = НСтр("ru = 'Конструктор запроса доступен только в режиме Толстого клиента.'");
			ПоказатьПредупреждение(, ТекстСообщения);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРаскомментировать(Команда)
	Перем ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка;
	Элемент = Элементы.ТекстПроизвольногоЗапроса;
	Элемент.ПолучитьГраницыВыделения(ПерваяСтрока, ПерваяКолонка, ПоследняяСтрока, ПоследняяКолонка);
	
	ТекстДоИзменения = Объект.ТекстПроизвольногоЗапроса;
	КоличествоСтрок = СтрЧислоСтрок(ТекстДоИзменения);
	ВыделенныйФрагмент = "";
	ДлинаПоследнейСтроки = ПоследняяКолонка;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока - 1;
	КонецЕсли;
	Если ПерваяСтрока >= ПоследняяСтрока И ПоследняяКолонка = 1 Тогда 
		ПоследняяКолонка = СтрДлина(СтрПолучитьСтроку(ТекстДоИзменения, ПерваяСтрока));
		ПоследняяСтрока = ПерваяСтрока;
	КонецЕсли;

	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Фрагмент = СтрПолучитьСтроку(ТекстДоИзменения, НомерСтроки);
		Если НомерСтроки >= ПерваяСтрока И НомерСтроки <= ПоследняяСтрока Тогда
			Если Лев(СокрЛ(Фрагмент), 2) = "//" Тогда
				Позиция = Найти(Фрагмент, "//");
				Фрагмент = Лев(Фрагмент, Позиция - 1) + Сред(Фрагмент, Позиция + 2);
			КонецЕсли;
			Если НомерСтроки = ПерваяСтрока Тогда 
				ВыделенныйФрагмент = ВыделенныйФрагмент + Фрагмент;
			Иначе
				ВыделенныйФрагмент = ВыделенныйФрагмент + Символы.ПС + Фрагмент;
			КонецЕсли;
			Если НомерСтроки = ПоследняяСтрока Тогда 
				ДлинаПоследнейСтроки = СтрДлина(Фрагмент) + 3;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоследняяКолонка = 1 Тогда 
		ПоследняяСтрока = ПоследняяСтрока + 1;
		ДлинаПоследнейСтроки = 1;
		ВыделенныйФрагмент =  ВыделенныйФрагмент + Символы.ПС;
	КонецЕсли;

	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
	Элемент.ВыделенныйТекст = ВыделенныйФрагмент;
	Элемент.УстановитьГраницыВыделения(ПерваяСтрока, 1, ПоследняяСтрока, ДлинаПоследнейСтроки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НайтиОбъектыКлиент()
	
	Состояние(НСтр("ru = 'Поиск объектов...'"), , , БиблиотекаКартинок.Найти);
	СохранитьОбъектПоиска();
	НайтиСсылкиПоОтбору();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНайденныеОбъекты;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЗаписиОПродажах()
	
	Состояние(НСтр("ru = 'Поиск документов...'"), , , БиблиотекаКартинок.Найти);
	СохранитьОбъектПоиска();
	НайтиДокументыПродажПоОтбору();
	
	// +++
	Если Объект.v2ФорматВыгрузки Тогда
		Возврат	
	КонецЕсли;
	// ---

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДокументыПродаж;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОстаткиТоваров()
	
	Состояние(НСтр("ru = 'Поиск записей...'"), , , БиблиотекаКартинок.Найти);
	СохранитьОбъектПоиска();
	НайтиОстаткиТоваровПоОтбору();
	
	// +++
	Если Объект.v2ФорматВыгрузки Тогда
		Возврат	
	КонецЕсли;
	// ---
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОстаткиТоваров;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗаписиОбОплатах()
	Состояние(НСтр("ru = 'Поиск записей...'"), , , БиблиотекаКартинок.Найти);
	СохранитьОбъектПоиска();
	НайтиДокументыОплатПоОтбору();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыпискиИзБанка;	
КонецПроцедуры

// Функция определяет, существует ли реквизит у объекта.
//
// Параметры
//  Объект  – Любой объект метаданных, ссылка, переменная объектного типа, структура, строка таблицы значений и т.п
//  ИмяРеквизита  – Строка - имя реквизита
//
// Возвращаемое значение:
//   Булево   – Истина, если существует реквизит.
//
&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальностиОбъекта   = Новый УникальныйИдентификатор;
	
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальностиОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальностиОбъекта;
	
КонецФункции // ЕстьРеквизитОбъекта()

&НаСервере
Процедура СоздатьКолонки(ТаблицаРезультата, МассивРеквизитовПоУмолчанию = Неопределено) Экспорт
	
	ТаблицаЭлемент = Элементы.НайденныеОбъекты;
	
	//очистка
	Для Каждого ДобавленныйЭлемент Из ДобавленныеЭлементы Цикл
		Элементы.Удалить(Элементы[ДобавленныйЭлемент.Значение]);
	КонецЦикла;
	ДобавленныеЭлементы.Очистить();
	
	РеквизитыОбъекта = Метаданные.НайтиПоПолномуИмени(Объект.ОбъектВыгрузки.ПолноеИмя).Реквизиты;
		
	//добавляем реквизиты
	МассивРеквизитов = Новый Массив;
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		Если МассивРеквизитовПоУмолчанию <> Неопределено 
			И МассивРеквизитовПоУмолчанию.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипКолонки = Колонка.ТипЗначения;
		Если Колонка.Имя = "Представление" ИЛИ ТипКолонки.СодержитТип(Тип("ХранилищеЗначения")) ИЛИ ТипКолонки.СодержитТип(Тип("ТаблицаЗначений")) 
				ИЛИ ТипКолонки.СодержитТип(Тип("Тип")) Тогда
			Продолжить;
		КонецЕсли;
		//СистемныеПоля
		Если Колонка.Имя = "СистемныеПоляНомерПоПорядку"  Тогда
			ЗаголовокПоля = "№ п/п";
		Иначе
			Реквизит = РеквизитыОбъекта.Найти(Колонка.Имя);
			Если Реквизит <> Неопределено Тогда
				ЗаголовокПоля = ?(ЗначениеЗаполнено(Реквизит.Синоним), Реквизит.Синоним, Реквизит.Имя);
			Иначе                  
				ЗаголовокПоля = Колонка.Имя;
			КонецЕсли;  //  
		КонецЕсли; 
		
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, ТипКолонки, ТаблицаЭлемент.Имя, ЗаголовокПоля);
		МассивРеквизитов.Добавить(РеквизитФормы);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов, ДобавленныеРеквизиты.ВыгрузитьЗначения());
	ДобавленныеРеквизиты.Очистить();
	
	//добавляем элементы управления
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		Попытка
			ДобавленныеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
			
			Элемент = Элементы.Добавить(ТаблицаЭлемент.Имя + Реквизит.Имя, Тип("ПолеФормы"), ТаблицаЭлемент);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = ТаблицаЭлемент.Имя + "." + Реквизит.Имя;
			Элемент.ТолькоПросмотр = Истина;
			Элемент.РастягиватьПоГоризонтали = Ложь;
			Если Реквизит.Имя = "СистемныеПоляНомерПоПорядку" Тогда
				Элемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
				Элемент.Ширина = 3;
			КонецЕсли; 
			
			ДобавленныеЭлементы.Добавить(Элемент.Имя);
		Исключение
		КонецПопытки; 
	КонецЦикла;
	
	//заполнение данными
	НайденныеОбъекты.Очистить();
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРезультата Цикл
		НоваяСтрока = НайденныеОбъекты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
		
КонецПроцедуры

// Возвращает полный путь к форме внешней обработки, отчета или любого объекта метаданных в виде
// ВнешняяОбработка.ИмяВнешнейОбработки.Форма.ИмяФормы
// ВнешнийОтчет.ИмяВнешнегоОтчета.Форма.ИмяФормы
// Документ.ИмяОбъекта.Форма.ИмяФормы
//
// Параметры
//  ИмяФормы  - <Строка> - имя формы объекта
//
// Возвращаемое значение:
//   <Строка>   - полный путь к форме
//
&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормы)
	
	СимволТочка = ".";
	ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; // 
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;
	
КонецФункции

//
// Параметры: ТаблицаЗначений
// Возвращаемое значение: Массив
//
&НаСервереБезКонтекста
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений)
    
    Массив = Новый Массив;
    СтруктураСтрокой = "";
    НужнаЗапятая = Ложь;
    Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
        Если НужнаЗапятая Тогда
            СтруктураСтрокой = СтруктураСтрокой + ",";
        КонецЕсли;
        СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
        НужнаЗапятая = Истина;
    КонецЦикла;
    Для Каждого Строка Из ТаблицаЗначений Цикл
        НоваяСтрока = Новый Структура(СтруктураСтрокой);
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
        Массив.Добавить(НоваяСтрока);
    КонецЦикла;
    Возврат Массив;

КонецФункции 

//
// Параметры: Массив
// Возвращаемое значение: ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция МассивВТаблицуЗначений(Массив)
    
    ТЗРезультат = Новый ТаблицаЗначений;
    СтруктураСтрокой = "";
    НужноДобавитьКолонки = Истина;
	
	Для каждого ТекСтруктура Из Массив Цикл
		Если НужноДобавитьКолонки Тогда
			Для каждого Поле Из ТекСтруктура Цикл
			     ТЗРезультат.Колонки.Добавить(Поле.Ключ);
			КонецЦикла; 
		КонецЕсли;
		НоваяСтрока = ТЗРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтруктура);
		НужноДобавитьКолонки = Ложь;
	КонецЦикла; 
	
    Возврат ТЗРезультат;

КонецФункции 

&НаСервере
Процедура СохранитьОбъектПоиска(ПолучитьНастройки = Истина)
	
	Если ПолучитьНастройки Тогда
		
		ОбновитьОтборДанных()

		//Если ЗначениеЗаполнено(ТекущийКодДистрибьютора) Тогда
		//	СтрокаНастроекПоставщика = ПолучитьНастройкуПоставщикаПоКоду();
		//	
		//	//если отбор это структура, то нужно найти ключ равный текущей настройке выгрузки
		//	Если ТипЗнч(СтрокаНастроекПоставщика.Отбор) = Тип("Структура") Тогда
		//		Настройка = Неопределено;
		//		СтрокаНастроекПоставщика.Отбор.Свойство(НастройкаВыгрузки, Настройка);
		//		Если Настройка <> Неопределено Тогда
		//			Объект.ОтборДанных = Настройка;
		//		Иначе
		//			//Нужно получить доступные значения отборов по произвольную запросу				
		//			Объект.ОтборДанных = Неопределено;
		//		КонецЕсли;
		//	Иначе
		//		//Нужно получить доступные значения отборов по произвольную запросу				
		//		Объект.ОтборДанных = Неопределено;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
	КонецЕсли; 
	
	Если ТипЗнч(Объект.ОбъектВыгрузки) <> Тип("Структура") Тогда
		Объект.ОбъектВыгрузки = ЗаполнитьСтруктуруОбъектаПоиска();
	ИначеЕсли ЗначениеЗаполнено(Объект.ОбъектВыгрузки.Тип) Тогда 
		ОбъектыПоиска.Вставить(Объект.ОбъектВыгрузки.Тип + Объект.ОбъектВыгрузки.Имя, Объект.ОтборДанных);
		НастройкиТекОбъекта = Новый Структура;
		НастройкиТекОбъекта.Вставить("ТекстПроизвольногоЗапроса", Объект.ТекстПроизвольногоЗапроса);
		НастройкиТекОбъекта.Вставить("ПараметрыЗапроса", ТаблицаЗначенийВМассив(ПараметрыЗапроса.Выгрузить()));
		НастройкиТекОбъекта.Вставить("НеВыгружаемыеРеквизиты", ВыгружаемыеДанные.Выгрузить(Новый Структура("Выбрать", Ложь)).ВыгрузитьКолонку("Имя"));
		Если ТипЗнч(НастройкиОбъектовВыгрузки) <> Тип("Структура") Тогда
			НастройкиОбъектовВыгрузки = Новый Структура;
		КонецЕсли;
		НастройкиОбъектовВыгрузки.Вставить(Объект.ОбъектВыгрузки.Тип + Объект.ОбъектВыгрузки.Имя, НастройкиТекОбъекта);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборДанных()
	
	Если ЗначениеЗаполнено(ТекущийКодДистрибьютора) Тогда
		СтрокаНастроекПоставщика = ПолучитьНастройкуПоставщикаПоКоду();
		
		//если отбор это структура, то нужно найти ключ равный текущей настройке выгрузки
		Если ТипЗнч(СтрокаНастроекПоставщика.Отбор) = Тип("Структура") Тогда
			Настройка = Неопределено;
			СтрокаНастроекПоставщика.Отбор.Свойство(НастройкаВыгрузки, Настройка);
			Если Настройка <> Неопределено Тогда
				Объект.ОтборДанных = Настройка;
			Иначе
				//Нужно получить доступные значения отборов по произвольную запросу				
				Объект.ОтборДанных = Неопределено;
			КонецЕсли;
		Иначе
			//Нужно получить доступные значения отборов по произвольную запросу				
			Объект.ОтборДанных = Неопределено;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПометитьСтроки(Пометка, ТЗ)

	Для Каждого СтрокаТ Из ТЗ Цикл
		СтрокаТ.Выбрать = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиСсылкиПоОтбору()
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
	ТаблицаРезультата = ОбработкаОбъект.ТЗНайденныеЭлементыСправочника(ПараметрыЗапроса.Выгрузить());
	
	Если ТаблицаРезультата = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить("Картинка");
	
	МассивРеквизитов.Добавить("Выбрать");
	МассивРеквизитов.Добавить("Объект");
	Если ТаблицаРезультата.Колонки.Найти("Выбрать") = Неопределено Тогда
		ТаблицаРезультата.Колонки.Вставить(0, "Выбрать");
		ТаблицаРезультата.ЗаполнитьЗначения(Истина, "Выбрать");
	КонецЕсли;
	
	СоздатьКолонки(ТаблицаРезультата, МассивРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыПродажПоОтбору()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");	
	//ОбработкаОбъект.ВыгрузитьДанныеПоЗаданию("АП_УД_ФайлыЗапроса");
	//ОбработкаОбъект.ВыгрузитьДанныеПоЗаданию("АП_УД_Выгрузка_продаж");

	СтрокаНастроек = ПолучитьНастройкуПоставщикаПоКоду();	
	НастройкиПоставщика = ВозвратНастроекПоставщикаПоКодуВВидеСтруктура(СтрокаНастроек);
	
	ДанныеПродажТоваров = ОбработкаОбъект.ДЗПродажи(,,,,НастройкиПоставщика);
	
	// +++
	Если Объект.v2ФорматВыгрузки Тогда
		Возврат
	КонецЕсли;
	// ---
	
	ДеревоПродаж		= ДанныеПродажТоваров.ДеревоПродажиТоваров;
	Номенклатура  		= ДанныеПродажТоваров.НоменклатураПродажТоваров;
	ТорговыеТочки 		= ДанныеПродажТоваров.ТТПродажТоваров;
	Контрагенты 		= ДанныеПродажТоваров.Контрагенты;
	Агенты 				= ДанныеПродажТоваров.Агенты;
	Склады 				= ДанныеПродажТоваров.Склады;
	
	Если ДеревоПродаж <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ДеревоПродаж, "ДокументыПродаж");
		ЗначениеВРеквизитФормы(ТорговыеТочки,"СвязанныеТорговыеТочки");
		ЗначениеВРеквизитФормы(Номенклатура, "СвязаннаяНоменклатура");
		ЗначениеВРеквизитФормы(Контрагенты,  "СвязанныеКонтрагенты");
		ЗначениеВРеквизитФормы(Агенты,  	 "СвязанныеАгенты");
		ЗначениеВРеквизитФормы(Склады,  	 "СвязанныеСклады");
		ОбработкаОбъект.ЗаполнитьМакетПродаж(ДеревоПродаж);
		Если ДеревоПродаж.Строки.Количество () = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Объекты не найдены!";
			Сообщение.Поле = "НайденныеОбъекты";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;		
		
КонецПроцедуры

&НаСервере
Процедура НайтиОстаткиТоваровПоОтбору()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//ОбработкаОбъект.ВыгрузитьДанныеПоЗаданию("АП_УД_Выгрузка_остатков");	
	
	СтрокаНастроек = ПолучитьНастройкуПоставщикаПоКоду();
	НастройкиПоставщика = ВозвратНастроекПоставщикаПоКодуВВидеСтруктура(СтрокаНастроек);
	
	ДанныеОстатковТоваров = ОбработкаОбъект.ДЗОстаткиТоваров(,,Истина,,,НастройкиПоставщика);
	
	// +++
	Если Объект.v2ФорматВыгрузки Тогда
		Возврат
	КонецЕсли;
	// ---
	
	ДеревоОстатков		  = ДанныеОстатковТоваров.ДеревоОстаткиТоваров;
	Номенклатура 		  = ДанныеОстатковТоваров.НоменклатураОстатковТоваров;
	Склады		 		  = ДанныеОстатковТоваров.СкладыОстатковТоваров;
	Агенты				  = Неопределено;
	ДанныеОстатковТоваров.Свойство("Агенты", Агенты);
	//Агенты 				  = ДанныеОстатковТоваров.Агенты;
	
	Если ДанныеОстатковТоваров <> Неопределено Тогда
		
		ЗначениеВРеквизитФормы(ДеревоОстатков, 	"ОстаткиТоваров");
		ЗначениеВРеквизитФормы(Номенклатура, 	"СвязаннаяНоменклатура");
		ЗначениеВРеквизитФормы(Склады, 			"СвязанныеСклады");
		Если Агенты <> Неопределено Тогда
			ЗначениеВРеквизитФормы(Агенты, 			"СвязанныеАгенты");
		КонецЕсли;
			
		ОбработкаОбъект.ЗаполнитьМакетОстатков(ДеревоОстатков, Склады);
		
		Если ДеревоОстатков.Строки.Количество () = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Объекты не найдены!";
			Сообщение.Поле 	= "НайденныеОбъекты";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыОплатПоОтбору()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//ОбработкаОбъект.ВыгрузитьДанныеПоЗаданию("АП_УД_Выгрузка_оплат");

	СтрокаНастроек = ПолучитьНастройкуПоставщикаПоКоду();
	НастройкиПоставщика = ВозвратНастроекПоставщикаПоКодуВВидеСтруктура(СтрокаНастроек);
	ДанныеОплат = ОбработкаОбъект.ДЗОплаты(,,,,НастройкиПоставщика);
	ДеревоОплат		  = ДанныеОплат.ДеревоОплат;
	ТорговыеТочки	  = ДанныеОплат.ТТОплат;
	Контрагенты 	  = ДанныеОплат.Контрагенты;
	Агенты 			  = ДанныеОплат.Агенты;
	
	Если ДанныеОплат <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ДеревоОплат, 	"ДокументыОплаты");
		ЗначениеВРеквизитФормы(ТорговыеТочки, 	"СвязанныеТорговыеТочки"); 
		ЗначениеВРеквизитФормы(Контрагенты, 	"СвязанныеКонтрагенты"); 
		ЗначениеВРеквизитФормы(Агенты, 			"СвязанныеАгенты"); 
		ОбработкаОбъект.ЗаполнитьМакетОплат(ДеревоОплат);
		Если ДеревоОплат.Строки.Количество () = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Объекты не найдены!";
			Сообщение.Поле 	= "НайденныеОбъекты";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбъектПоискаВСпискеВыбора()
	
	СписокВыбора = Элементы.ПолеОбъектПоиска.СписокВыбора;
	Для каждого ЭлементСписка Из СписокВыбора Цикл
		Если ЭлементСписка.Значение.ПолноеИмя = Объект.ОбъектВыгрузки.ПолноеИмя И СписокВыбора.Количество() > 1 Тогда
			СписокВыбора.Сдвинуть(ЭлементСписка, - СписокВыбора.Индекс(ЭлементСписка));
			СписокВыбора[0].Значение = Объект.ОбъектВыгрузки;
			СписокВыбора[0].Представление = ОбъектПоискаПредставление;
			Возврат;
		КонецЕсли; 
  	КонецЦикла;
	СписокВыбора.Вставить(0, Объект.ОбъектВыгрузки, ОбъектПоискаПредставление);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборОбъектаМетаданных()
	
	ПараметрФормы = Новый Структура;
	Если Объект.ОбъектВыгрузки <> Неопределено И Объект.ОбъектВыгрузки.Свойство("ПолноеИмя") Тогда
		ПараметрФормы.Вставить("ТекущаяСтрока", Объект.ОбъектВыгрузки.ПолноеИмя);
	КонецЕсли;  //  
	
	ОткрытьФорму(ПолучитьПолноеИмяФормы("ВыборОбъектаМетаданных"), ПараметрФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БазаКлиентСерверная()
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	// в зависимости от того файловый это вариант БД или нет,  по-разному отображается путь в БД 
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
	
	Возврат (1 = ПозицияПоиска);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Объект.ВерсияКонфигурации = Лев(Метаданные.Версия,4);
	Элементы.ВыгружатьОстаткиПоСкладам.Видимость = (НастройкаВыгрузки = "Остатки");
	Элементы.ВыгрузитьДанныеПоЗапросу.Доступность = Объект.РазрешитьДополнительнуюВыгрузкуПоЗапросу;
	
	Если Объект.ОбъектВыгрузки = Неопределено Тогда
		Элементы.НайтиОбъекты.Доступность = Ложь;
		Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Доступность = Элементы.НайтиОбъекты.Доступность;
		Элементы.НайденныеОбъектыНайтиОбъекты.Доступность = Элементы.НайтиОбъекты.Доступность;
		Элементы.ГруппаОстаткиТоваров.Видимость = Ложь;
		Элементы.ГруппаДокументыПродаж.Видимость = Ложь;
		Элементы.ВыгрузитьДанные.Доступность = Ложь;
		Элементы.ГруппаНастройкиАвтовыгрузки.Видимость = Ложь;
		Элементы.СброситьНастройкиПоиска.Доступность = Ложь;
		Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Видимость = Истина;
		Элементы.НайденныеОбъектыВыбрать.Видимость = Истина;
		Элементы.РежимОтбора.Видимость = Ложь;
		Элементы.КолвоДнейВыгрузки.Видимость = Ложь;
		Элементы.Дни.Видимость = Ложь;
		НастройкаВыгрузки = Элементы.НастройкаВыгрузки.СписокВыбора.Получить(0).Значение;
		УстановитьОбъектПоиска(НастройкаВыгрузки, Истина);
	Иначе				
		Элементы.СброситьНастройкиПоиска.Доступность = Истина;
		ТипОбъектовПоиска = Объект.ОбъектВыгрузки.Тип;
		Если ТипОбъектовПоиска = "РегистрНакопления" Тогда
			Объект.РежимОтбора = 0;
		КонецЕсли;
		Элементы.РежимОтбора.Видимость = ТипОбъектовПоиска = "Справочник";
		
		Элементы.ГруппаДокументыПродаж.Видимость = Объект.ОбъектВыгрузки.Имя = "ВыручкаИСебестоимостьПродаж";
		Элементы.ГруппаОстаткиТоваров.Видимость = Объект.ОбъектВыгрузки.Имя = "ТоварыНаСкладах";
		Элементы.ГруппаВыпискиИзБанка.Видимость = Объект.ОбъектВыгрузки.Имя = "ПриходныйКассовыйОрдер";
		
		// +++
		Если Объект.v2ФорматВыгрузки Тогда
			Элементы.ГруппаДокументыПродаж.Видимость = Ложь;
			Элементы.ГруппаОстаткиТоваров.Видимость = Ложь;
			Элементы.ГруппаВыпискиИзБанка.Видимость = Ложь;
        КонецЕсли;
		// ---
		
		Элементы.НайденныеОбъектыВыбрать.Видимость = ТипОбъектовПоиска = "Справочник";
		
		Элементы.ВыгрузитьДанные.Доступность = Истина;
		
		Элементы.НайтиОбъекты.Доступность = Истина;
		Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Доступность = Элементы.НайтиОбъекты.Доступность;
		Элементы.НайденныеОбъектыНайтиОбъекты.Доступность = Элементы.НайтиОбъекты.Доступность;
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		Элементы.КолвоДнейВыгрузки.Видимость = ТипОбъектовПоиска = "РегистрНакопления";
		Элементы.Дни.Видимость = ТипОбъектовПоиска = "РегистрНакопления";
		
	КонецЕсли;
	
	Если НастройкаВыгрузки = "Продажи"
		ИЛИ НастройкаВыгрузки = "Оплаты" Тогда 
		Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Заголовок = "Найти документы";
	Иначе
		Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Заголовок = "Найти объекты";
	КонецЕсли;
	Элементы.Предупреждение.Видимость = БазаКлиентСерверная(); 
	
	ИспользоватьФТППриИзменении();
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСпискиВыбораИзНастроекСервер(Настройки)
	
	СписокВыбора = Настройки.Получить("Объект.ОбъектВыгрузки.СписокВыбора");
	Если СписокВыбора <> Неопределено И ТипЗнч(СписокВыбора) = Тип("СписокЗначений") Тогда
		Элементы.ПолеОбъектПоиска.СписокВыбора.Очистить();
		Для каждого ЭлементСписка Из СписокВыбора Цикл    
			Элементы.ПолеОбъектПоиска.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла; //Для каждого ЭлементСписка Из  
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПроизвольногоЗапросаПоУмолчанию()
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	//Объект.ТекстПроизвольногоЗапроса = ОбработкаОбъект.ТекстЗапросаДляПоискаЭлементов() + Символы.ПС + "АВТОУПОРЯДОЧИВАНИЕ";
	ПараметрыЗапроса.Очистить();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОбъектаПоиска(ВосстанавливатьНастройки = Истина, ОбновлятьВыгружаемыеДанные = Истина)
	
	// +++
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// ---
	
	Если Объект.ОбъектВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектыПоиска) <> Тип("Структура") Тогда
		ОбъектыПоиска = Новый Структура;
	КонецЕсли; 
	
	Если ТипЗнч(НастройкиОбъектовВыгрузки) <> Тип("Структура") Тогда
		НастройкиОбъектовВыгрузки = Новый Структура;
	КонецЕсли;
	
	Если НЕ Объект.ОбъектВыгрузки.Свойство("РежимОтбора") Тогда
		Объект.ОбъектВыгрузки.Вставить("РежимОтбора", 0);
	КонецЕсли; 
	УстановитьВидимостьДоступность();
	
	ТекущаяСтрока = ПолучитьНастройкуПоставщикаПоКоду();
	Если ТекущаяСтрока = Неопределено Тогда 
		НастройкиПоставщика = Неопределено;
	Иначе
		НастройкиПоставщика = ВозвратНастроекПоставщикаПоКодуВВидеСтруктура(ТекущаяСтрока);
	КонецЕсли;
	
	// +++
	Если НастройкиПоставщика <> Неопределено Тогда
		Если НастройкиПоставщика.Опциональные <> Неопределено Тогда
			Объект.v2ФорматВыгрузки = НастройкиПоставщика.Опциональные.v2ФорматВыгрузки;
		КонецЕсли;
	КонецЕсли;
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// ---	
	
	Объект.ТекстЗапроса = ОбработкаОбъект.ПолучитьТекстЗапроса(Объект.ОбъектВыгрузки, НастройкиПоставщика);			
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ТипЗнч(ТекущаяСтрока.ТекстЗапроса) = Тип("Структура") Тогда
			ТекущаяСтрока.ТекстЗапроса.Вставить(НастройкаВыгрузки, Объект.ТекстЗапроса);
		Иначе
			ТекстыЗапросов = Новый Структура;
			ТекстыЗапросов.Вставить(НастройкаВыгрузки, Объект.ТекстЗапроса);
			ТекущаяСтрока.ТекстЗапроса = ТекстыЗапросов;
		КонецЕсли;
		НастройкиПоставщиковСохранить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли; 
		
	УстановитьТекстПроизвольногоЗапросаПоУмолчанию();
 
	ИмяРеквизитаДата = "";
	// +++
	//ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	// ---
	Если (Объект.ОбъектВыгрузки.Тип <> "РегистрНакопления" И ОбработкаОбъект.ЭтоПериодическийОбъект(ИмяРеквизитаДата)) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяРеквизитаДата) Тогда
			Объект.ТекстЗапроса = Объект.ТекстЗапроса + "
					|{ГДЕ ТаблицаСсылок.Дата >= &НачДата}
					|{ГДЕ ТаблицаСсылок.Дата <= &КонДата}";
		Иначе
			Объект.ТекстЗапроса = Объект.ТекстЗапроса + "
					|{ГДЕ ТаблицаСсылок." + ИмяРеквизитаДата + " >= &НачДата}
					|{ГДЕ ТаблицаСсылок." + ИмяРеквизитаДата + " <= &КонДата}";
		КонецЕсли;
	КонецЕсли;
	
	// +++
	Если Объект.ОтборДанных = Неопределено
		И ЗначениеЗаполнено(ТекущийКодДистрибьютора) Тогда
		Сообщить("Интерактивно заполните ""Настройки отбора"" для объекта: "+Объект.ОбъектВыгрузки.Имя+"!");			
	КонецЕсли;
	// ---
	ЗаполнитьНастройки(КомпоновщикНастроек, Объект.ОтборДанных, Объект.ОбъектВыгрузки.Имя);
	
	Элементы.ДекорацияОбъектПоискаПиктограмма.Картинка = БиблиотекаКартинок[Объект.ОбъектВыгрузки.Тип];
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьСтруктуруОбъектаПоиска(Знач ТипОбъекта = "", Знач ИмяОбъекта = "", Знач СинонимОбъекта = "", ДобавлятьИмяОбъекта = Истина)

	Структура = Новый Структура;
	Структура.Вставить("Тип", ТипОбъекта);
	Структура.Вставить("Имя", ИмяОбъекта);
	Если ЗначениеЗаполнено(ТипОбъекта) Тогда 
		Структура.Вставить("ПолноеИмя", ТипОбъекта + "." + ИмяОбъекта);
		Структура.Вставить("Представление", СинонимОбъекта + ?(ДобавлятьИмяОбъекта, " (" + ТипОбъекта + "." + ИмяОбъекта + ")", ""));
	Иначе
		Структура.Вставить("ПолноеИмя", "");
		Структура.Вставить("Представление", "");
	КонецЕсли; 
	Структура.Вставить("РежимОтбора", 0);
	Возврат Структура;

КонецФункции // ЗаполнитьСтруктуруОбъектаПоиска()

// Процедура удаляет все элементы настроек СхемыКД 
//
&НаСервереБезКонтекста
Процедура ОчиститьНастройкиСКД(Настройки)
	
	Если Настройки = Неопределено ИЛИ Тип(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Значение = Неопределено;
		Параметр.Использование = Ложь;
	КонецЦикла;
	
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	Настройки.Отбор.Элементы.Очистить();
	Настройки.Порядок.Элементы.Очистить();
	Настройки.Структура.Очистить();
	Настройки.Выбор.Элементы.Очистить();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройки(КомпоновщикНастроек, Настройки, ОбъектВыгрузкиИмя)
	
	ОчиститьНастройкиСКД(КомпоновщикНастроек.Настройки);
			
	// +++	
	Если Объект.v2ФорматВыгрузки Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		Если Объект.Конфигурация = "ERP"
			Или Объект.Конфигурация = "КА"
			Или Объект.Конфигурация = "УТ" Тогда
			
			СхемаКомпоновки = ОбработкаОбъект.ПолучитьМакет("ПараметрыОтборы_ERP")
			
		ИначеЕсли Объект.Конфигурация = "БП" Тогда
			
			СхемаКомпоновки = ОбработкаОбъект.ПолучитьМакет("ПараметрыОтборы_БП")
			
		ИначеЕсли Объект.Конфигурация = "УНФ"
			Или (Объект.Конфигурация = "Розница" И ОбработкаОбъект.СравнитьВерсии(Объект.Версия, "3.0.1.0") >= 0) Тогда
			
			СхемаКомпоновки = ОбработкаОбъект.ПолучитьМакет("ПараметрыОтборы_УНФ")
			
		ИначеЕсли Объект.Конфигурация = "Розница" Тогда
						
			СхемаКомпоновки = ОбработкаОбъект.ПолучитьМакет("ПараметрыОтборы_Розница")
						
		КонецЕсли;				
	// ---	
	Иначе
		
		СхемаКомпоновки = Новый СхемаКомпоновкиДанных();		
		
		Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
		Источник.Имя = "ИсточникДанных";
		Источник.СтрокаСоединения="";
		Источник.ТипИсточникаДанных = "local";
		
		НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		
		НаборДанных.Запрос = Объект.ТекстЗапроса;		
		
		НаборДанных.Имя = "НаборДанныхЗапроса";
		НаборДанных.ИсточникДанных = Источник.Имя;
		НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
		
	КонецЕсли;						
					
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, ЭтаФорма.УникальныйИдентификатор);
	Попытка      
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	Исключение
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	// +++
	Если Объект.v2ФорматВыгрузки Тогда		
		
		Для каждого элемент Из СхемаКомпоновки.Параметры Цикл
			Если ЗначениеЗаполнено(элемент.Значение) Тогда
				КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(элемент.Имя, элемент.Значение);		
			КонецЕсли;
		КонецЦикла;

		тд = РеквизитФормыВЗначение("Объект").ЗаполнитьТипыДокументовПродаж();
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТипыДокументов", тд);		
	// ---	
	КонецЕсли;
								
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	//Если Не ПроверкаОтбора(КомпоновщикНастроек.Настройки.Отбор,КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора) Тогда
	//	КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();					
	//КонецЕсли;	
	
	Для каждого ЭлементДоступногоОтбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл	
		Если НЕ ЭлементДоступногоОтбора.Папка Тогда
			ДобавитьОтбор(КомпоновщикНастроек.Настройки.Отбор, ЭлементДоступногоОтбора.Поле, ,ВидСравненияКомпоновкиДанных.ВСписке, Ложь); 			
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры

Функция ПроверкаОтбора(Отбор, ДоступныеПоля)	
	Флаг = Истина;
	//Если есть повторения
	Для каждого Элемент Из ДоступныеПоля.Элементы Цикл
		сч = 0;
		Если Элемент.Папка Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Значения Из Отбор.Элементы Цикл
			Если Значения.ЛевоеЗначение = Элемент.Поле Тогда
				сч = сч+1;
			КонецЕсли;
		КонецЦикла;
		Если сч > 1 Или сч = 0 Тогда
			Флаг = Ложь;
		КонецЕсли;	
	КонецЦикла;
	Если Не Флаг Тогда
		Возврат Ложь;
	Иначе
		//Если есть неиспользуемые данные
		Для каждого Элемент Из Отбор.Элементы Цикл
			сч = 0;
			Для каждого Значения Из ДоступныеПоля.Элементы Цикл
				Если Значения.Папка Тогда
					Продолжить;
				КонецЕсли;

				Если Значения.Поле = Элемент.ЛевоеЗначение Тогда
					сч = сч+1;
				КонецЕсли;
			КонецЦикла;
			Если сч > 1 Или сч = 0 Тогда
				Флаг = Ложь;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	Если Не Флаг Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

// Добавляет отбор в набор отборов компоновщика или группы отборов
//
&НаСервереБезКонтекста
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	Для каждого Значения Из Отбор.Элементы Цикл
		Если 
			// +++
			НЕ ТипЗнч(Значения) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И
			// ---
			Значения.ЛевоеЗначение = Поле			
			Тогда
			Возврат Неопределено;	
		КонецЕсли;	
	КонецЦикла;
		
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	
	Возврат НовыйЭлемент;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтекстноеМенюНайденныеОбъекты()
	
	ГруппаМеню = Элементы.НайденныеОбъекты.КонтекстноеМеню;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВерсияКонфигурации835ИБольше()
	СистемнаяИнформация = Новый СистемнаяИнформация;
		
	Строка = СистемнаяИнформация.ВерсияПриложения;
	Результат = Новый Массив;
	
	Разделитель = ".";
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Результат.Добавить(Число(Подстрока));
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	Результат.Добавить(Число(Строка));
	Если Результат[1] >= 3 И Результат[2] >= 5 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияКонструктораЗапроса(ТекстЗапросаВФорме, ДопПараметры) Экспорт
	Если ТекстЗапросаВФорме <> Неопределено Тогда
		Объект.ТекстПроизвольногоЗапроса = ТекстЗапросаВФорме;
		ОбновитьПараметрыНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполненностьПолей(ПроверятьКолвоНайденных = Истина)
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// +++
	Если ОбработкаОбъект.v2ФорматВыгрузки Тогда
		Возврат Истина;	
	КонецЕсли;
	// ---
	
	ВыгружаемыеПоля = ВыгружаемыеДанные.Выгрузить(Новый Структура("Выбрать", Истина), "Имя, Тип");
	
	Если Не ОбработкаОбъект.КорректностьЗаполненияПолей(Ложь, ВыгружаемыеПоля) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьКолвоНайденных Тогда
		
		Если Объект.ОбъектВыгрузки.Тип = "Справочник" Тогда
			
			Если НайденныеОбъекты.Количество() > 0 Тогда 
				Возврат Истина;
			Иначе 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не найдено ни одного объекта для выгрузки!";
				Сообщение.Поле = "НайденныеОбъекты";
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;	
						
		ИначеЕсли Объект.ОбъектВыгрузки.Тип = "РегистрНакопления" Тогда
			
			Если Объект.ОбъектВыгрузки.Имя = "ВыручкаИСебестоимостьПродаж" Тогда 
				ДЗ = РеквизитФормыВЗначение("ДокументыПродаж", Тип("ДеревоЗначений"));
				ТекстСообщения = "Не найдено ни одного документа продажи для выгрузки!";
			ИначеЕсли Объект.ОбъектВыгрузки.Имя = "ТоварыНаСкладах" Тогда 
				ДЗ = РеквизитФормыВЗначение("ОстаткиТоваров", Тип("ДеревоЗначений"));
				ТекстСообщения = "Не найдено ни одной записи об остатках товаров для выгрузки!";
			Иначе 
				ДЗ = Неопределено;
			КонецЕсли;
			
			Если ТипЗнч(ДЗ) = Тип("ДеревоЗначений") Тогда 
				Если ДЗ.Строки.Количество() > 0 Тогда
					Возврат Истина;	
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстСообщения;
					Сообщение.Сообщить();
					Возврат Ложь;	
				КонецЕсли;
			Иначе 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Неизвестное имя объекта выгрузки!";
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли Объект.ОбъектВыгрузки.Тип = "Документ" Тогда
			
			ДЗ = РеквизитФормыВЗначение("ДокументыОплаты", Тип("ДеревоЗначений"));
			ТекстСообщения = "Не найдено ни одного документа оплат от клиентов для выгрузки!";
			
			Если ТипЗнч(ДЗ) = Тип("ДеревоЗначений") Тогда 
				Если ДЗ.Строки.Количество() > 0 Тогда
					Возврат Истина;	
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстСообщения;
					Сообщение.Сообщить();
					Возврат Ложь;	
				КонецЕсли;
			Иначе 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Неизвестное имя объекта выгрузки!";
				Сообщение.Сообщить();
				Возврат Ложь;
			КонецЕсли;
		Иначе
			ВызватьИсключение("Неизвестный тип метаданных объекта выгрузки!");
			Возврат Ложь;
		КонецЕсли;
	Иначе 
		Возврат Истина;
	КонецЕсли;
			
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНесопоставленнуюНоменклатуруСФТП()
	
	Попытка
		ИмяФайла = "NotMappedGoods.txt";
		КаталогЗагрузки = СокрЛП(Объект.КаталогОбмена);
		
		Если УспешностьЗагрузкиНесопоставленнойНоменклатурыСФТП(ИмяФайла, КаталогЗагрузки) Тогда
			
			ПолноеИмяФайла = СокрЛП(Объект.КаталогОбмена) + "/" + ИмяФайла;		
			СтруктураИмени = СтруктураИмениФайла(ПолноеИмяФайла);
			ИмяФайлаБезРасширения = СтруктураИмени.ИмяБезРасширения;	
			
			Если ИмяФайлаБезРасширения = "NotMappedGoods" Тогда
				
				НастройкаВыгрузки = "Номенклатура";			
				УстановитьОбъектПоиска(НастройкаВыгрузки);
				
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Неизвестное имя файла """ + ПолноеИмяФайла + """" + ". Не удалось определить объект выгрузки.";
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;
			
			ЗаполнитьНайденныеОбъектыИзФайла(ПолноеИмяФайла, "Справочник", "Номенклатура", Истина);
		КонецЕсли;
		
	Исключение
		ВызватьИсключение("Не удалось загрузить список несопоставленной номенклатуры с FTP-сервера: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСФТП(ИмяФайла, КаталогОбмена = Неопределено)
			
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ПодключениеКФТП = ОбработкаОбъект.СоздатьПодключениеКФТП(); 
	Если ТипЗнч(ПодключениеКФТП) <> Тип("FTPСоединение") Тогда
		Результат = Новый Структура;
		Результат.Вставить("ТекстСообщения", ПодключениеКФТП);
		Результат.Вставить("СтатусЗаписи", "Ошибка ФТП:");
		Результат.Вставить("Успешность", Ложь);

		Возврат Результат;
		
	КонецЕсли;	
	
	Объект.ПодключениеУстановлено = Истина;
	
	КаталогОбмена = ?(КаталогОбмена = Неопределено, СокрЛП(Объект.КаталогОбмена), КаталогОбмена);
	
	// поиск и получение файла загрузки
	Попытка
		ПутьКФайлуНаСервере = СтрЗаменить(СокрЛП(Объект.КаталогНаСервере), "\", "/");
		МассивФайлов = ПодключениеКФТП.НайтиФайлы(ПутьКФайлуНаСервере + "/" +ИмяФайла);
		Если МассивФайлов.Количество() = 0 Тогда
			Результат = Новый Структура;
			Результат.Вставить("ТекстСообщения", "Файл для загрузки " + ИмяФайла + " в каталоге " + ПутьКФайлуНаСервере + " на FTP-сервере отсутствует.");
			Результат.Вставить("СтатусЗаписи", "Информация:");
			Результат.Вставить("Успешность", Ложь);
			
		Иначе			
			ФайлЗагрузки = МассивФайлов[0];			
					
			СтарыеФайлы = НайтиФайлы(КаталогОбмена + "/" + ИмяФайла);
			
			Если СтарыеФайлы.Количество() <> 0 Тогда
				УдалитьФайлы(КаталогОбмена + "/" + ИмяФайла); 
			КонецЕсли;
				
			ПодключениеКФТП.Получить(ПутьКФайлуНаСервере + "/" +ИмяФайла,  КаталогОбмена + "/" + ИмяФайла);
			ПодключениеКФТП.Удалить(ПутьКФайлуНаСервере + "/" +ИмяФайла); 
			
			Результат = Новый Структура;
			Результат.Вставить("ТекстСообщения", "Получен с FTP файл " + ИмяФайла);
			Результат.Вставить("СтатусЗаписи", "Информация:");
			Результат.Вставить("Успешность", Истина);
			
		КонецЕсли;
	Исключение	
		
		Результат = Новый Структура;
		Результат.Вставить("ТекстСообщения", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Результат.Вставить("СтатусЗаписи", "Ошибка ФТП:");
		Результат.Вставить("Успешность", Ложь);
		
	КонецПопытки;	
	
	Возврат Результат;	

КонецФункции

Функция КлючНастройкиВыгрузки(Настройка)
	
	Если Настройка = "Продажи" Тогда
		КлючНастройки = "АП_УД_Выгрузка_продаж";
	ИначеЕсли Настройка = "Остатки" Тогда
		КлючНастройки = "АП_УД_Выгрузка_остатков";
	ИначеЕсли Настройка = "Номенклатура" Тогда
		КлючНастройки = "АП_УД_Выгрузка_номенклатуры";
	ИначеЕсли Настройка = "ТорговыеТочки" Тогда
		КлючНастройки = "АП_УД_Выгрузка_ТТ";
	ИначеЕсли Настройка = "Менеджеры" Тогда
		КлючНастройки = "АП_УД_Выгрузка_Менеджеров";
	ИначеЕсли Настройка = "Склады" Тогда
		КлючНастройки = "АП_УД_Выгрузка_Складов";
	ИначеЕсли Настройка = "Оплаты" Тогда
		КлючНастройки = "АП_УД_Выгрузка_оплат";	
	ИначеЕсли Настройка = "Контрагенты" Тогда
		КлючНастройки = "АП_УД_Выгрузка_Контрагентов";	
	Иначе 
		ТекстСообщения = НСтр("ru = 'Передано некорректное значение настройки выгрузки.'");
		ВызватьИсключение(ТекстСообщения);
		Возврат "";
	КонецЕсли;
	
	Возврат КлючНастройки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьДанныеНаСервере()
		
	Попытка
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		//ОбработкаОбъект.ВыгрузитьДанныеПоЗаданию("АП_УД_Выгрузка_продаж");
				
		СтруктураДанных = Неопределено;
		
		СтрокаНастроек = ПолучитьНастройкуПоставщикаПоКоду();
		НастройкиПоставщика = Новый Структура();
		НастройкиПоставщика.Вставить("КодДистрибьютора",ТекущийКодДистрибьютора);
		НастройкиПоставщика.Вставить("НастройкиFTP",СтрокаНастроек.НастройкиFTP);
		НастройкиПоставщика.Вставить("ИспользоватьFTP",СтрокаНастроек.ИспользоватьFTP);
		НастройкиПоставщика.Вставить("КаталогОбмена",СтрокаНастроек.КаталогОбмена);
		НастройкиПоставщика.Вставить("Опциональные",СтрокаНастроек.Опциональные);						
		// +++
		НастройкиПоставщика.Вставить("ВыгружатьАдресДоставкиКакТТ",СтрокаНастроек.ВыгружатьАдресДоставкиКакТТ);
		НастройкиПоставщика.Вставить("ВыгружатьДанныеАвтоматическиЗаПоследние",СтрокаНастроек.ВыгружатьДанныеАвтоматическиЗаПоследние);
		НастройкиПоставщика.Вставить("АгентИзДокументов",СтрокаНастроек.АгентИзДокументов);
		
		Если СтрокаНастроек.КоэффициентыУпаковок = Неопределено Тогда
			КУ = Неопределено;
		Иначе
			КУ = СтрокаНастроек.КоэффициентыУпаковок.КоэффициентыУпаковок;	
		КонецЕсли;	
		НастройкиПоставщика.Вставить("КоэффициентыУпаковок", КУ);			
				
		Если Объект.v2ФорматВыгрузки Тогда
						
			Если Объект.НачПериода = Дата("00010101") ИЛИ Объект.КонецПериода = Дата("00010101") Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не указан период поиска объектов. Укажите, пожалуйста, границы периода.";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
			
			//Если НЕ ЗначениеЗаполнено(ТекущийКодДистрибьютора) Тогда
			//	СообщениеНеУказанТекущийДистрибьютор();
			//	Возврат;
			//КонецЕсли;						
			
			Если Объект.ОбъектВыгрузки.Тип = "РегистрНакопления" Тогда
				Если Объект.ОбъектВыгрузки.Имя = "ВыручкаИСебестоимостьПродаж" // ERP
					Или Объект.ОбъектВыгрузки.Имя = "Продажи" Тогда // Розница	
					
					КлючНастройки = КлючНастройкиВыгрузки("Продажи");
					Результат = ОбработкаОбъект.ДЗПродажи(,КлючНастройки,,,НастройкиПоставщика);
					
				ИначеЕсли Объект.ОбъектВыгрузки.Имя = "ТоварыНаСкладах" // ERP	
					Или Объект.ОбъектВыгрузки.Имя = "Запасы" // УНФ3
					Или Объект.ОбъектВыгрузки.Имя = "ТоварыОрганизаций" Тогда // Розница
					
					КлючНастройки = КлючНастройкиВыгрузки("Остатки");
					Результат = ОбработкаОбъект.ДЗОстаткиТоваров(,КлючНастройки,,,,НастройкиПоставщика);
					
				КонецЕсли;
			ИначеЕсли Объект.ОбъектВыгрузки.Тип = "РегистрБухгалтерии" Тогда // БП
				Если Объект.ОбъектВыгрузки.Имя = "Хозрасчетный" Тогда
					
					КлючНастройки = КлючНастройкиВыгрузки("Остатки");
					Результат = ОбработкаОбъект.ДЗОстаткиТоваров(,КлючНастройки,,,,НастройкиПоставщика);
					
				КонецЕсли;				
			ИначеЕсли Объект.ОбъектВыгрузки.Тип = "Документ" Тогда  // БП
				Если Объект.ОбъектВыгрузки.Имя = "РеализацияТоваровУслуг" Тогда
					
					КлючНастройки = КлючНастройкиВыгрузки("Продажи");
					Результат = ОбработкаОбъект.ДЗПродажи(,КлючНастройки,,,НастройкиПоставщика);			
					
				КонецЕсли;				
			КонецЕсли;
			
			Если Результат <> Неопределено Тогда
				
				ДанныеФайла = Новый Структура;
				ДанныеФайла.Вставить("КлючНастройки", КлючНастройки);
				
				ФайлыTXT = Новый Массив;
				Для каждого КлючИЗначение Из Результат Цикл			
					
					ДанныеФайла.Вставить("Тело", КлючИЗначение.Значение);
					ДанныеФайла.Вставить("МаскаИмени", КлючИЗначение.Ключ);
					ДанныеФайла.Вставить("ВыгруженоЭлементов", "Много");
					ДанныеФайла.Вставить("ДанныеСопутствующейНСИ", Неопределено);
					
					ОбработкаОбъект.ЗаписатьФайлВыгрузкиНаСервере_2(ФайлыTXT, ДанныеФайла, КлючНастройки, НастройкиПоставщика);			
					
				КонецЦикла;
				
				ОбработкаОбъект.АрхивироватьФайлы_v2(ФайлыTXT,КлючНастройки,,НастройкиПоставщика);
				
			Иначе 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не удалось выгрузить данные.'");
				Сообщение.Сообщить();
			КонецЕсли;
			
			Возврат

		КонецЕсли;
		// ---
			
		Если Объект.ОбъектВыгрузки.Тип = "РегистрНакопления" Тогда
			
			СопутствующаяНСИ = Новый Соответствие;
			
			Если Объект.ОбъектВыгрузки.Имя = "ВыручкаИСебестоимостьПродаж" Тогда 
				КлючНастройки = КлючНастройкиВыгрузки("Продажи");
				
				ДанныеВыгрузкиНоменклатуры = Новый Структура;
				ДанныеВыгрузкиНоменклатуры.Вставить("ВыгружаемыеЭлементы", СвязаннаяНоменклатура.Выгрузить());
				СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("Номенклатура"), ДанныеВыгрузкиНоменклатуры);
				
				ДанныеВыгрузкиТТ = Новый Структура;
				ДанныеВыгрузкиТТ.Вставить("ВыгружаемыеЭлементы", СвязанныеТорговыеТочки.Выгрузить());
				СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("ТорговыеТочки"), ДанныеВыгрузкиТТ);
				
				ДанныеВыгрузкиАгенты = Новый Структура;
				ДанныеВыгрузкиАгенты.Вставить("ВыгружаемыеЭлементы", СвязанныеАгенты.Выгрузить());
				СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("Менеджеры"), ДанныеВыгрузкиАгенты);
				
				ДанныеВыгрузкиКонтрагенты = Новый Структура;
				ДанныеВыгрузкиКонтрагенты.Вставить("ВыгружаемыеЭлементы", СвязанныеКонтрагенты.Выгрузить());
				СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("Контрагенты"), ДанныеВыгрузкиКонтрагенты);
				
				ДанныеВыгрузкиСклады = Новый Структура;
				ДанныеВыгрузкиСклады.Вставить("ВыгружаемыеЭлементы", СвязанныеСклады.Выгрузить());
				СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("Склады"), ДанныеВыгрузкиСклады);
				
				Результат = ОбработкаОбъект.ВыгрузитьДанныеДЗ(КлючНастройки, РеквизитФормыВЗначение("ДокументыПродаж", Тип("ДеревоЗначений")), СопутствующаяНСИ,,ТекущийКодДистрибьютора, НастройкиПоставщика);
				
			ИначеЕсли Объект.ОбъектВыгрузки.Имя = "ТоварыНаСкладах" Тогда	
				КлючНастройки = КлючНастройкиВыгрузки("Остатки");
				
				СтрокаНастроек = ПолучитьНастройкуПоставщикаПоКоду();
				НастройкиПоставщика = ВозвратНастроекПоставщикаПоКодуВВидеСтруктура(СтрокаНастроек);
				
				ДанныеОстатковТоваров = ОбработкаОбъект.ДЗОстаткиТоваров(,,Ложь,,,НастройкиПоставщика);
				
				ДеревоОстатков		  = ДанныеОстатковТоваров.ДеревоОстаткиТоваров;
				Номенклатура 		  = ДанныеОстатковТоваров.НоменклатураОстатковТоваров;
				Склады		 		  = ДанныеОстатковТоваров.СкладыОстатковТоваров;
				
				ДанныеВыгрузкиНоменклатуры = Новый Структура;
				ДанныеВыгрузкиНоменклатуры.Вставить("ВыгружаемыеЭлементы", Номенклатура);
				СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("Номенклатура"), ДанныеВыгрузкиНоменклатуры);
				
				ДанныеВыгрузкиСклады = Новый Структура;
				ДанныеВыгрузкиСклады.Вставить("ВыгружаемыеЭлементы", Склады);
				СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("Склады"), ДанныеВыгрузкиСклады);
				
				ДанныеВыгрузкиАгенты = Новый Структура;
				ДанныеВыгрузкиАгенты.Вставить("ВыгружаемыеЭлементы", СвязанныеАгенты.Выгрузить());
				СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("Менеджеры"), ДанныеВыгрузкиАгенты);
				
				Результат = ОбработкаОбъект.ВыгрузитьДанныеДЗ(КлючНастройки, ДеревоОстатков, СопутствующаяНСИ,,ТекущийКодДистрибьютора, НастройкиПоставщика);
			Иначе 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Неизвестное имя объекта выгрузки!";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
			
		ИначеЕсли Объект.ОбъектВыгрузки.Тип = "Справочник" Тогда
			СтруктураОтбора = Новый Структура("Выбрать", Истина);
			СписокОбъектов = НайденныеОбъекты.Выгрузить(СтруктураОтбора, "Объект").ВыгрузитьКолонку("Объект");
			ВыгружаемыеПоля = ВыгружаемыеДанные.Выгрузить(СтруктураОтбора, "Имя, Тип");
			СтруктураДанных = ОбработкаОбъект.ВыгрузитьНСИ(СписокОбъектов, ВыгружаемыеПоля);
		ИначеЕсли Объект.ОбъектВыгрузки.Тип = "Документ" Тогда
			СопутствующаяНСИ = Новый Соответствие;
			
			КлючНастройки = КлючНастройкиВыгрузки("Оплаты");
			
			ДанныеВыгрузкиТТ = Новый Структура;
			ДанныеВыгрузкиТТ.Вставить("ВыгружаемыеЭлементы", СвязанныеТорговыеТочки.Выгрузить());
			СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("ТорговыеТочки"), ДанныеВыгрузкиТТ);
			
			ДанныеВыгрузкиАгенты = Новый Структура;
			ДанныеВыгрузкиАгенты.Вставить("ВыгружаемыеЭлементы", СвязанныеАгенты.Выгрузить());
			СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("Менеджеры"), ДанныеВыгрузкиАгенты);
			
			ДанныеВыгрузкиКонтрагенты = Новый Структура;
			ДанныеВыгрузкиКонтрагенты.Вставить("ВыгружаемыеЭлементы", СвязанныеКонтрагенты.Выгрузить());
			СопутствующаяНСИ.Вставить(КлючНастройкиВыгрузки("Контрагенты"), ДанныеВыгрузкиКонтрагенты);
			
			Результат = ОбработкаОбъект.ВыгрузитьДанныеДЗ(КлючНастройки, РеквизитФормыВЗначение("ДокументыОплаты", Тип("ДеревоЗначений")), СопутствующаяНСИ,,ТекущийКодДистрибьютора, НастройкиПоставщика);						
		Иначе
			ВызватьИсключение("Неизвестный тип метаданных объекта выгрузки!");
			Возврат;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			ОбработкаОбъект.ЗаписатьФайлВыгрузкиНаСервере(Результат,,,,,НастройкиПоставщика);
		Иначе 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не удалось выгрузить данные.'");
			Сообщение.Сообщить();
		КонецЕсли;
	
	Исключение
		ВызватьИсключение("Не удалось выгрузить данные: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция КлючиНастроекМаскиИменФайловВыгрузки()
	
	МаскиИменФайловВыгрузки = Новый Структура;

	МаскиИменФайловВыгрузки.Вставить("АП_УД_Выгрузка_остатков", 	"GoodsInStock");
	МаскиИменФайловВыгрузки.Вставить("АП_УД_Выгрузка_продаж", 		"Sales");
	МаскиИменФайловВыгрузки.Вставить("АП_УД_Выгрузка_оплат", 		"BankStatements");
	//МаскиИменФайловВыгрузки.Вставить("АП_УД_Выгрузка_номенклатуры", "GoodsMapping");
	//МаскиИменФайловВыгрузки.Вставить("АП_УД_Выгрузка_ТТ", 			"PointsOfSalesMapping");
	
	Возврат МаскиИменФайловВыгрузки;

КонецФункции

Функция МаскаИмениФайлаВыгрузки(КлючНастройки)
	
	МаскаИмени = "";
	МаскиИменФайловВыгрузки = КлючиНастроекМаскиИменФайловВыгрузки();	
	Если Не МаскиИменФайловВыгрузки.Свойство(КлючНастройки, МаскаИмени) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Передано некорректное значение ключа настройки выгрузки.: ""%1"".'"),
                     	КлючНастройки);	 
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат МаскаИмени;
	
КонецФункции


Процедура ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщенияПользователю, УровеньСообщения, КлючНастройки = "") Экспорт
	
	ИмяПодчиненногоСобытия = "";
	
	Если КлючНастройки = "АП_УД_Выгрузка_продаж" Тогда
		 ИмяПодчиненногоСобытия = ". Продажи";
	ИначеЕсли КлючНастройки = "АП_УД_Выгрузка_номенклатуры" Тогда
		 ИмяПодчиненногоСобытия = ". Номенклатура";	
	ИначеЕсли КлючНастройки = "АП_УД_Выгрузка_остатков" Тогда
		 ИмяПодчиненногоСобытия = ". Остатки";
	 ИначеЕсли КлючНастройки = "АП_УД_Выгрузка_ТТ" Тогда
		 ИмяПодчиненногоСобытия = ". Торговые точки";	
	 ИначеЕсли КлючНастройки = "АП_УД_Выгрузка_оплат" Тогда
		 ИмяПодчиненногоСобытия = ". Оплаты";	
	 КонецЕсли;
	 
	ЗаписьЖурналаРегистрации("Выгрузка данных для УД " + ИмяПодчиненногоСобытия, УровеньСообщения, , , ТекстСообщенияПользователю);
		
КонецПроцедуры

Процедура ВыгрузитьДанныеВФайл(ДанныеФайла, ПоРасписанию = Ложь, Настройки = Неопределено)
//Процедура ВыгрузитьДанныеВФайл(ДанныеФайла, КлючНастройки, ПоРасписанию = Ложь, Настройки = Неопределено)
	
	//СтрокаОбязательныхНастроек = "КаталогВыгрузки, ФайлЛогаВыгрузки, ВыгружатьНаФТПСервер";
	//Если ПоРасписанию Тогда			
	//	//ДанныеНастроек = НаличиеОбязательныхНастроек(Настройки, СтрокаОбязательныхНастроек);
	//	//Если Не ДанныеНастроек.Наличие Тогда
	//	//	Возврат;
	//	//КонецЕсли;
	//	Каталог = Настройки.КаталогВыгрузки;
	//	ИмяФайлаЛога = Настройки.ФайлЛогаВыгрузки;
	//	ВыгрузитьНаФТП = Настройки.ВыгружатьНаФТПСервер;
	//Иначе 
	//	Каталог = СокрЛП(Объект.КаталогОбмена);
	//	ВыгрузитьНаФТП = Объект.ИспользоватьФТПСервер;
	//КонецЕсли;
	//
	//Если (Прав(Каталог, 1) <> "/" И Прав(Каталог, 1) <> "\") Тогда
	//	Если Найти(Каталог, "/") > 0 Тогда
	//		Каталог = Каталог + "/";
	//	ИначеЕсли Найти(Каталог, "\") > 0 Тогда
	//		Каталог = Каталог + "\";
	//	КонецЕсли;	
	//КонецЕсли;	

	//СтрокаТекДата = Строка(ТекущаяДата());
	//СтрокаТекДата = СтрЗаменить(СтрокаТекДата, ":", "");
	//СтрокаТекДата = СтрЗаменить(СтрокаТекДата, ".", "");
	//СтрокаТекДата = СтрЗаменить(СтрокаТекДата, " ", "_");
	//
	//
	//КлючНастройки = ДанныеФайла.КлючНастройки;
	//МаскаИмени = МаскаИмениФайлаВыгрузки(КлючНастройки);
	//
	//ИмяФайлаБезРасширения = МаскаИмени + "_" + СтрокаТекДата;
	//ИмяФайлаXML			  = ИмяФайлаБезРасширения + ".xml";
	//ПолноеИмяФайлаXML	  = Каталог + ИмяФайлаXML;
	//
	//Попытка
	//	ФайлXML = Новый ЗаписьТекста(ПолноеИмяФайлаXML);
	//	ФайлXML.Записать(ДанныеФайла.СтрокаXML);
	//	ФайлXML.Закрыть();
	//	
	//Исключение
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать XML-файл %1 по причине: %2'"),
	//	ПолноеИмяФайлаXML, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	 
	//	ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, КлючНастройки);
	//	ВызватьИсключение(ТекстСообщения);
	//	Возврат;
	//КонецПопытки;
	//
	//ЗаписанАрхив = Ложь;
	//ИмяСформированногоФайла = "";
	//Попытка
	//	ИмяАрхивногоФайла = ИмяФайлаБезРасширения + ".zip";
	//	ПолноеИмяАрхивногоФайла = Каталог + ИмяАрхивногоФайла;
	//	ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяАрхивногоФайла);
	//	// Добавим необходимые файлы в архив
	//		ЗаписьZIP.Добавить(ПолноеИмяФайлаXML);
	//	// Запишем архив на диск
	//	ЗаписьZIP.Записать();
	//	ИмяСформированногоФайла = ИмяАрхивногоФайла;
	//	ЗаписанАрхив = Истина;
	//Исключение
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать файл архива %1 по причине: %2'"),
	//	ПолноеИмяАрхивногоФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	 
	//	ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, КлючНастройки);
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//	ИмяСформированногоФайла = ИмяФайлаXML;
	//	
	//КонецПопытки;
	//
	//Если ЗаписанАрхив Тогда	
	//	Попытка
	//			УдалитьФайлы(ПолноеИмяФайлаXML);
	//		Исключение
	//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить файл %1 по причине: %2'"),
	//					ПолноеИмяФайлаXML, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	 
	//			ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Предупреждение, КлючНастройки);
	//		КонецПопытки;
	//КонецЕсли;
	//
	//ФайлПомещенНаФТП = Ложь;
	//ВыгрузкаУспешна = Истина;
	//Если ВыгрузитьНаФТП Тогда	
	//	ПолноеИмяСформированногоФайла = Каталог + ИмяСформированногоФайла;
	//	Если Не ВыгрузитьНаФТП(ИмяСформированногоФайла, ПоРасписанию, Настройки) Тогда
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать файл выгрузки %1 на FTP-сервер.'"),
	//					ПолноеИмяСформированногоФайла);	
	//		//СделатьЗаписьВЛог(ТекстСообщения, "Ошибка:", ИмяФайлаЛога);
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//		ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, КлючНастройки);
	//		ВыгрузкаУспешна = Ложь;
	//	Иначе 
	//		ФайлПомещенНаФТП = Истина;
	//	КонецЕсли;	
	//	
	//	Попытка
	//		УдалитьФайлы(ПолноеИмяСформированногоФайла);
	//	Исключение
	//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить файл %1 по причине: %2'"),
	//							ПолноеИмяСформированногоФайла, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	 
	//		ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Предупреждение, КлючНастройки);
	//	КонецПопытки;
	//КонецЕсли;
	//
	////ПредставлениеВыгружаемыхДанных = Объект.ВыгружаемыеДанные(КлючНастройки, "Р");
	////Если ВыгрузкаУспешна Тогда
	////	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Символы.ПС + Строка(ТекущаяДата())+НСтр("ru = ': Выгрузка %1 завершена.'"),
	////							ПредставлениеВыгружаемыхДанных);
	////	//Для каждого ТекДанные Из ДанныеФайла Цикл
	////			
	////		ТекстСообщения = ТекстСообщения + Символы.ПС + 
	////		 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выгружено %1 записей %2.'"),
	////				ДанныеФайла.ВыгруженоЭлементов, ПредставлениеВыгружаемыхДанных);
	////				
	////	//КонецЦикла;
	////	ДанныеСопутствующейНСИ = Неопределено;
	////	Если ДанныеФайла.Свойство("ДанныеСопутствующейНСИ", ДанныеСопутствующейНСИ) И ТипЗнч(ДанныеСопутствующейНСИ) = Тип("Соответствие") Тогда	
	////		//Для каждого ТекСправочник Из ДанныеСопутствующейНСИ Цикл
	////		//	ТекстСообщения = ТекстСообщения + Символы.ПС + 
	////		//	 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выгружено %1 записей %2.'"),
	////		//			ТекСправочник.Значение, ОбработкаОбъект.НаименованиеДанных(ТекСправочник.Ключ, "Р"));
	////		//КонецЦикла;
	////	КонецЕсли;
	////	
	////	ТекстСообщения = ТекстСообщения + Символы.ПС + 
	////		 	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сформирован файл выгрузки %1, размещенный '"),
	//				ИмяСформированногоФайла) + ?(ФайлПомещенНаФТП,
	//			НСтр("ru = 'на FTP-сервере.'"),
	//			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'в каталоге %1.'"),
	//				Каталог));						
	//Иначе
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выгрузка %1 завершена.'"),
	//							ПредставлениеВыгружаемыхДанных);	
	//КонецЕсли;
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	//Если ВыгрузитьНаФТП Тогда
	//	//СделатьЗаписьВЛог(ТекстСообщения, "Информация:", ИмяФайлаЛога);
	//КонецЕсли;
	//ЗаписатьИнформациюВЖурналРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Информация, КлючНастройки);
	
КонецПроцедуры	

&НаСервере
Функция ОбновитьПараметрыНаСервере()
	
	Если ПустаяСтрока(Объект.ТекстПроизвольногоЗапроса) Тогда
		Возврат "Отсутствует текст запроса.";
	КонецЕсли;
	
	Запрос = Новый Запрос(Объект.ТекстПроизвольногоЗапроса);
	Попытка
		ПараметрыВЗапросе = Запрос.НайтиПараметры();
	Исключение
		Возврат КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ИндексСтроки = 0;
		
	КолвоПараметров = ПараметрыЗапроса.Количество();
	
	Пока ИндексСтроки < КолвоПараметров Цикл
		
		ИмяПараметра = ПараметрыЗапроса[ИндексСтроки].ИмяПараметра;
		СтрокаПараметров = ПараметрыВЗапросе.Найти(ИмяПараметра);
		Если  СтрокаПараметров = Неопределено Тогда
			ПараметрыЗапроса.Удалить(ПараметрыЗапроса[ИндексСтроки]);
			КолвоПараметров = КолвоПараметров - 1;
		Иначе 
			ИндексСтроки = ИндексСтроки + 1;
		
		КонецЕсли; 
		
	КонецЦикла;
		
	Для каждого ПараметрЗапроса Из ПараметрыВЗапросе Цикл
		ИмяПараметра =  ПараметрЗапроса.Имя;
		СтрокаПараметров = ПараметрыЗапроса.НайтиСтроки(Новый Структура("ИмяПараметра", ИмяПараметра));
		Если  СтрокаПараметров.Количество() = 0 Тогда
			СтрокаПараметров = ПараметрыЗапроса.Добавить();
			СтрокаПараметров.ИмяПараметра = ИмяПараметра;
			СтрокаПараметров.ТипПараметра = Новый ОписаниеТипов(ПараметрЗапроса.ТипЗначения);
		Иначе 
			СтрокаПараметров = СтрокаПараметров[0];
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоляОбъекта(ВосстанавливаемыеДанные = Неопределено)
	
	ИскомыйОбъект = Объект.ОбъектВыгрузки;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИскомыйОбъект.ПолноеИмя);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТипЧисло = Тип("Число");
	ТипСтрока = Тип("Строка");
	ТипUID = Тип("УникальныйИдентификатор");
	
	ТипДата = Тип("Дата");
		
	Если ИскомыйОбъект.Тип = "Справочник" Тогда
		
		ВыгружаемыеДанные.Очистить();
			
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				
				ДобавитьПоле(ОбъектМетаданных.СтандартныеРеквизиты.Наименование, , ВосстанавливаемыеДанные);
				
			КонецЕсли;
			Если ОбъектМетаданных.ДлинаКода <> 0 Тогда			
				ДобавитьПоле(ОбъектМетаданных.СтандартныеРеквизиты.Код, , ВосстанавливаемыеДанные);
			КонецЕсли;	
		
		Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			
			Если Реквизит.Тип.СодержитТип(ТипЧисло) Или Реквизит.Тип.СодержитТип(ТипUID) Или Реквизит.Тип.СодержитТип(ТипДата) Тогда
				
				ДобавитьПоле(Реквизит, , ВосстанавливаемыеДанные);
	
			ИначеЕсли Реквизит.Тип.СодержитТип(ТипСтрока) И Реквизит.Тип.КвалификаторыСтроки.Длина <> 0 Тогда
				
				ДобавитьПоле(Реквизит, , ВосстанавливаемыеДанные);
				
			КонецЕсли; 
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоле(Поле, ТипПоля = "Реквизит", ВосстанавливаемыеДанные = Неопределено)
	
	НовПоле = ВыгружаемыеДанные.Добавить();
	НовПоле.Имя = Поле.Имя;
	Если Поле.Синоним = "" Тогда 
		НовПоле.Синоним = Поле.Имя;
	Иначе 
		НовПоле.Синоним = Поле.Синоним;
	КонецЕсли;
	
	Если ТипПоля = "Реквизит" Тогда
		НовПоле.Картинка = 0;
	ИначеЕсли ТипПоля = "Измерение" Тогда
		НовПоле.Картинка = 2;
	ИначеЕсли ТипПоля = "Ресурс" Тогда
		НовПоле.Картинка = 1;
	КонецЕсли;
	
	НовПоле.Тип = Поле.Тип;
	Если ТипЗнч(ВосстанавливаемыеДанные) = Тип("Массив") Тогда
		НайденноеПоле = ВосстанавливаемыеДанные.Найти(Поле);
		НовПоле.Выбрать = ?(НайденноеПоле = Неопределено, Истина, Ложь);
	Иначе
		НовПоле.Выбрать = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СсылкаНаЭлементСправочника(ИмяСправочника, ИдентификаторЭлемента)
	
	Возврат Справочники[ИмяСправочника].ПолучитьСсылку(ИдентификаторЭлемента);
	
КонецФункции

&НаКлиенте
Функция СсылкиИзФайла(ИмяФайла, ТипМетаданных, ИмяОбъекта)
	
	ФайлЗапроса = Новый ЧтениеТекста(ИмяФайла);
	
	ТекСтрока = ФайлЗапроса.ПрочитатьСтроку();
	
	Ссылки = Новый Массив();
	
	Пока ТекСтрока <> Неопределено Цикл
		Если СокрЛП(ТекСтрока) <> "" Тогда	
			Попытка	
				ТекИдентификатор = Новый УникальныйИдентификатор(СокрЛП(ТекСтрока));
				
				Если ТипМетаданных = "Справочник" Тогда
					
					ТекСсылка = СсылкаНаЭлементСправочника(ИмяОбъекта, ТекИдентификатор);
					Ссылки.Добавить(ТекСсылка);
					
				Иначе 
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Обработка не поддерживает загрузку объектов метаданных типа " + " """ + ТипМетаданных + """.";
					Сообщение.Сообщить();	
					Возврат Неопределено;
						
				КонецЕсли;
							
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось получить ссылку объекта из строки """ + СокрЛП(ТекСтрока) + """. Описание ошибки:" + ИнформацияОбОшибке().Описание;
				Сообщение.Сообщить();
				Возврат Неопределено;
				
			КонецПопытки;				
		КонецЕсли;	
		ТекСтрока = ФайлЗапроса.ПрочитатьСтроку();
	КонецЦикла;
	
	ФайлЗапроса.Закрыть();	
	
	Возврат Ссылки;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьНайденныеОбъектыИзФайла(ИмяФайла, ТипМетаданных, ИмяОбъекта, ФайлНаСервере = Ложь)
	
	Состояние(НСтр("ru = 'Поиск объектов...'"), , , БиблиотекаКартинок.Найти);
		
	Если ФайлНаСервере Тогда 
		СписокСсылок = СсылкиИзФайлаНаСервере(ИмяФайла, ТипМетаданных, ИмяОбъекта);
	Иначе 
		СписокСсылок = СсылкиИзФайла(ИмяФайла, ТипМетаданных, ИмяОбъекта);
	КонецЕсли;
	ЗагрузитьНайденныеОбъектыПоСсылкам(СписокСсылок);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Список номенклатуры успешно загружен из файла.";
	Сообщение.Сообщить();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНайденныеОбъекты;
	
КонецПроцедуры

&НаСервере
Функция СсылкиИзФайлаНаСервере(ИмяФайла, ТипМетаданных, ИмяОбъекта)
	
	ФайлЗапроса = Новый ЧтениеТекста(ИмяФайла);
	
	ТекСтрока = ФайлЗапроса.ПрочитатьСтроку();
	
	Ссылки = Новый Массив();
	
	Пока ТекСтрока <> Неопределено Цикл
		Если СокрЛП(ТекСтрока) <> "" Тогда	
			Попытка	
				ТекИдентификатор = Новый УникальныйИдентификатор(СокрЛП(ТекСтрока));
				
				Если ТипМетаданных = "Справочник" Тогда
					
					ТекСсылка = СсылкаНаЭлементСправочника(ИмяОбъекта, ТекИдентификатор);
					Ссылки.Добавить(ТекСсылка);
					
				Иначе 
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Обработка не поддерживает загрузку объектов метаданных типа " + " """ + ТипМетаданных + """.";
					Сообщение.Сообщить();	
					Возврат Неопределено;
						
				КонецЕсли;
							
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось получить ссылку объекта из строки """ + СокрЛП(ТекСтрока) + """. Описание ошибки:" + ИнформацияОбОшибке().Описание;
				Сообщение.Сообщить();
				Возврат Неопределено;
				
			КонецПопытки;				
		КонецЕсли;	
		ТекСтрока = ФайлЗапроса.ПрочитатьСтроку();
	КонецЦикла;
	
	ФайлЗапроса.Закрыть();	
	
	Возврат Ссылки;

КонецФункции

&НаСервере
Процедура ЗагрузитьНайденныеОбъектыПоСсылкам(Ссылки)
	
	МассивРеквизитов = Новый Массив;
	
	Запрос = Новый Запрос;
	
	ТекТекстЗапроса = Объект.ТекстЗапроса + "
	|ГДЕ 
	|	ТаблицаСсылок.Ссылка В (&Ссылки)";
	
	Запрос.Текст = ТекТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	Попытка
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
	МассивРеквизитов.Добавить("Выбрать");
	МассивРеквизитов.Добавить("Картинка");
	МассивРеквизитов.Добавить("Объект");
	Если ТаблицаРезультата.Колонки.Найти("Выбрать") = Неопределено Тогда
		ТаблицаРезультата.Колонки.Вставить(0, "Выбрать");
		ТаблицаРезультата.ЗаполнитьЗначения(Истина, "Выбрать");
	КонецЕсли;
	
	СоздатьКолонки(ТаблицаРезультата, МассивРеквизитов);
	
КонецПроцедуры

&НаСервере
Функция УспешностьЗагрузкиНесопоставленнойНоменклатурыСФТП(ИмяФайла, КаталогЗагрузки)	

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");

	ОбработкаОбъект.СделатьЗаписьВЛогНаСервере("Попытка загрузки с FTP...", "Информация:");
	
	ЗаписьВЛог = ЗагрузитьСФТП(ИмяФайла, КаталогЗагрузки);
	
	ТекстСообщения = ЗаписьВЛог.ТекстСообщения;
	СтатусЗаписи = ЗаписьВЛог.СтатусЗаписи;
	Успешность = ЗаписьВЛог.Успешность;
	
	ОбработкаОбъект.СделатьЗаписьВЛогНаСервере(ТекстСообщения, СтатусЗаписи);
	
	Если Не Успешность Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецЕсли;
		
	Возврат Успешность;
	
КонецФункции 

&НаКлиенте
Процедура ЗагрузитьНесопоставленнуюНоменклатуруВыбранФайл(ВыбранныеФайлы, ДопПараметры = Неопределено) Экспорт 
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда 
			
		ИмяЗагружаемогоФайла = ВыбранныеФайлы[0];
		
		СтруктураИмени = СтруктураИмениФайла(ИмяЗагружаемогоФайла);
		ИмяФайлаБезРасширения = СтруктураИмени.ИмяБезРасширения;	
		
		Если ИмяФайлаБезРасширения = "NotMappedGoods" Тогда
			
			НастройкаВыгрузки = "Номенклатура";			
			УстановитьОбъектПоиска(НастройкаВыгрузки);
			
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Неизвестное имя файла """ + ИмяЗагружаемогоФайла + """" + ". Не удалось определить объект выгрузки.";
			Сообщение.Сообщить();	
			Возврат;
		КонецЕсли;
		
		ЗаполнитьНайденныеОбъектыИзФайла(ИмяЗагружаемогоФайла, "Справочник", "Номенклатура");
				
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураИмениФайла(ПолноеИмяФайла)
	
	СтруктураИмениФайла = Новый Структура("ПолноеИмя,Путь,Имя,Расширение,ИмяБезРасширения");
	
	// Убираем из полного имени файла завершающий слеш и сохраняем получившееся полное имя в структуре
	Если (Прав(ПолноеИмяФайла, 1) = "/" Или Прав(ПолноеИмяФайла, 1) = "\") Тогда
		// Если путь к файлу заканчивается слешем, то у файла нет имени.
		СтруктураИмениФайла.Вставить("ПолноеИмя", ПолноеИмяФайла); 
		СтруктураИмениФайла.Вставить("Путь", ПолноеИмяФайла); 
		СтруктураИмениФайла.Вставить("Имя", ""); 
		СтруктураИмениФайла.Вставить("Расширение", ""); 
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", ""); 
		Возврат СтруктураИмениФайла;
	КонецЕсли;
	СтруктураИмениФайла.Вставить("ПолноеИмя", ПолноеИмяФайла); 
	
	// Если полное имя файла оказалось пустым, то остальные параметры структуры возвращаем пустыми
	Если СтрДлина(ПолноеИмяФайла) = 0 Тогда 
		СтруктураИмениФайла.Вставить("Путь", ""); 
		СтруктураИмениФайла.Вставить("Имя", ""); 
		СтруктураИмениФайла.Вставить("Расширение", ""); 
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", ""); 
		Возврат СтруктураИмениФайла;
	КонецЕсли;
	
	// Выделяем путь к файлу и имя файла
	Если Найти(ПолноеИмяФайла, "/") > 0 Тогда
		ПозицияРазделителя = НайтиСимволСКонца(ПолноеИмяФайла, "/");
	ИначеЕсли Найти(ПолноеИмяФайла, "\") > 0 Тогда
		ПозицияРазделителя = НайтиСимволСКонца(ПолноеИмяФайла, "\");
	Иначе
		ПозицияРазделителя = 0;
	КонецЕсли;
	СтруктураИмениФайла.Вставить("Путь", Лев(ПолноеИмяФайла, ПозицияРазделителя)); 
	СтруктураИмениФайла.Вставить("Имя", Сред(ПолноеИмяФайла, ПозицияРазделителя + 1));
	
	// Папки не имеют расширений, а для файла выделяем расширение
	// +++
	//ПозицияТочки = СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(СтруктураИмениФайла.Имя, ".");
	ПозицияТочки = СтрНайти(СтруктураИмениФайла.Имя, ".", НаправлениеПоиска.СКонца);
	// ---
	
	Если ПозицияТочки = 0 Тогда
		СтруктураИмениФайла.Вставить("Расширение", "");
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.Имя);
	Иначе
		СтруктураИмениФайла.Вставить("Расширение", Сред(СтруктураИмениФайла.Имя, ПозицияТочки));
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", Лев(СтруктураИмениФайла.Имя, ПозицияТочки - 1));
	КонецЕсли;
	
	Возврат СтруктураИмениФайла;
	
КонецФункции

// Осуществляет поиск символа, начиная с конца строки.
//
// Параметры:
//  Строка - Строка - строка, в которой осуществляется поиск;
//  Символ - Строка - искомый символ. Допускается искать строку, содержащую более одного символа.
//
// Возвращаемое значение:
//  Число - позиция символа в строке. 
//          Если строка не содержит указанного символа, то возвращается 0.
//
&НаСервереБезКонтекста
Функция НайтиСимволСКонца(Знач Строка, Знач Символ)
	
	Для Позиция = -СтрДлина(Строка) По -1 Цикл
		Если Сред(Строка, -Позиция, СтрДлина(Символ)) = Символ Тогда
			Возврат -Позиция;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
		
КонецФункции

&НаКлиенте
Процедура ПослеВыбораКаталогаОбмена(ВыбранныеФайлы, ДопПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда 
		Объект.КаталогОбмена = ВыбранныеФайлы[0];
		ПриИзмененииКаталогОбмена();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьСущестованиеКаталогаОбменаНаСервере()	
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ОбработкаОбъект.СуществованиеКаталогаОбменаНаСервере() Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииКаталогОбмена()
	Если Не ПроверитьСущестованиеКаталогаОбменаНаСервере() Тогда 
		Объект.КаталогОбмена = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьОбъектПоиска()
		
	Объект.ОбъектВыгрузки = Неопределено;
	ОбъектПоискаПредставление = Неопределено;
	
	УстановитьВидимостьДоступность();
	
	Объект.ТекстЗапроса = ""; 
	Объект.ТекстПроизвольногоЗапроса = "";
				
	Объект.ОтборДанных = Неопределено;
	ПараметрыЗапроса.Очистить();
		
	НайденныеОбъекты.Очистить();
	
	Элементы.ГруппаНайденныеОбъекты.Заголовок = НСтр("ru = 'Найденные объекты'");
	
	ОчиститьНастройкиСКД(КомпоновщикНастроек.Настройки);
	
	ВыгружаемыеДанные.Очистить();
	
	ПустаяКартинка = Новый Картинка;
	
	Элементы.ДекорацияОбъектПоискаПиктограмма.Картинка = ПустаяКартинка;
	Элементы.ДекорацияОбъектПоискаПиктограмма.Подсказка = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОбъектПоиска(Настройка, ОбновитьОбязательно = Ложь)
		
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ВерсияКонфигурации = ОбработкаОбъект.ВерсияКонфигурации();
	_Конфигурация = ВерсияКонфигурации.Конфигурация;
	Объект.Конфигурация = _Конфигурация;
	_Версия = ВерсияКонфигурации.Версия;
	Объект.Версия = _Версия;
		
	ПолноеИмяОбъекта = Новый Массив;
	
	Если Настройка = "Продажи" Тогда
		
		Если _Конфигурация = "ERP"
			Или _Конфигурация = "КА"
			Или _Конфигурация = "УТ" Тогда
			
			ПолноеИмяОбъекта.Добавить("РегистрНакопления.ВыручкаИСебестоимостьПродаж");	
			
		ИначеЕсли _Конфигурация = "БП" Тогда			
			
			ПолноеИмяОбъекта.Добавить("Документ.РеализацияТоваровУслуг");			
			
		ИначеЕсли _Конфигурация = "Розница"
			Или _Конфигурация = "УНФ" Тогда
			
			ПолноеИмяОбъекта.Добавить("РегистрНакопления.Продажи");
			
		КонецЕсли;
		
	ИначеЕсли Настройка = "Остатки" Тогда
		
		Если _Конфигурация = "ERP"
			Или _Конфигурация = "КА"
			Или _Конфигурация = "УТ" Тогда
			
			ПолноеИмяОбъекта.Добавить("РегистрНакопления.ТоварыНаСкладах");				 
			//ПолноеИмяОбъекта.Добавить("РегистрНакопления.ТоварыОрганизаций");	// для v2		
			
		ИначеЕсли _Конфигурация = "БП" Тогда
			
			ПолноеИмяОбъекта.Добавить("РегистрБухгалтерии.Хозрасчетный");
			
		ИначеЕсли _Конфигурация = "Розница" Тогда
			Если ОбработкаОбъект.СравнитьВерсии(_Версия, "3.0.1.0") >= 0 Тогда
				ПолноеИмяОбъекта.Добавить("РегистрНакопления.Запасы");	
			Иначе	
				ПолноеИмяОбъекта.Добавить("РегистрНакопления.ТоварыОрганизаций");
			КонецЕсли;					
		ИначеЕсли _Конфигурация = "УНФ" Тогда
			ПолноеИмяОбъекта.Добавить("РегистрНакопления.Запасы");		
		КонецЕсли;
						
	ИначеЕсли Настройка = "Оплаты" Тогда
		
		Если _Конфигурация = "ERP"
			Или _Конфигурация = "КА"
			Или _Конфигурация = "УТ" Тогда
			
			ПолноеИмяОбъекта.Добавить("Документ.ПриходныйКассовыйОрдер");	
			
		ИначеЕсли _Конфигурация = "БП30" Тогда
			
			ПолноеИмяОбъекта.Добавить("Документ.ПриходныйКассовыйОрдер");
			
		ИначеЕсли _Конфигурация = "Розница" Тогда
			//	
		ИначеЕсли _Конфигурация = "УНФ" Тогда		
			//
		КонецЕсли;
	Иначе 
		ВызватьИсключение("Неизвестное значение настройки выгрузки!");
	КонецЕсли;
	
	ПроверитьНаличиеМетаданных(ПолноеИмяОбъекта, ОбновитьОбязательно);
			
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеМетаданных(МассивОбъектов, ОбновитьОбязательно)
		
	Для каждого ПолноеИмяОбъекта Из МассивОбъектов Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
		
		Если ОбъектМетаданных <> Неопределено Тогда
			
			ОбновитьОтборДанных = Истина;
			Если ТипЗнч(Объект.ОбъектВыгрузки) = Тип("Структура")
				И Объект.ОбъектВыгрузки.Свойство("ПолноеИмя")
				И ПолноеИмяОбъекта = Объект.ОбъектВыгрузки.ПолноеИмя Тогда
				
				Если Не ОбновитьОбязательно Тогда
					Возврат;	
				КонецЕсли;
			КонецЕсли; 
			
			СохранитьОбъектПоиска(ОбновитьОтборДанных);
			
			ПозицияТочки = Найти(ПолноеИмяОбъекта, ".");
			ТипОбъекта = Лев(ПолноеИмяОбъекта, ПозицияТочки - 1);
			ИмяОбъекта = Сред(ПолноеИмяОбъекта, ПозицияТочки + 1);
			Объект.ОбъектВыгрузки = ЗаполнитьСтруктуруОбъектаПоиска(ТипОбъекта, ИмяОбъекта, ОбъектМетаданных.Синоним, Ложь);
			Объект.ОбъектВыгрузки.РежимОтбора  = Объект.РежимОтбора;
			
			ОбъектПоискаПредставление = Объект.ОбъектВыгрузки.Представление;
			ПриИзмененииОбъектаПоиска();
		Иначе
			
			// +++
			ВызватьИсключение("В текущей конфигурации не обнаружен объект метаданных """ + ПолноеИмяОбъекта + """.");
			// ---
			
			ОчиститьОбъектПоиска(); // +++ зацикливание !!!
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В текущей конфигурации не обнаружен объект метаданных """ + ПолноеИмяОбъекта + """.";
			Сообщение.Сообщить();
						
		КонецЕсли
		
	КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиНаСервере() 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МассивКлючей = МассивКлючей();
	
	////Если нет настроек поставщиков, но обработка настраивалась ранее,сохраним старые настройки в таблицу
	////Дописать!!!
	//Если НастройкиПоставщиков.Количество() = 0 И ЗначениеЗаполнено(Объект.КодДистрибьютора) Тогда
	//	НоваяСтрока = НастройкиПоставщиков.Добавить();
	//	//НоваяСтрока.КодДистрибьютора = Объект.КодДистрибьютора;
	//	
	//КонецЕсли;
	
	Для Каждого Поставщик Из НастройкиПоставщиков Цикл
		Для каждого ДанныеВыгрузки Из МассивКлючей Цикл			
			Попытка
				
				ИмяСохраняемыхНастроек = "";
				
				Если ДанныеВыгрузки = "Продажи" Тогда
					
					КлючНастройки = "АП_УД_Выгрузка_продаж";
					ИмяСохраняемыхНастроек = "данных о продажах";	
					
					ОбъектВыгрузки = ОбработкаОбъект.ПолучитьОбъектВыгрузки(ДанныеВыгрузки);
					ТекстЗапроса = ОбработкаОбъект.ПолучитьТекстЗапроса(ОбъектВыгрузки);
					Отбор = ?(ОбъектыПоиска.Свойство(ОбъектВыгрузки.Тип + ОбъектВыгрузки.Имя), ОбъектыПоиска[ОбъектВыгрузки.Тип + ОбъектВыгрузки.Имя], Неопределено);
					
					ПараметрыВыгрузки = СтруктураПараметровВыгрузки(ТекстЗапроса, Отбор, ОбъектВыгрузки);
					
				ИначеЕсли ДанныеВыгрузки = "Остатки" Тогда
					
					КлючНастройки = "АП_УД_Выгрузка_остатков";
					ИмяСохраняемыхНастроек = "данных об остатках";
					
					ОбъектВыгрузки = ОбработкаОбъект.ПолучитьОбъектВыгрузки(ДанныеВыгрузки);		
					ТекстЗапроса = ОбработкаОбъект.ПолучитьТекстЗапроса(ОбъектВыгрузки);
					Отбор = ?(ОбъектыПоиска.Свойство(ОбъектВыгрузки.Тип + ОбъектВыгрузки.Имя), ОбъектыПоиска[ОбъектВыгрузки.Тип + ОбъектВыгрузки.Имя], Неопределено);
					
					ПараметрыВыгрузки = СтруктураПараметровВыгрузки(ТекстЗапроса, Отбор, ОбъектВыгрузки);
				ИначеЕсли ДанныеВыгрузки = "Оплаты" Тогда
					
					КлючНастройки = "АП_УД_Выгрузка_оплат";
					ИмяСохраняемыхНастроек = "данных об оплатах клиента";
					
					ОбъектВыгрузки = ОбработкаОбъект.ПолучитьОбъектВыгрузки(ДанныеВыгрузки);
					ТекстЗапроса = ОбработкаОбъект.ПолучитьТекстЗапроса(ОбъектВыгрузки);
					Отбор = ?(ОбъектыПоиска.Свойство(ОбъектВыгрузки.Тип + ОбъектВыгрузки.Имя), ОбъектыПоиска[ОбъектВыгрузки.Тип + ОбъектВыгрузки.Имя], Неопределено);
					
					ПараметрыВыгрузки = СтруктураПараметровВыгрузки(ТекстЗапроса, Отбор, ОбъектВыгрузки);	
					
				Иначе 
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Некорректно указана настройка выгрузки!";
					Сообщение.Поле = "НастройкаВыгрузки";
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли;
				
				ХранилищеОбщихНастроек.Сохранить(КлючНастройки, КлючНастройки, ПараметрыВыгрузки, , КлючНастройки);
				ЭтаФорма.Модифицированность = Ложь;	
			Исключение
				ВызватьИсключение("Не удалось сохранить настройки: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	ИспользованиеFTP = Объект.ИспользоватьФТПСервер;
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Настройки успешно сохранены.";
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция МассивКлючей()
	Массив = Новый Массив;
	Массив.Добавить("Продажи");
	Массив.Добавить("Остатки");
	Массив.Добавить("Оплаты");
	Возврат Массив;
КонецФункции
	
Процедура ИспользоватьФТППриИзменении()
	Элементы.НастроитьФТПСоединение.Доступность = Объект.ИспользоватьФТПСервер;
	Если ИспользованиеFTP <> Объект.ИспользоватьФТПСервер Тогда
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// Функция формирует структуру настроек обработки
//
// Возвращаемое значение:
//   Структура   - структура настроек, заполненная по текущим параметрам
//
&НаСервере
Функция СтруктураПараметровВыгрузки(ТекстЗапроса, Отбор, ОбъектВыгрузки)

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КодДистрибьютора",  			СокрЛП(Объект.КодДистрибьютора));
	СтруктураНастроек.Вставить("КаталогОбмена", 				СокрЛП(Объект.КаталогОбмена));
	СтруктураНастроек.Вставить("ОбъектВыгрузки",				ОбъектВыгрузки);
	СтруктураНастроек.Вставить("ОтборДанных", 					Отбор);
	СтруктураНастроек.Вставить("ТекстЗапроса", 					ТекстЗапроса);
	СтруктураНастроек.Вставить("ИспользоватьФТПСервер",			Объект.ИспользоватьФТПСервер);
	СтруктураНастроек.Вставить("КаталогНаСервере", 				СокрЛП(Объект.КаталогНаСервере));
	СтруктураНастроек.Вставить("ПарольФТП", 					СокрЛП(Объект.ПарольФТП));
	СтруктураНастроек.Вставить("ПользовательФТП", 				СокрЛП(Объект.ПользовательФТП));
	СтруктураНастроек.Вставить("СерверФТП", 					СокрЛП(Объект.СерверФТП));
	СтруктураНастроек.Вставить("ПассивныйРежимФТП", 			Объект.ПассивныйРежимФТП);
	СтруктураНастроек.Вставить("КаталогНаРезервномСервере", 	СокрЛП(Объект.КаталогНаРезервномСервере));
	СтруктураНастроек.Вставить("ПарольРезервногоФТП", 			СокрЛП(Объект.ПарольРезервногоФТП));
	СтруктураНастроек.Вставить("ПользовательРезервногоФТП", 	СокрЛП(Объект.ПользовательРезервногоФТП));
	СтруктураНастроек.Вставить("СерверРезервногоФТП", 			СокрЛП(Объект.СерверРезервногоФТП));
	СтруктураНастроек.Вставить("ПассивныйРежимРезервногоФТП", 	Объект.ПассивныйРежимРезервногоФТП);
	СтруктураНастроек.Вставить("ФайлЛога", 						СокрЛП(Объект.ФайлЛога));
	СтруктураНастроек.Вставить("ПодключениеУстановлено",		Объект.ПодключениеУстановлено);
	СтруктураНастроек.Вставить("КолвоДнейВыгрузки",				Объект.КолвоДнейВыгрузки);
	СтруктураНастроек.Вставить("ВыгружатьОстаткиПоСкладам",		Объект.ВыгружатьОстаткиПоСкладам);
	СтруктураНастроек.Вставить("ВыгрузкаТорговыхТочек",			Объект.ВыгрузкаТорговыхТочек);
	СтруктураНастроек.Вставить("ВыгрузкаКонтрагентов",			Объект.ВыгрузкаКонтрагентов);
	СтруктураНастроек.Вставить("ВыгружатьАдресДоставкиКакТТ",	Объект.ВыгружатьАдресДоставкиКакТТ);
	СтруктураНастроек.Вставить("РазрешитьДополнительнуюВыгрузкуПоЗапросу",	Объект.РазрешитьДополнительнуюВыгрузкуПоЗапросу);
	СтруктураНастроек.Вставить("АгентИзДокументов",				Объект.АгентИзДокументов);
	
	Возврат СтруктураНастроек;

КонецФункции // СтруктураПараметровВыгрузки()

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ВыбранныйПериод = Новый СтандартныйПериод;
	
	// Устанавливаем начальные данные
	ВыбранныйПериод.ДатаНачала = Объект.НачПериода;
	ВыбранныйПериод.ДатаОкончания = Объект.КонецПериода;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = ВыбранныйПериод;
	// Не модальный вызов диалога выбора периода
	Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
КонецПроцедуры
 
&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;	
	Если ЗначениеЗаполнено(Период) Тогда 
		ВыбранныйПериод = Диалог.Период;
		Объект.НачПериода = ВыбранныйПериод.ДатаНачала;
		Объект.КонецПериода = ВыбранныйПериод.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	//ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПараметры(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполненностьПолей(Ложь) Тогда 	
		ЗаписатьНастройкиНаСервере();
		ЗаголовокГруппы = Строка(Элементы.ГруппаНастройкиАвтовыгрузки.Заголовок);
		Позиция = Найти(ЗаголовокГруппы,"*");
		Если Позиция <> 0 Тогда
			Элементы.ГруппаНастройкиАвтовыгрузки.Заголовок = Прав(ЗаголовокГруппы,СтрДлина(ЗаголовокГруппы)-2);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	ЗапуститьПриложение("https://help.agentplus.online/ud/faq/2__instruktsiya_po_nastrojke_konsolidatsii_dannykh_po_vtorichnym_prodazham.htm?ms=AAA%3D&st=MA%3D%3D&sct=MA%3D%3D&mw=NDEw");
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаПриИзменении(Элемент)
	Если Объект.НачПериода <> Дата("00010101") И Объект.КонецПериода <> Дата("00010101") Тогда
		ПроверкаКорректностиДат();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	Если Объект.НачПериода <> Дата("00010101") И Объект.КонецПериода <> Дата("00010101") Тогда
		ПроверкаКорректностиДат();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКорректностиДат()
	Если Объект.НачПериода > Объект.КонецПериода Тогда
			ОчиститьСообщения();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка: дата начала периода не может быть больше даты окончания периода...";
			Сообщение.Сообщить();
			Объект.НачПериода = Дата("00010101");
			Объект.КонецПериода = Дата("00010101");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КодДистрибьютораИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если Объект.КодДистрибьютора <> Текст Тогда
		ЭтаФорма.Модифицированность = Истина;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КолвоДнейВыгрузки1ИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если Объект.КолвоДнейВыгрузки <> Число(Текст) Тогда
		ЭтаФорма.Модифицированность = Истина;		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередНачаломИзменения(Элемент, Отказ)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КодДистрибьютораПриИзменении(Элемент)
	Если СтрДлина(СокрЛП(Объект.КодДистрибьютора)) <> 5 Тогда
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка: уникальный код дистрибьютора должен состоять из 5 цифр...";
		Сообщение.Поле = "Ошибка";
		Сообщение.Сообщить();
		Объект.КодДистрибьютора = "";
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаКонтрагентовПриИзменении(Элемент)
	УстановитьТекстЗапроса();
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапроса()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Объект.ОбъектВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекущаяСтрока = ПолучитьНастройкуПоставщикаПоКоду();
	Если ТекущаяСтрока <> Неопределено Тогда
		Объект.ТекстЗапроса = ОбработкаОбъект.ПолучитьТекстЗапроса(Объект.ОбъектВыгрузки);
		ТекстЗапроса = Объект.ТекстЗапроса;
		
		Если ТипЗнч(ТекущаяСтрока.ТекстЗапроса) = Тип("Структура") Тогда
			ТекущаяСтрока.ТекстЗапроса.Вставить(НастройкаВыгрузки, Объект.ТекстЗапроса);
		Иначе
			ТекстыЗапросов = Новый Структура;
			ТекстыЗапросов.Вставить(НастройкаВыгрузки, Объект.ТекстЗапроса);
			ТекущаяСтрока.ТекстЗапроса = ТекстыЗапросов;
		КонецЕсли;
		
		НастройкиПоставщиковСохранить();
	Иначе
		СообщениеНеУказанТекущийДистрибьютор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаТорговыхТочекПриИзменении(Элемент)
	УстановитьТекстЗапроса();
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьДополнительнуюВыгрузкуПоЗапросуПриИзменении(Элемент)
	Элементы.ВыгрузитьДанныеПоЗапросу.Доступность = Объект.РазрешитьДополнительнуюВыгрузкуПоЗапросу;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеПоЗапросу(Команда)
	
	Если ЗначениеЗаполнено(ТекущийКодДистрибьютора) Тогда
		ВыгрузитьДанныеПоЗапросуНаСервере();
	Иначе
		СообщениеНеУказанТекущийДистрибьютор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеПоЗапросуНаСервере()
	
	СтрокаНастроекПоставщика = ПолучитьНастройкуПоставщикаПоКоду();
	Если СтрокаНастроекПоставщика <> Неопределено И СтрокаНастроекПоставщика.РазрешитьДополнительнуюВыгрузкуПоЗапросуПоставщика Тогда 
		Обработка =  РеквизитФормыВЗначение("Объект");
		Обработка.ОбработатьФайлыЗапроса(СтрокаНастроекПоставщика, ТекущийКодДистрибьютора);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Проверьте наличие кода дистрибьютора и настройку выгрузки дополнительных данных по запросу в настройках поставщика. '");
		Сообщение.Сообщить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщениеНеУказанТекущийДистрибьютор()
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru = 'Не указан текущий код дистрибьютора. Укажите, пожалуйста, код дистрибьютора.'");
	Сообщение.ПутьКДанным = "ТекущийКодДистрибьютора"; 
	Сообщение.Поле = "ТекущийКодДистрибьютора"; 
	Сообщение.Сообщить();	
КонецПроцедуры

&НаКлиенте
Процедура АгентИзРеализацииПриИзменении(Элемент)
	УстановитьОбъектПоиска(НастройкаВыгрузки, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоставщиковПриИзменении(Элемент)
	
	Если Элементы.НастройкиПоставщиков.ТекущиеДанные <> Неопределено Тогда
		НастройкиПоставщиковПриИзмененииНаСервере(Элементы.НастройкиПоставщиков.ТекущаяСтрока);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПоставщиковПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = НастройкиПоставщиков.НайтиПоИдентификатору(ИдентификаторСтроки);		
	Если Строка <> Неопределено Тогда
		
		Если Строка.КодДистрибьютора = "" Тогда			
			ЗаполнитьДанныеДистрибьютораПоУмолчанию(Строка);
		КонецЕсли;
		
		Строка.СтрокаОпциональные = "Открыть настройки";
		Строка.СтрокаFTP = "Открыть настройки";
		Строка.СтрокаКоэффициентыУпаковок = "Открыть настройки";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастройкиПоставщиковСохранить()
	
	СохраненныеНастройкиПоставщиков = НастройкиПоставщиков.Выгрузить();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("апОбменДаннымиВторичныеПродажи", "НастройкиПоставщиков", СохраненныеНастройкиПоставщиков,,"апОбменДаннымиВторичныеПродажи", Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоставщиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// +++
	Если Элемент.ТекущиеДанные.КодДистрибьютора = "" 
		И Поле.Имя <> "НастройкиПоставщиковКодДистрибьютора" Тогда
		
		Сообщить("Укажите код дистрибьтора!");	
		Возврат
	КонецЕсли;
	
	Если Поле.Имя = "НастройкиПоставщиковСтрокаОпциональные"  Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыНастройкиОпциональные", ЭтотОбъект,);		
		СтруктураПараметров = Элемент.ТекущиеДанные.Опциональные;		
		
		//если настройки не заданы, ищем настройки в старых настройках
		// +++
		Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыгрузкаТорговыхТочек", Объект.ВыгрузкаТорговыхТочек);
			СтруктураПараметров.Вставить("ВыгрузкаКонтрагентов", Объект.ВыгрузкаКонтрагентов);	
			СтруктураПараметров.Вставить("v2ФорматВыгрузки", Объект.v2ФорматВыгрузки);
		КонецЕсли;		
		СтруктураПараметров.Вставить("Конфигурация", Объект.Конфигурация);
		
		ОткрытьФорму(ПолучитьПолноеИмяФормы("НастройкиОпциональные"),
					СтруктураПараметров, 
					ЭтаФорма.НастройкиПоставщиков,
					,
					,
					,
					ОписаниеОповещения)
					;
	// ---	
	ИначеЕсли Поле.Имя = "НастройкиПоставщиковСтрокаFTP" 
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.КодДистрибьютора) Тогда 
		
		СтандартнаяОбработка = Ложь;     
		СтруктураПараметров = Элемент.ТекущиеДанные.НастройкиFTP;
		
		//если настройки не заданы, ищем настройки в старых настройках FTP
		Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
			
			СтруктураПараметров = Новый Структура;
			
			СтруктураПараметров.Вставить("КаталогНаСервере", Объект.КаталогНаСервере);
			СтруктураПараметров.Вставить("ПарольФТП", Объект.ПарольФТП);
			СтруктураПараметров.Вставить("ПассивныйРежимФТП", Объект.ПассивныйРежимФТП);
			СтруктураПараметров.Вставить("ПользовательФТП", Объект.ПользовательФТП);
			СтруктураПараметров.Вставить("СерверФТП", Объект.СерверФТП);
			СтруктураПараметров.Вставить("ПортФТП", Объект.ПортФТП);
			СтруктураПараметров.Вставить("ФайлЛога", Объект.ФайлЛога);
			СтруктураПараметров.Вставить("ПодключениеУстановлено", Объект.ПодключениеУстановлено); 
			
			СтруктураПараметров.Вставить("КаталогНаРезервномСервере", Объект.КаталогНаРезервномСервере);
			СтруктураПараметров.Вставить("ПарольРезервногоФТП", Объект.ПарольРезервногоФТП);
			СтруктураПараметров.Вставить("ПассивныйРежимРезервногоФТП", Объект.ПассивныйРежимРезервногоФТП);
			СтруктураПараметров.Вставить("ПользовательРезервногоФТП", Объект.ПользовательРезервногоФТП);
			СтруктураПараметров.Вставить("СерверРезервногоФТП", Объект.СерверРезервногоФТП);
			СтруктураПараметров.Вставить("ПортРезервногоФТП", Объект.ПортРезервногоФТП);
			СтруктураПараметров.Вставить("ПодключениеУстановленоРезервногоФТП", Объект.ПодключениеУстановленоРезервногоФТП); 
			
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыНастройкиFTP", ЭтотОбъект,);
		
		ОткрытьФорму(ПолучитьПолноеИмяФормы("НастройкиФТП"),
					СтруктураПараметров, 
					ЭтаФорма.НастройкиПоставщиков,
					,
					,
					,
					ОписаниеОповещения)
					;
					
	// +++
	ИначеЕсли Поле.Имя = "НастройкиПоставщиковСтрокаКоэффициентыУпаковок" Тогда			
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Элемент.ТекущиеДанные.КоэффициентыУпаковок;
				
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормыКоэффициентыУпаковок", ЭтотОбъект,);
		
		ОткрытьФорму(ПолучитьПолноеИмяФормы("КоэффициентыУпаковок"),
					СтруктураПараметров, 
					ЭтаФорма.НастройкиПоставщиков,
					,
					,
					,
					ОписаниеОповещения,
		            РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
					;
		
	// ---
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормыКоэффициентыУпаковок(Параметры, ДополнительныеПараметры) Экспорт
	Если Параметры <> Неопределено Тогда
		Элементы.НастройкиПоставщиков.ТекущиеДанные.КоэффициентыУпаковок = Параметры;
		НастройкиПоставщиковСохранить();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормыНастройкиFTP(Параметры, ДополнительныеПараметры) Экспорт
	Если Параметры <> Неопределено Тогда
		Элементы.НастройкиПоставщиков.ТекущиеДанные.НастройкиFTP = Параметры;
		НастройкиПоставщиковСохранить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормыНастройкиОпциональные(Параметры, ДополнительныеПараметры) Экспорт
	
	Если Параметры <> Неопределено Тогда  
		
		Настройки = Элементы.НастройкиПоставщиков.ТекущиеДанные;
		
		Если Настройки.Опциональные = Неопределено Тогда
			Настройки.Опциональные = Новый Структура("v2ФорматВыгрузки, ВыгрузкаКонтрагентов, ВыгрузкаТорговыхТочек");					
		КонецЕсли;
			
		Если Параметры.ИмпортНастроек <> Неопределено Тогда	// ИМПОРТ
			
			Если НЕ ОтборыВНастройкахПредварительноСформированны(Настройки.Отбор) Тогда
				Возврат
			КонецЕсли;
			
			Настройки.ВыгружатьДанныеАвтоматическиЗаПоследние	= Параметры.ИмпортНастроек.ВыгружатьДанныеАвтоматическиЗаПоследние;
			
			Настройки.ВыгружатьОстаткиПоСкладам					= Параметры.ИмпортНастроек.ВыгружатьОстаткиПоСкладам;						
			Настройки.КаталогОбмена 							= Параметры.ИмпортНастроек.КаталогОбмена;
			Настройки.КоэффициентыУпаковок 						= Новый Структура("КоэффициентыУпаковок", Параметры.ИмпортНастроек.КоэффициентыУпаковок);			
			
			Настройки.Опциональные.v2ФорматВыгрузки 			= Истина;
						
			Настройки.АгентИзДокументов							= Параметры.ИмпортНастроек.АгентИзДокумента;			
			Настройки.Опциональные.ВыгрузкаКонтрагентов 		= Параметры.ИмпортНастроек.КлиентомЯвляется;
			
			Настройки.ВыгружатьАдресДоставкиКакТТ				= Параметры.ИмпортНастроек.ВыгружатьАдресДоставкиКакТТ;
			Настройки.Опциональные.ВыгрузкаТорговыхТочек 		= Параметры.ИмпортНастроек.ТТ;							
			
			ЗаполнитьОтборыНастроекПриИмпорте(Параметры.ИмпортНастроек, Настройки.Отбор);
			
			Если ТекущийКодДистрибьютора = Настройки.КодДистрибьютора Тогда
				
				Объект.ВыгрузкаКонтрагентов		= Параметры.ИмпортНастроек.КлиентомЯвляется;
				Объект.ВыгрузкаТорговыхТочек	= Параметры.ИмпортНастроек.ТТ;						
				Объект.v2ФорматВыгрузки 		= Истина;
				
				ТекущийКодДистрибьютора = Неопределено;
				
			КонецЕсли;
						
		Иначе // ИЗМЕНЕНИЕ
			
			Настройки.Опциональные.ВыгрузкаКонтрагентов		= Параметры.ВыгрузкаКонтрагентов;
			Настройки.Опциональные.ВыгрузкаТорговыхТочек	= Параметры.ВыгрузкаТорговыхТочек;
			Настройки.Опциональные.v2ФорматВыгрузки			= Параметры.v2ФорматВыгрузки;
			
			Если ТекущийКодДистрибьютора = Настройки.КодДистрибьютора Тогда
				
				Объект.ВыгрузкаКонтрагентов		= Параметры.ВыгрузкаКонтрагентов;
				Объект.ВыгрузкаТорговыхТочек	= Параметры.ВыгрузкаТорговыхТочек;						
				Объект.v2ФорматВыгрузки 		= Параметры.v2ФорматВыгрузки;
				
			КонецЕсли;
		КонецЕсли;					
		
		НастройкиПоставщиковСохранить();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОтборыВНастройкахПредварительноСформированны(Отборы)
	
	Результат = Истина;
	
	ОтборыКФормированию = Новый Массив;
	
	Если Отборы = Неопределено Тогда
		Результат = Ложь;
		ОтборыКФормированию.Добавить("Остатки");
		ОтборыКФормированию.Добавить("Продажи");
	Иначе	
		Если Не Отборы.Свойство("Остатки") 
			Или Отборы.Остатки = Неопределено Тогда
			Результат = Ложь;
			ОтборыКФормированию.Добавить("Остатки")
		КонецЕсли;	
		Если Не Отборы.Свойство("Продажи")
			Или Отборы.Продажи = Неопределено Тогда
			Результат = Ложь;
			ОтборыКФормированию.Добавить("Продажи");
		КонецЕсли;		
	КонецЕсли;
	
	Если ОтборыКФормированию.Количество() Тогда
		Сообщить("До импорта настроек предварительно сформируйте настройки по отборам:" + СтрСоединить(ОтборыКФормированию, ","))		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции


&НаСервере
Процедура ЗаполнитьОтборыНастроекПриИмпорте(Знач ЧтениеНастроек, НастройкиОтбор)
	
	Для каждого КлючЗначение Из НастройкиОтбор Цикл
		
		текНастройки = КлючЗначение.Значение; 		
		текНастройки.Отбор.Элементы.Очистить();
		
		// Отборы
		Для Каждого КлючЗначение Из ЧтениеНастроек.Отборы Цикл
			Для Каждого Элемент Из КлючЗначение.Значение Цикл			
				ЭлементОтбораДанных = текНастройки.Отбор.Элементы.Добавить(Элемент.Тип); //.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"))			
				ЭлементОтбораДанных.ЛевоеЗначение =  Новый ПолеКомпоновкиДанных(КлючЗначение.Ключ);
				ЭлементОтбораДанных.ВидСравнения = Элемент.ВидСравнения;
				ЭлементОтбораДанных.ПравоеЗначение = Элемент.ПравоеЗначение;
				ЭлементОтбораДанных.Использование = Элемент.Использование;			
			КонецЦикла;				
		КонецЦикла;				
		
		// Параметры
		Для Каждого КлючЗначение Из ЧтениеНастроек.Параметры Цикл		
			Параметр = текНастройки.ПараметрыДанных.Элементы.Найти(КлючЗначение.Ключ);			
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = КлючЗначение.Значение;
			КонецЕсли;					
		КонецЦикла;																						
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийКодДистрибьютораПриИзменении(Элемент)
	
	//если изменился код дистрибьютора, меняем текст запроса с учетом отборов
	Если ЗначениеЗаполнено(ТекущийКодДистрибьютора)  Тогда
		УстановитьОбъектПоиска(НастройкаВыгрузки, Истина);
		Если НастройкаВыгрузки = "Продажи" 
			Или НастройкаВыгрузки = "Оплаты" Тогда 
			Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Заголовок = "Найти документы";
		Иначе
			Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Заголовок = "Найти объекты";
		КонецЕсли;
		
		// +++
		Если Объект.v2ФорматВыгрузки Тогда
			Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Заголовок = "Записать в файлы";							
			Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Доступность = Ложь;
		КонецЕсли;
		// ---
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоставщиковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Код = СокрЛП(Элементы.НастройкиПоставщиков.ТекущиеДанные.КодДистрибьютора);
	Если ЗначениеЗаполнено(Код)  Тогда
		
		//Сохраняем количество дней выгрузки в разрезе настройки выгрузки (продажи, остатки, оплаты)
		//в виде структуры
		Если Элемент.ТекущийЭлемент.Имя = "НастройкиПоставщиковВыгружатьДанныеАвтоматическиЗаПоследние" Тогда
			Если ТипЗнч(Элемент.ТекущиеДанные.ДниВыгрузки) <> Тип("Структура") Тогда
				ДниВыгрузки = Новый Структура;
				ДниВыгрузки.Вставить(НастройкаВыгрузки, Элемент.ТекущиеДанные.ВыгружатьДанныеАвтоматическиЗаПоследние);
				Элемент.ТекущиеДанные.ДниВыгрузки = ДниВыгрузки; 
			Иначе
				Элемент.ТекущиеДанные.ДниВыгрузки.Вставить(НастройкаВыгрузки, Элемент.ТекущиеДанные.ВыгружатьДанныеАвтоматическиЗаПоследние);
			КонецЕсли;
			
		КонецЕсли;
		
		НастройкиПоставщиковСохранить();
		Если Элемент.ТекущийЭлемент.Имя = "НастройкиПоставщиковКодДистрибьютора" Тогда
			Элементы.ТекущийКодДистрибьютора.СписокВыбора.Очистить();
			Для Каждого Строка Из НастройкиПоставщиков Цикл
				Элементы.ТекущийКодДистрибьютора.СписокВыбора.Вставить(Элементы.ТекущийКодДистрибьютора.СписокВыбора.Количество(),Строка.КодДистрибьютора,Строка.КодДистрибьютора);	
			КонецЦикла;
		Иначе
			ЗаполнитьСписокВыбораТекущегоКодаДистрибьютора();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// +++
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	// ---
	
	КомпоновщикНастроекНастройкиОтборПриОкончанииРедактированияНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура КомпоновщикНастроекНастройкиОтборПриОкончанииРедактированияНаСервере()
	
	ТекущаяСтрокаНастройкиПоставщика = ПолучитьНастройкуПоставщикаПоКоду();
	Если ТекущаяСтрокаНастройкиПоставщика <> Неопределено Тогда
		Код = СокрЛП(ТекущаяСтрокаНастройкиПоставщика.КодДистрибьютора);
		ТекущаяНастройка = НастройкаВыгрузки;
		
		//Если заполнен код дистрибьютора, установим текущий отбор в таблицу настроек поставщика
		//Колонка "Отбор" хранит структуру в формате 
		//	Ключ = текущая настройка, доступные значения
		//			1. Продажи
		//			2. Остатки
		//			3. Оплаты
		//	Значение = Отбор (настройки компоновщика настроек)
		
		ТекущиеОтборы = ТекущаяСтрокаНастройкиПоставщика.Отбор;
		Если ЗначениеЗаполнено(Код) Тогда
			Отбор = ПолучитьТекущийОтбор(КомпоновщикНастроек, ТекущиеОтборы, ТекущаяНастройка);	
			ТекущаяСтрокаНастройкиПоставщика.Отбор = Отбор;
			НастройкиПоставщиковСохранить();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОтборДанных()
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущийОтбор(КомпоновщикНастроек, ТекущиеОтборы, ТекущаяНастройка)
	
	Если ТипЗнч(ТекущиеОтборы) = Тип("Структура") Тогда
		ТекущиеОтборы.Вставить(ТекущаяНастройка, КомпоновщикНастроек.ПолучитьНастройки());
	Иначе
		ТекущиеОтборы = Новый Структура(ТекущаяНастройка, КомпоновщикНастроек.ПолучитьНастройки());
	КонецЕсли;
	
	Возврат ТекущиеОтборы;
	
КонецФункции

&НаСервере
Функция ПолучитьНастройкуПоставщикаПоКоду()
	НайденныеСтроки = НастройкиПоставщиков.НайтиСтроки(Новый Структура("КодДистрибьютора",ТекущийКодДистрибьютора));
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		//Сообщить, что не найдена строка с текущим кодом дистрибьютора
		Возврат Неопределено;
	КонецЕсли
КонецФункции

&НаСервере
Функция ВозвратНастроекПоставщикаПоКодуВВидеСтруктура(СтрокаНастроек)
	
	НастройкиПоставщика = Новый Структура();	
	НастройкиПоставщика.Вставить("КодДистрибьютора",ТекущийКодДистрибьютора);
	НастройкиПоставщика.Вставить("НастройкиFTP",СтрокаНастроек.НастройкиFTP);
	НастройкиПоставщика.Вставить("ИспользоватьFTP",СтрокаНастроек.ИспользоватьFTP);
	НастройкиПоставщика.Вставить("КаталогОбмена",СтрокаНастроек.КаталогОбмена);
	НастройкиПоставщика.Вставить("Опциональные",СтрокаНастроек.Опциональные);
	НастройкиПоставщика.Вставить("АгентИзДокументов",СтрокаНастроек.АгентИзДокументов);
	НастройкиПоставщика.Вставить("ВыгружатьАдресДоставкиКакТТ",СтрокаНастроек.ВыгружатьАдресДоставкиКакТТ);
	НастройкиПоставщика.Вставить("ВыгружатьОстаткиПоСкладам",СтрокаНастроек.ВыгружатьОстаткиПоСкладам);
	
	Если СтрокаНастроек.КоэффициентыУпаковок = Неопределено Тогда
		КУ = Неопределено;
	Иначе
		КУ = СтрокаНастроек.КоэффициентыУпаковок.КоэффициентыУпаковок;	
	КонецЕсли;
	
	НастройкиПоставщика.Вставить("КоэффициентыУпаковок", КУ);
	
	Возврат НастройкиПоставщика;
	
КонецФункции

&НаКлиенте
Процедура НастройкиПоставщиковПередУдалением(Элемент, Отказ)
	
	// +++
	// ToDo - текущий код у объекта не удаляется,
	// при переключении варианта выгрузки происходит ошибка
	
	Код = СокрЛП(Элементы.НастройкиПоставщиков.ТекущиеДанные.КодДистрибьютора);
	ЭлементДляУдаления = Элементы.ТекущийКодДистрибьютора.СписокВыбора.НайтиПоЗначению(Код);
	Если ЭлементДляУдаления <> Неопределено Тогда
		Элементы.ТекущийКодДистрибьютора.СписокВыбора.Удалить(ЭлементДляУдаления);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиПараметрыДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	КомпоновщикНастроекНастройкиОтборПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПослеУдаления(Элемент)
	КомпоновщикНастроекНастройкиОтборПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоставщиковПослеУдаления(Элемент)
	НастройкиПоставщиковСохранить()
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура тестНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");		
	
	ОбработкаОбъект.ВыгрузитьДанныеПоЗаданию("АП_УД_Выгрузка_продаж");				
	ОбработкаОбъект.ВыгрузитьДанныеПоЗаданию("АП_УД_Выгрузка_остатков");				
	//ОбработкаОбъект.ВыгрузитьДанныеПоЗаданию("АП_УД_Выгрузка_оплат");									
	//ОбработкаОбъект.ОбновитьОбработку("АП_УД_Обновление_обработки");
	
КонецПроцедуры

&НаКлиенте
Процедура тест(Команда)
	тестНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДистрибьютораПоУмолчанию(Настройки)
	
	КодДистрибьютора = "";
	
	НастройкиFTP = Новый Структура;	
	НастройкиFTP.Вставить("КаталогНаРезервномСервере", "");
	НастройкиFTP.Вставить("КаталогНаСервере", "/");
	НастройкиFTP.Вставить("ПарольРезервногоФТП", "");
	НастройкиFTP.Вставить("ПарольФТП", "");
	НастройкиFTP.Вставить("ПассивныйРежимРезервногоФТП", Ложь);
	НастройкиFTP.Вставить("ПассивныйРежимФТП", Истина); 
	НастройкиFTP.Вставить("ПодключениеУстановлено", Ложь);
	НастройкиFTP.Вставить("ПодключениеУстановленоРезервногоФТП", Ложь);
	НастройкиFTP.Вставить("ПользовательРезервногоФТП", "");
	НастройкиFTP.Вставить("ПользовательФТП", КодДистрибьютора);
	НастройкиFTP.Вставить("ПортРезервногоФТП", 0);
	НастройкиFTP.Вставить("ПортФТП", 21);
	НастройкиFTP.Вставить("СерверРезервногоФТП", "");
	НастройкиFTP.Вставить("СерверФТП", "109.73.34.100");
	НастройкиFTP.Вставить("ФайлЛога", "");	
	
	ДниВыгрузки = Новый Структура;
	ДниВыгрузки.Вставить("Остатки",45);
	ДниВыгрузки.Вставить("Продажи",45);
	
	НастройкиОпциональные = Новый Структура;	
	НастройкиОпциональные.Вставить("v2ФорматВыгрузки", Истина);	
	НастройкиОпциональные.Вставить("ВыгрузкаКонтрагентов", "Контрагенты");						
    НастройкиОпциональные.Вставить("ВыгрузкаТорговыхТочек", "Партнеры"); // игнорируется	
	
	Настройки.КодДистрибьютора = КодДистрибьютора;
	Настройки.АгентИзДокументов = Истина;	
	Настройки.ВыгружатьАдресДоставкиКакТТ = Истина;
	Настройки.ВыгружатьДанныеАвтоматическиЗаПоследние = 45;
	Настройки.ВыгружатьОстаткиПоСкладам = Истина;
	//ВыгрузкаТорговыхТочекКонтрагентов
	Настройки.ДниВыгрузки = ДниВыгрузки;
	Настройки.ИспользоватьFTP = Истина;	
	//КоэффициентыУпаковок
	Настройки.НастройкиFTP = НастройкиFTP;
	//ОбъектВыгрузки
	Настройки.Опциональные = НастройкиОпциональные;
	//Отбор
	Настройки.РазрешитьДополнительнуюВыгрузкуПоЗапросуПоставщика = Ложь;	
	//ТекстЗапроса
	
	Объект.v2ФорматВыгрузки = Истина;
	Объект.ВыгрузкаКонтрагентов = "Контрагенты";
	Объект.ВыгрузкаТорговыхТочек = "Партнеры";
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнструкцию(Команда)
	ОткрытьФорму(ПолучитьПолноеИмяФормы("Инструкция"), , ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры










