
#Область ПрограммныйИнтерфейс

#Область РаботаСНастройками

// Выполняет запись настроек в связанную с внешней Обработкой ссылку на справочник
//
// Параметры:
// 	Обработка - Произвольный - ВнешняяОбработка, ВнешнийОтчет
//
Процедура ЗагрузитьНастройки(Обработка) Экспорт
	
	Если Обработка.НастройкиЗагружены Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Обработка.ДополнительнаяОбработкаСсылка) Тогда
		ИмяОбработки = Обработка.МетаОбъект().Имя;
		Обработка.ДополнительнаяОбработкаСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта", ИмяОбработки);
	КонецЕсли;

	Если ЗначениеЗаполнено(Обработка.ДополнительнаяОбработкаСсылка) Тогда
		//@skip-warning
		ХранилищеНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка.ДополнительнаяОбработкаСсылка
			, "ХранилищеНастроек");
		СтруктураНастроек = ХранилищеНастроек.Получить();
		ЗагрузитьНастройкиИзСтруктуры(Обработка, СтруктураНастроек);
		Обработка.НастройкиЗагружены = СтруктураНастроек <> Неопределено;
	КонецЕсли;

КонецПроцедуры

// Загрузить настройки в Обработку из адреса во временном хранилище.
//
// Параметры:
//  Обработка - Произвольный - отчет \ обработка
//  АдресНастроек - Строка
//
Процедура ЗагрузитьНастройкиВАлгоритмИзАдресаВоВременномХранилище(Обработка, АдресНастроек) Экспорт

	Если Обработка.НастройкиЗагружены Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоАдресВременногоХранилища(АдресНастроек) Тогда
		СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроек);
	Иначе
		Обработка.НастройкиЗагружены = Истина;
		Возврат;
	КонецЕсли;
	ЗагрузитьНастройкиИзСтруктуры(Обработка, СтруктураНастроек);
	Обработка.НастройкиЗагружены = Истина;

КонецПроцедуры

// Загрузить настройки из структуры.
//
// Параметры:
//  Обработка - Произвольный - отчет \ обработка
//  СтруктураНастроек - Структура
//  ИменаНастроек - Массив Из Строка - имена реквизитов к загрузке
//
Процедура ЗагрузитьНастройкиИзСтруктуры(Обработка, СтруктураНастроек, ИменаНастроек = Неопределено) Экспорт

	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура")
			И ТипЗнч(СтруктураНастроек) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;

	Если ИменаНастроек = Неопределено Тогда
		ИменаНастроек = Обработка.ИменаНастроек();
	КонецЕсли;

	Для каждого ИмяНастройки Из ИменаНастроек Цикл
		ЗначениеНастройки = Неопределено;
		Если НЕ СтруктураНастроек.Свойство(ИмяНастройки, ЗначениеНастройки) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ЗначениеНастройки) = Тип("ТаблицаЗначений") Тогда
			Обработка[ИмяНастройки].Загрузить(ЗначениеНастройки);
		Иначе
			Обработка[ИмяНастройки] = ЗначениеНастройки;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Записать настройки обработки / отчета.
//
// Параметры:
//  Обработка - Произвольный - отчет / обработка
//
Процедура ЗаписатьНастройки(Обработка) Экспорт
	НастройкиОбработки = НастройкиОбработки(Обработка);
	ОбъектВладельца = Обработка.ДополнительнаяОбработкаСсылка.ПолучитьОбъект();
	ОбъектВладельца.ХранилищеНастроек = Новый ХранилищеЗначения(НастройкиОбработки, Новый СжатиеДанных(9));
	ОбъектВладельца.ОбменДанными.Загрузка = Истина;
	ОбъектВладельца.Записать();
КонецПроцедуры

// Настройки алгоритма.
//
// Параметры:
//  Обработка - Произвольный - отчет / обработка
//  ИменаНастроек - Массив Из Строка - имена реквизитов к выгрузке
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура
//
Функция НастройкиОбработки(Обработка, ИменаНастроек = Неопределено) Экспорт
	СтруктураНастроек = Новый Структура;
	МетаОбработчик = Обработка.Метаданные();
	Если ИменаНастроек = Неопределено Тогда
		ИменаНастроек = Обработка.ИменаНастроек();
	КонецЕсли;
	Для каждого ИмяНастройки Из ИменаНастроек Цикл
		ЗначениеНастройки = Обработка[ИмяНастройки];
		МетаТабЧасть = МетаОбработчик.ТабличныеЧасти.Найти(ИмяНастройки);
		Если МетаТабЧасть <> Неопределено Тогда
			ЗначениеНастройки = ЗначениеНастройки.Выгрузить();
		КонецЕсли;
		СтруктураНастроек.Вставить(ИмяНастройки, ЗначениеНастройки);
	КонецЦикла;

	Возврат Новый ФиксированнаяСтруктура(СтруктураНастроек);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти
