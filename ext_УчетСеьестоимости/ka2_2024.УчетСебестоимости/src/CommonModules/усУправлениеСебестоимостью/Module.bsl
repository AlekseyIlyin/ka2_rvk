
#Область ПрограммныйИнтерфейс

Процедура ДобавитьДвиженияОстаткиПоПартиям(Регистратор) Экспорт
	
	ТаблицаДвижений = ТаблицаДвижений(Регистратор);
	
	НачатьТранзакцию();
	
	Попытка
		НаборЗаписей = РегистрыНакопления.усОстаткиПоПартиям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		
		Если ЗначениеЗаполнено(ТаблицаДвижений) Тогда
			НаборЗаписей.Загрузить(ТаблицаДвижений);
			УстановитьГраницуПоследовательности(ТаблицаДвижений[0].Период);			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		усЖурналРегистрацииВызовСервера.ЗаписатьОшибку(ПодробноеПредставлениеОшибки, , ИмяСобытия());
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяСобытия()
	Возврат "Управление себестоимостью";
КонецФункции

Процедура УстановитьГраницуПоследовательности(Период)
	
	ГраницаПоследовательностиНарушена = ГраницаПоследовательностиНарушена(Период);
	
	Если Не ГраницаПоследовательностиНарушена Или 
			(ГраницаПоследовательностиНарушена И Не ГраницаПоследовательностиРаньшеЭтогоРегистратора(Период)) Тогда
		
		усУправлениеПоследовательностью.УстановитьГраницуПоследовательности(Период);
	КонецЕсли;
	
КонецПроцедуры

Функция ГраницаПоследовательностиРаньшеЭтогоРегистратора(Регистратор)
	Результат = усУправлениеПоследовательностью.ГраницаПоследовательностиРаньше(Регистратор);
	Возврат Результат;
КонецФункции

Функция ГраницаПоследовательностиНарушена(Период)
	Возврат усУправлениеПоследовательностью.ЕстьДвиженияПосле(Период);
КонецФункции

Процедура ЗаблокироватьРесурсыРегистраОстаткиПоПартиям(ОстаткиПоПартиямСписание)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.усОстаткиПоПартиям");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ОстаткиПоПартиямСписание;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналитикаУчетаНоменклатуры", "АналитикаУчетаНоменклатуры");
	Блокировка.Заблокировать();
КонецПроцедуры

Функция ТаблицаДвижений(Регистратор)
	
	НаборЗаписейУчетСебестоимости = РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей();
	НаборЗаписейУчетСебестоимости.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписейУчетСебестоимости.Прочитать();

	Колонки = "Период,ВидДвижения,АналитикаУчетаНоменклатуры,Партия,ИдентификаторСтроки,Количество,Стоимость";

	ТаблицаДвиженийУчетСебестоимости = НаборЗаписейУчетСебестоимости.Выгрузить(, Колонки);
	ТаблицаДвижений = ТаблицаДвиженийУчетСебестоимости.СкопироватьКолонки();
	
	Если ЗначениеЗаполнено(ТаблицаДвиженийУчетСебестоимости) Тогда
		
		ПерваяСтрока = НаборЗаписейУчетСебестоимости[0];
		
		Период = ПерваяСтрока.Период;
		МоментВремени = Регистратор.МоментВремени();
		
		ОтборСтрок = Новый Структура("ВидДвижения");
	
		// Списание
		ОтборСтрок.ВидДвижения = ВидДвиженияНакопления.Расход;
		ОстаткиПоПартиямСписание = ТаблицаДвиженийУчетСебестоимости.Скопировать(ОтборСтрок);
		ФормироватьСписаниеПоПартиям = ЗначениеЗаполнено(ОстаткиПоПартиямСписание);
		Если ФормироватьСписаниеПоПартиям Тогда
			ЗаблокироватьРесурсыРегистраОстаткиПоПартиям(ОстаткиПоПартиямСписание);
			НоваяТаблицаСписания = НоваяТаблицаСписания(МоментВремени, Период, ОстаткиПоПартиямСписание);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НоваяТаблицаСписания, ТаблицаДвижений);
		КонецЕсли;
	
		// Поступление
		ОтборСтрок.ВидДвижения = ВидДвиженияНакопления.Приход;
		НоваяТаблицаПоступления = ТаблицаДвиженийУчетСебестоимости.Скопировать(ОтборСтрок);
		Если ЗначениеЗаполнено(НоваяТаблицаПоступления) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НоваяТаблицаПоступления, ТаблицаДвижений);	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДвижений;

КонецФункции

Функция НоваяТаблицаСписания(МоментВремени, Период, ТаблицаСписания)

	ТаблицаСписания.Свернуть("АналитикаУчетаНоменклатуры,ИдентификаторСтроки", "Количество");

	НоваяТаблицаСписания = ТаблицаСписания.СкопироватьКолонки();
	НоваяТаблицаСписания.Колонки.Добавить("Партия", Метаданные.ОпределяемыеТипы.ДокументПартии.Тип);
	НоваяТаблицаСписания.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)));
	НоваяТаблицаСписания.Колонки.Добавить("Период");
	НоваяТаблицаСписания.Колонки.Добавить("ВидДвижения");

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСписания.АналитикаУчетаНоменклатуры,
		|	ТаблицаСписания.ИдентификаторСтроки,
		|	ТаблицаСписания.Количество
		|ПОМЕСТИТЬ ВТ_ТаблицаСписания
		|ИЗ
		|	&ТЗ_ТаблицаСписания КАК ТаблицаСписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаСписания.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ВТ_ТаблицаСписания.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ус_ОстаткиПоПартиямОстатки.Партия,
		|	ВТ_ТаблицаСписания.Количество КАК Количество,
		|	ус_ОстаткиПоПартиямОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ус_ОстаткиПоПартиямОстатки.СтоимостьОстаток КАК СтоимостьОстаток
		|ИЗ
		|	ВТ_ТаблицаСписания КАК ВТ_ТаблицаСписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.усОстаткиПоПартиям.Остатки(&МомВремени, АналитикаУчетаНоменклатуры В
		|			(ВЫБРАТЬ
		|				ВТ_ТаблицаСписания.АналитикаУчетаНоменклатуры
		|			ИЗ
		|				ВТ_ТаблицаСписания КАК ВТ_ТаблицаСписания)) КАК ус_ОстаткиПоПартиямОстатки
		|		ПО ВТ_ТаблицаСписания.АналитикаУчетаНоменклатуры = ус_ОстаткиПоПартиямОстатки.АналитикаУчетаНоменклатуры
		|ГДЕ
		|	ус_ОстаткиПоПартиямОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ус_ОстаткиПоПартиямОстатки.Партия.МоментВремени
		|ИТОГИ
		|	МАКСИМУМ(Количество) КАК Количество,
		|	СУММА(КоличествоОстаток),
		|	СУММА(СтоимостьОстаток)
		|ПО
		|	АналитикаУчетаНоменклатуры,
		|	ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("МомВремени", МоментВремени);
	Запрос.УстановитьПараметр("ТЗ_ТаблицаСписания", ТаблицаСписания);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаАналитикаУчетаНоменклатуры = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАналитикаУчетаНоменклатуры.Следующий() Цикл
		ВыборкаИдентификаторСтроки = ВыборкаАналитикаУчетаНоменклатуры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИдентификаторСтроки.Следующий() Цикл
			
			ОстатокКоличество = ВыборкаИдентификаторСтроки.Количество;
			ВыборкаПартии = ВыборкаИдентификаторСтроки.Выбрать();
			Пока ОстатокКоличество > 0 И ВыборкаПартии.Следующий() Цикл
				
				КоличествоСписания = Мин(ОстатокКоличество, ВыборкаПартии.КоличествоОстаток);
				СтоимостьСписания = ?(КоличествоСписания = ВыборкаПартии.КоличествоОстаток,
					ВыборкаПартии.СтоимостьОстаток,
					ВыборкаПартии.СтоимостьОстаток / ВыборкаПартии.КоличествоОстаток * КоличествоСписания);
				
				НоваяСтрокаСписания = НоваяТаблицаСписания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСписания, ВыборкаПартии, "АналитикаУчетаНоменклатуры,ИдентификаторСтроки,Партия");
				НоваяСтрокаСписания.Количество = КоличествоСписания;
				НоваяСтрокаСписания.Стоимость = СтоимостьСписания;
				ОстатокКоличество = ОстатокКоличество - КоличествоСписания;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;

	НоваяТаблицаСписания.ЗаполнитьЗначения(Период, "Период");
	НоваяТаблицаСписания.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	Возврат НоваяТаблицаСписания;

КонецФункции

#КонецОбласти
