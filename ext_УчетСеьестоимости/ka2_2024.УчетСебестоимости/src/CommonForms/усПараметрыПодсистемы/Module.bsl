
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновитьГраницуПоследовательностиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьГраницуПоследовательности", 5, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГраницуПоследовательности() Экспорт
	ОбновитьГраницуПоследовательностиНаСервере();
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВосстановитьПоследовательность(Команда)
	ВосстановитьПоследовательностьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВариантыОтчетов(Команда)
	ОбновитьВариантыОтчетовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтсутствующиеРегистраторы(Команда)
	СписокНеобходимыхРегистраторов = СписокНеобходимыхРегистраторов();
	Если ЗначениеЗаполнено(СписокНеобходимыхРегистраторов) Тогда
		Для Каждого ОписаниеРегистратора Из СписокНеобходимыхРегистраторов Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеРегистратора);			
		КонецЦикла;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Набор регистраторов корректен");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьГраницуПоследовательностиНаСервере()
	ГраницаПоследовательности = усУправлениеПоследовательностью.ГраницаПоследовательности();
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПоследовательностьНаСервере()
	
	Результат = усУправлениеПоследовательностью.ВосстановитьПоследовательность();
	Если Результат.Отказ Тогда
	    ОбщегоНазначения.СообщитьПользователю("Ошибка восстановления последовательности, по причине: " + Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОбновитьГраницуПоследовательностиНаСервере();
	ОбщегоНазначения.СообщитьПользователю("Последовательность успешно восстановлена");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьВариантыОтчетовНаСервере()
	ВариантыОтчетов.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокНеобходимыхРегистраторов()

	Результат = Новый Массив();

	МетаданныеРегистраСебестоимостьТоваров = Метаданные.РегистрыНакопления.СебестоимостьТоваров;
	МетаданныеРегистраОстаткиПоПартиям = Метаданные.РегистрыНакопления.усОстаткиПоПартиям;
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если Документ.Движения.Содержит(МетаданныеРегистраСебестоимостьТоваров)
				И Не Документ.Движения.Содержит(МетаданныеРегистраОстаткиПоПартиям) Тогда
			Результат.Добавить(СтрШаблон("%1 (%2)", Документ.Имя, Документ.Синоним));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти